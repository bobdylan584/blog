{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8ba1\u7b97\u673a\u89c6\u89c9 \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5b9a\u4e49 \u77e5\u9053\u8ba1\u7b97\u673a\u89c6\u89c9\u5e38\u89c1\u4efb\u52a1 \u77e5\u9053\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5e94\u7528\u573a\u666f 1.\u8ba1\u7b97\u673a\u89c6\u89c9\u5b9a\u4e49 \u00b6 \u8ba1\u7b97\u673a\u89c6\u89c9\u662f\u6307\u7528\u6444\u50cf\u673a\u548c\u7535\u8111\u53ca\u5176\u4ed6\u76f8\u5173\u8bbe\u5907\uff0c\u5bf9\u751f\u7269\u89c6\u89c9\u7684\u4e00\u79cd\u6a21\u62df\u3002\u5b83\u7684\u4e3b\u8981\u4efb\u52a1\u8ba9\u8ba1\u7b97\u673a\u7406\u89e3\u56fe\u7247\u6216\u8005\u89c6\u9891\u4e2d\u7684\u5185\u5bb9\uff0c\u5c31\u50cf\u4eba\u7c7b\u548c\u8bb8\u591a\u5176\u4ed6\u751f\u7269\u6bcf\u5929\u6240\u505a\u7684\u90a3\u6837\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4efb\u52a1\u76ee\u6807\u62c6\u5206\u4e3a\uff1a \u8ba9\u8ba1\u7b97\u673a\u7406\u89e3\u56fe\u7247\u4e2d\u7684\u573a\u666f\uff08\u529e\u516c\u5ba4\uff0c\u5ba2\u5385\uff0c\u5496\u5561\u5385\u7b49\uff09 \u8ba9\u8ba1\u7b97\u673a\u8bc6\u522b\u573a\u666f\u4e2d\u5305\u542b\u7684\u7269\u4f53\uff08\u5ba0\u7269\uff0c\u4ea4\u901a\u5de5\u5177\uff0c\u4eba\u7b49\uff09 \u8ba9\u8ba1\u7b97\u673a\u5b9a\u4f4d\u7269\u4f53\u5728\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6e\uff08\u7269\u4f53\u7684\u5927\u5c0f\uff0c\u8fb9\u754c\u7b49\uff09 \u8ba9\u8ba1\u7b97\u673a\u7406\u89e3\u7269\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u6216\u884c\u4e3a\uff08\u662f\u5728\u5bf9\u8bdd\uff0c\u6bd4\u8d5b\u6216\u5435\u67b6\u7b49\uff09\uff0c\u4ee5\u53ca\u56fe\u50cf\u8868\u8fbe\u7684\u610f\u4e49\uff08\u559c\u5e86\u7684\uff0c\u60b2\u4f24\u7684\u7b49\uff09 \u90a3\u6211\u4eec\u5728OpenCV\u9636\u6bb5\uff0c\u4e3b\u8981\u5b66\u4e60\u56fe\u50cf\u5904\u7406\uff0c\u800c\u56fe\u50cf\u5904\u7406\u4e3b\u8981\u76ee\u7684\u662f\u5bf9\u56fe\u50cf\u7684\u5904\u7406\uff0c\u6bd4\u5982\u5e73\u6ed1\uff0c\u7f29\u653e\u7b49\u8fdb\u800c\u4e3a\u5176\u4ed6\u4efb\u52a1\uff08\u6bd4\u5982\u201c\u8ba1\u7b97\u673a\u89c6\u89c9\u201d\uff09\u505a\u597d\u524d\u671f\u5de5\u4f5c\u3002 2.\u5e38\u89c1\u4efb\u52a1 \u00b6 \u6839\u636e\u4e0a\u8ff0\u5bf9\u8ba1\u7b97\u673a\u89c6\u89c9\u76ee\u6807\u4efb\u52a1\u7684\u5206\u89e3\uff0c\u53ef\u5c06\u5176\u5206\u4e3a\u4e09\u5927\u7ecf\u5178\u4efb\u52a1\uff1a\u56fe\u50cf\u5206\u7c7b\u3001\u76ee\u6807\u68c0\u6d4b\u3001\u56fe\u50cf\u5206\u5272 \u56fe\u50cf\u5206\u7c7b\uff08Classification\uff09\uff1a\u5373\u662f\u5c06\u56fe\u50cf\u7ed3\u6784\u5316\u4e3a\u67d0\u4e00\u7c7b\u522b\u7684\u4fe1\u606f\uff0c\u7528\u4e8b\u5148\u786e\u5b9a\u597d\u7684\u7c7b\u522b(category)\u6765\u63cf\u8ff0\u56fe\u7247\u3002 \u76ee\u6807\u68c0\u6d4b\uff08Detection\uff09\uff1a\u5206\u7c7b\u4efb\u52a1\u5173\u5fc3\u6574\u4f53\uff0c\u7ed9\u51fa\u7684\u662f\u6574\u5f20\u56fe\u7247\u7684\u5185\u5bb9\u63cf\u8ff0\uff0c\u800c\u68c0\u6d4b\u5219\u5173\u6ce8\u7279\u5b9a\u7684\u7269\u4f53\u76ee\u6807\uff0c\u8981\u6c42\u540c\u65f6\u83b7\u5f97\u8fd9\u4e00\u76ee\u6807\u7684\u7c7b\u522b\u4fe1\u606f\u548c\u4f4d\u7f6e\u4fe1\u606f\uff08classification + localization\uff09\u3002 \u56fe\u50cf\u5206\u5272\uff08Segmentation\uff09\uff1a\u5206\u5272\u662f\u5bf9\u56fe\u50cf\u7684\u50cf\u7d20\u7ea7\u63cf\u8ff0\uff0c\u5b83\u8d4b\u4e88\u6bcf\u4e2a\u50cf\u7d20\u7c7b\u522b\uff08\u5b9e\u4f8b\uff09\u610f\u4e49\uff0c\u9002\u7528\u4e8e\u7406\u89e3\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u666f\uff0c\u5982\u65e0\u4eba\u9a7e\u9a76\u4e2d\u5bf9\u9053\u8def\u548c\u975e\u9053\u8def\u7684\u5206\u5272\u3002 \u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u5c06\u56f4\u7ed5\u524d\u4e24\u4e2a\u56fe\u50cf\u5206\u7c7b\u548c\u76ee\u6807\u68c0\u6d4b\u4e24\u4e2a\u4efb\u52a1\u5bf9\u8ba1\u7b97\u673a\u89c6\u89c9\u8fdb\u884c\u4ecb\u7ecd\u3002 3.\u5e94\u7528\u573a\u666f \u00b6 \u8ba1\u7b97\u673a\u89c6\u89c9\u6d89\u53ca\u7684\u9886\u57df\u590d\u6742\uff0c\u5177\u6709\u5e7f\u6cdb\u7684\u5b9e\u9645\u5e94\u7528\u8303\u56f4\u3002\u603b\u4f53\u800c\u8a00\uff0c\u4f9d\u8d56\u4e8e\u4eba\u5de5\u667a\u80fd\u548c\u673a\u5668\u5b66\u4e60\uff0c\u5c24\u5176\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u521b\u65b0\u7684\u597d\u5904\u662f\uff0c\u4ece\u7535\u5b50\u5546\u52a1\u884c\u4e1a\u5230\u66f4\u7ecf\u5178\u7684\u5404\u79cd\u7c7b\u578b\u548c\u89c4\u6a21\u7684\u516c\u53f8\u90fd\u53ef\u4ee5\u5229\u7528\u5176\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86\u76f8\u5173\u7684\u5e94\u7528\u573a\u666f\u53ca\u76f8\u5173\u7684\u4f01\u4e1a\uff1a 3.1 \u4eba\u8138\u8bc6\u522b \u00b6 \u4eba\u8138\u8bc6\u522b\u6280\u672f\u76ee\u524d\u5df2\u7ecf\u5e7f\u6cdb\u5e94\u7528\u4e8e\u91d1\u878d\u3001\u53f8\u6cd5\u3001\u519b\u961f\u3001\u516c\u5b89\u3001\u8fb9\u68c0\u3001\u653f\u5e9c\u3001\u822a\u5929\u3001\u7535\u529b\u3001\u5de5\u5382\u3001\u6559\u80b2\u3001\u533b\u7597\u7b49\u884c\u4e1a\u3002\u636e\u4e1a\u5185\u4eba\u58eb\u5206\u6790\uff0c\u6211\u56fd\u7684\u4eba\u8138\u8bc6\u522b\u4ea7\u4e1a\u7684\u9700\u6c42\u65fa\u76db\uff0c\u9700\u6c42\u63a8\u52a8\u5bfc\u81f4\u4f01\u4e1a\u6562\u4e8e\u6295\u5165\u8d44\u91d1\u3002 \u4ee3\u8868\u4f01\u4e1a\uff1aFace++\u65f7\u89c6\u79d1\u6280\u3001\u4f9d\u56fe\u79d1\u6280\u3001\u5546\u6c64\u79d1\u6280\u3001\u6df1\u9192\u79d1\u6280\u3001\u4e91\u4ece\u79d1\u6280\u7b49\u3002 3.2 \u89c6\u9891\u76d1\u63a7 \u00b6 \u4eba\u5de5\u667a\u80fd\u6280\u672f\u53ef\u4ee5\u5bf9\u7ed3\u6784\u5316\u7684\u4eba\u3001\u8f66\u3001\u7269\u7b49\u89c6\u9891\u5185\u5bb9\u4fe1\u606f\u8fdb\u884c\u5feb\u901f\u68c0\u7d22\u3001\u67e5\u8be2\u3002\u8fd9\u9879\u5e94\u7528\u4f7f\u5f97\u8ba9\u516c\u5b89\u7cfb\u7edf\u5728\u7e41\u6742\u7684\u76d1\u63a7\u89c6\u9891\u4e2d\u641c\u5bfb\u5230\u7f6a\u72af\u7684\u6709\u4e86\u53ef\u80fd\u3002\u5728\u5927\u91cf\u4eba\u7fa4\u6d41\u52a8\u7684\u4ea4\u901a\u67a2\u7ebd\uff0c\u8be5\u6280\u672f\u4e5f\u88ab\u5e7f\u6cdb\u7528\u4e8e\u4eba\u7fa4\u5206\u6790\u3001\u9632\u63a7\u9884\u8b66\u7b49\u3002 \u4ee3\u8868\u4f01\u4e1a\uff1aSenseTime \u5546\u6c64\u79d1\u6280\u3001DeepGlint \u683c\u7075\u6df1\u77b3\u3001\u4f9d\u56fe\u79d1\u6280\u3001\u4e91\u5929\u52b1\u98de\u3001\u6df1\u7f51\u89c6\u754c\u7b49\u3002 3.3 \u56fe\u7247\u8bc6\u522b\u5206\u6790 \u00b6 \u4ee3\u8868\u4f01\u4e1a\uff1aFace++\u65f7\u89c6\u79d1\u6280\u3001\u56fe\u666e\u79d1\u6280\u3001\u7801\u9686\u79d1\u6280\u3001\u9152\u5494\u5693\u3001YI+\u964c\u4e0a\u82b1\u79d1\u6280\u7b49\u3002 3.4 \u8f85\u52a9\u9a7e\u9a76 \u00b6 \u968f\u7740\u6c7d\u8f66\u7684\u666e\u53ca\uff0c\u6c7d\u8f66\u5df2\u7ecf\u6210\u4e3a\u4eba\u5de5\u667a\u80fd\u6280\u672f\u975e\u5e38\u5927\u7684\u5e94\u7528\u6295\u653e\u65b9\u5411\uff0c\u4f46\u5c31\u76ee\u524d\u6765\u8bf4\uff0c\u60f3\u8981\u5b8c\u5168\u5b9e\u73b0\u81ea\u52a8\u9a7e\u9a76/\u65e0\u4eba\u9a7e\u9a76\uff0c\u8ddd\u79bb\u6280\u672f\u6210\u719f\u8fd8\u6709\u4e00\u6bb5\u8def\u8981\u8d70\u3002\u4e0d\u8fc7\u5229\u7528\u4eba\u5de5\u667a\u80fd\u6280\u672f\uff0c\u6c7d\u8f66\u7684\u9a7e\u9a76\u8f85\u52a9\u7684\u529f\u80fd\u53ca\u5e94\u7528\u8d8a\u6765\u8d8a\u591a\uff0c\u8fd9\u4e9b\u5e94\u7528\u591a\u534a\u662f\u57fa\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u56fe\u50cf\u5904\u7406\u6280\u672f\u6765\u5b9e\u73b0\u3002 \u4ee3\u8868\u4f01\u4e1a\uff1a\u7eb5\u76ee\u79d1\u6280\u3001TuSimple \u56fe\u68ee\u79d1\u6280\u3001\u9a6d\u52bf\u79d1\u6280\u3001MINIEYE \u4f51\u9a7e\u521b\u65b0\u3001\u4e2d\u5929\u5b89\u9a70\u7b49\u3002 \u9664\u4e86\u4e0a\u8ff0\u8fd9\u4e9b\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u5728\u4e09\u7ef4\u89c6\u89c9\uff0c\u4e09\u7ef4\u91cd\u5efa\uff0c\u5de5\u4e1a\u4eff\u771f\uff0c\u5730\u7406\u4fe1\u606f\u7cfb\u7edf\uff0c\u5de5\u4e1a\u89c6\u89c9\uff0c\u533b\u7597\u5f71\u50cf\u8bca\u65ad\uff0c\u6587\u5b57\u8bc6\u522b\uff08OCR\uff09\uff0c\u56fe\u50cf\u53ca\u89c6\u9891\u7f16\u8f91\u7b49\u9886\u57df\u4e5f\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002 4.\u53d1\u5c55\u5386\u53f2\uff08\u4e86\u89e3\uff09 \u00b6 1963\u5e74\uff0cLarry Roberts\u53d1\u8868\u4e86CV\u9886\u57df\u7684\u7b2c\u4e00\u7bc7\u4e13\u4e1a\u8bba\u6587\uff0c\u7528\u4ee5\u5bf9\u7b80\u5355\u51e0\u4f55\u4f53\u8fdb\u884c\u8fb9\u7f18\u63d0\u53d6\u548c\u4e09\u7ef4\u91cd\u5efa\u3002 1966\u5e74\uff0c\u9ebb\u7701\u7406\u5de5\u5b66\u9662(MIT)\u53d1\u8d77\u4e86\u4e00\u4e2a\u590f\u5b63\u9879\u76ee\uff0c\u76ee\u6807\u662f\u642d\u5efa\u4e00\u4e2a\u673a\u5668\u89c6\u89c9\u7cfb\u7edf\uff0c\u5b8c\u6210\u6a21\u5f0f\u8bc6\u522b(pattern recognition)\u7b49\u5de5\u4f5c\u3002\u867d\u7136\u672a\u6210\u529f\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u4f5c\u4e3a\u4e00\u4e2a\u79d1\u5b66\u9886\u57df\u7684\u6b63\u5f0f\u8bde\u751f\u7684\u6807\u5fd7\u3002 1982\u5e74\uff0c\u5b66\u8005David Marr\u53d1\u8868\u7684\u8457\u4f5c\u300aVision\u300b\u4ece\u4e25\u8c28\u53c8\u957f\u8fdc\u7684\u89d2\u5ea6\u7ed9\u51fa\u4e86CV\u7684\u53d1\u5c55\u65b9\u5411\u548c\u4e00\u4e9b\u57fa\u672c\u7b97\u6cd5\uff0c\u5176\u4e2d\u4e0d\u4e4f\u73b0\u5728\u4e3a\u4eba\u719f\u77e5\u7684\u201c\u56fe\u5c42\u201d\u7684\u6982\u5ff5\u3001\u8fb9\u7f18\u63d0\u53d6\u3001\u4e09\u7ef4\u91cd\u5efa\u7b49\uff0c\u6807\u5fd7\u7740\u8ba1\u7b97\u673a\u89c6\u89c9\u6210\u4e3a\u4e86\u4e00\u95e8\u72ec\u7acb\u5b66\u79d1\u3002 1999\u5e74David Lowe\u63d0\u51fa\u4e86\u5c3a\u5ea6\u4e0d\u53d8\u7279\u5f81\u53d8\u6362\uff08SIFT, Scale-invariant feature transform\uff09\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\uff0c\u7528\u4e8e\u5339\u914d\u4e0d\u540c\u62cd\u6444\u65b9\u5411\u3001\u7eb5\u6df1\u3001\u5149\u7ebf\u7b49\u56fe\u7247\u4e2d\u7684\u76f8\u540c\u5143\u7d20\u3002 2009\u5e74\uff0c\u7531Felzenszwalb\u6559\u6388\u5728\u63d0\u51fa\u57fa\u4e8eHOG\u7684deformable parts model\uff0c\u53ef\u53d8\u5f62\u96f6\u4ef6\u6a21\u578b\u5f00\u53d1\uff0c\u5b83\u662f\u6df1\u5ea6\u5b66\u4e60\u4e4b\u524d\u6700\u597d\u7684\u6700\u6210\u529f\u7684objectdetection & recognition\u7b97\u6cd5\u3002 Everingham\u7b49\u4eba\u57282006\u5e74\u81f32012\u5e74\u95f4\u642d\u5efa\u4e86\u4e00\u4e2a\u5927\u578b\u56fe\u7247\u6570\u636e\u5e93\uff0c\u4f9b\u673a\u5668\u8bc6\u522b\u548c\u8bad\u7ec3\uff0c\u79f0\u4e3aPASCAL Visual Object Challenge\uff0c\u8be5\u6570\u636e\u5e93\u4e2d\u670920\u79cd\u7c7b\u522b\u7684\u56fe\u7247\uff0c\u6bcf\u79cd\u56fe\u7247\u6570\u91cf\u5728\u4e00\u5343\u81f3\u4e00\u4e07\u5f20\u4e0d\u7b49\u3002 2009\u5e74\uff0c\u674e\u98de\u98de\u6559\u6388\u7b49\u5728CVPR2009\u4e0a\u53d1\u8868\u4e86\u4e00\u7bc7\u540d\u4e3a\u300aImageNet: A Large-Scale Hierarchical Image Database\u300b\u7684\u8bba\u6587\uff0c\u53d1\u5e03\u4e86ImageNet\u6570\u636e\u96c6\uff0c\u8fd9\u662f\u4e3a\u4e86\u68c0\u6d4b\u8ba1\u7b97\u673a\u89c6\u89c9\u80fd\u5426\u8bc6\u522b\u81ea\u7136\u4e07\u7269\uff0c\u56de\u5f52\u673a\u5668\u5b66\u4e60\uff0c\u514b\u670d\u8fc7\u62df\u5408\u95ee\u9898\u3002 2012 \u5e74\uff0cAlex Krizhevsky\u3001Ilya Sutskever \u548c Geoffrey Hinton \u521b\u9020\u4e86\u4e00\u4e2a\u201c\u5927\u578b\u7684\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u201d\uff0c\u4e5f\u5373\u73b0\u5728\u4f17\u6240\u5468\u77e5\u7684 AlexNet\uff0c\u8d62\u5f97\u4e86\u5f53\u5e74\u7684 ILSVRC\u3002\u8fd9\u662f\u53f2\u4e0a\u7b2c\u4e00\u6b21\u6709\u6a21\u578b\u5728 ImageNet \u6570\u636e\u96c6\u8868\u73b0\u5982\u6b64\u51fa\u8272\u3002\u81ea\u90a3\u65f6\u8d77\uff0cCNN \u624d\u6210\u4e86\u5bb6\u55bb\u6237\u6653\u7684\u540d\u5b57\u3002 2014\u5e74\uff0c\u8499\u7279\u5229\u5c14\u5927\u5b66\u63d0\u51fa\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09\uff1a\u62e5\u6709\u4e24\u4e2a\u76f8\u4e92\u7ade\u4e89\u7684\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u4f7f\u673a\u5668\u5b66\u4e60\u5f97\u66f4\u5feb\u3002\u4e00\u4e2a\u7f51\u7edc\u5c1d\u8bd5\u6a21\u4eff\u771f\u5b9e\u6570\u636e\u751f\u6210\u5047\u7684\u6570\u636e\uff0c\u800c\u53e6\u4e00\u4e2a\u7f51\u7edc\u5219\u8bd5\u56fe\u5c06\u5047\u6570\u636e\u533a\u5206\u51fa\u6765\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4e24\u4e2a\u7f51\u7edc\u90fd\u4f1a\u5f97\u5230\u8bad\u7ec3\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09\u88ab\u8ba4\u4e3a\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u7684\u91cd\u5927\u7a81\u7834\u3002 2018\u5e74\u672b\uff0c\u82f1\u4f1f\u8fbe\u53d1\u5e03\u7684\u89c6\u9891\u5230\u89c6\u9891\u751f\u6210\uff08Video-to-Video synthesis\uff09\uff0c\u5b83\u901a\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u53d1\u751f\u5668\u3001\u9274\u522b\u5668\u7f51\u7edc\u4ee5\u53ca\u65f6\u7a7a\u5bf9\u6297\u7269\u955c\uff0c\u5408\u6210\u9ad8\u5206\u8fa8\u7387\u3001\u7167\u7247\u7ea7\u771f\u5b9e\u3001\u65f6\u95f4\u4e00\u81f4\u7684\u89c6\u9891\uff0c\u5b9e\u73b0\u4e86\u8ba9AI\u66f4\u5177\u7269\u7406\u610f\u8bc6\uff0c\u66f4\u5f3a\u5927\uff0c\u5e76\u80fd\u591f\u63a8\u5e7f\u5230\u65b0\u7684\u548c\u770b\u4e0d\u89c1\u7684\u66f4\u591a\u573a\u666f\u3002 2019\uff0c\u66f4\u5f3a\u5927\u7684GAN\uff0cBigGAN\uff0c\u662f\u62e5\u6709\u4e86\u66f4\u806a\u660e\u7684\u5b66\u4e60\u6280\u5de7\u7684GAN\uff0c\u7531\u5b83\u8bad\u7ec3\u751f\u6210\u7684\u56fe\u50cf\u8fde\u5b83\u81ea\u5df1\u90fd\u5206\u8fa8\u4e0d\u51fa\u771f\u5047\uff0c\u56e0\u4e3a\u9664\u975e\u62ff\u663e\u5fae\u955c\u770b\uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u5224\u65ad\u8be5\u56fe\u50cf\u662f\u5426\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u56e0\u800c\uff0c\u5b83\u66f4\u88ab\u8a89\u4e3a\u53f2\u4e0a\u6700\u5f3a\u7684\u56fe\u50cf\u751f\u6210\u5668. \u603b\u7ed3 \u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5b9a\u4e49 \u8ba9\u8ba1\u7b97\u673a\u7406\u89e3\u56fe\u7247\u6216\u8005\u89c6\u9891\u4e2d\u7684\u5185\u5bb9 \u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u4efb\u52a1 \u56fe\u50cf\u5206\u7c7b\uff0c\u76ee\u6807\u68c0\u6d4b\uff0c\u56fe\u50cf\u5206\u5272 \u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5e94\u7528\u573a\u666f \u4eba\u8138\u8bc6\u522b\uff0c\u89c6\u9891\u76d1\u63a7\uff0c\u56fe\u7247\u8bc6\u522b\u5206\u6790\uff0c\u8f85\u52a9\u9a7e\u9a76","title":"\u8bfe\u7a0b\u4ecb\u7ecd"},{"location":"#_1","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5b9a\u4e49 \u77e5\u9053\u8ba1\u7b97\u673a\u89c6\u89c9\u5e38\u89c1\u4efb\u52a1 \u77e5\u9053\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5e94\u7528\u573a\u666f","title":"\u8ba1\u7b97\u673a\u89c6\u89c9"},{"location":"#1","text":"\u8ba1\u7b97\u673a\u89c6\u89c9\u662f\u6307\u7528\u6444\u50cf\u673a\u548c\u7535\u8111\u53ca\u5176\u4ed6\u76f8\u5173\u8bbe\u5907\uff0c\u5bf9\u751f\u7269\u89c6\u89c9\u7684\u4e00\u79cd\u6a21\u62df\u3002\u5b83\u7684\u4e3b\u8981\u4efb\u52a1\u8ba9\u8ba1\u7b97\u673a\u7406\u89e3\u56fe\u7247\u6216\u8005\u89c6\u9891\u4e2d\u7684\u5185\u5bb9\uff0c\u5c31\u50cf\u4eba\u7c7b\u548c\u8bb8\u591a\u5176\u4ed6\u751f\u7269\u6bcf\u5929\u6240\u505a\u7684\u90a3\u6837\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4efb\u52a1\u76ee\u6807\u62c6\u5206\u4e3a\uff1a \u8ba9\u8ba1\u7b97\u673a\u7406\u89e3\u56fe\u7247\u4e2d\u7684\u573a\u666f\uff08\u529e\u516c\u5ba4\uff0c\u5ba2\u5385\uff0c\u5496\u5561\u5385\u7b49\uff09 \u8ba9\u8ba1\u7b97\u673a\u8bc6\u522b\u573a\u666f\u4e2d\u5305\u542b\u7684\u7269\u4f53\uff08\u5ba0\u7269\uff0c\u4ea4\u901a\u5de5\u5177\uff0c\u4eba\u7b49\uff09 \u8ba9\u8ba1\u7b97\u673a\u5b9a\u4f4d\u7269\u4f53\u5728\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6e\uff08\u7269\u4f53\u7684\u5927\u5c0f\uff0c\u8fb9\u754c\u7b49\uff09 \u8ba9\u8ba1\u7b97\u673a\u7406\u89e3\u7269\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u6216\u884c\u4e3a\uff08\u662f\u5728\u5bf9\u8bdd\uff0c\u6bd4\u8d5b\u6216\u5435\u67b6\u7b49\uff09\uff0c\u4ee5\u53ca\u56fe\u50cf\u8868\u8fbe\u7684\u610f\u4e49\uff08\u559c\u5e86\u7684\uff0c\u60b2\u4f24\u7684\u7b49\uff09 \u90a3\u6211\u4eec\u5728OpenCV\u9636\u6bb5\uff0c\u4e3b\u8981\u5b66\u4e60\u56fe\u50cf\u5904\u7406\uff0c\u800c\u56fe\u50cf\u5904\u7406\u4e3b\u8981\u76ee\u7684\u662f\u5bf9\u56fe\u50cf\u7684\u5904\u7406\uff0c\u6bd4\u5982\u5e73\u6ed1\uff0c\u7f29\u653e\u7b49\u8fdb\u800c\u4e3a\u5176\u4ed6\u4efb\u52a1\uff08\u6bd4\u5982\u201c\u8ba1\u7b97\u673a\u89c6\u89c9\u201d\uff09\u505a\u597d\u524d\u671f\u5de5\u4f5c\u3002","title":"1.\u8ba1\u7b97\u673a\u89c6\u89c9\u5b9a\u4e49"},{"location":"#2","text":"\u6839\u636e\u4e0a\u8ff0\u5bf9\u8ba1\u7b97\u673a\u89c6\u89c9\u76ee\u6807\u4efb\u52a1\u7684\u5206\u89e3\uff0c\u53ef\u5c06\u5176\u5206\u4e3a\u4e09\u5927\u7ecf\u5178\u4efb\u52a1\uff1a\u56fe\u50cf\u5206\u7c7b\u3001\u76ee\u6807\u68c0\u6d4b\u3001\u56fe\u50cf\u5206\u5272 \u56fe\u50cf\u5206\u7c7b\uff08Classification\uff09\uff1a\u5373\u662f\u5c06\u56fe\u50cf\u7ed3\u6784\u5316\u4e3a\u67d0\u4e00\u7c7b\u522b\u7684\u4fe1\u606f\uff0c\u7528\u4e8b\u5148\u786e\u5b9a\u597d\u7684\u7c7b\u522b(category)\u6765\u63cf\u8ff0\u56fe\u7247\u3002 \u76ee\u6807\u68c0\u6d4b\uff08Detection\uff09\uff1a\u5206\u7c7b\u4efb\u52a1\u5173\u5fc3\u6574\u4f53\uff0c\u7ed9\u51fa\u7684\u662f\u6574\u5f20\u56fe\u7247\u7684\u5185\u5bb9\u63cf\u8ff0\uff0c\u800c\u68c0\u6d4b\u5219\u5173\u6ce8\u7279\u5b9a\u7684\u7269\u4f53\u76ee\u6807\uff0c\u8981\u6c42\u540c\u65f6\u83b7\u5f97\u8fd9\u4e00\u76ee\u6807\u7684\u7c7b\u522b\u4fe1\u606f\u548c\u4f4d\u7f6e\u4fe1\u606f\uff08classification + localization\uff09\u3002 \u56fe\u50cf\u5206\u5272\uff08Segmentation\uff09\uff1a\u5206\u5272\u662f\u5bf9\u56fe\u50cf\u7684\u50cf\u7d20\u7ea7\u63cf\u8ff0\uff0c\u5b83\u8d4b\u4e88\u6bcf\u4e2a\u50cf\u7d20\u7c7b\u522b\uff08\u5b9e\u4f8b\uff09\u610f\u4e49\uff0c\u9002\u7528\u4e8e\u7406\u89e3\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u666f\uff0c\u5982\u65e0\u4eba\u9a7e\u9a76\u4e2d\u5bf9\u9053\u8def\u548c\u975e\u9053\u8def\u7684\u5206\u5272\u3002 \u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u5c06\u56f4\u7ed5\u524d\u4e24\u4e2a\u56fe\u50cf\u5206\u7c7b\u548c\u76ee\u6807\u68c0\u6d4b\u4e24\u4e2a\u4efb\u52a1\u5bf9\u8ba1\u7b97\u673a\u89c6\u89c9\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"2.\u5e38\u89c1\u4efb\u52a1"},{"location":"#3","text":"\u8ba1\u7b97\u673a\u89c6\u89c9\u6d89\u53ca\u7684\u9886\u57df\u590d\u6742\uff0c\u5177\u6709\u5e7f\u6cdb\u7684\u5b9e\u9645\u5e94\u7528\u8303\u56f4\u3002\u603b\u4f53\u800c\u8a00\uff0c\u4f9d\u8d56\u4e8e\u4eba\u5de5\u667a\u80fd\u548c\u673a\u5668\u5b66\u4e60\uff0c\u5c24\u5176\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u521b\u65b0\u7684\u597d\u5904\u662f\uff0c\u4ece\u7535\u5b50\u5546\u52a1\u884c\u4e1a\u5230\u66f4\u7ecf\u5178\u7684\u5404\u79cd\u7c7b\u578b\u548c\u89c4\u6a21\u7684\u516c\u53f8\u90fd\u53ef\u4ee5\u5229\u7528\u5176\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86\u76f8\u5173\u7684\u5e94\u7528\u573a\u666f\u53ca\u76f8\u5173\u7684\u4f01\u4e1a\uff1a","title":"3.\u5e94\u7528\u573a\u666f"},{"location":"#31","text":"\u4eba\u8138\u8bc6\u522b\u6280\u672f\u76ee\u524d\u5df2\u7ecf\u5e7f\u6cdb\u5e94\u7528\u4e8e\u91d1\u878d\u3001\u53f8\u6cd5\u3001\u519b\u961f\u3001\u516c\u5b89\u3001\u8fb9\u68c0\u3001\u653f\u5e9c\u3001\u822a\u5929\u3001\u7535\u529b\u3001\u5de5\u5382\u3001\u6559\u80b2\u3001\u533b\u7597\u7b49\u884c\u4e1a\u3002\u636e\u4e1a\u5185\u4eba\u58eb\u5206\u6790\uff0c\u6211\u56fd\u7684\u4eba\u8138\u8bc6\u522b\u4ea7\u4e1a\u7684\u9700\u6c42\u65fa\u76db\uff0c\u9700\u6c42\u63a8\u52a8\u5bfc\u81f4\u4f01\u4e1a\u6562\u4e8e\u6295\u5165\u8d44\u91d1\u3002 \u4ee3\u8868\u4f01\u4e1a\uff1aFace++\u65f7\u89c6\u79d1\u6280\u3001\u4f9d\u56fe\u79d1\u6280\u3001\u5546\u6c64\u79d1\u6280\u3001\u6df1\u9192\u79d1\u6280\u3001\u4e91\u4ece\u79d1\u6280\u7b49\u3002","title":"3.1 \u4eba\u8138\u8bc6\u522b"},{"location":"#32","text":"\u4eba\u5de5\u667a\u80fd\u6280\u672f\u53ef\u4ee5\u5bf9\u7ed3\u6784\u5316\u7684\u4eba\u3001\u8f66\u3001\u7269\u7b49\u89c6\u9891\u5185\u5bb9\u4fe1\u606f\u8fdb\u884c\u5feb\u901f\u68c0\u7d22\u3001\u67e5\u8be2\u3002\u8fd9\u9879\u5e94\u7528\u4f7f\u5f97\u8ba9\u516c\u5b89\u7cfb\u7edf\u5728\u7e41\u6742\u7684\u76d1\u63a7\u89c6\u9891\u4e2d\u641c\u5bfb\u5230\u7f6a\u72af\u7684\u6709\u4e86\u53ef\u80fd\u3002\u5728\u5927\u91cf\u4eba\u7fa4\u6d41\u52a8\u7684\u4ea4\u901a\u67a2\u7ebd\uff0c\u8be5\u6280\u672f\u4e5f\u88ab\u5e7f\u6cdb\u7528\u4e8e\u4eba\u7fa4\u5206\u6790\u3001\u9632\u63a7\u9884\u8b66\u7b49\u3002 \u4ee3\u8868\u4f01\u4e1a\uff1aSenseTime \u5546\u6c64\u79d1\u6280\u3001DeepGlint \u683c\u7075\u6df1\u77b3\u3001\u4f9d\u56fe\u79d1\u6280\u3001\u4e91\u5929\u52b1\u98de\u3001\u6df1\u7f51\u89c6\u754c\u7b49\u3002","title":"3.2 \u89c6\u9891\u76d1\u63a7"},{"location":"#33","text":"\u4ee3\u8868\u4f01\u4e1a\uff1aFace++\u65f7\u89c6\u79d1\u6280\u3001\u56fe\u666e\u79d1\u6280\u3001\u7801\u9686\u79d1\u6280\u3001\u9152\u5494\u5693\u3001YI+\u964c\u4e0a\u82b1\u79d1\u6280\u7b49\u3002","title":"3.3 \u56fe\u7247\u8bc6\u522b\u5206\u6790"},{"location":"#34","text":"\u968f\u7740\u6c7d\u8f66\u7684\u666e\u53ca\uff0c\u6c7d\u8f66\u5df2\u7ecf\u6210\u4e3a\u4eba\u5de5\u667a\u80fd\u6280\u672f\u975e\u5e38\u5927\u7684\u5e94\u7528\u6295\u653e\u65b9\u5411\uff0c\u4f46\u5c31\u76ee\u524d\u6765\u8bf4\uff0c\u60f3\u8981\u5b8c\u5168\u5b9e\u73b0\u81ea\u52a8\u9a7e\u9a76/\u65e0\u4eba\u9a7e\u9a76\uff0c\u8ddd\u79bb\u6280\u672f\u6210\u719f\u8fd8\u6709\u4e00\u6bb5\u8def\u8981\u8d70\u3002\u4e0d\u8fc7\u5229\u7528\u4eba\u5de5\u667a\u80fd\u6280\u672f\uff0c\u6c7d\u8f66\u7684\u9a7e\u9a76\u8f85\u52a9\u7684\u529f\u80fd\u53ca\u5e94\u7528\u8d8a\u6765\u8d8a\u591a\uff0c\u8fd9\u4e9b\u5e94\u7528\u591a\u534a\u662f\u57fa\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u56fe\u50cf\u5904\u7406\u6280\u672f\u6765\u5b9e\u73b0\u3002 \u4ee3\u8868\u4f01\u4e1a\uff1a\u7eb5\u76ee\u79d1\u6280\u3001TuSimple \u56fe\u68ee\u79d1\u6280\u3001\u9a6d\u52bf\u79d1\u6280\u3001MINIEYE \u4f51\u9a7e\u521b\u65b0\u3001\u4e2d\u5929\u5b89\u9a70\u7b49\u3002 \u9664\u4e86\u4e0a\u8ff0\u8fd9\u4e9b\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u5728\u4e09\u7ef4\u89c6\u89c9\uff0c\u4e09\u7ef4\u91cd\u5efa\uff0c\u5de5\u4e1a\u4eff\u771f\uff0c\u5730\u7406\u4fe1\u606f\u7cfb\u7edf\uff0c\u5de5\u4e1a\u89c6\u89c9\uff0c\u533b\u7597\u5f71\u50cf\u8bca\u65ad\uff0c\u6587\u5b57\u8bc6\u522b\uff08OCR\uff09\uff0c\u56fe\u50cf\u53ca\u89c6\u9891\u7f16\u8f91\u7b49\u9886\u57df\u4e5f\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002","title":"3.4 \u8f85\u52a9\u9a7e\u9a76"},{"location":"#4","text":"1963\u5e74\uff0cLarry Roberts\u53d1\u8868\u4e86CV\u9886\u57df\u7684\u7b2c\u4e00\u7bc7\u4e13\u4e1a\u8bba\u6587\uff0c\u7528\u4ee5\u5bf9\u7b80\u5355\u51e0\u4f55\u4f53\u8fdb\u884c\u8fb9\u7f18\u63d0\u53d6\u548c\u4e09\u7ef4\u91cd\u5efa\u3002 1966\u5e74\uff0c\u9ebb\u7701\u7406\u5de5\u5b66\u9662(MIT)\u53d1\u8d77\u4e86\u4e00\u4e2a\u590f\u5b63\u9879\u76ee\uff0c\u76ee\u6807\u662f\u642d\u5efa\u4e00\u4e2a\u673a\u5668\u89c6\u89c9\u7cfb\u7edf\uff0c\u5b8c\u6210\u6a21\u5f0f\u8bc6\u522b(pattern recognition)\u7b49\u5de5\u4f5c\u3002\u867d\u7136\u672a\u6210\u529f\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u4f5c\u4e3a\u4e00\u4e2a\u79d1\u5b66\u9886\u57df\u7684\u6b63\u5f0f\u8bde\u751f\u7684\u6807\u5fd7\u3002 1982\u5e74\uff0c\u5b66\u8005David Marr\u53d1\u8868\u7684\u8457\u4f5c\u300aVision\u300b\u4ece\u4e25\u8c28\u53c8\u957f\u8fdc\u7684\u89d2\u5ea6\u7ed9\u51fa\u4e86CV\u7684\u53d1\u5c55\u65b9\u5411\u548c\u4e00\u4e9b\u57fa\u672c\u7b97\u6cd5\uff0c\u5176\u4e2d\u4e0d\u4e4f\u73b0\u5728\u4e3a\u4eba\u719f\u77e5\u7684\u201c\u56fe\u5c42\u201d\u7684\u6982\u5ff5\u3001\u8fb9\u7f18\u63d0\u53d6\u3001\u4e09\u7ef4\u91cd\u5efa\u7b49\uff0c\u6807\u5fd7\u7740\u8ba1\u7b97\u673a\u89c6\u89c9\u6210\u4e3a\u4e86\u4e00\u95e8\u72ec\u7acb\u5b66\u79d1\u3002 1999\u5e74David Lowe\u63d0\u51fa\u4e86\u5c3a\u5ea6\u4e0d\u53d8\u7279\u5f81\u53d8\u6362\uff08SIFT, Scale-invariant feature transform\uff09\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\uff0c\u7528\u4e8e\u5339\u914d\u4e0d\u540c\u62cd\u6444\u65b9\u5411\u3001\u7eb5\u6df1\u3001\u5149\u7ebf\u7b49\u56fe\u7247\u4e2d\u7684\u76f8\u540c\u5143\u7d20\u3002 2009\u5e74\uff0c\u7531Felzenszwalb\u6559\u6388\u5728\u63d0\u51fa\u57fa\u4e8eHOG\u7684deformable parts model\uff0c\u53ef\u53d8\u5f62\u96f6\u4ef6\u6a21\u578b\u5f00\u53d1\uff0c\u5b83\u662f\u6df1\u5ea6\u5b66\u4e60\u4e4b\u524d\u6700\u597d\u7684\u6700\u6210\u529f\u7684objectdetection & recognition\u7b97\u6cd5\u3002 Everingham\u7b49\u4eba\u57282006\u5e74\u81f32012\u5e74\u95f4\u642d\u5efa\u4e86\u4e00\u4e2a\u5927\u578b\u56fe\u7247\u6570\u636e\u5e93\uff0c\u4f9b\u673a\u5668\u8bc6\u522b\u548c\u8bad\u7ec3\uff0c\u79f0\u4e3aPASCAL Visual Object Challenge\uff0c\u8be5\u6570\u636e\u5e93\u4e2d\u670920\u79cd\u7c7b\u522b\u7684\u56fe\u7247\uff0c\u6bcf\u79cd\u56fe\u7247\u6570\u91cf\u5728\u4e00\u5343\u81f3\u4e00\u4e07\u5f20\u4e0d\u7b49\u3002 2009\u5e74\uff0c\u674e\u98de\u98de\u6559\u6388\u7b49\u5728CVPR2009\u4e0a\u53d1\u8868\u4e86\u4e00\u7bc7\u540d\u4e3a\u300aImageNet: A Large-Scale Hierarchical Image Database\u300b\u7684\u8bba\u6587\uff0c\u53d1\u5e03\u4e86ImageNet\u6570\u636e\u96c6\uff0c\u8fd9\u662f\u4e3a\u4e86\u68c0\u6d4b\u8ba1\u7b97\u673a\u89c6\u89c9\u80fd\u5426\u8bc6\u522b\u81ea\u7136\u4e07\u7269\uff0c\u56de\u5f52\u673a\u5668\u5b66\u4e60\uff0c\u514b\u670d\u8fc7\u62df\u5408\u95ee\u9898\u3002 2012 \u5e74\uff0cAlex Krizhevsky\u3001Ilya Sutskever \u548c Geoffrey Hinton \u521b\u9020\u4e86\u4e00\u4e2a\u201c\u5927\u578b\u7684\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u201d\uff0c\u4e5f\u5373\u73b0\u5728\u4f17\u6240\u5468\u77e5\u7684 AlexNet\uff0c\u8d62\u5f97\u4e86\u5f53\u5e74\u7684 ILSVRC\u3002\u8fd9\u662f\u53f2\u4e0a\u7b2c\u4e00\u6b21\u6709\u6a21\u578b\u5728 ImageNet \u6570\u636e\u96c6\u8868\u73b0\u5982\u6b64\u51fa\u8272\u3002\u81ea\u90a3\u65f6\u8d77\uff0cCNN \u624d\u6210\u4e86\u5bb6\u55bb\u6237\u6653\u7684\u540d\u5b57\u3002 2014\u5e74\uff0c\u8499\u7279\u5229\u5c14\u5927\u5b66\u63d0\u51fa\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09\uff1a\u62e5\u6709\u4e24\u4e2a\u76f8\u4e92\u7ade\u4e89\u7684\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u4f7f\u673a\u5668\u5b66\u4e60\u5f97\u66f4\u5feb\u3002\u4e00\u4e2a\u7f51\u7edc\u5c1d\u8bd5\u6a21\u4eff\u771f\u5b9e\u6570\u636e\u751f\u6210\u5047\u7684\u6570\u636e\uff0c\u800c\u53e6\u4e00\u4e2a\u7f51\u7edc\u5219\u8bd5\u56fe\u5c06\u5047\u6570\u636e\u533a\u5206\u51fa\u6765\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4e24\u4e2a\u7f51\u7edc\u90fd\u4f1a\u5f97\u5230\u8bad\u7ec3\uff0c\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff08GAN\uff09\u88ab\u8ba4\u4e3a\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u7684\u91cd\u5927\u7a81\u7834\u3002 2018\u5e74\u672b\uff0c\u82f1\u4f1f\u8fbe\u53d1\u5e03\u7684\u89c6\u9891\u5230\u89c6\u9891\u751f\u6210\uff08Video-to-Video synthesis\uff09\uff0c\u5b83\u901a\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u53d1\u751f\u5668\u3001\u9274\u522b\u5668\u7f51\u7edc\u4ee5\u53ca\u65f6\u7a7a\u5bf9\u6297\u7269\u955c\uff0c\u5408\u6210\u9ad8\u5206\u8fa8\u7387\u3001\u7167\u7247\u7ea7\u771f\u5b9e\u3001\u65f6\u95f4\u4e00\u81f4\u7684\u89c6\u9891\uff0c\u5b9e\u73b0\u4e86\u8ba9AI\u66f4\u5177\u7269\u7406\u610f\u8bc6\uff0c\u66f4\u5f3a\u5927\uff0c\u5e76\u80fd\u591f\u63a8\u5e7f\u5230\u65b0\u7684\u548c\u770b\u4e0d\u89c1\u7684\u66f4\u591a\u573a\u666f\u3002 2019\uff0c\u66f4\u5f3a\u5927\u7684GAN\uff0cBigGAN\uff0c\u662f\u62e5\u6709\u4e86\u66f4\u806a\u660e\u7684\u5b66\u4e60\u6280\u5de7\u7684GAN\uff0c\u7531\u5b83\u8bad\u7ec3\u751f\u6210\u7684\u56fe\u50cf\u8fde\u5b83\u81ea\u5df1\u90fd\u5206\u8fa8\u4e0d\u51fa\u771f\u5047\uff0c\u56e0\u4e3a\u9664\u975e\u62ff\u663e\u5fae\u955c\u770b\uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u5224\u65ad\u8be5\u56fe\u50cf\u662f\u5426\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u56e0\u800c\uff0c\u5b83\u66f4\u88ab\u8a89\u4e3a\u53f2\u4e0a\u6700\u5f3a\u7684\u56fe\u50cf\u751f\u6210\u5668. \u603b\u7ed3 \u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5b9a\u4e49 \u8ba9\u8ba1\u7b97\u673a\u7406\u89e3\u56fe\u7247\u6216\u8005\u89c6\u9891\u4e2d\u7684\u5185\u5bb9 \u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u4efb\u52a1 \u56fe\u50cf\u5206\u7c7b\uff0c\u76ee\u6807\u68c0\u6d4b\uff0c\u56fe\u50cf\u5206\u5272 \u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5e94\u7528\u573a\u666f \u4eba\u8138\u8bc6\u522b\uff0c\u89c6\u9891\u76d1\u63a7\uff0c\u56fe\u7247\u8bc6\u522b\u5206\u6790\uff0c\u8f85\u52a9\u9a7e\u9a76","title":"4.\u53d1\u5c55\u5386\u53f2\uff08\u4e86\u89e3\uff09"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/01-overview/","text":"1.1 \u56fe\u50cf\u5206\u7c7b\u7b80\u4ecb \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u56fe\u50cf\u5206\u7c7b\u7684\u76ee\u7684 \u77e5\u9053imageNet\u6570\u636e\u96c6 1 \u56fe\u50cf\u5206\u7c7b \u00b6 \u56fe\u50cf\u5206\u7c7b\u5b9e\u8d28\u4e0a\u5c31\u662f\u4ece\u7ed9\u5b9a\u7684\u7c7b\u522b\u96c6\u5408\u4e2d\u4e3a\u56fe\u50cf\u5206\u914d\u5bf9\u5e94\u6807\u7b7e\u7684\u4efb\u52a1\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7684\u4efb\u52a1\u662f\u5206\u6790\u4e00\u4e2a\u8f93\u5165\u56fe\u50cf\u5e76\u8fd4\u56de\u4e00\u4e2a\u8be5\u56fe\u50cf\u7c7b\u522b\u7684\u6807\u7b7e\u3002 \u5047\u5b9a\u7c7b\u522b\u96c6\u4e3acategories = {dog, cat, panda}\uff0c\u4e4b\u540e\u6211\u4eec\u63d0\u4f9b\u4e00\u5f20\u56fe\u7247\u7ed9\u5206\u7c7b\u6a21\u578b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5206\u7c7b\u6a21\u578b\u7ed9\u56fe\u50cf\u5206\u914d\u591a\u4e2a\u6807\u7b7e\uff0c\u6bcf\u4e2a\u6807\u7b7e\u7684\u6982\u7387\u503c\u4e0d\u540c\uff0c\u5982dog:1%\uff0ccat:4%\uff0cpanda:95%\uff0c\u6839\u636e\u6982\u7387\u503c\u7684\u5927\u5c0f\u5c06\u8be5\u56fe\u7247\u5206\u7c7b\u4e3apanda\uff0c\u90a3\u5c31\u5b8c\u6210\u4e86\u56fe\u50cf\u5206\u7c7b\u7684\u4efb\u52a1\u3002 2 \u5e38\u7528\u6570\u636e\u96c6 \u00b6 2.1 CIFAR-10\u548cCIFAR-100 \u00b6 CIFAR-10\u6570\u636e\u96c65\u4e07\u5f20\u8bad\u7ec3\u56fe\u50cf\u30011\u4e07\u5f20\u6d4b\u8bd5\u56fe\u50cf\u300110\u4e2a\u7c7b\u522b\u3001\u6bcf\u4e2a\u7c7b\u522b\u67096k\u4e2a\u56fe\u50cf\uff0c\u56fe\u50cf\u5927\u5c0f32\u00d732\u00d73\u3002\u4e0b\u56fe\u5217\u4e3e\u4e8610\u4e2a\u7c7b\uff0c\u6bcf\u4e00\u7c7b\u968f\u673a\u5c55\u793a\u4e8610\u5f20\u56fe\u7247\uff1a CIFAR-100\u6570\u636e\u96c6\u4e5f\u662f\u67095\u4e07\u5f20\u8bad\u7ec3\u56fe\u50cf\u30011\u4e07\u5f20\u6d4b\u8bd5\u56fe\u50cf\u3001\u5305\u542b100\u4e2a\u7c7b\u522b\u3001\u56fe\u50cf\u5927\u5c0f32\u00d732\u00d73\u3002 \u5728torchvision\u4e2d\u52a0\u8f7d\u6570\u636e\u96c6\u65f6\uff1a import torchvision \"\"\" \u4f7f\u7528CIFAR10\u8fd9\u4e2a\u6570\u636e\u96c6, root=\"./dataset\": \u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efadataset\u6587\u4ef6\u5939\uff0c\u540c\u65f6\u628a\u6570\u636e\u4fdd\u5b58\u8fdb\u53bb train=True: \u8fd9\u662f\u4e00\u4e2a\u8bad\u7ec3\u96c6\uff0c\u4e3aFalse, \u5219\u8868\u660e\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u96c6 download=True: \u6570\u636e\u96c6\u4f1a\u4ece\u7f51\u4e0a\u4e0b\u8f7d \"\"\" train_set = torchvision . datasets . CIFAR10 ( root = \"./dataset\" , train = True , download = True ) test_set = torchvision . datasets . CIFAR10 ( root = \"./dataset\" , train = False , download = True ) 2.2 ImageNet \u00b6 ImageNet\u6570\u636e\u96c6\u662fILSVRC\u7ade\u8d5b\u4f7f\u7528\u7684\u662f\u6570\u636e\u96c6\uff0c\u7531\u65af\u5766\u798f\u5927\u5b66\u674e\u98de\u98de\u6559\u6388\u4e3b\u5bfc\uff0c\u5305\u542b\u4e86\u8d85\u8fc71400\u4e07\u5f20\u5168\u5c3a\u5bf8\u7684\u6709\u6807\u8bb0\u56fe\u7247\uff0c\u5927\u7ea6\u670922000\u4e2a\u7c7b\u522b\u7684\u6570\u636e\u3002ILSVRC\u5168\u79f0ImageNet Large-Scale Visual Recognition Challenge\uff0c\u662f\u89c6\u89c9\u9886\u57df\u6700\u53d7\u8ffd\u6367\u4e5f\u662f\u6700\u5177\u6743\u5a01\u7684\u5b66\u672f\u7ade\u8d5b\u4e4b\u4e00\uff0c\u4ee3\u8868\u4e86\u56fe\u50cf\u9886\u57df\u7684\u6700\u9ad8\u6c34\u5e73\u3002\u4ece2010\u5e74\u5f00\u59cb\u4e3e\u529e\u52302017\u5e74\u6700\u540e\u4e00\u5c4a\uff0c\u4f7f\u7528ImageNet\u6570\u636e\u96c6\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u603b\u5171\u67091000\u7c7b\u3002 \u8be5\u6bd4\u8d5b\u7684\u83b7\u80dc\u8005\u4ece2012\u5e74\u5f00\u59cb\u90fd\u662f\u4f7f\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7684\u65b9\u6cd5\uff1a 2012\u5e74\u51a0\u519b\u662fAlexNet,\u7531\u4e8e\u51c6\u786e\u7387\u8fdc\u8d85\u4f20\u7edf\u65b9\u6cd5\u7684\u7b2c\u4e8c\u540d\uff08top5\u9519\u8bef\u7387\u4e3a15.3%\uff0c\u7b2c\u4e8c\u540d\u4e3a26.2%\uff09\uff0c\u5f15\u8d77\u4e86\u5f88\u5927\u7684\u8f70\u52a8\u3002\u81ea\u6b64\u4e4b\u540e\uff0cCNN\u6210\u4e3a\u5728\u56fe\u50cf\u8bc6\u522b\u5206\u7c7b\u7684\u6838\u5fc3\u7b97\u6cd5\u6a21\u578b\uff0c\u5e26\u6765\u4e86\u6df1\u5ea6\u5b66\u4e60\u7684\u5927\u7206\u53d1\u3002 2013\u5e74\u51a0\u519b\u662fZFNet\uff0c\u7ed3\u6784\u548cAlexNet\u533a\u522b\u4e0d\u5927\uff0c\u5206\u7c7b\u6548\u679c\u4e5f\u5dee\u4e0d\u591a\u3002 2014\u5e74\u4e9a\u519b\u662fVGG\u7f51\u7edc\uff0c\u7f51\u7edc\u7ed3\u6784\u5341\u5206\u7b80\u5355\uff0c\u56e0\u6b64\u81f3\u4ecaVGG-16\u4ecd\u5728\u5e7f\u6cdb\u4f7f\u7528\u3002 2014\u5e74\u7684\u51a0\u519b\u7f51\u7edc\u662fGoogLeNet \uff0c\u6838\u5fc3\u6a21\u5757\u662fInception Module\u3002Inception\u5386\u7ecf\u4e86V1\u3001V2\u3001V3\u3001V4\u7b49\u591a\u4e2a\u7248\u672c\u7684\u53d1\u5c55\uff0c\u4e0d\u65ad\u8d8b\u4e8e\u5b8c\u5584\u3002GoogLeNet\u53d6\u540d\u4e2dL\u5927\u5199\u662f\u4e3a\u4e86\u5411LeNet\u81f4\u656c\uff0c\u800cInception\u7684\u540d\u5b57\u6765\u6e90\u4e8e\u76d7\u68a6\u7a7a\u95f4\u4e2d\u7684\"we need to go deeper\"\u6897\u3002 2015\u5e74\u51a0\u519b\u7f51\u7edc\u662fResNet\u3002\u6838\u5fc3\u662f\u5e26\u77ed\u8fde\u63a5\u7684\u6b8b\u5dee\u6a21\u5757\uff0c\u5176\u4e2d\u4e3b\u8def\u5f84\u6709\u4e24\u5c42\u5377\u79ef\u6838\uff08Res34\uff09\uff0c\u77ed\u8fde\u63a5\u628a\u6a21\u5757\u7684\u8f93\u5165\u4fe1\u606f\u76f4\u63a5\u548c\u7ecf\u8fc7\u4e24\u6b21\u5377\u79ef\u4e4b\u540e\u7684\u4fe1\u606f\u878d\u5408\uff0c\u76f8\u5f53\u4e8e\u52a0\u4e86\u4e00\u4e2a\u6052\u7b49\u53d8\u6362\u3002\u77ed\u8fde\u63a5\u662f\u6df1\u5ea6\u5b66\u4e60\u53c8\u4e00\u91cd\u8981\u601d\u60f3\uff0c\u9664\u8ba1\u7b97\u673a\u89c6\u89c9\u5916\uff0c\u77ed\u8fde\u63a5\u601d\u60f3\u4e5f\u88ab\u7528\u5230\u4e86\u673a\u5668\u7ffb\u8bd1\u3001\u8bed\u97f3\u8bc6\u522b/\u5408\u6210\u9886\u57df 2017\u5e74\u51a0\u519bSENet\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u53ef\u4ee5\u548c\u5176\u4ed6\u7684\u7f51\u7edc\u67b6\u6784\u7ed3\u5408\uff0c\u6bd4\u5982GoogLeNet\u3001ResNet\u7b49\u3002 \u4e0a\u8ff0\u56fe\u50cf\u5206\u7c7b\u6a21\u578b\u90fd\u6bd4\u8f83\u7ecf\u5178\uff0c\u7279\u522b\u662fVGG16\u3001GoogLeNet\u548cResNet\uff0c\u73b0\u5728\u4ecd\u7136\u5728\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u5bf9\u8fd9\u4e9b\u7f51\u7edc\u8fdb\u884c\u9010\u4e00\u4ecb\u7ecd\u3002 ImageNet\u6570\u636e\u96c6\u8fc7\u4e8e\u5e9e\u5927\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u5c06\u4f7f\u7528\u5c0f\u4e00\u70b9\u7684\u6570\u636e\u96c6-\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u8fdb\u884c\u7ecf\u5178\u7684\u6a21\u578b\u7684\u5b66\u4e60\u3002 2.3 \u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6 \u00b6 \u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u662f\u5305\u542b 5 \u79cd\u7c7b\u578b\u7684\u56fe\u50cf\u6570\u636e\u96c6\uff0c\u4e3b\u8981\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\uff0c\u5176\u5171\u67093670 \u5f20\u56fe\u50cf\uff0c\u5176\u4e2d\u8bad\u7ec3\u56fe\u50cf\u548c\u6d4b\u8bd5\u56fe\u50cf\u5206\u522b\u4e3a 3306 \u5f20\u548c 364\u5f20\uff0c\u4e3b\u8981\u5206\u4e3a\u4e94\u7c7b\u9c9c\u82b1\uff0c\u5206\u522b\u4e3a\u83ca\u82b1\uff0c\u84b2\u516c\u82f1\uff0c\u73ab\u7470\uff0c\u5411\u65e5\u8475\u548c\u90c1\u91d1\u9999\uff0c\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4e2d\u8868\u793a\u4e00\u79cd\u7c7b\u522b\u7684\u6570\u636e\u3002\u6570\u636e\u96c6\u5b58\u653e\u5728dataset/flower\u6587\u4ef6\u5939\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u6211\u4eec\u4f7f\u7528\u4ee5\u4e0bAPI\u5c06\u8fd9\u4e9b\u6570\u636e\u89e3\u6790\u51fa\u6765\uff1a ImageFolder ( root , transform = None ) \u53c2\u6570\u7684\u610f\u4e49\u5982\u4e0b\u6240\u793a\uff1a root\uff1a\u5728root\u6307\u5b9a\u7684\u8def\u5f84\u4e0b\u5bfb\u627e\u56fe\u7247 transform\uff1a\u5bf9\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6bd4\u5982\u7c7b\u578b\u8f6c\u6362\uff0c\u5c3a\u5bf8\u7684\u8c03\u6574\u7b49 \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flowers_train_path = './dataset/flower_datas/train/' flowers_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x224 dataset_transform = torchvision . transforms . Compose ([ torchvision . transforms . ToTensor (), torchvision . transforms . Resize (( 224 , 224 )) ]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flowers_train = ImageFolder ( flowers_train_path , transform = dataset_transform ) flowers_test = ImageFolder ( flowers_test_path , transform = dataset_transform ) \u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6837\u672c\u6570\u91cf\u5e76\u8fdb\u884c\u5c55\u793a\uff1a len ( flowers_train . imgs ) # 3306 len ( flowers_test . imgs ) # 364 # \u56fe\u50cf\u5c55\u793a\uff1a\u968f\u673a\u6307\u5b9a\u67d0\u4e00\u5e45\u56fe\u7247\u8fdb\u884c\u53ef\u89c6\u5316 import matplotlib.pyplot as plt plt . imshow ( flowers_train . __getitem__ ( 3000 )[ 0 ] . permute ( 1 , 2 , 0 )) \u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u5c06\u4f7f\u7528\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u5b66\u4e60\u7ecf\u5178\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u4f7f\u7528\u3002 \u603b\u7ed3 1.\u56fe\u50cf\u5206\u7c7b\u662f\u4ec0\u4e48\uff1f \u4ece\u7ed9\u5b9a\u7684\u7c7b\u522b\u96c6\u5408\u4e2d\u4e3a\u56fe\u50cf\u5206\u914d\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e 2.\u5e38\u7528\u7684\u6570\u636e\u96c6 cifar\u6570\u636e\u96c6,ImageNet\u6570\u636e\u96c6","title":"1.1 \u56fe\u50cf\u5206\u7c7b\u7b80\u4ecb"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/01-overview/#11","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u56fe\u50cf\u5206\u7c7b\u7684\u76ee\u7684 \u77e5\u9053imageNet\u6570\u636e\u96c6","title":"1.1 \u56fe\u50cf\u5206\u7c7b\u7b80\u4ecb"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/01-overview/#1","text":"\u56fe\u50cf\u5206\u7c7b\u5b9e\u8d28\u4e0a\u5c31\u662f\u4ece\u7ed9\u5b9a\u7684\u7c7b\u522b\u96c6\u5408\u4e2d\u4e3a\u56fe\u50cf\u5206\u914d\u5bf9\u5e94\u6807\u7b7e\u7684\u4efb\u52a1\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7684\u4efb\u52a1\u662f\u5206\u6790\u4e00\u4e2a\u8f93\u5165\u56fe\u50cf\u5e76\u8fd4\u56de\u4e00\u4e2a\u8be5\u56fe\u50cf\u7c7b\u522b\u7684\u6807\u7b7e\u3002 \u5047\u5b9a\u7c7b\u522b\u96c6\u4e3acategories = {dog, cat, panda}\uff0c\u4e4b\u540e\u6211\u4eec\u63d0\u4f9b\u4e00\u5f20\u56fe\u7247\u7ed9\u5206\u7c7b\u6a21\u578b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5206\u7c7b\u6a21\u578b\u7ed9\u56fe\u50cf\u5206\u914d\u591a\u4e2a\u6807\u7b7e\uff0c\u6bcf\u4e2a\u6807\u7b7e\u7684\u6982\u7387\u503c\u4e0d\u540c\uff0c\u5982dog:1%\uff0ccat:4%\uff0cpanda:95%\uff0c\u6839\u636e\u6982\u7387\u503c\u7684\u5927\u5c0f\u5c06\u8be5\u56fe\u7247\u5206\u7c7b\u4e3apanda\uff0c\u90a3\u5c31\u5b8c\u6210\u4e86\u56fe\u50cf\u5206\u7c7b\u7684\u4efb\u52a1\u3002","title":"1 \u56fe\u50cf\u5206\u7c7b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/01-overview/#2","text":"","title":"2 \u5e38\u7528\u6570\u636e\u96c6"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/01-overview/#21-cifar-10cifar-100","text":"CIFAR-10\u6570\u636e\u96c65\u4e07\u5f20\u8bad\u7ec3\u56fe\u50cf\u30011\u4e07\u5f20\u6d4b\u8bd5\u56fe\u50cf\u300110\u4e2a\u7c7b\u522b\u3001\u6bcf\u4e2a\u7c7b\u522b\u67096k\u4e2a\u56fe\u50cf\uff0c\u56fe\u50cf\u5927\u5c0f32\u00d732\u00d73\u3002\u4e0b\u56fe\u5217\u4e3e\u4e8610\u4e2a\u7c7b\uff0c\u6bcf\u4e00\u7c7b\u968f\u673a\u5c55\u793a\u4e8610\u5f20\u56fe\u7247\uff1a CIFAR-100\u6570\u636e\u96c6\u4e5f\u662f\u67095\u4e07\u5f20\u8bad\u7ec3\u56fe\u50cf\u30011\u4e07\u5f20\u6d4b\u8bd5\u56fe\u50cf\u3001\u5305\u542b100\u4e2a\u7c7b\u522b\u3001\u56fe\u50cf\u5927\u5c0f32\u00d732\u00d73\u3002 \u5728torchvision\u4e2d\u52a0\u8f7d\u6570\u636e\u96c6\u65f6\uff1a import torchvision \"\"\" \u4f7f\u7528CIFAR10\u8fd9\u4e2a\u6570\u636e\u96c6, root=\"./dataset\": \u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efadataset\u6587\u4ef6\u5939\uff0c\u540c\u65f6\u628a\u6570\u636e\u4fdd\u5b58\u8fdb\u53bb train=True: \u8fd9\u662f\u4e00\u4e2a\u8bad\u7ec3\u96c6\uff0c\u4e3aFalse, \u5219\u8868\u660e\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u96c6 download=True: \u6570\u636e\u96c6\u4f1a\u4ece\u7f51\u4e0a\u4e0b\u8f7d \"\"\" train_set = torchvision . datasets . CIFAR10 ( root = \"./dataset\" , train = True , download = True ) test_set = torchvision . datasets . CIFAR10 ( root = \"./dataset\" , train = False , download = True )","title":"2.1 CIFAR-10\u548cCIFAR-100"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/01-overview/#22-imagenet","text":"ImageNet\u6570\u636e\u96c6\u662fILSVRC\u7ade\u8d5b\u4f7f\u7528\u7684\u662f\u6570\u636e\u96c6\uff0c\u7531\u65af\u5766\u798f\u5927\u5b66\u674e\u98de\u98de\u6559\u6388\u4e3b\u5bfc\uff0c\u5305\u542b\u4e86\u8d85\u8fc71400\u4e07\u5f20\u5168\u5c3a\u5bf8\u7684\u6709\u6807\u8bb0\u56fe\u7247\uff0c\u5927\u7ea6\u670922000\u4e2a\u7c7b\u522b\u7684\u6570\u636e\u3002ILSVRC\u5168\u79f0ImageNet Large-Scale Visual Recognition Challenge\uff0c\u662f\u89c6\u89c9\u9886\u57df\u6700\u53d7\u8ffd\u6367\u4e5f\u662f\u6700\u5177\u6743\u5a01\u7684\u5b66\u672f\u7ade\u8d5b\u4e4b\u4e00\uff0c\u4ee3\u8868\u4e86\u56fe\u50cf\u9886\u57df\u7684\u6700\u9ad8\u6c34\u5e73\u3002\u4ece2010\u5e74\u5f00\u59cb\u4e3e\u529e\u52302017\u5e74\u6700\u540e\u4e00\u5c4a\uff0c\u4f7f\u7528ImageNet\u6570\u636e\u96c6\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u603b\u5171\u67091000\u7c7b\u3002 \u8be5\u6bd4\u8d5b\u7684\u83b7\u80dc\u8005\u4ece2012\u5e74\u5f00\u59cb\u90fd\u662f\u4f7f\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u7684\u65b9\u6cd5\uff1a 2012\u5e74\u51a0\u519b\u662fAlexNet,\u7531\u4e8e\u51c6\u786e\u7387\u8fdc\u8d85\u4f20\u7edf\u65b9\u6cd5\u7684\u7b2c\u4e8c\u540d\uff08top5\u9519\u8bef\u7387\u4e3a15.3%\uff0c\u7b2c\u4e8c\u540d\u4e3a26.2%\uff09\uff0c\u5f15\u8d77\u4e86\u5f88\u5927\u7684\u8f70\u52a8\u3002\u81ea\u6b64\u4e4b\u540e\uff0cCNN\u6210\u4e3a\u5728\u56fe\u50cf\u8bc6\u522b\u5206\u7c7b\u7684\u6838\u5fc3\u7b97\u6cd5\u6a21\u578b\uff0c\u5e26\u6765\u4e86\u6df1\u5ea6\u5b66\u4e60\u7684\u5927\u7206\u53d1\u3002 2013\u5e74\u51a0\u519b\u662fZFNet\uff0c\u7ed3\u6784\u548cAlexNet\u533a\u522b\u4e0d\u5927\uff0c\u5206\u7c7b\u6548\u679c\u4e5f\u5dee\u4e0d\u591a\u3002 2014\u5e74\u4e9a\u519b\u662fVGG\u7f51\u7edc\uff0c\u7f51\u7edc\u7ed3\u6784\u5341\u5206\u7b80\u5355\uff0c\u56e0\u6b64\u81f3\u4ecaVGG-16\u4ecd\u5728\u5e7f\u6cdb\u4f7f\u7528\u3002 2014\u5e74\u7684\u51a0\u519b\u7f51\u7edc\u662fGoogLeNet \uff0c\u6838\u5fc3\u6a21\u5757\u662fInception Module\u3002Inception\u5386\u7ecf\u4e86V1\u3001V2\u3001V3\u3001V4\u7b49\u591a\u4e2a\u7248\u672c\u7684\u53d1\u5c55\uff0c\u4e0d\u65ad\u8d8b\u4e8e\u5b8c\u5584\u3002GoogLeNet\u53d6\u540d\u4e2dL\u5927\u5199\u662f\u4e3a\u4e86\u5411LeNet\u81f4\u656c\uff0c\u800cInception\u7684\u540d\u5b57\u6765\u6e90\u4e8e\u76d7\u68a6\u7a7a\u95f4\u4e2d\u7684\"we need to go deeper\"\u6897\u3002 2015\u5e74\u51a0\u519b\u7f51\u7edc\u662fResNet\u3002\u6838\u5fc3\u662f\u5e26\u77ed\u8fde\u63a5\u7684\u6b8b\u5dee\u6a21\u5757\uff0c\u5176\u4e2d\u4e3b\u8def\u5f84\u6709\u4e24\u5c42\u5377\u79ef\u6838\uff08Res34\uff09\uff0c\u77ed\u8fde\u63a5\u628a\u6a21\u5757\u7684\u8f93\u5165\u4fe1\u606f\u76f4\u63a5\u548c\u7ecf\u8fc7\u4e24\u6b21\u5377\u79ef\u4e4b\u540e\u7684\u4fe1\u606f\u878d\u5408\uff0c\u76f8\u5f53\u4e8e\u52a0\u4e86\u4e00\u4e2a\u6052\u7b49\u53d8\u6362\u3002\u77ed\u8fde\u63a5\u662f\u6df1\u5ea6\u5b66\u4e60\u53c8\u4e00\u91cd\u8981\u601d\u60f3\uff0c\u9664\u8ba1\u7b97\u673a\u89c6\u89c9\u5916\uff0c\u77ed\u8fde\u63a5\u601d\u60f3\u4e5f\u88ab\u7528\u5230\u4e86\u673a\u5668\u7ffb\u8bd1\u3001\u8bed\u97f3\u8bc6\u522b/\u5408\u6210\u9886\u57df 2017\u5e74\u51a0\u519bSENet\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u53ef\u4ee5\u548c\u5176\u4ed6\u7684\u7f51\u7edc\u67b6\u6784\u7ed3\u5408\uff0c\u6bd4\u5982GoogLeNet\u3001ResNet\u7b49\u3002 \u4e0a\u8ff0\u56fe\u50cf\u5206\u7c7b\u6a21\u578b\u90fd\u6bd4\u8f83\u7ecf\u5178\uff0c\u7279\u522b\u662fVGG16\u3001GoogLeNet\u548cResNet\uff0c\u73b0\u5728\u4ecd\u7136\u5728\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u5bf9\u8fd9\u4e9b\u7f51\u7edc\u8fdb\u884c\u9010\u4e00\u4ecb\u7ecd\u3002 ImageNet\u6570\u636e\u96c6\u8fc7\u4e8e\u5e9e\u5927\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u5c06\u4f7f\u7528\u5c0f\u4e00\u70b9\u7684\u6570\u636e\u96c6-\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u8fdb\u884c\u7ecf\u5178\u7684\u6a21\u578b\u7684\u5b66\u4e60\u3002","title":"2.2 ImageNet"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/01-overview/#23","text":"\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u662f\u5305\u542b 5 \u79cd\u7c7b\u578b\u7684\u56fe\u50cf\u6570\u636e\u96c6\uff0c\u4e3b\u8981\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\uff0c\u5176\u5171\u67093670 \u5f20\u56fe\u50cf\uff0c\u5176\u4e2d\u8bad\u7ec3\u56fe\u50cf\u548c\u6d4b\u8bd5\u56fe\u50cf\u5206\u522b\u4e3a 3306 \u5f20\u548c 364\u5f20\uff0c\u4e3b\u8981\u5206\u4e3a\u4e94\u7c7b\u9c9c\u82b1\uff0c\u5206\u522b\u4e3a\u83ca\u82b1\uff0c\u84b2\u516c\u82f1\uff0c\u73ab\u7470\uff0c\u5411\u65e5\u8475\u548c\u90c1\u91d1\u9999\uff0c\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4e2d\u8868\u793a\u4e00\u79cd\u7c7b\u522b\u7684\u6570\u636e\u3002\u6570\u636e\u96c6\u5b58\u653e\u5728dataset/flower\u6587\u4ef6\u5939\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u6211\u4eec\u4f7f\u7528\u4ee5\u4e0bAPI\u5c06\u8fd9\u4e9b\u6570\u636e\u89e3\u6790\u51fa\u6765\uff1a ImageFolder ( root , transform = None ) \u53c2\u6570\u7684\u610f\u4e49\u5982\u4e0b\u6240\u793a\uff1a root\uff1a\u5728root\u6307\u5b9a\u7684\u8def\u5f84\u4e0b\u5bfb\u627e\u56fe\u7247 transform\uff1a\u5bf9\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u5904\u7406\uff0c\u6bd4\u5982\u7c7b\u578b\u8f6c\u6362\uff0c\u5c3a\u5bf8\u7684\u8c03\u6574\u7b49 \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flowers_train_path = './dataset/flower_datas/train/' flowers_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x224 dataset_transform = torchvision . transforms . Compose ([ torchvision . transforms . ToTensor (), torchvision . transforms . Resize (( 224 , 224 )) ]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flowers_train = ImageFolder ( flowers_train_path , transform = dataset_transform ) flowers_test = ImageFolder ( flowers_test_path , transform = dataset_transform ) \u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6837\u672c\u6570\u91cf\u5e76\u8fdb\u884c\u5c55\u793a\uff1a len ( flowers_train . imgs ) # 3306 len ( flowers_test . imgs ) # 364 # \u56fe\u50cf\u5c55\u793a\uff1a\u968f\u673a\u6307\u5b9a\u67d0\u4e00\u5e45\u56fe\u7247\u8fdb\u884c\u53ef\u89c6\u5316 import matplotlib.pyplot as plt plt . imshow ( flowers_train . __getitem__ ( 3000 )[ 0 ] . permute ( 1 , 2 , 0 )) \u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u5c06\u4f7f\u7528\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u5b66\u4e60\u7ecf\u5178\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u4f7f\u7528\u3002 \u603b\u7ed3 1.\u56fe\u50cf\u5206\u7c7b\u662f\u4ec0\u4e48\uff1f \u4ece\u7ed9\u5b9a\u7684\u7c7b\u522b\u96c6\u5408\u4e2d\u4e3a\u56fe\u50cf\u5206\u914d\u5bf9\u5e94\u7684\u7c7b\u522b\u6807\u7b7e 2.\u5e38\u7528\u7684\u6570\u636e\u96c6 cifar\u6570\u636e\u96c6,ImageNet\u6570\u636e\u96c6","title":"2.3 \u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/02-AlexNet/","text":"1.2 AlexNet \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053AlexNet\u7f51\u7edc\u7ed3\u6784 \u80fd\u591f\u5229\u7528AlexNet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b 2012\u5e74\uff0cAlexNet\u6a2a\u7a7a\u51fa\u4e16\uff0c\u8be5\u6a21\u578b\u7684\u540d\u5b57\u6e90\u4e8e\u8bba\u6587\u7b2c\u4e00\u4f5c\u8005\u7684\u59d3\u540dAlex Krizhevsky \u3002AlexNet\u4f7f\u7528\u4e868\u5c42\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u4ee5\u5f88\u5927\u7684\u4f18\u52bf\u8d62\u5f97\u4e86ImageNet 2012\u56fe\u50cf\u8bc6\u522b\u6311\u6218\u8d5b\u3002\u5b83\u9996\u6b21\u8bc1\u660e\u4e86\u5b66\u4e60\u5230\u7684\u7279\u5f81\u53ef\u4ee5\u8d85\u8d8a\u624b\u5de5\u8bbe\u8ba1\u7684\u7279\u5f81\uff0c\u4ece\u800c\u4e00\u4e3e\u6253\u7834\u8ba1\u7b97\u673a\u89c6\u89c9\u7814\u7a76\u7684\u65b9\u5411\u3002 1.AlexNet\u7684\u7f51\u7edc\u67b6\u6784 \u00b6 AlexNet\u4e0eLeNet\u7684\u8bbe\u8ba1\u7406\u5ff5\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u4e5f\u6709\u663e\u8457\u7684\u533a\u522b\uff0c\u5176\u7f51\u7edc\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8be5\u7f51\u7edc\u7684\u7279\u70b9\u662f\uff1a AlexNet\u5305\u542b8\u5c42\u53d8\u6362\uff0c\u67095\u5c42\u5377\u79ef\u548c2\u5c42\u5168\u8fde\u63a5\u9690\u85cf\u5c42\uff0c\u4ee5\u53ca1\u4e2a\u5168\u8fde\u63a5\u8f93\u51fa\u5c42 AlexNet\u7b2c\u4e00\u5c42\u4e2d\u7684\u5377\u79ef\u6838\u5f62\u72b6\u662f 11\\times11 11\\times11 \u3002\u7b2c\u4e8c\u5c42\u4e2d\u7684\u5377\u79ef\u6838\u5f62\u72b6\u51cf\u5c0f\u5230 5\\times5 5\\times5 \uff0c\u4e4b\u540e\u5168\u91c7\u7528 3\\times3 3\\times3 \u3002\u6240\u6709\u7684\u6c60\u5316\u5c42\u7a97\u53e3\u5927\u5c0f\u4e3a 3\\times3 3\\times3 \u3001\u6b65\u5e45\u4e3a2\u7684\u6700\u5927\u6c60\u5316\u3002 AlexNet\u5c06sigmoid\u6fc0\u6d3b\u51fd\u6570\u6539\u6210\u4e86ReLU\u6fc0\u6d3b\u51fd\u6570\uff0c\u4f7f\u8ba1\u7b97\u66f4\u7b80\u5355\uff0c\u7f51\u7edc\u66f4\u5bb9\u6613\u8bad\u7ec3 AlexNet\u901a\u8fc7dropOut\u6765\u63a7\u5236\u5168\u8fde\u63a5\u5c42\u7684\u6a21\u578b\u590d\u6742\u5ea6\u3002 AlexNet\u5f15\u5165\u4e86\u5927\u91cf\u7684\u56fe\u50cf\u589e\u5f3a\uff0c\u5982\u7ffb\u8f6c\u3001\u88c1\u526a\u548c\u989c\u8272\u53d8\u5316\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u6269\u5927\u6570\u636e\u96c6\u6765\u7f13\u89e3\u8fc7\u62df\u5408\u3002 \u5728pytorch\u4e2d\u6784\u5efaAlexNet\u6a21\u578b\uff0c\u7ee7\u627f\u81ea\u7c7bnn.Module\uff0c\u5b9e\u73b0init\u548cforward\u65b9\u6cd5\u5373\u53ef\uff0c\u5177\u4f53\u5982\u4e0b\u6240\u793a\uff1a from torch import nn # \u521b\u5efaAlexNet\u7f51\u7edc\u7ed3\u6784 class Alexnet ( nn . Module ): # \u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u7f51\u7edc\u5c42\u7684\u5b9a\u4e49,\u6307\u660e\u8f93\u5165\u6570\u636e\u7684\u901a\u9053\u6570\u548c\u8f93\u51fa\u7684\u7c7b\u522b\u4e2a\u6570 def __init__ ( self , in_dim , n_class ): super () . __init__ () # \u5377\u79ef\u90e8\u5206 self . conv = nn . Sequential ( # \u5377\u79ef\u5c42\uff1a96\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a11*11\uff0c\u6b65\u5e45\u4e3a4\uff1a(3,227,227) -> (96,55,55) nn . Conv2d ( in_channels = in_dim , out_channels = 96 , kernel_size = 11 , stride = 4 , padding = 0 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u6c60\u5316:\u7a97\u53e3\u5927\u5c0f\u4e3a3*3\u3001\u6b65\u5e45\u4e3a2\uff1a(96,55,55)->(96,27,27) nn . MaxPool2d ( 3 , 2 ), # \u5377\u79ef\u5c42\uff1a256\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a5*5\uff0c\u6b65\u5e45\u4e3a1\uff0cpadding\u4e3a2\uff1a(96,27,27) -> (256,27,27) nn . Conv2d ( 96 , 256 , 5 , stride = 1 , padding = 2 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u6c60\u5316:\u7a97\u53e3\u5927\u5c0f\u4e3a3*3\u3001\u6b65\u5e45\u4e3a2\uff1a(256,27,27) -> (256,13,13) nn . MaxPool2d ( 3 , 2 ), # \u5377\u79ef\u5c42\uff1a384\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a3*3\uff0c\u6b65\u5e45\u4e3a1\uff0cpadding\u4e3a1\uff1a(256,13,13) -> (384,13,13) nn . Conv2d ( 256 , 384 , 3 , stride = 1 , padding = 1 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u5377\u79ef\u5c42\uff1a384\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a3*3\uff0c\u6b65\u5e45\u4e3a1\uff0cpadding\u4e3a1\uff1a(384,13,13) -> (384,13,13) nn . Conv2d ( 384 , 384 , 3 , stride = 1 , padding = 1 ), # \u6fc0\u6d3b\u51fd\u6570\u662frelu nn . ReLU ( True ), # \u5377\u79ef\u5c42\uff1a256\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a3*3\uff0c\u6b65\u5e45\u4e3a1\uff0cpadding\u4e3a1:(384,13,13) -> (256,13,13) nn . Conv2d ( 384 , 256 , 3 , stride = 1 , padding = 1 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u6c60\u5316:\u7a97\u53e3\u5927\u5c0f\u4e3a3*3\u3001\u6b65\u5e45\u4e3a2:(256,13,13) -> (256,6,6) nn . MaxPool2d ( 3 , 2 )) # \u5168\u8fde\u63a5\u5c42\u90e8\u5206 self . fc = nn . Sequential ( # \u5168\u8fde\u63a5\u5c42:4096\u4e2a\u795e\u7ecf\u5143 nn . Linear ( 9216 , 4096 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u968f\u673a\u5931\u6d3b nn . Dropout ( 0.5 ), # \u5168\u8fde\u63a5\u5c42:4096\u4e2a\u795e\u7ecf\u5143 nn . Linear ( 4096 , 4096 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u968f\u673a\u5931\u6d3b nn . Dropout ( 0.5 ), # \u5168\u8fde\u63a5\u5c42:n_class\u4e2a\u795e\u7ecf\u5143 nn . Linear ( 4096 , n_class )) def forward ( self , x ): # \u8f93\u5165\u6570\u636e\u9001\u5165\u5377\u79ef\u90e8\u5206\u8fdb\u884c\u5904\u7406 x = self . conv ( x ) #\u5c06\u7279\u5f81\u56fe\u62bb\u6210\u4e00\u7ef4\u5411\u91cf x = x . view ( x . size ( 0 ), - 1 ) # \u5168\u8fde\u63a5\u5c42\u83b7\u53d6\u8f93\u51fa\u7ed3\u679c output = self . fc ( x ) return output \u6211\u4eec\u6784\u9020\u4e00\u4e2a\u9ad8\u548c\u5bbd\u5747\u4e3a227\u7684\u5355\u901a\u9053\u6570\u636e\u6837\u672c\u6765\u770b\u4e00\u4e0b\u6a21\u578b\u7684\u67b6\u6784\uff1a from torchsummary import summary import torch # \u6a21\u578b\u5b9e\u4f8b\u5316 net = Alexnet ( 3 , 1000 ) # \u901a\u8fc7net.summay()\u67e5\u770b\u7f51\u7edc\u7684\u5f62\u72b6 summary ( model = net , input_size = ( 3 , 227 , 227 ), batch_size = 1 , device = 'cpu' ) \u7f51\u7edc\u67b6\u6784\u5982\u4e0b\uff1a ---------------------------------------------------------------- Layer ( type ) Output Shape Param # ================================================================ Conv2d - 1 [ 1 , 96 , 55 , 55 ] 34 , 944 ReLU - 2 [ 1 , 96 , 55 , 55 ] 0 MaxPool2d - 3 [ 1 , 96 , 27 , 27 ] 0 Conv2d - 4 [ 1 , 256 , 27 , 27 ] 614 , 656 ReLU - 5 [ 1 , 256 , 27 , 27 ] 0 MaxPool2d - 6 [ 1 , 256 , 13 , 13 ] 0 Conv2d - 7 [ 1 , 384 , 13 , 13 ] 885 , 120 ReLU - 8 [ 1 , 384 , 13 , 13 ] 0 Conv2d - 9 [ 1 , 384 , 13 , 13 ] 1 , 327 , 488 ReLU - 10 [ 1 , 384 , 13 , 13 ] 0 Conv2d - 11 [ 1 , 256 , 13 , 13 ] 884 , 992 ReLU - 12 [ 1 , 256 , 13 , 13 ] 0 MaxPool2d - 13 [ 1 , 256 , 6 , 6 ] 0 Linear - 14 [ 1 , 4096 ] 37 , 752 , 832 ReLU - 15 [ 1 , 4096 ] 0 Dropout - 16 [ 1 , 4096 ] 0 Linear - 17 [ 1 , 4096 ] 16 , 781 , 312 ReLU - 18 [ 1 , 4096 ] 0 Dropout - 19 [ 1 , 4096 ] 0 Linear - 20 [ 1 , 1000 ] 4 , 097 , 000 ================================================================ Total params : 62 , 378 , 344 Trainable params : 62 , 378 , 344 Non - trainable params : 0 ---------------------------------------------------------------- Input size ( MB ): 0.59 Forward / backward pass size ( MB ): 11.05 Params size ( MB ): 237.95 Estimated Total Size ( MB ): 249.59 ---------------------------------------------------------------- 2.\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b \u00b6 AlexNet\u4f7f\u7528ImageNet\u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3\uff0c\u4f46\u56e0\u4e3aImageNet\u6570\u636e\u96c6\u8f83\u5927\u8bad\u7ec3\u65f6\u95f4\u8f83\u957f\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u9762\u7684\u4ecb\u7ecd\u7684\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u6765\u6f14\u793aAlexNet\u3002\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5c06\u56fe\u50cf\u9ad8\u548c\u5bbd\u6269\u5927\u5230AlexNet\u4f7f\u7528\u7684\u56fe\u50cf\u9ad8\u548c\u5bbd227\u3002 2.1 \u6570\u636e\u8bfb\u53d6 \u00b6 \u9996\u5148\u83b7\u53d6\u6570\u636e,\u4e3a\u4e86\u9002\u5e94AlexNet\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5bf8\u7684\u8981\u6c42\uff0c\u5c06\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\u5230227x227\u7684\u5927\u5c0f\uff0c\u5e76\u4f7f\u7528DataLoader\u8fdb\u884c\u6279\u6b21\u6570\u636e\u7684\u8bfb\u53d6\uff1a from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 2 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a227x227 dataset_transform = transforms . Compose ( [ transforms . ToTensor (), transforms . Resize (( 227 , 227 ))]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_test_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_ttest batch_size = batch_size , shuffle = False ) \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5c06batch\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 0 : break \u7ed3\u679c\u4e3a\uff1a \u6211\u4eec\u5c31\u4f7f\u7528\u4e0a\u8ff0\u521b\u5efa\u7684\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002 2.2 \u6a21\u578b\u5b9e\u4f8b\u5316\u548c\u53c2\u6570\u8bbe\u7f6e \u00b6 # \u6a21\u578b\u5b9e\u4f8b\u5316:\u8f93\u5165\u6570\u636e3\u901a\u9053\uff0c\u8fdb\u884c5\u7c7b\u7684\u5206\u7c7b\u5904\u7406 model = Alexnet ( 3 , 5 ) # \u6a21\u578b\u8bad\u7ec3\u7684\u53c2\u6570\u8bbe\u7f6e # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( model . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss () 2.3 \u6a21\u578b\u8bc4\u4f30\u65b9\u6cd5 \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6548\u679c\u8fdb\u884c\u8bc4\u4f30\uff0c\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u5360\u603b\u6837\u672c\u7684\u6bd4\u4f8b\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total 2.4 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\uff0c\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5e76\u8bc4\u4f30\u6a21\u578b\u7684\u6548\u679c\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u548c\u7684\u521d\u59cb\u5316 train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / iter , train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u4fbf\u53ef\u5b8c\u6210\u7f51\u7edc\u7684\u8bad\u7ec3\uff1a train () \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 1.6063 , train accuracy : 0.245 , test accuracy : 0.244 time : 1038.2285327911377 current epoch = 1 epoch : 1 , loss : 1.6039 , train accuracy : 0.246 , test accuracy : 0.244 time : 1268.651734828949 current epoch = 2 epoch : 2 , loss : 1.6019 , train accuracy : 0.244 , test accuracy : 0.244 time : 1277.7839303016663 current epoch = 3 epoch : 3 , loss : 1.6016 , train accuracy : 0.243 , test accuracy : 0.244 time : 1158.564799785614 current epoch = 4 epoch : 4 , loss : 1.6025 , train accuracy : 0.245 , test accuracy : 0.244 time : 1107.4079420566559 current epoch = 5 epoch : 5 , loss : 1.6019 , train accuracy : 0.240 , test accuracy : 0.244 time : 1110.269654750824 current epoch = 6 epoch : 6 , loss : 1.6011 , train accuracy : 0.246 , test accuracy : 0.244 time : 1099.7178175449371 current epoch = 7 epoch : 7 , loss : 1.6022 , train accuracy : 0.239 , test accuracy : 0.244 time : 1100.3018953800201 current epoch = 8 epoch : 8 , loss : 1.6020 , train accuracy : 0.245 , test accuracy : 0.244 time : 1102.0938370227814 current epoch = 9 epoch : 9 , loss : 1.6013 , train accuracy : 0.245 , test accuracy : 0.244 time : 1098.3760833740234 ------------ finish training ------------- \u6211\u53c8\u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21epochs = 100\uff0cbatchsize\u8bbe\u7f6e\u4e3a16\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u635f\u5931\u548c\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf\u5982\u4e0b\u6240\u793a\uff1a(\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\uff0c\u53f3\u56fe\u662f\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf) \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u524d10\u4e2a\u8f6e\u6b21\u6548\u679c\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u968f\u7740\u8bad\u7ec3\u8f6e\u6b21\u7684\u589e\u52a0\uff0c\u635f\u5931\u5728\u4e0d\u65ad\u51cf\u5c0f\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u4e5f\u5728\u63d0\u5347\uff0c\u5f53\u8bad\u7ec3\u523060\u4e2a\u8f6e\u6b21\u65f6\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u4e0a\u5347\u53d8\u6162\u3002 \u603b\u7ed3 \u77e5\u9053AlexNet\u7684\u7f51\u7edc\u67b6\u6784 \u52a8\u624b\u5b9e\u73b0\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b\u6848\u4f8b\u4efb\u52a1","title":"1.2 AlexNet"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/02-AlexNet/#12-alexnet","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053AlexNet\u7f51\u7edc\u7ed3\u6784 \u80fd\u591f\u5229\u7528AlexNet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b 2012\u5e74\uff0cAlexNet\u6a2a\u7a7a\u51fa\u4e16\uff0c\u8be5\u6a21\u578b\u7684\u540d\u5b57\u6e90\u4e8e\u8bba\u6587\u7b2c\u4e00\u4f5c\u8005\u7684\u59d3\u540dAlex Krizhevsky \u3002AlexNet\u4f7f\u7528\u4e868\u5c42\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u4ee5\u5f88\u5927\u7684\u4f18\u52bf\u8d62\u5f97\u4e86ImageNet 2012\u56fe\u50cf\u8bc6\u522b\u6311\u6218\u8d5b\u3002\u5b83\u9996\u6b21\u8bc1\u660e\u4e86\u5b66\u4e60\u5230\u7684\u7279\u5f81\u53ef\u4ee5\u8d85\u8d8a\u624b\u5de5\u8bbe\u8ba1\u7684\u7279\u5f81\uff0c\u4ece\u800c\u4e00\u4e3e\u6253\u7834\u8ba1\u7b97\u673a\u89c6\u89c9\u7814\u7a76\u7684\u65b9\u5411\u3002","title":"1.2 AlexNet"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/02-AlexNet/#1alexnet","text":"AlexNet\u4e0eLeNet\u7684\u8bbe\u8ba1\u7406\u5ff5\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u4e5f\u6709\u663e\u8457\u7684\u533a\u522b\uff0c\u5176\u7f51\u7edc\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8be5\u7f51\u7edc\u7684\u7279\u70b9\u662f\uff1a AlexNet\u5305\u542b8\u5c42\u53d8\u6362\uff0c\u67095\u5c42\u5377\u79ef\u548c2\u5c42\u5168\u8fde\u63a5\u9690\u85cf\u5c42\uff0c\u4ee5\u53ca1\u4e2a\u5168\u8fde\u63a5\u8f93\u51fa\u5c42 AlexNet\u7b2c\u4e00\u5c42\u4e2d\u7684\u5377\u79ef\u6838\u5f62\u72b6\u662f 11\\times11 11\\times11 \u3002\u7b2c\u4e8c\u5c42\u4e2d\u7684\u5377\u79ef\u6838\u5f62\u72b6\u51cf\u5c0f\u5230 5\\times5 5\\times5 \uff0c\u4e4b\u540e\u5168\u91c7\u7528 3\\times3 3\\times3 \u3002\u6240\u6709\u7684\u6c60\u5316\u5c42\u7a97\u53e3\u5927\u5c0f\u4e3a 3\\times3 3\\times3 \u3001\u6b65\u5e45\u4e3a2\u7684\u6700\u5927\u6c60\u5316\u3002 AlexNet\u5c06sigmoid\u6fc0\u6d3b\u51fd\u6570\u6539\u6210\u4e86ReLU\u6fc0\u6d3b\u51fd\u6570\uff0c\u4f7f\u8ba1\u7b97\u66f4\u7b80\u5355\uff0c\u7f51\u7edc\u66f4\u5bb9\u6613\u8bad\u7ec3 AlexNet\u901a\u8fc7dropOut\u6765\u63a7\u5236\u5168\u8fde\u63a5\u5c42\u7684\u6a21\u578b\u590d\u6742\u5ea6\u3002 AlexNet\u5f15\u5165\u4e86\u5927\u91cf\u7684\u56fe\u50cf\u589e\u5f3a\uff0c\u5982\u7ffb\u8f6c\u3001\u88c1\u526a\u548c\u989c\u8272\u53d8\u5316\uff0c\u4ece\u800c\u8fdb\u4e00\u6b65\u6269\u5927\u6570\u636e\u96c6\u6765\u7f13\u89e3\u8fc7\u62df\u5408\u3002 \u5728pytorch\u4e2d\u6784\u5efaAlexNet\u6a21\u578b\uff0c\u7ee7\u627f\u81ea\u7c7bnn.Module\uff0c\u5b9e\u73b0init\u548cforward\u65b9\u6cd5\u5373\u53ef\uff0c\u5177\u4f53\u5982\u4e0b\u6240\u793a\uff1a from torch import nn # \u521b\u5efaAlexNet\u7f51\u7edc\u7ed3\u6784 class Alexnet ( nn . Module ): # \u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u7f51\u7edc\u5c42\u7684\u5b9a\u4e49,\u6307\u660e\u8f93\u5165\u6570\u636e\u7684\u901a\u9053\u6570\u548c\u8f93\u51fa\u7684\u7c7b\u522b\u4e2a\u6570 def __init__ ( self , in_dim , n_class ): super () . __init__ () # \u5377\u79ef\u90e8\u5206 self . conv = nn . Sequential ( # \u5377\u79ef\u5c42\uff1a96\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a11*11\uff0c\u6b65\u5e45\u4e3a4\uff1a(3,227,227) -> (96,55,55) nn . Conv2d ( in_channels = in_dim , out_channels = 96 , kernel_size = 11 , stride = 4 , padding = 0 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u6c60\u5316:\u7a97\u53e3\u5927\u5c0f\u4e3a3*3\u3001\u6b65\u5e45\u4e3a2\uff1a(96,55,55)->(96,27,27) nn . MaxPool2d ( 3 , 2 ), # \u5377\u79ef\u5c42\uff1a256\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a5*5\uff0c\u6b65\u5e45\u4e3a1\uff0cpadding\u4e3a2\uff1a(96,27,27) -> (256,27,27) nn . Conv2d ( 96 , 256 , 5 , stride = 1 , padding = 2 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u6c60\u5316:\u7a97\u53e3\u5927\u5c0f\u4e3a3*3\u3001\u6b65\u5e45\u4e3a2\uff1a(256,27,27) -> (256,13,13) nn . MaxPool2d ( 3 , 2 ), # \u5377\u79ef\u5c42\uff1a384\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a3*3\uff0c\u6b65\u5e45\u4e3a1\uff0cpadding\u4e3a1\uff1a(256,13,13) -> (384,13,13) nn . Conv2d ( 256 , 384 , 3 , stride = 1 , padding = 1 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u5377\u79ef\u5c42\uff1a384\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a3*3\uff0c\u6b65\u5e45\u4e3a1\uff0cpadding\u4e3a1\uff1a(384,13,13) -> (384,13,13) nn . Conv2d ( 384 , 384 , 3 , stride = 1 , padding = 1 ), # \u6fc0\u6d3b\u51fd\u6570\u662frelu nn . ReLU ( True ), # \u5377\u79ef\u5c42\uff1a256\u4e2a\u5377\u79ef\u6838\uff0c\u5377\u79ef\u6838\u4e3a3*3\uff0c\u6b65\u5e45\u4e3a1\uff0cpadding\u4e3a1:(384,13,13) -> (256,13,13) nn . Conv2d ( 384 , 256 , 3 , stride = 1 , padding = 1 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u6c60\u5316:\u7a97\u53e3\u5927\u5c0f\u4e3a3*3\u3001\u6b65\u5e45\u4e3a2:(256,13,13) -> (256,6,6) nn . MaxPool2d ( 3 , 2 )) # \u5168\u8fde\u63a5\u5c42\u90e8\u5206 self . fc = nn . Sequential ( # \u5168\u8fde\u63a5\u5c42:4096\u4e2a\u795e\u7ecf\u5143 nn . Linear ( 9216 , 4096 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u968f\u673a\u5931\u6d3b nn . Dropout ( 0.5 ), # \u5168\u8fde\u63a5\u5c42:4096\u4e2a\u795e\u7ecf\u5143 nn . Linear ( 4096 , 4096 ), # \u6fc0\u6d3b\u51fd\u6570relu nn . ReLU ( True ), # \u968f\u673a\u5931\u6d3b nn . Dropout ( 0.5 ), # \u5168\u8fde\u63a5\u5c42:n_class\u4e2a\u795e\u7ecf\u5143 nn . Linear ( 4096 , n_class )) def forward ( self , x ): # \u8f93\u5165\u6570\u636e\u9001\u5165\u5377\u79ef\u90e8\u5206\u8fdb\u884c\u5904\u7406 x = self . conv ( x ) #\u5c06\u7279\u5f81\u56fe\u62bb\u6210\u4e00\u7ef4\u5411\u91cf x = x . view ( x . size ( 0 ), - 1 ) # \u5168\u8fde\u63a5\u5c42\u83b7\u53d6\u8f93\u51fa\u7ed3\u679c output = self . fc ( x ) return output \u6211\u4eec\u6784\u9020\u4e00\u4e2a\u9ad8\u548c\u5bbd\u5747\u4e3a227\u7684\u5355\u901a\u9053\u6570\u636e\u6837\u672c\u6765\u770b\u4e00\u4e0b\u6a21\u578b\u7684\u67b6\u6784\uff1a from torchsummary import summary import torch # \u6a21\u578b\u5b9e\u4f8b\u5316 net = Alexnet ( 3 , 1000 ) # \u901a\u8fc7net.summay()\u67e5\u770b\u7f51\u7edc\u7684\u5f62\u72b6 summary ( model = net , input_size = ( 3 , 227 , 227 ), batch_size = 1 , device = 'cpu' ) \u7f51\u7edc\u67b6\u6784\u5982\u4e0b\uff1a ---------------------------------------------------------------- Layer ( type ) Output Shape Param # ================================================================ Conv2d - 1 [ 1 , 96 , 55 , 55 ] 34 , 944 ReLU - 2 [ 1 , 96 , 55 , 55 ] 0 MaxPool2d - 3 [ 1 , 96 , 27 , 27 ] 0 Conv2d - 4 [ 1 , 256 , 27 , 27 ] 614 , 656 ReLU - 5 [ 1 , 256 , 27 , 27 ] 0 MaxPool2d - 6 [ 1 , 256 , 13 , 13 ] 0 Conv2d - 7 [ 1 , 384 , 13 , 13 ] 885 , 120 ReLU - 8 [ 1 , 384 , 13 , 13 ] 0 Conv2d - 9 [ 1 , 384 , 13 , 13 ] 1 , 327 , 488 ReLU - 10 [ 1 , 384 , 13 , 13 ] 0 Conv2d - 11 [ 1 , 256 , 13 , 13 ] 884 , 992 ReLU - 12 [ 1 , 256 , 13 , 13 ] 0 MaxPool2d - 13 [ 1 , 256 , 6 , 6 ] 0 Linear - 14 [ 1 , 4096 ] 37 , 752 , 832 ReLU - 15 [ 1 , 4096 ] 0 Dropout - 16 [ 1 , 4096 ] 0 Linear - 17 [ 1 , 4096 ] 16 , 781 , 312 ReLU - 18 [ 1 , 4096 ] 0 Dropout - 19 [ 1 , 4096 ] 0 Linear - 20 [ 1 , 1000 ] 4 , 097 , 000 ================================================================ Total params : 62 , 378 , 344 Trainable params : 62 , 378 , 344 Non - trainable params : 0 ---------------------------------------------------------------- Input size ( MB ): 0.59 Forward / backward pass size ( MB ): 11.05 Params size ( MB ): 237.95 Estimated Total Size ( MB ): 249.59 ----------------------------------------------------------------","title":"1.AlexNet\u7684\u7f51\u7edc\u67b6\u6784"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/02-AlexNet/#2","text":"AlexNet\u4f7f\u7528ImageNet\u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3\uff0c\u4f46\u56e0\u4e3aImageNet\u6570\u636e\u96c6\u8f83\u5927\u8bad\u7ec3\u65f6\u95f4\u8f83\u957f\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u9762\u7684\u4ecb\u7ecd\u7684\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u6765\u6f14\u793aAlexNet\u3002\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5c06\u56fe\u50cf\u9ad8\u548c\u5bbd\u6269\u5927\u5230AlexNet\u4f7f\u7528\u7684\u56fe\u50cf\u9ad8\u548c\u5bbd227\u3002","title":"2.\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/02-AlexNet/#21","text":"\u9996\u5148\u83b7\u53d6\u6570\u636e,\u4e3a\u4e86\u9002\u5e94AlexNet\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5bf8\u7684\u8981\u6c42\uff0c\u5c06\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\u5230227x227\u7684\u5927\u5c0f\uff0c\u5e76\u4f7f\u7528DataLoader\u8fdb\u884c\u6279\u6b21\u6570\u636e\u7684\u8bfb\u53d6\uff1a from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 2 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a227x227 dataset_transform = transforms . Compose ( [ transforms . ToTensor (), transforms . Resize (( 227 , 227 ))]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_test_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_ttest batch_size = batch_size , shuffle = False ) \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5c06batch\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 0 : break \u7ed3\u679c\u4e3a\uff1a \u6211\u4eec\u5c31\u4f7f\u7528\u4e0a\u8ff0\u521b\u5efa\u7684\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002","title":"2.1 \u6570\u636e\u8bfb\u53d6"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/02-AlexNet/#22","text":"# \u6a21\u578b\u5b9e\u4f8b\u5316:\u8f93\u5165\u6570\u636e3\u901a\u9053\uff0c\u8fdb\u884c5\u7c7b\u7684\u5206\u7c7b\u5904\u7406 model = Alexnet ( 3 , 5 ) # \u6a21\u578b\u8bad\u7ec3\u7684\u53c2\u6570\u8bbe\u7f6e # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( model . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss ()","title":"2.2 \u6a21\u578b\u5b9e\u4f8b\u5316\u548c\u53c2\u6570\u8bbe\u7f6e"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/02-AlexNet/#23","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6548\u679c\u8fdb\u884c\u8bc4\u4f30\uff0c\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u5360\u603b\u6837\u672c\u7684\u6bd4\u4f8b\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total","title":"2.3 \u6a21\u578b\u8bc4\u4f30\u65b9\u6cd5"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/02-AlexNet/#24","text":"\u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\uff0c\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5e76\u8bc4\u4f30\u6a21\u578b\u7684\u6548\u679c\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u548c\u7684\u521d\u59cb\u5316 train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / iter , train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u4fbf\u53ef\u5b8c\u6210\u7f51\u7edc\u7684\u8bad\u7ec3\uff1a train () \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 1.6063 , train accuracy : 0.245 , test accuracy : 0.244 time : 1038.2285327911377 current epoch = 1 epoch : 1 , loss : 1.6039 , train accuracy : 0.246 , test accuracy : 0.244 time : 1268.651734828949 current epoch = 2 epoch : 2 , loss : 1.6019 , train accuracy : 0.244 , test accuracy : 0.244 time : 1277.7839303016663 current epoch = 3 epoch : 3 , loss : 1.6016 , train accuracy : 0.243 , test accuracy : 0.244 time : 1158.564799785614 current epoch = 4 epoch : 4 , loss : 1.6025 , train accuracy : 0.245 , test accuracy : 0.244 time : 1107.4079420566559 current epoch = 5 epoch : 5 , loss : 1.6019 , train accuracy : 0.240 , test accuracy : 0.244 time : 1110.269654750824 current epoch = 6 epoch : 6 , loss : 1.6011 , train accuracy : 0.246 , test accuracy : 0.244 time : 1099.7178175449371 current epoch = 7 epoch : 7 , loss : 1.6022 , train accuracy : 0.239 , test accuracy : 0.244 time : 1100.3018953800201 current epoch = 8 epoch : 8 , loss : 1.6020 , train accuracy : 0.245 , test accuracy : 0.244 time : 1102.0938370227814 current epoch = 9 epoch : 9 , loss : 1.6013 , train accuracy : 0.245 , test accuracy : 0.244 time : 1098.3760833740234 ------------ finish training ------------- \u6211\u53c8\u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21epochs = 100\uff0cbatchsize\u8bbe\u7f6e\u4e3a16\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u635f\u5931\u548c\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf\u5982\u4e0b\u6240\u793a\uff1a(\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\uff0c\u53f3\u56fe\u662f\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf) \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u524d10\u4e2a\u8f6e\u6b21\u6548\u679c\u4e0d\u662f\u5f88\u660e\u663e\uff0c\u968f\u7740\u8bad\u7ec3\u8f6e\u6b21\u7684\u589e\u52a0\uff0c\u635f\u5931\u5728\u4e0d\u65ad\u51cf\u5c0f\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u4e5f\u5728\u63d0\u5347\uff0c\u5f53\u8bad\u7ec3\u523060\u4e2a\u8f6e\u6b21\u65f6\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u4e0a\u5347\u53d8\u6162\u3002 \u603b\u7ed3 \u77e5\u9053AlexNet\u7684\u7f51\u7edc\u67b6\u6784 \u52a8\u624b\u5b9e\u73b0\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b\u6848\u4f8b\u4efb\u52a1","title":"2.4 \u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/03-VGGNet/","text":"1.3 VGG \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053VGG\u7f51\u7edc\u7ed3\u6784\u7684\u7279\u70b9 \u80fd\u591f\u5229\u7528VGG\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b 2014\u5e74\uff0c\u725b\u6d25\u5927\u5b66\u8ba1\u7b97\u673a\u89c6\u89c9\u7ec4\uff08Visual Geometry Group\uff09\u548cGoogle DeepMind\u516c\u53f8\u7684\u7814\u7a76\u5458\u4e00\u8d77\u7814\u53d1\u51fa\u4e86\u65b0\u7684\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff1aVGGNet\uff0c\u5e76\u53d6\u5f97\u4e86ILSVRC2014\u6bd4\u8d5b\u5206\u7c7b\u9879\u76ee\u7684\u7b2c\u4e8c\u540d\uff0c\u4e3b\u8981\u8d21\u732e\u662f\u4f7f\u7528\u5f88\u5c0f\u7684\u5377\u79ef\u6838(3\u00d73)\u6784\u5efa\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\uff0c\u80fd\u591f\u53d6\u5f97\u8f83\u597d\u7684\u8bc6\u522b\u7cbe\u5ea6\uff0c\u5e38\u7528\u6765\u63d0\u53d6\u56fe\u50cf\u7279\u5f81\u7684VGG-16\u548cVGG-19\u3002 1.VGG\u7684\u7f51\u7edc\u67b6\u6784 \u00b6 VGG\u53ef\u4ee5\u770b\u6210\u662f\u52a0\u6df1\u7248\u7684AlexNet\uff0c\u6574\u4e2a\u7f51\u7edc\u7531\u5377\u79ef\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u53e0\u52a0\u800c\u6210\uff0c\u548cAlexNet\u4e0d\u540c\u7684\u662f\uff0cVGG\u4e2d\u4f7f\u7528\u7684\u90fd\u662f\u5c0f\u5c3a\u5bf8\u7684\u5377\u79ef\u6838(3\u00d73)\uff0c\u5176\u7f51\u7edc\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a VGGNet\u4f7f\u7528\u7684\u5168\u90e8\u90fd\u662f3x3\u7684\u5c0f\u5377\u79ef\u6838\u548c2x2\u7684\u6c60\u5316\u6838\uff0c\u901a\u8fc7\u4e0d\u65ad\u52a0\u6df1\u7f51\u7edc\u6765\u63d0\u5347\u6027\u80fd\u3002VGG\u53ef\u4ee5\u901a\u8fc7\u91cd\u590d\u4f7f\u7528\u7b80\u5355\u7684\u57fa\u7840\u5757\u6765\u6784\u5efa\u6df1\u5ea6\u6a21\u578b\u3002 \u5728pytorch\u4e2d\u5df2\u7ecf\u5c01\u88c5\u597d\u4e86VGG\u6a21\u578b\uff0c\u6211\u4eec\u5c31\u4e0d\u518d\u8fdb\u884c\u624b\u5de5\u7684\u642d\u5efa\u4e86\uff0c\u76f4\u63a5\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision.models as models # \u6a21\u578b\u5b9e\u4f8b\u5316 model = models . vgg16 () \u6211\u4eec\u901a\u8fc7torchsummary\u6765\u770b\u4e00\u4e0b\u6a21\u578b\u7684\u67b6\u6784\uff1a from torchsummary import summary # \u901a\u8fc7net.summay()\u67e5\u770b\u7f51\u7edc\u7684\u5f62\u72b6 summary ( model = model , input_size = ( 3 , 224 , 224 ), batch_size = 1 , device = 'cpu' ) \u7f51\u7edc\u67b6\u6784\u5982\u4e0b\uff1a ---------------------------------------------------------------- Layer ( type ) Output Shape Param # ================================================================ Conv2d - 1 [ 1 , 64 , 224 , 224 ] 1 , 792 ReLU - 2 [ 1 , 64 , 224 , 224 ] 0 Conv2d - 3 [ 1 , 64 , 224 , 224 ] 36 , 928 ReLU - 4 [ 1 , 64 , 224 , 224 ] 0 MaxPool2d - 5 [ 1 , 64 , 112 , 112 ] 0 Conv2d - 6 [ 1 , 128 , 112 , 112 ] 73 , 856 ReLU - 7 [ 1 , 128 , 112 , 112 ] 0 Conv2d - 8 [ 1 , 128 , 112 , 112 ] 147 , 584 ReLU - 9 [ 1 , 128 , 112 , 112 ] 0 MaxPool2d - 10 [ 1 , 128 , 56 , 56 ] 0 Conv2d - 11 [ 1 , 256 , 56 , 56 ] 295 , 168 ReLU - 12 [ 1 , 256 , 56 , 56 ] 0 Conv2d - 13 [ 1 , 256 , 56 , 56 ] 590 , 080 ReLU - 14 [ 1 , 256 , 56 , 56 ] 0 Conv2d - 15 [ 1 , 256 , 56 , 56 ] 590 , 080 ReLU - 16 [ 1 , 256 , 56 , 56 ] 0 MaxPool2d - 17 [ 1 , 256 , 28 , 28 ] 0 Conv2d - 18 [ 1 , 512 , 28 , 28 ] 1 , 180 , 160 ReLU - 19 [ 1 , 512 , 28 , 28 ] 0 Conv2d - 20 [ 1 , 512 , 28 , 28 ] 2 , 359 , 808 ReLU - 21 [ 1 , 512 , 28 , 28 ] 0 Conv2d - 22 [ 1 , 512 , 28 , 28 ] 2 , 359 , 808 ReLU - 23 [ 1 , 512 , 28 , 28 ] 0 MaxPool2d - 24 [ 1 , 512 , 14 , 14 ] 0 Conv2d - 25 [ 1 , 512 , 14 , 14 ] 2 , 359 , 808 ReLU - 26 [ 1 , 512 , 14 , 14 ] 0 Conv2d - 27 [ 1 , 512 , 14 , 14 ] 2 , 359 , 808 ReLU - 28 [ 1 , 512 , 14 , 14 ] 0 Conv2d - 29 [ 1 , 512 , 14 , 14 ] 2 , 359 , 808 ReLU - 30 [ 1 , 512 , 14 , 14 ] 0 MaxPool2d - 31 [ 1 , 512 , 7 , 7 ] 0 AdaptiveAvgPool2d - 32 [ 1 , 512 , 7 , 7 ] 0 Linear - 33 [ 1 , 4096 ] 102 , 764 , 544 ReLU - 34 [ 1 , 4096 ] 0 Dropout - 35 [ 1 , 4096 ] 0 Linear - 36 [ 1 , 4096 ] 16 , 781 , 312 ReLU - 37 [ 1 , 4096 ] 0 Dropout - 38 [ 1 , 4096 ] 0 Linear - 39 [ 1 , 1000 ] 4 , 097 , 000 ================================================================ Total params : 138 , 357 , 544 Trainable params : 138 , 357 , 544 Non - trainable params : 0 ---------------------------------------------------------------- Input size ( MB ): 0.57 Forward / backward pass size ( MB ): 218.78 Params size ( MB ): 527.79 Estimated Total Size ( MB ): 747.15 ---------------------------------------------------------------- 2.\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b\u6848\u4f8b \u00b6 \u56e0\u4e3aImageNet\u6570\u636e\u96c6\u8f83\u5927\u8bad\u7ec3\u65f6\u95f4\u8f83\u957f\uff0c\u6211\u4eec\u4ecd\u7528\u524d\u9762\u7684\u9c9c\u82b1\u79cd\u7c7b\u5b9e\u4f8b\u6765\u7ed9\u5927\u5bb6\u6f14\u793aVGGNet\u3002\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5c06\u56fe\u50cf\u9ad8\u548c\u5bbd\u6269\u5927\u5230VggNet\u4f7f\u7528\u7684\u56fe\u50cf\u9ad8\u548c\u5bbd224\u3002 2.1 \u6570\u636e\u8bfb\u53d6 \u00b6 \u9996\u5148\u83b7\u53d6\u6570\u636e,\u4e3a\u4e86\u9002\u5e94VGG\u7f51\u7edc\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5bf8\u7684\u8981\u6c42\uff0c\u5c06\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\u5230224x224\u7684\u5927\u5c0f\uff0c\u5e76\u4f7f\u7528DataLoader\u8fdb\u884c\u6279\u6b21\u6570\u636e\u7684\u8bfb\u53d6\uff1a from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 2 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x225 dataset_transform = transforms . Compose ( [ transforms . ToTensor (), transforms . Resize (( 224 , 224 ))]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_test_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_test , batch_size = batch_size , shuffle = False ) \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5c06batch\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 0 : break \u7ed3\u679c\u4e3a\uff1a \u6211\u4eec\u5c31\u4f7f\u7528\u4e0a\u8ff0\u521b\u5efa\u7684\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002 2.2 \u6a21\u578b\u5b9e\u4f8b\u5316\u548c\u53c2\u6570\u8bbe\u7f6e \u00b6 # \u6a21\u578b\u5b9e\u4f8b\u5316:\u8f93\u5165\u6570\u636e3\u901a\u9053\uff0c\u8fdb\u884c5\u7c7b\u7684\u5206\u7c7b\u5904\u7406 model = models . vgg16 ( num_classes = 5 ) # \u6a21\u578b\u8bad\u7ec3\u7684\u53c2\u6570\u8bbe\u7f6e # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( model . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss () 2.3 \u6a21\u578b\u8bc4\u4f30\u65b9\u6cd5 \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6548\u679c\u8fdb\u884c\u8bc4\u4f30\uff0c\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u5360\u603b\u6837\u672c\u7684\u6bd4\u4f8b\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total 2.4 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\uff0c\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5e76\u8bc4\u4f30\u6a21\u578b\u7684\u6548\u679c\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u4fbf\u53ef\u5b8c\u6210\u7f51\u7edc\u7684\u8bad\u7ec3\uff1a train () \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 1.8769 , train accuracy : 0.242 , test accuracy : 0.245 time : 4586.281445741653 current epoch = 1 epoch : 1 , loss : 1.6034 , train accuracy : 0.244 , test accuracy : 0.245 time : 4172.730473518372 current epoch = 2 epoch : 2 , loss : 1.6014 , train accuracy : 0.245 , test accuracy : 0.245 time : 3804.3322331905365 current epoch = 3 epoch : 3 , loss : 1.6013 , train accuracy : 0.244 , test accuracy : 0.245 time : 3210.886591911316 current epoch = 4 epoch : 4 , loss : 1.6022 , train accuracy : 0.245 , test accuracy : 0.245 time : 2243.719032764435 current epoch = 5 epoch : 5 , loss : 1.6025 , train accuracy : 0.241 , test accuracy : 0.245 time : 1664.3811178207397 current epoch = 6 epoch : 6 , loss : 1.6008 , train accuracy : 0.244 , test accuracy : 0.245 time : 1680.3882856369019 current epoch = 7 epoch : 7 , loss : 1.6009 , train accuracy : 0.244 , test accuracy : 0.245 time : 1673.7246453762054 current epoch = 8 epoch : 8 , loss : 1.6021 , train accuracy : 0.245 , test accuracy : 0.245 time : 1672.7556710243225 current epoch = 9 epoch : 9 , loss : 1.6011 , train accuracy : 0.245 , test accuracy : 0.245 time : 1660.5588693618774 ------------ finish training ------------- \u6211\u53c8\u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21\u4e3a100\uff0cbatchsize\u8bbe\u7f6e\u4e3a16\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a(\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\uff0c\u53f3\u56fe\u662f\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf) \u5f53\u8bad\u7ec3\u523030\u4e2a\u8f6e\u6b21\u65f6\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u5c31\u4e0d\u518d\u8fdb\u884c\u63d0\u5347\uff0c\u518d\u8fdb\u884c\u8bad\u7ec3\u65f6\u6a21\u578b\u8fc7\u62df\u5408\uff0c\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u63d0\u5347\u4f1a\u51cf\u5c0f\uff0c\u800c\u4e14\u5e94\u4e3aVGG\u6a21\u578b\u7684\u5bb9\u91cf\u6bd4\u8f83\u5927\uff0c\u5bf9\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u5e76\u4e0d\u53cb\u597d\u3002 \u603b\u7ed3 \u77e5\u9053VGG\u7684\u7f51\u7edc\u67b6\u6784 \u52a8\u624b\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u7684\u5b9e\u73b0","title":"1.3 VGG"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/03-VGGNet/#13-vgg","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053VGG\u7f51\u7edc\u7ed3\u6784\u7684\u7279\u70b9 \u80fd\u591f\u5229\u7528VGG\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b 2014\u5e74\uff0c\u725b\u6d25\u5927\u5b66\u8ba1\u7b97\u673a\u89c6\u89c9\u7ec4\uff08Visual Geometry Group\uff09\u548cGoogle DeepMind\u516c\u53f8\u7684\u7814\u7a76\u5458\u4e00\u8d77\u7814\u53d1\u51fa\u4e86\u65b0\u7684\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff1aVGGNet\uff0c\u5e76\u53d6\u5f97\u4e86ILSVRC2014\u6bd4\u8d5b\u5206\u7c7b\u9879\u76ee\u7684\u7b2c\u4e8c\u540d\uff0c\u4e3b\u8981\u8d21\u732e\u662f\u4f7f\u7528\u5f88\u5c0f\u7684\u5377\u79ef\u6838(3\u00d73)\u6784\u5efa\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\uff0c\u80fd\u591f\u53d6\u5f97\u8f83\u597d\u7684\u8bc6\u522b\u7cbe\u5ea6\uff0c\u5e38\u7528\u6765\u63d0\u53d6\u56fe\u50cf\u7279\u5f81\u7684VGG-16\u548cVGG-19\u3002","title":"1.3 VGG"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/03-VGGNet/#1vgg","text":"VGG\u53ef\u4ee5\u770b\u6210\u662f\u52a0\u6df1\u7248\u7684AlexNet\uff0c\u6574\u4e2a\u7f51\u7edc\u7531\u5377\u79ef\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u53e0\u52a0\u800c\u6210\uff0c\u548cAlexNet\u4e0d\u540c\u7684\u662f\uff0cVGG\u4e2d\u4f7f\u7528\u7684\u90fd\u662f\u5c0f\u5c3a\u5bf8\u7684\u5377\u79ef\u6838(3\u00d73)\uff0c\u5176\u7f51\u7edc\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a VGGNet\u4f7f\u7528\u7684\u5168\u90e8\u90fd\u662f3x3\u7684\u5c0f\u5377\u79ef\u6838\u548c2x2\u7684\u6c60\u5316\u6838\uff0c\u901a\u8fc7\u4e0d\u65ad\u52a0\u6df1\u7f51\u7edc\u6765\u63d0\u5347\u6027\u80fd\u3002VGG\u53ef\u4ee5\u901a\u8fc7\u91cd\u590d\u4f7f\u7528\u7b80\u5355\u7684\u57fa\u7840\u5757\u6765\u6784\u5efa\u6df1\u5ea6\u6a21\u578b\u3002 \u5728pytorch\u4e2d\u5df2\u7ecf\u5c01\u88c5\u597d\u4e86VGG\u6a21\u578b\uff0c\u6211\u4eec\u5c31\u4e0d\u518d\u8fdb\u884c\u624b\u5de5\u7684\u642d\u5efa\u4e86\uff0c\u76f4\u63a5\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision.models as models # \u6a21\u578b\u5b9e\u4f8b\u5316 model = models . vgg16 () \u6211\u4eec\u901a\u8fc7torchsummary\u6765\u770b\u4e00\u4e0b\u6a21\u578b\u7684\u67b6\u6784\uff1a from torchsummary import summary # \u901a\u8fc7net.summay()\u67e5\u770b\u7f51\u7edc\u7684\u5f62\u72b6 summary ( model = model , input_size = ( 3 , 224 , 224 ), batch_size = 1 , device = 'cpu' ) \u7f51\u7edc\u67b6\u6784\u5982\u4e0b\uff1a ---------------------------------------------------------------- Layer ( type ) Output Shape Param # ================================================================ Conv2d - 1 [ 1 , 64 , 224 , 224 ] 1 , 792 ReLU - 2 [ 1 , 64 , 224 , 224 ] 0 Conv2d - 3 [ 1 , 64 , 224 , 224 ] 36 , 928 ReLU - 4 [ 1 , 64 , 224 , 224 ] 0 MaxPool2d - 5 [ 1 , 64 , 112 , 112 ] 0 Conv2d - 6 [ 1 , 128 , 112 , 112 ] 73 , 856 ReLU - 7 [ 1 , 128 , 112 , 112 ] 0 Conv2d - 8 [ 1 , 128 , 112 , 112 ] 147 , 584 ReLU - 9 [ 1 , 128 , 112 , 112 ] 0 MaxPool2d - 10 [ 1 , 128 , 56 , 56 ] 0 Conv2d - 11 [ 1 , 256 , 56 , 56 ] 295 , 168 ReLU - 12 [ 1 , 256 , 56 , 56 ] 0 Conv2d - 13 [ 1 , 256 , 56 , 56 ] 590 , 080 ReLU - 14 [ 1 , 256 , 56 , 56 ] 0 Conv2d - 15 [ 1 , 256 , 56 , 56 ] 590 , 080 ReLU - 16 [ 1 , 256 , 56 , 56 ] 0 MaxPool2d - 17 [ 1 , 256 , 28 , 28 ] 0 Conv2d - 18 [ 1 , 512 , 28 , 28 ] 1 , 180 , 160 ReLU - 19 [ 1 , 512 , 28 , 28 ] 0 Conv2d - 20 [ 1 , 512 , 28 , 28 ] 2 , 359 , 808 ReLU - 21 [ 1 , 512 , 28 , 28 ] 0 Conv2d - 22 [ 1 , 512 , 28 , 28 ] 2 , 359 , 808 ReLU - 23 [ 1 , 512 , 28 , 28 ] 0 MaxPool2d - 24 [ 1 , 512 , 14 , 14 ] 0 Conv2d - 25 [ 1 , 512 , 14 , 14 ] 2 , 359 , 808 ReLU - 26 [ 1 , 512 , 14 , 14 ] 0 Conv2d - 27 [ 1 , 512 , 14 , 14 ] 2 , 359 , 808 ReLU - 28 [ 1 , 512 , 14 , 14 ] 0 Conv2d - 29 [ 1 , 512 , 14 , 14 ] 2 , 359 , 808 ReLU - 30 [ 1 , 512 , 14 , 14 ] 0 MaxPool2d - 31 [ 1 , 512 , 7 , 7 ] 0 AdaptiveAvgPool2d - 32 [ 1 , 512 , 7 , 7 ] 0 Linear - 33 [ 1 , 4096 ] 102 , 764 , 544 ReLU - 34 [ 1 , 4096 ] 0 Dropout - 35 [ 1 , 4096 ] 0 Linear - 36 [ 1 , 4096 ] 16 , 781 , 312 ReLU - 37 [ 1 , 4096 ] 0 Dropout - 38 [ 1 , 4096 ] 0 Linear - 39 [ 1 , 1000 ] 4 , 097 , 000 ================================================================ Total params : 138 , 357 , 544 Trainable params : 138 , 357 , 544 Non - trainable params : 0 ---------------------------------------------------------------- Input size ( MB ): 0.57 Forward / backward pass size ( MB ): 218.78 Params size ( MB ): 527.79 Estimated Total Size ( MB ): 747.15 ----------------------------------------------------------------","title":"1.VGG\u7684\u7f51\u7edc\u67b6\u6784"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/03-VGGNet/#2","text":"\u56e0\u4e3aImageNet\u6570\u636e\u96c6\u8f83\u5927\u8bad\u7ec3\u65f6\u95f4\u8f83\u957f\uff0c\u6211\u4eec\u4ecd\u7528\u524d\u9762\u7684\u9c9c\u82b1\u79cd\u7c7b\u5b9e\u4f8b\u6765\u7ed9\u5927\u5bb6\u6f14\u793aVGGNet\u3002\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5c06\u56fe\u50cf\u9ad8\u548c\u5bbd\u6269\u5927\u5230VggNet\u4f7f\u7528\u7684\u56fe\u50cf\u9ad8\u548c\u5bbd224\u3002","title":"2.\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b\u6848\u4f8b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/03-VGGNet/#21","text":"\u9996\u5148\u83b7\u53d6\u6570\u636e,\u4e3a\u4e86\u9002\u5e94VGG\u7f51\u7edc\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5bf8\u7684\u8981\u6c42\uff0c\u5c06\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\u5230224x224\u7684\u5927\u5c0f\uff0c\u5e76\u4f7f\u7528DataLoader\u8fdb\u884c\u6279\u6b21\u6570\u636e\u7684\u8bfb\u53d6\uff1a from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 2 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x225 dataset_transform = transforms . Compose ( [ transforms . ToTensor (), transforms . Resize (( 224 , 224 ))]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_test_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_test , batch_size = batch_size , shuffle = False ) \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5c06batch\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 0 : break \u7ed3\u679c\u4e3a\uff1a \u6211\u4eec\u5c31\u4f7f\u7528\u4e0a\u8ff0\u521b\u5efa\u7684\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002","title":"2.1 \u6570\u636e\u8bfb\u53d6"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/03-VGGNet/#22","text":"# \u6a21\u578b\u5b9e\u4f8b\u5316:\u8f93\u5165\u6570\u636e3\u901a\u9053\uff0c\u8fdb\u884c5\u7c7b\u7684\u5206\u7c7b\u5904\u7406 model = models . vgg16 ( num_classes = 5 ) # \u6a21\u578b\u8bad\u7ec3\u7684\u53c2\u6570\u8bbe\u7f6e # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( model . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss ()","title":"2.2 \u6a21\u578b\u5b9e\u4f8b\u5316\u548c\u53c2\u6570\u8bbe\u7f6e"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/03-VGGNet/#23","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6548\u679c\u8fdb\u884c\u8bc4\u4f30\uff0c\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u5360\u603b\u6837\u672c\u7684\u6bd4\u4f8b\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total","title":"2.3 \u6a21\u578b\u8bc4\u4f30\u65b9\u6cd5"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/03-VGGNet/#24","text":"\u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\uff0c\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5e76\u8bc4\u4f30\u6a21\u578b\u7684\u6548\u679c\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u4fbf\u53ef\u5b8c\u6210\u7f51\u7edc\u7684\u8bad\u7ec3\uff1a train () \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 1.8769 , train accuracy : 0.242 , test accuracy : 0.245 time : 4586.281445741653 current epoch = 1 epoch : 1 , loss : 1.6034 , train accuracy : 0.244 , test accuracy : 0.245 time : 4172.730473518372 current epoch = 2 epoch : 2 , loss : 1.6014 , train accuracy : 0.245 , test accuracy : 0.245 time : 3804.3322331905365 current epoch = 3 epoch : 3 , loss : 1.6013 , train accuracy : 0.244 , test accuracy : 0.245 time : 3210.886591911316 current epoch = 4 epoch : 4 , loss : 1.6022 , train accuracy : 0.245 , test accuracy : 0.245 time : 2243.719032764435 current epoch = 5 epoch : 5 , loss : 1.6025 , train accuracy : 0.241 , test accuracy : 0.245 time : 1664.3811178207397 current epoch = 6 epoch : 6 , loss : 1.6008 , train accuracy : 0.244 , test accuracy : 0.245 time : 1680.3882856369019 current epoch = 7 epoch : 7 , loss : 1.6009 , train accuracy : 0.244 , test accuracy : 0.245 time : 1673.7246453762054 current epoch = 8 epoch : 8 , loss : 1.6021 , train accuracy : 0.245 , test accuracy : 0.245 time : 1672.7556710243225 current epoch = 9 epoch : 9 , loss : 1.6011 , train accuracy : 0.245 , test accuracy : 0.245 time : 1660.5588693618774 ------------ finish training ------------- \u6211\u53c8\u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21\u4e3a100\uff0cbatchsize\u8bbe\u7f6e\u4e3a16\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a(\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\uff0c\u53f3\u56fe\u662f\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf) \u5f53\u8bad\u7ec3\u523030\u4e2a\u8f6e\u6b21\u65f6\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u5c31\u4e0d\u518d\u8fdb\u884c\u63d0\u5347\uff0c\u518d\u8fdb\u884c\u8bad\u7ec3\u65f6\u6a21\u578b\u8fc7\u62df\u5408\uff0c\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u63d0\u5347\u4f1a\u51cf\u5c0f\uff0c\u800c\u4e14\u5e94\u4e3aVGG\u6a21\u578b\u7684\u5bb9\u91cf\u6bd4\u8f83\u5927\uff0c\u5bf9\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u5e76\u4e0d\u53cb\u597d\u3002 \u603b\u7ed3 \u77e5\u9053VGG\u7684\u7f51\u7edc\u67b6\u6784 \u52a8\u624b\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u7684\u5b9e\u73b0","title":"2.4 \u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/","text":"1.4 GoogLeNet \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053GoogLeNet\u7f51\u7edc\u7ed3\u6784\u7684\u7279\u70b9 \u80fd\u591f\u5229\u7528GoogLeNet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b GoogLeNet\u7684\u540d\u5b57\u4e0d\u662fGoogleNet\uff0c\u800c\u662fGoogLeNet\uff0c\u8fd9\u662f\u4e3a\u4e86\u81f4\u656cLeNet\u3002GoogLeNet\u548cAlexNet/VGGNet\u8fd9\u7c7b\u4f9d\u9760\u52a0\u6df1\u7f51\u7edc\u7ed3\u6784\u7684\u6df1\u5ea6\u7684\u601d\u60f3\u4e0d\u5b8c\u5168\u4e00\u6837\u3002GoogLeNet\u5728\u52a0\u6df1\u5ea6\u7684\u540c\u65f6\u505a\u4e86\u7ed3\u6784\u4e0a\u7684\u521b\u65b0\uff0c\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505aInception\u7684\u7ed3\u6784\u6765\u4ee3\u66ff\u4e4b\u524d\u7684\u5377\u79ef\u52a0\u6fc0\u6d3b\u7684\u7ecf\u5178\u7ec4\u4ef6\u3002GoogLeNet\u5728ImageNet\u5206\u7c7b\u6bd4\u8d5b\u4e0a\u7684Top-5\u9519\u8bef\u7387\u964d\u4f4e\u5230\u4e866.7%\u3002\u3002 1.Inception \u5757 \u00b6 GoogLeNet\u4e2d\u7684\u57fa\u7840\u5377\u79ef\u5757\u53eb\u4f5cInception\u5757\uff0c\u5f97\u540d\u4e8e\u540c\u540d\u7535\u5f71\u300a\u76d7\u68a6\u7a7a\u95f4\u300b\uff08Inception\uff09\u3002Inception\u5757\u5728\u7ed3\u6784\u6bd4\u8f83\u590d\u6742\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a Inception\u5757\u91cc\u67094\u6761\u5e76\u884c\u7684\u7ebf\u8def\u3002\u524d3\u6761\u7ebf\u8def\u4f7f\u7528\u7a97\u53e3\u5927\u5c0f\u5206\u522b\u662f 1\\times 1 1\\times 1 \u3001 3\\times 3 3\\times 3 \u548c 5\\times 5 5\\times 5 \u7684\u5377\u79ef\u5c42\u6765\u62bd\u53d6\u4e0d\u540c\u7a7a\u95f4\u5c3a\u5bf8\u4e0b\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u4e2d\u95f42\u4e2a\u7ebf\u8def\u4f1a\u5bf9\u8f93\u5165\u5148\u505a 1\\times 1 1\\times 1 \u5377\u79ef\u6765\u51cf\u5c11\u8f93\u5165\u901a\u9053\u6570\uff0c\u4ee5\u964d\u4f4e\u6a21\u578b\u590d\u6742\u5ea6\u3002\u7b2c4\u6761\u7ebf\u8def\u5219\u4f7f\u7528 3\\times 3 3\\times 3 \u6700\u5927\u6c60\u5316\u5c42\uff0c\u540e\u63a5 1\\times 1 1\\times 1 \u5377\u79ef\u5c42\u6765\u6539\u53d8\u901a\u9053\u6570\u30024\u6761\u7ebf\u8def\u90fd\u4f7f\u7528\u4e86\u5408\u9002\u7684\u586b\u5145\u6765\u4f7f\u8f93\u5165\u4e0e\u8f93\u51fa\u7684\u9ad8\u548c\u5bbd\u4e00\u81f4\u3002\u6700\u540e\u6211\u4eec\u5c06\u6bcf\u6761\u7ebf\u8def\u7684\u8f93\u51fa\u5728\u901a\u9053\u7ef4\u4e0a\u8fde\u7ed3,\u5e76\u5411\u540e\u8fdb\u884c\u4f20\u8f93\u3002 1\\times 1 1\\times 1 \u5377\u79ef \uff1a \u5b83\u7684\u8ba1\u7b97\u65b9\u6cd5\u548c\u5176\u4ed6\u5377\u79ef\u6838\u4e00\u6837\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\u5b83\u7684\u5927\u5c0f\u662f 1\\times1 1\\times1 \uff0c\u6ca1\u6709\u8003\u8651\u5728\u7279\u5f81\u56fe\u5c40\u90e8\u4fe1\u606f\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u5b83\u7684\u4f5c\u7528\u4e3b\u8981\u662f\uff1a \u5b9e\u73b0\u8de8\u901a\u9053\u7684\u4ea4\u4e92\u548c\u4fe1\u606f\u6574\u5408 \u5377\u79ef\u6838\u901a\u9053\u6570\u7684\u964d\u7ef4\u548c\u5347\u7ef4\uff0c\u51cf\u5c11\u7f51\u7edc\u53c2\u6570 2.GoogLeNet\u6a21\u578b \u00b6 GoogLeNet\u4e3b\u8981\u7531Inception\u6a21\u5757\u6784\u6210\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6574\u4e2a\u7f51\u7edc\u67b6\u6784\u6211\u4eec\u5206\u4e3a\u4e94\u4e2a\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u4e4b\u95f4\u4f7f\u7528\u6b65\u5e45\u4e3a2\u7684 3\\times 3 3\\times 3 \u6700\u5927\u6c60\u5316\u5c42\u6765\u51cf\u5c0f\u8f93\u51fa\u9ad8\u5bbd\u3002 B1\u6a21\u5757\uff1a\u4f7f\u7528\u4e00\u4e2a64\u901a\u9053\u7684 7\\times 7 7\\times 7 \u5377\u79ef\u5c42 B2\u6a21\u5757\uff1a\u4f7f\u75282\u4e2a\u5377\u79ef\u5c42\uff1a\u9996\u5148\u662f64\u901a\u9053\u7684 1\\times 1 1\\times 1 \u5377\u79ef\u5c42\uff0c\u7136\u540e\u662f\u5c06\u901a\u9053\u589e\u59273\u500d\u7684 3\\times 3 3\\times 3 \u5377\u79ef\u5c42\u3002 B3\u6a21\u5757\uff1a\u4e32\u80542\u4e2a\u5b8c\u6574\u7684Inception\u5757, \u5206\u522b\u662fInception3a\u548cInception3b B4\u6a21\u5757\uff1a\u4e32\u8054\u4e865\u4e2aInception\u5757\uff0c\u5206\u522b\u662fInception4a\uff0cInception4b\uff0cInception4c,Inception4d\u548cInception4e,\u5e76\u4e14\u57284b\u548c4e\u6a21\u5757\u6dfb\u52a0\u4e86\u8f85\u52a9\u8f93\u51fa\u7aef\uff0c\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3 B5\u6a21\u5757\uff1a\u4e32\u8054\u4e862\u4e2aInception\u5757\uff0c\u5206\u522b\u662fInception5a\uff0cInception5b\uff0c\u540e\u9762\u7d27\u8ddf\u8f93\u51fa\u5c42\uff0c\u8be5\u6a21\u5757\u4f7f\u7528\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff08GAP\uff09\u6765\u5c06\u6bcf\u4e2a\u901a\u9053\u7684\u9ad8\u548c\u5bbd\u53d8\u62101\u3002\u6700\u540e\u8f93\u51fa\u53d8\u6210\u4e8c\u7ef4\u6570\u7ec4\u540e\u63a5\u8f93\u51fa\u4e2a\u6570\u4e3a\u6807\u7b7e\u7c7b\u522b\u6570\u7684\u5168\u8fde\u63a5\u5c42\u3002 \u5728\u8fd9\u91cc\u6784\u5efa\u6a21\u578b\u6211\u4eec\u4f9d\u7136\u4f7f\u7528pytorch\u4e2d\u7684\u5c01\u88c5\u7684API\u6765\u7ed9\u5927\u5bb6\u6784\u5efa\u7f51\u7edc\uff1a # \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision.models as models # \u6a21\u578b\u5b9e\u4f8b\u5316 model = models . googlenet () googLeNet\u7684\u7f51\u7edc\u5c42\u6570\u6bd4\u8f83\u591a\uff0c\u6211\u4eec\u6a21\u5757\u6765\u770b\u4e0b\u5b83\u7684\u7f51\u7edc\u7ed3\u6784\uff08\u6c60\u5316\u5c42\u6ca1\u6709\u5c55\u793a\u51fa\u6765\uff09\uff1a 2.1 B1\u6a21\u5757 \u00b6 model . conv1 model . maxpool1 \u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a BasicConv2d ( ( conv ): Conv2d ( 3 , 64 , kernel_size = ( 7 , 7 ), stride = ( 2 , 2 ), padding = ( 3 , 3 ), bias = False ) ( bn ): BatchNorm2d ( 64 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( maxpool1 ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 0 , dilation = 1 , ceil_mode = True ) 2.2 B2\u6a21\u5757 \u00b6 B2\u6a21\u5757\u662f\u4f7f\u75282\u4e2a\u5377\u79ef\u5c42+\u4e00\u4e2a\u6c60\u5316\u5c42 model . conv2 model . conv3 model . maxpool2 \u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a ( conv2 ): BasicConv2d ( ( conv ): Conv2d ( 64 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 64 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( conv3 ): BasicConv2d ( ( conv ): Conv2d ( 64 , 192 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 192 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( maxpool2 ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 0 , dilation = 1 , ceil_mode = True ) 2.3 B3\u6a21\u5757 \u00b6 B3\u6a21\u5757\u4e32\u80542\u4e2a\u5b8c\u6574\u7684Inception\u5757\uff0c\u6211\u4eec\u4ee5\u5176\u4e2dInception3a\u4e3a\u4f8b\uff0c\u7ed9\u5927\u5bb6\u5c55\u793a\u4e0b\u7ed3\u6784\uff1a model . inception3a \u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a Inception ( ( branch1 ): BasicConv2d ( ( conv ): Conv2d ( 192 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 64 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( branch2 ): Sequential ( ( 0 ): BasicConv2d ( ( conv ): Conv2d ( 192 , 96 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 96 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( 1 ): BasicConv2d ( ( conv ): Conv2d ( 96 , 128 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 128 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( branch3 ): Sequential ( ( 0 ): BasicConv2d ( ( conv ): Conv2d ( 192 , 16 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 16 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( 1 ): BasicConv2d ( ( conv ): Conv2d ( 16 , 32 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 32 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( branch4 ): Sequential ( ( 0 ): MaxPool2d ( kernel_size = 3 , stride = 1 , padding = 1 , dilation = 1 , ceil_mode = True ) ( 1 ): BasicConv2d ( ( conv ): Conv2d ( 192 , 32 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 32 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ) 2.4 B4\u6a21\u5757 \u00b6 B4\u6a21\u5757\u4e32\u8054\u4e865\u4e2aInception\u5757\uff0c\u4e0eB3\u6a21\u5757\u662f\u7c7b\u4f3c\u7684\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u5728\u8d58\u8ff0\u4e86\u3002B4\u6a21\u5757\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\u662f\u57284b\u548c4e\u6a21\u5757\u6dfb\u52a0\u4e86\u8f85\u52a9\u8f93\u51fa\u7aef\uff0c\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3\uff0c\u6211\u4eec\u6765\u7ed9\u5927\u5bb6\u770b\u4e0b\u8f85\u52a9\u8f93\u51fa\u7aef\u7684\u7ed3\u6784\uff1a \u6211\u4eec\u4ee54b\u6a21\u5757\u7684\u8f85\u52a9\u8f93\u51fa\u7aef\u4e3a\u4f8b: model . aux1 \u8f93\u51fa\u7aef\u7684\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a InceptionAux ( ( conv ): BasicConv2d ( ( conv ): Conv2d ( 512 , 128 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 128 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( fc1 ): Linear ( in_features = 2048 , out_features = 1024 , bias = True ) ( fc2 ): Linear ( in_features = 1024 , out_features = 1000 , bias = True ) ) 2.5 B5\u6a21\u5757 \u00b6 B5\u4e32\u8054\u4e862\u4e2aInception\u5757\uff0c\u540e\u9762\u7d27\u8ddf\u8f93\u51fa\u5c42\uff0c\u8be5\u6a21\u5757\u4f7f\u7528\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff08GAP\uff09\u6765\u5c06\u6bcf\u4e2a\u901a\u9053\u7684\u9ad8\u548c\u5bbd\u53d8\u62101\u3002\u6700\u540e\u8f93\u51fa\u53d8\u6210\u4e8c\u7ef4\u6570\u7ec4\u540e\u63a5\u8f93\u51fa\u4e2a\u6570\u4e3a\u6807\u7b7e\u7c7b\u522b\u6570\u7684\u5168\u8fde\u63a5\u5c42\u3002\u5176\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a ( avgpool ): AdaptiveAvgPool2d ( output_size = ( 1 , 1 )) ( dropout ): Dropout ( p = 0.2 , inplace = False ) ( fc ): Linear ( in_features = 1024 , out_features = 1000 , bias = True ) 3.\u9c9c\u82b1\u7c7b\u522b\u8bc6\u522b\u6848\u4f8b \u00b6 \u56e0\u4e3aImageNet\u6570\u636e\u96c6\u8f83\u5927\u8bad\u7ec3\u65f6\u95f4\u8f83\u957f\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u9762\u7684\u4ecb\u7ecd\u7684\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u6765\u6f14\u793aGoogLeNet\u3002\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5c06\u56fe\u50cf\u9ad8\u548c\u5bbd\u6269\u5927\u5230GoogLeNet\u4f7f\u7528\u7684\u56fe\u50cf\u9ad8\u548c\u5bbd224\u3002 2.1 \u6570\u636e\u8bfb\u53d6 \u00b6 \u9996\u5148\u83b7\u53d6\u6570\u636e,\u4e3a\u4e86\u9002\u5e94GoogLeNet\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5bf8\u7684\u8981\u6c42\uff0c\u5c06\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\u5230224x224\u7684\u5927\u5c0f\uff0c\u5e76\u4f7f\u7528DataLoader\u8fdb\u884c\u6279\u6b21\u6570\u636e\u7684\u8bfb\u53d6\uff1a from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 2 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x224 dataset_transform = transforms . Compose ( [ transforms . ToTensor (), transforms . Resize (( 224 , 224 ))]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_test_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_test , batch_size = batch_size , shuffle = False ) \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5c06batch\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 1 : break \u7ed3\u679c\u4e3a\uff1a \u6211\u4eec\u5c31\u4f7f\u7528\u4e0a\u8ff0\u521b\u5efa\u7684\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002 2.2 \u6a21\u578b\u5b9e\u4f8b\u5316\u548c\u53c2\u6570\u8bbe\u7f6e \u00b6 # \u6a21\u578b\u5b9e\u4f8b\u5316:\u8f93\u5165\u6570\u636e3\u901a\u9053\uff0c\u8fdb\u884c5\u7c7b\u7684\u5206\u7c7b\u5904\u7406 model = models . googlenet ( num_classes = 5 ) # \u6a21\u578b\u8bad\u7ec3\u7684\u53c2\u6570\u8bbe\u7f6e # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( model . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss () 2.3 \u6a21\u578b\u8bc4\u4f30\u65b9\u6cd5 \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6548\u679c\u8fdb\u884c\u8bc4\u4f30\uff0c\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u5360\u603b\u6837\u672c\u7684\u6bd4\u4f8b\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : # google\u8fdb\u884c\u6a21\u578b\u9884\u6d4b\u65f6\u53ea\u8fd4\u56de\u6700\u7ec8\u7684\u7ed3\u679c outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total 2.4 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\uff0c\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5e76\u8bc4\u4f30\u6a21\u578b\u7684\u6548\u679c\u3002\u4e0e\u5176\u4ed6\u7f51\u7edc\u4e0d\u540c\u7684\u662f\uff0cGoogLeNet\u8fdb\u884c\u8bad\u7ec3\u65f6\u5176\u635f\u5931\u51fd\u6570\u7684\u9700\u8981\u5c06\u4e24\u4e2a\u8f85\u52a9\u8f93\u51fa\u7684\u7ed3\u679c\u8054\u5408\u5728\u4e00\u8d77\uff0c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u66f4\u65b0\u53c2\u6570\uff0c\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a ## \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u8fed\u4ee3\u6b21\u6570 train_loss_sum = 0 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs , aux2 , aux1 = model ( images ) # \u5404\u4e2a\u8f93\u51fa\u7aef\u7684\u635f\u5931 loss0 = loss_fn ( outputs , labels ) loss1 = loss_fn ( aux1 , labels ) loss2 = loss_fn ( aux2 , labels ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss0 + 0.3 * loss2 + 0.2 * loss2 # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () # \u8fed\u4ee3\u6b21\u6570\u589e1 iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u4fbf\u53ef\u5b8c\u6210\u7f51\u7edc\u7684\u8bad\u7ec3\uff1a train () \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 2.1413 , train accuracy : 0.376 , test accuracy : 0.464 time : 4032.8075881004333 current epoch = 1 epoch : 1 , loss : 1.8748 , train accuracy : 0.516 , test accuracy : 0.527 time : 3051.2406339645386 current epoch = 2 epoch : 2 , loss : 1.7072 , train accuracy : 0.567 , test accuracy : 0.602 time : 3016.887406349182 current epoch = 3 epoch : 3 , loss : 1.6060 , train accuracy : 0.591 , test accuracy : 0.637 time : 1945.9554996490479 current epoch = 4 epoch : 4 , loss : 1.5428 , train accuracy : 0.607 , test accuracy : 0.624 time : 1256.7433443069458 current epoch = 5 epoch : 5 , loss : 1.4887 , train accuracy : 0.617 , test accuracy : 0.637 time : 1256.3489837646484 current epoch = 6 epoch : 6 , loss : 1.4481 , train accuracy : 0.629 , test accuracy : 0.621 time : 1246.721872329712 current epoch = 7 epoch : 7 , loss : 1.3597 , train accuracy : 0.662 , test accuracy : 0.629 time : 439.1858534812927 current epoch = 8 epoch : 8 , loss : 1.3338 , train accuracy : 0.668 , test accuracy : 0.659 time : 440.5386116504669 current epoch = 9 epoch : 9 , loss : 1.3054 , train accuracy : 0.669 , test accuracy : 0.687 time : 441.2357189655304 ------------ finish training ------------- \u6211\u53c8\u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21\u4e3a100\uff0cbatchsize\u8bbe\u7f6e\u4e3a16\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a(\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\uff0c\u53f3\u56fe\u662f\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf) \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cGoogleNet\u7684\u62df\u5408\u80fd\u529b\u975e\u5e38\u5f3a\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u80fd\u8fbe\u52300.85\u4ee5\u4e0a\u3002 4.\u5ef6\u4f38\u7248\u672c \u00b6 GoogLeNet\u662f\u4ee5InceptionV1\u4e3a\u57fa\u7840\u8fdb\u884c\u6784\u5efa\u7684\uff0c\u6240\u4ee5GoogLeNet\u4e5f\u53eb\u505aInceptionNet,\u5728\u968f\u540e\u7684\u2f0f\u5e74\u2fa5\uff0c\u7814\u7a76\u2f08\u5458\u5bf9GoogLeNet\u8fdb\u2f8f\u4e86\u6570\u6b21\u6539\u8fdb\uff0c \u5c31\u53c8\u4ea7\u751f\u4e86InceptionV2\uff0cV3,V4\u7b49\u7248\u672c\u3002 4.1 InceptionV2 \u00b6 \u5728InceptionV2\u4e2d\u5c06\u5927\u5377\u79ef\u6838\u62c6\u5206\u4e3a\u5c0f\u5377\u79ef\u6838\uff0c\u5c06V1\u4e2d\u7684 5\\times 5 5\\times 5 \u7684\u5377\u79ef\u7528\u4e24\u4e2a 3\\times 3 3\\times 3 \u7684\u5377\u79ef\u66ff\u4ee3\uff0c\u4ece\u800c\u589e\u52a0\u7f51\u7edc\u7684\u6df1\u5ea6\uff0c\u51cf\u5c11\u4e86\u53c2\u6570\u3002 4.2 InceptionV3 \u00b6 \u5c06n\u00d7n\u5377\u79ef\u5206\u5272\u4e3a1\u00d7n\u548cn\u00d71\u4e24\u4e2a\u5377\u79ef\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u7684 3\\times3 3\\times3 \u5377\u79ef\u9996\u5148\u6267\u884c\u4e00\u4e2a 1\\times3 1\\times3 \u7684\u5377\u79ef\uff0c\u7136\u540e\u6267\u884c\u4e00\u4e2a 3\\times1 3\\times1 \u7684\u5377\u79ef,\u8fd9\u79cd\u65b9\u6cd5\u7684\u53c2\u6570\u91cf\u548c\u8ba1\u7b97\u91cf\u90fd\u6bd4\u539f\u6765\u964d\u4f4e\u3002 \u603b\u7ed3 \u77e5\u9053GoogLeNet\u7684\u7f51\u7edc\u67b6\u6784\uff1a\u6709\u57fa\u7840\u6a21\u5757Inception\u6784\u6210 \u80fd\u591f\u5229\u7528GoogleNet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b","title":"1.4 GoogLeNet"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#14-googlenet","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053GoogLeNet\u7f51\u7edc\u7ed3\u6784\u7684\u7279\u70b9 \u80fd\u591f\u5229\u7528GoogLeNet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b GoogLeNet\u7684\u540d\u5b57\u4e0d\u662fGoogleNet\uff0c\u800c\u662fGoogLeNet\uff0c\u8fd9\u662f\u4e3a\u4e86\u81f4\u656cLeNet\u3002GoogLeNet\u548cAlexNet/VGGNet\u8fd9\u7c7b\u4f9d\u9760\u52a0\u6df1\u7f51\u7edc\u7ed3\u6784\u7684\u6df1\u5ea6\u7684\u601d\u60f3\u4e0d\u5b8c\u5168\u4e00\u6837\u3002GoogLeNet\u5728\u52a0\u6df1\u5ea6\u7684\u540c\u65f6\u505a\u4e86\u7ed3\u6784\u4e0a\u7684\u521b\u65b0\uff0c\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505aInception\u7684\u7ed3\u6784\u6765\u4ee3\u66ff\u4e4b\u524d\u7684\u5377\u79ef\u52a0\u6fc0\u6d3b\u7684\u7ecf\u5178\u7ec4\u4ef6\u3002GoogLeNet\u5728ImageNet\u5206\u7c7b\u6bd4\u8d5b\u4e0a\u7684Top-5\u9519\u8bef\u7387\u964d\u4f4e\u5230\u4e866.7%\u3002\u3002","title":"1.4 GoogLeNet"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#1inception","text":"GoogLeNet\u4e2d\u7684\u57fa\u7840\u5377\u79ef\u5757\u53eb\u4f5cInception\u5757\uff0c\u5f97\u540d\u4e8e\u540c\u540d\u7535\u5f71\u300a\u76d7\u68a6\u7a7a\u95f4\u300b\uff08Inception\uff09\u3002Inception\u5757\u5728\u7ed3\u6784\u6bd4\u8f83\u590d\u6742\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a Inception\u5757\u91cc\u67094\u6761\u5e76\u884c\u7684\u7ebf\u8def\u3002\u524d3\u6761\u7ebf\u8def\u4f7f\u7528\u7a97\u53e3\u5927\u5c0f\u5206\u522b\u662f 1\\times 1 1\\times 1 \u3001 3\\times 3 3\\times 3 \u548c 5\\times 5 5\\times 5 \u7684\u5377\u79ef\u5c42\u6765\u62bd\u53d6\u4e0d\u540c\u7a7a\u95f4\u5c3a\u5bf8\u4e0b\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u4e2d\u95f42\u4e2a\u7ebf\u8def\u4f1a\u5bf9\u8f93\u5165\u5148\u505a 1\\times 1 1\\times 1 \u5377\u79ef\u6765\u51cf\u5c11\u8f93\u5165\u901a\u9053\u6570\uff0c\u4ee5\u964d\u4f4e\u6a21\u578b\u590d\u6742\u5ea6\u3002\u7b2c4\u6761\u7ebf\u8def\u5219\u4f7f\u7528 3\\times 3 3\\times 3 \u6700\u5927\u6c60\u5316\u5c42\uff0c\u540e\u63a5 1\\times 1 1\\times 1 \u5377\u79ef\u5c42\u6765\u6539\u53d8\u901a\u9053\u6570\u30024\u6761\u7ebf\u8def\u90fd\u4f7f\u7528\u4e86\u5408\u9002\u7684\u586b\u5145\u6765\u4f7f\u8f93\u5165\u4e0e\u8f93\u51fa\u7684\u9ad8\u548c\u5bbd\u4e00\u81f4\u3002\u6700\u540e\u6211\u4eec\u5c06\u6bcf\u6761\u7ebf\u8def\u7684\u8f93\u51fa\u5728\u901a\u9053\u7ef4\u4e0a\u8fde\u7ed3,\u5e76\u5411\u540e\u8fdb\u884c\u4f20\u8f93\u3002 1\\times 1 1\\times 1 \u5377\u79ef \uff1a \u5b83\u7684\u8ba1\u7b97\u65b9\u6cd5\u548c\u5176\u4ed6\u5377\u79ef\u6838\u4e00\u6837\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\u5b83\u7684\u5927\u5c0f\u662f 1\\times1 1\\times1 \uff0c\u6ca1\u6709\u8003\u8651\u5728\u7279\u5f81\u56fe\u5c40\u90e8\u4fe1\u606f\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u5b83\u7684\u4f5c\u7528\u4e3b\u8981\u662f\uff1a \u5b9e\u73b0\u8de8\u901a\u9053\u7684\u4ea4\u4e92\u548c\u4fe1\u606f\u6574\u5408 \u5377\u79ef\u6838\u901a\u9053\u6570\u7684\u964d\u7ef4\u548c\u5347\u7ef4\uff0c\u51cf\u5c11\u7f51\u7edc\u53c2\u6570","title":"1.Inception \u5757"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#2googlenet","text":"GoogLeNet\u4e3b\u8981\u7531Inception\u6a21\u5757\u6784\u6210\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6574\u4e2a\u7f51\u7edc\u67b6\u6784\u6211\u4eec\u5206\u4e3a\u4e94\u4e2a\u6a21\u5757\uff0c\u6bcf\u4e2a\u6a21\u5757\u4e4b\u95f4\u4f7f\u7528\u6b65\u5e45\u4e3a2\u7684 3\\times 3 3\\times 3 \u6700\u5927\u6c60\u5316\u5c42\u6765\u51cf\u5c0f\u8f93\u51fa\u9ad8\u5bbd\u3002 B1\u6a21\u5757\uff1a\u4f7f\u7528\u4e00\u4e2a64\u901a\u9053\u7684 7\\times 7 7\\times 7 \u5377\u79ef\u5c42 B2\u6a21\u5757\uff1a\u4f7f\u75282\u4e2a\u5377\u79ef\u5c42\uff1a\u9996\u5148\u662f64\u901a\u9053\u7684 1\\times 1 1\\times 1 \u5377\u79ef\u5c42\uff0c\u7136\u540e\u662f\u5c06\u901a\u9053\u589e\u59273\u500d\u7684 3\\times 3 3\\times 3 \u5377\u79ef\u5c42\u3002 B3\u6a21\u5757\uff1a\u4e32\u80542\u4e2a\u5b8c\u6574\u7684Inception\u5757, \u5206\u522b\u662fInception3a\u548cInception3b B4\u6a21\u5757\uff1a\u4e32\u8054\u4e865\u4e2aInception\u5757\uff0c\u5206\u522b\u662fInception4a\uff0cInception4b\uff0cInception4c,Inception4d\u548cInception4e,\u5e76\u4e14\u57284b\u548c4e\u6a21\u5757\u6dfb\u52a0\u4e86\u8f85\u52a9\u8f93\u51fa\u7aef\uff0c\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3 B5\u6a21\u5757\uff1a\u4e32\u8054\u4e862\u4e2aInception\u5757\uff0c\u5206\u522b\u662fInception5a\uff0cInception5b\uff0c\u540e\u9762\u7d27\u8ddf\u8f93\u51fa\u5c42\uff0c\u8be5\u6a21\u5757\u4f7f\u7528\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff08GAP\uff09\u6765\u5c06\u6bcf\u4e2a\u901a\u9053\u7684\u9ad8\u548c\u5bbd\u53d8\u62101\u3002\u6700\u540e\u8f93\u51fa\u53d8\u6210\u4e8c\u7ef4\u6570\u7ec4\u540e\u63a5\u8f93\u51fa\u4e2a\u6570\u4e3a\u6807\u7b7e\u7c7b\u522b\u6570\u7684\u5168\u8fde\u63a5\u5c42\u3002 \u5728\u8fd9\u91cc\u6784\u5efa\u6a21\u578b\u6211\u4eec\u4f9d\u7136\u4f7f\u7528pytorch\u4e2d\u7684\u5c01\u88c5\u7684API\u6765\u7ed9\u5927\u5bb6\u6784\u5efa\u7f51\u7edc\uff1a # \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision.models as models # \u6a21\u578b\u5b9e\u4f8b\u5316 model = models . googlenet () googLeNet\u7684\u7f51\u7edc\u5c42\u6570\u6bd4\u8f83\u591a\uff0c\u6211\u4eec\u6a21\u5757\u6765\u770b\u4e0b\u5b83\u7684\u7f51\u7edc\u7ed3\u6784\uff08\u6c60\u5316\u5c42\u6ca1\u6709\u5c55\u793a\u51fa\u6765\uff09\uff1a","title":"2.GoogLeNet\u6a21\u578b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#21-b1","text":"model . conv1 model . maxpool1 \u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a BasicConv2d ( ( conv ): Conv2d ( 3 , 64 , kernel_size = ( 7 , 7 ), stride = ( 2 , 2 ), padding = ( 3 , 3 ), bias = False ) ( bn ): BatchNorm2d ( 64 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( maxpool1 ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 0 , dilation = 1 , ceil_mode = True )","title":"2.1 B1\u6a21\u5757"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#22-b2","text":"B2\u6a21\u5757\u662f\u4f7f\u75282\u4e2a\u5377\u79ef\u5c42+\u4e00\u4e2a\u6c60\u5316\u5c42 model . conv2 model . conv3 model . maxpool2 \u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a ( conv2 ): BasicConv2d ( ( conv ): Conv2d ( 64 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 64 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( conv3 ): BasicConv2d ( ( conv ): Conv2d ( 64 , 192 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 192 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( maxpool2 ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 0 , dilation = 1 , ceil_mode = True )","title":"2.2 B2\u6a21\u5757"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#23-b3","text":"B3\u6a21\u5757\u4e32\u80542\u4e2a\u5b8c\u6574\u7684Inception\u5757\uff0c\u6211\u4eec\u4ee5\u5176\u4e2dInception3a\u4e3a\u4f8b\uff0c\u7ed9\u5927\u5bb6\u5c55\u793a\u4e0b\u7ed3\u6784\uff1a model . inception3a \u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a Inception ( ( branch1 ): BasicConv2d ( ( conv ): Conv2d ( 192 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 64 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( branch2 ): Sequential ( ( 0 ): BasicConv2d ( ( conv ): Conv2d ( 192 , 96 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 96 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( 1 ): BasicConv2d ( ( conv ): Conv2d ( 96 , 128 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 128 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( branch3 ): Sequential ( ( 0 ): BasicConv2d ( ( conv ): Conv2d ( 192 , 16 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 16 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( 1 ): BasicConv2d ( ( conv ): Conv2d ( 16 , 32 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 32 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( branch4 ): Sequential ( ( 0 ): MaxPool2d ( kernel_size = 3 , stride = 1 , padding = 1 , dilation = 1 , ceil_mode = True ) ( 1 ): BasicConv2d ( ( conv ): Conv2d ( 192 , 32 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 32 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) )","title":"2.3 B3\u6a21\u5757"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#24-b4","text":"B4\u6a21\u5757\u4e32\u8054\u4e865\u4e2aInception\u5757\uff0c\u4e0eB3\u6a21\u5757\u662f\u7c7b\u4f3c\u7684\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u5728\u8d58\u8ff0\u4e86\u3002B4\u6a21\u5757\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\u662f\u57284b\u548c4e\u6a21\u5757\u6dfb\u52a0\u4e86\u8f85\u52a9\u8f93\u51fa\u7aef\uff0c\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3\uff0c\u6211\u4eec\u6765\u7ed9\u5927\u5bb6\u770b\u4e0b\u8f85\u52a9\u8f93\u51fa\u7aef\u7684\u7ed3\u6784\uff1a \u6211\u4eec\u4ee54b\u6a21\u5757\u7684\u8f85\u52a9\u8f93\u51fa\u7aef\u4e3a\u4f8b: model . aux1 \u8f93\u51fa\u7aef\u7684\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a InceptionAux ( ( conv ): BasicConv2d ( ( conv ): Conv2d ( 512 , 128 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn ): BatchNorm2d ( 128 , eps = 0.001 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( fc1 ): Linear ( in_features = 2048 , out_features = 1024 , bias = True ) ( fc2 ): Linear ( in_features = 1024 , out_features = 1000 , bias = True ) )","title":"2.4 B4\u6a21\u5757"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#25-b5","text":"B5\u4e32\u8054\u4e862\u4e2aInception\u5757\uff0c\u540e\u9762\u7d27\u8ddf\u8f93\u51fa\u5c42\uff0c\u8be5\u6a21\u5757\u4f7f\u7528\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff08GAP\uff09\u6765\u5c06\u6bcf\u4e2a\u901a\u9053\u7684\u9ad8\u548c\u5bbd\u53d8\u62101\u3002\u6700\u540e\u8f93\u51fa\u53d8\u6210\u4e8c\u7ef4\u6570\u7ec4\u540e\u63a5\u8f93\u51fa\u4e2a\u6570\u4e3a\u6807\u7b7e\u7c7b\u522b\u6570\u7684\u5168\u8fde\u63a5\u5c42\u3002\u5176\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a ( avgpool ): AdaptiveAvgPool2d ( output_size = ( 1 , 1 )) ( dropout ): Dropout ( p = 0.2 , inplace = False ) ( fc ): Linear ( in_features = 1024 , out_features = 1000 , bias = True )","title":"2.5 B5\u6a21\u5757"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#3","text":"\u56e0\u4e3aImageNet\u6570\u636e\u96c6\u8f83\u5927\u8bad\u7ec3\u65f6\u95f4\u8f83\u957f\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u9762\u7684\u4ecb\u7ecd\u7684\u9c9c\u82b1\u5206\u7c7b\u6570\u636e\u96c6\u6765\u6f14\u793aGoogLeNet\u3002\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5c06\u56fe\u50cf\u9ad8\u548c\u5bbd\u6269\u5927\u5230GoogLeNet\u4f7f\u7528\u7684\u56fe\u50cf\u9ad8\u548c\u5bbd224\u3002","title":"3.\u9c9c\u82b1\u7c7b\u522b\u8bc6\u522b\u6848\u4f8b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#21","text":"\u9996\u5148\u83b7\u53d6\u6570\u636e,\u4e3a\u4e86\u9002\u5e94GoogLeNet\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5bf8\u7684\u8981\u6c42\uff0c\u5c06\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\u5230224x224\u7684\u5927\u5c0f\uff0c\u5e76\u4f7f\u7528DataLoader\u8fdb\u884c\u6279\u6b21\u6570\u636e\u7684\u8bfb\u53d6\uff1a from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 2 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x224 dataset_transform = transforms . Compose ( [ transforms . ToTensor (), transforms . Resize (( 224 , 224 ))]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_test_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_test , batch_size = batch_size , shuffle = False ) \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5c06batch\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 1 : break \u7ed3\u679c\u4e3a\uff1a \u6211\u4eec\u5c31\u4f7f\u7528\u4e0a\u8ff0\u521b\u5efa\u7684\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002","title":"2.1 \u6570\u636e\u8bfb\u53d6"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#22","text":"# \u6a21\u578b\u5b9e\u4f8b\u5316:\u8f93\u5165\u6570\u636e3\u901a\u9053\uff0c\u8fdb\u884c5\u7c7b\u7684\u5206\u7c7b\u5904\u7406 model = models . googlenet ( num_classes = 5 ) # \u6a21\u578b\u8bad\u7ec3\u7684\u53c2\u6570\u8bbe\u7f6e # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( model . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss ()","title":"2.2 \u6a21\u578b\u5b9e\u4f8b\u5316\u548c\u53c2\u6570\u8bbe\u7f6e"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#23","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6548\u679c\u8fdb\u884c\u8bc4\u4f30\uff0c\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u5360\u603b\u6837\u672c\u7684\u6bd4\u4f8b\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : # google\u8fdb\u884c\u6a21\u578b\u9884\u6d4b\u65f6\u53ea\u8fd4\u56de\u6700\u7ec8\u7684\u7ed3\u679c outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total","title":"2.3 \u6a21\u578b\u8bc4\u4f30\u65b9\u6cd5"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#24","text":"\u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\uff0c\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5e76\u8bc4\u4f30\u6a21\u578b\u7684\u6548\u679c\u3002\u4e0e\u5176\u4ed6\u7f51\u7edc\u4e0d\u540c\u7684\u662f\uff0cGoogLeNet\u8fdb\u884c\u8bad\u7ec3\u65f6\u5176\u635f\u5931\u51fd\u6570\u7684\u9700\u8981\u5c06\u4e24\u4e2a\u8f85\u52a9\u8f93\u51fa\u7684\u7ed3\u679c\u8054\u5408\u5728\u4e00\u8d77\uff0c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u66f4\u65b0\u53c2\u6570\uff0c\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a ## \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u8fed\u4ee3\u6b21\u6570 train_loss_sum = 0 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs , aux2 , aux1 = model ( images ) # \u5404\u4e2a\u8f93\u51fa\u7aef\u7684\u635f\u5931 loss0 = loss_fn ( outputs , labels ) loss1 = loss_fn ( aux1 , labels ) loss2 = loss_fn ( aux2 , labels ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss0 + 0.3 * loss2 + 0.2 * loss2 # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () # \u8fed\u4ee3\u6b21\u6570\u589e1 iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u4fbf\u53ef\u5b8c\u6210\u7f51\u7edc\u7684\u8bad\u7ec3\uff1a train () \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 2.1413 , train accuracy : 0.376 , test accuracy : 0.464 time : 4032.8075881004333 current epoch = 1 epoch : 1 , loss : 1.8748 , train accuracy : 0.516 , test accuracy : 0.527 time : 3051.2406339645386 current epoch = 2 epoch : 2 , loss : 1.7072 , train accuracy : 0.567 , test accuracy : 0.602 time : 3016.887406349182 current epoch = 3 epoch : 3 , loss : 1.6060 , train accuracy : 0.591 , test accuracy : 0.637 time : 1945.9554996490479 current epoch = 4 epoch : 4 , loss : 1.5428 , train accuracy : 0.607 , test accuracy : 0.624 time : 1256.7433443069458 current epoch = 5 epoch : 5 , loss : 1.4887 , train accuracy : 0.617 , test accuracy : 0.637 time : 1256.3489837646484 current epoch = 6 epoch : 6 , loss : 1.4481 , train accuracy : 0.629 , test accuracy : 0.621 time : 1246.721872329712 current epoch = 7 epoch : 7 , loss : 1.3597 , train accuracy : 0.662 , test accuracy : 0.629 time : 439.1858534812927 current epoch = 8 epoch : 8 , loss : 1.3338 , train accuracy : 0.668 , test accuracy : 0.659 time : 440.5386116504669 current epoch = 9 epoch : 9 , loss : 1.3054 , train accuracy : 0.669 , test accuracy : 0.687 time : 441.2357189655304 ------------ finish training ------------- \u6211\u53c8\u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21\u4e3a100\uff0cbatchsize\u8bbe\u7f6e\u4e3a16\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a(\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\uff0c\u53f3\u56fe\u662f\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf) \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cGoogleNet\u7684\u62df\u5408\u80fd\u529b\u975e\u5e38\u5f3a\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u80fd\u8fbe\u52300.85\u4ee5\u4e0a\u3002","title":"2.4 \u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#4","text":"GoogLeNet\u662f\u4ee5InceptionV1\u4e3a\u57fa\u7840\u8fdb\u884c\u6784\u5efa\u7684\uff0c\u6240\u4ee5GoogLeNet\u4e5f\u53eb\u505aInceptionNet,\u5728\u968f\u540e\u7684\u2f0f\u5e74\u2fa5\uff0c\u7814\u7a76\u2f08\u5458\u5bf9GoogLeNet\u8fdb\u2f8f\u4e86\u6570\u6b21\u6539\u8fdb\uff0c \u5c31\u53c8\u4ea7\u751f\u4e86InceptionV2\uff0cV3,V4\u7b49\u7248\u672c\u3002","title":"4.\u5ef6\u4f38\u7248\u672c"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#41-inceptionv2","text":"\u5728InceptionV2\u4e2d\u5c06\u5927\u5377\u79ef\u6838\u62c6\u5206\u4e3a\u5c0f\u5377\u79ef\u6838\uff0c\u5c06V1\u4e2d\u7684 5\\times 5 5\\times 5 \u7684\u5377\u79ef\u7528\u4e24\u4e2a 3\\times 3 3\\times 3 \u7684\u5377\u79ef\u66ff\u4ee3\uff0c\u4ece\u800c\u589e\u52a0\u7f51\u7edc\u7684\u6df1\u5ea6\uff0c\u51cf\u5c11\u4e86\u53c2\u6570\u3002","title":"4.1 InceptionV2"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/04-GoogLeNet/#42-inceptionv3","text":"\u5c06n\u00d7n\u5377\u79ef\u5206\u5272\u4e3a1\u00d7n\u548cn\u00d71\u4e24\u4e2a\u5377\u79ef\uff0c\u4f8b\u5982\uff0c\u4e00\u4e2a\u7684 3\\times3 3\\times3 \u5377\u79ef\u9996\u5148\u6267\u884c\u4e00\u4e2a 1\\times3 1\\times3 \u7684\u5377\u79ef\uff0c\u7136\u540e\u6267\u884c\u4e00\u4e2a 3\\times1 3\\times1 \u7684\u5377\u79ef,\u8fd9\u79cd\u65b9\u6cd5\u7684\u53c2\u6570\u91cf\u548c\u8ba1\u7b97\u91cf\u90fd\u6bd4\u539f\u6765\u964d\u4f4e\u3002 \u603b\u7ed3 \u77e5\u9053GoogLeNet\u7684\u7f51\u7edc\u67b6\u6784\uff1a\u6709\u57fa\u7840\u6a21\u5757Inception\u6784\u6210 \u80fd\u591f\u5229\u7528GoogleNet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b","title":"4.2 InceptionV3"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/","text":"1.5 ResNet \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053ResNet\u7f51\u7edc\u7ed3\u6784\u7684\u7279\u70b9 \u80fd\u591f\u5229\u7528ResNet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b \u7f51\u7edc\u8d8a\u6df1\uff0c\u83b7\u53d6\u7684\u4fe1\u606f\u5c31\u8d8a\u591a\uff0c\u7279\u5f81\u4e5f\u8d8a\u4e30\u5bcc\u3002\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\uff0c\u968f\u7740\u7f51\u7edc\u7684\u52a0\u6df1\uff0c\u4f18\u5316\u6548\u679c\u53cd\u800c\u8d8a\u5dee\uff0c\u6d4b\u8bd5\u6570\u636e\u548c\u8bad\u7ec3\u6570\u636e\u7684\u51c6\u786e\u7387\u53cd\u800c\u964d\u4f4e\u4e86\u3002 \u9488\u5bf9\u8fd9\u4e00\u95ee\u9898\uff0c\u4f55\u607a\u660e\u7b49\u4eba\u63d0\u51fa\u4e86\u6b8b\u5dee\u7f51\u7edc\uff08ResNet\uff09\u57282015\u5e74\u7684ImageNet\u56fe\u50cf\u8bc6\u522b\u6311\u6218\u8d5b\u593a\u9b41\uff0c\u5e76\u6df1\u523b\u5f71\u54cd\u4e86\u540e\u6765\u7684\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u8bbe\u8ba1\u3002 1 \u6b8b\u5dee\u5757 \u00b6 \u5047\u8bbe F(x) \u4ee3\u8868\u67d0\u4e2a\u53ea\u5305\u542b\u6709\u4e24\u5c42\u7684\u6620\u5c04\u51fd\u6570\uff0c x \u662f\u8f93\u5165\uff0c F(x)\u662f\u8f93\u51fa\u3002\u5047\u8bbe\u4ed6\u4eec\u5177\u6709\u76f8\u540c\u7684\u7ef4\u5ea6\u3002\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u4fee\u6539\u7f51\u7edc\u4e2d\u7684 w\u548cb\u53bb\u62df\u5408\u4e00\u4e2a\u7406\u60f3\u7684 H(x)\u3002\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u76ee\u6807\u662f\u4fee\u6539F(x) \u4e2d\u7684 w\u548cb\u903c\u8fd1 H(x) \u3002\u5982\u679c\u6211\u4eec\u6539\u53d8\u601d\u8def\uff0c\u7528F(x) \u6765\u903c\u8fd1 H(x)-x \uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u8f93\u51fa\u5c31\u53d8\u4e3a F(x)+x\uff0c\u8fd9\u91cc\u5c06\u76f4\u63a5\u4ece\u8f93\u5165\u8fde\u63a5\u5230\u8f93\u51fa\u7684\u7ed3\u6784\u4e5f\u79f0\u4e3ashortcut\uff0c\u90a3\u6574\u4e2a\u7ed3\u6784\u5c31\u662f\u6b8b\u5dee\u5757\uff0cResNet\u7684\u57fa\u7840\u6a21\u5757\u3002 ResNet\u6cbf\u7528\u4e86VGG\u5168 3\\times 3 3\\times 3 \u5377\u79ef\u5c42\u7684\u8bbe\u8ba1\u3002\u6b8b\u5dee\u5757\u91cc\u9996\u5148\u67092\u4e2a\u6709\u76f8\u540c\u8f93\u51fa\u901a\u9053\u6570\u7684 3\\times 3 3\\times 3 \u5377\u79ef\u5c42\u3002\u6bcf\u4e2a\u5377\u79ef\u5c42\u540e\u63a5BN\u5c42\u548cReLU\u6fc0\u6d3b\u51fd\u6570\uff0c\u7136\u540e\u5c06\u8f93\u5165\u76f4\u63a5\u52a0\u5728\u6700\u540e\u7684ReLU\u6fc0\u6d3b\u51fd\u6570\u524d\uff0c\u8fd9\u79cd\u7ed3\u6784\u7528\u4e8e\u5c42\u6570\u8f83\u5c11\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u6bd4\u5982resnet18\u548cResNet34\u3002\u8fd8\u6709\u4e00\u79cd\u7ed3\u6784\u5f15\u5165 1\\times 1 1\\times 1 \u5377\u79ef\u5c42\u6765\u8c03\u6574\u8f93\u5165\u7684\u901a\u9053\u6570\uff0c\u8fbe\u5230\u51cf\u5c11\u6a21\u578b\u53c2\u6570\u91cf\u7684\u4f5c\u7528\uff0c\u8fd9\u79cd\u7ed3\u6784\u53eb\u4f5c\u74f6\u9888\u6a21\u5757\uff0c\u901a\u5e38\u7528\u4e8e\u7f51\u7edc\u5c42\u6570\u8f83\u591a\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\u3002\u4f8b\u5982resnet50\uff0cresnet101\u548cresnet152\u3002\u8fd9\u4e24\u79cd\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u968f\u7740\u7f51\u7edc\u6df1\u5ea6\u7684\u589e\u52a0\uff0c\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u548c\u901a\u9053\u6570\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u65f6\u6211\u4eec\u4f7f\u75281*1\u7684\u5377\u79ef\u6765\u6539\u53d8\u77ed\u8fde\u63a5\u90e8\u5206\u7684\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u548c\u901a\u9053\u6570\uff0c\u4ece\u800c\u80fd\u591f\u5b8c\u6210\u7279\u5f81\u56fe\u7684\u878d\u5408\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 2 ResNet\u6a21\u578b \u00b6 ResNet\u6a21\u578b\u7684\u6784\u6210\u5982\u4e0b\u56fe\u6240\u793a\uff1a ResNet\u7f51\u7edc\u4e2d\u6309\u7167\u6b8b\u5dee\u5757\u7684\u901a\u9053\u6570\u5206\u4e3a\u4e0d\u540c\u7684\u6a21\u5757\u3002 \u7b2c\u4e00\u4e2a\u6a21\u5757\u4f7f\u7528\u8f93\u51fa\u901a\u9053\u6570\u4e3a64\u3001\u6b65\u5e45\u4e3a2\u7684 7\\times 7 7\\times 7 \u5377\u79ef\u5c42\uff0c\u540e\u63a5\u6b65\u5e45\u4e3a2\u7684 3\\times 3 3\\times 3 \u7684\u6700\u5927\u6c60\u5316\u5c42\u3002 \u4e4b\u540e\u7684\u6bcf\u4e2a\u6a21\u5757\u5728\u7b2c\u4e00\u4e2a\u6b8b\u5dee\u5757\u91cc\u5c06\u4e0a\u4e00\u4e2a\u6a21\u5757\u7684\u901a\u9053\u6570\u7ffb\u500d\uff0c\u5e76\u5c06\u9ad8\u548c\u5bbd\u51cf\u534a\u3002 \u6700\u540e\uff0c\u4e0eGoogLeNet\u4e00\u6837\uff0c\u52a0\u5165\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff08GAP\uff09\u540e\u63a5\u4e0a\u5168\u8fde\u63a5\u5c42\u8f93\u51fa\u3002 \u5404\u79cdresnet\u7684\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528pytorch\u4e2d\u5c01\u88c5\u597d\u7684API\u6784\u5efaresnet18\u548cresnet50\u7ed3\u6784\u6765\u5206\u6790\u6574\u4e2a\u6b8b\u5dee\u7f51\u7edc\u7684\u6784\u6210\u3002\u7f51\u7edc\u6784\u5efa\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision.models as models # \u6a21\u578b\u5b9e\u4f8b\u5316 model = models . resnet18 () \u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u67e5\u770b\u7f51\u7edc\u7ed3\u6784\uff1a model . parameters \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a < bound method Module . parameters of ResNet ( ( conv1 ): Conv2d ( 3 , 64 , kernel_size = ( 7 , 7 ), stride = ( 2 , 2 ), padding = ( 3 , 3 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( maxpool ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 1 , dilation = 1 , ceil_mode = False ) ( layer1 ): Sequential ( ( 0 ): BasicBlock ( ( conv1 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( 1 ): BasicBlock ( ( conv1 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( layer2 ): Sequential ( ( 0 ): BasicBlock ( ( conv1 ): Conv2d ( 64 , 128 , kernel_size = ( 3 , 3 ), stride = ( 2 , 2 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 128 , 128 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 64 , 128 , kernel_size = ( 1 , 1 ), stride = ( 2 , 2 ), bias = False ) ( 1 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( 1 ): BasicBlock ( ( conv1 ): Conv2d ( 128 , 128 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 128 , 128 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( layer3 ): Sequential ( ( 0 ): BasicBlock ( ( conv1 ): Conv2d ( 128 , 256 , kernel_size = ( 3 , 3 ), stride = ( 2 , 2 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 128 , 256 , kernel_size = ( 1 , 1 ), stride = ( 2 , 2 ), bias = False ) ( 1 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( 1 ): BasicBlock ( ( conv1 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( layer4 ): Sequential ( ( 0 ): BasicBlock ( ( conv1 ): Conv2d ( 256 , 512 , kernel_size = ( 3 , 3 ), stride = ( 2 , 2 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 512 , 512 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 256 , 512 , kernel_size = ( 1 , 1 ), stride = ( 2 , 2 ), bias = False ) ( 1 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( 1 ): BasicBlock ( ( conv1 ): Conv2d ( 512 , 512 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 512 , 512 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( avgpool ): AdaptiveAvgPool2d ( output_size = ( 1 , 1 )) ( fc ): Linear ( in_features = 512 , out_features = 1000 , bias = True ) ) > \u5176\u4e2d\u7b2c\u4e00\u90e8\u5206\u5bf9\u5e94\u7740\u7f51\u7edc\u7684\u8f93\u5165\u6a21\u5757\uff0c\u540e\u9762layer1,layer2,layer3\u548clayer4\u8868\u793a\u6b8b\u5dee\u6a21\u5757\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6b8b\u5dee\u6a21\u5757\u662f\u7531\u57fa\u7840\u6b8b\u5dee\u5757\u6784\u6210\u7684\uff0c\u6700\u540e\u7684avgpool\u548cfc\u5bf9\u5e94\u7740\u7f51\u7edc\u7684\u8f93\u51fa\u5c42\u3002Resnet50\u7684\u7ed3\u6784\u4e0eresnet18\u7684\u7ed3\u6784\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u4e2d\u95f4\u7684\u6b8b\u5dee\u6a21\u5757\u662f\u7531\u74f6\u9888\u6a21\u5757\u6784\u6210\u7684\uff0c\u6211\u4eec\u901a\u8fc7model.layer1\u6765\u89c2\u5bdf\u4e0b\uff1a # \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision.models as models # \u6a21\u578b\u5b9e\u4f8b\u5316 model = models . resnet50 () # ResNet50\u7684\u7b2c\u4e00\u4e2a\u6b8b\u5dee\u6a21\u5757 model . layer1 \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a Sequential ( ( 0 ): Bottleneck ( ( conv1 ): Conv2d ( 64 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( 1 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( 1 ): Bottleneck ( ( conv1 ): Conv2d ( 256 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ) ( 2 ): Bottleneck ( ( conv1 ): Conv2d ( 256 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ) ) \u4ece\u4e0a\u8ff0\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cresnet50\u4e2d\u7684\u6b8b\u5dee\u6a21\u5757\u7531\u74f6\u9888\u6a21\u5757\u6784\u6210\uff0c\u5728\u7b2c\u4e00\u4e2a\u6b8b\u5dee\u6a21\u5757\u4e2d\u5305\u542b3\u4e2a\u6b8b\u5dee\u5757\uff0c\u540c\u6837\u7684\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\uff0cmodel.layer2,model.layer3\u548cmodel.layer4\u67e5\u770b\u5176\u4ed6\u6a21\u5757\u7684\u7ed3\u6784\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7model.parameters\u67e5\u770b\u6574\u4e2a\u7f51\u7edc\u7684\u6784\u6210\u3002 2.\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b\u6848\u4f8b \u00b6 \u56e0\u4e3aImageNet\u6570\u636e\u96c6\u8f83\u5927\u8bad\u7ec3\u65f6\u95f4\u8f83\u957f\uff0c\u6211\u4eec\u4ecd\u7528\u524d\u9762\u7684\u9c9c\u82b1\u79cd\u7c7b\u5b9e\u4f8b\u6765\u7ed9\u5927\u5bb6\u6f14\u793aResNet\u3002ResNet\u6709\u4e0d\u540c\u5c42\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u56e0\u4e3a\u9c9c\u82b1\u6570\u636e\u96c6\u6bd4\u8f83\u5c0f\uff0c\u9009\u62e9\u5c42\u6570\u8f83\u5c11\u7684resnet18\u8fdb\u884c\u5904\u7406\u3002\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5c06\u56fe\u50cf\u9ad8\u548c\u5bbd\u7f29\u653e\u5230ResNet\u4f7f\u7528\u7684\u56fe\u50cf\u9ad8\u548c\u5bbd224\u3002 2.1 \u6570\u636e\u8bfb\u53d6 \u00b6 \u9996\u5148\u83b7\u53d6\u6570\u636e,\u4e3a\u4e86\u9002\u5e94Resnet18\u7f51\u7edc\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5bf8\u7684\u8981\u6c42\uff0c\u5c06\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\u5230224x224\u7684\u5927\u5c0f\uff0c\u5e76\u4f7f\u7528DataLoader\u8fdb\u884c\u6279\u6b21\u6570\u636e\u7684\u8bfb\u53d6\uff1a from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 2 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x224 dataset_transform = transforms . Compose ( [ transforms . ToTensor (), transforms . Resize (( 224 , 224 ))]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_train_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_test , batch_size = batch_size , shuffle = False ) \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5c06batch\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 0 : break \u7ed3\u679c\u4e3a\uff1a 2.2 \u6a21\u578b\u5b9e\u4f8b\u5316\u548c\u53c2\u6570\u8bbe\u7f6e \u00b6 # \u6a21\u578b\u5b9e\u4f8b\u5316:\u8f93\u5165\u6570\u636e3\u901a\u9053\uff0c\u8fdb\u884c5\u7c7b\u7684\u5206\u7c7b\u5904\u7406 model = models . resnet18 ( num_classes = 5 ) # \u6a21\u578b\u8bad\u7ec3\u7684\u53c2\u6570\u8bbe\u7f6e # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( model . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss () 2.3 \u6a21\u578b\u8bc4\u4f30\u65b9\u6cd5 \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6548\u679c\u8fdb\u884c\u8bc4\u4f30\uff0c\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u5360\u603b\u6837\u672c\u7684\u6bd4\u4f8b\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total 2.4 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\uff0c\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5e76\u8bc4\u4f30\u6a21\u578b\u7684\u6548\u679c\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u4fbf\u53ef\u5b8c\u6210\u7f51\u7edc\u7684\u8bad\u7ec3\uff1a train () \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 1.3775 , train accuracy : 0.442 , test accuracy : 0.516 time : 2324.5159425735474 current epoch = 1 epoch : 1 , loss : 1.1998 , train accuracy : 0.528 , test accuracy : 0.552 time : 2162.3196935653687 current epoch = 2 epoch : 2 , loss : 1.0808 , train accuracy : 0.574 , test accuracy : 0.579 time : 1870.7562956809998 current epoch = 3 epoch : 3 , loss : 0.9900 , train accuracy : 0.621 , test accuracy : 0.591 time : 1861.4767940044403 current epoch = 4 epoch : 4 , loss : 0.9692 , train accuracy : 0.635 , test accuracy : 0.516 time : 1867.3297381401062 current epoch = 5 epoch : 5 , loss : 0.8903 , train accuracy : 0.662 , test accuracy : 0.684 time : 1544.7287199497223 current epoch = 6 epoch : 6 , loss : 0.8586 , train accuracy : 0.670 , test accuracy : 0.541 time : 1042.7271778583527 current epoch = 7 epoch : 7 , loss : 0.8296 , train accuracy : 0.701 , test accuracy : 0.712 time : 1023.7487924098969 current epoch = 8 epoch : 8 , loss : 0.7674 , train accuracy : 0.710 , test accuracy : 0.676 time : 1032.3311216831207 current epoch = 9 epoch : 9 , loss : 0.7376 , train accuracy : 0.730 , test accuracy : 0.684 time : 1019.4126000404358 \u6211\u53c8\u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21\u4e3a100\uff0cbatchsize\u8bbe\u7f6e\u4e3a16\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a(\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\uff0c\u53f3\u56fe\u662f\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf): \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u8bad\u7ec3\u523020\u51e0\u4e2a\u8f6e\u6b21\u65f6\uff0c\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u5c31\u4ee5\u62df\u5408\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u8fbe\u52300.75\u4ee5\u4e0a\u3002 \u603b\u7ed3 \u77e5\u9053ResNet\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u6b8b\u5dee\u5757\u7684\u6784\u6210 \u80fd\u591f\u5229\u7528Resnet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1","title":"1.5 ResNet"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/#15-resnet","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053ResNet\u7f51\u7edc\u7ed3\u6784\u7684\u7279\u70b9 \u80fd\u591f\u5229\u7528ResNet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b \u7f51\u7edc\u8d8a\u6df1\uff0c\u83b7\u53d6\u7684\u4fe1\u606f\u5c31\u8d8a\u591a\uff0c\u7279\u5f81\u4e5f\u8d8a\u4e30\u5bcc\u3002\u4f46\u662f\u5728\u5b9e\u8df5\u4e2d\uff0c\u968f\u7740\u7f51\u7edc\u7684\u52a0\u6df1\uff0c\u4f18\u5316\u6548\u679c\u53cd\u800c\u8d8a\u5dee\uff0c\u6d4b\u8bd5\u6570\u636e\u548c\u8bad\u7ec3\u6570\u636e\u7684\u51c6\u786e\u7387\u53cd\u800c\u964d\u4f4e\u4e86\u3002 \u9488\u5bf9\u8fd9\u4e00\u95ee\u9898\uff0c\u4f55\u607a\u660e\u7b49\u4eba\u63d0\u51fa\u4e86\u6b8b\u5dee\u7f51\u7edc\uff08ResNet\uff09\u57282015\u5e74\u7684ImageNet\u56fe\u50cf\u8bc6\u522b\u6311\u6218\u8d5b\u593a\u9b41\uff0c\u5e76\u6df1\u523b\u5f71\u54cd\u4e86\u540e\u6765\u7684\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u8bbe\u8ba1\u3002","title":"1.5 ResNet"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/#1","text":"\u5047\u8bbe F(x) \u4ee3\u8868\u67d0\u4e2a\u53ea\u5305\u542b\u6709\u4e24\u5c42\u7684\u6620\u5c04\u51fd\u6570\uff0c x \u662f\u8f93\u5165\uff0c F(x)\u662f\u8f93\u51fa\u3002\u5047\u8bbe\u4ed6\u4eec\u5177\u6709\u76f8\u540c\u7684\u7ef4\u5ea6\u3002\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u4fee\u6539\u7f51\u7edc\u4e2d\u7684 w\u548cb\u53bb\u62df\u5408\u4e00\u4e2a\u7406\u60f3\u7684 H(x)\u3002\u4e5f\u5c31\u662f\u6211\u4eec\u7684\u76ee\u6807\u662f\u4fee\u6539F(x) \u4e2d\u7684 w\u548cb\u903c\u8fd1 H(x) \u3002\u5982\u679c\u6211\u4eec\u6539\u53d8\u601d\u8def\uff0c\u7528F(x) \u6765\u903c\u8fd1 H(x)-x \uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u8f93\u51fa\u5c31\u53d8\u4e3a F(x)+x\uff0c\u8fd9\u91cc\u5c06\u76f4\u63a5\u4ece\u8f93\u5165\u8fde\u63a5\u5230\u8f93\u51fa\u7684\u7ed3\u6784\u4e5f\u79f0\u4e3ashortcut\uff0c\u90a3\u6574\u4e2a\u7ed3\u6784\u5c31\u662f\u6b8b\u5dee\u5757\uff0cResNet\u7684\u57fa\u7840\u6a21\u5757\u3002 ResNet\u6cbf\u7528\u4e86VGG\u5168 3\\times 3 3\\times 3 \u5377\u79ef\u5c42\u7684\u8bbe\u8ba1\u3002\u6b8b\u5dee\u5757\u91cc\u9996\u5148\u67092\u4e2a\u6709\u76f8\u540c\u8f93\u51fa\u901a\u9053\u6570\u7684 3\\times 3 3\\times 3 \u5377\u79ef\u5c42\u3002\u6bcf\u4e2a\u5377\u79ef\u5c42\u540e\u63a5BN\u5c42\u548cReLU\u6fc0\u6d3b\u51fd\u6570\uff0c\u7136\u540e\u5c06\u8f93\u5165\u76f4\u63a5\u52a0\u5728\u6700\u540e\u7684ReLU\u6fc0\u6d3b\u51fd\u6570\u524d\uff0c\u8fd9\u79cd\u7ed3\u6784\u7528\u4e8e\u5c42\u6570\u8f83\u5c11\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u6bd4\u5982resnet18\u548cResNet34\u3002\u8fd8\u6709\u4e00\u79cd\u7ed3\u6784\u5f15\u5165 1\\times 1 1\\times 1 \u5377\u79ef\u5c42\u6765\u8c03\u6574\u8f93\u5165\u7684\u901a\u9053\u6570\uff0c\u8fbe\u5230\u51cf\u5c11\u6a21\u578b\u53c2\u6570\u91cf\u7684\u4f5c\u7528\uff0c\u8fd9\u79cd\u7ed3\u6784\u53eb\u4f5c\u74f6\u9888\u6a21\u5757\uff0c\u901a\u5e38\u7528\u4e8e\u7f51\u7edc\u5c42\u6570\u8f83\u591a\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\u3002\u4f8b\u5982resnet50\uff0cresnet101\u548cresnet152\u3002\u8fd9\u4e24\u79cd\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u968f\u7740\u7f51\u7edc\u6df1\u5ea6\u7684\u589e\u52a0\uff0c\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u548c\u901a\u9053\u6570\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u65f6\u6211\u4eec\u4f7f\u75281*1\u7684\u5377\u79ef\u6765\u6539\u53d8\u77ed\u8fde\u63a5\u90e8\u5206\u7684\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u548c\u901a\u9053\u6570\uff0c\u4ece\u800c\u80fd\u591f\u5b8c\u6210\u7279\u5f81\u56fe\u7684\u878d\u5408\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"1 \u6b8b\u5dee\u5757"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/#2-resnet","text":"ResNet\u6a21\u578b\u7684\u6784\u6210\u5982\u4e0b\u56fe\u6240\u793a\uff1a ResNet\u7f51\u7edc\u4e2d\u6309\u7167\u6b8b\u5dee\u5757\u7684\u901a\u9053\u6570\u5206\u4e3a\u4e0d\u540c\u7684\u6a21\u5757\u3002 \u7b2c\u4e00\u4e2a\u6a21\u5757\u4f7f\u7528\u8f93\u51fa\u901a\u9053\u6570\u4e3a64\u3001\u6b65\u5e45\u4e3a2\u7684 7\\times 7 7\\times 7 \u5377\u79ef\u5c42\uff0c\u540e\u63a5\u6b65\u5e45\u4e3a2\u7684 3\\times 3 3\\times 3 \u7684\u6700\u5927\u6c60\u5316\u5c42\u3002 \u4e4b\u540e\u7684\u6bcf\u4e2a\u6a21\u5757\u5728\u7b2c\u4e00\u4e2a\u6b8b\u5dee\u5757\u91cc\u5c06\u4e0a\u4e00\u4e2a\u6a21\u5757\u7684\u901a\u9053\u6570\u7ffb\u500d\uff0c\u5e76\u5c06\u9ad8\u548c\u5bbd\u51cf\u534a\u3002 \u6700\u540e\uff0c\u4e0eGoogLeNet\u4e00\u6837\uff0c\u52a0\u5165\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff08GAP\uff09\u540e\u63a5\u4e0a\u5168\u8fde\u63a5\u5c42\u8f93\u51fa\u3002 \u5404\u79cdresnet\u7684\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528pytorch\u4e2d\u5c01\u88c5\u597d\u7684API\u6784\u5efaresnet18\u548cresnet50\u7ed3\u6784\u6765\u5206\u6790\u6574\u4e2a\u6b8b\u5dee\u7f51\u7edc\u7684\u6784\u6210\u3002\u7f51\u7edc\u6784\u5efa\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision.models as models # \u6a21\u578b\u5b9e\u4f8b\u5316 model = models . resnet18 () \u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u67e5\u770b\u7f51\u7edc\u7ed3\u6784\uff1a model . parameters \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a < bound method Module . parameters of ResNet ( ( conv1 ): Conv2d ( 3 , 64 , kernel_size = ( 7 , 7 ), stride = ( 2 , 2 ), padding = ( 3 , 3 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( maxpool ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 1 , dilation = 1 , ceil_mode = False ) ( layer1 ): Sequential ( ( 0 ): BasicBlock ( ( conv1 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ( 1 ): BasicBlock ( ( conv1 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( layer2 ): Sequential ( ( 0 ): BasicBlock ( ( conv1 ): Conv2d ( 64 , 128 , kernel_size = ( 3 , 3 ), stride = ( 2 , 2 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 128 , 128 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 64 , 128 , kernel_size = ( 1 , 1 ), stride = ( 2 , 2 ), bias = False ) ( 1 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( 1 ): BasicBlock ( ( conv1 ): Conv2d ( 128 , 128 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 128 , 128 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 128 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( layer3 ): Sequential ( ( 0 ): BasicBlock ( ( conv1 ): Conv2d ( 128 , 256 , kernel_size = ( 3 , 3 ), stride = ( 2 , 2 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 128 , 256 , kernel_size = ( 1 , 1 ), stride = ( 2 , 2 ), bias = False ) ( 1 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( 1 ): BasicBlock ( ( conv1 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( layer4 ): Sequential ( ( 0 ): BasicBlock ( ( conv1 ): Conv2d ( 256 , 512 , kernel_size = ( 3 , 3 ), stride = ( 2 , 2 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 512 , 512 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 256 , 512 , kernel_size = ( 1 , 1 ), stride = ( 2 , 2 ), bias = False ) ( 1 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( 1 ): BasicBlock ( ( conv1 ): Conv2d ( 512 , 512 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( conv2 ): Conv2d ( 512 , 512 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 512 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( avgpool ): AdaptiveAvgPool2d ( output_size = ( 1 , 1 )) ( fc ): Linear ( in_features = 512 , out_features = 1000 , bias = True ) ) > \u5176\u4e2d\u7b2c\u4e00\u90e8\u5206\u5bf9\u5e94\u7740\u7f51\u7edc\u7684\u8f93\u5165\u6a21\u5757\uff0c\u540e\u9762layer1,layer2,layer3\u548clayer4\u8868\u793a\u6b8b\u5dee\u6a21\u5757\uff0c\u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6b8b\u5dee\u6a21\u5757\u662f\u7531\u57fa\u7840\u6b8b\u5dee\u5757\u6784\u6210\u7684\uff0c\u6700\u540e\u7684avgpool\u548cfc\u5bf9\u5e94\u7740\u7f51\u7edc\u7684\u8f93\u51fa\u5c42\u3002Resnet50\u7684\u7ed3\u6784\u4e0eresnet18\u7684\u7ed3\u6784\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u4e2d\u95f4\u7684\u6b8b\u5dee\u6a21\u5757\u662f\u7531\u74f6\u9888\u6a21\u5757\u6784\u6210\u7684\uff0c\u6211\u4eec\u901a\u8fc7model.layer1\u6765\u89c2\u5bdf\u4e0b\uff1a # \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision.models as models # \u6a21\u578b\u5b9e\u4f8b\u5316 model = models . resnet50 () # ResNet50\u7684\u7b2c\u4e00\u4e2a\u6b8b\u5dee\u6a21\u5757 model . layer1 \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a Sequential ( ( 0 ): Bottleneck ( ( conv1 ): Conv2d ( 64 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( 1 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ) ) ( 1 ): Bottleneck ( ( conv1 ): Conv2d ( 256 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ) ( 2 ): Bottleneck ( ( conv1 ): Conv2d ( 256 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): BatchNorm2d ( 64 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): BatchNorm2d ( 256 , eps = 1e-05 , momentum = 0.1 , affine = True , track_running_stats = True ) ( relu ): ReLU ( inplace = True ) ) ) \u4ece\u4e0a\u8ff0\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cresnet50\u4e2d\u7684\u6b8b\u5dee\u6a21\u5757\u7531\u74f6\u9888\u6a21\u5757\u6784\u6210\uff0c\u5728\u7b2c\u4e00\u4e2a\u6b8b\u5dee\u6a21\u5757\u4e2d\u5305\u542b3\u4e2a\u6b8b\u5dee\u5757\uff0c\u540c\u6837\u7684\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\uff0cmodel.layer2,model.layer3\u548cmodel.layer4\u67e5\u770b\u5176\u4ed6\u6a21\u5757\u7684\u7ed3\u6784\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7model.parameters\u67e5\u770b\u6574\u4e2a\u7f51\u7edc\u7684\u6784\u6210\u3002","title":"2 ResNet\u6a21\u578b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/#2","text":"\u56e0\u4e3aImageNet\u6570\u636e\u96c6\u8f83\u5927\u8bad\u7ec3\u65f6\u95f4\u8f83\u957f\uff0c\u6211\u4eec\u4ecd\u7528\u524d\u9762\u7684\u9c9c\u82b1\u79cd\u7c7b\u5b9e\u4f8b\u6765\u7ed9\u5927\u5bb6\u6f14\u793aResNet\u3002ResNet\u6709\u4e0d\u540c\u5c42\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u56e0\u4e3a\u9c9c\u82b1\u6570\u636e\u96c6\u6bd4\u8f83\u5c0f\uff0c\u9009\u62e9\u5c42\u6570\u8f83\u5c11\u7684resnet18\u8fdb\u884c\u5904\u7406\u3002\u8bfb\u53d6\u6570\u636e\u7684\u65f6\u5c06\u56fe\u50cf\u9ad8\u548c\u5bbd\u7f29\u653e\u5230ResNet\u4f7f\u7528\u7684\u56fe\u50cf\u9ad8\u548c\u5bbd224\u3002","title":"2.\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b\u6848\u4f8b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/#21","text":"\u9996\u5148\u83b7\u53d6\u6570\u636e,\u4e3a\u4e86\u9002\u5e94Resnet18\u7f51\u7edc\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5bf8\u7684\u8981\u6c42\uff0c\u5c06\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\u5230224x224\u7684\u5927\u5c0f\uff0c\u5e76\u4f7f\u7528DataLoader\u8fdb\u884c\u6279\u6b21\u6570\u636e\u7684\u8bfb\u53d6\uff1a from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 2 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x224 dataset_transform = transforms . Compose ( [ transforms . ToTensor (), transforms . Resize (( 224 , 224 ))]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_train_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_test , batch_size = batch_size , shuffle = False ) \u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u7406\u89e3\uff0c\u6211\u4eec\u5c06batch\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 0 : break \u7ed3\u679c\u4e3a\uff1a","title":"2.1 \u6570\u636e\u8bfb\u53d6"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/#22","text":"# \u6a21\u578b\u5b9e\u4f8b\u5316:\u8f93\u5165\u6570\u636e3\u901a\u9053\uff0c\u8fdb\u884c5\u7c7b\u7684\u5206\u7c7b\u5904\u7406 model = models . resnet18 ( num_classes = 5 ) # \u6a21\u578b\u8bad\u7ec3\u7684\u53c2\u6570\u8bbe\u7f6e # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( model . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss ()","title":"2.2 \u6a21\u578b\u5b9e\u4f8b\u5316\u548c\u53c2\u6570\u8bbe\u7f6e"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/#23","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u6548\u679c\u8fdb\u884c\u8bc4\u4f30\uff0c\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u5360\u603b\u6837\u672c\u7684\u6bd4\u4f8b\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total","title":"2.3 \u6a21\u578b\u8bc4\u4f30\u65b9\u6cd5"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/05-ResNet/#24","text":"\u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\uff0c\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u5e76\u8bc4\u4f30\u6a21\u578b\u7684\u6548\u679c\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u4fbf\u53ef\u5b8c\u6210\u7f51\u7edc\u7684\u8bad\u7ec3\uff1a train () \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 1.3775 , train accuracy : 0.442 , test accuracy : 0.516 time : 2324.5159425735474 current epoch = 1 epoch : 1 , loss : 1.1998 , train accuracy : 0.528 , test accuracy : 0.552 time : 2162.3196935653687 current epoch = 2 epoch : 2 , loss : 1.0808 , train accuracy : 0.574 , test accuracy : 0.579 time : 1870.7562956809998 current epoch = 3 epoch : 3 , loss : 0.9900 , train accuracy : 0.621 , test accuracy : 0.591 time : 1861.4767940044403 current epoch = 4 epoch : 4 , loss : 0.9692 , train accuracy : 0.635 , test accuracy : 0.516 time : 1867.3297381401062 current epoch = 5 epoch : 5 , loss : 0.8903 , train accuracy : 0.662 , test accuracy : 0.684 time : 1544.7287199497223 current epoch = 6 epoch : 6 , loss : 0.8586 , train accuracy : 0.670 , test accuracy : 0.541 time : 1042.7271778583527 current epoch = 7 epoch : 7 , loss : 0.8296 , train accuracy : 0.701 , test accuracy : 0.712 time : 1023.7487924098969 current epoch = 8 epoch : 8 , loss : 0.7674 , train accuracy : 0.710 , test accuracy : 0.676 time : 1032.3311216831207 current epoch = 9 epoch : 9 , loss : 0.7376 , train accuracy : 0.730 , test accuracy : 0.684 time : 1019.4126000404358 \u6211\u53c8\u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21\u4e3a100\uff0cbatchsize\u8bbe\u7f6e\u4e3a16\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a(\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\uff0c\u53f3\u56fe\u662f\u9a8c\u8bc1\u96c6\u51c6\u786e\u7387\u7684\u53d8\u5316\u66f2\u7ebf): \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u8bad\u7ec3\u523020\u51e0\u4e2a\u8f6e\u6b21\u65f6\uff0c\u6a21\u578b\u5728\u8bad\u7ec3\u96c6\u4e0a\u5c31\u4ee5\u62df\u5408\uff0c\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u8fbe\u52300.75\u4ee5\u4e0a\u3002 \u603b\u7ed3 \u77e5\u9053ResNet\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u6b8b\u5dee\u5757\u7684\u6784\u6210 \u80fd\u591f\u5229\u7528Resnet\u5b8c\u6210\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1","title":"2.4 \u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/06-%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/","text":"1.6 \u56fe\u50cf\u589e\u5f3a \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u56fe\u50cf\u589e\u5f3a\u7684\u5e38\u7528\u65b9\u6cd5 \u80fd\u591f\u5229\u7528torchvision\u6765\u5b8c\u6210\u56fe\u50cf\u589e\u5f3a \u5927\u89c4\u6a21\u6570\u636e\u96c6\u662f\u6210\u529f\u5e94\u7528\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u524d\u63d0\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u4e0d\u540c\u65b9\u5f0f\u7684\u88c1\u526a\uff0c\u4f7f\u611f\u5174\u8da3\u7684\u7269\u4f53\u51fa\u73b0\u5728\u4e0d\u540c\u4f4d\u7f6e\uff0c\u4ece\u800c\u51cf\u8f7b\u6a21\u578b\u5bf9\u7269\u4f53\u51fa\u73b0\u4f4d\u7f6e\u7684\u4f9d\u8d56\u6027\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u8c03\u6574\u4eae\u5ea6\u3001\u8272\u5f69\u7b49\u56e0\u7d20\u6765\u964d\u4f4e\u6a21\u578b\u5bf9\u8272\u5f69\u7684\u654f\u611f\u5ea6\u3002\u53ef\u4ee5\u8bf4\uff0c\u5728\u5f53\u5e74AlexNet\u7684\u6210\u529f\u4e2d\uff0c\u56fe\u50cf\u589e\u5f3a\u6280\u672f\u529f\u4e0d\u53ef\u6ca1 1.\u5e38\u7528\u7684\u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5 \u00b6 \u56fe\u50cf\u589e\u5f3a\uff08image augmentation\uff09\u6307\u901a\u8fc7\u526a\u5207\u3001\u65cb\u8f6c/\u53cd\u5c04/\u7ffb\u8f6c\u53d8\u6362\u3001\u7f29\u653e\u53d8\u6362\u3001\u5e73\u79fb\u53d8\u6362\u3001\u5c3a\u5ea6\u53d8\u6362\u3001\u5bf9\u6bd4\u5ea6\u53d8\u6362\u3001\u566a\u58f0\u6270\u52a8\u3001\u989c\u8272\u53d8\u6362\u7b49\u4e00\u79cd\u6216\u591a\u79cd\u7ec4\u5408\u6570\u636e\u589e\u5f3a\u53d8\u6362\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u6570\u636e\u96c6\u7684\u5927\u5c0f\u3002\u56fe\u50cf\u589e\u5f3a\u7684\u610f\u4e49\u662f\u901a\u8fc7\u5bf9\u8bad\u7ec3\u56fe\u50cf\u505a\u4e00\u7cfb\u5217\u968f\u673a\u6539\u53d8\uff0c\u6765\u4ea7\u751f\u76f8\u4f3c\u4f46\u53c8\u4e0d\u540c\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u4ece\u800c\u6269\u5927\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u89c4\u6a21\uff0c\u800c\u4e14\u968f\u673a\u6539\u53d8\u8bad\u7ec3\u6837\u672c\u53ef\u4ee5\u964d\u4f4e\u6a21\u578b\u5bf9\u67d0\u4e9b\u5c5e\u6027\u7684\u4f9d\u8d56\uff0c\u4ece\u800c\u63d0\u9ad8\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u3002 \u5e38\u89c1\u7684\u56fe\u50cf\u589e\u5f3a\u65b9\u5f0f\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a\u51e0\u4f55\u53d8\u6362\u7c7b\u548c\u989c\u8272\u53d8\u6362\u7c7b \u51e0\u4f55\u53d8\u6362\u7c7b\uff0c\u4e3b\u8981\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u51e0\u4f55\u53d8\u6362\u64cd\u4f5c\uff0c\u5305\u62ec**\u7ffb\u8f6c\uff0c\u65cb\u8f6c\uff0c\u88c1\u526a\uff0c\u53d8\u5f62\uff0c\u7f29\u653e**\u7b49\u3002 \u989c\u8272\u53d8\u6362\u7c7b\uff0c\u6307\u901a\u8fc7\u6a21\u7cca\u3001\u989c\u8272\u53d8\u6362\u3001\u64e6\u9664\u3001\u586b\u5145\u7b49\u65b9\u5f0f\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406 \u5b9e\u73b0\u56fe\u50cf\u589e\u5f3a\u53ef\u4ee5\u901a\u8fc7torchvision.transforms\u6765\u5b8c\u6210\u3002 2.torchvision.transforms\u8fdb\u884c\u56fe\u50cf\u589e\u5f3a \u00b6 torchvision\u4e2d\u7684\u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5\u4e3b\u8981\u662f\u9488\u5bf9 PIL.Image \u5bf9\u8c61\u548c torch.Tensor \u5bf9\u8c61\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528pillow\u8bfb\u53d6\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\uff0cpillow\u8bfb\u53d6\u7684\u56fe\u50cf\u6570\u636e\u662fPIL.Image \u5bf9\u8c61\uff0c\u7ecftransforms\u589e\u5f3a\u540e\u4ecd\u7136\u662f PIL.Image \u5bf9\u8c61\u3002\u9996\u5148\u6211\u4eec\u5bfc\u5165\u6240\u9700\u7684\u5de5\u5177\u5305\u5e76\u8bfb\u53d6\u8981\u5904\u7406\u7684\u56fe\u50cf\uff1a # \u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305\uff1a\u56fe\u50cf\u8bfb\u53d6\uff0c\u56fe\u50cf\u589e\u5f3a\u548c\u7ed8\u5236\u56fe\u50cf\u7684 from PIL import Image from torchvision import transforms import matplotlib.pyplot as plt # \u8bfb\u53d6\u56fe\u50cf\u5e76\u8fdb\u884c\u663e\u793a dog = Image . open ( './dog.jpg' ) plt . imshow ( dog ) \u56fe\u50cf\u7684\u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a 2.1 \u51e0\u4f55\u53d8\u6362 \u00b6 \u5de6\u53f3\u7ffb\u8f6c\u56fe\u50cf\u662f\u6700\u65e9\u4e5f\u662f\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u79cd\u56fe\u50cf\u589e\u5e7f\u65b9\u6cd5\u3002\u53ef\u4ee5\u901a\u8fc7transforms.RandomHorizontalFlip(p=0.5)\u6765\u5b9e\u73b0\u56fe\u50cf\u5de6\u53f3\u7ffb\u8f6c\uff0c\u53c2\u6570P\u8868\u793a\u6c34\u5e73\u7ffb\u8f6c\u7684\u6982\u7387\u3002 # \u6c34\u5e73\u7ffb\u8f6c\uff1a\u4ee50.5\u7684\u6982\u7387\u8fdb\u884c\u6c34\u5e73\u7ffb\u8f6c transforms_HF = transforms . RandomHorizontalFlip ( p = 0.5 ) dog_HF = transforms_HF ( dog ) plt . imshow ( dog_HF ) \u521b\u5efatransforms.RandomVerticalFlip(p=0.5)\u5b9e\u4f8b\u6765\u5b9e\u73b0\u56fe\u50cf\u7684\u4e0a\u4e0b\u7ffb\u8f6c\uff0c\u4e0a\u4e0b\u7ffb\u8f6c\u4f7f\u7528\u7684\u8f83\u5c11\u3002 # \u5782\u76f4\u4e0a\u4e0b\u7ffb\u8f6c\uff1a\u4ee50.5\u7684\u6982\u7387\u8fdb\u884c\u7ffb\u8f6c transforms_VF = transforms . RandomVerticalFlip ( p = 0.5 ) dog_VF = transforms_VF ( dog ) plt . imshow ( dog_VF ) \u968f\u673a\u88c1\u526a\u662f\u4ece\u539f\u59cb\u56fe\u50cf\u4e2d\u88c1\u526a\u51fa\u4e00\u90e8\u5206\u533a\u57df\uff0c\u5e76\u4e14\u8981\u5bf9\u5bbd\u9ad8\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4f7f\u7528\u7684\u65b9\u6cd5\u662ftransforms.RandomCrop(size=(H, W))\uff0cH\u548cW\u8981\u5c0f\u4e8e\u56fe\u50cf\u7684\u9ad8\u548c\u56fe\u50cf\u7684\u5bbd\u3002 # \u968f\u673a\u88c1\u526a\uff1a\u5bbd\u9ad8\u8981\u5c0f\u4e8e\u539f\u59cb\u56fe\u50cf\u7684\u5bbd\u9ad8 transforms_RC = transforms . RandomCrop ( size = ( 600 , 600 )) dog_RC = transforms_RC ( dog ) plt . imshow ( dog_RC ) \u56fe\u50cf\u5c3a\u5bf8\u7684\u8c03\u6574\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6211\u4eec\u5728\u524d\u9762\u5df2\u7ecf\u591a\u6b21\u4f7f\u7528\u8fc7\uff0c\u5373\u5b8c\u6210\u56fe\u50cf\u5c3a\u5bf8\u5927\u5c0f\u7684\u8c03\u6574\u3002 # \u5c3a\u5bf8\u8c03\u6574 transforms_RS = transforms . Resize ( size = ( 224 , 224 )) dog_RS = transforms_RS ( dog ) plt . imshow ( dog_RS ) 2.2 \u989c\u8272\u53d8\u6362 \u00b6 \u53e6\u4e00\u7c7b\u589e\u5f3a\u65b9\u6cd5\u662f\u989c\u8272\u53d8\u6362\u3002\u6211\u4eec\u53ef\u4ee5\u4ece4\u4e2a\u65b9\u9762\u6539\u53d8\u56fe\u50cf\u7684\u989c\u8272\uff1a\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u3001\u9971\u548c\u5ea6\u548c\u8272\u8c03\u3002\u4f7f\u7528\u7684API\u662ftransforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)\uff1a brightness:\u4eae\u5ea6\uff0c\u53d6\u503c\u8303\u56f4\u4e3a [0.0, 1.0], \u5f53\u53d6\u503c\u4e3a0.5\u65f6\uff0c\u8868\u793a\u5c06\u56fe\u50cf\u7684\u4eae\u5ea6\u968f\u673a\u53d8\u5316\u4e3a\u539f\u56fe\u4eae\u5ea6\u7684 50\\% 50\\% \uff08\u5373 1-0.5 1-0.5 \uff09 \\sim 150\\% \\sim 150\\% \uff08\u5373 1+0.5 1+0.5 \uff09\u4e4b\u95f4\u3002 contrast\uff1a\u5bf9\u6bd4\u5ea6,\u53d6\u503c\u8303\u56f4\u4e3a [0.0, 1.0], \u5f53\u53d6\u503c\u4e3a0.5\u65f6\uff0c\u8868\u793a\u5c06\u56fe\u50cf\u7684\u5bf9\u6bd4\u5ea6\u968f\u673a\u53d8\u5316\u4e3a\u539f\u56fe\u5bf9\u6bd4\u5ea6\u7684 50\\% 50\\% \uff08\u5373 1-0.5 1-0.5 \uff09 \\sim 150\\% \\sim 150\\% \uff08\u5373 1+0.5 1+0.5 \uff09\u4e4b\u95f4\u3002 saturation\uff1a\u9971\u548c\u5ea6,\u53d6\u503c\u8303\u56f4\u4e3a [0.0, 1.0], \u5f53\u53d6\u503c\u4e3a0.5\u65f6\uff0c\u8868\u793a\u5c06\u56fe\u50cf\u7684\u9971\u548c\u5ea6\u968f\u673a\u53d8\u5316\u4e3a\u539f\u56fe\u9971\u548c\u5ea6\u7684 50\\% 50\\% \uff08\u5373 1-0.5 1-0.5 \uff09 \\sim 150\\% \\sim 150\\% \uff08\u5373 1+0.5 1+0.5 \uff09\u4e4b\u95f4\u3002 hue\uff1a\u8272\u8c03\uff0c\u53d6\u503c\u8303\u56f4\u4e3a [-0.5, 0.5]\uff0c\u5f53\u53d6\u503c\u4e3a0.2\u65f6\uff0c\u8868\u793a\u5c06\u56fe\u50cf\u7684\u8272\u8c03\u5c31\u5728[-0.2,0.2]\u4e4b\u95f4\u53d6\u503c\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4eae\u5ea6\uff0c\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6\u8bbe\u7f6e\u4e3a0.5\uff0c\u8272\u8c03\u8bbe\u7f6e\u4e3a0.2\uff0c\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u989c\u8272\u8c03\u6574 transforms_color = transforms . ColorJitter ( brightness = 0.5 , contrast = 0.5 , saturation = 0.5 , hue = 0.2 ) dog_color = transforms_color ( dog ) plt . imshow ( dog_color ) 2.3 \u589e\u5f3a\u65b9\u6cd5\u7684\u7ec4\u5408 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5c06\u51e0\u4f55\u589e\u5f3a\u548c\u989c\u8272\u589e\u5f3a\u7ec4\u5408\u5728\u4e00\u8d77\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\uff0c\u4f7f\u7528\u7684\u65b9\u6cd5\u662ftransforms.Compose(transforms) \u3002\u6211\u4eec\u5c06\u989c\u8272\u589e\u5f3a\u548c\u5c3a\u5bf8\u53d8\u6362\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5177\u4f53\u4f7f\u7528\u5982\u4e0b\u6240\u793a\uff1a # \u5c06\u51e0\u4f55\u53d8\u6362\u548c\u989c\u8272\u53d8\u6362\u7ec4\u5408\u5728\u4e00\u8d77 transform = transforms . Compose ([ transforms_RS , transforms_color ]) dog_ = transform ( dog ) plt . imshow ( dog_ ) \u589e\u5f3a\u540e\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\uff08\u56fe\u50cf\u7684\u5c3a\u5bf8\u8fdb\u884c\u4e86\u589e\u5f3a+\u989c\u8272\u4e5f\u8fdb\u884c\u4e86\u589e\u5f3a\uff09 \u603b\u7ed3 \u5e38\u7528\u7684\u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5\uff1a\u51e0\u4f55\u548c\u989c\u8272 \u4f7f\u7528torchvision.transforms\u5b8c\u6210\u56fe\u50cf\u589e\u5f3a","title":"1.6 \u56fe\u50cf\u589e\u5f3a"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/06-%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/#16","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u56fe\u50cf\u589e\u5f3a\u7684\u5e38\u7528\u65b9\u6cd5 \u80fd\u591f\u5229\u7528torchvision\u6765\u5b8c\u6210\u56fe\u50cf\u589e\u5f3a \u5927\u89c4\u6a21\u6570\u636e\u96c6\u662f\u6210\u529f\u5e94\u7528\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u7684\u524d\u63d0\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u4e0d\u540c\u65b9\u5f0f\u7684\u88c1\u526a\uff0c\u4f7f\u611f\u5174\u8da3\u7684\u7269\u4f53\u51fa\u73b0\u5728\u4e0d\u540c\u4f4d\u7f6e\uff0c\u4ece\u800c\u51cf\u8f7b\u6a21\u578b\u5bf9\u7269\u4f53\u51fa\u73b0\u4f4d\u7f6e\u7684\u4f9d\u8d56\u6027\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u8c03\u6574\u4eae\u5ea6\u3001\u8272\u5f69\u7b49\u56e0\u7d20\u6765\u964d\u4f4e\u6a21\u578b\u5bf9\u8272\u5f69\u7684\u654f\u611f\u5ea6\u3002\u53ef\u4ee5\u8bf4\uff0c\u5728\u5f53\u5e74AlexNet\u7684\u6210\u529f\u4e2d\uff0c\u56fe\u50cf\u589e\u5f3a\u6280\u672f\u529f\u4e0d\u53ef\u6ca1","title":"1.6 \u56fe\u50cf\u589e\u5f3a"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/06-%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/#1","text":"\u56fe\u50cf\u589e\u5f3a\uff08image augmentation\uff09\u6307\u901a\u8fc7\u526a\u5207\u3001\u65cb\u8f6c/\u53cd\u5c04/\u7ffb\u8f6c\u53d8\u6362\u3001\u7f29\u653e\u53d8\u6362\u3001\u5e73\u79fb\u53d8\u6362\u3001\u5c3a\u5ea6\u53d8\u6362\u3001\u5bf9\u6bd4\u5ea6\u53d8\u6362\u3001\u566a\u58f0\u6270\u52a8\u3001\u989c\u8272\u53d8\u6362\u7b49\u4e00\u79cd\u6216\u591a\u79cd\u7ec4\u5408\u6570\u636e\u589e\u5f3a\u53d8\u6362\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u6570\u636e\u96c6\u7684\u5927\u5c0f\u3002\u56fe\u50cf\u589e\u5f3a\u7684\u610f\u4e49\u662f\u901a\u8fc7\u5bf9\u8bad\u7ec3\u56fe\u50cf\u505a\u4e00\u7cfb\u5217\u968f\u673a\u6539\u53d8\uff0c\u6765\u4ea7\u751f\u76f8\u4f3c\u4f46\u53c8\u4e0d\u540c\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u4ece\u800c\u6269\u5927\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u89c4\u6a21\uff0c\u800c\u4e14\u968f\u673a\u6539\u53d8\u8bad\u7ec3\u6837\u672c\u53ef\u4ee5\u964d\u4f4e\u6a21\u578b\u5bf9\u67d0\u4e9b\u5c5e\u6027\u7684\u4f9d\u8d56\uff0c\u4ece\u800c\u63d0\u9ad8\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u3002 \u5e38\u89c1\u7684\u56fe\u50cf\u589e\u5f3a\u65b9\u5f0f\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a\u51e0\u4f55\u53d8\u6362\u7c7b\u548c\u989c\u8272\u53d8\u6362\u7c7b \u51e0\u4f55\u53d8\u6362\u7c7b\uff0c\u4e3b\u8981\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u51e0\u4f55\u53d8\u6362\u64cd\u4f5c\uff0c\u5305\u62ec**\u7ffb\u8f6c\uff0c\u65cb\u8f6c\uff0c\u88c1\u526a\uff0c\u53d8\u5f62\uff0c\u7f29\u653e**\u7b49\u3002 \u989c\u8272\u53d8\u6362\u7c7b\uff0c\u6307\u901a\u8fc7\u6a21\u7cca\u3001\u989c\u8272\u53d8\u6362\u3001\u64e6\u9664\u3001\u586b\u5145\u7b49\u65b9\u5f0f\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406 \u5b9e\u73b0\u56fe\u50cf\u589e\u5f3a\u53ef\u4ee5\u901a\u8fc7torchvision.transforms\u6765\u5b8c\u6210\u3002","title":"1.\u5e38\u7528\u7684\u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/06-%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/#2torchvisiontransforms","text":"torchvision\u4e2d\u7684\u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5\u4e3b\u8981\u662f\u9488\u5bf9 PIL.Image \u5bf9\u8c61\u548c torch.Tensor \u5bf9\u8c61\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528pillow\u8bfb\u53d6\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\uff0cpillow\u8bfb\u53d6\u7684\u56fe\u50cf\u6570\u636e\u662fPIL.Image \u5bf9\u8c61\uff0c\u7ecftransforms\u589e\u5f3a\u540e\u4ecd\u7136\u662f PIL.Image \u5bf9\u8c61\u3002\u9996\u5148\u6211\u4eec\u5bfc\u5165\u6240\u9700\u7684\u5de5\u5177\u5305\u5e76\u8bfb\u53d6\u8981\u5904\u7406\u7684\u56fe\u50cf\uff1a # \u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305\uff1a\u56fe\u50cf\u8bfb\u53d6\uff0c\u56fe\u50cf\u589e\u5f3a\u548c\u7ed8\u5236\u56fe\u50cf\u7684 from PIL import Image from torchvision import transforms import matplotlib.pyplot as plt # \u8bfb\u53d6\u56fe\u50cf\u5e76\u8fdb\u884c\u663e\u793a dog = Image . open ( './dog.jpg' ) plt . imshow ( dog ) \u56fe\u50cf\u7684\u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a","title":"2.torchvision.transforms\u8fdb\u884c\u56fe\u50cf\u589e\u5f3a"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/06-%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/#21","text":"\u5de6\u53f3\u7ffb\u8f6c\u56fe\u50cf\u662f\u6700\u65e9\u4e5f\u662f\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u79cd\u56fe\u50cf\u589e\u5e7f\u65b9\u6cd5\u3002\u53ef\u4ee5\u901a\u8fc7transforms.RandomHorizontalFlip(p=0.5)\u6765\u5b9e\u73b0\u56fe\u50cf\u5de6\u53f3\u7ffb\u8f6c\uff0c\u53c2\u6570P\u8868\u793a\u6c34\u5e73\u7ffb\u8f6c\u7684\u6982\u7387\u3002 # \u6c34\u5e73\u7ffb\u8f6c\uff1a\u4ee50.5\u7684\u6982\u7387\u8fdb\u884c\u6c34\u5e73\u7ffb\u8f6c transforms_HF = transforms . RandomHorizontalFlip ( p = 0.5 ) dog_HF = transforms_HF ( dog ) plt . imshow ( dog_HF ) \u521b\u5efatransforms.RandomVerticalFlip(p=0.5)\u5b9e\u4f8b\u6765\u5b9e\u73b0\u56fe\u50cf\u7684\u4e0a\u4e0b\u7ffb\u8f6c\uff0c\u4e0a\u4e0b\u7ffb\u8f6c\u4f7f\u7528\u7684\u8f83\u5c11\u3002 # \u5782\u76f4\u4e0a\u4e0b\u7ffb\u8f6c\uff1a\u4ee50.5\u7684\u6982\u7387\u8fdb\u884c\u7ffb\u8f6c transforms_VF = transforms . RandomVerticalFlip ( p = 0.5 ) dog_VF = transforms_VF ( dog ) plt . imshow ( dog_VF ) \u968f\u673a\u88c1\u526a\u662f\u4ece\u539f\u59cb\u56fe\u50cf\u4e2d\u88c1\u526a\u51fa\u4e00\u90e8\u5206\u533a\u57df\uff0c\u5e76\u4e14\u8981\u5bf9\u5bbd\u9ad8\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4f7f\u7528\u7684\u65b9\u6cd5\u662ftransforms.RandomCrop(size=(H, W))\uff0cH\u548cW\u8981\u5c0f\u4e8e\u56fe\u50cf\u7684\u9ad8\u548c\u56fe\u50cf\u7684\u5bbd\u3002 # \u968f\u673a\u88c1\u526a\uff1a\u5bbd\u9ad8\u8981\u5c0f\u4e8e\u539f\u59cb\u56fe\u50cf\u7684\u5bbd\u9ad8 transforms_RC = transforms . RandomCrop ( size = ( 600 , 600 )) dog_RC = transforms_RC ( dog ) plt . imshow ( dog_RC ) \u56fe\u50cf\u5c3a\u5bf8\u7684\u8c03\u6574\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u6211\u4eec\u5728\u524d\u9762\u5df2\u7ecf\u591a\u6b21\u4f7f\u7528\u8fc7\uff0c\u5373\u5b8c\u6210\u56fe\u50cf\u5c3a\u5bf8\u5927\u5c0f\u7684\u8c03\u6574\u3002 # \u5c3a\u5bf8\u8c03\u6574 transforms_RS = transforms . Resize ( size = ( 224 , 224 )) dog_RS = transforms_RS ( dog ) plt . imshow ( dog_RS )","title":"2.1 \u51e0\u4f55\u53d8\u6362"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/06-%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/#22","text":"\u53e6\u4e00\u7c7b\u589e\u5f3a\u65b9\u6cd5\u662f\u989c\u8272\u53d8\u6362\u3002\u6211\u4eec\u53ef\u4ee5\u4ece4\u4e2a\u65b9\u9762\u6539\u53d8\u56fe\u50cf\u7684\u989c\u8272\uff1a\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u3001\u9971\u548c\u5ea6\u548c\u8272\u8c03\u3002\u4f7f\u7528\u7684API\u662ftransforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)\uff1a brightness:\u4eae\u5ea6\uff0c\u53d6\u503c\u8303\u56f4\u4e3a [0.0, 1.0], \u5f53\u53d6\u503c\u4e3a0.5\u65f6\uff0c\u8868\u793a\u5c06\u56fe\u50cf\u7684\u4eae\u5ea6\u968f\u673a\u53d8\u5316\u4e3a\u539f\u56fe\u4eae\u5ea6\u7684 50\\% 50\\% \uff08\u5373 1-0.5 1-0.5 \uff09 \\sim 150\\% \\sim 150\\% \uff08\u5373 1+0.5 1+0.5 \uff09\u4e4b\u95f4\u3002 contrast\uff1a\u5bf9\u6bd4\u5ea6,\u53d6\u503c\u8303\u56f4\u4e3a [0.0, 1.0], \u5f53\u53d6\u503c\u4e3a0.5\u65f6\uff0c\u8868\u793a\u5c06\u56fe\u50cf\u7684\u5bf9\u6bd4\u5ea6\u968f\u673a\u53d8\u5316\u4e3a\u539f\u56fe\u5bf9\u6bd4\u5ea6\u7684 50\\% 50\\% \uff08\u5373 1-0.5 1-0.5 \uff09 \\sim 150\\% \\sim 150\\% \uff08\u5373 1+0.5 1+0.5 \uff09\u4e4b\u95f4\u3002 saturation\uff1a\u9971\u548c\u5ea6,\u53d6\u503c\u8303\u56f4\u4e3a [0.0, 1.0], \u5f53\u53d6\u503c\u4e3a0.5\u65f6\uff0c\u8868\u793a\u5c06\u56fe\u50cf\u7684\u9971\u548c\u5ea6\u968f\u673a\u53d8\u5316\u4e3a\u539f\u56fe\u9971\u548c\u5ea6\u7684 50\\% 50\\% \uff08\u5373 1-0.5 1-0.5 \uff09 \\sim 150\\% \\sim 150\\% \uff08\u5373 1+0.5 1+0.5 \uff09\u4e4b\u95f4\u3002 hue\uff1a\u8272\u8c03\uff0c\u53d6\u503c\u8303\u56f4\u4e3a [-0.5, 0.5]\uff0c\u5f53\u53d6\u503c\u4e3a0.2\u65f6\uff0c\u8868\u793a\u5c06\u56fe\u50cf\u7684\u8272\u8c03\u5c31\u5728[-0.2,0.2]\u4e4b\u95f4\u53d6\u503c\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4eae\u5ea6\uff0c\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6\u8bbe\u7f6e\u4e3a0.5\uff0c\u8272\u8c03\u8bbe\u7f6e\u4e3a0.2\uff0c\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u989c\u8272\u8c03\u6574 transforms_color = transforms . ColorJitter ( brightness = 0.5 , contrast = 0.5 , saturation = 0.5 , hue = 0.2 ) dog_color = transforms_color ( dog ) plt . imshow ( dog_color )","title":"2.2 \u989c\u8272\u53d8\u6362"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/06-%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA/#23","text":"\u6211\u4eec\u53ef\u4ee5\u5c06\u51e0\u4f55\u589e\u5f3a\u548c\u989c\u8272\u589e\u5f3a\u7ec4\u5408\u5728\u4e00\u8d77\u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\uff0c\u4f7f\u7528\u7684\u65b9\u6cd5\u662ftransforms.Compose(transforms) \u3002\u6211\u4eec\u5c06\u989c\u8272\u589e\u5f3a\u548c\u5c3a\u5bf8\u53d8\u6362\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5177\u4f53\u4f7f\u7528\u5982\u4e0b\u6240\u793a\uff1a # \u5c06\u51e0\u4f55\u53d8\u6362\u548c\u989c\u8272\u53d8\u6362\u7ec4\u5408\u5728\u4e00\u8d77 transform = transforms . Compose ([ transforms_RS , transforms_color ]) dog_ = transform ( dog ) plt . imshow ( dog_ ) \u589e\u5f3a\u540e\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\uff08\u56fe\u50cf\u7684\u5c3a\u5bf8\u8fdb\u884c\u4e86\u589e\u5f3a+\u989c\u8272\u4e5f\u8fdb\u884c\u4e86\u589e\u5f3a\uff09 \u603b\u7ed3 \u5e38\u7528\u7684\u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5\uff1a\u51e0\u4f55\u548c\u989c\u8272 \u4f7f\u7528torchvision.transforms\u5b8c\u6210\u56fe\u50cf\u589e\u5f3a","title":"2.3 \u589e\u5f3a\u65b9\u6cd5\u7684\u7ec4\u5408"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/07-%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/","text":"1.7 \u6a21\u578b\u5fae\u8c03 \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u5fae\u8c03\u7684\u539f\u7406 \u80fd\u591f\u5229\u7528\u5fae\u8c03\u6a21\u578b\u6765\u5b8c\u6210\u56fe\u50cf\u7684\u5206\u7c7b\u4efb\u52a1 1.\u5fae\u8c03 \u00b6 \u7ed9\u5b9a\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8bad\u7ec3\u597d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u57fa\u4e8e\u8be5\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\u3002\u76f8\u5bf9\u4e8e\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\uff0c\u5fae\u8c03\u4f1a\u7701\u53bb\u5927\u91cf\u8ba1\u7b97\u8d44\u6e90\u548c\u8ba1\u7b97\u65f6\u95f4\uff0c\u63d0\u9ad8\u4e86\u8ba1\u7b97\u6548\u7387,\u751a\u81f3\u63d0\u9ad8\u51c6\u786e\u7387\u3002 \u5fae\u8c03\u7531\u4ee5\u4e0b4\u6b65\u6784\u6210\u3002 \u5728\u6e90\u6570\u636e\u96c6\uff08\u5982ImageNet\u6570\u636e\u96c6\uff09\u4e0a\u9884\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5373\u6e90\u6a21\u578b\u3002 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5373\u76ee\u6807\u6a21\u578b\u3002\u5b83\u590d\u5236\u4e86\u6e90\u6a21\u578b\u4e0a\u9664\u4e86\u8f93\u51fa\u5c42\u5916\u7684\u6240\u6709\u6a21\u578b\u8bbe\u8ba1\u53ca\u5176\u53c2\u6570\u3002\u6211\u4eec\u5047\u8bbe\u8fd9\u4e9b\u6a21\u578b\u53c2\u6570\u5305\u542b\u4e86\u6e90\u6570\u636e\u96c6\u4e0a\u5b66\u4e60\u5230\u7684\u77e5\u8bc6\uff0c\u4e14\u8fd9\u4e9b\u77e5\u8bc6\u540c\u6837\u9002\u7528\u4e8e\u76ee\u6807\u6570\u636e\u96c6\u3002\u6211\u4eec\u8fd8\u5047\u8bbe\u6e90\u6a21\u578b\u7684\u8f93\u51fa\u5c42\u8ddf\u6e90\u6570\u636e\u96c6\u7684\u6807\u7b7e\u7d27\u5bc6\u76f8\u5173\uff0c\u56e0\u6b64\u5728\u76ee\u6807\u6a21\u578b\u4e2d\u4e0d\u4e88\u91c7\u7528\u3002 \u4e3a\u76ee\u6807\u6a21\u578b\u6dfb\u52a0\u4e00\u4e2a\u8f93\u51fa\u5927\u5c0f\u4e3a\u76ee\u6807\u6570\u636e\u96c6\u7c7b\u522b\u4e2a\u6570\u7684\u8f93\u51fa\u5c42\uff0c\u5e76\u968f\u673a\u521d\u59cb\u5316\u8be5\u5c42\u7684\u6a21\u578b\u53c2\u6570\u3002 \u5728\u76ee\u6807\u6570\u636e\u96c6\uff08\u5982\u9c9c\u82b1\u6570\u636e\u96c6\uff09\u4e0a\u8bad\u7ec3\u76ee\u6807\u6a21\u578b\u3002\u6211\u4eec\u5c06\u4ece\u5934\u8bad\u7ec3\u8f93\u51fa\u5c42\uff0c\u800c\u5176\u4f59\u5c42\u7684\u53c2\u6570\u90fd\u662f\u57fa\u4e8e\u6e90\u6a21\u578b\u7684\u53c2\u6570\u5fae\u8c03\u5f97\u5230\u7684\u3002 \u5f53\u76ee\u6807\u6570\u636e\u96c6\u8fdc\u5c0f\u4e8e\u6e90\u6570\u636e\u96c6\u65f6\uff0c\u5fae\u8c03\u6709\u52a9\u4e8e\u63d0\u5347\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u3002 2.\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b \u00b6 \u6211\u4eec\u8fd8\u662f\u4ee5\u524d\u9762\u4f7f\u7528\u7684\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b\u7684\u6848\u4f8b\u3002\u5c06\u57fa\u4e8e\u8fd9\u4e2a\u6848\u4f8b\u5bf9\u5728ImageNet\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u597d\u7684VGG\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\u3002\u83b7\u53d6\u9c9c\u82b1\u8bc6\u522b\u7684\u6a21\u578b\u3002 \u9996\u5148\uff0c\u8ddf\u524d\u9762\u7684\u8bfe\u7a0b\u4e00\u6837\u9996\u5148\u5bfc\u5165\u6240\u9700\u7684\u5de5\u5177\u5305\u3002 import torch import torch.nn as nn from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder import torchvision.models as models 2.1 \u83b7\u53d6\u6570\u636e\u96c6 \u00b6 \u6570\u636e\u96c6\u7684\u83b7\u53d6\u65b9\u5f0f\u4e0e\u524d\u9762\u8bfe\u7a0b\u4e2d\u662f\u4e00\u6837\u7684\uff0c\u4e5f\u9700\u8981\u5c06\u56fe\u50cf\u7684\u5c3a\u5bf8\u8c03\u6574\u4e3a224x224\u7684\u5927\u5c0f # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 8 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x224 dataset_transform = transforms . Compose ([ transforms . ToTensor (), transforms . Resize (( 224 , 224 )) ]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_test_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_test , batch_size = batch_size , shuffle = False ) 2.2 \u5fae\u8c03\u6a21\u578b\u7684\u6784\u5efa \u00b6 \u6211\u4eec\u4f7f\u7528\u5728ImageNet\u6570\u636e\u96c6\u4e0a\u9884\u8bad\u7ec3\u7684Vgg-16\u4f5c\u4e3a\u6e90\u6a21\u578b\u3002torchvision\u5c0f\u4e8e\u7b49\u4e8e0.12\u7248\u672c\u6211\u4eec\u6307\u5b9apretrain=True\u5373\u53ef\uff0c\u5927\u4e8e0.12\u7684\u6307\u5b9a weights \u6765\u81ea\u52a8\u4e0b\u8f7d\u5e76\u52a0\u8f7d\u9884\u8bad\u7ec3\u7684\u6a21\u578b\u53c2\u6570\uff0c\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u65f6\u9700\u8981\u8054\u7f51\u4e0b\u8f7d\u6a21\u578b\u53c2\u6570\u3002 torchvision\u4e2d\u5c01\u88c5\u4e86\u5f88\u591a\u91cd\u91cf\u7ea7\u7684\u7f51\u7edc\u67b6\u6784\uff0c\u90fd\u6709\u5176\u5bf9\u5e94\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5229\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u6784\u67b6\u5f53\u524d\u4efb\u52a1\u7684\u7f51\u7edc\u67b6\u6784\uff0c\u7279\u5f81\u63d0\u53d6\u90e8\u5206\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7ed3\u6784\uff0c\u8f93\u51fa\u7aef\u6211\u4eec\u6839\u636e\u5f53\u524d\u4efb\u52a1\u8fdb\u884c\u6784\u5efa\uff1a class VGG16_finetune ( nn . Module ): def __init__ ( self , num_class = 5 ): super ( VGG16_finetune , self ) . __init__ () # \u83b7\u53d6\u9884\u8bad\u7ec3\u6a21\u578b # 0.12 vgg16_net = models . vgg16 ( pretrained = True ) # >0.12 # weights= models.VGG16_Weights.DEFAULT # vgg16_net = model.vgg16(weights = weights) self . num_class = num_class # \u83b7\u53d6\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7279\u5f81\u548cGAP\u7684\u7ed3\u679c self . features = vgg16_net . features self . avgpool = vgg16_net . avgpool # \u6784\u5efa\u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aef\uff1aFC self . classifier = nn . Sequential ( nn . Linear ( 25088 , 512 ), nn . ReLU ( True ), nn . Dropout (), nn . Linear ( 512 , 128 ), nn . ReLU ( True ), nn . Dropout (), nn . Linear ( 128 , self . num_class ), ) # \u524d\u5411\u4f20\u64ad\u8fc7\u7a0b def forward ( self , x ): x = self . features ( x ) x = self . avgpool ( x ) x = torch . flatten ( x , 1 ) x = self . classifier ( x ) return x \u8fdb\u884c\u6a21\u578b\u5b9e\u4f8b\u5316,\u5e76\u51bb\u7ed3\u5377\u79ef\u5c42\u90e8\u5206\u7684\u53c2\u6570\uff0c\u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 # \u6a21\u578b\u5b9e\u4f8b\u5316 model = VGG16_finetune ( num_class = 5 ) # \u51bb\u7ed3\u7279\u5f81\u63d0\u53d6\u90e8\u5206\u7684\u53c2\u6570\uff0c\u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 for param in model . features . parameters (): param . requires_grad = False # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum,\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u66f4\u65b0\u540e\u9762\u7684\u5206\u7c7b\u8f93\u51fa\u5c42\u7684\u53c2\u6570\u3002\u5377\u79ef\u5c42\u7684\u53c2\u6570\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7ed3\u679c optimizer = torch . optim . Adam ( model . classifier . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss () 2.3 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u6211\u4eec\u8bbe\u7f6e\u597d\u7f51\u7edc\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u50cf\u524d\u9762\u8bfe\u7a0b\u4e2d\u4e00\u6837\u8fdb\u884c\u6a21\u578b\u7684\u8bc4\u4f30\u4e0e\u8bad\u7ec3\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u5c31\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u7684\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 0.8777 , train accuracy : 0.670 , test accuracy : 0.799 time : 1880.13265228271484 current epoch = 1 epoch : 1 , loss : 0.4829 , train accuracy : 0.833 , test accuracy : 0.838 time : 1647.77058219909668 current epoch = 2 epoch : 2 , loss : 0.3613 , train accuracy : 0.881 , test accuracy : 0.843 time : 1564.02652955055237 current epoch = 3 epoch : 3 , loss : 0.2668 , train accuracy : 0.920 , test accuracy : 0.854 time : 1372.08724927902222 current epoch = 4 epoch : 4 , loss : 0.2407 , train accuracy : 0.923 , test accuracy : 0.832 time : 1572.96699476242065 current epoch = 5 epoch : 5 , loss : 0.1745 , train accuracy : 0.953 , test accuracy : 0.854 time : 1553.9370255470276 current epoch = 6 epoch : 6 , loss : 0.1862 , train accuracy : 0.947 , test accuracy : 0.849 time : 1622.81787252426147 current epoch = 7 epoch : 7 , loss : 0.1813 , train accuracy : 0.945 , test accuracy : 0.874 time : 1795.26246666908264 current epoch = 8 epoch : 8 , loss : 0.1563 , train accuracy : 0.957 , test accuracy : 0.857 time : 1514.09582495689392 current epoch = 9 epoch : 9 , loss : 0.1990 , train accuracy : 0.952 , test accuracy : 0.846 time : 1587.1035635471344 ------------ finish training ------------- \u4e0e\u672a\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u76f8\u6bd4\uff0c\u8bad\u7ec3\u901f\u5ea6\u6709\u6240\u63d0\u5347\uff0c\u5728\u5f00\u59cb\u65f6\u7684\u51c6\u786e\u7387\u4e5f\u6bd4\u8f83\u9ad8\u4e00\u4e9b\u3002 \u603b\u7ed3 \u5fae\u8c03\u662f\u76ee\u6807\u6a21\u578b\u590d\u5236\u4e86\u6e90\u6a21\u578b\u4e0a\u9664\u4e86\u8f93\u51fa\u5c42\u5916\u7684\u6240\u6709\u6a21\u578b\u8bbe\u8ba1\u53ca\u5176\u53c2\u6570\uff0c\u5e76\u57fa\u4e8e\u76ee\u6807\u6570\u636e\u96c6\u5fae\u8c03\u8fd9\u4e9b\u53c2\u6570\u3002\u800c\u76ee\u6807\u6a21\u578b\u7684\u8f93\u51fa\u5c42\u9700\u8981\u4ece\u5934\u8bad\u7ec3\u3002 \u80fd\u591f\u5229\u7528torch\u5b9e\u73b0\u6a21\u578b\u5fae\u8c03","title":"1.7 \u6a21\u578b\u5fae\u8c03"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/07-%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/#17","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u5fae\u8c03\u7684\u539f\u7406 \u80fd\u591f\u5229\u7528\u5fae\u8c03\u6a21\u578b\u6765\u5b8c\u6210\u56fe\u50cf\u7684\u5206\u7c7b\u4efb\u52a1","title":"1.7 \u6a21\u578b\u5fae\u8c03"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/07-%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/#1","text":"\u7ed9\u5b9a\u5927\u89c4\u6a21\u6570\u636e\u96c6\u8bad\u7ec3\u597d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u57fa\u4e8e\u8be5\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\u3002\u76f8\u5bf9\u4e8e\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\uff0c\u5fae\u8c03\u4f1a\u7701\u53bb\u5927\u91cf\u8ba1\u7b97\u8d44\u6e90\u548c\u8ba1\u7b97\u65f6\u95f4\uff0c\u63d0\u9ad8\u4e86\u8ba1\u7b97\u6548\u7387,\u751a\u81f3\u63d0\u9ad8\u51c6\u786e\u7387\u3002 \u5fae\u8c03\u7531\u4ee5\u4e0b4\u6b65\u6784\u6210\u3002 \u5728\u6e90\u6570\u636e\u96c6\uff08\u5982ImageNet\u6570\u636e\u96c6\uff09\u4e0a\u9884\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5373\u6e90\u6a21\u578b\u3002 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\uff0c\u5373\u76ee\u6807\u6a21\u578b\u3002\u5b83\u590d\u5236\u4e86\u6e90\u6a21\u578b\u4e0a\u9664\u4e86\u8f93\u51fa\u5c42\u5916\u7684\u6240\u6709\u6a21\u578b\u8bbe\u8ba1\u53ca\u5176\u53c2\u6570\u3002\u6211\u4eec\u5047\u8bbe\u8fd9\u4e9b\u6a21\u578b\u53c2\u6570\u5305\u542b\u4e86\u6e90\u6570\u636e\u96c6\u4e0a\u5b66\u4e60\u5230\u7684\u77e5\u8bc6\uff0c\u4e14\u8fd9\u4e9b\u77e5\u8bc6\u540c\u6837\u9002\u7528\u4e8e\u76ee\u6807\u6570\u636e\u96c6\u3002\u6211\u4eec\u8fd8\u5047\u8bbe\u6e90\u6a21\u578b\u7684\u8f93\u51fa\u5c42\u8ddf\u6e90\u6570\u636e\u96c6\u7684\u6807\u7b7e\u7d27\u5bc6\u76f8\u5173\uff0c\u56e0\u6b64\u5728\u76ee\u6807\u6a21\u578b\u4e2d\u4e0d\u4e88\u91c7\u7528\u3002 \u4e3a\u76ee\u6807\u6a21\u578b\u6dfb\u52a0\u4e00\u4e2a\u8f93\u51fa\u5927\u5c0f\u4e3a\u76ee\u6807\u6570\u636e\u96c6\u7c7b\u522b\u4e2a\u6570\u7684\u8f93\u51fa\u5c42\uff0c\u5e76\u968f\u673a\u521d\u59cb\u5316\u8be5\u5c42\u7684\u6a21\u578b\u53c2\u6570\u3002 \u5728\u76ee\u6807\u6570\u636e\u96c6\uff08\u5982\u9c9c\u82b1\u6570\u636e\u96c6\uff09\u4e0a\u8bad\u7ec3\u76ee\u6807\u6a21\u578b\u3002\u6211\u4eec\u5c06\u4ece\u5934\u8bad\u7ec3\u8f93\u51fa\u5c42\uff0c\u800c\u5176\u4f59\u5c42\u7684\u53c2\u6570\u90fd\u662f\u57fa\u4e8e\u6e90\u6a21\u578b\u7684\u53c2\u6570\u5fae\u8c03\u5f97\u5230\u7684\u3002 \u5f53\u76ee\u6807\u6570\u636e\u96c6\u8fdc\u5c0f\u4e8e\u6e90\u6570\u636e\u96c6\u65f6\uff0c\u5fae\u8c03\u6709\u52a9\u4e8e\u63d0\u5347\u6a21\u578b\u7684\u6cdb\u5316\u80fd\u529b\u3002","title":"1.\u5fae\u8c03"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/07-%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/#2","text":"\u6211\u4eec\u8fd8\u662f\u4ee5\u524d\u9762\u4f7f\u7528\u7684\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b\u7684\u6848\u4f8b\u3002\u5c06\u57fa\u4e8e\u8fd9\u4e2a\u6848\u4f8b\u5bf9\u5728ImageNet\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u597d\u7684VGG\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\u3002\u83b7\u53d6\u9c9c\u82b1\u8bc6\u522b\u7684\u6a21\u578b\u3002 \u9996\u5148\uff0c\u8ddf\u524d\u9762\u7684\u8bfe\u7a0b\u4e00\u6837\u9996\u5148\u5bfc\u5165\u6240\u9700\u7684\u5de5\u5177\u5305\u3002 import torch import torch.nn as nn from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder import torchvision.models as models","title":"2.\u9c9c\u82b1\u79cd\u7c7b\u8bc6\u522b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/07-%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/#21","text":"\u6570\u636e\u96c6\u7684\u83b7\u53d6\u65b9\u5f0f\u4e0e\u524d\u9762\u8bfe\u7a0b\u4e2d\u662f\u4e00\u6837\u7684\uff0c\u4e5f\u9700\u8981\u5c06\u56fe\u50cf\u7684\u5c3a\u5bf8\u8c03\u6574\u4e3a224x224\u7684\u5927\u5c0f # \u6307\u5b9a\u6279\u6b21\u5927\u5c0f batch_size = 8 # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 flower_train_path = './dataset/flower_datas/train/' flower_test_path = './dataset/flower_datas/val/' # \u5148\u5c06\u6570\u636e\u8f6c\u6362\u4e3atensor\u7c7b\u578b\uff0c\u5e76\u8c03\u6574\u6570\u636e\u7684\u5927\u5c0f\u4e3a224x224 dataset_transform = transforms . Compose ([ transforms . ToTensor (), transforms . Resize (( 224 , 224 )) ]) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e flower_train = ImageFolder ( flower_train_path , transform = dataset_transform ) flower_test = ImageFolder ( flower_test_path , transform = dataset_transform ) # \u83b7\u53d6\u6570\u636e\u7684\u8fed\u4ee3 train_loader = DataLoader ( dataset = flower_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = flower_test , batch_size = batch_size , shuffle = False )","title":"2.1 \u83b7\u53d6\u6570\u636e\u96c6"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/07-%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/#22","text":"\u6211\u4eec\u4f7f\u7528\u5728ImageNet\u6570\u636e\u96c6\u4e0a\u9884\u8bad\u7ec3\u7684Vgg-16\u4f5c\u4e3a\u6e90\u6a21\u578b\u3002torchvision\u5c0f\u4e8e\u7b49\u4e8e0.12\u7248\u672c\u6211\u4eec\u6307\u5b9apretrain=True\u5373\u53ef\uff0c\u5927\u4e8e0.12\u7684\u6307\u5b9a weights \u6765\u81ea\u52a8\u4e0b\u8f7d\u5e76\u52a0\u8f7d\u9884\u8bad\u7ec3\u7684\u6a21\u578b\u53c2\u6570\uff0c\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u65f6\u9700\u8981\u8054\u7f51\u4e0b\u8f7d\u6a21\u578b\u53c2\u6570\u3002 torchvision\u4e2d\u5c01\u88c5\u4e86\u5f88\u591a\u91cd\u91cf\u7ea7\u7684\u7f51\u7edc\u67b6\u6784\uff0c\u90fd\u6709\u5176\u5bf9\u5e94\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5229\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u6784\u67b6\u5f53\u524d\u4efb\u52a1\u7684\u7f51\u7edc\u67b6\u6784\uff0c\u7279\u5f81\u63d0\u53d6\u90e8\u5206\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7ed3\u6784\uff0c\u8f93\u51fa\u7aef\u6211\u4eec\u6839\u636e\u5f53\u524d\u4efb\u52a1\u8fdb\u884c\u6784\u5efa\uff1a class VGG16_finetune ( nn . Module ): def __init__ ( self , num_class = 5 ): super ( VGG16_finetune , self ) . __init__ () # \u83b7\u53d6\u9884\u8bad\u7ec3\u6a21\u578b # 0.12 vgg16_net = models . vgg16 ( pretrained = True ) # >0.12 # weights= models.VGG16_Weights.DEFAULT # vgg16_net = model.vgg16(weights = weights) self . num_class = num_class # \u83b7\u53d6\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7279\u5f81\u548cGAP\u7684\u7ed3\u679c self . features = vgg16_net . features self . avgpool = vgg16_net . avgpool # \u6784\u5efa\u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aef\uff1aFC self . classifier = nn . Sequential ( nn . Linear ( 25088 , 512 ), nn . ReLU ( True ), nn . Dropout (), nn . Linear ( 512 , 128 ), nn . ReLU ( True ), nn . Dropout (), nn . Linear ( 128 , self . num_class ), ) # \u524d\u5411\u4f20\u64ad\u8fc7\u7a0b def forward ( self , x ): x = self . features ( x ) x = self . avgpool ( x ) x = torch . flatten ( x , 1 ) x = self . classifier ( x ) return x \u8fdb\u884c\u6a21\u578b\u5b9e\u4f8b\u5316,\u5e76\u51bb\u7ed3\u5377\u79ef\u5c42\u90e8\u5206\u7684\u53c2\u6570\uff0c\u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 # \u6a21\u578b\u5b9e\u4f8b\u5316 model = VGG16_finetune ( num_class = 5 ) # \u51bb\u7ed3\u7279\u5f81\u63d0\u53d6\u90e8\u5206\u7684\u53c2\u6570\uff0c\u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 for param in model . features . parameters (): param . requires_grad = False # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum,\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u66f4\u65b0\u540e\u9762\u7684\u5206\u7c7b\u8f93\u51fa\u5c42\u7684\u53c2\u6570\u3002\u5377\u79ef\u5c42\u7684\u53c2\u6570\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7ed3\u679c optimizer = torch . optim . Adam ( model . classifier . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss ()","title":"2.2 \u5fae\u8c03\u6a21\u578b\u7684\u6784\u5efa"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/07-%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/#23","text":"\u6211\u4eec\u8bbe\u7f6e\u597d\u7f51\u7edc\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u50cf\u524d\u9762\u8bfe\u7a0b\u4e2d\u4e00\u6837\u8fdb\u884c\u6a21\u578b\u7684\u8bc4\u4f30\u4e0e\u8bad\u7ec3\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8c03\u7528train\u65b9\u6cd5\u5c31\u53ef\u4ee5\u8fdb\u884c\u7f51\u7edc\u7684\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 0.8777 , train accuracy : 0.670 , test accuracy : 0.799 time : 1880.13265228271484 current epoch = 1 epoch : 1 , loss : 0.4829 , train accuracy : 0.833 , test accuracy : 0.838 time : 1647.77058219909668 current epoch = 2 epoch : 2 , loss : 0.3613 , train accuracy : 0.881 , test accuracy : 0.843 time : 1564.02652955055237 current epoch = 3 epoch : 3 , loss : 0.2668 , train accuracy : 0.920 , test accuracy : 0.854 time : 1372.08724927902222 current epoch = 4 epoch : 4 , loss : 0.2407 , train accuracy : 0.923 , test accuracy : 0.832 time : 1572.96699476242065 current epoch = 5 epoch : 5 , loss : 0.1745 , train accuracy : 0.953 , test accuracy : 0.854 time : 1553.9370255470276 current epoch = 6 epoch : 6 , loss : 0.1862 , train accuracy : 0.947 , test accuracy : 0.849 time : 1622.81787252426147 current epoch = 7 epoch : 7 , loss : 0.1813 , train accuracy : 0.945 , test accuracy : 0.874 time : 1795.26246666908264 current epoch = 8 epoch : 8 , loss : 0.1563 , train accuracy : 0.957 , test accuracy : 0.857 time : 1514.09582495689392 current epoch = 9 epoch : 9 , loss : 0.1990 , train accuracy : 0.952 , test accuracy : 0.846 time : 1587.1035635471344 ------------ finish training ------------- \u4e0e\u672a\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u76f8\u6bd4\uff0c\u8bad\u7ec3\u901f\u5ea6\u6709\u6240\u63d0\u5347\uff0c\u5728\u5f00\u59cb\u65f6\u7684\u51c6\u786e\u7387\u4e5f\u6bd4\u8f83\u9ad8\u4e00\u4e9b\u3002 \u603b\u7ed3 \u5fae\u8c03\u662f\u76ee\u6807\u6a21\u578b\u590d\u5236\u4e86\u6e90\u6a21\u578b\u4e0a\u9664\u4e86\u8f93\u51fa\u5c42\u5916\u7684\u6240\u6709\u6a21\u578b\u8bbe\u8ba1\u53ca\u5176\u53c2\u6570\uff0c\u5e76\u57fa\u4e8e\u76ee\u6807\u6570\u636e\u96c6\u5fae\u8c03\u8fd9\u4e9b\u53c2\u6570\u3002\u800c\u76ee\u6807\u6a21\u578b\u7684\u8f93\u51fa\u5c42\u9700\u8981\u4ece\u5934\u8bad\u7ec3\u3002 \u80fd\u591f\u5229\u7528torch\u5b9e\u73b0\u6a21\u578b\u5fae\u8c03","title":"2.3 \u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/08-%E6%B1%BD%E8%BD%A6%E8%BD%A6%E5%9E%8B%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/","text":"1.8 \u6c7d\u8f66\u8f66\u578b\u5206\u7c7b\u6848\u4f8b \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u6570\u636e\u589e\u5f3a\u7684\u4f7f\u7528\u65b9\u6cd5 \u80fd\u591f\u5b9e\u73b0\u6a21\u578b\u5fae\u8c03\u7684\u7f51\u7edc\u6784\u5efa \u80fd\u591f\u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3 \u80fd\u591f\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b 1.\u80cc\u666f\u4ecb\u7ecd \u00b6 \u968f\u7740\u57ce\u5e02\u8f66\u8f86\u6570\u91cf\u7684\u65e5\u76ca\u589e\u52a0\uff0c\u968f\u7740\u800c\u6765\u7684\u793e\u4f1a\u95ee\u9898\u8d8a\u6765\u8d8a\u591a\uff0c\u6bd4\u5982\u5728\u5168\u56fd\u591a\u5ea7\u57ce\u5e02\u5b58\u5728\u7684\u8f66\u8f86\u62e5\u5835\u73b0\u8c61\u3001\u65e5\u76ca\u589e\u591a\u7684\u4ea4\u901a\u4e8b\u6545\uff0c\u4ee5\u53ca\u5229\u7528\u8f66\u8f86\u8fdb\u884c\u72af\u7f6a\u7b49\u3002\u8f66\u8f86\u76f8\u5173\u8bc6\u522b\u6280\u672f\u7684\u53d1\u5c55\u4e3a\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u63d0\u4f9b\u4e86\u5e2e\u52a9\u3002\u76ee\u524d\uff0c\u8f66\u8f86\u76f8\u5173\u7684\u8bc6\u522b\u6280\u672f\u4e3b\u8981\u5305\u62ec\u8f66\u724c\u3001\u8f66\u6807\u3001\u8f66\u8f86\u7c7b\u578b\u3001\u8f66\u8f86\u54c1\u724c\u548c\u8f66\u8f86\u578b\u53f7(\u7b80\u79f0\u201c\u8f66\u578b\u201d)\u8bc6\u522b\uff0c\u5176\u4e2d\uff0c\u8f66\u578b\u8bc6\u522b\u662f\u76ee\u524d\u6700\u5177\u6311\u6218\u6027\u7684\u8bfe\u9898\uff0c\u5b83\u4e0d\u4ec5\u8981\u6c42\u8bc6\u522b\u8f66\u8f86\u7c7b\u578b(\u5982\uff1a\u5361\u8f66\u3001\u5ba2\u8f66\u6216\u8d8a\u91ce\u8f66\u7b49)\uff0c\u8fd8\u8981\u6c42\u8bc6\u522b\u8f66\u8f86\u5177\u4f53\u7684\u54c1\u724c\u548c\u6b3e\u5f0f(\u5982\uff1a\u5965\u8feaA6L-2018\u6b3e)\uff0c\u5c5e\u4e8e\u7ec6\u7c92\u5ea6\u76ee\u6807\u8bc6\u522b\u95ee\u9898\u3002\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4e00\u4e9b\u7ecf\u5178\u7684\u7f51\u7edc\uff0c\u5982VGGNet\u3001GoogLeNet\u3001ResNet\u7b49\uff0c\u5747\u53ef\u5b9e\u73b0\u5bf9\u8f66\u8f86\u578b\u53f7\u7684\u8bc6\u522b\u3002\u5728\u672c\u6848\u4f8b\u4e2d\u6211\u4eec\u4f7f\u7528\u65af\u5766\u798f\u6c7d\u8f66\u6570\u636e\u96c6\u8bad\u7ec3ResNet\u6a21\u578b\uff0c\u8fdb\u884c\u8f66\u578b\u8bc6\u522b\u3002 \u9996\u5148\u6211\u4eec\u5bfc\u5165\u672c\u6848\u4f8b\u6240\u9700\u7684\u5de5\u5177\u5305\uff1a # \u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305 from torch import nn import torch from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder import torchvision.models as models 2.\u6570\u636e\u96c6\u4ecb\u7ecd \u00b6 \u65af\u5766\u798f\u6c7d\u8f66\u6570\u636e\u96c6\uff08Stanford Cars Dataset\uff09 \u662f\u5305\u542b 196 \u79cd\u6c7d\u8f66\u7c7b\u578b\u7684\u56fe\u50cf\u6570\u636e\u96c6\uff0c\u4e3b\u8981\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\uff0c\u5176\u5171\u6709 16,185 \u5f20\u56fe\u50cf\uff0c\u5176\u4e2d\u8bad\u7ec3\u56fe\u50cf\u548c\u6d4b\u8bd5\u56fe\u50cf\u5206\u522b\u4e3a 8,144 \u5f20\u548c 8,041 \u5f20\uff0c\u6bcf\u4e2a\u7c7b\u522b\u7684\u56fe\u50cf\u6570\u91cf\u76f8\u5f53\uff0c\u5176\u4e2d\u5206\u7c7b\u57fa\u4e8e\u6c7d\u8f66\u54c1\u724c\u3001\u8f66\u578b\u548c\u5e74\u4efd\uff0c\u5982\uff1a2012\u5e74\u7279\u65af\u62c9Model S\u62162012\u5e74\u5b9d\u9a6cM3\u53cc\u95e8\u8dd1\u8f66\u3002 \u6570\u636e\u96c6\u5b58\u653e\u5728dataset\u6587\u4ef6\u5939\u4e2d\uff0c\u6807\u6ce8\u65b9\u5f0f\u4e0e\u9c9c\u82b1\u6570\u636e\u96c6\u7c7b\u4f3c\uff0c\u5177\u4f53\u5982\u4e0b\u6240\u793a\uff1a \u6211\u4eec\u5c06\u6570\u636e\u89e3\u6790\u51fa\u6765\uff0c\u9996\u5148\u6307\u5b9a\u6570\u636e\u96c6\u7684\u8def\u5f84\uff1a # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 cars_train_path = './dataset/Stanford_Cars/train/' cars_test_path = './dataset/Stanford_Cars/test/' 2.\u6570\u636e\u589e\u5f3a\u53ca\u83b7\u53d6 \u00b6 \u5728\u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3\u65f6\u9700\u8981\u5c06\u6570\u636e\u8fdb\u884c\u589e\u5f3a\uff0c\u6211\u4eec\u91c7\u7528\u51e0\u4f55\u589e\u5f3a\u548c\u989c\u8272\u589e\u5f3a\u7684\u65b9\u5f0f\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5 # \u6c34\u5e73\u7ffb\u8f6c transforms_HF = transforms . RandomHorizontalFlip ( p = 0.5 ) # \u968f\u673a\u65cb\u8f6c transforms_RR = transforms . RandomRotation ( 45 ) # \u5c3a\u5bf8\u8c03\u6574 transforms_RS = transforms . Resize ( size = ( 256 , 256 )) # \u989c\u8272\u8c03\u6574 transforms_color = transforms . ColorJitter ( brightness = 0.5 , contrast = 0.5 , saturation = 0.5 , hue = 0.2 ) # \u8bad\u7ec3\u96c6\u589e\u5f3a\u65b9\u6cd5\u7684\u7ec4\u5408:\u9996\u5148\u8f6c\u6362\u4e3atensor,\u7136\u540e\u8fdb\u884c\u51e0\u4f55\u548c\u989c\u8272\u589e\u5f3a train_transform = transforms . Compose ([ transforms . ToTensor (), transforms_HF , transforms_RR , transforms_RS , transforms_color ]) # \u9a8c\u8bc1\u96c6\u589e\u5f3a\u65b9\u6cd5 test_transform = transforms . Compose ([ transforms . ToTensor (), transforms_RS , ]) \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528imageFolder\u83b7\u53d6\u6570\u636e\u96c6\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e cars_train = ImageFolder ( cars_train_path , transform = train_transform ) cars_test = ImageFolder ( cars_test_path , transform = test_transform ) \u5e76\u4f7f\u7528dataloader\u83b7\u53d6\u6279\u91cf\u6570\u636e\uff1a # \u4f7f\u7528dataloader\u83b7\u53d6\u6279\u91cf\u6570\u636e batch_size = 2 train_loader = DataLoader ( dataset = cars_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = cars_test , batch_size = batch_size , shuffle = False ) \u6211\u4eec\u5c06\u83b7\u53d6\u7684\u6570\u636e\u8fdb\u884c\u5c55\u793a\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 0 : break \u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a 3.\u6a21\u578b\u6784\u5efa \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528imageNet\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a # \u6a21\u578b\u52a0\u8f7d\uff1a\u8fdb\u884c\u6a21\u578b\u5fae\u8c03\uff0c\u4f7f\u7528imageNet\u7684\u9884\u8bad\u7ec3\u6a21\u578b model = models . resnet34 ( pretrained = True ) # \u5c06\u6240\u6709\u7684\u53c2\u6570\u5c42\u8fdb\u884c\u51bb\u7ed3 for param in model . parameters (): param . requires_grad = False #\u83b7\u53d6\u5230fc\u5c42\u7684\u8f93\u5165 num_fc_ftr = model . fc . in_features # \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684FC\u5c42\uff0c\u4f5c\u4e3a\u6a21\u578b\u7684\u8f93\u51fa\u5c42\uff0c\u8fdb\u884c\u8f66\u8f86\u7684\u5206\u7c7b model . fc = nn . Linear ( num_fc_ftr , 196 ) \u5c06\u6a21\u578b\u7684\u6700\u540e\u4e00\u5c42\u7684\u795e\u7ecf\u5143\u4e2a\u6570\u6539\u6210\u8f66\u578b\u7684\u7c7b\u522b\u4e2a\u6570\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u4e86\u3002 4.\u6a21\u578b\u8bad\u7ec3 \u00b6 \u4e0e\u524d\u9762\u7684\u9c9c\u82b1\u6848\u4f8b\u7c7b\u4f3c\uff0c\u6211\u4eec\u5b9a\u4e49\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u8bc4\u4f30\u65b9\u6cd5\u548c\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum (\u68af\u5ea6\u3001lr\u4e24\u65b9\u9762\u4f18\u5316\u4e0b\u964d\u66f4\u5feb\u66f4\u7a33) optimizer = torch . optim . Adam ( model . fc . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss () # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) torch . save ( model . state_dict (), \"./weights/model- {} .pth\" . format ( epoch )) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 5.2225 , train accuracy : 0.430 , test accuracy : 0.505 time : 454.9108862876892 current epoch = 1 epoch : 1 , loss : 4.4064 , train accuracy : 0.498 , test accuracy : 0.529 time : 453.7942295074463 current epoch = 2 epoch : 2 , loss : 3.9654 , train accuracy : 0.562 , test accuracy : 0.578 time : 457.74895191192627 current epoch = 3 epoch : 3 , loss : 3.6322 , train accuracy : 0.610 , test accuracy : 0.624 time : 454.7437493801117 current epoch = 4 epoch : 4 , loss : 3.3408 , train accuracy : 0.664 , test accuracy : 0.615 time : 454.68416261672974 current epoch = 5 epoch : 5 , loss : 3.1303 , train accuracy : 0.695 , test accuracy : 0.641 time : 454.87048745155334 current epoch = 6 epoch : 6 , loss : 2.9387 , train accuracy : 0.728 , test accuracy : 0.672 time : 454.9037387371063 current epoch = 7 epoch : 7 , loss : 2.7961 , train accuracy : 0.754 , test accuracy : 0.677 time : 454.4555780887604 current epoch = 8 epoch : 8 , loss : 2.6793 , train accuracy : 0.780 , test accuracy : 0.682 time : 451.5388140678406 current epoch = 9 epoch : 9 , loss : 2.5636 , train accuracy : 0.799 , test accuracy : 0.676 time : 453.035516500473 \u6211\u5c06batch_size\u8bbe\u7f6e\u4e3a16\uff0c\u8bad\u7ec3\u4e86150\u4e2a\u8f6e\u6b21\u7684\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\uff08\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u6362\uff0c\u53f3\u56fe\u662f\u51c6\u786e\u7387\u7684\u53d8\u6362\u60c5\u51b5\uff09 \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u968f\u7740\u8bad\u7ec3\u8f6e\u6b21\u7684\u589e\u52a0\uff0c\u6a21\u578b\u7684\u62df\u5408\u80fd\u529b\u8d8a\u6765\u8d8a\u597d\uff0c\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u4e5f\u5728\u4e0d\u65ad\u7684\u63d0\u9ad8\u3002 5.\u6a21\u578b\u9884\u6d4b \u00b6 \u6a21\u578b\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u6211\u4eec\u8981\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u5bf9\u56fe\u7247\u6570\u636e\u8fdb\u884c\u9884\u6d4b\uff0c\u6574\u4e2a\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u5de5\u5177\u5305 import glob import os from PIL import Image # \u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570 model . load_state_dict ( torch . load ( \"./weights/model.pth\" , map_location = torch . device ( 'cpu' ))) # \u6307\u5b9a\u8981\u9884\u6d4b\u7684\u56fe\u50cf file_path = \"./car_image/\" # \u5bf9\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b with torch . no_grad (): # \u6307\u5b9a\u6a21\u578b\u4e3a\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u56fe\u50cf\u7684\u8def\u5f84 image_paths = glob . glob ( os . path . join ( file_path , '*.jpg' )) # \u904d\u5386\u6bcf\u4e00\u5e45\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b for img_path in image_paths : # \u6253\u5f00\u56fe\u7247 img = Image . open ( img_path ) # \u589e\u52a0batch\u7ef4\u5ea6 batch = test_transform ( img ) . unsqueeze ( 0 ) # \u5c06\u56fe\u50cf\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b outputs = model ( batch ) . squeeze ( 0 ) . softmax ( 0 ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c\uff1a\u7c7b\u522b\u7d22\u5f15 class_id = outputs . argmax () . item () # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c\uff1a\u7c7b\u522b\u5206\u6570 score = outputs [ class_id ] . item () # \u83b7\u53d6\u5bf9\u5e94\u7684\u7c7b\u522b\u540d\u79f0 category_name = cars_train . classes [ class_id ] # \u9884\u6d4b\u7ed3\u679c\u7684\u5c55\u793a plt . imshow ( img ) plt . title ( category_name ) plt . show () \u6211\u4eec\u5c06\u90e8\u5206\u9884\u6d4b\u7ed3\u679c\u5c55\u793a\u5982\u4e0b\uff1a \u9884\u6d4b\u7ed3\u679c\u4ee5\u56fe\u50cf\u6807\u9898\u7684\u5f62\u5f0f\u8fdb\u884c\u5c55\u793a\u3002 \u603b\u7ed3 \u77e5\u9053\u6570\u636e\u589e\u5f3a\u7684\u4f7f\u7528\u65b9\u6cd5 \u80fd\u591f\u5b9e\u73b0\u6a21\u578b\u5fae\u8c03\u7684\u7f51\u7edc\u6784\u5efa \u80fd\u591f\u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3 \u80fd\u591f\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b","title":"1.8 \u6c7d\u8f66\u8f66\u578b\u5206\u7c7b\u6848\u4f8b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/08-%E6%B1%BD%E8%BD%A6%E8%BD%A6%E5%9E%8B%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/#18","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u6570\u636e\u589e\u5f3a\u7684\u4f7f\u7528\u65b9\u6cd5 \u80fd\u591f\u5b9e\u73b0\u6a21\u578b\u5fae\u8c03\u7684\u7f51\u7edc\u6784\u5efa \u80fd\u591f\u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3 \u80fd\u591f\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b","title":"1.8 \u6c7d\u8f66\u8f66\u578b\u5206\u7c7b\u6848\u4f8b"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/08-%E6%B1%BD%E8%BD%A6%E8%BD%A6%E5%9E%8B%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/#1","text":"\u968f\u7740\u57ce\u5e02\u8f66\u8f86\u6570\u91cf\u7684\u65e5\u76ca\u589e\u52a0\uff0c\u968f\u7740\u800c\u6765\u7684\u793e\u4f1a\u95ee\u9898\u8d8a\u6765\u8d8a\u591a\uff0c\u6bd4\u5982\u5728\u5168\u56fd\u591a\u5ea7\u57ce\u5e02\u5b58\u5728\u7684\u8f66\u8f86\u62e5\u5835\u73b0\u8c61\u3001\u65e5\u76ca\u589e\u591a\u7684\u4ea4\u901a\u4e8b\u6545\uff0c\u4ee5\u53ca\u5229\u7528\u8f66\u8f86\u8fdb\u884c\u72af\u7f6a\u7b49\u3002\u8f66\u8f86\u76f8\u5173\u8bc6\u522b\u6280\u672f\u7684\u53d1\u5c55\u4e3a\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u63d0\u4f9b\u4e86\u5e2e\u52a9\u3002\u76ee\u524d\uff0c\u8f66\u8f86\u76f8\u5173\u7684\u8bc6\u522b\u6280\u672f\u4e3b\u8981\u5305\u62ec\u8f66\u724c\u3001\u8f66\u6807\u3001\u8f66\u8f86\u7c7b\u578b\u3001\u8f66\u8f86\u54c1\u724c\u548c\u8f66\u8f86\u578b\u53f7(\u7b80\u79f0\u201c\u8f66\u578b\u201d)\u8bc6\u522b\uff0c\u5176\u4e2d\uff0c\u8f66\u578b\u8bc6\u522b\u662f\u76ee\u524d\u6700\u5177\u6311\u6218\u6027\u7684\u8bfe\u9898\uff0c\u5b83\u4e0d\u4ec5\u8981\u6c42\u8bc6\u522b\u8f66\u8f86\u7c7b\u578b(\u5982\uff1a\u5361\u8f66\u3001\u5ba2\u8f66\u6216\u8d8a\u91ce\u8f66\u7b49)\uff0c\u8fd8\u8981\u6c42\u8bc6\u522b\u8f66\u8f86\u5177\u4f53\u7684\u54c1\u724c\u548c\u6b3e\u5f0f(\u5982\uff1a\u5965\u8feaA6L-2018\u6b3e)\uff0c\u5c5e\u4e8e\u7ec6\u7c92\u5ea6\u76ee\u6807\u8bc6\u522b\u95ee\u9898\u3002\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4e00\u4e9b\u7ecf\u5178\u7684\u7f51\u7edc\uff0c\u5982VGGNet\u3001GoogLeNet\u3001ResNet\u7b49\uff0c\u5747\u53ef\u5b9e\u73b0\u5bf9\u8f66\u8f86\u578b\u53f7\u7684\u8bc6\u522b\u3002\u5728\u672c\u6848\u4f8b\u4e2d\u6211\u4eec\u4f7f\u7528\u65af\u5766\u798f\u6c7d\u8f66\u6570\u636e\u96c6\u8bad\u7ec3ResNet\u6a21\u578b\uff0c\u8fdb\u884c\u8f66\u578b\u8bc6\u522b\u3002 \u9996\u5148\u6211\u4eec\u5bfc\u5165\u672c\u6848\u4f8b\u6240\u9700\u7684\u5de5\u5177\u5305\uff1a # \u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305 from torch import nn import torch from torchvision import transforms from torch.utils.data import DataLoader from torchvision.datasets import ImageFolder import torchvision.models as models","title":"1.\u80cc\u666f\u4ecb\u7ecd"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/08-%E6%B1%BD%E8%BD%A6%E8%BD%A6%E5%9E%8B%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/#2","text":"\u65af\u5766\u798f\u6c7d\u8f66\u6570\u636e\u96c6\uff08Stanford Cars Dataset\uff09 \u662f\u5305\u542b 196 \u79cd\u6c7d\u8f66\u7c7b\u578b\u7684\u56fe\u50cf\u6570\u636e\u96c6\uff0c\u4e3b\u8981\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\uff0c\u5176\u5171\u6709 16,185 \u5f20\u56fe\u50cf\uff0c\u5176\u4e2d\u8bad\u7ec3\u56fe\u50cf\u548c\u6d4b\u8bd5\u56fe\u50cf\u5206\u522b\u4e3a 8,144 \u5f20\u548c 8,041 \u5f20\uff0c\u6bcf\u4e2a\u7c7b\u522b\u7684\u56fe\u50cf\u6570\u91cf\u76f8\u5f53\uff0c\u5176\u4e2d\u5206\u7c7b\u57fa\u4e8e\u6c7d\u8f66\u54c1\u724c\u3001\u8f66\u578b\u548c\u5e74\u4efd\uff0c\u5982\uff1a2012\u5e74\u7279\u65af\u62c9Model S\u62162012\u5e74\u5b9d\u9a6cM3\u53cc\u95e8\u8dd1\u8f66\u3002 \u6570\u636e\u96c6\u5b58\u653e\u5728dataset\u6587\u4ef6\u5939\u4e2d\uff0c\u6807\u6ce8\u65b9\u5f0f\u4e0e\u9c9c\u82b1\u6570\u636e\u96c6\u7c7b\u4f3c\uff0c\u5177\u4f53\u5982\u4e0b\u6240\u793a\uff1a \u6211\u4eec\u5c06\u6570\u636e\u89e3\u6790\u51fa\u6765\uff0c\u9996\u5148\u6307\u5b9a\u6570\u636e\u96c6\u7684\u8def\u5f84\uff1a # \u6307\u5b9a\u6570\u636e\u96c6\u8def\u5f84 cars_train_path = './dataset/Stanford_Cars/train/' cars_test_path = './dataset/Stanford_Cars/test/'","title":"2.\u6570\u636e\u96c6\u4ecb\u7ecd"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/08-%E6%B1%BD%E8%BD%A6%E8%BD%A6%E5%9E%8B%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/#2_1","text":"\u5728\u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3\u65f6\u9700\u8981\u5c06\u6570\u636e\u8fdb\u884c\u589e\u5f3a\uff0c\u6211\u4eec\u91c7\u7528\u51e0\u4f55\u589e\u5f3a\u548c\u989c\u8272\u589e\u5f3a\u7684\u65b9\u5f0f\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5 # \u6c34\u5e73\u7ffb\u8f6c transforms_HF = transforms . RandomHorizontalFlip ( p = 0.5 ) # \u968f\u673a\u65cb\u8f6c transforms_RR = transforms . RandomRotation ( 45 ) # \u5c3a\u5bf8\u8c03\u6574 transforms_RS = transforms . Resize ( size = ( 256 , 256 )) # \u989c\u8272\u8c03\u6574 transforms_color = transforms . ColorJitter ( brightness = 0.5 , contrast = 0.5 , saturation = 0.5 , hue = 0.2 ) # \u8bad\u7ec3\u96c6\u589e\u5f3a\u65b9\u6cd5\u7684\u7ec4\u5408:\u9996\u5148\u8f6c\u6362\u4e3atensor,\u7136\u540e\u8fdb\u884c\u51e0\u4f55\u548c\u989c\u8272\u589e\u5f3a train_transform = transforms . Compose ([ transforms . ToTensor (), transforms_HF , transforms_RR , transforms_RS , transforms_color ]) # \u9a8c\u8bc1\u96c6\u589e\u5f3a\u65b9\u6cd5 test_transform = transforms . Compose ([ transforms . ToTensor (), transforms_RS , ]) \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528imageFolder\u83b7\u53d6\u6570\u636e\u96c6\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u83b7\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e cars_train = ImageFolder ( cars_train_path , transform = train_transform ) cars_test = ImageFolder ( cars_test_path , transform = test_transform ) \u5e76\u4f7f\u7528dataloader\u83b7\u53d6\u6279\u91cf\u6570\u636e\uff1a # \u4f7f\u7528dataloader\u83b7\u53d6\u6279\u91cf\u6570\u636e batch_size = 2 train_loader = DataLoader ( dataset = cars_train , batch_size = batch_size , shuffle = True ) test_loader = DataLoader ( dataset = cars_test , batch_size = batch_size , shuffle = False ) \u6211\u4eec\u5c06\u83b7\u53d6\u7684\u6570\u636e\u8fdb\u884c\u5c55\u793a\uff1a import matplotlib.pyplot as plt # \u904d\u5386\u6bcf\u4e2a\u8fed\u4ee3\u7684\u6570\u636e\uff0c\u5c06\u5176\u7ed3\u679c\u5c55\u793a\u51fa\u6765 for b , ( imgs , targets ) in enumerate ( train_loader ): # \u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u56fe\u50cf if b == 1 : # \u5c06\u5176\u8fdb\u884c\u5c55\u793a fig , axes = plt . subplots ( 1 , 2 ) # \u904d\u5386batch\u4e2d\u7684\u6bcf\u4e2a\u56fe\u50cf for i in range ( batch_size ): # \u56fe\u50cf\u663e\u793a\u51fa\u6765 axes [ i ] . imshow ( imgs [ i ] . permute ( 1 , 2 , 0 )) # \u8bbe\u7f6e\u56fe\u50cf\u6807\u9898 axes [ i ] . set_title ( targets [ i ] . item ()) plt . show () elif b > 0 : break \u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a","title":"2.\u6570\u636e\u589e\u5f3a\u53ca\u83b7\u53d6"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/08-%E6%B1%BD%E8%BD%A6%E8%BD%A6%E5%9E%8B%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/#3","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528imageNet\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a # \u6a21\u578b\u52a0\u8f7d\uff1a\u8fdb\u884c\u6a21\u578b\u5fae\u8c03\uff0c\u4f7f\u7528imageNet\u7684\u9884\u8bad\u7ec3\u6a21\u578b model = models . resnet34 ( pretrained = True ) # \u5c06\u6240\u6709\u7684\u53c2\u6570\u5c42\u8fdb\u884c\u51bb\u7ed3 for param in model . parameters (): param . requires_grad = False #\u83b7\u53d6\u5230fc\u5c42\u7684\u8f93\u5165 num_fc_ftr = model . fc . in_features # \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684FC\u5c42\uff0c\u4f5c\u4e3a\u6a21\u578b\u7684\u8f93\u51fa\u5c42\uff0c\u8fdb\u884c\u8f66\u8f86\u7684\u5206\u7c7b model . fc = nn . Linear ( num_fc_ftr , 196 ) \u5c06\u6a21\u578b\u7684\u6700\u540e\u4e00\u5c42\u7684\u795e\u7ecf\u5143\u4e2a\u6570\u6539\u6210\u8f66\u578b\u7684\u7c7b\u522b\u4e2a\u6570\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u4e86\u3002","title":"3.\u6a21\u578b\u6784\u5efa"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/08-%E6%B1%BD%E8%BD%A6%E8%BD%A6%E5%9E%8B%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/#4","text":"\u4e0e\u524d\u9762\u7684\u9c9c\u82b1\u6848\u4f8b\u7c7b\u4f3c\uff0c\u6211\u4eec\u5b9a\u4e49\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u8bc4\u4f30\u65b9\u6cd5\u548c\u6a21\u578b\u8bad\u7ec3\u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 10 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum (\u68af\u5ea6\u3001lr\u4e24\u65b9\u9762\u4f18\u5316\u4e0b\u964d\u66f4\u5feb\u66f4\u7a33) optimizer = torch . optim . Adam ( model . fc . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss () # \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7cbe\u5ea6:\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u6a21\u578b def evaluate_accuracy ( data_iter , model ): total = 0 correct = 0 # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u6a21\u578b\u662f\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u6bcf\u4e00\u4e2abatch\u7684\u6570\u636e\uff0c\u8fdb\u884c\u9884\u6d4b for images , labels in data_iter : outputs = model ( images ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u9884\u6d4b\u7684\u6b21\u6570 total += labels . size ( 0 ) # \u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 correct += ( predicts == labels ) . cpu () . sum () break # \u83b7\u53d6\u51c6\u786e\u7387 return correct / total # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_loader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u6bcf\u4e00\u4e2a\u8f6e\u6b21\u7684\u635f\u5931\uff0c\u9884\u6d4b\u4e2a\u6570\u548c\u9884\u6d4b\u6b63\u786e\u4e2a\u6570\u7684\u521d\u59cb\u5316 train_accuracy_total = 0 train_correct = 0 # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f model . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b outputs = model ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () # \u8f93\u51fa\u6a21\u578b\u9884\u6d4b\u7ed3\u679c _ , predicts = torch . max ( outputs . data , dim = 1 ) # \u83b7\u53d6\u8bad\u7ec3\u96c6\u9884\u6d4b\u6b63\u786e\u7684\u4e2a\u6570 train_accuracy_total += labels . size ( 0 ) train_correct += ( predicts == labels ) . cpu () . sum () . item () iter += 1 # \u6d4b\u8bd5\u96c6\u9884\u6d4b\u7684\u51c6\u786e\u7387 test_acc = evaluate_accuracy ( test_loader , model ) torch . save ( model . state_dict (), \"./weights/model- {} .pth\" . format ( epoch )) print ( 'epoch: {0} , loss: {1:.4f} , train accuracy: {2:.3f} , test accuracy: {3:.3f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ), train_correct / train_accuracy_total , test_acc )) print ( '------------finish training-------------' ) \u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a current epoch = 0 epoch : 0 , loss : 5.2225 , train accuracy : 0.430 , test accuracy : 0.505 time : 454.9108862876892 current epoch = 1 epoch : 1 , loss : 4.4064 , train accuracy : 0.498 , test accuracy : 0.529 time : 453.7942295074463 current epoch = 2 epoch : 2 , loss : 3.9654 , train accuracy : 0.562 , test accuracy : 0.578 time : 457.74895191192627 current epoch = 3 epoch : 3 , loss : 3.6322 , train accuracy : 0.610 , test accuracy : 0.624 time : 454.7437493801117 current epoch = 4 epoch : 4 , loss : 3.3408 , train accuracy : 0.664 , test accuracy : 0.615 time : 454.68416261672974 current epoch = 5 epoch : 5 , loss : 3.1303 , train accuracy : 0.695 , test accuracy : 0.641 time : 454.87048745155334 current epoch = 6 epoch : 6 , loss : 2.9387 , train accuracy : 0.728 , test accuracy : 0.672 time : 454.9037387371063 current epoch = 7 epoch : 7 , loss : 2.7961 , train accuracy : 0.754 , test accuracy : 0.677 time : 454.4555780887604 current epoch = 8 epoch : 8 , loss : 2.6793 , train accuracy : 0.780 , test accuracy : 0.682 time : 451.5388140678406 current epoch = 9 epoch : 9 , loss : 2.5636 , train accuracy : 0.799 , test accuracy : 0.676 time : 453.035516500473 \u6211\u5c06batch_size\u8bbe\u7f6e\u4e3a16\uff0c\u8bad\u7ec3\u4e86150\u4e2a\u8f6e\u6b21\u7684\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\uff08\u5de6\u56fe\u662f\u635f\u5931\u51fd\u6570\u7684\u53d8\u6362\uff0c\u53f3\u56fe\u662f\u51c6\u786e\u7387\u7684\u53d8\u6362\u60c5\u51b5\uff09 \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u968f\u7740\u8bad\u7ec3\u8f6e\u6b21\u7684\u589e\u52a0\uff0c\u6a21\u578b\u7684\u62df\u5408\u80fd\u529b\u8d8a\u6765\u8d8a\u597d\uff0c\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u4e5f\u5728\u4e0d\u65ad\u7684\u63d0\u9ad8\u3002","title":"4.\u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/08-%E6%B1%BD%E8%BD%A6%E8%BD%A6%E5%9E%8B%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/#5","text":"\u6a21\u578b\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u6211\u4eec\u8981\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u5bf9\u56fe\u7247\u6570\u636e\u8fdb\u884c\u9884\u6d4b\uff0c\u6574\u4e2a\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u5de5\u5177\u5305 import glob import os from PIL import Image # \u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570 model . load_state_dict ( torch . load ( \"./weights/model.pth\" , map_location = torch . device ( 'cpu' ))) # \u6307\u5b9a\u8981\u9884\u6d4b\u7684\u56fe\u50cf file_path = \"./car_image/\" # \u5bf9\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b with torch . no_grad (): # \u6307\u5b9a\u6a21\u578b\u4e3a\u9a8c\u8bc1\u6a21\u5f0f model . eval () # \u83b7\u53d6\u56fe\u50cf\u7684\u8def\u5f84 image_paths = glob . glob ( os . path . join ( file_path , '*.jpg' )) # \u904d\u5386\u6bcf\u4e00\u5e45\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b for img_path in image_paths : # \u6253\u5f00\u56fe\u7247 img = Image . open ( img_path ) # \u589e\u52a0batch\u7ef4\u5ea6 batch = test_transform ( img ) . unsqueeze ( 0 ) # \u5c06\u56fe\u50cf\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b outputs = model ( batch ) . squeeze ( 0 ) . softmax ( 0 ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c\uff1a\u7c7b\u522b\u7d22\u5f15 class_id = outputs . argmax () . item () # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c\uff1a\u7c7b\u522b\u5206\u6570 score = outputs [ class_id ] . item () # \u83b7\u53d6\u5bf9\u5e94\u7684\u7c7b\u522b\u540d\u79f0 category_name = cars_train . classes [ class_id ] # \u9884\u6d4b\u7ed3\u679c\u7684\u5c55\u793a plt . imshow ( img ) plt . title ( category_name ) plt . show () \u6211\u4eec\u5c06\u90e8\u5206\u9884\u6d4b\u7ed3\u679c\u5c55\u793a\u5982\u4e0b\uff1a \u9884\u6d4b\u7ed3\u679c\u4ee5\u56fe\u50cf\u6807\u9898\u7684\u5f62\u5f0f\u8fdb\u884c\u5c55\u793a\u3002 \u603b\u7ed3 \u77e5\u9053\u6570\u636e\u589e\u5f3a\u7684\u4f7f\u7528\u65b9\u6cd5 \u80fd\u591f\u5b9e\u73b0\u6a21\u578b\u5fae\u8c03\u7684\u7f51\u7edc\u6784\u5efa \u80fd\u591f\u5b9e\u73b0\u6a21\u578b\u8bad\u7ec3 \u80fd\u591f\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b","title":"5.\u6a21\u578b\u9884\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/","text":"2.1 \u76ee\u6807\u68c0\u6d4b\u6982\u8ff0 \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u76ee\u6807\u68c0\u6d4b\u7684\u4efb\u52a1 \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u7684\u5e38\u7528\u6570\u636e\u96c6 \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u7684\u8bc4\u4ef7\u6307\u6807 \u638c\u63e1\u975e\u6781\u5927\u503cNMS\u7b97\u6cd5\u7684\u5e94\u7528 \u4e86\u89e3\u5e38\u7528\u7684\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u5206\u7c7b 1. \u76ee\u6807\u68c0\u6d4b \u00b6 \u76ee\u6807\u68c0\u6d4b\uff08Object Detection\uff09\u7684\u4efb\u52a1\u662f\u627e\u51fa\u56fe\u50cf\u4e2d\u6240\u6709\u611f\u5174\u8da3\u7684\u76ee\u6807\uff0c\u5e76\u786e\u5b9a\u5b83\u4eec\u7684\u7c7b\u522b\u548c\u4f4d\u7f6e\u3002 \u76ee\u6807\u68c0\u6d4b\u4e2d\u80fd\u68c0\u6d4b\u51fa\u6765\u7684\u7269\u4f53\u53d6\u51b3\u4e8e\u5f53\u524d\u4efb\u52a1\uff08\u6570\u636e\u96c6\uff09\u9700\u8981\u68c0\u6d4b\u7684\u7269\u4f53\u6709\u54ea\u4e9b\u3002\u5047\u8bbe\u6211\u4eec\u7684\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u5b9a\u4f4d\u662f\u68c0\u6d4b\u52a8\u7269\uff08\u725b\u3001\u7f8a\u3001\u732a\u3001\u72d7\u3001\u732b\u4e94\u79cd\u7ed3\u679c\uff09\uff0c\u90a3\u4e48\u6a21\u578b\u5bf9\u4efb\u4f55\u4e00\u5f20\u56fe\u7247\u8f93\u51fa\u7ed3\u679c\u4e0d\u4f1a\u8f93\u51fa\u9e2d\u5b50\u3001\u4e66\u7c4d\u7b49\u5176\u5b83\u7c7b\u578b\u7ed3\u679c\u3002 \u76ee\u6807\u68c0\u6d4b\u7684\u4f4d\u7f6e\u4fe1\u606f\u4e00\u822c\u7531\u4e24\u79cd\u683c\u5f0f\uff08\u4ee5\u56fe\u7247\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9(0,0)\uff09\uff1a 1\u3001\u6781\u5750\u6807\u8868\u793a\uff1a(xmin, ymin, xmax, ymax) xmin,ymin:x,y\u5750\u6807\u7684\u6700\u5c0f\u503c xmin,ymin:x,y\u5750\u6807\u7684\u6700\u5927\u503c 2\u3001\u4e2d\u5fc3\u70b9\u5750\u6807\uff1a(x_center, y_center, w, h) x_center, y_center:\u76ee\u6807\u68c0\u6d4b\u6846\u7684\u4e2d\u5fc3\u70b9\u5750\u6807 w,h:\u76ee\u6807\u68c0\u6d4b\u6846\u7684\u5bbd\u3001\u9ad8 \u5047\u8bbe\u5728\u4e0b\u9762\u7684\u56fe\u50cf\u4e2d\u8fdb\u884c\u68c0\u6d4b\uff0c\uff1a \u90a3\u76ee\u6807\u68c0\u6d4b\u7ed3\u679c\u7684\u4e2d\u5fc3\u70b9\u8868\u793a\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\uff1a 2.\u5e38\u7528\u7684\u5f00\u6e90\u6570\u636e\u96c6 \u00b6 \u7ecf\u5178\u7684\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u6709\u4e24\u79cd\uff0c PASCAL VOC\u6570\u636e\u96c6 \u548c MS COCO\u6570\u636e\u96c6 \u3002 2.1 PASCAL VOC\u6570\u636e\u96c6 \u00b6 PASCAL VOC\u662f\u76ee\u6807\u68c0\u6d4b\u9886\u57df\u7684\u7ecf\u5178\u6570\u636e\u96c6\u3002PASCAL VOC\u5305\u542b\u7ea610,000\u5f20\u5e26\u6709\u8fb9\u754c\u6846\u7684\u56fe\u7247\u7528\u4e8e\u8bad\u7ec3\u548c\u9a8c\u8bc1\u3002PASCAL VOC\u6570\u636e\u96c6\u662f\u76ee\u6807\u68c0\u6d4b\u95ee\u9898\u7684\u4e00\u4e2a\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u5f88\u591a\u6a21\u578b\u90fd\u662f\u5728\u6b64\u6570\u636e\u96c6\u4e0a\u5f97\u5230\u7684\uff0c\u5e38\u7528\u7684\u662fVOC2007\u548cVOC2012\u4e24\u4e2a\u7248\u672c\u6570\u636e\uff0c\u517120\u4e2a\u7c7b\u522b\uff0c\u5206\u522b\u662f\uff1a \u4e5f\u5c31\u662f\uff1a 1.\u4eba: \u4eba 2.\u52a8\u7269: \u9e1f\uff0c\u732b\uff0c\u725b\uff0c\u72d7\uff0c\u9a6c\uff0c\u7f8a 3.\u4ea4\u901a\u5de5\u5177: \u98de\u673a\uff0c\u81ea\u884c\u8f66\uff0c\u8239\uff0c\u516c\u5171\u6c7d\u8f66\uff0c\u6c7d\u8f66\uff0c\u6469\u6258\u8f66\uff0c\u706b\u8f66 4.\u5ba4\u5185: \u74f6\u5b50\uff0c\u6905\u5b50\uff0c\u9910\u684c\uff0c\u76c6\u683d\uff0c\u6c99\u53d1\uff0c\u7535\u89c6/\u663e\u793a\u5668 \u4e0b\u8f7d\u5730\u5740 \uff1a https://pjreddie.com/projects/pascal-voc-dataset-mirror/ \u6574\u4e2a\u6570\u636e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a \u5176\u4e2d\uff1a JPEGImages\u5b58\u653e\u56fe\u7247\u6587\u4ef6 Annotations\u4e0b\u5b58\u653e\u7684\u662fxml\u6587\u4ef6,\u63cf\u8ff0\u4e86\u56fe\u7247\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u9700\u8981\u5173\u6ce8\u7684\u5c31\u662f\u8282\u70b9\u4e0b\u7684\u6570\u636e,\u5c24\u5176\u662fbndbox\u4e0b\u7684\u6570\u636e.xmin,ymin\u6784\u6210\u4e86boundingbox\u7684\u5de6\u4e0a\u89d2,xmax,ymax\u6784\u6210\u4e86boundingbox\u7684\u53f3\u4e0b\u89d2\uff0c\u4e5f\u5c31\u662f\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u4f4d\u7f6e\u4fe1\u606f ImageSets\u5305\u542b\u4ee5\u4e0b4\u4e2a\u6587\u4ef6\u5939\uff1a Action\u4e0b\u5b58\u653e\u7684\u662f\u4eba\u7684\u52a8\u4f5c\uff08\u4f8b\u5982running\u3001jumping\u7b49\u7b49\uff09 Layout\u4e0b\u5b58\u653e\u7684\u662f\u5177\u6709\u4eba\u4f53\u90e8\u4f4d\u7684\u6570\u636e\uff08\u4eba\u7684head\u3001hand\u3001feet\u7b49\u7b49\uff09 Segmentation\u4e0b\u5b58\u653e\u7684\u662f\u53ef\u7528\u4e8e\u5206\u5272\u7684\u6570\u636e\u3002 Main\u4e0b\u5b58\u653e\u7684\u662f\u56fe\u50cf\u7269\u4f53\u8bc6\u522b\u7684\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a20\u7c7b\uff0c\u8fd9\u662f\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\u7684\u91cd\u70b9\u3002 2.2 MS COCO\u6570\u636e\u96c6 \u00b6 MS COCO\u7684\u5168\u79f0\u662fMicrosoft Common Objects in Context\uff0c\u5fae\u8f6f\u4e8e2014\u5e74\u51fa\u8d44\u6807\u6ce8\u7684Microsoft COCO\u6570\u636e\u96c6\uff0c\u4e0eImageNet\u7ade\u8d5b\u4e00\u6837\uff0c\u88ab\u89c6\u4e3a\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u6700\u53d7\u5173\u6ce8\u548c\u6700\u6743\u5a01\u7684\u6bd4\u8d5b\u4e4b\u4e00\u3002 COCO\u6570\u636e\u96c6\u662f\u4e00\u4e2a\u5927\u578b\u7684\u3001\u4e30\u5bcc\u7684\u7269\u4f53\u68c0\u6d4b\uff0c\u5206\u5272\u548c\u5b57\u5e55\u6570\u636e\u96c6\u3002\u8fd9\u4e2a\u6570\u636e\u96c6\u4ee5\u573a\u666f\u7406\u89e3\u4e3a\u76ee\u6807\uff0c\u4e3b\u8981\u4ece\u590d\u6742\u7684\u65e5\u5e38\u573a\u666f\u4e2d\u622a\u53d6\uff0c\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u901a\u8fc7\u7cbe\u786e\u7684\u5206\u5272\u8fdb\u884c\u4f4d\u7f6e\u7684\u6807\u5b9a\u3002\u56fe\u50cf\u5305\u62ec91\u7c7b\u76ee\u6807\uff0c328,000\u5f71\u50cf\u548c2,500,000\u4e2alabel\u3002\u76ee\u524d\u4e3a\u6b62\u76ee\u6807\u68c0\u6d4b\u7684\u6700\u5927\u6570\u636e\u96c6\uff0c\u63d0\u4f9b\u7684\u7c7b\u522b\u670980 \u7c7b\uff0c\u6709\u8d85\u8fc733 \u4e07\u5f20\u56fe\u7247\uff0c\u5176\u4e2d20 \u4e07\u5f20\u6709\u6807\u6ce8\uff0c\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\u4e2a\u4f53\u7684\u6570\u76ee\u8d85\u8fc7150 \u4e07\u4e2a\u3002 \u56fe\u50cf\u793a\u4f8b\uff1a coco\u6570\u636e\u96c6\u7684\u6807\u7b7e\u6587\u4ef6\u6807\u8bb0\u4e86\u6bcf\u4e2asegmentation+bounding box\u7684\u7cbe\u786e\u5750\u6807\uff0c\u5176\u7cbe\u5ea6\u5747\u4e3a\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\u4e00\u4e2a\u76ee\u6807\u7684\u6807\u7b7e\u793a\u610f\u5982\u4e0b\uff1a {\"segmentation\":[[392.87, 275.77, 402.24, 284.2, 382.54, 342.36, 375.99, 356.43, 372.23, 357.37, 372.23, 397.7, 383.48, 419.27,407.87, 439.91, 427.57, 389.25, 447.26, 346.11, 447.26, 328.29, 468.84, 290.77,472.59, 266.38], [429.44,465.23, 453.83, 473.67, 636.73, 474.61, 636.73, 392.07, 571.07, 364.88, 546.69,363.0]], \"area\": 28458.996150000003, \"iscrowd\": 0,\"image_id\": 503837, \"bbox\": [372.23, 266.38, 264.5,208.23] , \"category_id\": 4, \"id\": 151109}, 3.\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807 \u00b6 3.1 IOU \u00b6 \u5728\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\uff0cIoU\uff08intersection over union\uff0c\u4ea4\u5e76\u6bd4\uff09\u662f\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7528\u6765\u8bc4\u4ef72\u4e2a\u77e9\u5f62\u6846\u4e4b\u95f4\u76f8\u4f3c\u5ea6\u7684\u6307\u6807\uff1a IoU = \u4e24\u4e2a\u77e9\u5f62\u6846\u76f8\u4ea4\u7684\u9762\u79ef / \u4e24\u4e2a\u77e9\u5f62\u6846\u76f8\u5e76\u7684\u9762\u79ef \uff0c \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u770b\u4e0b\u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\u7684\u5e94\u7528\uff1a \u5176\u4e2d\u4e0a\u56fe\u84dd\u8272\u6846\u6846\u4e3a\u68c0\u6d4b\u7ed3\u679c\uff0c\u7ea2\u8272\u6846\u6846\u4e3a\u771f\u5b9e\u6807\u6ce8\u3002 \u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u9884\u6d4b\u7ed3\u679c\u4e0e\u771f\u5b9e\u7ed3\u679c\u4e4b\u95f4\u7684\u4ea4\u5e76\u6bd4\u6765\u8861\u91cf\u4e24\u8005\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u5bf9\u4e8e\u68c0\u6d4b\u6846\u7684\u5224\u5b9a\u90fd\u4f1a\u5b58\u5728\u4e00\u4e2a\u9608\u503c\uff0c\u4e5f\u5c31\u662f IoU \u7684\u9608\u503c\uff0c\u4e00\u822c\u53ef\u4ee5\u8bbe\u7f6e\u5f53 IoU \u7684\u503c\u5927\u4e8e 0.5 \u7684\u65f6\u5019\uff0c\u5219\u53ef\u8ba4\u4e3a\u68c0\u6d4b\u5230\u76ee\u6807\u7269\u4f53\u3002 \u5b9e\u73b0\u65b9\u6cd5\uff1a import numpy as np # \u5b9a\u4e49\u65b9\u6cd5\u8ba1\u7b97IOU def Iou ( box1 , box2 ): # \u4f7f\u7528\u6781\u5750\u6807\u5f62\u5f0f\u8868\u793a\uff1a\u76f4\u63a5\u83b7\u53d6\u4e24\u4e2abbox\u7684\u5750\u6807 # \u83b7\u53d6\u4e24\u4e2a\u6846\u7684\u5de6\u4e0a\u89d2\u5750\u6807\u548c\u53f3\u4e0b\u89d2\u5750\u6807 xmin1 , ymin1 , xmax1 , ymax1 = box1 xmin2 , ymin2 , xmax2 , ymax2 = box2 # \u83b7\u53d6\u77e9\u5f62\u6846\u4ea4\u96c6\u5bf9\u5e94\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u5750\u6807\uff08intersection\uff09 xx1 = np . max ([ xmin1 , xmin2 ]) yy1 = np . max ([ ymin1 , ymin2 ]) xx2 = np . min ([ xmax1 , xmax2 ]) yy2 = np . min ([ ymax1 , ymax2 ]) # \u8ba1\u7b97\u4e24\u4e2a\u77e9\u5f62\u6846\u9762\u79ef area1 = ( xmax1 - xmin1 ) * ( ymax1 - ymin1 ) area2 = ( xmax2 - xmin2 ) * ( ymax2 - ymin2 ) #\u8ba1\u7b97\u4ea4\u96c6\u9762\u79ef inter_area = ( np . max ([ 0 , xx2 - xx1 ])) * ( np . max ([ 0 , yy2 - yy1 ])) #\u8ba1\u7b97\u4ea4\u5e76\u6bd4 iou = inter_area / ( area1 + area2 - inter_area ) return iou \u5047\u8bbe\u6211\u4eec\u68c0\u6d4b\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff0c\u5e76\u5c55\u793a\u5728\u56fe\u50cf\u4e0a\uff1a # \u771f\u5b9e\u6846\uff08\u84dd\uff09\u4e0e\u9884\u6d4b\u6846\uff08\u7ea2\uff09 True_bbox , predict_bbox = [ 100 , 35 , 398 , 400 ], [ 40 , 150 , 355 , 398 ] \u8ba1\u7b97IoU\uff1a Iou ( True_bbox , predict_bbox ) \u7ed3\u679c\u4e3a\uff1a 0.5114435907762924 3.2 mAP\uff08 Mean Average Precision \uff09 \u00b6 \u76ee\u6807\u68c0\u6d4b\u95ee\u9898\u4e2d\u7684\u6bcf\u4e2a\u56fe\u7247\u90fd\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u4e0d\u540c\u7c7b\u522b\u7684\u7269\u4f53\uff0c\u9700\u8981\u8bc4\u4f30\u6a21\u578b\u7684\u7269\u4f53\u5206\u7c7b\u548c\u5b9a\u4f4d\u6027\u80fd\u3002\u56e0\u6b64\uff0c\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u7684\u6807\u51c6\u6307\u6807precision\u4e0d\u80fd\u76f4\u63a5\u5e94\u7528\u4e8e\u6b64\u3002 \u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\uff0cmAP\u662f\u4e3b\u8981\u7684\u8861\u91cf\u6307\u6807\u3002 mAP\u662f\u591a\u4e2a\u5206\u7c7b\u4efb\u52a1\u7684AP\u7684\u5e73\u5747\u503c\uff0c\u800cAP\uff08average precision\uff09\u662fPR\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff0c\u6240\u4ee5\u5728\u4ecb\u7ecdmAP\u4e4b\u524d\u6211\u4eec\u8981\u5148\u5f97\u5230PR\u66f2\u7ebf\u3002 TP\u3001FP\u3001FN\u3001TN True Positive (TP): IoU> ( \u4e00\u822c\u53d6 0.5 ) \u7684\u68c0\u6d4b\u6846\u6570\u91cf\uff08\u540c\u4e00 Ground Truth \u53ea\u8ba1\u7b97\u4e00\u6b21\uff09 False Positive (FP): IoU<= \u7684\u68c0\u6d4b\u6846\u6570\u91cf\uff0c\u6216\u8005\u662f\u68c0\u6d4b\u5230\u540c\u4e00\u4e2a GT \u7684\u591a\u4f59\u68c0\u6d4b\u6846\u7684\u6570\u91cf False Negative (FN): \u6ca1\u6709\u68c0\u6d4b\u5230\u7684 GT \u7684\u6570\u91cf True Negative (TN): \u5728 mAP \u8bc4\u4ef7\u6307\u6807\u4e2d\u4e0d\u4f1a\u4f7f\u7528\u5230 \u67e5\u51c6\u7387\u3001\u67e5\u5168\u7387 \u67e5\u51c6\u7387\uff08Precision\uff09: TP/(TP + FP) \u67e5\u5168\u7387\uff08Recall\uff09: TP/(TP + FN) \u4e8c\u8005\u7ed8\u5236\u7684\u66f2\u7ebf\u79f0\u4e3a P-R \u66f2\u7ebf \u5148\u5b9a\u4e49\u4e24\u4e2a\u516c\u5f0f\uff0c\u4e00\u4e2a\u662f Precision\uff0c\u4e00\u4e2a\u662f Recall\uff0c\u4e0e\u4e0a\u9762\u7684\u516c\u5f0f\u76f8\u540c\uff0c\u6269\u5c55\u5f00\u6765\uff0c\u7528\u53e6\u5916\u4e00\u79cd\u5f62\u5f0f\u8fdb\u884c\u5c55\u793a\uff0c\u5176\u4e2d all detctions \u4ee3\u8868\u6240\u6709\u9884\u6d4b\u6846\u7684\u6570\u91cf\uff0c all ground truths \u4ee3\u8868\u6240\u6709 GT \u7684\u6570\u91cf\u3002 AP \u662f\u8ba1\u7b97\u67d0\u4e00\u7c7b P-R \u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff0cmAP \u5219\u662f\u8ba1\u7b97\u6240\u6709\u7c7b\u522b P-R \u66f2\u7ebf\u4e0b\u9762\u79ef\u7684\u5e73\u5747\u503c\u3002 \u5047\u8bbe\u6211\u4eec\u6709 7 \u5f20\u56fe\u7247\uff08Images1-Image7\uff09\uff0c\u8fd9\u4e9b\u56fe\u7247\u6709 15 \u4e2a\u76ee\u6807\uff08\u7eff\u8272\u7684\u6846\uff0cGT \u7684\u6570\u91cf\uff0c\u4e0a\u6587\u63d0\u53ca\u7684 all ground truths \uff09\u4ee5\u53ca 24 \u4e2a\u9884\u6d4b\u8fb9\u6846\uff08\u7ea2\u8272\u7684\u6846\uff0cA-Y \u7f16\u53f7\u8868\u793a\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u7f6e\u4fe1\u5ea6\u503c\uff09\uff1a \u6839\u636e\u4e0a\u56fe\u4ee5\u53ca\u8bf4\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u4ee5\u4e0b\u8868\u683c\uff0c\u5176\u4e2d Images \u4ee3\u8868\u56fe\u7247\u7684\u7f16\u53f7\uff0cDetections \u4ee3\u8868\u9884\u6d4b\u8fb9\u6846\u7684\u7f16\u53f7\uff0cConfidences \u4ee3\u8868\u9884\u6d4b\u8fb9\u6846\u7684\u7f6e\u4fe1\u5ea6\uff0cTP or FP \u4ee3\u8868\u9884\u6d4b\u7684\u8fb9\u6846\u662f\u6807\u8bb0\u4e3a TP \u8fd8\u662f FP\uff08\u8ba4\u4e3a\u9884\u6d4b\u8fb9\u6846\u4e0e GT \u7684 IOU \u503c\u5927\u4e8e\u7b49\u4e8e 0.3 \u5c31\u6807\u8bb0\u4e3a TP\uff1b\u82e5\u4e00\u4e2a GT \u6709\u591a\u4e2a\u9884\u6d4b\u8fb9\u6846\uff0c\u5219\u8ba4\u4e3a IOU \u6700\u5927\u4e14\u5927\u4e8e\u7b49\u4e8e 0.3 \u7684\u9884\u6d4b\u6846\u6807\u8bb0\u4e3a TP\uff0c\u5176\u4ed6\u7684\u6807\u8bb0\u4e3a FP\uff0c\u5373\u4e00\u4e2a GT \u53ea\u80fd\u6709\u4e00\u4e2a\u9884\u6d4b\u6846\u6807\u8bb0\u4e3a TP\uff09\uff0c\u8fd9\u91cc\u7684 0.3 \u662f\u968f\u673a\u53d6\u7684\u4e00\u4e2a\u503c\u3002 \u901a\u8fc7\u4e0a\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed8\u5236\u51fa P-R \u66f2\u7ebf\uff08\u56e0\u4e3a AP \u5c31\u662f P-R \u66f2\u7ebf\u4e0b\u9762\u7684\u9762\u79ef\uff09\uff0c\u4f46\u662f\u5728\u6b64\u4e4b\u524d\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u51fa P-R \u66f2\u7ebf\u4e0a\u5404\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u6839\u636e\u7f6e\u4fe1\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u6240\u6709\u7684\u9884\u6d4b\u6846\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97 Precision \u548c Recall \u7684\u503c\uff0c\u89c1\u4e0b\u8868\u3002\uff08\u9700\u8981\u8bb0\u4f4f\u4e00\u4e2a\u53eb\u7d2f\u52a0\u7684\u6982\u5ff5\uff0c\u5c31\u662f\u4e0b\u56fe\u7684 ACC TP \u548c ACC FP\uff09 \u6807\u53f7\u4e3a 1 \u7684 Precision \u548c Recall \u7684\u8ba1\u7b97\u65b9\u5f0f\uff1aPrecision=TP/(TP+FP)=1/(1+0)=1\uff0cRecall=TP/(TP+FN)=TP/( all ground truths )=1/15=0.0666 \uff08 all ground truths \u4e0a\u9762\u6709\u5b9a\u4e49\u8fc7\u4e86 \uff09 \u6807\u53f7 2\uff1aPrecision=TP/(TP+FP)=1/(1+1)=0.5\uff0cRecall=TP/(TP+FN)=TP/( all ground truths )=1/15=0.0666 \u6807\u53f7 3\uff1aPrecision=TP/(TP+FP)=2/(2+1)=0.6666\uff0cRecall=TP/(TP+FN)=TP/( all ground truths )=2/15=0.1333 \u5176\u4ed6\u7684\u4f9d\u6b21\u7c7b\u63a8 \u7136\u540e\u5c31\u53ef\u4ee5\u7ed8\u5236\u51fa P-R \u66f2\u7ebf \u5f97\u5230 P-R \u66f2\u7ebf\u5c31\u53ef\u4ee5\u8ba1\u7b97 AP\uff08P-R \u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff09\uff0c\u8981\u8ba1\u7b97 P-R \u4e0b\u65b9\u7684\u9762\u79ef\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u5728VOC2010\u4ee5\u524d\uff0c\u53ea\u9700\u8981\u9009\u53d6\u5f53Recall >= 0, 0.1, 0.2, ..., 1\u517111\u4e2a\u70b9\u65f6\u7684Precision\u6700\u5927\u503c\uff0c\u7136\u540eAP\u5c31\u662f\u8fd911\u4e2aPrecision\u7684\u5e73\u5747\u503c\uff0c\u53d6 11 \u4e2a\u70b9 [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1] \u7684\u63d2\u503c\u6240\u5f97 \u5f97\u5230\u4e00\u4e2a\u7c7b\u522b\u7684 AP \u7ed3\u679c\u5982\u4e0b\uff1a \u8981\u8ba1\u7b97 mAP\uff0c\u5c31\u628a\u6240\u6709\u7c7b\u522b\u7684 AP \u8ba1\u7b97\u51fa\u6765\uff0c\u7136\u540e\u6c42\u53d6\u5e73\u5747\u5373\u53ef\u3002 \u5728VOC2010\u53ca\u4ee5\u540e\uff0c\u9700\u8981\u9488\u5bf9\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684Recall\u503c\uff08\u5305\u62ec0\u548c1\uff09\uff0c\u9009\u53d6\u5176\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e9bRecall\u503c\u65f6\u7684Precision\u6700\u5927\u503c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7136\u540e\u8ba1\u7b97PR\u66f2\u7ebf\u4e0b\u9762\u79ef\u4f5c\u4e3aAP\u503c\uff1a \u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a 4.NMS\uff08\u975e\u6781\u5927\u503c\u6291\u5236\uff09 \u00b6 \u975e\u6781\u5927\u503c\u6291\u5236\uff08Non-Maximum Suppression\uff0cNMS\uff09\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f\u6291\u5236\u4e0d\u662f\u6781\u5927\u503c\u7684\u5143\u7d20\u3002\u4f8b\u5982\u5728\u884c\u4eba\u68c0\u6d4b\u4e2d\uff0c\u6ed1\u52a8\u7a97\u53e3\u7ecf\u63d0\u53d6\u7279\u5f81\uff0c\u7ecf\u5206\u7c7b\u5668\u5206\u7c7b\u8bc6\u522b\u540e\uff0c\u6bcf\u4e2a\u7a97\u53e3\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u5206\u6570\u3002\u4f46\u662f\u6ed1\u52a8\u7a97\u53e3\u4f1a\u5bfc\u81f4\u5f88\u591a\u7a97\u53e3\u4e0e\u5176\u4ed6\u7a97\u53e3\u5b58\u5728\u5305\u542b\u6216\u8005\u5927\u90e8\u5206\u4ea4\u53c9\u7684\u60c5\u51b5\u3002\u8fd9\u65f6\u5c31\u9700\u8981\u7528\u5230NMS\u6765\u9009\u53d6\u90a3\u4e9b\u90bb\u57df\u91cc\u5206\u6570\u6700\u9ad8\uff08\u662f\u884c\u4eba\u7684\u6982\u7387\u6700\u5927\uff09\uff0c\u5e76\u4e14\u6291\u5236\u90a3\u4e9b\u5206\u6570\u4f4e\u7684\u7a97\u53e3\u3002 NMS\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u6709\u7740\u975e\u5e38\u91cd\u8981\u7684\u5e94\u7528\uff0c\u5982\u89c6\u9891\u76ee\u6807\u8ddf\u8e2a\u3001\u6570\u636e\u6316\u6398\u30013D\u91cd\u5efa\u3001\u76ee\u6807\u8bc6\u522b\u4ee5\u53ca\u7eb9\u7406\u5206\u6790\u7b49 \u3002 \u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\uff0cNMS\u7684\u76ee\u7684\u5c31\u662f\u8981\u53bb\u9664\u5197\u4f59\u7684\u68c0\u6d4b\u6846,\u4fdd\u7559\u6700\u597d\u7684\u4e00\u4e2a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a NMS\u7684\u539f\u7406\u662f\u5bf9\u4e8e\u9884\u6d4b\u6846\u7684\u5217\u8868B\u53ca\u5176\u5bf9\u5e94\u7684\u7f6e\u4fe1\u5ea6S,\u9009\u62e9\u5177\u6709\u6700\u5927score\u7684\u68c0\u6d4b\u6846M,\u5c06\u5176\u4eceB\u96c6\u5408\u4e2d\u79fb\u9664\u5e76\u52a0\u5165\u5230\u6700\u7ec8\u7684\u68c0\u6d4b\u7ed3\u679cD\u4e2d.\u901a\u5e38\u5c06B\u4e2d\u5269\u4f59\u68c0\u6d4b\u6846\u4e2d\u4e0eM\u7684IoU\u5927\u4e8e\u9608\u503cNt\u7684\u6846\u4eceB\u4e2d\u79fb\u9664.\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b,\u76f4\u5230B\u4e3a\u7a7a\u3002 \u4f7f\u7528\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u9996\u5148\u662f\u68c0\u6d4b\u51fa\u4e00\u7cfb\u5217\u7684\u68c0\u6d4b\u6846 \u5c06\u68c0\u6d4b\u6846\u6309\u7167\u7c7b\u522b\u8fdb\u884c\u5206\u7c7b \u5bf9\u540c\u4e00\u7c7b\u522b\u7684\u68c0\u6d4b\u6846\u5e94\u7528NMS\u83b7\u53d6\u6700\u7ec8\u7684\u68c0\u6d4b\u7ed3\u679c \u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u770b\u4e9bNMS\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5047\u8bbe\u5b9a\u4f4d\u8f66\u8f86\uff0c\u7b97\u6cd5\u5c31\u627e\u51fa\u4e86\u4e00\u7cfb\u5217\u7684\u77e9\u5f62\u6846\uff0c\u6211\u4eec\u9700\u8981\u5224\u522b\u54ea\u4e9b\u77e9\u5f62\u6846\u662f\u6ca1\u7528\u7684\uff0c\u9700\u8981\u4f7f\u7528NMS\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u5047\u8bbe\u73b0\u5728\u68c0\u6d4b\u7a97\u53e3\u6709\uff1aA\u3001B\u3001C\u3001D\u3001E 5\u4e2a\u5019\u9009\u6846\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u8fed\u4ee3\u8ba1\u7b97\uff1a \u7b2c\u4e00\u8f6e\uff1a\u56e0\u4e3aB\u662f\u5f97\u5206\u6700\u9ad8\u7684\uff0c\u4e0eB\u7684IoU\uff1e0.5\u5220\u9664\u3002A\uff0cCDE\u4e2d\u73b0\u5728\u4e0eB\u8ba1\u7b97IoU\uff0cDE\u7ed3\u679c\uff1e0.5\uff0c\u5254\u9664DE\uff0cB\u4f5c\u4e3a\u4e00\u4e2a\u9884\u6d4b\u7ed3\u679c\uff0c\u6709\u4e2a\u68c0\u6d4b\u6846\u7559\u4e0bB\uff0c\u653e\u5165\u96c6\u5408 \u7b2c\u4e8c\u8f6e\uff1aA\u7684\u5f97\u5206\u6700\u9ad8\uff0c\u4e0eA\u8ba1\u7b97IoU\uff0cC\u7684\u7ed3\u679c\uff1e0.5\uff0c\u5254\u9664C\uff0cA\u4f5c\u4e3a\u4e00\u4e2a\u7ed3\u679c \u6700\u7ec8\u7ed3\u679c\u4e3a\u5728\u8fd9\u4e2a5\u4e2a\u4e2d\u68c0\u6d4b\u51fa\u4e86\u4e24\u4e2a\u76ee\u6807\u4e3aA\u548cB\u3002 \u5355\u7c7b\u522b\u7684NMS\u7684\u5b9e\u73b0\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a import numpy as np def nms ( bboxes , confidence_score , threshold ): \"\"\"\u975e\u6781\u5927\u6291\u5236\u8fc7\u7a0b :param bboxes: \u540c\u7c7b\u522b\u5019\u9009\u6846\u5750\u6807 :param confidence: \u540c\u7c7b\u522b\u5019\u9009\u6846\u5206\u6570 :param threshold: iou\u9608\u503c :return: \"\"\" # 1\u3001\u5f3a\u8f6c\u6570\u7ec4\uff0c\u5e76\u53d6\u51fa\u6bcf\u4e2a\u6846\u5de6\u4e0a\u89d2\u5750\u6807\u548c\u53f3\u4e0b\u89d2\u5750\u6807 bboxes = np . array ( bboxes ) score = np . array ( confidence_score ) # \u53d6\u51fan\u4e2a\u7684\u6781\u5750\u6807\u70b9\uff08\u5de6\u4e0a\u89d2\u5750\u6807\u548c\u53f3\u4e0b\u89d2\u5750\u6807\uff09 x1 = bboxes [:, 0 ] y1 = bboxes [:, 1 ] x2 = bboxes [:, 2 ] y2 = bboxes [:, 3 ] # \u8ba1\u7b97\u6bcf\u4e2a\u6846\u7684\u9762\u79ef areas = ( x2 - x1 ) * ( y2 - y1 ) # 2\u3001\u5bf9\u5019\u9009\u6846\u8fdb\u884cNMS\u7b5b\u9009 # \u8fd4\u56de\u7684\u6846\u5750\u6807\u548c\u5206\u6570 picked_boxes = [] picked_score = [] # \u5bf9\u7f6e\u4fe1\u5ea6\u8fdb\u884c\u6392\u5e8f, \u83b7\u53d6\u6392\u5e8f\u540e\u7684\u4e0b\u6807\u5e8f\u53f7, argsort\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f order = np . argsort ( score ) while order . size > 0 : # \u5c06\u5f53\u524d\u7f6e\u4fe1\u5ea6\u6700\u5927\u7684\u6846\u52a0\u5165\u8fd4\u56de\u503c\u5217\u8868\u4e2d index = order [ - 1 ] #\u4fdd\u7559\u8be5\u7c7b\u5269\u4f59box\u4e2d\u5f97\u5206\u6700\u9ad8\u7684\u4e00\u4e2a picked_boxes . append ( bboxes [ index ]) picked_score . append ( confidence_score [ index ]) # \u8ba1\u7b97\u4ea4\u5e76\u6bd4 # \u83b7\u53d6\u5f53\u524d\u7f6e\u4fe1\u5ea6\u6700\u5927\u7684\u5019\u9009\u6846\u4e0e\u5176\u4ed6\u4efb\u610f\u5019\u9009\u6846\u7684\u76f8\u4ea4\u9762\u79ef x11 = np . maximum ( x1 [ index ], x1 [ order [: - 1 ]]) y11 = np . maximum ( y1 [ index ], y1 [ order [: - 1 ]]) x22 = np . minimum ( x2 [ index ], x2 [ order [: - 1 ]]) y22 = np . minimum ( y2 [ index ], y2 [ order [: - 1 ]]) # \u8ba1\u7b97\u4ea4\u96c6\u7684\u9762\u79ef,\u4e0d\u91cd\u53e0\u65f6\u9762\u79ef\u4e3a0 w = np . maximum ( 0.0 , x22 - x11 ) h = np . maximum ( 0.0 , y22 - y11 ) intersection = w * h # \u5229\u7528\u76f8\u4ea4\u7684\u9762\u79ef\u548c\u4e24\u4e2a\u6846\u81ea\u8eab\u7684\u9762\u79ef\u8ba1\u7b97\u6846\u7684\u4ea4\u5e76\u6bd4 ratio = intersection / ( areas [ index ] + areas [ order [: - 1 ]] - intersection ) # \u4fdd\u7559IoU\u5c0f\u4e8e\u9608\u503c\u7684box keep_boxes_indics = np . where ( ratio < threshold ) # \u4fdd\u7559\u5269\u4f59\u7684\u6846 order = order [ keep_boxes_indics ] # \u8fd4\u56deNMS\u540e\u7684\u6846\u53ca\u5206\u7c7b\u7ed3\u679c return picked_boxes , picked_score \u5047\u8bbe\u6709\u68c0\u6d4b\u7ed3\u679c\u5982\u4e0b\uff1a bounding = [( 187 , 82 , 337 , 317 ), ( 150 , 67 , 305 , 282 ), ( 246 , 121 , 368 , 304 )] confidence_score = [ 0.9 , 0.65 , 0.8 ] threshold = 0.3 picked_boxes , picked_score = nms ( bounding , confidence_score , threshold ) print ( '\u9608\u503cthreshold\u4e3a:' , threshold ) print ( 'NMS\u540e\u5f97\u5230\u7684bbox\u662f\uff1a' , picked_boxes ) print ( 'NMS\u540e\u5f97\u5230\u7684bbox\u7684confidences\u662f\uff1a' , picked_score ) \u8fd4\u56de\u7ed3\u679c\uff1a \u9608\u503cthreshold\u4e3a : 0.3 NMS\u540e\u5f97\u5230\u7684bbox\u662f \uff1a [ array ([ 187 , 82 , 337 , 317 ])] NMS\u540e\u5f97\u5230\u7684bbox\u7684confidences\u662f \uff1a [ 0.9 ] 5.\u76ee\u6807\u68c0\u6d4b\u65b9\u6cd5\u5206\u7c7b \u00b6 \u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e3b\u8981\u5206\u4e3atwo-stage\uff08\u4e24\u9636\u6bb5\uff09\u548cone-stage\uff08\u5355\u9636\u6bb5\uff09\u4e24\u7c7b\uff1a two-stage\u7684\u7b97\u6cd5 \u5148\u7531\u7b97\u6cd5\u751f\u6210\u4e00\u7cfb\u5217\u4f5c\u4e3a\u6837\u672c\u7684\u5019\u9009\u6846\uff0c\u518d\u901a\u8fc7\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u6837\u672c\u5206\u7c7b\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e3b\u8981\u901a\u8fc7\u4e00\u4e2a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6765\u5b8c\u6210\u76ee\u6807\u68c0\u6d4b\u8fc7\u7a0b\uff0c\u5176\u63d0\u53d6\u7684\u662fCNN\u5377\u79ef\u7279\u5f81\uff0c\u8fdb\u884c\u5019\u9009\u533a\u57df\u7684\u7b5b\u9009\u548c\u76ee\u6807\u68c0\u6d4b\u4e24\u90e8\u5206\u3002\u7f51\u7edc\u7684\u51c6\u786e\u5ea6\u9ad8\u3001\u901f\u5ea6\u76f8\u5bf9\u8f83\u6162\u3002 two-stages\u7b97\u6cd5\u7684\u4ee3\u8868\u662fRCNN\u7cfb\u5217\uff1aR-CNN\u5230Faster R-CNN\u7f51\u7edc One-stage\u7684\u7b97\u6cd5 \u76f4\u63a5\u901a\u8fc7\u4e3b\u5e72\u7f51\u7edc\u7ed9\u51fa\u76ee\u6807\u7684\u7c7b\u522b\u548c\u4f4d\u7f6e\u4fe1\u606f\uff0c\u6ca1\u6709\u4f7f\u7528\u5019\u9009\u533a\u57df\u7684\u7b5b\u9009\u7f51\u8def\uff0c\u8fd9\u79cd\u7b97\u6cd5\u901f\u5ea6\u5feb\uff0c\u4f46\u662f\u7cbe\u5ea6\u76f8\u5bf9Two-stage\u76ee\u6807\u68c0\u6d4b\u7f51\u7edc\u964d\u4f4e\u4e86\u5f88\u591a\u3002 one-stage\u7b97\u6cd5\u7684\u4ee3\u8868\u662f\uff1a YOLO\u7cfb\u5217\uff1aYOLOv1\u3001YOLOv2\u3001YOLOv3\u3001 SSD\u7b49 \u603b\u7ed3 \u4e86\u89e3\u76ee\u6807\u68c0\u6d4b\u7684\u4efb\u52a1 \u627e\u51fa\u56fe\u50cf\u4e2d\u6240\u6709\u611f\u5174\u8da3\u7684\u76ee\u6807\uff0c\u5e76\u786e\u5b9a\u5b83\u4eec\u7684\u7c7b\u522b\u548c\u4f4d\u7f6e \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u7684\u5e38\u7528\u6570\u636e\u96c6 PASCAL VOC\u6570\u636e\u96c6 \u548c MS COCO\u6570\u636e\u96c6 \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u7684\u8bc4\u4ef7\u6307\u6807 IOU\u548cmAP \u638c\u63e1\u975e\u6781\u5927\u503cNMS\u7b97\u6cd5\u7684\u5e94\u7528 \u8981\u53bb\u9664\u5197\u4f59\u7684\u68c0\u6d4b\u6846,\u4fdd\u7559\u6700\u597d\u7684\u4e00\u4e2a \u4e86\u89e3\u5e38\u7528\u7684\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u5206\u7c7b two-stage\uff08\u4e24\u9636\u6bb5\uff09\u548cone-stage\uff08\u5355\u9636\u6bb5\uff09","title":"2.1 \u76ee\u6807\u68c0\u6d4b\u6982\u8ff0"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#21","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u76ee\u6807\u68c0\u6d4b\u7684\u4efb\u52a1 \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u7684\u5e38\u7528\u6570\u636e\u96c6 \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u7684\u8bc4\u4ef7\u6307\u6807 \u638c\u63e1\u975e\u6781\u5927\u503cNMS\u7b97\u6cd5\u7684\u5e94\u7528 \u4e86\u89e3\u5e38\u7528\u7684\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u5206\u7c7b","title":"2.1 \u76ee\u6807\u68c0\u6d4b\u6982\u8ff0"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#1","text":"\u76ee\u6807\u68c0\u6d4b\uff08Object Detection\uff09\u7684\u4efb\u52a1\u662f\u627e\u51fa\u56fe\u50cf\u4e2d\u6240\u6709\u611f\u5174\u8da3\u7684\u76ee\u6807\uff0c\u5e76\u786e\u5b9a\u5b83\u4eec\u7684\u7c7b\u522b\u548c\u4f4d\u7f6e\u3002 \u76ee\u6807\u68c0\u6d4b\u4e2d\u80fd\u68c0\u6d4b\u51fa\u6765\u7684\u7269\u4f53\u53d6\u51b3\u4e8e\u5f53\u524d\u4efb\u52a1\uff08\u6570\u636e\u96c6\uff09\u9700\u8981\u68c0\u6d4b\u7684\u7269\u4f53\u6709\u54ea\u4e9b\u3002\u5047\u8bbe\u6211\u4eec\u7684\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u5b9a\u4f4d\u662f\u68c0\u6d4b\u52a8\u7269\uff08\u725b\u3001\u7f8a\u3001\u732a\u3001\u72d7\u3001\u732b\u4e94\u79cd\u7ed3\u679c\uff09\uff0c\u90a3\u4e48\u6a21\u578b\u5bf9\u4efb\u4f55\u4e00\u5f20\u56fe\u7247\u8f93\u51fa\u7ed3\u679c\u4e0d\u4f1a\u8f93\u51fa\u9e2d\u5b50\u3001\u4e66\u7c4d\u7b49\u5176\u5b83\u7c7b\u578b\u7ed3\u679c\u3002 \u76ee\u6807\u68c0\u6d4b\u7684\u4f4d\u7f6e\u4fe1\u606f\u4e00\u822c\u7531\u4e24\u79cd\u683c\u5f0f\uff08\u4ee5\u56fe\u7247\u5de6\u4e0a\u89d2\u4e3a\u539f\u70b9(0,0)\uff09\uff1a 1\u3001\u6781\u5750\u6807\u8868\u793a\uff1a(xmin, ymin, xmax, ymax) xmin,ymin:x,y\u5750\u6807\u7684\u6700\u5c0f\u503c xmin,ymin:x,y\u5750\u6807\u7684\u6700\u5927\u503c 2\u3001\u4e2d\u5fc3\u70b9\u5750\u6807\uff1a(x_center, y_center, w, h) x_center, y_center:\u76ee\u6807\u68c0\u6d4b\u6846\u7684\u4e2d\u5fc3\u70b9\u5750\u6807 w,h:\u76ee\u6807\u68c0\u6d4b\u6846\u7684\u5bbd\u3001\u9ad8 \u5047\u8bbe\u5728\u4e0b\u9762\u7684\u56fe\u50cf\u4e2d\u8fdb\u884c\u68c0\u6d4b\uff0c\uff1a \u90a3\u76ee\u6807\u68c0\u6d4b\u7ed3\u679c\u7684\u4e2d\u5fc3\u70b9\u8868\u793a\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\uff1a","title":"1. \u76ee\u6807\u68c0\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#2","text":"\u7ecf\u5178\u7684\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\u6709\u4e24\u79cd\uff0c PASCAL VOC\u6570\u636e\u96c6 \u548c MS COCO\u6570\u636e\u96c6 \u3002","title":"2.\u5e38\u7528\u7684\u5f00\u6e90\u6570\u636e\u96c6"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#21-pascal-voc","text":"PASCAL VOC\u662f\u76ee\u6807\u68c0\u6d4b\u9886\u57df\u7684\u7ecf\u5178\u6570\u636e\u96c6\u3002PASCAL VOC\u5305\u542b\u7ea610,000\u5f20\u5e26\u6709\u8fb9\u754c\u6846\u7684\u56fe\u7247\u7528\u4e8e\u8bad\u7ec3\u548c\u9a8c\u8bc1\u3002PASCAL VOC\u6570\u636e\u96c6\u662f\u76ee\u6807\u68c0\u6d4b\u95ee\u9898\u7684\u4e00\u4e2a\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u5f88\u591a\u6a21\u578b\u90fd\u662f\u5728\u6b64\u6570\u636e\u96c6\u4e0a\u5f97\u5230\u7684\uff0c\u5e38\u7528\u7684\u662fVOC2007\u548cVOC2012\u4e24\u4e2a\u7248\u672c\u6570\u636e\uff0c\u517120\u4e2a\u7c7b\u522b\uff0c\u5206\u522b\u662f\uff1a \u4e5f\u5c31\u662f\uff1a 1.\u4eba: \u4eba 2.\u52a8\u7269: \u9e1f\uff0c\u732b\uff0c\u725b\uff0c\u72d7\uff0c\u9a6c\uff0c\u7f8a 3.\u4ea4\u901a\u5de5\u5177: \u98de\u673a\uff0c\u81ea\u884c\u8f66\uff0c\u8239\uff0c\u516c\u5171\u6c7d\u8f66\uff0c\u6c7d\u8f66\uff0c\u6469\u6258\u8f66\uff0c\u706b\u8f66 4.\u5ba4\u5185: \u74f6\u5b50\uff0c\u6905\u5b50\uff0c\u9910\u684c\uff0c\u76c6\u683d\uff0c\u6c99\u53d1\uff0c\u7535\u89c6/\u663e\u793a\u5668 \u4e0b\u8f7d\u5730\u5740 \uff1a https://pjreddie.com/projects/pascal-voc-dataset-mirror/ \u6574\u4e2a\u6570\u636e\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a \u5176\u4e2d\uff1a JPEGImages\u5b58\u653e\u56fe\u7247\u6587\u4ef6 Annotations\u4e0b\u5b58\u653e\u7684\u662fxml\u6587\u4ef6,\u63cf\u8ff0\u4e86\u56fe\u7247\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u9700\u8981\u5173\u6ce8\u7684\u5c31\u662f\u8282\u70b9\u4e0b\u7684\u6570\u636e,\u5c24\u5176\u662fbndbox\u4e0b\u7684\u6570\u636e.xmin,ymin\u6784\u6210\u4e86boundingbox\u7684\u5de6\u4e0a\u89d2,xmax,ymax\u6784\u6210\u4e86boundingbox\u7684\u53f3\u4e0b\u89d2\uff0c\u4e5f\u5c31\u662f\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u4f4d\u7f6e\u4fe1\u606f ImageSets\u5305\u542b\u4ee5\u4e0b4\u4e2a\u6587\u4ef6\u5939\uff1a Action\u4e0b\u5b58\u653e\u7684\u662f\u4eba\u7684\u52a8\u4f5c\uff08\u4f8b\u5982running\u3001jumping\u7b49\u7b49\uff09 Layout\u4e0b\u5b58\u653e\u7684\u662f\u5177\u6709\u4eba\u4f53\u90e8\u4f4d\u7684\u6570\u636e\uff08\u4eba\u7684head\u3001hand\u3001feet\u7b49\u7b49\uff09 Segmentation\u4e0b\u5b58\u653e\u7684\u662f\u53ef\u7528\u4e8e\u5206\u5272\u7684\u6570\u636e\u3002 Main\u4e0b\u5b58\u653e\u7684\u662f\u56fe\u50cf\u7269\u4f53\u8bc6\u522b\u7684\u6570\u636e\uff0c\u603b\u5171\u5206\u4e3a20\u7c7b\uff0c\u8fd9\u662f\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\u7684\u91cd\u70b9\u3002","title":"2.1 PASCAL VOC\u6570\u636e\u96c6"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#22-ms-coco","text":"MS COCO\u7684\u5168\u79f0\u662fMicrosoft Common Objects in Context\uff0c\u5fae\u8f6f\u4e8e2014\u5e74\u51fa\u8d44\u6807\u6ce8\u7684Microsoft COCO\u6570\u636e\u96c6\uff0c\u4e0eImageNet\u7ade\u8d5b\u4e00\u6837\uff0c\u88ab\u89c6\u4e3a\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u6700\u53d7\u5173\u6ce8\u548c\u6700\u6743\u5a01\u7684\u6bd4\u8d5b\u4e4b\u4e00\u3002 COCO\u6570\u636e\u96c6\u662f\u4e00\u4e2a\u5927\u578b\u7684\u3001\u4e30\u5bcc\u7684\u7269\u4f53\u68c0\u6d4b\uff0c\u5206\u5272\u548c\u5b57\u5e55\u6570\u636e\u96c6\u3002\u8fd9\u4e2a\u6570\u636e\u96c6\u4ee5\u573a\u666f\u7406\u89e3\u4e3a\u76ee\u6807\uff0c\u4e3b\u8981\u4ece\u590d\u6742\u7684\u65e5\u5e38\u573a\u666f\u4e2d\u622a\u53d6\uff0c\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u901a\u8fc7\u7cbe\u786e\u7684\u5206\u5272\u8fdb\u884c\u4f4d\u7f6e\u7684\u6807\u5b9a\u3002\u56fe\u50cf\u5305\u62ec91\u7c7b\u76ee\u6807\uff0c328,000\u5f71\u50cf\u548c2,500,000\u4e2alabel\u3002\u76ee\u524d\u4e3a\u6b62\u76ee\u6807\u68c0\u6d4b\u7684\u6700\u5927\u6570\u636e\u96c6\uff0c\u63d0\u4f9b\u7684\u7c7b\u522b\u670980 \u7c7b\uff0c\u6709\u8d85\u8fc733 \u4e07\u5f20\u56fe\u7247\uff0c\u5176\u4e2d20 \u4e07\u5f20\u6709\u6807\u6ce8\uff0c\u6574\u4e2a\u6570\u636e\u96c6\u4e2d\u4e2a\u4f53\u7684\u6570\u76ee\u8d85\u8fc7150 \u4e07\u4e2a\u3002 \u56fe\u50cf\u793a\u4f8b\uff1a coco\u6570\u636e\u96c6\u7684\u6807\u7b7e\u6587\u4ef6\u6807\u8bb0\u4e86\u6bcf\u4e2asegmentation+bounding box\u7684\u7cbe\u786e\u5750\u6807\uff0c\u5176\u7cbe\u5ea6\u5747\u4e3a\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\u4e00\u4e2a\u76ee\u6807\u7684\u6807\u7b7e\u793a\u610f\u5982\u4e0b\uff1a {\"segmentation\":[[392.87, 275.77, 402.24, 284.2, 382.54, 342.36, 375.99, 356.43, 372.23, 357.37, 372.23, 397.7, 383.48, 419.27,407.87, 439.91, 427.57, 389.25, 447.26, 346.11, 447.26, 328.29, 468.84, 290.77,472.59, 266.38], [429.44,465.23, 453.83, 473.67, 636.73, 474.61, 636.73, 392.07, 571.07, 364.88, 546.69,363.0]], \"area\": 28458.996150000003, \"iscrowd\": 0,\"image_id\": 503837, \"bbox\": [372.23, 266.38, 264.5,208.23] , \"category_id\": 4, \"id\": 151109},","title":"2.2 MS COCO\u6570\u636e\u96c6"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#3","text":"","title":"3.\u5e38\u7528\u7684\u8bc4\u4ef7\u6307\u6807"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#31-iou","text":"\u5728\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\uff0cIoU\uff08intersection over union\uff0c\u4ea4\u5e76\u6bd4\uff09\u662f\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7528\u6765\u8bc4\u4ef72\u4e2a\u77e9\u5f62\u6846\u4e4b\u95f4\u76f8\u4f3c\u5ea6\u7684\u6307\u6807\uff1a IoU = \u4e24\u4e2a\u77e9\u5f62\u6846\u76f8\u4ea4\u7684\u9762\u79ef / \u4e24\u4e2a\u77e9\u5f62\u6846\u76f8\u5e76\u7684\u9762\u79ef \uff0c \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u770b\u4e0b\u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\u7684\u5e94\u7528\uff1a \u5176\u4e2d\u4e0a\u56fe\u84dd\u8272\u6846\u6846\u4e3a\u68c0\u6d4b\u7ed3\u679c\uff0c\u7ea2\u8272\u6846\u6846\u4e3a\u771f\u5b9e\u6807\u6ce8\u3002 \u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u9884\u6d4b\u7ed3\u679c\u4e0e\u771f\u5b9e\u7ed3\u679c\u4e4b\u95f4\u7684\u4ea4\u5e76\u6bd4\u6765\u8861\u91cf\u4e24\u8005\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u5bf9\u4e8e\u68c0\u6d4b\u6846\u7684\u5224\u5b9a\u90fd\u4f1a\u5b58\u5728\u4e00\u4e2a\u9608\u503c\uff0c\u4e5f\u5c31\u662f IoU \u7684\u9608\u503c\uff0c\u4e00\u822c\u53ef\u4ee5\u8bbe\u7f6e\u5f53 IoU \u7684\u503c\u5927\u4e8e 0.5 \u7684\u65f6\u5019\uff0c\u5219\u53ef\u8ba4\u4e3a\u68c0\u6d4b\u5230\u76ee\u6807\u7269\u4f53\u3002 \u5b9e\u73b0\u65b9\u6cd5\uff1a import numpy as np # \u5b9a\u4e49\u65b9\u6cd5\u8ba1\u7b97IOU def Iou ( box1 , box2 ): # \u4f7f\u7528\u6781\u5750\u6807\u5f62\u5f0f\u8868\u793a\uff1a\u76f4\u63a5\u83b7\u53d6\u4e24\u4e2abbox\u7684\u5750\u6807 # \u83b7\u53d6\u4e24\u4e2a\u6846\u7684\u5de6\u4e0a\u89d2\u5750\u6807\u548c\u53f3\u4e0b\u89d2\u5750\u6807 xmin1 , ymin1 , xmax1 , ymax1 = box1 xmin2 , ymin2 , xmax2 , ymax2 = box2 # \u83b7\u53d6\u77e9\u5f62\u6846\u4ea4\u96c6\u5bf9\u5e94\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u5750\u6807\uff08intersection\uff09 xx1 = np . max ([ xmin1 , xmin2 ]) yy1 = np . max ([ ymin1 , ymin2 ]) xx2 = np . min ([ xmax1 , xmax2 ]) yy2 = np . min ([ ymax1 , ymax2 ]) # \u8ba1\u7b97\u4e24\u4e2a\u77e9\u5f62\u6846\u9762\u79ef area1 = ( xmax1 - xmin1 ) * ( ymax1 - ymin1 ) area2 = ( xmax2 - xmin2 ) * ( ymax2 - ymin2 ) #\u8ba1\u7b97\u4ea4\u96c6\u9762\u79ef inter_area = ( np . max ([ 0 , xx2 - xx1 ])) * ( np . max ([ 0 , yy2 - yy1 ])) #\u8ba1\u7b97\u4ea4\u5e76\u6bd4 iou = inter_area / ( area1 + area2 - inter_area ) return iou \u5047\u8bbe\u6211\u4eec\u68c0\u6d4b\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff0c\u5e76\u5c55\u793a\u5728\u56fe\u50cf\u4e0a\uff1a # \u771f\u5b9e\u6846\uff08\u84dd\uff09\u4e0e\u9884\u6d4b\u6846\uff08\u7ea2\uff09 True_bbox , predict_bbox = [ 100 , 35 , 398 , 400 ], [ 40 , 150 , 355 , 398 ] \u8ba1\u7b97IoU\uff1a Iou ( True_bbox , predict_bbox ) \u7ed3\u679c\u4e3a\uff1a 0.5114435907762924","title":"3.1 IOU"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#32-mapmean-average-precision","text":"\u76ee\u6807\u68c0\u6d4b\u95ee\u9898\u4e2d\u7684\u6bcf\u4e2a\u56fe\u7247\u90fd\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u4e0d\u540c\u7c7b\u522b\u7684\u7269\u4f53\uff0c\u9700\u8981\u8bc4\u4f30\u6a21\u578b\u7684\u7269\u4f53\u5206\u7c7b\u548c\u5b9a\u4f4d\u6027\u80fd\u3002\u56e0\u6b64\uff0c\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u7684\u6807\u51c6\u6307\u6807precision\u4e0d\u80fd\u76f4\u63a5\u5e94\u7528\u4e8e\u6b64\u3002 \u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\uff0cmAP\u662f\u4e3b\u8981\u7684\u8861\u91cf\u6307\u6807\u3002 mAP\u662f\u591a\u4e2a\u5206\u7c7b\u4efb\u52a1\u7684AP\u7684\u5e73\u5747\u503c\uff0c\u800cAP\uff08average precision\uff09\u662fPR\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff0c\u6240\u4ee5\u5728\u4ecb\u7ecdmAP\u4e4b\u524d\u6211\u4eec\u8981\u5148\u5f97\u5230PR\u66f2\u7ebf\u3002 TP\u3001FP\u3001FN\u3001TN True Positive (TP): IoU> ( \u4e00\u822c\u53d6 0.5 ) \u7684\u68c0\u6d4b\u6846\u6570\u91cf\uff08\u540c\u4e00 Ground Truth \u53ea\u8ba1\u7b97\u4e00\u6b21\uff09 False Positive (FP): IoU<= \u7684\u68c0\u6d4b\u6846\u6570\u91cf\uff0c\u6216\u8005\u662f\u68c0\u6d4b\u5230\u540c\u4e00\u4e2a GT \u7684\u591a\u4f59\u68c0\u6d4b\u6846\u7684\u6570\u91cf False Negative (FN): \u6ca1\u6709\u68c0\u6d4b\u5230\u7684 GT \u7684\u6570\u91cf True Negative (TN): \u5728 mAP \u8bc4\u4ef7\u6307\u6807\u4e2d\u4e0d\u4f1a\u4f7f\u7528\u5230 \u67e5\u51c6\u7387\u3001\u67e5\u5168\u7387 \u67e5\u51c6\u7387\uff08Precision\uff09: TP/(TP + FP) \u67e5\u5168\u7387\uff08Recall\uff09: TP/(TP + FN) \u4e8c\u8005\u7ed8\u5236\u7684\u66f2\u7ebf\u79f0\u4e3a P-R \u66f2\u7ebf \u5148\u5b9a\u4e49\u4e24\u4e2a\u516c\u5f0f\uff0c\u4e00\u4e2a\u662f Precision\uff0c\u4e00\u4e2a\u662f Recall\uff0c\u4e0e\u4e0a\u9762\u7684\u516c\u5f0f\u76f8\u540c\uff0c\u6269\u5c55\u5f00\u6765\uff0c\u7528\u53e6\u5916\u4e00\u79cd\u5f62\u5f0f\u8fdb\u884c\u5c55\u793a\uff0c\u5176\u4e2d all detctions \u4ee3\u8868\u6240\u6709\u9884\u6d4b\u6846\u7684\u6570\u91cf\uff0c all ground truths \u4ee3\u8868\u6240\u6709 GT \u7684\u6570\u91cf\u3002 AP \u662f\u8ba1\u7b97\u67d0\u4e00\u7c7b P-R \u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff0cmAP \u5219\u662f\u8ba1\u7b97\u6240\u6709\u7c7b\u522b P-R \u66f2\u7ebf\u4e0b\u9762\u79ef\u7684\u5e73\u5747\u503c\u3002 \u5047\u8bbe\u6211\u4eec\u6709 7 \u5f20\u56fe\u7247\uff08Images1-Image7\uff09\uff0c\u8fd9\u4e9b\u56fe\u7247\u6709 15 \u4e2a\u76ee\u6807\uff08\u7eff\u8272\u7684\u6846\uff0cGT \u7684\u6570\u91cf\uff0c\u4e0a\u6587\u63d0\u53ca\u7684 all ground truths \uff09\u4ee5\u53ca 24 \u4e2a\u9884\u6d4b\u8fb9\u6846\uff08\u7ea2\u8272\u7684\u6846\uff0cA-Y \u7f16\u53f7\u8868\u793a\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u7f6e\u4fe1\u5ea6\u503c\uff09\uff1a \u6839\u636e\u4e0a\u56fe\u4ee5\u53ca\u8bf4\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u4ee5\u4e0b\u8868\u683c\uff0c\u5176\u4e2d Images \u4ee3\u8868\u56fe\u7247\u7684\u7f16\u53f7\uff0cDetections \u4ee3\u8868\u9884\u6d4b\u8fb9\u6846\u7684\u7f16\u53f7\uff0cConfidences \u4ee3\u8868\u9884\u6d4b\u8fb9\u6846\u7684\u7f6e\u4fe1\u5ea6\uff0cTP or FP \u4ee3\u8868\u9884\u6d4b\u7684\u8fb9\u6846\u662f\u6807\u8bb0\u4e3a TP \u8fd8\u662f FP\uff08\u8ba4\u4e3a\u9884\u6d4b\u8fb9\u6846\u4e0e GT \u7684 IOU \u503c\u5927\u4e8e\u7b49\u4e8e 0.3 \u5c31\u6807\u8bb0\u4e3a TP\uff1b\u82e5\u4e00\u4e2a GT \u6709\u591a\u4e2a\u9884\u6d4b\u8fb9\u6846\uff0c\u5219\u8ba4\u4e3a IOU \u6700\u5927\u4e14\u5927\u4e8e\u7b49\u4e8e 0.3 \u7684\u9884\u6d4b\u6846\u6807\u8bb0\u4e3a TP\uff0c\u5176\u4ed6\u7684\u6807\u8bb0\u4e3a FP\uff0c\u5373\u4e00\u4e2a GT \u53ea\u80fd\u6709\u4e00\u4e2a\u9884\u6d4b\u6846\u6807\u8bb0\u4e3a TP\uff09\uff0c\u8fd9\u91cc\u7684 0.3 \u662f\u968f\u673a\u53d6\u7684\u4e00\u4e2a\u503c\u3002 \u901a\u8fc7\u4e0a\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed8\u5236\u51fa P-R \u66f2\u7ebf\uff08\u56e0\u4e3a AP \u5c31\u662f P-R \u66f2\u7ebf\u4e0b\u9762\u7684\u9762\u79ef\uff09\uff0c\u4f46\u662f\u5728\u6b64\u4e4b\u524d\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u51fa P-R \u66f2\u7ebf\u4e0a\u5404\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u6839\u636e\u7f6e\u4fe1\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u6240\u6709\u7684\u9884\u6d4b\u6846\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97 Precision \u548c Recall \u7684\u503c\uff0c\u89c1\u4e0b\u8868\u3002\uff08\u9700\u8981\u8bb0\u4f4f\u4e00\u4e2a\u53eb\u7d2f\u52a0\u7684\u6982\u5ff5\uff0c\u5c31\u662f\u4e0b\u56fe\u7684 ACC TP \u548c ACC FP\uff09 \u6807\u53f7\u4e3a 1 \u7684 Precision \u548c Recall \u7684\u8ba1\u7b97\u65b9\u5f0f\uff1aPrecision=TP/(TP+FP)=1/(1+0)=1\uff0cRecall=TP/(TP+FN)=TP/( all ground truths )=1/15=0.0666 \uff08 all ground truths \u4e0a\u9762\u6709\u5b9a\u4e49\u8fc7\u4e86 \uff09 \u6807\u53f7 2\uff1aPrecision=TP/(TP+FP)=1/(1+1)=0.5\uff0cRecall=TP/(TP+FN)=TP/( all ground truths )=1/15=0.0666 \u6807\u53f7 3\uff1aPrecision=TP/(TP+FP)=2/(2+1)=0.6666\uff0cRecall=TP/(TP+FN)=TP/( all ground truths )=2/15=0.1333 \u5176\u4ed6\u7684\u4f9d\u6b21\u7c7b\u63a8 \u7136\u540e\u5c31\u53ef\u4ee5\u7ed8\u5236\u51fa P-R \u66f2\u7ebf \u5f97\u5230 P-R \u66f2\u7ebf\u5c31\u53ef\u4ee5\u8ba1\u7b97 AP\uff08P-R \u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff09\uff0c\u8981\u8ba1\u7b97 P-R \u4e0b\u65b9\u7684\u9762\u79ef\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u5728VOC2010\u4ee5\u524d\uff0c\u53ea\u9700\u8981\u9009\u53d6\u5f53Recall >= 0, 0.1, 0.2, ..., 1\u517111\u4e2a\u70b9\u65f6\u7684Precision\u6700\u5927\u503c\uff0c\u7136\u540eAP\u5c31\u662f\u8fd911\u4e2aPrecision\u7684\u5e73\u5747\u503c\uff0c\u53d6 11 \u4e2a\u70b9 [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1] \u7684\u63d2\u503c\u6240\u5f97 \u5f97\u5230\u4e00\u4e2a\u7c7b\u522b\u7684 AP \u7ed3\u679c\u5982\u4e0b\uff1a \u8981\u8ba1\u7b97 mAP\uff0c\u5c31\u628a\u6240\u6709\u7c7b\u522b\u7684 AP \u8ba1\u7b97\u51fa\u6765\uff0c\u7136\u540e\u6c42\u53d6\u5e73\u5747\u5373\u53ef\u3002 \u5728VOC2010\u53ca\u4ee5\u540e\uff0c\u9700\u8981\u9488\u5bf9\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684Recall\u503c\uff08\u5305\u62ec0\u548c1\uff09\uff0c\u9009\u53d6\u5176\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e9bRecall\u503c\u65f6\u7684Precision\u6700\u5927\u503c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7136\u540e\u8ba1\u7b97PR\u66f2\u7ebf\u4e0b\u9762\u79ef\u4f5c\u4e3aAP\u503c\uff1a \u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a","title":"3.2 mAP\uff08Mean Average Precision\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#4nms","text":"\u975e\u6781\u5927\u503c\u6291\u5236\uff08Non-Maximum Suppression\uff0cNMS\uff09\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f\u6291\u5236\u4e0d\u662f\u6781\u5927\u503c\u7684\u5143\u7d20\u3002\u4f8b\u5982\u5728\u884c\u4eba\u68c0\u6d4b\u4e2d\uff0c\u6ed1\u52a8\u7a97\u53e3\u7ecf\u63d0\u53d6\u7279\u5f81\uff0c\u7ecf\u5206\u7c7b\u5668\u5206\u7c7b\u8bc6\u522b\u540e\uff0c\u6bcf\u4e2a\u7a97\u53e3\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u5206\u6570\u3002\u4f46\u662f\u6ed1\u52a8\u7a97\u53e3\u4f1a\u5bfc\u81f4\u5f88\u591a\u7a97\u53e3\u4e0e\u5176\u4ed6\u7a97\u53e3\u5b58\u5728\u5305\u542b\u6216\u8005\u5927\u90e8\u5206\u4ea4\u53c9\u7684\u60c5\u51b5\u3002\u8fd9\u65f6\u5c31\u9700\u8981\u7528\u5230NMS\u6765\u9009\u53d6\u90a3\u4e9b\u90bb\u57df\u91cc\u5206\u6570\u6700\u9ad8\uff08\u662f\u884c\u4eba\u7684\u6982\u7387\u6700\u5927\uff09\uff0c\u5e76\u4e14\u6291\u5236\u90a3\u4e9b\u5206\u6570\u4f4e\u7684\u7a97\u53e3\u3002 NMS\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u6709\u7740\u975e\u5e38\u91cd\u8981\u7684\u5e94\u7528\uff0c\u5982\u89c6\u9891\u76ee\u6807\u8ddf\u8e2a\u3001\u6570\u636e\u6316\u6398\u30013D\u91cd\u5efa\u3001\u76ee\u6807\u8bc6\u522b\u4ee5\u53ca\u7eb9\u7406\u5206\u6790\u7b49 \u3002 \u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\uff0cNMS\u7684\u76ee\u7684\u5c31\u662f\u8981\u53bb\u9664\u5197\u4f59\u7684\u68c0\u6d4b\u6846,\u4fdd\u7559\u6700\u597d\u7684\u4e00\u4e2a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a NMS\u7684\u539f\u7406\u662f\u5bf9\u4e8e\u9884\u6d4b\u6846\u7684\u5217\u8868B\u53ca\u5176\u5bf9\u5e94\u7684\u7f6e\u4fe1\u5ea6S,\u9009\u62e9\u5177\u6709\u6700\u5927score\u7684\u68c0\u6d4b\u6846M,\u5c06\u5176\u4eceB\u96c6\u5408\u4e2d\u79fb\u9664\u5e76\u52a0\u5165\u5230\u6700\u7ec8\u7684\u68c0\u6d4b\u7ed3\u679cD\u4e2d.\u901a\u5e38\u5c06B\u4e2d\u5269\u4f59\u68c0\u6d4b\u6846\u4e2d\u4e0eM\u7684IoU\u5927\u4e8e\u9608\u503cNt\u7684\u6846\u4eceB\u4e2d\u79fb\u9664.\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b,\u76f4\u5230B\u4e3a\u7a7a\u3002 \u4f7f\u7528\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u9996\u5148\u662f\u68c0\u6d4b\u51fa\u4e00\u7cfb\u5217\u7684\u68c0\u6d4b\u6846 \u5c06\u68c0\u6d4b\u6846\u6309\u7167\u7c7b\u522b\u8fdb\u884c\u5206\u7c7b \u5bf9\u540c\u4e00\u7c7b\u522b\u7684\u68c0\u6d4b\u6846\u5e94\u7528NMS\u83b7\u53d6\u6700\u7ec8\u7684\u68c0\u6d4b\u7ed3\u679c \u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u770b\u4e9bNMS\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5047\u8bbe\u5b9a\u4f4d\u8f66\u8f86\uff0c\u7b97\u6cd5\u5c31\u627e\u51fa\u4e86\u4e00\u7cfb\u5217\u7684\u77e9\u5f62\u6846\uff0c\u6211\u4eec\u9700\u8981\u5224\u522b\u54ea\u4e9b\u77e9\u5f62\u6846\u662f\u6ca1\u7528\u7684\uff0c\u9700\u8981\u4f7f\u7528NMS\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u5047\u8bbe\u73b0\u5728\u68c0\u6d4b\u7a97\u53e3\u6709\uff1aA\u3001B\u3001C\u3001D\u3001E 5\u4e2a\u5019\u9009\u6846\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u8fed\u4ee3\u8ba1\u7b97\uff1a \u7b2c\u4e00\u8f6e\uff1a\u56e0\u4e3aB\u662f\u5f97\u5206\u6700\u9ad8\u7684\uff0c\u4e0eB\u7684IoU\uff1e0.5\u5220\u9664\u3002A\uff0cCDE\u4e2d\u73b0\u5728\u4e0eB\u8ba1\u7b97IoU\uff0cDE\u7ed3\u679c\uff1e0.5\uff0c\u5254\u9664DE\uff0cB\u4f5c\u4e3a\u4e00\u4e2a\u9884\u6d4b\u7ed3\u679c\uff0c\u6709\u4e2a\u68c0\u6d4b\u6846\u7559\u4e0bB\uff0c\u653e\u5165\u96c6\u5408 \u7b2c\u4e8c\u8f6e\uff1aA\u7684\u5f97\u5206\u6700\u9ad8\uff0c\u4e0eA\u8ba1\u7b97IoU\uff0cC\u7684\u7ed3\u679c\uff1e0.5\uff0c\u5254\u9664C\uff0cA\u4f5c\u4e3a\u4e00\u4e2a\u7ed3\u679c \u6700\u7ec8\u7ed3\u679c\u4e3a\u5728\u8fd9\u4e2a5\u4e2a\u4e2d\u68c0\u6d4b\u51fa\u4e86\u4e24\u4e2a\u76ee\u6807\u4e3aA\u548cB\u3002 \u5355\u7c7b\u522b\u7684NMS\u7684\u5b9e\u73b0\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a import numpy as np def nms ( bboxes , confidence_score , threshold ): \"\"\"\u975e\u6781\u5927\u6291\u5236\u8fc7\u7a0b :param bboxes: \u540c\u7c7b\u522b\u5019\u9009\u6846\u5750\u6807 :param confidence: \u540c\u7c7b\u522b\u5019\u9009\u6846\u5206\u6570 :param threshold: iou\u9608\u503c :return: \"\"\" # 1\u3001\u5f3a\u8f6c\u6570\u7ec4\uff0c\u5e76\u53d6\u51fa\u6bcf\u4e2a\u6846\u5de6\u4e0a\u89d2\u5750\u6807\u548c\u53f3\u4e0b\u89d2\u5750\u6807 bboxes = np . array ( bboxes ) score = np . array ( confidence_score ) # \u53d6\u51fan\u4e2a\u7684\u6781\u5750\u6807\u70b9\uff08\u5de6\u4e0a\u89d2\u5750\u6807\u548c\u53f3\u4e0b\u89d2\u5750\u6807\uff09 x1 = bboxes [:, 0 ] y1 = bboxes [:, 1 ] x2 = bboxes [:, 2 ] y2 = bboxes [:, 3 ] # \u8ba1\u7b97\u6bcf\u4e2a\u6846\u7684\u9762\u79ef areas = ( x2 - x1 ) * ( y2 - y1 ) # 2\u3001\u5bf9\u5019\u9009\u6846\u8fdb\u884cNMS\u7b5b\u9009 # \u8fd4\u56de\u7684\u6846\u5750\u6807\u548c\u5206\u6570 picked_boxes = [] picked_score = [] # \u5bf9\u7f6e\u4fe1\u5ea6\u8fdb\u884c\u6392\u5e8f, \u83b7\u53d6\u6392\u5e8f\u540e\u7684\u4e0b\u6807\u5e8f\u53f7, argsort\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f order = np . argsort ( score ) while order . size > 0 : # \u5c06\u5f53\u524d\u7f6e\u4fe1\u5ea6\u6700\u5927\u7684\u6846\u52a0\u5165\u8fd4\u56de\u503c\u5217\u8868\u4e2d index = order [ - 1 ] #\u4fdd\u7559\u8be5\u7c7b\u5269\u4f59box\u4e2d\u5f97\u5206\u6700\u9ad8\u7684\u4e00\u4e2a picked_boxes . append ( bboxes [ index ]) picked_score . append ( confidence_score [ index ]) # \u8ba1\u7b97\u4ea4\u5e76\u6bd4 # \u83b7\u53d6\u5f53\u524d\u7f6e\u4fe1\u5ea6\u6700\u5927\u7684\u5019\u9009\u6846\u4e0e\u5176\u4ed6\u4efb\u610f\u5019\u9009\u6846\u7684\u76f8\u4ea4\u9762\u79ef x11 = np . maximum ( x1 [ index ], x1 [ order [: - 1 ]]) y11 = np . maximum ( y1 [ index ], y1 [ order [: - 1 ]]) x22 = np . minimum ( x2 [ index ], x2 [ order [: - 1 ]]) y22 = np . minimum ( y2 [ index ], y2 [ order [: - 1 ]]) # \u8ba1\u7b97\u4ea4\u96c6\u7684\u9762\u79ef,\u4e0d\u91cd\u53e0\u65f6\u9762\u79ef\u4e3a0 w = np . maximum ( 0.0 , x22 - x11 ) h = np . maximum ( 0.0 , y22 - y11 ) intersection = w * h # \u5229\u7528\u76f8\u4ea4\u7684\u9762\u79ef\u548c\u4e24\u4e2a\u6846\u81ea\u8eab\u7684\u9762\u79ef\u8ba1\u7b97\u6846\u7684\u4ea4\u5e76\u6bd4 ratio = intersection / ( areas [ index ] + areas [ order [: - 1 ]] - intersection ) # \u4fdd\u7559IoU\u5c0f\u4e8e\u9608\u503c\u7684box keep_boxes_indics = np . where ( ratio < threshold ) # \u4fdd\u7559\u5269\u4f59\u7684\u6846 order = order [ keep_boxes_indics ] # \u8fd4\u56deNMS\u540e\u7684\u6846\u53ca\u5206\u7c7b\u7ed3\u679c return picked_boxes , picked_score \u5047\u8bbe\u6709\u68c0\u6d4b\u7ed3\u679c\u5982\u4e0b\uff1a bounding = [( 187 , 82 , 337 , 317 ), ( 150 , 67 , 305 , 282 ), ( 246 , 121 , 368 , 304 )] confidence_score = [ 0.9 , 0.65 , 0.8 ] threshold = 0.3 picked_boxes , picked_score = nms ( bounding , confidence_score , threshold ) print ( '\u9608\u503cthreshold\u4e3a:' , threshold ) print ( 'NMS\u540e\u5f97\u5230\u7684bbox\u662f\uff1a' , picked_boxes ) print ( 'NMS\u540e\u5f97\u5230\u7684bbox\u7684confidences\u662f\uff1a' , picked_score ) \u8fd4\u56de\u7ed3\u679c\uff1a \u9608\u503cthreshold\u4e3a : 0.3 NMS\u540e\u5f97\u5230\u7684bbox\u662f \uff1a [ array ([ 187 , 82 , 337 , 317 ])] NMS\u540e\u5f97\u5230\u7684bbox\u7684confidences\u662f \uff1a [ 0.9 ]","title":"4.NMS\uff08\u975e\u6781\u5927\u503c\u6291\u5236\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/00-overview/#5","text":"\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e3b\u8981\u5206\u4e3atwo-stage\uff08\u4e24\u9636\u6bb5\uff09\u548cone-stage\uff08\u5355\u9636\u6bb5\uff09\u4e24\u7c7b\uff1a two-stage\u7684\u7b97\u6cd5 \u5148\u7531\u7b97\u6cd5\u751f\u6210\u4e00\u7cfb\u5217\u4f5c\u4e3a\u6837\u672c\u7684\u5019\u9009\u6846\uff0c\u518d\u901a\u8fc7\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u6837\u672c\u5206\u7c7b\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e3b\u8981\u901a\u8fc7\u4e00\u4e2a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6765\u5b8c\u6210\u76ee\u6807\u68c0\u6d4b\u8fc7\u7a0b\uff0c\u5176\u63d0\u53d6\u7684\u662fCNN\u5377\u79ef\u7279\u5f81\uff0c\u8fdb\u884c\u5019\u9009\u533a\u57df\u7684\u7b5b\u9009\u548c\u76ee\u6807\u68c0\u6d4b\u4e24\u90e8\u5206\u3002\u7f51\u7edc\u7684\u51c6\u786e\u5ea6\u9ad8\u3001\u901f\u5ea6\u76f8\u5bf9\u8f83\u6162\u3002 two-stages\u7b97\u6cd5\u7684\u4ee3\u8868\u662fRCNN\u7cfb\u5217\uff1aR-CNN\u5230Faster R-CNN\u7f51\u7edc One-stage\u7684\u7b97\u6cd5 \u76f4\u63a5\u901a\u8fc7\u4e3b\u5e72\u7f51\u7edc\u7ed9\u51fa\u76ee\u6807\u7684\u7c7b\u522b\u548c\u4f4d\u7f6e\u4fe1\u606f\uff0c\u6ca1\u6709\u4f7f\u7528\u5019\u9009\u533a\u57df\u7684\u7b5b\u9009\u7f51\u8def\uff0c\u8fd9\u79cd\u7b97\u6cd5\u901f\u5ea6\u5feb\uff0c\u4f46\u662f\u7cbe\u5ea6\u76f8\u5bf9Two-stage\u76ee\u6807\u68c0\u6d4b\u7f51\u7edc\u964d\u4f4e\u4e86\u5f88\u591a\u3002 one-stage\u7b97\u6cd5\u7684\u4ee3\u8868\u662f\uff1a YOLO\u7cfb\u5217\uff1aYOLOv1\u3001YOLOv2\u3001YOLOv3\u3001 SSD\u7b49 \u603b\u7ed3 \u4e86\u89e3\u76ee\u6807\u68c0\u6d4b\u7684\u4efb\u52a1 \u627e\u51fa\u56fe\u50cf\u4e2d\u6240\u6709\u611f\u5174\u8da3\u7684\u76ee\u6807\uff0c\u5e76\u786e\u5b9a\u5b83\u4eec\u7684\u7c7b\u522b\u548c\u4f4d\u7f6e \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u7684\u5e38\u7528\u6570\u636e\u96c6 PASCAL VOC\u6570\u636e\u96c6 \u548c MS COCO\u6570\u636e\u96c6 \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u7684\u8bc4\u4ef7\u6307\u6807 IOU\u548cmAP \u638c\u63e1\u975e\u6781\u5927\u503cNMS\u7b97\u6cd5\u7684\u5e94\u7528 \u8981\u53bb\u9664\u5197\u4f59\u7684\u68c0\u6d4b\u6846,\u4fdd\u7559\u6700\u597d\u7684\u4e00\u4e2a \u4e86\u89e3\u5e38\u7528\u7684\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u5206\u7c7b two-stage\uff08\u4e24\u9636\u6bb5\uff09\u548cone-stage\uff08\u5355\u9636\u6bb5\uff09","title":"5.\u76ee\u6807\u68c0\u6d4b\u65b9\u6cd5\u5206\u7c7b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/","text":"2.2 R-CNN\u7f51\u7edc\u57fa\u7840 \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3Overfeat\u6a21\u578b\u7684\u79fb\u52a8\u7a97\u53e3\u65b9\u6cd5 \u4e86\u89e3RCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u4e86\u89e3fastRCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u77e5\u9053\u591a\u4efb\u52a1\u635f\u5931 1.Overfeat\u6a21\u578b \u00b6 Overfeat\u65b9\u6cd5\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u548c\u795e\u7ecf\u7f51\u7edc\u6765\u68c0\u6d4b\u76ee\u6807\u3002\u6ed1\u52a8\u7a97\u53e3\u4f7f\u7528\u56fa\u5b9a\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u77e9\u5f62\u533a\u57df\uff0c\u5728\u56fe\u50cf\u4e0a\u201c\u6ed1\u52a8\u201d\uff0c\u5e76\u5c06\u626b\u63cf\u7ed3\u679c\u9001\u5165\u5230\u795e\u7ecf\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u3002 \u4f8b\u5982\u8981\u68c0\u6d4b\u6c7d\u8f66\uff0c\u5c31\u4f7f\u7528\u4e0b\u56fe\u4e2d\u7ea2\u8272\u6ed1\u52a8\u7a97\u53e3\u8fdb\u884c\u626b\u63cf\uff0c\u5c06\u6240\u6709\u7684\u626b\u63cf\u7ed3\u679c\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u6c7d\u8f66\u7684\u68c0\u6d4b\u7ed3\u679c\u3002 \u8fd9\u79cd\u65b9\u6cd5\u7c7b\u4f3c\u4e00\u79cd\u66b4\u529b\u7a77\u4e3e\u7684\u65b9\u5f0f\uff0c\u4f1a\u6d88\u8017\u5927\u91cf\u7684\u8ba1\u7b97\u529b\uff0c\u5e76\u4e14\u7531\u4e8e\u7a97\u53e3\u5927\u5c0f\u95ee\u9898\u53ef\u80fd\u4f1a\u9020\u6210\u6548\u679c\u4e0d\u51c6\u786e\u3002 2.RCNN\u6a21\u578b \u00b6 2014\u5e74\u63d0\u51faR-CNN\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u4e0d\u518d\u4f7f\u7528\u66b4\u529b\u7a77\u4e3e\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u4f7f\u7528\u5019\u9009\u533a\u57df\u65b9\u6cd5\uff08region proposal method\uff09\u521b\u5efa\u76ee\u6807\u68c0\u6d4b\u7684\u533a\u57df\u6765\u5b8c\u6210\u76ee\u6807\u68c0\u6d4b\u7684\u4efb\u52a1\uff0cR-CNN\u662f\u4ee5\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u4e3a\u57fa\u7840\u7684\u76ee\u6807\u68c0\u6d4b\u7684\u6a21\u578b \uff0c\u4ee5R-CNN\u4e3a\u57fa\u70b9\uff0c\u540e\u7eed\u7684Fast R-CNN\u3001Faster R-CNN\u6a21\u578b\u90fd\u5ef6\u7eed\u4e86\u8fd9\u79cd\u76ee\u6807\u68c0\u6d4b\u601d\u8def\u3002 2.1 \u7b97\u6cd5\u6d41\u7a0b \u00b6 RCNN\u7684\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6b65\u9aa4\u662f\uff1a \u5019\u9009\u533a\u57df\u751f\u6210 \uff1a\u4f7f\u7528\u9009\u62e9\u6027\u641c\u7d22\uff08Selective Search\uff09\u7684\u65b9\u6cd5\u627e\u51fa\u56fe\u7247\u4e2d\u53ef\u80fd\u5b58\u5728\u76ee\u6807\u7684\u4faf\u9009\u533a\u57df CNN\u7f51\u7edc\u63d0\u53d6\u7279\u5f81 \uff1a\u9009\u53d6\u9884\u8bad\u7ec3\u5377\u79ef\u795e\u7ecf\u7f51\u7f51\u7edc\uff08AlexNet\u6216VGG\uff09\u7528\u4e8e\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002 \u76ee\u6807\u5206\u7c7b \uff1a\u8bad\u7ec3\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u6765\u8fa8\u522b\u76ee\u6807\u7269\u4f53\u548c\u80cc\u666f\uff0c\u5bf9\u6bcf\u4e2a\u7c7b\u522b\uff0c\u90fd\u8981\u8bad\u7ec3\u4e00\u4e2a\u4e8c\u5143SVM\u3002 \u76ee\u6807\u5b9a\u4f4d \uff1a\u8bad\u7ec3\u4e00\u4e2a\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u4e3a\u6bcf\u4e2a\u8fa8\u8bc6\u5230\u7684\u7269\u4f53\u751f\u6210\u66f4\u7cbe\u786e\u7684\u8fb9\u754c\u6846\u3002 2.1.1 \u5019\u9009\u533a\u57df\u751f\u6210\u3010\u4e86\u89e3\u3011 \u00b6 \u5728**\u9009\u62e9\u6027\u641c\u7d22\uff08SelectiveSearch\uff0cSS\uff09\u4e2d**\uff0c\u4f7f\u7528\u8bed\u4e49\u5206\u5272\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u989c\u8272\u3001\u8fb9\u754c\u3001\u7eb9\u7406\u7b49\u4fe1\u606f\u4f5c\u4e3a\u5408\u5e76\u6761\u4ef6\uff0c\u91c7\u7528\u591a\u5c3a\u5ea6\u7684\u7efc\u5408\u65b9\u6cd5\uff0c\u5c06\u56fe\u50cf\u5728\u50cf\u7d20\u7ea7\u4e0a\u5212\u5206\u51fa\u4e00\u7cfb\u5217\u7684\u533a\u57df\uff0c\u8fd9\u4e9b\u533a\u57df\u8981\u8fdc\u8fdc\u5c11\u4e8e\u4f20\u7edf\u7684\u6ed1\u52a8\u7a97\u53e3\u7684\u7a77\u4e3e\u6cd5\u4ea7\u751f\u7684\u5019\u9009\u533a\u57df\u3002 SelectiveSearch\u5728\u4e00\u5f20\u56fe\u7247\u4e0a\u63d0\u53d6\u51fa\u6765\u7ea62000\u4e2a\u4faf\u9009\u533a\u57df\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u7684\u957f\u5bbd\u4e0d\u56fa\u5b9a \u3002 \u800c\u4f7f\u7528CNN\u63d0\u53d6\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\u5411\u91cf\uff0c\u9700\u8981\u63a5\u53d7\u56fa\u5b9a\u957f\u5ea6\u7684\u8f93\u5165\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u5019\u9009\u533a\u57df\u505a\u4e00\u4e9b\u5c3a\u5bf8\u4e0a\u7684\u4fee\u6539\u3002 2.1.2 CNN\u7f51\u7edc\u63d0\u53d6\u7279\u5f81 \u00b6 \u91c7\u7528\u9884\u8bad\u7ec3\u6a21\u578b(AlexNet\u6216VGG)\u5728\u751f\u6210\u7684\u5019\u9009\u533a\u57df\u4e0a\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5c06\u63d0\u53d6\u597d\u7684\u7279\u5f81\u4fdd\u5b58\u5728\u78c1\u76d8\u4e2d\uff0c\u7528\u4e8e\u540e\u7eed\u6b65\u9aa4\u7684\u5206\u7c7b\u548c\u56de\u5f52\u3002 1.\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u5165\u6570\u636e\u7684\u5c3a\u5bf8\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64\u5728\u5c06\u5019\u9009\u533a\u57df\u9001\u5165CNN\u7f51\u7edc\u4e2d\u65f6\uff0c\u9700\u8fdb\u884c\u88c1\u526a\u6216\u53d8\u5f62\u4e3a\u56fa\u5b9a\u7684\u5c3a\u5bf8\uff0c\u5728\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002 2.\u9884\u8bad\u7ec3\u6a21\u578b\u5728ImageNet\u6570\u636e\u96c6\u4e0a\u83b7\u5f97\uff0c\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\u662f1000\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u5c06\u5176\u6539\u4e3aN+1(N\u4e3a\u76ee\u6807\u7c7b\u522b\u7684\u6570\u76ee\uff0c\u4f8b\u5982VOC\u6570\u636e\u96c6\u4e2dN=20\uff0ccoco\u6570\u636e\u96c6\u4e2dN=80\uff0c1\u662f\u52a0\u4e00\u4e2a\u80cc\u666f)\u540e\uff0c\u8fdb\u884c\u5fae\u8c03\u5373\u53ef\u3002 3.\u5229\u7528\u5fae\u8c03\u540e\u7684CNN\u7f51\u7edc\uff0c\u63d0\u53d6\u6bcf\u4e00\u4e2a\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\uff0c\u83b7\u53d6\u4e00\u4e2a4096\u7ef4\u7684\u7279\u5f81\uff0c\u4e00\u5e45\u56fe\u50cf\u5c31\u662f2000x4096\u7ef4\u7279\u5f81\u5b58\u50a8\u5230\u78c1\u76d8\u4e2d\u3002 2.1.3 \u76ee\u6807\u5206\u7c7b\uff08SVM\uff09 \u00b6 \u5047\u8bbe\u6211\u4eec\u8981\u68c0\u6d4b\u732b\u72d7\u4e24\u4e2a\u7c7b\u522b\uff0c\u90a3\u6211\u4eec\u9700\u8981\u8bad\u7ec3\u732b\u548c\u72d7\u4e24\u4e2a\u4e0d\u540c\u7c7b\u522b\u7684SVM\u5206\u7c7b\u5668\uff0c\u7136\u540e\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u5206\u7c7b\u5668\u5bf9\u4e00\u5e45\u56fe\u50cf\u4e2d2000\u4e2a\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\u5411\u91cf\u5206\u522b\u5224\u65ad\u4e00\u6b21\uff0c\u8fd9\u6837\u5f97\u51fa[2000, 2]\u7684\u5f97\u5206\u77e9\u9635\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5bf9\u4e8eN\u4e2a\u7c7b\u522b\u7684\u68c0\u6d4b\u4efb\u52a1\uff0c\u9700\u8981\u8bad\u7ec3N\uff08\u76ee\u6807\u7c7b\u522b\u6570\u76ee\uff09\u4e2aSVM\u5206\u7c7b\u5668\uff0c\u5bf9\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\u5411\u91cf\uff084096\u7ef4\uff09\u8fdb\u884c\u4e8c\u5206\u7c7b\uff0c\u5224\u65ad\u5176\u662f\u67d0\u4e00\u7c7b\u522b\u7684\u76ee\u6807\uff0c\u8fd8\u662f\u80cc\u666f\u6765\u5b8c\u6210\u76ee\u6807\u5206\u7c7b\u3002 2.1.4 \u76ee\u6807\u5b9a\u4f4d \u00b6 \u901a\u8fc7\u9009\u62e9\u6027\u641c\u7d22\u83b7\u53d6\u7684\u76ee\u6807\u4f4d\u7f6e\u4e0d\u662f\u975e\u5e38\u7684\u51c6\u786e\uff0c\u5b9e\u9a8c\u8bc1\u660e\uff0c\u8bad\u7ec3\u4e00\u4e2a\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u5728\u7ed9\u5b9a\u7684\u5019\u9009\u533a\u57df\u7684\u7ed3\u679c\u4e0a\u53bb\u9884\u6d4b\u4e00\u4e2a\u65b0\u7684\u68c0\u6d4b\u7a97\u53e3\uff0c\u80fd\u591f\u83b7\u5f97\u66f4\u7cbe\u786e\u7684\u4f4d\u7f6e\u3002\u4fee\u6b63\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u901a\u8fc7\u8bad\u7ec3\u4e00\u4e2a\u56de\u5f52\u5668\u6765\u5bf9\u5019\u9009\u533a\u57df\u7684\u8303\u56f4\u8fdb\u884c\u4e00\u4e2a\u8c03\u6574\uff0c\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u6700\u5f00\u59cb\u53ea\u662f\u7528\u9009\u62e9\u6027\u641c\u7d22\u7684\u65b9\u6cd5\u7c97\u7565\u5f97\u5230\u7684\uff0c\u901a\u8fc7\u8c03\u6574\u4e4b\u540e\u5f97\u5230\u66f4\u7cbe\u786e\u7684\u4f4d\u7f6e\uff0c\u5982\u4e0b\u6240\u793a\uff1a 2.1.5 \u9884\u6d4b\u8fc7\u7a0b \u00b6 \u4f7f\u7528\u9009\u62e9\u6027\u641c\u7d22\u7684\u65b9\u6cd5\u4ece\u4e00\u5f20\u56fe\u7247\u4e2d\u63d0\u53d62000\u4e2a\u5019\u9009\u533a\u57df\uff0c\u5c06\u6bcf\u4e2a\u533a\u57df\u9001\u5165CNN\u7f51\u7edc\u4e2d\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u7136\u540e\u9001\u5165\u5230SVM\u4e2d\u8fdb\u884c\u5206\u7c7b\uff0c\u5e76\u4f7f\u7528\u5019\u9009\u6846\u56de\u5f52\u5668\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u5019\u9009\u533a\u57df\u7684\u4f4d\u7f6e\u3002 \u5019\u9009\u533a\u57df\u8f83\u591a\uff0c\u67092000\u4e2a\uff0c\u9700\u8981\u5254\u9664\u6389\u90e8\u5206\u68c0\u6d4b\u7ed3\u679c\u3002 \u9488\u5bf9\u6bcf\u4e2a\u7c7b\uff0c\u901a\u8fc7\u8ba1\u7b97IOU,\u91c7\u53d6\u975e\u6700\u5927\u503c\u6291\u5236NMS\u7684\u65b9\u6cd5\uff0c\u4fdd\u7559\u6bd4\u8f83\u597d\u7684\u68c0\u6d4b\u7ed3\u679c\u3002 2.2 \u7b97\u6cd5\u603b\u7ed3 \u00b6 1\u3001\u8bad\u7ec3\u9636\u6bb5\u591a\uff0c\u8bad\u7ec3\u8017\u65f6\uff1a \u5fae\u8c03CNN\u7f51\u7edc+\u8bad\u7ec3SVM+\u8bad\u7ec3\u8fb9\u6846\u56de\u5f52\u5668\u3002 2\u3001\u9884\u6d4b\u901f\u5ea6\u6162: \u4f7f\u7528GPU, VGG16\u6a21\u578b\u5904\u7406\u4e00\u5f20\u56fe\u50cf\u9700\u898147s \u3002 3\u3001\u5360\u7528\u78c1\u76d8\u7a7a\u95f4\u5927\uff1a5000\u5f20\u56fe\u50cf\u4ea7\u751f\u51e0\u767eG\u7684\u7279\u5f81\u6587\u4ef6\u3002 4\u3001\u6570\u636e\u7684\u5f62\u72b6\u53d8\u5316\uff1a\u5019\u9009\u533a\u57df\u8981\u7ecf\u8fc7\u7f29\u653e\u6765\u56fa\u5b9a\u5927\u5c0f\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u76ee\u6807\u7684\u4e0d\u53d8\u5f62 3. Fast RCNN\u6a21\u578b \u00b6 \u8003\u8651\u5230R-CNN\u5b58\u5728\u7684\u95ee\u9898\uff0c2015\u5e74\u63d0\u51fa\u4e86\u4e00\u4e2a\u6539\u5584\u6a21\u578b:Fast R-CNN\u3002 \u76f8\u6bd4\u4e8eR-CNN, Fast R-CNN\u4e3b\u8981\u5728\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u9762\u8fdb\u884c\u4e86\u6539\u8fdb\uff1a 1\u3001\u63d0\u9ad8\u8bad\u7ec3\u548c\u9884\u6d4b\u7684\u901f\u5ea6 R-CNN\u9996\u5148\u4ece\u6d4b\u8bd5\u56fe\u4e2d\u63d0\u53d62000\u4e2a\u5019\u9009\u533a\u57df\uff0c\u7136\u540e\u5c06\u8fd92000\u4e2a\u5019\u9009\u533a\u57df\u5206\u522b\u8f93\u5165\u5230\u9884\u8bad\u7ec3\u597d\u7684CNN\u4e2d\u63d0\u53d6\u7279\u5f81\u3002\u7531\u4e8e\u5019\u9009\u533a\u57df\u6709\u5927\u91cf\u7684\u91cd\u53e0\uff0c\u8fd9\u79cd\u63d0\u53d6\u7279\u5f81\u7684\u65b9\u6cd5\uff0c\u5c31\u4f1a\u91cd\u590d\u7684\u8ba1\u7b97\u91cd\u53e0\u533a\u57df\u7684\u7279\u5f81\u3002\u5728Fast-RCNN\u4e2d\uff0c\u5c06\u6574\u5f20\u56fe\u8f93\u5165\u5230CNN\u4e2d\u63d0\u53d6\u7279\u5f81\uff0c\u5c06\u5019\u9009\u533a\u57df\u6620\u5c04\u5230\u7279\u5f81\u56fe\u4e0a\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u5bf9\u56fe\u50cf\u533a\u57df\u8fdb\u884c\u91cd\u590d\u5904\u7406\uff0c\u63d0\u9ad8\u6548\u7387\u51cf\u5c11\u65f6\u95f4\u3002 2\u3001\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u4fdd\u5b58CNN\u7f51\u7edc\u63d0\u53d6\u7684\u7279\u5f81\u5411\u91cf RCNN\u4e2d\u9700\u8981\u5c06\u63d0\u53d6\u5230\u7684\u7279\u5f81\u4fdd\u5b58\u4e0b\u6765\uff0c\u7528\u4e8e\u4e3a\u6bcf\u4e2a\u7c7b\u8bad\u7ec3\u5355\u72ec\u7684SVM\u5206\u7c7b\u5668\u548c\u8fb9\u6846\u56de\u5f52\u5668\u3002\u5728Fast-RCNN\u4e2d\uff0c\u5c06\u7c7b\u522b\u5224\u65ad\u548c\u8fb9\u6846\u56de\u5f52\u7edf\u4e00\u4f7f\u7528CNN\u5b9e\u73b0\uff0c\u4e0d\u9700\u8981\u5728\u989d\u5916\u7684\u7a7a\u95f4\u5b58\u50a8\u7279\u5f81\u3002 3\u3001\u4e0d\u5728\u76f4\u63a5\u5bf9\u5019\u9009\u533a\u57df\u8fdb\u884c\u7f29\u653e RCNN\u4e2d\u9700\u8981\u5bf9\u5019\u9009\u533a\u57df\u8fdb\u884c\u7f29\u653e\u9001\u5165CNN\u4e2d\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5728Fast-RCNN\u4e2d\u4f7f\u7528ROIpooling\u7684\u65b9\u6cd5\u8fdb\u884c\u5c3a\u5bf8\u7684\u8c03\u6574\u3002 3.1 \u7b97\u6cd5\u6d41\u7a0b \u00b6 Fast_RCNN\u7684\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6b65\u9aa4\u662f\uff1a 1\u3001 \u5019\u9009\u533a\u57df\u751f\u6210 \uff1a\u4f7f\u7528\u9009\u62e9\u6027\u641c\u7d22\uff08Selective Search\uff09\u7684\u65b9\u6cd5\u627e\u51fa\u56fe\u7247\u4e2d\u53ef\u80fd\u5b58\u5728\u76ee\u6807\u7684\u4faf\u9009\u533a\u57df\uff0c\u53ea\u9700\u8981\u5019\u9009\u533a\u57df\u7684\u4f4d\u7f6e\u4fe1\u606f 2\u3001 CNN\u7f51\u7edc\u7279\u5f81\u63d0\u53d6 \uff1a\u5c06\u6574\u5f20\u56fe\u50cf\u8f93\u5165\u5230CNN\u7f51\u7edc\u4e2d\uff0c\u5f97\u5230\u6574\u526f\u56fe\u7684\u7279\u5f81\u56fe\uff0c\u5e76\u5c06\u4e0a\u4e00\u6b65\u83b7\u53d6\u7684\u5019\u9009\u533a\u57df\u4f4d\u7f6e\u4ece\u539f\u56fe\u6620\u5c04\u5230\u8be5\u7279\u5f81\u56fe\u4e0a 3\u3001 ROIPooling : \u5bf9\u4e8e\u6bcf\u4e2a\u7279\u5f81\u56fe\u4e0a\u5019\u9009\u6846\uff0cRoI pooling\u5c42\u4ece\u7279\u5f81\u56fe\u4e2d\u63d0\u53d6\u56fa\u5b9a\u957f\u5ea6\u7684\u7279\u5f81\u5411\u91cf\u6bcf\u4e2a\u7279\u5f81\u5411\u91cf\u88ab\u9001\u5165\u4e00\u7cfb\u5217\u5168\u8fde\u63a5\uff08fc\uff09\u5c42\u4e2d\u3002 4\u3001 \u76ee\u6807\u68c0\u6d4b \uff1a\u5206\u4e24\u90e8\u5206\u5b8c\u6210\uff0c\u4e00\u4e2a\u8f93\u51fa\u5404\u7c7b\u522b\u52a0\u4e0a1\u4e2a\u80cc\u666f\u7c7b\u522b\u7684Softmax\u6982\u7387\u4f30\u8ba1\uff0c\u53e6\u4e00\u4e2a\u4e3a\u5404\u7c7b\u522b\u7684\u6bcf\u4e00\u4e2a\u7c7b\u522b\u8f93\u51fa\u56db\u4e2a\u5b9e\u6570\u503c\uff0c\u6765\u786e\u5b9a\u76ee\u6807\u7684\u4f4d\u7f6e\u4fe1\u606f\u3002 3.1.1 \u5019\u9009\u533a\u57df\u751f\u6210\u3010\u4e86\u89e3\u3011 \u00b6 \u4e0eRCNN\u4e2d\u4e00\u6837\uff0c\u4e0d\u518d\u8d58\u8ff0 3.1.2 CNN\u7f51\u7edc\u7279\u5f81\u63d0\u53d6 \u00b6 \u4e0eRCNN\u4e2d\u4e00\u6837\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002 3.1.3 ROI Pooling \u00b6 \u5019\u9009\u533a\u57df\u4ece\u539f\u56fe\u6620\u5c04\u5230\u7279\u5f81\u56fe\u4e2d\u540e\uff0c\u8fdb\u884cROIpooling\u7684\u8ba1\u7b97\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a ROI Pooling\u5c42\u4f7f\u7528\u6700\u5927\u6c60\u5316\u5c06\u8f93\u5165\u7684\u7279\u5f81\u56fe\u4e2d\u7684\u4efb\u610f\u533a\u57df\uff08\u5019\u9009\u533a\u57df\u5bf9\u5e94\u7684\u533a\u57df\uff09\u5185\u7684\u7279\u5f81\u8f6c\u5316\u4e3a\u56fa\u5b9a\u7684\ud835\udc3b\u00d7\ud835\udc4a\u7684\u7279\u5f81\u56fe\uff0c\u5176\u4e2d\ud835\udc3b\u548c\ud835\udc4a\u662f\u8d85\u53c2\u6570\u3002 \u5bf9\u4e8e\u4efb\u610f\u8f93\u5165\u7684\u210e\u00d7\ud835\udc64\u7684\u5019\u9009\u533a\u57df\uff0c\u5c06\u5176\u5206\u5272\u4e3a\ud835\udc3b\u00d7\ud835\udc4a\u7684\u5b50\u7f51\u683c\uff0c\u6bcf\u4e2a\u5b50\u7f51\u683c\u7684\u5927\u5c0f\u4e3a\uff1a(h/H) x (w/W)\uff0c\u53d6\u6bcf\u4e2a\u5b50\u7f51\u683c\u4e2d\u7684\u6700\u5927\u503c\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5904\u7406\u3002 \u4f7f\u7528ROI Pooling\u5c42\u66ff\u6362\u9884\u8bad\u7ec3\u7f51\u7edc\u4e2d\u6700\u540e\u7684\u6c60\u5316\u5c42\uff0c\u5e76\u5c06\u5e76\u5c06\u8d85\u53c2\ud835\udc3b,\ud835\udc4a\u8bbe\u7f6e\u4e3a\u548c\u7f51\u7edc\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u517c\u5bb9\u7684\u503c\uff0c\u4f8b\u5982VGG16\uff0c\u8bbe\ud835\udc3b=\ud835\udc4a=7\u3002 3.1.4 \u76ee\u6807\u5206\u7c7b\u548c\u56de\u5f52 \u00b6 \u539f\u7f51\u7edc\u7684\u6700\u540e\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u66ff\u6362\u4e3a\u4e24\u4e2a\u540c\u7ea7\u5c42:K+1\u4e2a\u7c7b\u522b\u7684SoftMax\u5206\u7c7b\u5c42\u548c\u8fb9\u6846\u7684\u56de\u5f52\u5c42\u3002 3.2 \u6a21\u578b\u8bad\u7ec3 \u00b6 R-CNN\u4e2d\u7684\u7279\u5f81\u63d0\u53d6\u548c\u68c0\u6d4b\u90e8\u5206\u662f\u5206\u5f00\u8fdb\u884c\u7684\uff0cFast R-CNN\u63d0\u51fa\u4e00\u4e2a\u9ad8\u6548\u7684\u8bad\u7ec3\u65b9\u6cd5\uff1a\u591a\u4efb\u52a1\u8bad\u7ec3 Fast R-CNN\u6709\u4e24\u79cd\u8f93\u51fa\uff1a \u4e00\u90e8\u5206\u8f93\u51fa\u5728K+1\u4e2a\u7c7b\u522b\u4e0a\u7684\u79bb\u6563\u6982\u7387\u5206\u5e03\uff08\u6bcf\u4e2a\u5019\u9009\u533a\u57df\uff09: $$ p=(p0,p1,...,pk) $$ \u3002\u901a\u5e38\uff0c\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\u7684K+1\u4e2a\u8f93\u51fa\u4e0a\u7684Softmax\u6765\u8ba1\u7b97\u6982\u7387\u503c\u3002 \u53e6\u4e00\u90e8\u5206\u8f93\u51fa\u5bf9\u4e8e\u7531K\u4e2a\u7c7b\u522b\u4e2d\u7684\u6bcf\u4e00\u4e2a\u68c0\u6d4b\u6846\u56de\u5f52\u504f\u79fb\uff0c t^{k}=(t_{x}^{k},t_{y}^{k},t_{w}^{k},t_{h}^{k}) t^{k}=(t_{x}^{k},t_{y}^{k},t_{w}^{k},t_{h}^{k}) \u3002\u5176\u4e2d t_k t_k \u6307\u5b9a\u76f8\u5bf9\u4e8e\u5019\u9009\u6846\u7684\u5c3a\u5ea6\u4e0d\u53d8\u8f6c\u6362\u548c\u5bf9\u6570\u7a7a\u95f4\u9ad8\u5ea6/\u5bbd\u5ea6\u79fb\u4f4d\u3002 \u5c06\u4e0a\u9762\u7684\u4e24\u4e2a\u4efb\u52a1\u7684\u635f\u5931\u51fd\u6570\u653e\u5728\u4e00\u8d77: \u8054\u5408\u8bad\u7ec3fast-RCNN\u7f51\u7edc\u3002\u5177\u4f53\u7684\u6211\u4eec\u5728\u540e\u7eed\u7ed9\u5927\u5bb6\u8fdb\u884c\u4ecb\u7ecd\u3002 3.3 \u6a21\u578b\u9884\u6d4b \u00b6 fastRCNN\u7684\u5de5\u4f5c\u6d41\u7a0b\u63cf\u8ff0\u5982\u4e0b\uff1a \u8f93\u5165\u56fe\u50cf\uff1a \u56fe\u50cf\u88ab\u9001\u5165\u5230\u5377\u79ef\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5c06\u901a\u8fc7\u9009\u62e9\u6027\u641c\u7d22\u83b7\u53d6\u7684\u5019\u9009\u533a\u57df\u6620\u5c04\u5230\u7279\u5f81\u56fe\u4e2d\uff1a \u5728\u7279\u5f81\u56fe\u4e0aRol\u4e2d\u5e94\u7528RoIPooling\uff0c\u83b7\u53d6\u5c3a\u5bf8\u76f8\u540c\u7684\u7279\u5f81\u5411\u91cf \u5c06\u8fd9\u4e9b\u533a\u57df\u4f20\u9012\u5230\u5168\u8fde\u63a5\u7684\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\uff0c\u5f97\u5230\u76ee\u6807\u68c0\u6d4b\u7684\u7ed3\u679c\u3002 3.4 \u6a21\u578b\u603b\u7ed3 \u00b6 Fast R-CNN\u662f\u5bf9R-CNN\u6a21\u578b\u7684\u4e00\u79cd\u6539\u8fdb\uff1a CNN\u7f51\u7edc\u4e0d\u518d\u5bf9\u6bcf\u4e2a\u5019\u9009\u533a\u57df\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u800c\u662f\u76f4\u63a5\u5bf9\u6574\u5f20\u56fe\u50cf\u8fdb\u884c\u51fa\u8def\uff0c\u8fd9\u6837\u51cf\u5c11\u4e86\u5f88\u591a\u91cd\u590d\u8ba1\u7b97\u3002 \u7528ROI pooling\u8fdb\u884c\u7279\u5f81\u7684\u5c3a\u5bf8\u53d8\u6362\uff0c\u6765\u6ee1\u8db3FC\u5168\u8fde\u63a5\u5c42\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5ea6\u7684\u8981\u6c42\u3002 \u5c06\u76ee\u6807\u7684\u56de\u5f52\u548c\u5206\u7c7b\u7edf\u4e00\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\uff0c\u4f7f\u7528FC+softmax\u8fdb\u884c\u76ee\u6807\u5206\u7c7b\uff0c\u4f7f\u7528FC Layer\u8fdb\u884c\u76ee\u6807\u6846\u7684\u56de\u5f52\u3002 \u5728Fast R-CNN\u4e2d\u4f7f\u7528\u7684\u76ee\u6807\u68c0\u6d4b\u8bc6\u522b\u7f51\u7edc\uff0c\u5728\u901f\u5ea6\u548c\u7cbe\u5ea6\u4e0a\u90fd\u6709\u4e86\u4e0d\u9519\u7684\u7ed3\u679c\u3002\u4e0d\u8db3\u7684\u662f\uff0c\u5176\u5019\u9009\u533a\u57df\u63d0\u53d6\u65b9\u6cd5\u8017\u65f6\u8f83\u957f\uff0c\u800c\u4e14\u548c\u76ee\u6807\u68c0\u6d4b\u7f51\u7edc\u662f\u5206\u79bb\u7684\uff0c\u5e76\u4e0d\u662f\u7aef\u5230\u7aef\u7684\uff0c\u57282016\u5e74\u53c8\u63d0\u51fa\u4e86Faster-RCNN\u6a21\u578b\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u7740\u91cd\u4ecb\u7ecdFaster-RCNN\u7f51\u7edc\u7684\u539f\u7406\u4e0e\u5b9e\u73b0\u3002 \u603b\u7ed3 \u4e86\u89e3Overfeat\u6a21\u578b\u7684\u79fb\u52a8\u7a97\u53e3\u65b9\u6cd5 \u6ed1\u52a8\u7a97\u53e3\u4f7f\u7528\u56fa\u5b9a\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u77e9\u5f62\u533a\u57df\uff0c\u53ef\u4ee5\u5728\u56fe\u50cf\u4e0a\u201c\u6ed1\u52a8\u201d\uff0c\u5e76\u5c06\u626b\u63cf\u9001\u5165\u5230\u795e\u7ecf\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u3002 \u4e86\u89e3RCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 R-CNN\u7f51\u7edc\u4f7f\u7528\u5019\u9009\u533a\u57df\u65b9\u6cd5\uff08region proposal method\uff09\uff0c\u5229\u7528CNN\u7f51\u7edc\u63d0\u53d6\u7279\u5f81\uff0cSVM\u5b8c\u6210\u5206\u7c7b\uff0c\u7ebf\u6027\u56de\u5f52\u8fdb\u884cbbox\u7684\u4fee\u6b63 \u4e86\u89e3fastRCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u5229\u7528CNN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5229\u7528SS\u751f\u6210\u5019\u9009\u533a\u57df\uff0c\u8fdb\u884c\u6620\u5c04\uff0c\u5e76\u4f7f\u7528ROIpooling\u8fdb\u884c\u7ef4\u5ea6\u8c03\u6574\uff0c\u6700\u540e\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52 \u77e5\u9053Fast-RCNN\u4e2d\u63d0\u51fa\u7684\u591a\u4efb\u52a1\u635f\u5931\uff1a\u5c06\u5206\u7c7b\u548c\u56de\u5f52\u7684\u635f\u5931\u51fd\u6570\u8054\u5408\u8bad\u7ec3\u7f51\u7edc","title":"2.2 R-CNN\u7f51\u7edc\u57fa\u7840"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#22-r-cnn","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3Overfeat\u6a21\u578b\u7684\u79fb\u52a8\u7a97\u53e3\u65b9\u6cd5 \u4e86\u89e3RCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u4e86\u89e3fastRCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u77e5\u9053\u591a\u4efb\u52a1\u635f\u5931","title":"2.2 R-CNN\u7f51\u7edc\u57fa\u7840"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#1overfeat","text":"Overfeat\u65b9\u6cd5\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u548c\u795e\u7ecf\u7f51\u7edc\u6765\u68c0\u6d4b\u76ee\u6807\u3002\u6ed1\u52a8\u7a97\u53e3\u4f7f\u7528\u56fa\u5b9a\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u77e9\u5f62\u533a\u57df\uff0c\u5728\u56fe\u50cf\u4e0a\u201c\u6ed1\u52a8\u201d\uff0c\u5e76\u5c06\u626b\u63cf\u7ed3\u679c\u9001\u5165\u5230\u795e\u7ecf\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u3002 \u4f8b\u5982\u8981\u68c0\u6d4b\u6c7d\u8f66\uff0c\u5c31\u4f7f\u7528\u4e0b\u56fe\u4e2d\u7ea2\u8272\u6ed1\u52a8\u7a97\u53e3\u8fdb\u884c\u626b\u63cf\uff0c\u5c06\u6240\u6709\u7684\u626b\u63cf\u7ed3\u679c\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u6c7d\u8f66\u7684\u68c0\u6d4b\u7ed3\u679c\u3002 \u8fd9\u79cd\u65b9\u6cd5\u7c7b\u4f3c\u4e00\u79cd\u66b4\u529b\u7a77\u4e3e\u7684\u65b9\u5f0f\uff0c\u4f1a\u6d88\u8017\u5927\u91cf\u7684\u8ba1\u7b97\u529b\uff0c\u5e76\u4e14\u7531\u4e8e\u7a97\u53e3\u5927\u5c0f\u95ee\u9898\u53ef\u80fd\u4f1a\u9020\u6210\u6548\u679c\u4e0d\u51c6\u786e\u3002","title":"1.Overfeat\u6a21\u578b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#2rcnn","text":"2014\u5e74\u63d0\u51faR-CNN\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u4e0d\u518d\u4f7f\u7528\u66b4\u529b\u7a77\u4e3e\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u4f7f\u7528\u5019\u9009\u533a\u57df\u65b9\u6cd5\uff08region proposal method\uff09\u521b\u5efa\u76ee\u6807\u68c0\u6d4b\u7684\u533a\u57df\u6765\u5b8c\u6210\u76ee\u6807\u68c0\u6d4b\u7684\u4efb\u52a1\uff0cR-CNN\u662f\u4ee5\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u4e3a\u57fa\u7840\u7684\u76ee\u6807\u68c0\u6d4b\u7684\u6a21\u578b \uff0c\u4ee5R-CNN\u4e3a\u57fa\u70b9\uff0c\u540e\u7eed\u7684Fast R-CNN\u3001Faster R-CNN\u6a21\u578b\u90fd\u5ef6\u7eed\u4e86\u8fd9\u79cd\u76ee\u6807\u68c0\u6d4b\u601d\u8def\u3002","title":"2.RCNN\u6a21\u578b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#21","text":"RCNN\u7684\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6b65\u9aa4\u662f\uff1a \u5019\u9009\u533a\u57df\u751f\u6210 \uff1a\u4f7f\u7528\u9009\u62e9\u6027\u641c\u7d22\uff08Selective Search\uff09\u7684\u65b9\u6cd5\u627e\u51fa\u56fe\u7247\u4e2d\u53ef\u80fd\u5b58\u5728\u76ee\u6807\u7684\u4faf\u9009\u533a\u57df CNN\u7f51\u7edc\u63d0\u53d6\u7279\u5f81 \uff1a\u9009\u53d6\u9884\u8bad\u7ec3\u5377\u79ef\u795e\u7ecf\u7f51\u7f51\u7edc\uff08AlexNet\u6216VGG\uff09\u7528\u4e8e\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002 \u76ee\u6807\u5206\u7c7b \uff1a\u8bad\u7ec3\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u6765\u8fa8\u522b\u76ee\u6807\u7269\u4f53\u548c\u80cc\u666f\uff0c\u5bf9\u6bcf\u4e2a\u7c7b\u522b\uff0c\u90fd\u8981\u8bad\u7ec3\u4e00\u4e2a\u4e8c\u5143SVM\u3002 \u76ee\u6807\u5b9a\u4f4d \uff1a\u8bad\u7ec3\u4e00\u4e2a\u7ebf\u6027\u56de\u5f52\u6a21\u578b\uff0c\u4e3a\u6bcf\u4e2a\u8fa8\u8bc6\u5230\u7684\u7269\u4f53\u751f\u6210\u66f4\u7cbe\u786e\u7684\u8fb9\u754c\u6846\u3002","title":"2.1 \u7b97\u6cd5\u6d41\u7a0b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#211","text":"\u5728**\u9009\u62e9\u6027\u641c\u7d22\uff08SelectiveSearch\uff0cSS\uff09\u4e2d**\uff0c\u4f7f\u7528\u8bed\u4e49\u5206\u5272\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u989c\u8272\u3001\u8fb9\u754c\u3001\u7eb9\u7406\u7b49\u4fe1\u606f\u4f5c\u4e3a\u5408\u5e76\u6761\u4ef6\uff0c\u91c7\u7528\u591a\u5c3a\u5ea6\u7684\u7efc\u5408\u65b9\u6cd5\uff0c\u5c06\u56fe\u50cf\u5728\u50cf\u7d20\u7ea7\u4e0a\u5212\u5206\u51fa\u4e00\u7cfb\u5217\u7684\u533a\u57df\uff0c\u8fd9\u4e9b\u533a\u57df\u8981\u8fdc\u8fdc\u5c11\u4e8e\u4f20\u7edf\u7684\u6ed1\u52a8\u7a97\u53e3\u7684\u7a77\u4e3e\u6cd5\u4ea7\u751f\u7684\u5019\u9009\u533a\u57df\u3002 SelectiveSearch\u5728\u4e00\u5f20\u56fe\u7247\u4e0a\u63d0\u53d6\u51fa\u6765\u7ea62000\u4e2a\u4faf\u9009\u533a\u57df\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u7684\u957f\u5bbd\u4e0d\u56fa\u5b9a \u3002 \u800c\u4f7f\u7528CNN\u63d0\u53d6\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\u5411\u91cf\uff0c\u9700\u8981\u63a5\u53d7\u56fa\u5b9a\u957f\u5ea6\u7684\u8f93\u5165\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u5019\u9009\u533a\u57df\u505a\u4e00\u4e9b\u5c3a\u5bf8\u4e0a\u7684\u4fee\u6539\u3002","title":"2.1.1 \u5019\u9009\u533a\u57df\u751f\u6210\u3010\u4e86\u89e3\u3011"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#212-cnn","text":"\u91c7\u7528\u9884\u8bad\u7ec3\u6a21\u578b(AlexNet\u6216VGG)\u5728\u751f\u6210\u7684\u5019\u9009\u533a\u57df\u4e0a\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5c06\u63d0\u53d6\u597d\u7684\u7279\u5f81\u4fdd\u5b58\u5728\u78c1\u76d8\u4e2d\uff0c\u7528\u4e8e\u540e\u7eed\u6b65\u9aa4\u7684\u5206\u7c7b\u548c\u56de\u5f52\u3002 1.\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u5165\u6570\u636e\u7684\u5c3a\u5bf8\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64\u5728\u5c06\u5019\u9009\u533a\u57df\u9001\u5165CNN\u7f51\u7edc\u4e2d\u65f6\uff0c\u9700\u8fdb\u884c\u88c1\u526a\u6216\u53d8\u5f62\u4e3a\u56fa\u5b9a\u7684\u5c3a\u5bf8\uff0c\u5728\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002 2.\u9884\u8bad\u7ec3\u6a21\u578b\u5728ImageNet\u6570\u636e\u96c6\u4e0a\u83b7\u5f97\uff0c\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\u662f1000\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u5c06\u5176\u6539\u4e3aN+1(N\u4e3a\u76ee\u6807\u7c7b\u522b\u7684\u6570\u76ee\uff0c\u4f8b\u5982VOC\u6570\u636e\u96c6\u4e2dN=20\uff0ccoco\u6570\u636e\u96c6\u4e2dN=80\uff0c1\u662f\u52a0\u4e00\u4e2a\u80cc\u666f)\u540e\uff0c\u8fdb\u884c\u5fae\u8c03\u5373\u53ef\u3002 3.\u5229\u7528\u5fae\u8c03\u540e\u7684CNN\u7f51\u7edc\uff0c\u63d0\u53d6\u6bcf\u4e00\u4e2a\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\uff0c\u83b7\u53d6\u4e00\u4e2a4096\u7ef4\u7684\u7279\u5f81\uff0c\u4e00\u5e45\u56fe\u50cf\u5c31\u662f2000x4096\u7ef4\u7279\u5f81\u5b58\u50a8\u5230\u78c1\u76d8\u4e2d\u3002","title":"2.1.2 CNN\u7f51\u7edc\u63d0\u53d6\u7279\u5f81"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#213-svm","text":"\u5047\u8bbe\u6211\u4eec\u8981\u68c0\u6d4b\u732b\u72d7\u4e24\u4e2a\u7c7b\u522b\uff0c\u90a3\u6211\u4eec\u9700\u8981\u8bad\u7ec3\u732b\u548c\u72d7\u4e24\u4e2a\u4e0d\u540c\u7c7b\u522b\u7684SVM\u5206\u7c7b\u5668\uff0c\u7136\u540e\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u5206\u7c7b\u5668\u5bf9\u4e00\u5e45\u56fe\u50cf\u4e2d2000\u4e2a\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\u5411\u91cf\u5206\u522b\u5224\u65ad\u4e00\u6b21\uff0c\u8fd9\u6837\u5f97\u51fa[2000, 2]\u7684\u5f97\u5206\u77e9\u9635\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5bf9\u4e8eN\u4e2a\u7c7b\u522b\u7684\u68c0\u6d4b\u4efb\u52a1\uff0c\u9700\u8981\u8bad\u7ec3N\uff08\u76ee\u6807\u7c7b\u522b\u6570\u76ee\uff09\u4e2aSVM\u5206\u7c7b\u5668\uff0c\u5bf9\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\u5411\u91cf\uff084096\u7ef4\uff09\u8fdb\u884c\u4e8c\u5206\u7c7b\uff0c\u5224\u65ad\u5176\u662f\u67d0\u4e00\u7c7b\u522b\u7684\u76ee\u6807\uff0c\u8fd8\u662f\u80cc\u666f\u6765\u5b8c\u6210\u76ee\u6807\u5206\u7c7b\u3002","title":"2.1.3 \u76ee\u6807\u5206\u7c7b\uff08SVM\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#214","text":"\u901a\u8fc7\u9009\u62e9\u6027\u641c\u7d22\u83b7\u53d6\u7684\u76ee\u6807\u4f4d\u7f6e\u4e0d\u662f\u975e\u5e38\u7684\u51c6\u786e\uff0c\u5b9e\u9a8c\u8bc1\u660e\uff0c\u8bad\u7ec3\u4e00\u4e2a\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u5728\u7ed9\u5b9a\u7684\u5019\u9009\u533a\u57df\u7684\u7ed3\u679c\u4e0a\u53bb\u9884\u6d4b\u4e00\u4e2a\u65b0\u7684\u68c0\u6d4b\u7a97\u53e3\uff0c\u80fd\u591f\u83b7\u5f97\u66f4\u7cbe\u786e\u7684\u4f4d\u7f6e\u3002\u4fee\u6b63\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u901a\u8fc7\u8bad\u7ec3\u4e00\u4e2a\u56de\u5f52\u5668\u6765\u5bf9\u5019\u9009\u533a\u57df\u7684\u8303\u56f4\u8fdb\u884c\u4e00\u4e2a\u8c03\u6574\uff0c\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u6700\u5f00\u59cb\u53ea\u662f\u7528\u9009\u62e9\u6027\u641c\u7d22\u7684\u65b9\u6cd5\u7c97\u7565\u5f97\u5230\u7684\uff0c\u901a\u8fc7\u8c03\u6574\u4e4b\u540e\u5f97\u5230\u66f4\u7cbe\u786e\u7684\u4f4d\u7f6e\uff0c\u5982\u4e0b\u6240\u793a\uff1a","title":"2.1.4 \u76ee\u6807\u5b9a\u4f4d"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#215","text":"\u4f7f\u7528\u9009\u62e9\u6027\u641c\u7d22\u7684\u65b9\u6cd5\u4ece\u4e00\u5f20\u56fe\u7247\u4e2d\u63d0\u53d62000\u4e2a\u5019\u9009\u533a\u57df\uff0c\u5c06\u6bcf\u4e2a\u533a\u57df\u9001\u5165CNN\u7f51\u7edc\u4e2d\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u7136\u540e\u9001\u5165\u5230SVM\u4e2d\u8fdb\u884c\u5206\u7c7b\uff0c\u5e76\u4f7f\u7528\u5019\u9009\u6846\u56de\u5f52\u5668\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u5019\u9009\u533a\u57df\u7684\u4f4d\u7f6e\u3002 \u5019\u9009\u533a\u57df\u8f83\u591a\uff0c\u67092000\u4e2a\uff0c\u9700\u8981\u5254\u9664\u6389\u90e8\u5206\u68c0\u6d4b\u7ed3\u679c\u3002 \u9488\u5bf9\u6bcf\u4e2a\u7c7b\uff0c\u901a\u8fc7\u8ba1\u7b97IOU,\u91c7\u53d6\u975e\u6700\u5927\u503c\u6291\u5236NMS\u7684\u65b9\u6cd5\uff0c\u4fdd\u7559\u6bd4\u8f83\u597d\u7684\u68c0\u6d4b\u7ed3\u679c\u3002","title":"2.1.5 \u9884\u6d4b\u8fc7\u7a0b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#22","text":"1\u3001\u8bad\u7ec3\u9636\u6bb5\u591a\uff0c\u8bad\u7ec3\u8017\u65f6\uff1a \u5fae\u8c03CNN\u7f51\u7edc+\u8bad\u7ec3SVM+\u8bad\u7ec3\u8fb9\u6846\u56de\u5f52\u5668\u3002 2\u3001\u9884\u6d4b\u901f\u5ea6\u6162: \u4f7f\u7528GPU, VGG16\u6a21\u578b\u5904\u7406\u4e00\u5f20\u56fe\u50cf\u9700\u898147s \u3002 3\u3001\u5360\u7528\u78c1\u76d8\u7a7a\u95f4\u5927\uff1a5000\u5f20\u56fe\u50cf\u4ea7\u751f\u51e0\u767eG\u7684\u7279\u5f81\u6587\u4ef6\u3002 4\u3001\u6570\u636e\u7684\u5f62\u72b6\u53d8\u5316\uff1a\u5019\u9009\u533a\u57df\u8981\u7ecf\u8fc7\u7f29\u653e\u6765\u56fa\u5b9a\u5927\u5c0f\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u76ee\u6807\u7684\u4e0d\u53d8\u5f62","title":"2.2 \u7b97\u6cd5\u603b\u7ed3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#3-fast-rcnn","text":"\u8003\u8651\u5230R-CNN\u5b58\u5728\u7684\u95ee\u9898\uff0c2015\u5e74\u63d0\u51fa\u4e86\u4e00\u4e2a\u6539\u5584\u6a21\u578b:Fast R-CNN\u3002 \u76f8\u6bd4\u4e8eR-CNN, Fast R-CNN\u4e3b\u8981\u5728\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u9762\u8fdb\u884c\u4e86\u6539\u8fdb\uff1a 1\u3001\u63d0\u9ad8\u8bad\u7ec3\u548c\u9884\u6d4b\u7684\u901f\u5ea6 R-CNN\u9996\u5148\u4ece\u6d4b\u8bd5\u56fe\u4e2d\u63d0\u53d62000\u4e2a\u5019\u9009\u533a\u57df\uff0c\u7136\u540e\u5c06\u8fd92000\u4e2a\u5019\u9009\u533a\u57df\u5206\u522b\u8f93\u5165\u5230\u9884\u8bad\u7ec3\u597d\u7684CNN\u4e2d\u63d0\u53d6\u7279\u5f81\u3002\u7531\u4e8e\u5019\u9009\u533a\u57df\u6709\u5927\u91cf\u7684\u91cd\u53e0\uff0c\u8fd9\u79cd\u63d0\u53d6\u7279\u5f81\u7684\u65b9\u6cd5\uff0c\u5c31\u4f1a\u91cd\u590d\u7684\u8ba1\u7b97\u91cd\u53e0\u533a\u57df\u7684\u7279\u5f81\u3002\u5728Fast-RCNN\u4e2d\uff0c\u5c06\u6574\u5f20\u56fe\u8f93\u5165\u5230CNN\u4e2d\u63d0\u53d6\u7279\u5f81\uff0c\u5c06\u5019\u9009\u533a\u57df\u6620\u5c04\u5230\u7279\u5f81\u56fe\u4e0a\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u5bf9\u56fe\u50cf\u533a\u57df\u8fdb\u884c\u91cd\u590d\u5904\u7406\uff0c\u63d0\u9ad8\u6548\u7387\u51cf\u5c11\u65f6\u95f4\u3002 2\u3001\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u4fdd\u5b58CNN\u7f51\u7edc\u63d0\u53d6\u7684\u7279\u5f81\u5411\u91cf RCNN\u4e2d\u9700\u8981\u5c06\u63d0\u53d6\u5230\u7684\u7279\u5f81\u4fdd\u5b58\u4e0b\u6765\uff0c\u7528\u4e8e\u4e3a\u6bcf\u4e2a\u7c7b\u8bad\u7ec3\u5355\u72ec\u7684SVM\u5206\u7c7b\u5668\u548c\u8fb9\u6846\u56de\u5f52\u5668\u3002\u5728Fast-RCNN\u4e2d\uff0c\u5c06\u7c7b\u522b\u5224\u65ad\u548c\u8fb9\u6846\u56de\u5f52\u7edf\u4e00\u4f7f\u7528CNN\u5b9e\u73b0\uff0c\u4e0d\u9700\u8981\u5728\u989d\u5916\u7684\u7a7a\u95f4\u5b58\u50a8\u7279\u5f81\u3002 3\u3001\u4e0d\u5728\u76f4\u63a5\u5bf9\u5019\u9009\u533a\u57df\u8fdb\u884c\u7f29\u653e RCNN\u4e2d\u9700\u8981\u5bf9\u5019\u9009\u533a\u57df\u8fdb\u884c\u7f29\u653e\u9001\u5165CNN\u4e2d\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5728Fast-RCNN\u4e2d\u4f7f\u7528ROIpooling\u7684\u65b9\u6cd5\u8fdb\u884c\u5c3a\u5bf8\u7684\u8c03\u6574\u3002","title":"3. Fast RCNN\u6a21\u578b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#31","text":"Fast_RCNN\u7684\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6b65\u9aa4\u662f\uff1a 1\u3001 \u5019\u9009\u533a\u57df\u751f\u6210 \uff1a\u4f7f\u7528\u9009\u62e9\u6027\u641c\u7d22\uff08Selective Search\uff09\u7684\u65b9\u6cd5\u627e\u51fa\u56fe\u7247\u4e2d\u53ef\u80fd\u5b58\u5728\u76ee\u6807\u7684\u4faf\u9009\u533a\u57df\uff0c\u53ea\u9700\u8981\u5019\u9009\u533a\u57df\u7684\u4f4d\u7f6e\u4fe1\u606f 2\u3001 CNN\u7f51\u7edc\u7279\u5f81\u63d0\u53d6 \uff1a\u5c06\u6574\u5f20\u56fe\u50cf\u8f93\u5165\u5230CNN\u7f51\u7edc\u4e2d\uff0c\u5f97\u5230\u6574\u526f\u56fe\u7684\u7279\u5f81\u56fe\uff0c\u5e76\u5c06\u4e0a\u4e00\u6b65\u83b7\u53d6\u7684\u5019\u9009\u533a\u57df\u4f4d\u7f6e\u4ece\u539f\u56fe\u6620\u5c04\u5230\u8be5\u7279\u5f81\u56fe\u4e0a 3\u3001 ROIPooling : \u5bf9\u4e8e\u6bcf\u4e2a\u7279\u5f81\u56fe\u4e0a\u5019\u9009\u6846\uff0cRoI pooling\u5c42\u4ece\u7279\u5f81\u56fe\u4e2d\u63d0\u53d6\u56fa\u5b9a\u957f\u5ea6\u7684\u7279\u5f81\u5411\u91cf\u6bcf\u4e2a\u7279\u5f81\u5411\u91cf\u88ab\u9001\u5165\u4e00\u7cfb\u5217\u5168\u8fde\u63a5\uff08fc\uff09\u5c42\u4e2d\u3002 4\u3001 \u76ee\u6807\u68c0\u6d4b \uff1a\u5206\u4e24\u90e8\u5206\u5b8c\u6210\uff0c\u4e00\u4e2a\u8f93\u51fa\u5404\u7c7b\u522b\u52a0\u4e0a1\u4e2a\u80cc\u666f\u7c7b\u522b\u7684Softmax\u6982\u7387\u4f30\u8ba1\uff0c\u53e6\u4e00\u4e2a\u4e3a\u5404\u7c7b\u522b\u7684\u6bcf\u4e00\u4e2a\u7c7b\u522b\u8f93\u51fa\u56db\u4e2a\u5b9e\u6570\u503c\uff0c\u6765\u786e\u5b9a\u76ee\u6807\u7684\u4f4d\u7f6e\u4fe1\u606f\u3002","title":"3.1 \u7b97\u6cd5\u6d41\u7a0b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#311","text":"\u4e0eRCNN\u4e2d\u4e00\u6837\uff0c\u4e0d\u518d\u8d58\u8ff0","title":"3.1.1 \u5019\u9009\u533a\u57df\u751f\u6210\u3010\u4e86\u89e3\u3011"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#312-cnn","text":"\u4e0eRCNN\u4e2d\u4e00\u6837\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u3002","title":"3.1.2 CNN\u7f51\u7edc\u7279\u5f81\u63d0\u53d6"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#313-roi-pooling","text":"\u5019\u9009\u533a\u57df\u4ece\u539f\u56fe\u6620\u5c04\u5230\u7279\u5f81\u56fe\u4e2d\u540e\uff0c\u8fdb\u884cROIpooling\u7684\u8ba1\u7b97\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a ROI Pooling\u5c42\u4f7f\u7528\u6700\u5927\u6c60\u5316\u5c06\u8f93\u5165\u7684\u7279\u5f81\u56fe\u4e2d\u7684\u4efb\u610f\u533a\u57df\uff08\u5019\u9009\u533a\u57df\u5bf9\u5e94\u7684\u533a\u57df\uff09\u5185\u7684\u7279\u5f81\u8f6c\u5316\u4e3a\u56fa\u5b9a\u7684\ud835\udc3b\u00d7\ud835\udc4a\u7684\u7279\u5f81\u56fe\uff0c\u5176\u4e2d\ud835\udc3b\u548c\ud835\udc4a\u662f\u8d85\u53c2\u6570\u3002 \u5bf9\u4e8e\u4efb\u610f\u8f93\u5165\u7684\u210e\u00d7\ud835\udc64\u7684\u5019\u9009\u533a\u57df\uff0c\u5c06\u5176\u5206\u5272\u4e3a\ud835\udc3b\u00d7\ud835\udc4a\u7684\u5b50\u7f51\u683c\uff0c\u6bcf\u4e2a\u5b50\u7f51\u683c\u7684\u5927\u5c0f\u4e3a\uff1a(h/H) x (w/W)\uff0c\u53d6\u6bcf\u4e2a\u5b50\u7f51\u683c\u4e2d\u7684\u6700\u5927\u503c\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5904\u7406\u3002 \u4f7f\u7528ROI Pooling\u5c42\u66ff\u6362\u9884\u8bad\u7ec3\u7f51\u7edc\u4e2d\u6700\u540e\u7684\u6c60\u5316\u5c42\uff0c\u5e76\u5c06\u5e76\u5c06\u8d85\u53c2\ud835\udc3b,\ud835\udc4a\u8bbe\u7f6e\u4e3a\u548c\u7f51\u7edc\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u517c\u5bb9\u7684\u503c\uff0c\u4f8b\u5982VGG16\uff0c\u8bbe\ud835\udc3b=\ud835\udc4a=7\u3002","title":"3.1.3 ROI Pooling"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#314","text":"\u539f\u7f51\u7edc\u7684\u6700\u540e\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u66ff\u6362\u4e3a\u4e24\u4e2a\u540c\u7ea7\u5c42:K+1\u4e2a\u7c7b\u522b\u7684SoftMax\u5206\u7c7b\u5c42\u548c\u8fb9\u6846\u7684\u56de\u5f52\u5c42\u3002","title":"3.1.4 \u76ee\u6807\u5206\u7c7b\u548c\u56de\u5f52"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#32","text":"R-CNN\u4e2d\u7684\u7279\u5f81\u63d0\u53d6\u548c\u68c0\u6d4b\u90e8\u5206\u662f\u5206\u5f00\u8fdb\u884c\u7684\uff0cFast R-CNN\u63d0\u51fa\u4e00\u4e2a\u9ad8\u6548\u7684\u8bad\u7ec3\u65b9\u6cd5\uff1a\u591a\u4efb\u52a1\u8bad\u7ec3 Fast R-CNN\u6709\u4e24\u79cd\u8f93\u51fa\uff1a \u4e00\u90e8\u5206\u8f93\u51fa\u5728K+1\u4e2a\u7c7b\u522b\u4e0a\u7684\u79bb\u6563\u6982\u7387\u5206\u5e03\uff08\u6bcf\u4e2a\u5019\u9009\u533a\u57df\uff09: $$ p=(p0,p1,...,pk) $$ \u3002\u901a\u5e38\uff0c\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\u7684K+1\u4e2a\u8f93\u51fa\u4e0a\u7684Softmax\u6765\u8ba1\u7b97\u6982\u7387\u503c\u3002 \u53e6\u4e00\u90e8\u5206\u8f93\u51fa\u5bf9\u4e8e\u7531K\u4e2a\u7c7b\u522b\u4e2d\u7684\u6bcf\u4e00\u4e2a\u68c0\u6d4b\u6846\u56de\u5f52\u504f\u79fb\uff0c t^{k}=(t_{x}^{k},t_{y}^{k},t_{w}^{k},t_{h}^{k}) t^{k}=(t_{x}^{k},t_{y}^{k},t_{w}^{k},t_{h}^{k}) \u3002\u5176\u4e2d t_k t_k \u6307\u5b9a\u76f8\u5bf9\u4e8e\u5019\u9009\u6846\u7684\u5c3a\u5ea6\u4e0d\u53d8\u8f6c\u6362\u548c\u5bf9\u6570\u7a7a\u95f4\u9ad8\u5ea6/\u5bbd\u5ea6\u79fb\u4f4d\u3002 \u5c06\u4e0a\u9762\u7684\u4e24\u4e2a\u4efb\u52a1\u7684\u635f\u5931\u51fd\u6570\u653e\u5728\u4e00\u8d77: \u8054\u5408\u8bad\u7ec3fast-RCNN\u7f51\u7edc\u3002\u5177\u4f53\u7684\u6211\u4eec\u5728\u540e\u7eed\u7ed9\u5927\u5bb6\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"3.2 \u6a21\u578b\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#33","text":"fastRCNN\u7684\u5de5\u4f5c\u6d41\u7a0b\u63cf\u8ff0\u5982\u4e0b\uff1a \u8f93\u5165\u56fe\u50cf\uff1a \u56fe\u50cf\u88ab\u9001\u5165\u5230\u5377\u79ef\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5c06\u901a\u8fc7\u9009\u62e9\u6027\u641c\u7d22\u83b7\u53d6\u7684\u5019\u9009\u533a\u57df\u6620\u5c04\u5230\u7279\u5f81\u56fe\u4e2d\uff1a \u5728\u7279\u5f81\u56fe\u4e0aRol\u4e2d\u5e94\u7528RoIPooling\uff0c\u83b7\u53d6\u5c3a\u5bf8\u76f8\u540c\u7684\u7279\u5f81\u5411\u91cf \u5c06\u8fd9\u4e9b\u533a\u57df\u4f20\u9012\u5230\u5168\u8fde\u63a5\u7684\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\uff0c\u5f97\u5230\u76ee\u6807\u68c0\u6d4b\u7684\u7ed3\u679c\u3002","title":"3.3 \u6a21\u578b\u9884\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/01-RCNN/#34","text":"Fast R-CNN\u662f\u5bf9R-CNN\u6a21\u578b\u7684\u4e00\u79cd\u6539\u8fdb\uff1a CNN\u7f51\u7edc\u4e0d\u518d\u5bf9\u6bcf\u4e2a\u5019\u9009\u533a\u57df\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u800c\u662f\u76f4\u63a5\u5bf9\u6574\u5f20\u56fe\u50cf\u8fdb\u884c\u51fa\u8def\uff0c\u8fd9\u6837\u51cf\u5c11\u4e86\u5f88\u591a\u91cd\u590d\u8ba1\u7b97\u3002 \u7528ROI pooling\u8fdb\u884c\u7279\u5f81\u7684\u5c3a\u5bf8\u53d8\u6362\uff0c\u6765\u6ee1\u8db3FC\u5168\u8fde\u63a5\u5c42\u5bf9\u8f93\u5165\u6570\u636e\u5c3a\u5ea6\u7684\u8981\u6c42\u3002 \u5c06\u76ee\u6807\u7684\u56de\u5f52\u548c\u5206\u7c7b\u7edf\u4e00\u5728\u4e00\u4e2a\u7f51\u7edc\u4e2d\uff0c\u4f7f\u7528FC+softmax\u8fdb\u884c\u76ee\u6807\u5206\u7c7b\uff0c\u4f7f\u7528FC Layer\u8fdb\u884c\u76ee\u6807\u6846\u7684\u56de\u5f52\u3002 \u5728Fast R-CNN\u4e2d\u4f7f\u7528\u7684\u76ee\u6807\u68c0\u6d4b\u8bc6\u522b\u7f51\u7edc\uff0c\u5728\u901f\u5ea6\u548c\u7cbe\u5ea6\u4e0a\u90fd\u6709\u4e86\u4e0d\u9519\u7684\u7ed3\u679c\u3002\u4e0d\u8db3\u7684\u662f\uff0c\u5176\u5019\u9009\u533a\u57df\u63d0\u53d6\u65b9\u6cd5\u8017\u65f6\u8f83\u957f\uff0c\u800c\u4e14\u548c\u76ee\u6807\u68c0\u6d4b\u7f51\u7edc\u662f\u5206\u79bb\u7684\uff0c\u5e76\u4e0d\u662f\u7aef\u5230\u7aef\u7684\uff0c\u57282016\u5e74\u53c8\u63d0\u51fa\u4e86Faster-RCNN\u6a21\u578b\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u7740\u91cd\u4ecb\u7ecdFaster-RCNN\u7f51\u7edc\u7684\u539f\u7406\u4e0e\u5b9e\u73b0\u3002 \u603b\u7ed3 \u4e86\u89e3Overfeat\u6a21\u578b\u7684\u79fb\u52a8\u7a97\u53e3\u65b9\u6cd5 \u6ed1\u52a8\u7a97\u53e3\u4f7f\u7528\u56fa\u5b9a\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u77e9\u5f62\u533a\u57df\uff0c\u53ef\u4ee5\u5728\u56fe\u50cf\u4e0a\u201c\u6ed1\u52a8\u201d\uff0c\u5e76\u5c06\u626b\u63cf\u9001\u5165\u5230\u795e\u7ecf\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u3002 \u4e86\u89e3RCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 R-CNN\u7f51\u7edc\u4f7f\u7528\u5019\u9009\u533a\u57df\u65b9\u6cd5\uff08region proposal method\uff09\uff0c\u5229\u7528CNN\u7f51\u7edc\u63d0\u53d6\u7279\u5f81\uff0cSVM\u5b8c\u6210\u5206\u7c7b\uff0c\u7ebf\u6027\u56de\u5f52\u8fdb\u884cbbox\u7684\u4fee\u6b63 \u4e86\u89e3fastRCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u5229\u7528CNN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5229\u7528SS\u751f\u6210\u5019\u9009\u533a\u57df\uff0c\u8fdb\u884c\u6620\u5c04\uff0c\u5e76\u4f7f\u7528ROIpooling\u8fdb\u884c\u7ef4\u5ea6\u8c03\u6574\uff0c\u6700\u540e\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52 \u77e5\u9053Fast-RCNN\u4e2d\u63d0\u51fa\u7684\u591a\u4efb\u52a1\u635f\u5931\uff1a\u5c06\u5206\u7c7b\u548c\u56de\u5f52\u7684\u635f\u5931\u51fd\u6570\u8054\u5408\u8bad\u7ec3\u7f51\u7edc","title":"3.4 \u6a21\u578b\u603b\u7ed3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/","text":"2.3 Faster-RCNN\u7f51\u7edc \u00b6 \u5b66\u4e60\u76ee\u6807 \u719f\u6089FasterRCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u77e5\u9053anchor\uff08\u951a\u6846\uff09\u7684\u601d\u60f3 \u638c\u63e1RPN\u7f51\u7edc\u662f\u5982\u4f55\u8fdb\u884c\u5019\u9009\u533a\u57df\u7684\u751f\u6210\u7684 \u638c\u63e1ROIPooling\u7684\u4f7f\u7528\u65b9\u6cd5 \u77e5\u9053fasterRCNN\u7684\u8bad\u7ec3\u65b9\u6cd5 \u5728R-CNN\u548cFast RCNN\u7684\u57fa\u7840\u4e0a\uff0c\u57282016\u5e74\u63d0\u51fa\u4e86Faster RCNN\u7f51\u7edc\u6a21\u578b\uff0c\u5728\u7ed3\u6784\u4e0a\uff0cFaster RCNN\u5df2\u7ecf\u5c06\u5019\u9009\u533a\u57df\u7684\u751f\u6210\uff0c\u7279\u5f81\u63d0\u53d6\uff0c\u76ee\u6807\u5206\u7c7b\u53ca\u76ee\u6807\u6846\u7684\u56de\u5f52\u90fd\u6574\u5408\u5728\u4e86\u4e00\u4e2a\u7f51\u7edc\u4e2d\uff0c\u7efc\u5408\u6027\u80fd\u6709\u8f83\u5927\u63d0\u9ad8\uff0c\u5728\u68c0\u6d4b\u901f\u5ea6\u65b9\u9762\u5c24\u4e3a\u660e\u663e\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u7ed9\u5927\u5bb6\u8be6\u7ec6\u4ecb\u7ecdfasterRCNN\u7f51\u7edc\u6a21\u578b\u3002\u7f51\u7edc\u57fa\u672c\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a Faster RCNN\u53ef\u4ee5\u770b\u6210\u662f\u533a\u57df\u751f\u6210\u7f51\u7edc(RPN)\u4e0eFast RCNN\u7684\u7ec4\u5408\uff0c\u5176\u4e2d\u533a\u57df\u751f\u6210\u7f51\u7edc(RPN)\u66ff\u4ee3\u9009\u62e9\u6027\u641c\u7d22\u6765\u751f\u6210\u5019\u9009\u533a\u57df\uff0cFast RCNN\u7528\u6765\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\u3002 1. \u7f51\u7edc\u5de5\u4f5c\u6d41\u7a0b \u00b6 FasterRCNN\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\uff1a 1\u3001 \u7279\u5f81\u63d0\u53d6 \uff1a\u5c06\u6574\u4e2a\u56fe\u50cf\u7f29\u653e\u81f3\u56fa\u5b9a\u7684\u5927\u5c0f\u8f93\u5165\u5230CNN\u7f51\u7edc\u4e2d\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5f97\u5230\u7279\u5f81\u56fe\u3002 2\u3001 \u5019\u9009\u533a\u57df\u63d0\u53d6 \uff1a\u8f93\u5165\u7279\u5f81\u56fe\uff0c\u4f7f\u7528\u533a\u57df\u751f\u6210\u7f51\u7edcRPN\uff0c\u4ea7\u751f\u4e00\u4e9b\u5217\u7684\u5019\u9009\u533a\u57df 3\u3001 ROIPooling : \u4e0eFast RCNN\u7f51\u7edc\u4e2d\u4e00\u6837\uff0c\u4f7f\u7528\u6700\u5927\u6c60\u5316\u56fa\u5b9a\u5019\u9009\u533a\u57df\u7684\u5c3a\u5bf8\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5904\u7406 4\u3001 \u76ee\u6807\u5206\u7c7b\u548c\u56de\u5f52 \uff1a\u4e0eFast RCNN\u7f51\u7edc\u4e2d\u4e00\u6837\uff0c\u4f7f\u7528\u4e24\u4e2a\u540c\u7ea7\u5c42:K+1\u4e2a\u7c7b\u522b\u7684SoftMax\u5206\u7c7b\u5c42\u548c\u8fb9\u6846\u7684\u56de\u5f52\u5c42\uff0c\u6765\u5b8c\u6210\u76ee\u6807\u7684\u5206\u7c7b\u548c\u56de\u5f52\u3002 Faster R-CNN\u7684\u6d41\u7a0b\u4e0eFast R-CNN\u7684\u533a\u522b\u4e0d\u662f\u5f88\u5927\uff0c\u91cd\u8981\u7684\u6539\u8fdb\u662f\u4f7f\u7528RPN\u7f51\u7edc\u6765\u66ff\u4ee3\u9009\u62e9\u6027\u641c\u7d22\u83b7\u53d6\u5019\u9009\u533a\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06Faster R-CNN\u7f51\u7edc\u770b\u505aRPN\u548cFast R-CNN\u7f51\u7edc\u7684\u7ed3\u5408\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528torchvison\u5de5\u5177\u5305\u6765\u770b\u4e0bfasterRCNN\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u4f7f\u7528\u8fc7\u7a0b\u3002torchvision\u5b89\u88c5\u65f6\u76f4\u63a5\u4f7f\u7528\uff1a pip install torchvision \u5373\u53ef\uff0c\u5728\u5b89\u88c5torchvision\u65f6\uff0c\u5e94\u4fdd\u8bc1\u5df2\u5b89\u88c5\u4e86pytorch\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\uff1a \u83b7\u53d6\u6570\u636e\u548c\u52a0\u8f7d\u9884\u8bad\u7ec3\u7f51\u7edc \u83b7\u53d6\u7f51\u7edc\u7684\u76ee\u6807\u68c0\u6d4b\u7ed3\u679c \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u9996\u5148\u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305: # pytorh\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision import torchvision.transforms as transforms from torchvision.io import read_image # \u8bfb\u53d6\u56fe\u50cf\u7684\u5de5\u5177\u5305 from PIL import Image # \u7ed8\u56fe import matplotlib.pyplot as plt 1.1 \u6570\u636e\u52a0\u8f7d \u00b6 \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u52a0\u8f7d\u4e00\u5f20\u56fe\u7247\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff1a # \u83b7\u53d6\u56fe\u7247 img = Image . open ( 'img3.jpg' ) plt . imshow ( img ) \u56fe\u7247\u5c55\u793a\u5982\u4e0b\uff1a \u539f\u59cb\u56fe\u50cf\u7684\u5927\u5c0f img . size \u8f93\u51fa\u4e3a\uff1a (994, 734) \u5728\u5c06\u56fe\u50cf\u9001\u5165\u7f51\u7edc\u4e4b\u524d\uff0c\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4e86\u5c3a\u5ea6\u7684\u8c03\u6574\uff0c\u7c7b\u578b\u8f6c\u6362\u7b49\u5904\u7406\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5c06\u56fe\u7247\u683c\u5f0f\u8f6c\u6362\u4e3atensor\u5f62\u5f0f\uff0c\u5927\u5c0f\u8f6c\u6362\u4e3a800x800\u7684\u5927\u5c0f transform = transforms . Compose ([ transforms . ToTensor (), transforms . Resize (( 800 , 800 ))]) img = transform ( img ) \u9001\u5165\u7f51\u7edc\u4e2d\u56fe\u50cf\u7684\u5927\u5c0f\u4e3a\uff1a img . shape \u8f93\u51fa\u4e3a(pytorch\u4e2d\u9001\u5165\u7f51\u7edc\u4e2d\u7684\u56fe\u50cf\u7684\u8868\u793a\u5f62\u5f0f\u3010C\uff0cH\uff0cW\u3011)\uff1a torch.Size([3, 800, 800]) \u6211\u4eec\u5c06\u5176\u5c55\u793a\u51fa\u6765\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u8fdb\u884c\u901a\u9053\u7684\u8c03\u6574 plt . imshow ( img . permute ( 1 , 2 , 0 )) \u5c55\u793a\u7ed3\u679c\u4e3a\uff1a \u56fe\u50cf\u88ab\u6211\u4eec\u4ece\u539f\u59cb\u7684(994, 734)\u8f6c\u6362\u4e3a800x800\u7684\u5927\u5c0f\uff0c\u53ef\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\u3002 1.2 \u6a21\u578b\u52a0\u8f7d \u00b6 \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u52a0\u8f7d\u4f7f\u7528coco\u6570\u636e\u96c6\u9884\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u5bf9\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b\uff0cCoCo\u6570\u636e\u9884\u8bad\u7ec3\u7684\u6a21\u578b\u53ef\u68c0\u6d4b90\u7c7b\u7684\u76ee\u6807\uff0c\u5982\u4e0b\u6240\u793a\uff1a # coco\u6570\u636e\u96c6\u7684class\uff0c\u517190\u4e2a\u7c7b\u522b\uff1a\u4eba\uff0c\u81ea\u884c\u8f66\uff0c\u706b\u8f66\uff0c\u3002\u3002\u3002 coco_names = [ '__background__' , 'person' , 'bicycle' , 'car' , 'motorcycle' , 'airplane' , 'bus' , 'train' , 'truck' , 'boat' , 'traffic light' , 'fire hydrant' , 'N/A' , 'stop sign' , 'parking meter' , 'bench' , 'bird' , 'cat' , 'dog' , 'horse' , 'sheep' , 'cow' , 'elephant' , 'bear' , 'zebra' , 'giraffe' , 'N/A' , 'backpack' , 'umbrella' , 'N/A' , 'N/A' , 'handbag' , 'tie' , 'suitcase' , 'frisbee' , 'skis' , 'snowboard' , 'sports ball' , 'kite' , 'baseball bat' , 'baseball glove' , 'skateboard' , 'surfboard' , 'tennis racket' , 'bottle' , 'N/A' , 'wine glass' , 'cup' , 'fork' , 'knife' , 'spoon' , 'bowl' , 'banana' , 'apple' , 'sandwich' , 'orange' , 'broccoli' , 'carrot' , 'hot dog' , 'pizza' , 'donut' , 'cake' , 'chair' , 'couch' , 'potted plant' , 'bed' , 'N/A' , 'dining table' , 'N/A' , 'N/A' , 'toilet' , 'N/A' , 'tv' , 'laptop' , 'mouse' , 'remote' , 'keyboard' , 'cell phone' , 'microwave' , 'oven' , 'toaster' , 'sink' , 'refrigerator' , 'N/A' , 'book' , 'clock' , 'vase' , 'scissors' , 'teddy bear' , 'hair drier' , 'toothbrush' ] \u5b9e\u4f8b\u5316faster-RCNN\u6a21\u578b\uff0c\u5e76\u52a0\u8f7d\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570\uff1a # \u5b9e\u4f8b\u5316\u6a21\u578b model = torchvision . models . detection . fasterrcnn_resnet50_fpn ( pretrained = True ) \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u9884\u6d4b\u6a21\u5f0f\uff1a # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3aeval\u6a21\u5f0f model . eval () \u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u770b\u4e0b\u6a21\u578b\u7684\u7ed3\u6784\uff0c\u4e3a\u4e86\u66f4\u6e05\u6670\u7684\u4e86\u89e3fasterRCNN\u7684\u7ed3\u6784\uff0c\u5220\u9664\u4e86\u4e00\u4e9b\u7ec6\u8282\u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\uff1a FasterRCNN ( ( transform ): GeneralizedRCNNTransform ( Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]) Resize ( min_size = ( 800 ,), max_size = 1333 , mode = 'bilinear' ) ) ( backbone ): BackboneWithFPN ( ( body ): IntermediateLayerGetter ( ( conv1 ): Conv2d ( 3 , 64 , kernel_size = ( 7 , 7 ), stride = ( 2 , 2 ), padding = ( 3 , 3 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ( maxpool ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 1 , dilation = 1 , ceil_mode = False ) \u3002\u3002\u3002\u3002\u3002 ( fpn ): FeaturePyramidNetwork ( ( inner_blocks ): ModuleList ( ( 0 ): Conv2d ( 256 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 1 ): Conv2d ( 512 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 2 ): Conv2d ( 1024 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 3 ): Conv2d ( 2048 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) \u3002\u3002\u3002\u3002 ) ) ( rpn ): RegionProposalNetwork ( ( anchor_generator ): AnchorGenerator () ( head ): RPNHead ( ( conv ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( cls_logits ): Conv2d ( 256 , 3 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( bbox_pred ): Conv2d ( 256 , 12 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ) ) ( roi_heads ): RoIHeads ( ( box_roi_pool ): MultiScaleRoIAlign ( featmap_names = [ '0' , '1' , '2' , '3' ], output_size = ( 7 , 7 ), sampling_ratio = 2 ) ( box_head ): TwoMLPHead ( ( fc6 ): Linear ( in_features = 12544 , out_features = 1024 , bias = True ) ( fc7 ): Linear ( in_features = 1024 , out_features = 1024 , bias = True ) ) ( box_predictor ): FastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 91 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 364 , bias = True ) ) ) ) \u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff0ctorchvision\u4e2d\u7684fasterRCNN\u7684\u4e3b\u8981\u5305\u542b\uff1a Transform: \u5b8c\u6210\u6570\u636e\u7684\u6807\u51c6\u5316\u5904\u7406\uff0c\u5e76\u4e14\u8bbe\u7f6e\u56fe\u50cf\u7684\u5927\u5c0f\u6700\u5c0f\u4e3a800 backbone: \u4e3b\u8981\u5305\u62ec\u7279\u5f81\u63d0\u53d6\u7684body\u90e8\u5206\u548c\u7279\u5f81\u878d\u5408fpn\u7f51\u7edc rpn: \u4e3b\u8981\u7528\u6765\u751f\u6210\u5019\u9009\u533a\u57df Roi_heads: \u8fd4\u56de\u68c0\u6d4b\u7ed3\u679c 1.3 \u6a21\u578b\u9884\u6d4b\u8fc7\u7a0b \u00b6 \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff1a # \u76f4\u63a5\u8fdb\u884c\u9884\u6d4b pred = model ([ img ]) \u9884\u6d4b\u7ed3\u679c\u4e2d\u5305\u62ec\u7f51\u7edc\u7684\u68c0\u6d4b\u6846\uff0c\u7c7b\u522b\u4fe1\u606f\u53ca\u6bcf\u4e2a\u68c0\u6d4b\u6846\u5bf9\u5e94\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a [{'boxes': tensor([[ 22.1207, 68.7210, 309.7885, 791.1606], [359.6369, 110.5316, 558.7224, 780.3055], [ 86.0154, 291.1066, 458.9595, 785.5111], [516.1552, 217.6513, 767.1631, 745.2240], [532.2499, 537.4729, 771.5016, 790.0735], [664.4442, 284.9143, 722.0727, 367.2327], [ 18.3442, 456.8345, 734.2274, 777.7546]], grad_fn=<StackBackward0>), 'labels': tensor([ 1, 1, 1, 1, 62, 64, 15]), 'scores': tensor([0.9981, 0.9981, 0.9980, 0.9962, 0.9832, 0.0695, 0.0604], grad_fn=<IndexBackward0>)}] \u6bcf\u4e2a\u68c0\u6d4b\u6846\u5bf9\u5e94\u7684\u7c7b\u522b\u901a\u8fc7labels\u8fdb\u884c\u8868\u793a\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u83b7\u53d6\u6bcf\u4e2a\u68c0\u6d4b\u6846\u7684\u7c7b\u522b\u540d\u79f0\uff1a # \u83b7\u53d6\u7c7b\u522b\u540d\u79f0,\u6846\u53ca\u5bf9\u5e94\u7684\u7f6e\u4fe1\u5ea6 pred_class = [ coco_names [ i ] for i in list ( pred [ 0 ][ 'labels' ] . numpy ())] pred_boxes = [[( i [ 0 ], i [ 1 ]), ( i [ 2 ], i [ 3 ])] for i in list ( pred [ 0 ][ 'boxes' ] . detach () . numpy ())] pred_score = list ( pred [ 0 ][ 'scores' ] . detach () . numpy ()) \u5c06\u6846\u7684\u7c7b\u522b\u5982\u4e0b\u6240\u793a\uff1a [ 'person' , 'person' , 'person' , 'person' , 'chair' , 'potted plant' , 'bench' ] \u5bf9\u5e94\u7684\u6982\u7387\u503c\u4e3a\uff1a [0.9980987, 0.9980934, 0.9980253, 0.99623007, 0.9832487, 0.069459654, 0.060414173] \u6211\u4eec\u5c06\u8fd9\u4e9b\u6846\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a # \u56fe\u50cf\u8bfb\u53d6 img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u56fe\u50cf\u5c55\u793a fig = plt . imshow ( img ) # \u5c06\u6846\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( pred_boxes ): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ]), width = boxes [ 1 ][ 0 ] - boxes [ 0 ][ 0 ], height = boxes [ 1 ][ 1 ] - boxes [ 0 ][ 1 ], fill = False , edgecolor = \"blue\" , linewidth = 1 )) plt . show () \u5728\u8fd9\u4e9b\u9884\u6d4b\u6846\u4e2d\u6709\u4e9b\u76ee\u6807\u7684\u7f6e\u4fe1\u5ea6\u8f83\u4f4e\uff0c\u6211\u4eec\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8bbe\u7f6e\u7f6e\u4fe1\u5ea6\u9608\u503c\uff1a # \u8fc7\u6ee4\u5206\u6570\u8f83\u4f4e\u7684\u9884\u6d4b threshold = 0.5 # \u56e0pred_score\u662f\u4ece\u5927\u5927\u5c0f\u8fdb\u884c\u6392\u5217\u7684\uff0c\u53ea\u8981\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u5373\u53ef pred_t = [ pred_score . index ( x ) for x in pred_score if x > threshold ][ - 1 ] pred_boxes = pred_boxes [: pred_t + 1 ] pred_class = pred_class [: pred_t + 1 ] \u83b7\u53d6\u8fc7\u6ee4\u540e\u7684\u6846\u53ca\u5bf9\u5e94\u7684\u7c7b\u522b\u7ed3\u679c\u5c55\u793a\u5728\u56fe\u50cf\u4e0a\uff1a # \u5c06\u8fc7\u6ee4\u540e\u7684\u7ed3\u6784\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u7ed8\u5236\u56fe\u50cf fig = plt . imshow ( img ) # \u5c06\u6846\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( pred_boxes ): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ]), width = boxes [ 1 ][ 0 ] - boxes [ 0 ][ 0 ], height = boxes [ 1 ][ 1 ] - boxes [ 0 ][ 1 ], fill = False , edgecolor = \"g\" , linewidth = 1 )) plt . show () \u6700\u7ec8\u7684\u68c0\u6d4b\u7ed3\u679c\uff1a \u4e0a\u8ff0\u6211\u4eec\u4ecb\u7ecd\u4e86Faster RCNN\u7684\u5de5\u4f5c\u6d41\u7a0b\u5e76\u4e14\u7ed9\u5927\u5bb6\u5c55\u793a\u4e86\u7f51\u7edc\u7684\u68c0\u6d4b\u7ed3\u679c\u3002\u90a3\u63a5\u4e0b\u6765\u6211\u4eec\u89e3\u51b3\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a 1\u3001\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e00\u90e8\u5206\u662f\u600e\u4e48\u6784\u5efa\uff0c\u600e\u4e48\u5b8c\u6210\u76f8\u5e94\u7684\u529f\u80fd\u7684\uff1f 2\u3001\u600e\u4e48\u8bad\u7ec3fastrcnn\u7f51\u7edc\u53bb\u5b8c\u6210\u6211\u4eec\u81ea\u5df1\u7684\u4efb\u52a1\uff1f \u90a3\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002 2.\u6a21\u578b\u7ed3\u6784\u8be6\u89e3 \u00b6 Faster RCNN\u7684\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6211\u4eec\u4f9d\u7136\u5c06\u7f51\u7edc\u5206\u4e3a\u56db\u90e8\u5206\uff1a Backbone \uff1aBackbone\u7531CNN\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6784\u6210\uff0c\u5e38\u7528\u7684\u662fVGG\u548cresnet, \u7528\u6765\u63d0\u53d6\u56fe\u50cf\u4e2d\u7684\u7279\u5f81\uff0c\u83b7\u53d6\u56fe\u50cf\u7684\u7279\u5f81\u56fe\u3002\u8be5\u7279\u5f81\u56fe\u88ab\u5171\u4eab\u7528\u4e8e\u540e\u7eedRPN\u5c42\u751f\u6210\u5019\u9009\u533a\u57df\u548cROIPooling\u5c42\u4e2d\u3002 RPN\u7f51\u7edc \uff1aRPN\u7f51\u7edc\u7528\u4e8e\u751f\u6210\u5019\u9009\u533a\u57df\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u76ee\u6807\u68c0\u6d4b\u3002 Roi Pooling : \u8be5\u90e8\u5206\u6536\u96c6\u56fe\u50cf\u7684\u7279\u5f81\u56fe\u548cRPN\u7f51\u7edc\u63d0\u53d6\u7684\u5019\u9009\u533a\u57df\u4f4d\u7f6e\uff0c\u7efc\u5408\u4fe1\u606f\u540e\u83b7\u53d6\u56fa\u5b9a\u5c3a\u5bf8\u7684\u7279\u5f81\uff0c\u9001\u5165\u540e\u7eed\u5168\u8fde\u63a5\u5c42\u5224\u5b9a\u76ee\u6807\u7c7b\u522b\u548c\u786e\u5b9a\u76ee\u6807\u4f4d\u7f6e\u3002 \u76ee\u6807\u5206\u7c7b\u4e0e\u56de\u5f52 : \u8be5\u90e8\u5206\u5229\u7528ROIpooling\u8f93\u51fa\u7279\u5f81\u5411\u91cf\u8ba1\u7b97\u5019\u9009\u533a\u57df\u7684\u7c7b\u522b\uff0c\u5e76\u901a\u8fc7\u56de\u5f52\u83b7\u5f97\u68c0\u6d4b\u6846\u6700\u7ec8\u7684\u7cbe\u786e\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ece\u8fd9\u56db\u4e2a\u65b9\u9762\u6765\u8be6\u7ec6\u5206\u6790fasterRCNN\u7f51\u7edc\u7684\u6784\u6210\uff0c\u5e76\u7ed3\u5408\u6e90\u7801\u7406\u89e3\u6bcf\u4e00\u90e8\u5206\u5b9e\u73b0\u7684\u529f\u80fd\u3002 \u5728\u8fdb\u884c\u7f51\u7edc\u5904\u7406\u524d\uff0c\u6211\u4eec\u5148\u5c06\u56fe\u50cf\u9001\u5165transform\u8fdb\u884c\u5904\u7406\uff1a\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c # \u9001\u5165\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u662f\u3010N,C,H,W\u3011 images = [ img ] images , targets = model . transform ( images , targets = None ) \u63a5\u4e0b\u6765\u8bb2images\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u5904\u7406\u5373\u53ef\u3002 2.1backbone \u00b6 backbone\u4e00\u822c\u4e3aVGG\uff0cResNet\u7b49\u7f51\u7edc\u6784\u6210\uff0c\u4e3b\u8981\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5c06\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\u820d\u5f03\uff0c\u5f97\u5230\u7279\u5f81\u56fe\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5904\u7406\u3002 \u5728\u6e90\u7801\u4e2d\u4f7f\u7528ResNet + FPN \u7ed3\u6784\u6765\u63d0\u53d6\u7279\u5f81\u3002\u4e0e\u666e\u901a\u7684 FasterRCNN \u53ea\u9700\u8981\u5c06\u4e00\u4e2a\u7279\u5f81\u56fe\u8f93\u5165\u5230\u540e\u7eed\u7f51\u7edc\u4e2d\u4e0d\u540c\uff0c\u7531\u4e8e\u52a0\u5165 FPN\u7ed3\u6784\uff0c\u9700\u8981\u5c06\u591a\u4e2a\u7279\u5f81\u56fe\u9010\u4e2a\u9001\u5165\u5230\u540e\u7eed\u7f51\u7edc\u4e2d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a Resnet\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0cFPN\u7ed3\u6784\u4f5c\u7528\u662f\u5f53\u524d\u5c42\u7684\u7279\u5f81\u56fe\u4f1a\u878d\u5408\u672a\u6765\u5c42\u7684\u7279\u5f81\u8fdb\u884c\u4e0a\u91c7\u6837\uff0c\u5e76\u52a0\u4ee5\u5229\u7528\u3002\u56e0\u4e3a\u6709\u4e86\u8fd9\u6837\u4e00\u4e2a\u7ed3\u6784\uff0c\u5f53\u524d\u7684\u7279\u5f81\u56fe\u5c31\u53ef\u4ee5\u83b7\u53d6\u672a\u6765\u5c42\u7684\u4fe1\u606f\uff0c\u4e5f\u5c31\u5c06\u4f4e\u9636\u7279\u5f81\u4e0e\u9ad8\u9636\u7279\u5f81\u5c31\u6709\u673a\u878d\u5408\u8d77\u6765\u4e86\uff0c\u63d0\u5347\u68c0\u6d4b\u7cbe\u5ea6\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u8fd9\u91ccResNet\u548cFPN\u7684\u5b8c\u6574\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a:Resnet\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0cFPN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u878d\u5408\u83b7\u53d6\u591a\u4e2a\u7279\u5f81\u56fe\u540e\uff0c\u8f93\u5165\u5230RPN\u7f51\u7edc\u4e2d\u7684\u7279\u5f81\u56fe\u662f[p2,p3,p4,p5,p6] \uff0c\u800c\u4f5c\u4e3a\u540e\u7eed\u76ee\u6807\u68c0\u6d4b\u7f51\u7edcFastRCNN\u7684\u8f93\u5165\u5219\u662f [p2,p3,p4,p5] \u3002 \u6211\u4eec\u770b\u4e0b\u6e90\u7801\u5b9e\u73b0\u7684\u5185\u5bb9\uff1a 1\u3001resnet\u7279\u5f81\u63d0\u53d6\u7684\u7ed3\u679c # \u4f7f\u7528backbone\u83b7\u53d6\u7279\u5f81\u56fe features_body = model . backbone . body ( images . tensors ) C2 , C3 , C4 , C5 = features_body . values () C2,C3,C4,C5\u662fresnet\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u7684\u7ed3\u679c\uff0c\u9001\u5165\u7f51\u7edc\u4e2d\u56fe\u50cf\u5927\u5c0f\u4e3a\uff083\uff0c800\uff0c800\uff09\uff0c\u7ecf\u8fc7\u7279\u5f81\u63d0\u53d6\u540e\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u4e3a\uff1a # C2.size():800/4 torch . Size ([ 1 , 256 , 200 , 200 ]) # C3.size():800/8 torch . Size ([ 1 , 512 , 100 , 100 ]) # C4.size():800/16 torch . Size ([ 1 , 1024 , 50 , 50 ]) # C5.size():800/32 torch . Size ([ 1 , 2048 , 25 , 25 ]) 2\u3001FPN\u7279\u5f81\u878d\u5408\u7684\u7ed3\u679c # FPN\u7f51\u7edc\u878d\u5408\uff1aC2,C3,C4,C5\u662fresnet\u63d0\u53d6\u7684\u7279\u5f81\u7ed3\u679c features_fpn = model . backbone . fpn ( features_body ) P2 , P3 , P4 , P5 , P6 = features_fpn . values () P2,P3,P4,P5,P6\u662f\u7279\u5f81\u878d\u5408\u4e4b\u540e\u7684\u7ed3\u679c\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\uff0c\u5176\u7279\u5f81\u56fe\u7684\u5927\u5c0f\uff1a # P2.size():800/4 torch . Size ([ 1 , 256 , 200 , 200 ]) # P3.size():800/8 torch . Size ([ 1 , 256 , 100 , 100 ]) # P4.size():800/16 torch . Size ([ 1 , 256 , 50 , 50 ]) # P5.size():800/32 torch . Size ([ 1 , 256 , 25 , 25 ]) # P6.size():800/64 torch . Size ([ 1 , 256 , 13 , 13 ]) \u90a3\u7f51\u7edc\u7684\u6574\u4f53\u67b6\u6784\u8868\u793a\u6210\uff1a 2.2 RPN\u7f51\u7edc \u00b6 \u7ecf\u5178\u7684\u68c0\u6d4b\u65b9\u6cd5\u751f\u6210\u68c0\u6d4b\u6846\u90fd\u975e\u5e38\u8017\u65f6\uff0c\u5982overfeat\u4e2d\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u751f\u6210\u68c0\u6d4b\u6846\uff1b\u6216\u5982R-CNN\u4f7f\u7528\u9009\u62e9\u6027\u641c\u7d22\u65b9\u6cd5\u751f\u6210\u68c0\u6d4b\u6846\u3002\u800cFaster RCNN\u5219\u629b\u5f03\u4e86\u4f20\u7edf\u7684\u6ed1\u52a8\u7a97\u53e3\u548c\u9009\u62e9\u6027\u641c\u7d22\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u4f7f\u7528RPN\u751f\u6210\u5019\u9009\u533a\u57df\uff0c\u80fd\u6781\u5927\u63d0\u5347\u68c0\u6d4b\u901f\u5ea6\u3002 RPN\u7f51\u7edc\u7684\u4e3b\u8981\u6d41\u7a0b\u662f\uff1a 1\u3001\u751f\u6210\u4e00\u7cfb\u5217\u7684\u56fa\u5b9a\u53c2\u8003\u6846anchors,\u8986\u76d6\u56fe\u50cf\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c\u7136\u540e\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52 2\u3001\u5206\u7c7b\u5206\u652f\uff1a\u901a\u8fc7softmax\u5206\u7c7b\u5224\u65adanchor\u4e2d\u662f\u5426\u5305\u542b\u76ee\u6807 3\u3001\u56de\u5f52\u5206\u652f\uff1a\u8ba1\u7b97\u76ee\u6807\u6846\u5bf9\u4e8eanchors\u7684\u504f\u79fb\u91cf\uff0c\u4ee5\u83b7\u5f97\u7cbe\u786e\u7684\u5019\u9009\u533a\u57df 4\u3001\u6700\u540e\u7684Proposal\u5c42\u5219\u8d1f\u8d23\u7efc\u5408\u542b\u6709\u76ee\u6807\u7684anchors\u548c\u5bf9\u5e94bbox\u56de\u5f52\u504f\u79fb\u91cf\u83b7\u53d6\u5019\u9009\u533a\u57df\uff0c\u540c\u65f6\u5254\u9664\u592a\u5c0f\u548c\u8d85\u51fa\u8fb9\u754c\u7684\u5019\u9009\u533a\u57df\u3002 2.2.1 anchors \u00b6 anchor\u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\u8868\u793a \u56fa\u5b9a\u7684\u53c2\u8003\u6846 \uff0c\u9996\u5148\u9884\u8bbe\u4e00\u7ec4\u4e0d\u540c\u5c3a\u5ea6\u4e0d\u540c\u957f\u5bbd\u6bd4\u7684\u56fa\u5b9a\u53c2\u8003\u6846\uff0c\u8986\u76d6\u51e0\u4e4e\u6240\u6709\u4f4d\u7f6e\uff0c \u6bcf\u4e2a\u53c2\u8003\u6846\u8d1f\u8d23\u68c0\u6d4b\u4e0e\u5176\u4ea4\u5e76\u6bd4\u5927\u4e8e\u9608\u503c (\u8bad\u7ec3\u9884\u8bbe\u503c\uff0c\u5e38\u75280.5\u62160.7) \u7684\u76ee\u6807 \uff0canchor\u6280\u672f\u5c06\u5019\u9009\u533a\u57df\u751f\u6210\u95ee\u9898\u8f6c\u6362\u4e3a \"\u8fd9\u4e2a\u56fa\u5b9a\u53c2\u8003\u6846\u4e2d\u6709\u6ca1\u6709\u76ee\u6807\uff0c\u76ee\u6807\u6846\u504f\u79bb\u53c2\u8003\u6846\u591a\u8fdc\" \uff0c\u4e0d\u518d\u9700\u8981\u591a\u5c3a\u5ea6\u904d\u5386\u6ed1\u7a97\uff0c\u771f\u6b63\u5b9e\u73b0\u4e86\u53c8\u597d\u53c8\u5feb\u3002 \u5728FastRCNN\u4e2d\u6846\u51fa\u591a\u5c3a\u5ea6\u3001\u591a\u79cd\u957f\u5bbd\u6bd4\u7684anchors,\u5982\u4e0b\u56fe\u6240\u793a\uff1a\u4e0b\u56fe\u4e2d\u5206\u522b\u662f\u5c3a\u5ea6\u4e3a32\uff0c64\uff0c128\uff0c\u957f\u5bbd\u6bd4\u4e3a1\uff1a1\uff0c1:2\uff0c2\uff1a1\u7684\u4e00\u7ec4anchors,\u6211\u4eec\u5229\u7528\u8fd9\u7ec4anchor\u5728\u7279\u5f81\u56fe\u4e0a\u8fdb\u884c\u6ed1\u52a8\uff0c\u5e76\u5bf9\u5e94\u5230\u539f\u56fe\u4e0a\u5373\u53ef\u83b7\u53d6\u4e00\u7cfb\u5217\u7684\u56fa\u5b9a\u53c2\u8003\u6846\u3002 \u7531\u4e8e\u6709 FPN \u7f51\u7edc\uff0c\u6240\u4ee5\u4f1a\u5728\u591a\u4e2a\u4e0d\u540c\u5c3a\u5ea6\u7279\u5f81\u56fe\u4e2d\u751f\u6210anchor\uff0c\u5047\u8bbe\u67d0\u4e00\u4e2a\u7279\u5f81\u56fe\u5927\u5c0f\u4e3ahxw\uff0c\u9996\u5148\u4f1a\u8ba1\u7b97\u8fd9\u4e2a\u7279\u5f81\u76f8\u5bf9\u4e8e\u8f93\u5165\u56fe\u50cf\u7684\u4e0b\u91c7\u6837\u500d\u6570 stride\uff1a \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6bcf\u4e00\u4e2a\u5c3a\u5ea6\u7279\u5f81\u56fe\u4e0a\u751f\u6210\u4e0d\u540c\u6bd4\u5217\u7684anchor: \u5f97\u5230\u4e00\u7cfb\u5217\u7684anchors\u540e\u5c31\u53ef\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u3002 \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u5728\u6e90\u7801\u4e2d\u6211\u4eec\u53ef\u751f\u6210\u4e00\u5e45\u56fe\u50cf\u5bf9\u5e94\u7684anchors: # \u751f\u6210anchors,\u9001\u5165\u56fe\u7247\u4fe1\u606f\u53ca\u76f8\u5e94\u7684\u7279\u5f81\u56fe anchors = model . rpn . anchor_generator ( images ,[ P2 , P3 , P4 , P5 , P6 ]) \u5bf9\u4e8e800x800\u7684\u56fe\u50cf\u751f\u6210\u7684anchor\u7684\u6570\u91cf\u4e3a\uff1a # anchors[0].size()\uff1a #200*200*3+100*100*3+50*50*3+25*25*3+13*13*3=159882 torch . Size ([ 159882 , 4 ]) anchor\u7684\u53d6\u503c\u4e3a\uff1a [ tensor ([[ - 23. , - 11. , 23. , 11. ], [ - 16. , - 16. , 16. , 16. ], [ - 11. , - 23. , 11. , 23. ], ... , [ 370. , 551. , 1094. , 913. ], [ 476. , 476. , 988. , 988. ], [ 551. , 370. , 913. , 1094. ]])] \u6211\u4eec\u5c06\u524d1000\u4e2aanchor\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a # \u5c06\u751f\u6210\u7684anchor\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u7ed8\u5236\u56fe\u50cf fig = plt . imshow ( img ) # \u5c06\u6846\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( anchors [ 0 ]): if index < 1000 : fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"red\" , linewidth = 1 )) plt . show () 2.2.2 RPN\u5206\u7c7b \u00b6 \u4e00\u526fMxN\u5927\u5c0f\u7684\u77e9\u9635\u9001\u5165Faster RCNN\u7f51\u7edc\u540e\uff0c\u7ecf\u8fc7backbone\u7279\u5f81\u63d0\u53d6\u5230RPN\u7f51\u7edc\u53d8\u4e3aHxW\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u662fRPN\u8fdb\u884c\u5206\u7c7b\u7684\u7f51\u7edc\u7ed3\u6784\uff1a(k=9) \u5148\u505a\u4e00\u4e2a1x1\u7684\u5377\u79ef\uff0c\u5f97\u5230[batchsize,H,W,18]\u7684\u7279\u5f81\u56fe\uff0c\u7136\u540e\u8fdb\u884c\u53d8\u5f62,\u5c06\u7279\u5f81\u56fe\u8f6c\u6362\u4e3a[batchsize,9xH,W,2]\u7684\u7279\u5f81\u56fe\u540e\uff0c\u9001\u5165softmax\u4e2d\u8fdb\u884c\u5206\u7c7b\uff0c\u5f97\u5230\u5206\u7c7b\u7ed3\u679c\u540e\uff0c\u518d\u8fdb\u884creshape\u6700\u7ec8\u5f97\u5230[batchsize,H,W,18]\u5927\u5c0f\u7684\u7ed3\u679c,18\u8868\u793ak=9\u4e2aanchor\u662f\u5426\u5305\u542b\u76ee\u6807\u7684\u6982\u7387\u503c\u3002 2.2.3 RPN\u56de\u5f52 \u00b6 RPN\u56de\u5f52\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a(k=9) \u7ecf\u8fc7\u8be5\u5377\u79ef\u8f93\u51fa\u7279\u5f81\u56fe\u4e3a\u4e3a[1, H, W,4x9]\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8efeature maps\u6bcf\u4e2a\u70b9\u90fd\u67099\u4e2aanchors\uff0c\u6bcf\u4e2aanchors\u53c8\u90fd\u67094\u4e2a\u7528\u4e8e\u56de\u5f52\u7684: \u53d8\u6362\u91cf\u3002 \u8be5\u53d8\u6362\u91cf\u9884\u6d4b\u7684\u662fanchor\u4e0e\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u5e73\u79fb\u91cf\u548c\u5c3a\u5ea6\u56e0\u5b50\uff1a \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u5229\u7528\u6e90\u7801\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u5bf9anchors\u7684\u5206\u7c7b\u548c\u56de\u5f52\u7ed3\u679c\uff0c\u6211\u4eec\u4ee5P2\u7279\u5f81\u56fe\u4e3a\u4f8b\uff1a # RPN\u7f51\u7edc\u9884\u6d4b\u5206\u7c7b\uff0c\u8fd4\u56de\uff1alogits\u9001\u5165softmax\u4e4b\u524d\u7684\u5206\u6570 cls_logits = model . rpn . head . cls_logits ( P2 ) # RPN\u7f51\u7edc\u9884\u6d4b\u76ee\u6807\u6846 box_pred = model . rpn . head . bbox_pred ( P2 ) \u7ed3\u679c\u5206\u6790,P2\u7279\u5f81\u56fe\u4e2d\u4e00\u5171\u67093x200x200\u4e2aanchor\uff0c\u8f93\u51fa\u4ed6\u4eec\u7684\u5206\u7c7b\u548c\u56de\u5f52\u7ed3\u679c # cls_logits.size(),\u6bcf\u4e00\u4e2aanchor\u90fd\u8fdb\u884c\u4e86\u5206\u7c7b\u5206\u6790 torch . Size ([ 1 , 3 , 200 , 200 ]) # box_pred.size() \uff1a\u56de\u5f52\u7ed3\u679c torch . Size ([ 1 , 12 , 200 , 200 ]) \u5176\u4e2d cls_logits\u7684\u53d6\u503c\u4e3a\uff1a tensor([[[[-4.9525, -8.6189, -7.9043, ..., -7.1153, -7.0152, -6.2087], [-3.9093, -8.1554, -7.6761, ..., -5.7457, -5.2442, -5.4824], [-2.8913, -6.4549, -6.1540, ..., -3.6381, -3.2611, -3.8778], ..., [-4.0144, -7.9331, -7.2612, ..., -5.9252, -6.3376, -6.1646], [-4.7249, -9.1262, -8.5185, ..., -7.1996, -7.6481, -7.1453], [-2.5904, -5.4544, -5.0440, ..., -4.0076, -4.2866, -4.3868]], [[-1.2397, -1.9357, -1.6008, ..., -2.5823, -2.3880, -2.2150], [-0.0788, -0.5536, -0.3117, ..., -0.7293, -0.6024, -1.2866], [ 0.2404, -0.4894, -0.1548, ..., 0.3993, 0.3727, -0.5295], ..., [-0.8921, -1.7715, -1.1690, ..., -1.7273, -1.9882, -2.0136], [-1.0738, -1.9363, -1.4287, ..., -2.0681, -2.2555, -2.2789], [-0.4302, -0.6752, -0.3291, ..., -0.6979, -0.8793, -1.3372]], [[-3.6792, -2.3455, -1.6957, ..., -1.8304, -2.2407, -1.3634], [-2.5546, -0.3214, 0.2112, ..., 0.8942, 0.7678, 1.4243], [-2.0823, -0.4618, 0.0860, ..., 0.9763, 0.9266, 1.4695], ..., [-2.1660, -0.7442, -0.1336, ..., -1.9861, -2.1365, -0.4541], [-2.7510, -1.3608, -0.9367, ..., -2.4219, -2.5253, -0.7463], [-0.2392, 1.5965, 1.6274, ..., 1.0652, 1.1438, 1.5748]]]], grad_fn=<MkldnnConvolutionBackward0>) 4.2.4 Proposal\u5c42 \u00b6 Proposal\u5c42\u8d1f\u8d23\u7efc\u5408RPN\u7f51\u7edc\u5bf9anchors\u5206\u7c7b\u548c\u56de\u5f52\u7684\u7ed3\u679c\uff0c\u5229\u7528\u56de\u5f52\u7684\u7ed3\u679c\u5bf9\u5305\u542b\u76ee\u6807\u7684anchors\u8fdb\u884c\u4fee\u6b63\uff0c\u8ba1\u7b97\u51fa\u5019\u9009\u533a\u57df\uff0c\u9001\u5165\u540e\u7eedRoI Pooling\u5c42\u4e2d\u3002 Proposal\u5c42\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a \u5229\u7528RPN\u7f51\u7edc\u56de\u5f52\u7684\u7ed3\u679c \u5bf9\u6240\u6709\u7684anchors\u8fdb\u884c\u4fee\u6b63\uff0c\u5f97\u5230\u4fee\u6b63\u540e\u7684\u68c0\u6d4b\u6846 \u6839\u636eRPN\u7f51\u7edc\u5206\u7c7b\u7684softmax\u8f93\u51fa\u7684\u6982\u7387\u503c\u7531\u5927\u5230\u5c0f\u5bf9\u68c0\u6d4b\u6846\u8fdb\u884c\u6392\u5e8f\uff0c\u63d0\u53d6\u524d6000\u4e2a\u7ed3\u679c\uff0c\u5373\u63d0\u53d6\u4fee\u6b63\u4f4d\u7f6e\u540e\u7684\u68c0\u6d4b\u6846 \u9650\u5b9a\u8d85\u51fa\u56fe\u50cf\u8fb9\u754c\u7684\u68c0\u6d4b\u6846\u4e3a\u56fe\u50cf\u8fb9\u754c\uff0c\u9632\u6b62\u540e\u7eedroi pooling\u65f6\u5019\u9009\u533a\u57df\u8d85\u51fa\u56fe\u50cf\u8fb9\u754c\u3002 \u5bf9\u5269\u4f59\u7684\u68c0\u6d4b\u6846\u8fdb\u884c\u975e\u6781\u5927\u503c\u6291\u5236NMS Proposal\u5c42\u7684\u8f93\u51fa\u662f\u5bf9\u5e94\u8f93\u5165\u7f51\u7edc\u56fe\u50cf\u5c3a\u5ea6\u7684\u5f52\u4e00\u5316\u540e\u7684\u5750\u6807\u503c[x1, y1, x2, y2]\u3002 \u5230\u6b64RPN\u7f51\u7edc\u7684\u5de5\u4f5c\u5c31\u7ed3\u675f\u4e86\u3002\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c # RPN\u7f51\u7edc\u751f\u6210proposal proposal = model . rpn ( images , features_fpn ) \u4e00\u5171\u751f\u6210\u4e861000\u4e2a\u5019\u9009\u533a\u57df\uff1a # proposal[0][0].size() torch . Size ([ 1000 , 4 ]) \u7ed3\u679c\u4e3a\uff1a ([ tensor ([[ 472.2222 , 282.6704 , 625.2900 , 643.2105 ], [ 480.1299 , 394.6739 , 674.9400 , 728.7283 ], [ 11.2800 , 170.9804 , 361.7238 , 751.5059 ], ... , [ 574.2663 , 279.6072 , 591.0003 , 294.0474 ], [ 577.7798 , 278.1065 , 596.8508 , 299.1753 ], [ 576.9445 , 164.8038 , 674.0577 , 269.8643 ]])], {}) \u5c06\u5176\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a # \u5019\u9009\u533a\u57df\u7684\u7ed8\u5236 img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u663e\u793a\u56fe\u50cf fig = plt . imshow ( img ) # \u5c06\u5019\u9009\u533a\u57df\u663e\u793a\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( proposal [ 0 ][ 0 ]): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"blue\" , linewidth = 0.5 )) plt . show () 2.3 ROIPooling \u00b6 RoI Pooling\u5c42\u5219\u8d1f\u8d23\u6536\u96c6RPN\u7f51\u7edc\u751f\u6210\u7684\u5019\u9009\u533a\u57df\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230\u7279\u5f81\u56fe\u4e2d\u5e76\u56fa\u5b9a\u7ef4\u5ea6\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u3002 RoI Pooling \u7684\u4f5c\u7528\u8fc7\u7a0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a RoIpooling\u4f7f\u7528\u6700\u5927\u6c60\u5316\u5c06\u4efb\u4f55\u6709\u6548\u7684RoI\u533a\u57df\u5185\u7684\u7279\u5f81\u8f6c\u6362\u6210\u5177\u6709pool_H\u00d7pool_W\u7684\u56fa\u5b9a\u7a7a\u95f4\u8303\u56f4\u7684\u5c0f\u7684\u7279\u5f81\u56fe\uff0c\u5176\u4e2dpool_H\u548cpool_W\u662f\u8d85\u53c2\u6570\uff0c\u6bd4\u5982\u8bbe\u7f6e\u4e3a7x7, \u5b83\u4eec\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7684RoI,\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0cFPN\u7f51\u7edc\u4ea7\u751f\u4e86\u591a\u4e2a\u5c3a\u5ea6\u7279\u5f81\u56fe\uff0c\u90a3\u5019\u9009\u533a\u57df\u8981\u6620\u5c04\u5230\u54ea\u4e2a\u7279\u5f81\u56fe\u4e2d\u5462\uff1f \u5728\u8fd9\u91cc\uff0c\u4e0d\u540c\u5c3a\u5ea6\u7684ROI\u4f7f\u7528\u4e0d\u540c\u7279\u5f81\u5c42\u4f5c\u4e3aROI pooling\u5c42\u7684\u8f93\u5165\uff0c\u5927\u5c3a\u5ea6ROI\u5c31\u7528\u540e\u9762\u4e00\u4e9b\u7684\u91d1\u5b57\u5854\u5c42\uff0c\u6bd4\u5982P5\uff1b\u5c0f\u5c3a\u5ea6ROI\u5c31\u7528\u524d\u9762\u4e00\u70b9\u7684\u7279\u5f81\u5c42\uff0c\u6bd4\u5982P3\uff0c\u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u786e\u5b9aROI\u6240\u5728\u7684\u7279\u5f81\u5c42\uff1a \u5176\u4e2d\uff0c224\u662fImageNet\u7684\u6807\u51c6\u8f93\u5165\uff0ck0\u662f\u57fa\u51c6\u503c\uff0c\u8bbe\u7f6e\u4e3a4\uff0cw\u548ch\u662fROI\u533a\u57df\u7684\u957f\u548c\u5bbd\uff0c\u5047\u8bbeROI\u662f112x112\u7684\u5927\u5c0f\uff0c\u90a3\u4e48k = k0-1 = 4-1 = 3\uff0c\u610f\u5473\u7740\u8be5ROI\u5e94\u8be5\u4f7f\u7528P3\u7684\u7279\u5f81\u5c42\u3002k\u503c\u4f1a\u505a\u53d6\u6574\u5904\u7406\uff0c\u9632\u6b62\u7ed3\u679c\u4e0d\u662f\u6574\u6570\uff0c\u800c\u4e14\u4e3a\u4e86\u4fdd\u8bc1k\u503c\u57282-5\u4e4b\u95f4\uff0c\u8fd8\u4f1a\u505a\u622a\u65ad\u5904\u7406\u3002 \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c # ROI Pooling\u5c42\u5b9e\u73b0: pool_region_list = model . roi_heads . box_roi_pool ( features_fpn , proposal [ 0 ], images . image_sizes ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a\u6bcf\u4e00\u4e2a\u5019\u9009\u533a\u57df\u90fd\u88ab\u56fa\u5b9a\u4e3a7x7\u5927\u5c0f # pool_region_list.size() torch . Size ([ 1000 , 256 , 7 , 7 ]) \u5177\u4f53\u5982\u4e0b\u6240\u793a\uff1a tensor ([[[[ - 3.0290e-01 , - 9.4801e-02 , - 3.3355e-01 , ... , - 4.7696e-01 , 1.8509e-01 , 6.6568e-01 ], [ 4.8405e-01 , - 3.9127e-01 , - 1.2898e+00 , ... , - 9.8544e-01 , 1.6745e-01 , 6.4149e-01 ], [ 2.6655e-01 , - 7.9603e-01 , - 7.8114e-01 , ... , - 5.4995e-01 , - 1.2209e-01 , 4.2529e-01 ], ... , [ - 7.9032e-01 , - 4.3308e-01 , - 1.0445e+00 , ... , - 1.0004e+00 , - 1.4248e+00 , - 1.0955e+00 ], [ - 2.0235e-01 , 1.2646e-01 , 3.0089e-01 , ... , - 1.9803e-01 , - 1.4375e+00 , - 1.3155e+00 ], [ 4.0225e-01 , 2.8825e-01 , 3.6015e-01 , ... , 1.7556e-01 , - 6.1306e-01 , - 1.1433e+00 ]]]], grad_fn =< IndexPutBackward0 > ) 2.4 \u76ee\u6807\u5206\u7c7b\u4e0e\u56de\u5f52 \u00b6 \u8be5\u90e8\u5206\u5229\u7528\u83b7\u5f97\u7684\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\u56fe\uff0c\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\u4e0esoftmax\u8ba1\u7b97\u6bcf\u4e2a\u5019\u9009\u533a\u57df\u5177\u4f53\u5c5e\u4e8e\u7684\u7c7b\u522b\uff08\u5982\u4eba\uff0c\u8f66\uff0c\u7535\u89c6\u7b49\uff09\uff0c\u8f93\u51fa\u6982\u7387\u503c\uff1b\u540c\u65f6\u518d\u6b21\u5229\u7528\u56de\u5f52\u65b9\u6cd5\u83b7\u5f97\u6bcf\u4e2a\u5019\u9009\u533a\u57df\u7684\u4f4d\u7f6e\u504f\u79fb\u91cf\uff0c\u7528\u4e8e\u56de\u5f52\u66f4\u52a0\u7cbe\u786e\u7684\u76ee\u6807\u68c0\u6d4b\u6846\u3002\u8be5\u90e8\u5206\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a \u4eceRoI Pooling\u5c42\u83b7\u53d6\u5230\u56fa\u5b9a\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u540e\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\uff0c\u53ef\u4ee5\u770b\u5230\u505a\u4e86\u5982\u4e0b2\u4ef6\u4e8b\uff1a \u901a\u8fc7\u5168\u8fde\u63a5\u548csoftmax\u5bf9\u5019\u9009\u533a\u57df\u8fdb\u884c\u5206\u7c7b \u518d\u6b21\u5bf9\u5019\u9009\u533a\u57df\u8fdb\u884c\u56de\u5f52\u4fee\u6b63\uff0c\u83b7\u53d6\u66f4\u9ad8\u7cbe\u5ea6\u7684\u68c0\u6d4b\u6846 \u5b9e\u73b0\u6d41\u7a0b\u5982\u4e0b\uff1a\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u9996\u5148\u83b7\u53d6\u7f51\u7edc\u5206\u7c7b\u548c\u56de\u5f52\u7684\u7ed3\u679c\uff1a # \u6a21\u578b\u6700\u7ec8\u8f93\u51fa\u7684\u7ed3\u679c detection = model . roi_heads ( features , proposal [ 0 ], images . image_sizes ) \u68c0\u6d4b\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a ([{ 'boxes' : tensor ([[ 359.8341 , 111.3523 , 558.0009 , 777.9014 ], [ 86.5611 , 290.7203 , 459.5951 , 785.2094 ], [ 22.1627 , 70.4335 , 309.8072 , 790.7128 ], [ 515.9180 , 217.7970 , 766.3583 , 743.9280 ], [ 531.3500 , 536.5439 , 771.5784 , 790.1054 ], [ 666.4915 , 284.8808 , 722.3298 , 367.1904 ], [ 19.0011 , 460.5744 , 728.2871 , 777.8762 ]], grad_fn =< IndexBackward0 > ), 'labels' : tensor ([ 1 , 1 , 1 , 1 , 62 , 64 , 15 ]), 'scores' : tensor ([ 0.9982 , 0.9981 , 0.9980 , 0.9958 , 0.9854 , 0.1073 , 0.0618 ], grad_fn =< IndexBackward0 > )}], {}) \u7ed3\u679c\u4e3a\uff1a\u4e00\u5171\u68c0\u6d4b\u51fa7\u4e2a\u76ee\u6807\uff0c\u6bcf\u4e2a\u76ee\u6807\u7684\u76ee\u6807\u4f4d\u7f6e\uff0c\u76ee\u6807\u7c7b\u522bid\uff0c\u76ee\u6807\u7c7b\u522b\u7f6e\u4fe1\u5ea6\u7b49\u4fe1\u606f\u6784\u6210\u3002 \u53ef\u4ee5\u5c06\u5176\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a # \u68c0\u6d4b\u7ed3\u679c\u7684\u7ed8\u5236 detection_boxes = detection [ 0 ][ 0 ][ 'boxes' ] . detach () . numpy () img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u663e\u793a\u56fe\u50cf fig = plt . imshow ( img ) # \u5c06\u68c0\u6d4b\u7ed3\u679c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( detection_boxes ): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"purple\" , linewidth = 1 )) plt . show () \u5230\u8fd9\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u6574\u4e2a\u7f51\u7edc\u7684\u4ecb\u7ecd\u3002 3 FasterRCNN\u7684\u8bad\u7ec3 \u00b6 Faster R-CNN\u7684\u8bad\u7ec3\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5373RPN\u7f51\u7edc\u548c\u68c0\u6d4b\u7f51\u7edcfastRCNN\u7684\u8bad\u7ec3\uff1a \u5728\u4ecb\u7ecd\u7f51\u7edc\u8bad\u7ec3\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6709\u6807\u6ce8\u597d\u7684\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u7f51\u7edc\u6a21\u578b\uff0c\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u6570\u636e\u96c6\u52a0\u8f7d \u5728\u8fd9\u91cc\u6211\u4eec\u52a0\u8f7dVOC\u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u4e2d\u5305\u542b\u6807\u6ce8\u597d\u7684\u6570\u636e\uff1a # \u6570\u636e\u96c6\u8bb0\u8f7d from voc_data_util import VocDataset , VOC_BBOX_LABEL_NAMES dataset = VocDataset ( root = '/Users/mac/Desktop/\u8ba1\u7b97\u673a\u89c6\u89c9/VOCdevkit/VOC2007' , transforms = VocDataset . get_transform ()) \u5728\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u4ee5\u9884\u6d4b\u65f6\u7684\u56fe\u7247\u4e3a\u4f8b\uff0c\u5c55\u793a\u6570\u636e\u7684\u6807\u6ce8\u4fe1\u606f\uff1a # \u771f\u5b9e\u503c\u7684\u7ed8\u5236 # \u83b7\u53d6\u56fe\u50cf\u53ca\u5bf9\u5e94\u7684\u6807\u6ce8\u4fe1\u606f img , targets = dataset [ 141 ] img = img . permute ( 1 , 2 , 0 ) . numpy () . astype ( np . uint8 ) fig = plt . imshow ( img ) # \u5c06\u6807\u6ce8\u4fe1\u606f\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( targets [ 'boxes' ] . numpy ()): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"green\" , linewidth = 1 )) plt . show () \u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6a21\u578b\u52a0\u8f7d \u5728\u8fd9\u91cc\u52a0\u8f7d\u6a21\u578b\u6211\u4eec\u4e0d\u76f4\u63a5\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u800c\u662f\u9700\u8981\u6839\u636eVOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u4e2a\u657020\u5bf9\u6a21\u578b\u8fdb\u884c\u4fee\u6b63\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u6a21\u578b\u52a0\u8f7d # N+1\u5305\u542b\u80cc\u666f num_classes = 21 # \u6a21\u578b\u5b9e\u4f8b\u5316\uff1a\u4e0d\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u4fee\u6b63\u7c7b\u522b\u4e2a\u6570\uff0cbackbone\u4f7f\u7528\u9884\u8bad\u7ec3\u7ed3\u679c model = torchvision . models . detection . fasterrcnn_resnet50_fpn ( pretrained = False , num_classes = num_classes , pretrained_backbone = True ) \u6a21\u578b\u548c\u6570\u636e\u52a0\u8f7d\u8fdb\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u4e86\u3002 3.1 RPN\u7f51\u7edc\u7684\u8bad\u7ec3 \u00b6 RPN\u7f51\u7edc\u7684\u4f5c\u7528\u4ece\u4f17\u591a\u7684anchors\u4e2d\u63d0\u53d6\u5305\u542b\u76ee\u6807\u7684\uff0c\u5e76\u4e14\u7ecf\u8fc7\u56de\u5f52\u8c03\u6574\u7684\u5019\u9009\u533a\u57df\u3002\u4e3a\u4e86\u8bad\u7ec3RPN\uff0c\u7ed9\u6bcf\u4e2aanchor\u5206\u914d\u662f\u5426\u5305\u542b\u76ee\u6807\u7684\u6807\u7b7e\uff0c\u4e5f\u5c31\u662f\u6b63\u8d1f\u6837\u672c\u7684\u6807\u8bb0\uff0c\u7136\u540e\u8fdb\u884c\u8bad\u7ec3\u3002 3.1.1\u6b63\u8d1f\u6837\u672c\u6807\u8bb0 \u00b6 \u6b63\u8d1f\u6837\u672c\u7684\u8bbe\u7f6e\u4e3b\u8981\u5206\u4e3a3\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u4e0e\u771f\u5b9e\u6846ground truth\uff08GT\uff09\u4ea4\u5e76\u6bd4IOU\u5927\u4e8e0.7\u7684anchor\u662f\u6b63\u6837\u672c\uff0c\u5373anchor\u4e2d\u5305\u542b\u76ee\u6807\uff0c\u76ee\u6807\u503c\u8bbe\u4e3a1 \u4e0e\u771f\u5b9e\u6846ground truth\uff08GT\uff09\u4ea4\u5e76\u6bd4IOU\u5c0f\u4e8e0.3\u7684anchor\u662f\u8d1f\u6837\u672c\uff0c\u5373anchor\u4e2d\u4e0d\u5305\u542b\u76ee\u6807\uff0c\u76ee\u6807\u503c\u8bbe\u4e3a-1 \u5176\u4ed6\u7684anchor\u820d\u5f03\uff0c\u4e0d\u53c2\u4e0e\u7f51\u7edc\u7684\u8bad\u7ec3\uff0c\u76ee\u6807\u503c\u8bbe\u4e3a0 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u770b\u4e0b\u6837\u672c\u6807\u8bb0\u7684\u7ed3\u679c\uff1a\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u5c06\u4ea7\u751f\u7684159882\u4e2aanchor\u4e0e\u76ee\u6807\u771f\u5b9e\u503c\u7684\u8ba1\u7b97\u4ea4\u5e76\u6bd4\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\uff1a # \u83b7\u53d6anchor\u5bf9\u5e94\u7684\u76ee\u6807\u503c\uff1a\u8f93\u5165\uff1a\u8981\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\u7684anchors(\u5728\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u751f\u6210\u8fc7)\uff0c\u6837\u672c\u7684\u771f\u5b9e\u503c\u5373\u6807\u6ce8\u4fe1\u606f\uff1b\u8f93\u51fa\uff1arpn\u7684\u5206\u7c7b\u76ee\u6807\u503c\uff0cRPN\u7684\u56de\u5f52\u76ee\u6807\u503c rpn_label_matchs , rpn_target_deltas = model . rpn . assign_targets_to_anchors ( anchors ,[ targets ]) \u6240\u6709\u7684anchor\u90fd\u8bbe\u7f6e\u4e86\u5206\u7c7b\u7684\u76ee\u6807\u503c\u548c\u56de\u5f52\u7684\u76ee\u6807\u503c\uff0c\u4e00\u5171\u6709159882\u4e2aAnchor\u3002 # anchor\u5bf9\u5e94\u7684\u5206\u7c7b\u76ee\u6807\u503c\uff1arpn_label_matchs[0].size() torch . Size ([ 159882 ]) # \u6bcf\u4e2aanchor\u5bf9\u5e94\u7684\u6846\u7684\u76ee\u6807\u503c\uff1arpn_target_deltas[0].size() torch . Size ([ 159882 , 4 ]) \u83b7\u53d6\u6b63\u6837\u672c\uff1a\u6b63\u6837\u672c\u662f\u5305\u542b\u76ee\u6807\u7684anchor\uff0c\u5176\u76ee\u6807\u503c\u8bbe\u4e3a1\uff0c\u6b63\u6837\u672c\u7684\u4e2a\u6570\u662f29\u4e2a # \u5c5e\u4e8e\u6b63\u6837\u672c\u7684anchors\uff0c\u4e0eGT\u4ea4\u5e76\u6bd4\u8f83\u5927\u7684anchor,\u76ee\u6807\u503c\u8bbe\u4e3a1 positive_anchor_ids = torch . where ( torch . eq ( rpn_label_matchs [ 0 ], 1 ))[ 0 ] . numpy () # \u6b63\u6837\u672c\u7684\u4e2a\u6570\uff1apositive_anchor_ids.shape ( 15 ,) # \u5c06\u6b63\u6837\u672c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a # \u7ed8\u5236anchor\u7684\u6b63\u6837\u672c fig = plt . imshow ( img ) # \u904d\u5386\u6240\u6709\u7684\u6b63\u6837\u672c\u7684anchor\uff0c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for idx in positive_anchor_ids : boxes = anchors [ 0 ][ idx ] fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"white\" , linewidth = 1 )) plt . show () \u6211\u4eec\u5c06\u8fd9\u4e9b\u6b63\u6837\u672c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e9banchor\u4e0e\u76ee\u6807\u8fd8\u662f\u975e\u5e38\u63a5\u8fd1\u7684 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u4e0b\u8d1f\u6837\u672c\u7684\u7ed3\u679c\uff0c\u8d1f\u6837\u672c\u7684\u76ee\u6807\u503c\u662f-1\uff0c # \u8d1f\u6837\u672c\u7684anchor\u7684id negitivate_anchor_ids = torch . where ( torch . eq ( rpn_label_matchs [ 0 ], - 1 ))[ 0 ] . numpy () # \u8d1f\u6837\u672c\u7684\u4e2a\u6570\u4e3a\uff1anegitivate_anchor_ids.shape ( 712 ,) # \u7ed8\u5236\u90e8\u5206anchor\u7684\u8d1f\u6837\u672c fig = plt . imshow ( img ) # \u904d\u5386\u6240\u6709\u7684\u6b63\u6837\u672c\u7684anchor\uff0c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for idx in negitivate_anchor_ids : # \u8d1f\u6837\u672c\u7684anchor boxes = anchors [ 0 ][ idx ] # \u53d6\u4f5920\u4e3a0\u7684\u8d1f\u6837\u672c\u8fdb\u884c\u5c55\u793a if idx % 20 == 0 : fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"white\" , linewidth = 1 )) plt . show () \u540c\u6837\u6211\u4eec\u4e5f\u5c06\u8d1f\u6837\u672c\u5c55\u793a\u5728\u56fe\u50cf\u4e0a\uff0c\u4ece\u56fe\u50cf\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e9b\u8d1f\u6837\u672c\u7684anchor\u4e0e\u76ee\u6807\u5dee\u8ddd\u8fd8\u662f\u5f88\u5927\u7684\u3002 3.1.2 RPN\u7f51\u7edc\u7684\u635f\u5931\u51fd\u6570 \u00b6 RPN\u7f51\u7edc\u7684\u635f\u5931\u51fd\u6570\u662f\uff1a \u5176\u4e2d i i \u8868\u793aanchor\u7684\u7d22\u5f15 p_i p_i \u662f\u7b2ci\u4e2aanchor \u9884\u6d4b\u4e3a\u76ee\u6807\u7684\u53ef\u80fd\u6027\uff0c p_i^{*} p_i^{*} \u4e3aground-truth\u6807\u7b7e\u3002\u5982\u679c\u8fd9\u4e2aanchor\u662fpositive\u7684\uff0c\u5219ground-truth\u6807\u7b7e\u4e3a1\uff0c\u5426\u5219\u4e3a0\u3002\uff08\u5373\u5f53\u7b2ci\u4e2aanchor\u4e0eGT\u95f4IoU>0.7\uff0c\u8ba4\u4e3a\u662f\u8be5anchor\u662fpositive\uff0c\u6807\u7b7e\u4e3a1\uff1b\u53cd\u4e4bIoU<0.3\u65f6\uff0c\u8ba4\u4e3a\u662f\u8be5anchor\u662fnegative\uff0c\u6807\u7b7e\u4e3a0\uff09 t_i t_i \u8868\u793a\u8868\u793a\u6b63\u6837\u672canchor\u5230\u9884\u6d4b\u533a\u57dfbounding box\u76844\u4e2a\u53c2\u6570\u5316\u9884\u6d4b\u7ed3\u679c, t_i^{*} t_i^{*} \u662f\u8fd9\u4e2apositive anchor\u5bf9\u5e94\u7684ground-truth box\u7684\u504f\u79fb\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u9884\u6d4b\u503c\uff1a \u771f\u5b9e\u503c\uff1a \u5176\u4e2d\uff0cx\uff0cy\uff0cw\uff0ch\u8868\u793a\u7a97\u53e3\u4e2d\u5fc3\u5750\u6807\u548c\u7a97\u53e3\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u53d8\u91cfx\uff0c x_a \u548cx^{*} x_a \u548cx^{*} \u5206\u522b\u8868\u793a\u9884\u6d4b\u7a97\u53e3\u3001anchor\u7a97\u53e3\u548cGround Truth\u7684\u5750\u6807\uff08y\uff0cw\uff0ch\u540c\u7406\uff09 \u56de\u5f52\u76ee\u6807\u503c\u7684\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u7f51\u7edc\u56de\u5f52\u7684\u76ee\u6807\u503c regression_targets = model . rpn . box_coder . encode ( rpn_target_deltas , anchors ) \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\u6bcf\u4e2aanchor\u90fd\u6709\u76f8\u5e94\u7684\u56de\u5f52\u7684\u76ee\u6807\u503c\u3002 # regression_targets[0].size() torch . Size ([ 159882 , 4 ]) ( tensor ([[ 3.1478 , 30.9188 , 1.6453 , 2.3698 ], [ 4.5250 , 21.2567 , 2.0082 , 1.9951 ], [ 6.5818 , 14.7873 , 2.3829 , 1.6322 ], ... , [ - 0.8110 , - 0.1431 , - 1.1108 , - 0.4308 ], [ - 1.1469 , - 0.1011 , - 0.7644 , - 0.7775 ], [ - 1.6221 , - 0.0715 , - 0.4177 , - 1.1240 ]], dtype = torch . float64 ),) \u6574\u4e2aLoss\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u5206\u7c7b\u548c\u56de\u5f52\u7684\u635f\u5931 L_{cls} L_{cls} \u5206\u7c7b\u7684\u635f\u5931\uff08classification loss\uff09\uff0c\u662f\u4e00\u4e2a\u4e8c\u5206\u7c7b\u5668\u7684softmax loss\u3002 L_{reg} L_{reg} \u662f\u56de\u5f52\u635f\u5931\uff0c\u4e3a smooth(x) smooth(x) \u635f\u5931,\u5e76\u4e14\u53ea\u6709\u6b63\u6837\u672c\u624d\u53c2\u4e0e\u56de\u5f52\u635f\u5931\u8ba1\u7b97 N_{cls} N_{cls} \u548c N_{reg} N_{reg} \u5206\u522b\u7528\u6765\u6807\u51c6\u5316\u5206\u7c7b\u635f\u5931\u9879 L_{cls} L_{cls} \u548c\u56de\u5f52\u635f\u5931\u9879 L_{reg} L_{reg} \uff0c\u9ed8\u8ba4\u7528batch size\u8bbe\u7f6e N_{cls} N_{cls} \uff0c\u7528anchor\u4f4d\u7f6e\u6570\u76ee~2000\u521d\u59cb\u5316 N_{reg} N_{reg} N_{cls} N_{cls} \u548c N_{reg} N_{reg} \u76f8\u5dee\u8fc7\u5927\uff0c\u7528\u53c2\u6570\u03bb\u6765\u5e73\u8861\u4e24\u8005\uff0c\u4e00\u822c\u53d6\u503c\u4e3a N_{reg} N_{reg} \u548c N_{cls} N_{cls} \u7684\u6bd4\u503c10\u5373\u53ef\u3002 3.2 FastRCNN\u7f51\u7edc\u7684\u8bad\u7ec3 \u00b6 \u4f7f\u7528RPN\u7f51\u7edc\u6536\u96c6\u5230\u7684\u5019\u9009\u533a\u57df\u548cimageNet\u9884\u8bad\u7ec3\u7684\u5377\u79ef\u7f51\u7edc\u63d0\u53d6\u7684\u7279\u5f81\u5bf9\u68c0\u6d4b\u7684FastRCNN\u7f51\u7edc\u8fdb\u884c\u8bad\u7ec3\u3002 3.2.1 \u6b63\u8d1f\u6837\u672c\u6807\u8bb0 \u00b6 \u5728FastRCNN\u7f51\u7edc\u8bad\u7ec3\u65f6\uff1a \u9996\u5148\u5c06\u4e0e\u771f\u5b9e\u6846ground truth\uff08GT\uff09\u4ea4\u5e76\u6bd4IOU\u5927\u4e8e0.5\u7684\u5019\u9009\u533a\u57df\u8bbe\u4e3a\u6b63\u6837\u672c\uff0c\u7c7b\u522b\u7684\u76ee\u6807\u503c\u662fGT\u7684\u7c7b\u522b \u5c06\u4e0e\u771f\u5b9e\u6846ground truth\uff08GT\uff09\u4ea4\u5e76\u6bd4IOU\u5c0f\u4e8e0.5\u7684\u5019\u9009\u533a\u57df\u8bbe\u4e3a\u8d1f\u6837\u672c\uff0c\u7c7b\u522b\u7684\u76ee\u6807\u503c\u662f0 \u63a5\u4e0b\u6765\u6211\u4eec\u5728\u4ee3\u7801\u770b\u4e0b\u6b63\u8d1f\u6837\u672c\u6807\u8bb0\u7684\u7ed3\u679c\uff1a\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u5c06proposal\u5c42\u4ea7\u751f\u7684\u5019\u9009\u533a\u57df\u4e0e\u76ee\u6807\u771f\u5b9e\u503c\u7684\u8ba1\u7b97\u4ea4\u5e76\u6bd4\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\uff1a # fastRCNN\u7684\u6b63\u8d1f\u6837\u672c\u8bbe\u7f6e # \u8f93\u5165\uff1aRPN\u7f51\u7edc\u751f\u6210\u7684\u5019\u9009\u533a\u57df\uff0c # \u8f93\u51fa\uff1a\u53c2\u4e0e\u8bad\u7ec3\u7684\u5019\u9009\u533a\u57dfproposals\u53ca\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u7684\u7d22\u5f15matched_idxs\uff0c\u5019\u9009\u533a\u57df\u5206\u7c7b\u7684\u76ee\u6807\u503clabels\uff0c\u56de\u5f52\u7684\u76ee\u6807\u503cregression_targets # \u4ece\u751f\u6210\u7684\u6240\u6709\u7684proposal\u4e2d\u9009\u62e9\u6b63\u8d1f\u6837\u672c\u9001\u5165\u7f51\u7edc\u4e2d proposals , matched_idxs , labels , regression_targets = model . roi_heads . select_training_samples ( proposal [ 0 ], [ targets ]) \u6700\u7ec8\u83b7\u53d6\u7684\u5019\u9009\u533a\u57df\u7684\u4e2a\u6570\u4e3a512\uff0clabels\u4e2d0\u503c\u5bf9\u5e94\u7684\u80cc\u666f\u7c7b\u522b\uff0c\u975e\u96f6\u503c\u5bf9\u5e94\u7740\u6240\u5c5e\u7684\u7c7b\u522bID # proposals[0].size() torch . Size ([ 512 , 4 ]) # regression_targets[0].size() torch . Size ([ 512 , 4 ]) # labels [ tensor ([ 15 , 15 , 15 , 15 , 0 , 0 , 15 , 0 , 15 , 15 , 15 , 15 , 0 , 0 , 15 , 15 , 0 , 15 , 0 , 15 , 0 , 15 , 15 , 15 , 15 , 0 , 15 , 15 , 15 , 0 , 0 , 0 , 15 , 0 , 15 , 15 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 15 , 15 , 0 , 15 , 0 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 15 , 0 , 0 , 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 9 , 15 , 0 , 0 , 0 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 15 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 15 , 15 , 15 , 15 ])] \u83b7\u53d6\u6b63\u6837\u672c\uff1a\u6b63\u6837\u672c\u662f\u8d1f\u8d23\u76ee\u6807\u68c0\u6d4b\u7684\u5019\u9009\u533a\u57df\uff0c\u5176\u76ee\u6807\u503c\u4e0d\u662f0\uff0c\u6b63\u6837\u672c\u7684\u4e2a\u6570\u662f64\u4e2a # \u83b7\u53d6\u6b63\u6837\u672c\u7684\u7d22\u5f15 positive_proposal_ids = torch . where ( torch . gt ( labels [ 0 ], 0 ))[ 0 ] . numpy () # positive_proposal_ids.shape ( 64 ,) \u5c06\u8fd9\u4e9b\u6b63\u6837\u672c\u5c55\u793a\u5728\u56fe\u50cf\u4e0a\uff1a # \u7ed8\u5236\u90e8\u5206\u5019\u9009\u533a\u57df\u7684\u8d1f\u6837\u672c fig = plt . imshow ( img ) # \u904d\u5386\u6240\u6709\u7684\u8d1f\u6837\u672c\u7684\u5019\u9009\u533a\u57df\uff0c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for idx in positive_proposal_ids : # \u6b63\u6837\u672c\u7684proposals boxes = proposals [ 0 ][ idx ] # \u53d6\u4f5910\u4e3a0\u7684\u8d1f\u6837\u672c\u8fdb\u884c\u5c55\u793a if idx % 10 == 0 : fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"white\" , linewidth = 1 )) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e9b\u6846\u8ddf\u771f\u5b9e\u503c\u662f\u975e\u5e38\u63a5\u8fd1\u7684 \u540c\u6837\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u53d6\u8d1f\u6837\u672c\uff08\u80cc\u666f\uff09\uff0c\u5e76\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a # \u8d1f\u6837\u672c\u5bf9\u5e94\u7684ID negitivate_proposal_ids = torch . where ( torch . eq ( labels [ 0 ], 0 ))[ 0 ] . numpy () # negitivate_proposal_ids.shape ( 448 ,) # \u7ed8\u5236\u90e8\u5206\u5019\u9009\u533a\u57df\u7684\u8d1f\u6837\u672c fig = plt . imshow ( img ) # \u904d\u5386\u6240\u6709\u7684\u8d1f\u6837\u672c\u7684\u5019\u9009\u533a\u57df\uff0c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for idx in negitivate_proposal_ids : # \u8d1f\u6837\u672c\u7684proposals boxes = proposals [ 0 ][ idx ] # \u53d6\u4f5910\u4e3a0\u7684\u8d1f\u6837\u672c\u8fdb\u884c\u5c55\u793a if idx % 10 == 0 : fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"white\" , linewidth = 1 )) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 3.2.2 FastRCNN\u7684\u635f\u5931\u51fd\u6570 \u00b6 FastRCNN\u7684\u8f93\u51fa\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u4e00\u90e8\u5206\u662fsoftmax\u5c42\u8fdb\u884c\u5206\u7c7b\uff0c\u8f93\u51fa\u7c7b\u522b\u6709K\u4e2a\u7c7b\u522b\u52a0\u4e0a\u201d\u80cc\u666f\u201d\u7c7b\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u56de\u5f52bounding box regressor\u3002\u4e5f\u5c31\u662f\uff1a \u4e00\u90e8\u5206\u8f93\u51fa\u5728K+1\u4e2a\u7c7b\u522b\u4e0a\u7684\u79bb\u6563\u6982\u7387\u5206\u5e03\uff08\u6bcf\u4e2a\u5019\u9009\u533a\u57df\uff09\uff0c p=(p0,p1,...,pk) p=(p0,p1,...,pk) \u3002\u901a\u5e38\uff0c\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\u7684K+1\u4e2a\u8f93\u51fa\u4e0a\u7684Softmax\u6765\u8ba1\u7b97p\u3002 \u53e6\u4e00\u90e8\u5206\u8f93\u51fa\u5bf9\u4e8e\u7531K\u4e2a\u7c7b\u522b\u4e2d\u7684\u6bcf\u4e00\u4e2a\u68c0\u6d4b\u6846\u56de\u5f52\u504f\u79fb\uff0c t^{k}=(t_{x}^{k},t_{y}^{k},t_{w}^{k},t_{h}^{k}) t^{k}=(t_{x}^{k},t_{y}^{k},t_{w}^{k},t_{h}^{k}) \u3002\u5176\u4e2d t_k t_k \u6307\u5b9a\u76f8\u5bf9\u4e8e\u5019\u9009\u6846\u7684\u5c3a\u5ea6\u4e0d\u53d8\u8f6c\u6362\u548c\u5bf9\u6570\u7a7a\u95f4\u9ad8\u5ea6/\u5bbd\u5ea6\u79fb\u4f4d\uff0c\u4e0e\u5728RPN\u7f51\u7edc\u4e2d\u662f\u4e00\u6837\u7684\u3002 \u6bcf\u4e2a\u8bad\u7ec3\u7684\u5019\u9009\u533a\u57df\u7528 \u5206\u7c7b\u76ee\u6807\u503cu\u548c\u68c0\u6d4b\u6846\u56de\u5f52\u76ee\u6807\u503cv\u6807\u8bb0 \u3002\u80cc\u666f\u6837\u672c\u7528u=0\u6765\u8868\u793a\uff0c\u5bf9\u6bcf\u4e2a\u6807\u8bb0\u7684\u5019\u9009\u533a\u57df\u4f7f\u7528\u591a\u4efb\u52a1\u635f\u5931L\u4ee5\u8054\u5408\u8bad\u7ec3\u5206\u7c7b\u548c\u68c0\u6d4b\u6846\u56de\u5f52\uff1a \u5176\u4e2d L_{cls}(p, u) = -\\log p_u L_{cls}(p, u) = -\\log p_u \uff0c\u8868\u793a\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u7b2c\u4e8c\u4e2a\u635f\u5931 L_{loc} L_{loc} \uff0c\u662f\u5b9a\u4e49\u76ee\u6807\u503c\u548c\u9884\u6d4b\u68c0\u6d4b\u6846\u7684\u56db\u5143\u7ec4\u4e4b\u95f4\u7684\u635f\u5931\u4f7f\u7528smoothL1\u635f\u5931\u8ba1\u7b97\uff0c\u540c\u6837\u662f\u53ea\u6709\u6b63\u6837\u672c\uff08\u975e\u80cc\u666f\uff09\u7684\u5019\u9009\u533a\u57df\u624d\u8ba1\u7b97\u56de\u5f52\u635f\u5931\uff0c\u53c2\u6570\u03bb\u8bbe\u4e3a1\u3002 3.3 FasterRCNN\u7684\u8bad\u7ec3 \u00b6 \u524d\u9762\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u7f51\u7edc\u6a21\u578b\u67b6\u6784\u548c\u9884\u6d4b\u7ed3\u679c\uff0c\u5728\u7f51\u7edc\u9884\u6d4b\u524d\u6211\u4eec\u9700\u8981\u5bf9\u7f51\u7edc\u8fdb\u884c\u8bad\u7ec3\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6765\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3\uff0c\u6a21\u578b\u8bad\u7ec3\u4e5f\u5c31\u662f\u8981\u4f7f\u7528\u635f\u5931\u51fd\u6570\uff0c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u5229\u7528\u4f18\u5316\u5668\u8fdb\u884c\u53c2\u6570\u66f4\u65b0\uff0c\u8bad\u7ec3\u7684\u6d41\u7a0b\u662f\uff1a \u4f7f\u7528Dataloader\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e \u6307\u5b9a\u4f18\u5316\u5668\uff1a\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u52a0\u52a8\u91cf\u7684SGD\u65b9\u6cd5 \u8bbe\u7f6e\u8f6e\u6b21epoch\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\u83b7\u53d6batch\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u8ba1\u7b97\u635f\u5931\u51fd\u6570\uff0c\u4f7f\u7528\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u53c2\u6570\uff0c\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3 \u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u8fd9\u4e2a\u6d41\u7a0b\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3\u3002\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u4f7f\u7528Dataloader\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e from torch.utils.data import DataLoader def collate_fn ( batch ): return tuple ( zip ( * batch )) # \u83b7\u53d6batch\u7684\u6570\u636e\uff0c\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3 train_data_loader = DataLoader ( dataset , batch_size = 2 , shuffle = True , collate_fn = collate_fn ) \u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u4e00\u4e2abatch\u4e2d\u7684\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a # \u904d\u5386\u6570\u636e\uff0c\u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u6570\u636e\u8fdb\u884c\u5c55\u793a for i , data in enumerate ( train_data_loader ): inputs , labels = data # batch\u7684\u5927\u5c0f print ( '\u56fe\u7247\u4e2a\u6570\uff1a' , len ( inputs )) print ( '\u76ee\u6807\u503c\uff1a' , labels ) break \u7ed3\u679c\u4e3a\uff1a \u56fe\u7247\u4e2a\u6570 \uff1a 2 \u76ee\u6807\u503c \uff1a ({ 'boxes' : tensor ([[ 654.4000 , 0.0000 , 798.4000 , 744.3851 ], [ 481.6000 , 79.1444 , 774.4000 , 742.2460 ], [ 403.2000 , 320.8556 , 619.2000 , 795.7219 ], [ 160.0000 , 329.4117 , 488.0000 , 793.5829 ], [ 75.2000 , 348.6631 , 265.6000 , 774.3316 ], [ 35.2000 , 468.4492 , 102.4000 , 648.1283 ], [ 1.6000 , 444.9198 , 96.0000 , 750.8021 ]], dtype = torch . float64 ), 'labels' : tensor ([ 10 , 10 , 10 , 10 , 10 , 10 , 10 ]), 'image_id' : tensor ([ 3172 ]), 'area' : tensor ([ 31320. , 56730. , 29970. , 44485. , 23681. , 3528. , 8437. ]), 'iscrowd' : tensor ([ 0 , 0 , 0 , 0 , 0 , 0 , 0 ])}, { 'boxes' : tensor ([[ 432.0000 , 170.6666 , 571.2000 , 206.9334 ], [ 604.8000 , 142.9333 , 648.0000 , 183.4667 ]], dtype = torch . float64 ), 'labels' : tensor ([ 6 , 6 ]), 'image_id' : tensor ([ 1001 ]), 'area' : tensor ([ 1479. , 513. ]), 'iscrowd' : tensor ([ 0 , 0 ])} \u4f18\u5316\u5668\u8bbe\u7f6e # \u83b7\u53d6\u6240\u6709\u8981\u8fdb\u884c\u8bad\u7ec3\u7684\u53c2\u6570\uff0c\u8bbe\u7f6e\u4f18\u5316\u5668 params = [ p for p in model . parameters () if p . requires_grad ] optimizer = torch . optim . SGD ( params , lr = 0.005 , momentum = 0.9 , weight_decay = 0.0005 ) \u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 \u8fed\u4ee3\u6b21\u6570 itr = 1 # \u5b58\u653e\u8bad\u7ec3\u635f\u5931 total_train_loss = [] # \u635f\u5931\u503c losses_value = 0 # \u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( 2 ): # \u8bad\u7ec3\u6a21\u5f0f model . train () train_loss = [] # \u8fdb\u5ea6\u6761 # \u904d\u5386\u6570\u636e\uff0c\u83b7\u53d6\u56fe\u50cf\uff0c\u76ee\u6807\u503c\u548c\u56fe\u50cfid for images , targets in train_data_loader : # \u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3\uff0c\u83b7\u53d6\u635f\u5931\u503c(RPN\u7684\u635f\u5931+FastRCNN\u7684\u635f\u5931),\u5c06\u4fe1\u606f\u6253\u5370\u51fa\u6765\u5206\u6790 loss_dict = model ( images , targets ) print ( loss_dict ) # \u5c06\u635f\u5931\u6c42\u548c losses = sum ( loss for loss in loss_dict . values ()) # \u83b7\u53d6loss\u503c losses_value = losses . item () train_loss . append ( losses_value ) # \u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u66f4\u65b0\u53c2\u6570 optimizer . zero_grad () losses . backward () optimizer . step () # \u65e5\u5fd7\u4fe1\u606f print ( f \"Epoch: { epoch + 1 } , Batch: { itr } , Loss: { losses_value } \" ) # \u8fed\u4ee3\u6b21\u6570\u589e1 itr += 1 # \u83b7\u53d6\u5f53\u524d\u8f6e\u6b21\u7684\u635f\u5931 epoch_train_loss = np . mean ( train_loss ) # \u8f6e\u6b21\u635f\u5931\u5199\u5165\u5230\u5217\u8868\u4e2d total_train_loss . append ( epoch_train_loss ) \u7ed3\u679c\u4e3a\uff1a { 'loss_classifier' : tensor ( 29.4023 , grad_fn =< NllLossBackward0 > ), 'loss_box_reg' : tensor ( 2.7863 , grad_fn =< DivBackward0 > ), 'loss_objectness' : tensor ( 6.2046 , grad_fn =< BinaryCrossEntropyWithLogitsBackward0 > ), 'loss_rpn_box_reg' : tensor ( 0.8658 , dtype = torch . float64 , grad_fn =< DivBackward0 > )} Epoch : 1 , Batch : 1 , Loss : 39.25891468526476 { 'loss_classifier' : tensor ( 60.0640 , grad_fn =< NllLossBackward0 > ), 'loss_box_reg' : tensor ( 0.72087 , grad_fn =< DivBackward0 > ), 'loss_objectness' : tensor ( 0.22394 , grad_fn =< BinaryCrossEntropyWithLogitsBackward0 > ), 'loss_rpn_box_reg' : tensor ( 0.291624814647 , dtype = torch . float64 , grad_fn =< DivBackward0 > )} Epoch : 1 , Batch : 2 , Loss : 61.38612275054647 \u3002\u3002\u3002\u3002\u3002\u3002 \u635f\u5931\u51fd\u6570\u7684\u7ed3\u679c\u4e2d\u5305\u542b\uff1arpn\u7684\u635f\u5931\uff08loss_objectness\uff0closs_rpn_box_reg\uff09\u548cfastRCNN\u7684\u635f\u5931\uff08loss_classifier\uff0closs_box_reg\uff09\uff0c\u5c06\u4ed6\u4eec\u52a0\u5728\u4e00\u8d77\u5c31\u53ef\u5f97\u5230\u6574\u4e2a\u6a21\u578b\u7684\u635f\u5931\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u3002 \u6211\u4eec\u591a\u8bad\u7ec3\u51e0\u4e2a\u8f6e\u6b21\uff0c\u635f\u5931\u51fd\u6570\u7684\u53d8\u6362\u66f2\u7ebf\u5982\u4e0b\u56fe\u6240\u793a\uff1a # \u7ed8\u5236\u635f\u5931\u51fd\u6570\u53d8\u5316\u7684\u66f2\u7ebf plt . plot ( range ( len ( total_train_loss )),[ loss . numpy () for loss in total_train_loss ]) plt . grid () \u5f53\u6211\u4eec\u8bad\u7ec3\u597d\u6a21\u578b\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\u4e86\uff0c\u4e5f\u5c31\u662f\u672c\u8282\u5f00\u5934\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u7684\u5185\u5bb9\u3002 \u603b\u7ed3 \u719f\u6089FasterRCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u5229\u7528CNN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5229\u7528RPN\u751f\u6210\u5019\u9009\u533a\u57df\uff0c\u6700\u540e\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52 \u77e5\u9053anchor\u7684\u601d\u60f3 anchor\u6280\u672f\u5c06\u68c0\u6d4b\u95ee\u9898\u8f6c\u6362\u4e3a**\"\u8fd9\u4e2a\u56fa\u5b9a\u53c2\u8003\u6846\u4e2d\u6709\u6ca1\u6709\u76ee\u6807\uff0c\u76ee\u6807\u6846\u504f\u79bb\u53c2\u8003\u6846\u591a\u8fdc\"**\uff0c\u4e0d\u518d\u9700\u8981\u591a\u5c3a\u5ea6\u904d\u5386\u6ed1\u7a97 \u638c\u63e1RPN\u7f51\u7edc\u662f\u5982\u4f55\u8fdb\u884c\u5019\u9009\u533a\u57df\u7684\u751f\u6210\u7684 \u901a\u8fc7softmax\u5224\u65adanchors\u5c5e\u4e8epositive\u6216\u8005negative\uff0c\u518d\u5229\u7528bounding box regression\u4fee\u6b63anchors\u83b7\u5f97\u7cbe\u786e\u7684proposals \u638c\u63e1ROIPooling\u7684\u4f7f\u7528\u65b9\u6cd5 RoIpooling\u4f7f\u7528\u6700\u5927\u6c60\u5316\u5c06\u4efb\u4f55\u6709\u6548\u7684RoI\u533a\u57df\u5185\u7684\u7279\u5f81\u8f6c\u6362\u6210\u5177\u6709H\u00d7W\u7684\u56fa\u5b9a\u7a7a\u95f4\u8303\u56f4\u7684\u5c0ffeature map \u77e5\u9053fasterRCNN\u7684\u8bad\u7ec3\u65b9\u6cd5 \u6b63\u8d1f\u6837\u672c\u8bbe\u7f6e\u7684\u65b9\u6cd5\uff0c\u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u7aef\u5230\u7aef\u7684\u7f51\u7edc\u8bad\u7ec3","title":"2.3 Faster-RCNN\u7f51\u7edc"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#23-faster-rcnn","text":"\u5b66\u4e60\u76ee\u6807 \u719f\u6089FasterRCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u77e5\u9053anchor\uff08\u951a\u6846\uff09\u7684\u601d\u60f3 \u638c\u63e1RPN\u7f51\u7edc\u662f\u5982\u4f55\u8fdb\u884c\u5019\u9009\u533a\u57df\u7684\u751f\u6210\u7684 \u638c\u63e1ROIPooling\u7684\u4f7f\u7528\u65b9\u6cd5 \u77e5\u9053fasterRCNN\u7684\u8bad\u7ec3\u65b9\u6cd5 \u5728R-CNN\u548cFast RCNN\u7684\u57fa\u7840\u4e0a\uff0c\u57282016\u5e74\u63d0\u51fa\u4e86Faster RCNN\u7f51\u7edc\u6a21\u578b\uff0c\u5728\u7ed3\u6784\u4e0a\uff0cFaster RCNN\u5df2\u7ecf\u5c06\u5019\u9009\u533a\u57df\u7684\u751f\u6210\uff0c\u7279\u5f81\u63d0\u53d6\uff0c\u76ee\u6807\u5206\u7c7b\u53ca\u76ee\u6807\u6846\u7684\u56de\u5f52\u90fd\u6574\u5408\u5728\u4e86\u4e00\u4e2a\u7f51\u7edc\u4e2d\uff0c\u7efc\u5408\u6027\u80fd\u6709\u8f83\u5927\u63d0\u9ad8\uff0c\u5728\u68c0\u6d4b\u901f\u5ea6\u65b9\u9762\u5c24\u4e3a\u660e\u663e\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u7ed9\u5927\u5bb6\u8be6\u7ec6\u4ecb\u7ecdfasterRCNN\u7f51\u7edc\u6a21\u578b\u3002\u7f51\u7edc\u57fa\u672c\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a Faster RCNN\u53ef\u4ee5\u770b\u6210\u662f\u533a\u57df\u751f\u6210\u7f51\u7edc(RPN)\u4e0eFast RCNN\u7684\u7ec4\u5408\uff0c\u5176\u4e2d\u533a\u57df\u751f\u6210\u7f51\u7edc(RPN)\u66ff\u4ee3\u9009\u62e9\u6027\u641c\u7d22\u6765\u751f\u6210\u5019\u9009\u533a\u57df\uff0cFast RCNN\u7528\u6765\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\u3002","title":"2.3 Faster-RCNN\u7f51\u7edc"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#1","text":"FasterRCNN\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\uff1a 1\u3001 \u7279\u5f81\u63d0\u53d6 \uff1a\u5c06\u6574\u4e2a\u56fe\u50cf\u7f29\u653e\u81f3\u56fa\u5b9a\u7684\u5927\u5c0f\u8f93\u5165\u5230CNN\u7f51\u7edc\u4e2d\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5f97\u5230\u7279\u5f81\u56fe\u3002 2\u3001 \u5019\u9009\u533a\u57df\u63d0\u53d6 \uff1a\u8f93\u5165\u7279\u5f81\u56fe\uff0c\u4f7f\u7528\u533a\u57df\u751f\u6210\u7f51\u7edcRPN\uff0c\u4ea7\u751f\u4e00\u4e9b\u5217\u7684\u5019\u9009\u533a\u57df 3\u3001 ROIPooling : \u4e0eFast RCNN\u7f51\u7edc\u4e2d\u4e00\u6837\uff0c\u4f7f\u7528\u6700\u5927\u6c60\u5316\u56fa\u5b9a\u5019\u9009\u533a\u57df\u7684\u5c3a\u5bf8\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5904\u7406 4\u3001 \u76ee\u6807\u5206\u7c7b\u548c\u56de\u5f52 \uff1a\u4e0eFast RCNN\u7f51\u7edc\u4e2d\u4e00\u6837\uff0c\u4f7f\u7528\u4e24\u4e2a\u540c\u7ea7\u5c42:K+1\u4e2a\u7c7b\u522b\u7684SoftMax\u5206\u7c7b\u5c42\u548c\u8fb9\u6846\u7684\u56de\u5f52\u5c42\uff0c\u6765\u5b8c\u6210\u76ee\u6807\u7684\u5206\u7c7b\u548c\u56de\u5f52\u3002 Faster R-CNN\u7684\u6d41\u7a0b\u4e0eFast R-CNN\u7684\u533a\u522b\u4e0d\u662f\u5f88\u5927\uff0c\u91cd\u8981\u7684\u6539\u8fdb\u662f\u4f7f\u7528RPN\u7f51\u7edc\u6765\u66ff\u4ee3\u9009\u62e9\u6027\u641c\u7d22\u83b7\u53d6\u5019\u9009\u533a\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06Faster R-CNN\u7f51\u7edc\u770b\u505aRPN\u548cFast R-CNN\u7f51\u7edc\u7684\u7ed3\u5408\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528torchvison\u5de5\u5177\u5305\u6765\u770b\u4e0bfasterRCNN\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u4f7f\u7528\u8fc7\u7a0b\u3002torchvision\u5b89\u88c5\u65f6\u76f4\u63a5\u4f7f\u7528\uff1a pip install torchvision \u5373\u53ef\uff0c\u5728\u5b89\u88c5torchvision\u65f6\uff0c\u5e94\u4fdd\u8bc1\u5df2\u5b89\u88c5\u4e86pytorch\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\uff1a \u83b7\u53d6\u6570\u636e\u548c\u52a0\u8f7d\u9884\u8bad\u7ec3\u7f51\u7edc \u83b7\u53d6\u7f51\u7edc\u7684\u76ee\u6807\u68c0\u6d4b\u7ed3\u679c \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u9996\u5148\u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305: # pytorh\u76f8\u5173\u7684\u5de5\u5177\u5305 import torch import torchvision import torchvision.transforms as transforms from torchvision.io import read_image # \u8bfb\u53d6\u56fe\u50cf\u7684\u5de5\u5177\u5305 from PIL import Image # \u7ed8\u56fe import matplotlib.pyplot as plt","title":"1. \u7f51\u7edc\u5de5\u4f5c\u6d41\u7a0b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#11","text":"\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u52a0\u8f7d\u4e00\u5f20\u56fe\u7247\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff1a # \u83b7\u53d6\u56fe\u7247 img = Image . open ( 'img3.jpg' ) plt . imshow ( img ) \u56fe\u7247\u5c55\u793a\u5982\u4e0b\uff1a \u539f\u59cb\u56fe\u50cf\u7684\u5927\u5c0f img . size \u8f93\u51fa\u4e3a\uff1a (994, 734) \u5728\u5c06\u56fe\u50cf\u9001\u5165\u7f51\u7edc\u4e4b\u524d\uff0c\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4e86\u5c3a\u5ea6\u7684\u8c03\u6574\uff0c\u7c7b\u578b\u8f6c\u6362\u7b49\u5904\u7406\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u5c06\u56fe\u7247\u683c\u5f0f\u8f6c\u6362\u4e3atensor\u5f62\u5f0f\uff0c\u5927\u5c0f\u8f6c\u6362\u4e3a800x800\u7684\u5927\u5c0f transform = transforms . Compose ([ transforms . ToTensor (), transforms . Resize (( 800 , 800 ))]) img = transform ( img ) \u9001\u5165\u7f51\u7edc\u4e2d\u56fe\u50cf\u7684\u5927\u5c0f\u4e3a\uff1a img . shape \u8f93\u51fa\u4e3a(pytorch\u4e2d\u9001\u5165\u7f51\u7edc\u4e2d\u7684\u56fe\u50cf\u7684\u8868\u793a\u5f62\u5f0f\u3010C\uff0cH\uff0cW\u3011)\uff1a torch.Size([3, 800, 800]) \u6211\u4eec\u5c06\u5176\u5c55\u793a\u51fa\u6765\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u8fdb\u884c\u901a\u9053\u7684\u8c03\u6574 plt . imshow ( img . permute ( 1 , 2 , 0 )) \u5c55\u793a\u7ed3\u679c\u4e3a\uff1a \u56fe\u50cf\u88ab\u6211\u4eec\u4ece\u539f\u59cb\u7684(994, 734)\u8f6c\u6362\u4e3a800x800\u7684\u5927\u5c0f\uff0c\u53ef\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\u3002","title":"1.1 \u6570\u636e\u52a0\u8f7d"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#12","text":"\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u52a0\u8f7d\u4f7f\u7528coco\u6570\u636e\u96c6\u9884\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u5bf9\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b\uff0cCoCo\u6570\u636e\u9884\u8bad\u7ec3\u7684\u6a21\u578b\u53ef\u68c0\u6d4b90\u7c7b\u7684\u76ee\u6807\uff0c\u5982\u4e0b\u6240\u793a\uff1a # coco\u6570\u636e\u96c6\u7684class\uff0c\u517190\u4e2a\u7c7b\u522b\uff1a\u4eba\uff0c\u81ea\u884c\u8f66\uff0c\u706b\u8f66\uff0c\u3002\u3002\u3002 coco_names = [ '__background__' , 'person' , 'bicycle' , 'car' , 'motorcycle' , 'airplane' , 'bus' , 'train' , 'truck' , 'boat' , 'traffic light' , 'fire hydrant' , 'N/A' , 'stop sign' , 'parking meter' , 'bench' , 'bird' , 'cat' , 'dog' , 'horse' , 'sheep' , 'cow' , 'elephant' , 'bear' , 'zebra' , 'giraffe' , 'N/A' , 'backpack' , 'umbrella' , 'N/A' , 'N/A' , 'handbag' , 'tie' , 'suitcase' , 'frisbee' , 'skis' , 'snowboard' , 'sports ball' , 'kite' , 'baseball bat' , 'baseball glove' , 'skateboard' , 'surfboard' , 'tennis racket' , 'bottle' , 'N/A' , 'wine glass' , 'cup' , 'fork' , 'knife' , 'spoon' , 'bowl' , 'banana' , 'apple' , 'sandwich' , 'orange' , 'broccoli' , 'carrot' , 'hot dog' , 'pizza' , 'donut' , 'cake' , 'chair' , 'couch' , 'potted plant' , 'bed' , 'N/A' , 'dining table' , 'N/A' , 'N/A' , 'toilet' , 'N/A' , 'tv' , 'laptop' , 'mouse' , 'remote' , 'keyboard' , 'cell phone' , 'microwave' , 'oven' , 'toaster' , 'sink' , 'refrigerator' , 'N/A' , 'book' , 'clock' , 'vase' , 'scissors' , 'teddy bear' , 'hair drier' , 'toothbrush' ] \u5b9e\u4f8b\u5316faster-RCNN\u6a21\u578b\uff0c\u5e76\u52a0\u8f7d\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570\uff1a # \u5b9e\u4f8b\u5316\u6a21\u578b model = torchvision . models . detection . fasterrcnn_resnet50_fpn ( pretrained = True ) \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u9884\u6d4b\u6a21\u5f0f\uff1a # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3aeval\u6a21\u5f0f model . eval () \u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u770b\u4e0b\u6a21\u578b\u7684\u7ed3\u6784\uff0c\u4e3a\u4e86\u66f4\u6e05\u6670\u7684\u4e86\u89e3fasterRCNN\u7684\u7ed3\u6784\uff0c\u5220\u9664\u4e86\u4e00\u4e9b\u7ec6\u8282\u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\uff1a FasterRCNN ( ( transform ): GeneralizedRCNNTransform ( Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]) Resize ( min_size = ( 800 ,), max_size = 1333 , mode = 'bilinear' ) ) ( backbone ): BackboneWithFPN ( ( body ): IntermediateLayerGetter ( ( conv1 ): Conv2d ( 3 , 64 , kernel_size = ( 7 , 7 ), stride = ( 2 , 2 ), padding = ( 3 , 3 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ( maxpool ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 1 , dilation = 1 , ceil_mode = False ) \u3002\u3002\u3002\u3002\u3002 ( fpn ): FeaturePyramidNetwork ( ( inner_blocks ): ModuleList ( ( 0 ): Conv2d ( 256 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 1 ): Conv2d ( 512 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 2 ): Conv2d ( 1024 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 3 ): Conv2d ( 2048 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) \u3002\u3002\u3002\u3002 ) ) ( rpn ): RegionProposalNetwork ( ( anchor_generator ): AnchorGenerator () ( head ): RPNHead ( ( conv ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( cls_logits ): Conv2d ( 256 , 3 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( bbox_pred ): Conv2d ( 256 , 12 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ) ) ( roi_heads ): RoIHeads ( ( box_roi_pool ): MultiScaleRoIAlign ( featmap_names = [ '0' , '1' , '2' , '3' ], output_size = ( 7 , 7 ), sampling_ratio = 2 ) ( box_head ): TwoMLPHead ( ( fc6 ): Linear ( in_features = 12544 , out_features = 1024 , bias = True ) ( fc7 ): Linear ( in_features = 1024 , out_features = 1024 , bias = True ) ) ( box_predictor ): FastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 91 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 364 , bias = True ) ) ) ) \u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff0ctorchvision\u4e2d\u7684fasterRCNN\u7684\u4e3b\u8981\u5305\u542b\uff1a Transform: \u5b8c\u6210\u6570\u636e\u7684\u6807\u51c6\u5316\u5904\u7406\uff0c\u5e76\u4e14\u8bbe\u7f6e\u56fe\u50cf\u7684\u5927\u5c0f\u6700\u5c0f\u4e3a800 backbone: \u4e3b\u8981\u5305\u62ec\u7279\u5f81\u63d0\u53d6\u7684body\u90e8\u5206\u548c\u7279\u5f81\u878d\u5408fpn\u7f51\u7edc rpn: \u4e3b\u8981\u7528\u6765\u751f\u6210\u5019\u9009\u533a\u57df Roi_heads: \u8fd4\u56de\u68c0\u6d4b\u7ed3\u679c","title":"1.2 \u6a21\u578b\u52a0\u8f7d"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#13","text":"\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff1a # \u76f4\u63a5\u8fdb\u884c\u9884\u6d4b pred = model ([ img ]) \u9884\u6d4b\u7ed3\u679c\u4e2d\u5305\u62ec\u7f51\u7edc\u7684\u68c0\u6d4b\u6846\uff0c\u7c7b\u522b\u4fe1\u606f\u53ca\u6bcf\u4e2a\u68c0\u6d4b\u6846\u5bf9\u5e94\u7684\u7f6e\u4fe1\u5ea6\u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a [{'boxes': tensor([[ 22.1207, 68.7210, 309.7885, 791.1606], [359.6369, 110.5316, 558.7224, 780.3055], [ 86.0154, 291.1066, 458.9595, 785.5111], [516.1552, 217.6513, 767.1631, 745.2240], [532.2499, 537.4729, 771.5016, 790.0735], [664.4442, 284.9143, 722.0727, 367.2327], [ 18.3442, 456.8345, 734.2274, 777.7546]], grad_fn=<StackBackward0>), 'labels': tensor([ 1, 1, 1, 1, 62, 64, 15]), 'scores': tensor([0.9981, 0.9981, 0.9980, 0.9962, 0.9832, 0.0695, 0.0604], grad_fn=<IndexBackward0>)}] \u6bcf\u4e2a\u68c0\u6d4b\u6846\u5bf9\u5e94\u7684\u7c7b\u522b\u901a\u8fc7labels\u8fdb\u884c\u8868\u793a\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u83b7\u53d6\u6bcf\u4e2a\u68c0\u6d4b\u6846\u7684\u7c7b\u522b\u540d\u79f0\uff1a # \u83b7\u53d6\u7c7b\u522b\u540d\u79f0,\u6846\u53ca\u5bf9\u5e94\u7684\u7f6e\u4fe1\u5ea6 pred_class = [ coco_names [ i ] for i in list ( pred [ 0 ][ 'labels' ] . numpy ())] pred_boxes = [[( i [ 0 ], i [ 1 ]), ( i [ 2 ], i [ 3 ])] for i in list ( pred [ 0 ][ 'boxes' ] . detach () . numpy ())] pred_score = list ( pred [ 0 ][ 'scores' ] . detach () . numpy ()) \u5c06\u6846\u7684\u7c7b\u522b\u5982\u4e0b\u6240\u793a\uff1a [ 'person' , 'person' , 'person' , 'person' , 'chair' , 'potted plant' , 'bench' ] \u5bf9\u5e94\u7684\u6982\u7387\u503c\u4e3a\uff1a [0.9980987, 0.9980934, 0.9980253, 0.99623007, 0.9832487, 0.069459654, 0.060414173] \u6211\u4eec\u5c06\u8fd9\u4e9b\u6846\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a # \u56fe\u50cf\u8bfb\u53d6 img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u56fe\u50cf\u5c55\u793a fig = plt . imshow ( img ) # \u5c06\u6846\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( pred_boxes ): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ]), width = boxes [ 1 ][ 0 ] - boxes [ 0 ][ 0 ], height = boxes [ 1 ][ 1 ] - boxes [ 0 ][ 1 ], fill = False , edgecolor = \"blue\" , linewidth = 1 )) plt . show () \u5728\u8fd9\u4e9b\u9884\u6d4b\u6846\u4e2d\u6709\u4e9b\u76ee\u6807\u7684\u7f6e\u4fe1\u5ea6\u8f83\u4f4e\uff0c\u6211\u4eec\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8bbe\u7f6e\u7f6e\u4fe1\u5ea6\u9608\u503c\uff1a # \u8fc7\u6ee4\u5206\u6570\u8f83\u4f4e\u7684\u9884\u6d4b threshold = 0.5 # \u56e0pred_score\u662f\u4ece\u5927\u5927\u5c0f\u8fdb\u884c\u6392\u5217\u7684\uff0c\u53ea\u8981\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u5373\u53ef pred_t = [ pred_score . index ( x ) for x in pred_score if x > threshold ][ - 1 ] pred_boxes = pred_boxes [: pred_t + 1 ] pred_class = pred_class [: pred_t + 1 ] \u83b7\u53d6\u8fc7\u6ee4\u540e\u7684\u6846\u53ca\u5bf9\u5e94\u7684\u7c7b\u522b\u7ed3\u679c\u5c55\u793a\u5728\u56fe\u50cf\u4e0a\uff1a # \u5c06\u8fc7\u6ee4\u540e\u7684\u7ed3\u6784\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u7ed8\u5236\u56fe\u50cf fig = plt . imshow ( img ) # \u5c06\u6846\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( pred_boxes ): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ]), width = boxes [ 1 ][ 0 ] - boxes [ 0 ][ 0 ], height = boxes [ 1 ][ 1 ] - boxes [ 0 ][ 1 ], fill = False , edgecolor = \"g\" , linewidth = 1 )) plt . show () \u6700\u7ec8\u7684\u68c0\u6d4b\u7ed3\u679c\uff1a \u4e0a\u8ff0\u6211\u4eec\u4ecb\u7ecd\u4e86Faster RCNN\u7684\u5de5\u4f5c\u6d41\u7a0b\u5e76\u4e14\u7ed9\u5927\u5bb6\u5c55\u793a\u4e86\u7f51\u7edc\u7684\u68c0\u6d4b\u7ed3\u679c\u3002\u90a3\u63a5\u4e0b\u6765\u6211\u4eec\u89e3\u51b3\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a 1\u3001\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e00\u90e8\u5206\u662f\u600e\u4e48\u6784\u5efa\uff0c\u600e\u4e48\u5b8c\u6210\u76f8\u5e94\u7684\u529f\u80fd\u7684\uff1f 2\u3001\u600e\u4e48\u8bad\u7ec3fastrcnn\u7f51\u7edc\u53bb\u5b8c\u6210\u6211\u4eec\u81ea\u5df1\u7684\u4efb\u52a1\uff1f \u90a3\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002","title":"1.3 \u6a21\u578b\u9884\u6d4b\u8fc7\u7a0b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#2","text":"Faster RCNN\u7684\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6211\u4eec\u4f9d\u7136\u5c06\u7f51\u7edc\u5206\u4e3a\u56db\u90e8\u5206\uff1a Backbone \uff1aBackbone\u7531CNN\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6784\u6210\uff0c\u5e38\u7528\u7684\u662fVGG\u548cresnet, \u7528\u6765\u63d0\u53d6\u56fe\u50cf\u4e2d\u7684\u7279\u5f81\uff0c\u83b7\u53d6\u56fe\u50cf\u7684\u7279\u5f81\u56fe\u3002\u8be5\u7279\u5f81\u56fe\u88ab\u5171\u4eab\u7528\u4e8e\u540e\u7eedRPN\u5c42\u751f\u6210\u5019\u9009\u533a\u57df\u548cROIPooling\u5c42\u4e2d\u3002 RPN\u7f51\u7edc \uff1aRPN\u7f51\u7edc\u7528\u4e8e\u751f\u6210\u5019\u9009\u533a\u57df\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u76ee\u6807\u68c0\u6d4b\u3002 Roi Pooling : \u8be5\u90e8\u5206\u6536\u96c6\u56fe\u50cf\u7684\u7279\u5f81\u56fe\u548cRPN\u7f51\u7edc\u63d0\u53d6\u7684\u5019\u9009\u533a\u57df\u4f4d\u7f6e\uff0c\u7efc\u5408\u4fe1\u606f\u540e\u83b7\u53d6\u56fa\u5b9a\u5c3a\u5bf8\u7684\u7279\u5f81\uff0c\u9001\u5165\u540e\u7eed\u5168\u8fde\u63a5\u5c42\u5224\u5b9a\u76ee\u6807\u7c7b\u522b\u548c\u786e\u5b9a\u76ee\u6807\u4f4d\u7f6e\u3002 \u76ee\u6807\u5206\u7c7b\u4e0e\u56de\u5f52 : \u8be5\u90e8\u5206\u5229\u7528ROIpooling\u8f93\u51fa\u7279\u5f81\u5411\u91cf\u8ba1\u7b97\u5019\u9009\u533a\u57df\u7684\u7c7b\u522b\uff0c\u5e76\u901a\u8fc7\u56de\u5f52\u83b7\u5f97\u68c0\u6d4b\u6846\u6700\u7ec8\u7684\u7cbe\u786e\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ece\u8fd9\u56db\u4e2a\u65b9\u9762\u6765\u8be6\u7ec6\u5206\u6790fasterRCNN\u7f51\u7edc\u7684\u6784\u6210\uff0c\u5e76\u7ed3\u5408\u6e90\u7801\u7406\u89e3\u6bcf\u4e00\u90e8\u5206\u5b9e\u73b0\u7684\u529f\u80fd\u3002 \u5728\u8fdb\u884c\u7f51\u7edc\u5904\u7406\u524d\uff0c\u6211\u4eec\u5148\u5c06\u56fe\u50cf\u9001\u5165transform\u8fdb\u884c\u5904\u7406\uff1a\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c # \u9001\u5165\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u662f\u3010N,C,H,W\u3011 images = [ img ] images , targets = model . transform ( images , targets = None ) \u63a5\u4e0b\u6765\u8bb2images\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u5904\u7406\u5373\u53ef\u3002","title":"2.\u6a21\u578b\u7ed3\u6784\u8be6\u89e3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#21backbone","text":"backbone\u4e00\u822c\u4e3aVGG\uff0cResNet\u7b49\u7f51\u7edc\u6784\u6210\uff0c\u4e3b\u8981\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5c06\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\u820d\u5f03\uff0c\u5f97\u5230\u7279\u5f81\u56fe\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5904\u7406\u3002 \u5728\u6e90\u7801\u4e2d\u4f7f\u7528ResNet + FPN \u7ed3\u6784\u6765\u63d0\u53d6\u7279\u5f81\u3002\u4e0e\u666e\u901a\u7684 FasterRCNN \u53ea\u9700\u8981\u5c06\u4e00\u4e2a\u7279\u5f81\u56fe\u8f93\u5165\u5230\u540e\u7eed\u7f51\u7edc\u4e2d\u4e0d\u540c\uff0c\u7531\u4e8e\u52a0\u5165 FPN\u7ed3\u6784\uff0c\u9700\u8981\u5c06\u591a\u4e2a\u7279\u5f81\u56fe\u9010\u4e2a\u9001\u5165\u5230\u540e\u7eed\u7f51\u7edc\u4e2d\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a Resnet\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0cFPN\u7ed3\u6784\u4f5c\u7528\u662f\u5f53\u524d\u5c42\u7684\u7279\u5f81\u56fe\u4f1a\u878d\u5408\u672a\u6765\u5c42\u7684\u7279\u5f81\u8fdb\u884c\u4e0a\u91c7\u6837\uff0c\u5e76\u52a0\u4ee5\u5229\u7528\u3002\u56e0\u4e3a\u6709\u4e86\u8fd9\u6837\u4e00\u4e2a\u7ed3\u6784\uff0c\u5f53\u524d\u7684\u7279\u5f81\u56fe\u5c31\u53ef\u4ee5\u83b7\u53d6\u672a\u6765\u5c42\u7684\u4fe1\u606f\uff0c\u4e5f\u5c31\u5c06\u4f4e\u9636\u7279\u5f81\u4e0e\u9ad8\u9636\u7279\u5f81\u5c31\u6709\u673a\u878d\u5408\u8d77\u6765\u4e86\uff0c\u63d0\u5347\u68c0\u6d4b\u7cbe\u5ea6\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u8fd9\u91ccResNet\u548cFPN\u7684\u5b8c\u6574\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a:Resnet\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0cFPN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u878d\u5408\u83b7\u53d6\u591a\u4e2a\u7279\u5f81\u56fe\u540e\uff0c\u8f93\u5165\u5230RPN\u7f51\u7edc\u4e2d\u7684\u7279\u5f81\u56fe\u662f[p2,p3,p4,p5,p6] \uff0c\u800c\u4f5c\u4e3a\u540e\u7eed\u76ee\u6807\u68c0\u6d4b\u7f51\u7edcFastRCNN\u7684\u8f93\u5165\u5219\u662f [p2,p3,p4,p5] \u3002 \u6211\u4eec\u770b\u4e0b\u6e90\u7801\u5b9e\u73b0\u7684\u5185\u5bb9\uff1a 1\u3001resnet\u7279\u5f81\u63d0\u53d6\u7684\u7ed3\u679c # \u4f7f\u7528backbone\u83b7\u53d6\u7279\u5f81\u56fe features_body = model . backbone . body ( images . tensors ) C2 , C3 , C4 , C5 = features_body . values () C2,C3,C4,C5\u662fresnet\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u7684\u7ed3\u679c\uff0c\u9001\u5165\u7f51\u7edc\u4e2d\u56fe\u50cf\u5927\u5c0f\u4e3a\uff083\uff0c800\uff0c800\uff09\uff0c\u7ecf\u8fc7\u7279\u5f81\u63d0\u53d6\u540e\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u4e3a\uff1a # C2.size():800/4 torch . Size ([ 1 , 256 , 200 , 200 ]) # C3.size():800/8 torch . Size ([ 1 , 512 , 100 , 100 ]) # C4.size():800/16 torch . Size ([ 1 , 1024 , 50 , 50 ]) # C5.size():800/32 torch . Size ([ 1 , 2048 , 25 , 25 ]) 2\u3001FPN\u7279\u5f81\u878d\u5408\u7684\u7ed3\u679c # FPN\u7f51\u7edc\u878d\u5408\uff1aC2,C3,C4,C5\u662fresnet\u63d0\u53d6\u7684\u7279\u5f81\u7ed3\u679c features_fpn = model . backbone . fpn ( features_body ) P2 , P3 , P4 , P5 , P6 = features_fpn . values () P2,P3,P4,P5,P6\u662f\u7279\u5f81\u878d\u5408\u4e4b\u540e\u7684\u7ed3\u679c\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\uff0c\u5176\u7279\u5f81\u56fe\u7684\u5927\u5c0f\uff1a # P2.size():800/4 torch . Size ([ 1 , 256 , 200 , 200 ]) # P3.size():800/8 torch . Size ([ 1 , 256 , 100 , 100 ]) # P4.size():800/16 torch . Size ([ 1 , 256 , 50 , 50 ]) # P5.size():800/32 torch . Size ([ 1 , 256 , 25 , 25 ]) # P6.size():800/64 torch . Size ([ 1 , 256 , 13 , 13 ]) \u90a3\u7f51\u7edc\u7684\u6574\u4f53\u67b6\u6784\u8868\u793a\u6210\uff1a","title":"2.1backbone"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#22-rpn","text":"\u7ecf\u5178\u7684\u68c0\u6d4b\u65b9\u6cd5\u751f\u6210\u68c0\u6d4b\u6846\u90fd\u975e\u5e38\u8017\u65f6\uff0c\u5982overfeat\u4e2d\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u751f\u6210\u68c0\u6d4b\u6846\uff1b\u6216\u5982R-CNN\u4f7f\u7528\u9009\u62e9\u6027\u641c\u7d22\u65b9\u6cd5\u751f\u6210\u68c0\u6d4b\u6846\u3002\u800cFaster RCNN\u5219\u629b\u5f03\u4e86\u4f20\u7edf\u7684\u6ed1\u52a8\u7a97\u53e3\u548c\u9009\u62e9\u6027\u641c\u7d22\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u4f7f\u7528RPN\u751f\u6210\u5019\u9009\u533a\u57df\uff0c\u80fd\u6781\u5927\u63d0\u5347\u68c0\u6d4b\u901f\u5ea6\u3002 RPN\u7f51\u7edc\u7684\u4e3b\u8981\u6d41\u7a0b\u662f\uff1a 1\u3001\u751f\u6210\u4e00\u7cfb\u5217\u7684\u56fa\u5b9a\u53c2\u8003\u6846anchors,\u8986\u76d6\u56fe\u50cf\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c\u7136\u540e\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52 2\u3001\u5206\u7c7b\u5206\u652f\uff1a\u901a\u8fc7softmax\u5206\u7c7b\u5224\u65adanchor\u4e2d\u662f\u5426\u5305\u542b\u76ee\u6807 3\u3001\u56de\u5f52\u5206\u652f\uff1a\u8ba1\u7b97\u76ee\u6807\u6846\u5bf9\u4e8eanchors\u7684\u504f\u79fb\u91cf\uff0c\u4ee5\u83b7\u5f97\u7cbe\u786e\u7684\u5019\u9009\u533a\u57df 4\u3001\u6700\u540e\u7684Proposal\u5c42\u5219\u8d1f\u8d23\u7efc\u5408\u542b\u6709\u76ee\u6807\u7684anchors\u548c\u5bf9\u5e94bbox\u56de\u5f52\u504f\u79fb\u91cf\u83b7\u53d6\u5019\u9009\u533a\u57df\uff0c\u540c\u65f6\u5254\u9664\u592a\u5c0f\u548c\u8d85\u51fa\u8fb9\u754c\u7684\u5019\u9009\u533a\u57df\u3002","title":"2.2 RPN\u7f51\u7edc"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#221-anchors","text":"anchor\u5728\u76ee\u6807\u68c0\u6d4b\u4e2d\u8868\u793a \u56fa\u5b9a\u7684\u53c2\u8003\u6846 \uff0c\u9996\u5148\u9884\u8bbe\u4e00\u7ec4\u4e0d\u540c\u5c3a\u5ea6\u4e0d\u540c\u957f\u5bbd\u6bd4\u7684\u56fa\u5b9a\u53c2\u8003\u6846\uff0c\u8986\u76d6\u51e0\u4e4e\u6240\u6709\u4f4d\u7f6e\uff0c \u6bcf\u4e2a\u53c2\u8003\u6846\u8d1f\u8d23\u68c0\u6d4b\u4e0e\u5176\u4ea4\u5e76\u6bd4\u5927\u4e8e\u9608\u503c (\u8bad\u7ec3\u9884\u8bbe\u503c\uff0c\u5e38\u75280.5\u62160.7) \u7684\u76ee\u6807 \uff0canchor\u6280\u672f\u5c06\u5019\u9009\u533a\u57df\u751f\u6210\u95ee\u9898\u8f6c\u6362\u4e3a \"\u8fd9\u4e2a\u56fa\u5b9a\u53c2\u8003\u6846\u4e2d\u6709\u6ca1\u6709\u76ee\u6807\uff0c\u76ee\u6807\u6846\u504f\u79bb\u53c2\u8003\u6846\u591a\u8fdc\" \uff0c\u4e0d\u518d\u9700\u8981\u591a\u5c3a\u5ea6\u904d\u5386\u6ed1\u7a97\uff0c\u771f\u6b63\u5b9e\u73b0\u4e86\u53c8\u597d\u53c8\u5feb\u3002 \u5728FastRCNN\u4e2d\u6846\u51fa\u591a\u5c3a\u5ea6\u3001\u591a\u79cd\u957f\u5bbd\u6bd4\u7684anchors,\u5982\u4e0b\u56fe\u6240\u793a\uff1a\u4e0b\u56fe\u4e2d\u5206\u522b\u662f\u5c3a\u5ea6\u4e3a32\uff0c64\uff0c128\uff0c\u957f\u5bbd\u6bd4\u4e3a1\uff1a1\uff0c1:2\uff0c2\uff1a1\u7684\u4e00\u7ec4anchors,\u6211\u4eec\u5229\u7528\u8fd9\u7ec4anchor\u5728\u7279\u5f81\u56fe\u4e0a\u8fdb\u884c\u6ed1\u52a8\uff0c\u5e76\u5bf9\u5e94\u5230\u539f\u56fe\u4e0a\u5373\u53ef\u83b7\u53d6\u4e00\u7cfb\u5217\u7684\u56fa\u5b9a\u53c2\u8003\u6846\u3002 \u7531\u4e8e\u6709 FPN \u7f51\u7edc\uff0c\u6240\u4ee5\u4f1a\u5728\u591a\u4e2a\u4e0d\u540c\u5c3a\u5ea6\u7279\u5f81\u56fe\u4e2d\u751f\u6210anchor\uff0c\u5047\u8bbe\u67d0\u4e00\u4e2a\u7279\u5f81\u56fe\u5927\u5c0f\u4e3ahxw\uff0c\u9996\u5148\u4f1a\u8ba1\u7b97\u8fd9\u4e2a\u7279\u5f81\u76f8\u5bf9\u4e8e\u8f93\u5165\u56fe\u50cf\u7684\u4e0b\u91c7\u6837\u500d\u6570 stride\uff1a \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6bcf\u4e00\u4e2a\u5c3a\u5ea6\u7279\u5f81\u56fe\u4e0a\u751f\u6210\u4e0d\u540c\u6bd4\u5217\u7684anchor: \u5f97\u5230\u4e00\u7cfb\u5217\u7684anchors\u540e\u5c31\u53ef\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u3002 \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u5728\u6e90\u7801\u4e2d\u6211\u4eec\u53ef\u751f\u6210\u4e00\u5e45\u56fe\u50cf\u5bf9\u5e94\u7684anchors: # \u751f\u6210anchors,\u9001\u5165\u56fe\u7247\u4fe1\u606f\u53ca\u76f8\u5e94\u7684\u7279\u5f81\u56fe anchors = model . rpn . anchor_generator ( images ,[ P2 , P3 , P4 , P5 , P6 ]) \u5bf9\u4e8e800x800\u7684\u56fe\u50cf\u751f\u6210\u7684anchor\u7684\u6570\u91cf\u4e3a\uff1a # anchors[0].size()\uff1a #200*200*3+100*100*3+50*50*3+25*25*3+13*13*3=159882 torch . Size ([ 159882 , 4 ]) anchor\u7684\u53d6\u503c\u4e3a\uff1a [ tensor ([[ - 23. , - 11. , 23. , 11. ], [ - 16. , - 16. , 16. , 16. ], [ - 11. , - 23. , 11. , 23. ], ... , [ 370. , 551. , 1094. , 913. ], [ 476. , 476. , 988. , 988. ], [ 551. , 370. , 913. , 1094. ]])] \u6211\u4eec\u5c06\u524d1000\u4e2aanchor\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a # \u5c06\u751f\u6210\u7684anchor\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u7ed8\u5236\u56fe\u50cf fig = plt . imshow ( img ) # \u5c06\u6846\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( anchors [ 0 ]): if index < 1000 : fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"red\" , linewidth = 1 )) plt . show ()","title":"2.2.1 anchors"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#222-rpn","text":"\u4e00\u526fMxN\u5927\u5c0f\u7684\u77e9\u9635\u9001\u5165Faster RCNN\u7f51\u7edc\u540e\uff0c\u7ecf\u8fc7backbone\u7279\u5f81\u63d0\u53d6\u5230RPN\u7f51\u7edc\u53d8\u4e3aHxW\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u662fRPN\u8fdb\u884c\u5206\u7c7b\u7684\u7f51\u7edc\u7ed3\u6784\uff1a(k=9) \u5148\u505a\u4e00\u4e2a1x1\u7684\u5377\u79ef\uff0c\u5f97\u5230[batchsize,H,W,18]\u7684\u7279\u5f81\u56fe\uff0c\u7136\u540e\u8fdb\u884c\u53d8\u5f62,\u5c06\u7279\u5f81\u56fe\u8f6c\u6362\u4e3a[batchsize,9xH,W,2]\u7684\u7279\u5f81\u56fe\u540e\uff0c\u9001\u5165softmax\u4e2d\u8fdb\u884c\u5206\u7c7b\uff0c\u5f97\u5230\u5206\u7c7b\u7ed3\u679c\u540e\uff0c\u518d\u8fdb\u884creshape\u6700\u7ec8\u5f97\u5230[batchsize,H,W,18]\u5927\u5c0f\u7684\u7ed3\u679c,18\u8868\u793ak=9\u4e2aanchor\u662f\u5426\u5305\u542b\u76ee\u6807\u7684\u6982\u7387\u503c\u3002","title":"2.2.2 RPN\u5206\u7c7b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#223-rpn","text":"RPN\u56de\u5f52\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a(k=9) \u7ecf\u8fc7\u8be5\u5377\u79ef\u8f93\u51fa\u7279\u5f81\u56fe\u4e3a\u4e3a[1, H, W,4x9]\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8efeature maps\u6bcf\u4e2a\u70b9\u90fd\u67099\u4e2aanchors\uff0c\u6bcf\u4e2aanchors\u53c8\u90fd\u67094\u4e2a\u7528\u4e8e\u56de\u5f52\u7684: \u53d8\u6362\u91cf\u3002 \u8be5\u53d8\u6362\u91cf\u9884\u6d4b\u7684\u662fanchor\u4e0e\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u5e73\u79fb\u91cf\u548c\u5c3a\u5ea6\u56e0\u5b50\uff1a \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c\u5229\u7528\u6e90\u7801\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u5bf9anchors\u7684\u5206\u7c7b\u548c\u56de\u5f52\u7ed3\u679c\uff0c\u6211\u4eec\u4ee5P2\u7279\u5f81\u56fe\u4e3a\u4f8b\uff1a # RPN\u7f51\u7edc\u9884\u6d4b\u5206\u7c7b\uff0c\u8fd4\u56de\uff1alogits\u9001\u5165softmax\u4e4b\u524d\u7684\u5206\u6570 cls_logits = model . rpn . head . cls_logits ( P2 ) # RPN\u7f51\u7edc\u9884\u6d4b\u76ee\u6807\u6846 box_pred = model . rpn . head . bbox_pred ( P2 ) \u7ed3\u679c\u5206\u6790,P2\u7279\u5f81\u56fe\u4e2d\u4e00\u5171\u67093x200x200\u4e2aanchor\uff0c\u8f93\u51fa\u4ed6\u4eec\u7684\u5206\u7c7b\u548c\u56de\u5f52\u7ed3\u679c # cls_logits.size(),\u6bcf\u4e00\u4e2aanchor\u90fd\u8fdb\u884c\u4e86\u5206\u7c7b\u5206\u6790 torch . Size ([ 1 , 3 , 200 , 200 ]) # box_pred.size() \uff1a\u56de\u5f52\u7ed3\u679c torch . Size ([ 1 , 12 , 200 , 200 ]) \u5176\u4e2d cls_logits\u7684\u53d6\u503c\u4e3a\uff1a tensor([[[[-4.9525, -8.6189, -7.9043, ..., -7.1153, -7.0152, -6.2087], [-3.9093, -8.1554, -7.6761, ..., -5.7457, -5.2442, -5.4824], [-2.8913, -6.4549, -6.1540, ..., -3.6381, -3.2611, -3.8778], ..., [-4.0144, -7.9331, -7.2612, ..., -5.9252, -6.3376, -6.1646], [-4.7249, -9.1262, -8.5185, ..., -7.1996, -7.6481, -7.1453], [-2.5904, -5.4544, -5.0440, ..., -4.0076, -4.2866, -4.3868]], [[-1.2397, -1.9357, -1.6008, ..., -2.5823, -2.3880, -2.2150], [-0.0788, -0.5536, -0.3117, ..., -0.7293, -0.6024, -1.2866], [ 0.2404, -0.4894, -0.1548, ..., 0.3993, 0.3727, -0.5295], ..., [-0.8921, -1.7715, -1.1690, ..., -1.7273, -1.9882, -2.0136], [-1.0738, -1.9363, -1.4287, ..., -2.0681, -2.2555, -2.2789], [-0.4302, -0.6752, -0.3291, ..., -0.6979, -0.8793, -1.3372]], [[-3.6792, -2.3455, -1.6957, ..., -1.8304, -2.2407, -1.3634], [-2.5546, -0.3214, 0.2112, ..., 0.8942, 0.7678, 1.4243], [-2.0823, -0.4618, 0.0860, ..., 0.9763, 0.9266, 1.4695], ..., [-2.1660, -0.7442, -0.1336, ..., -1.9861, -2.1365, -0.4541], [-2.7510, -1.3608, -0.9367, ..., -2.4219, -2.5253, -0.7463], [-0.2392, 1.5965, 1.6274, ..., 1.0652, 1.1438, 1.5748]]]], grad_fn=<MkldnnConvolutionBackward0>)","title":"2.2.3 RPN\u56de\u5f52"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#424-proposal","text":"Proposal\u5c42\u8d1f\u8d23\u7efc\u5408RPN\u7f51\u7edc\u5bf9anchors\u5206\u7c7b\u548c\u56de\u5f52\u7684\u7ed3\u679c\uff0c\u5229\u7528\u56de\u5f52\u7684\u7ed3\u679c\u5bf9\u5305\u542b\u76ee\u6807\u7684anchors\u8fdb\u884c\u4fee\u6b63\uff0c\u8ba1\u7b97\u51fa\u5019\u9009\u533a\u57df\uff0c\u9001\u5165\u540e\u7eedRoI Pooling\u5c42\u4e2d\u3002 Proposal\u5c42\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\uff1a \u5229\u7528RPN\u7f51\u7edc\u56de\u5f52\u7684\u7ed3\u679c \u5bf9\u6240\u6709\u7684anchors\u8fdb\u884c\u4fee\u6b63\uff0c\u5f97\u5230\u4fee\u6b63\u540e\u7684\u68c0\u6d4b\u6846 \u6839\u636eRPN\u7f51\u7edc\u5206\u7c7b\u7684softmax\u8f93\u51fa\u7684\u6982\u7387\u503c\u7531\u5927\u5230\u5c0f\u5bf9\u68c0\u6d4b\u6846\u8fdb\u884c\u6392\u5e8f\uff0c\u63d0\u53d6\u524d6000\u4e2a\u7ed3\u679c\uff0c\u5373\u63d0\u53d6\u4fee\u6b63\u4f4d\u7f6e\u540e\u7684\u68c0\u6d4b\u6846 \u9650\u5b9a\u8d85\u51fa\u56fe\u50cf\u8fb9\u754c\u7684\u68c0\u6d4b\u6846\u4e3a\u56fe\u50cf\u8fb9\u754c\uff0c\u9632\u6b62\u540e\u7eedroi pooling\u65f6\u5019\u9009\u533a\u57df\u8d85\u51fa\u56fe\u50cf\u8fb9\u754c\u3002 \u5bf9\u5269\u4f59\u7684\u68c0\u6d4b\u6846\u8fdb\u884c\u975e\u6781\u5927\u503c\u6291\u5236NMS Proposal\u5c42\u7684\u8f93\u51fa\u662f\u5bf9\u5e94\u8f93\u5165\u7f51\u7edc\u56fe\u50cf\u5c3a\u5ea6\u7684\u5f52\u4e00\u5316\u540e\u7684\u5750\u6807\u503c[x1, y1, x2, y2]\u3002 \u5230\u6b64RPN\u7f51\u7edc\u7684\u5de5\u4f5c\u5c31\u7ed3\u675f\u4e86\u3002\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c # RPN\u7f51\u7edc\u751f\u6210proposal proposal = model . rpn ( images , features_fpn ) \u4e00\u5171\u751f\u6210\u4e861000\u4e2a\u5019\u9009\u533a\u57df\uff1a # proposal[0][0].size() torch . Size ([ 1000 , 4 ]) \u7ed3\u679c\u4e3a\uff1a ([ tensor ([[ 472.2222 , 282.6704 , 625.2900 , 643.2105 ], [ 480.1299 , 394.6739 , 674.9400 , 728.7283 ], [ 11.2800 , 170.9804 , 361.7238 , 751.5059 ], ... , [ 574.2663 , 279.6072 , 591.0003 , 294.0474 ], [ 577.7798 , 278.1065 , 596.8508 , 299.1753 ], [ 576.9445 , 164.8038 , 674.0577 , 269.8643 ]])], {}) \u5c06\u5176\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a # \u5019\u9009\u533a\u57df\u7684\u7ed8\u5236 img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u663e\u793a\u56fe\u50cf fig = plt . imshow ( img ) # \u5c06\u5019\u9009\u533a\u57df\u663e\u793a\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( proposal [ 0 ][ 0 ]): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"blue\" , linewidth = 0.5 )) plt . show ()","title":"4.2.4 Proposal\u5c42"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#23-roipooling","text":"RoI Pooling\u5c42\u5219\u8d1f\u8d23\u6536\u96c6RPN\u7f51\u7edc\u751f\u6210\u7684\u5019\u9009\u533a\u57df\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230\u7279\u5f81\u56fe\u4e2d\u5e76\u56fa\u5b9a\u7ef4\u5ea6\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\u4e2d\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u3002 RoI Pooling \u7684\u4f5c\u7528\u8fc7\u7a0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a RoIpooling\u4f7f\u7528\u6700\u5927\u6c60\u5316\u5c06\u4efb\u4f55\u6709\u6548\u7684RoI\u533a\u57df\u5185\u7684\u7279\u5f81\u8f6c\u6362\u6210\u5177\u6709pool_H\u00d7pool_W\u7684\u56fa\u5b9a\u7a7a\u95f4\u8303\u56f4\u7684\u5c0f\u7684\u7279\u5f81\u56fe\uff0c\u5176\u4e2dpool_H\u548cpool_W\u662f\u8d85\u53c2\u6570\uff0c\u6bd4\u5982\u8bbe\u7f6e\u4e3a7x7, \u5b83\u4eec\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7684RoI,\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0cFPN\u7f51\u7edc\u4ea7\u751f\u4e86\u591a\u4e2a\u5c3a\u5ea6\u7279\u5f81\u56fe\uff0c\u90a3\u5019\u9009\u533a\u57df\u8981\u6620\u5c04\u5230\u54ea\u4e2a\u7279\u5f81\u56fe\u4e2d\u5462\uff1f \u5728\u8fd9\u91cc\uff0c\u4e0d\u540c\u5c3a\u5ea6\u7684ROI\u4f7f\u7528\u4e0d\u540c\u7279\u5f81\u5c42\u4f5c\u4e3aROI pooling\u5c42\u7684\u8f93\u5165\uff0c\u5927\u5c3a\u5ea6ROI\u5c31\u7528\u540e\u9762\u4e00\u4e9b\u7684\u91d1\u5b57\u5854\u5c42\uff0c\u6bd4\u5982P5\uff1b\u5c0f\u5c3a\u5ea6ROI\u5c31\u7528\u524d\u9762\u4e00\u70b9\u7684\u7279\u5f81\u5c42\uff0c\u6bd4\u5982P3\uff0c\u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u786e\u5b9aROI\u6240\u5728\u7684\u7279\u5f81\u5c42\uff1a \u5176\u4e2d\uff0c224\u662fImageNet\u7684\u6807\u51c6\u8f93\u5165\uff0ck0\u662f\u57fa\u51c6\u503c\uff0c\u8bbe\u7f6e\u4e3a4\uff0cw\u548ch\u662fROI\u533a\u57df\u7684\u957f\u548c\u5bbd\uff0c\u5047\u8bbeROI\u662f112x112\u7684\u5927\u5c0f\uff0c\u90a3\u4e48k = k0-1 = 4-1 = 3\uff0c\u610f\u5473\u7740\u8be5ROI\u5e94\u8be5\u4f7f\u7528P3\u7684\u7279\u5f81\u5c42\u3002k\u503c\u4f1a\u505a\u53d6\u6574\u5904\u7406\uff0c\u9632\u6b62\u7ed3\u679c\u4e0d\u662f\u6574\u6570\uff0c\u800c\u4e14\u4e3a\u4e86\u4fdd\u8bc1k\u503c\u57282-5\u4e4b\u95f4\uff0c\u8fd8\u4f1a\u505a\u622a\u65ad\u5904\u7406\u3002 \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c # ROI Pooling\u5c42\u5b9e\u73b0: pool_region_list = model . roi_heads . box_roi_pool ( features_fpn , proposal [ 0 ], images . image_sizes ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a\u6bcf\u4e00\u4e2a\u5019\u9009\u533a\u57df\u90fd\u88ab\u56fa\u5b9a\u4e3a7x7\u5927\u5c0f # pool_region_list.size() torch . Size ([ 1000 , 256 , 7 , 7 ]) \u5177\u4f53\u5982\u4e0b\u6240\u793a\uff1a tensor ([[[[ - 3.0290e-01 , - 9.4801e-02 , - 3.3355e-01 , ... , - 4.7696e-01 , 1.8509e-01 , 6.6568e-01 ], [ 4.8405e-01 , - 3.9127e-01 , - 1.2898e+00 , ... , - 9.8544e-01 , 1.6745e-01 , 6.4149e-01 ], [ 2.6655e-01 , - 7.9603e-01 , - 7.8114e-01 , ... , - 5.4995e-01 , - 1.2209e-01 , 4.2529e-01 ], ... , [ - 7.9032e-01 , - 4.3308e-01 , - 1.0445e+00 , ... , - 1.0004e+00 , - 1.4248e+00 , - 1.0955e+00 ], [ - 2.0235e-01 , 1.2646e-01 , 3.0089e-01 , ... , - 1.9803e-01 , - 1.4375e+00 , - 1.3155e+00 ], [ 4.0225e-01 , 2.8825e-01 , 3.6015e-01 , ... , 1.7556e-01 , - 6.1306e-01 , - 1.1433e+00 ]]]], grad_fn =< IndexPutBackward0 > )","title":"2.3 ROIPooling"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#24","text":"\u8be5\u90e8\u5206\u5229\u7528\u83b7\u5f97\u7684\u5019\u9009\u533a\u57df\u7684\u7279\u5f81\u56fe\uff0c\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\u4e0esoftmax\u8ba1\u7b97\u6bcf\u4e2a\u5019\u9009\u533a\u57df\u5177\u4f53\u5c5e\u4e8e\u7684\u7c7b\u522b\uff08\u5982\u4eba\uff0c\u8f66\uff0c\u7535\u89c6\u7b49\uff09\uff0c\u8f93\u51fa\u6982\u7387\u503c\uff1b\u540c\u65f6\u518d\u6b21\u5229\u7528\u56de\u5f52\u65b9\u6cd5\u83b7\u5f97\u6bcf\u4e2a\u5019\u9009\u533a\u57df\u7684\u4f4d\u7f6e\u504f\u79fb\u91cf\uff0c\u7528\u4e8e\u56de\u5f52\u66f4\u52a0\u7cbe\u786e\u7684\u76ee\u6807\u68c0\u6d4b\u6846\u3002\u8be5\u90e8\u5206\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a \u4eceRoI Pooling\u5c42\u83b7\u53d6\u5230\u56fa\u5b9a\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u540e\uff0c\u9001\u5165\u540e\u7eed\u7f51\u7edc\uff0c\u53ef\u4ee5\u770b\u5230\u505a\u4e86\u5982\u4e0b2\u4ef6\u4e8b\uff1a \u901a\u8fc7\u5168\u8fde\u63a5\u548csoftmax\u5bf9\u5019\u9009\u533a\u57df\u8fdb\u884c\u5206\u7c7b \u518d\u6b21\u5bf9\u5019\u9009\u533a\u57df\u8fdb\u884c\u56de\u5f52\u4fee\u6b63\uff0c\u83b7\u53d6\u66f4\u9ad8\u7cbe\u5ea6\u7684\u68c0\u6d4b\u6846 \u5b9e\u73b0\u6d41\u7a0b\u5982\u4e0b\uff1a\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u9996\u5148\u83b7\u53d6\u7f51\u7edc\u5206\u7c7b\u548c\u56de\u5f52\u7684\u7ed3\u679c\uff1a # \u6a21\u578b\u6700\u7ec8\u8f93\u51fa\u7684\u7ed3\u679c detection = model . roi_heads ( features , proposal [ 0 ], images . image_sizes ) \u68c0\u6d4b\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a ([{ 'boxes' : tensor ([[ 359.8341 , 111.3523 , 558.0009 , 777.9014 ], [ 86.5611 , 290.7203 , 459.5951 , 785.2094 ], [ 22.1627 , 70.4335 , 309.8072 , 790.7128 ], [ 515.9180 , 217.7970 , 766.3583 , 743.9280 ], [ 531.3500 , 536.5439 , 771.5784 , 790.1054 ], [ 666.4915 , 284.8808 , 722.3298 , 367.1904 ], [ 19.0011 , 460.5744 , 728.2871 , 777.8762 ]], grad_fn =< IndexBackward0 > ), 'labels' : tensor ([ 1 , 1 , 1 , 1 , 62 , 64 , 15 ]), 'scores' : tensor ([ 0.9982 , 0.9981 , 0.9980 , 0.9958 , 0.9854 , 0.1073 , 0.0618 ], grad_fn =< IndexBackward0 > )}], {}) \u7ed3\u679c\u4e3a\uff1a\u4e00\u5171\u68c0\u6d4b\u51fa7\u4e2a\u76ee\u6807\uff0c\u6bcf\u4e2a\u76ee\u6807\u7684\u76ee\u6807\u4f4d\u7f6e\uff0c\u76ee\u6807\u7c7b\u522bid\uff0c\u76ee\u6807\u7c7b\u522b\u7f6e\u4fe1\u5ea6\u7b49\u4fe1\u606f\u6784\u6210\u3002 \u53ef\u4ee5\u5c06\u5176\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a # \u68c0\u6d4b\u7ed3\u679c\u7684\u7ed8\u5236 detection_boxes = detection [ 0 ][ 0 ][ 'boxes' ] . detach () . numpy () img = Image . open ( 'img3.jpg' ) . resize (( 800 , 800 )) # \u663e\u793a\u56fe\u50cf fig = plt . imshow ( img ) # \u5c06\u68c0\u6d4b\u7ed3\u679c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( detection_boxes ): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"purple\" , linewidth = 1 )) plt . show () \u5230\u8fd9\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u6574\u4e2a\u7f51\u7edc\u7684\u4ecb\u7ecd\u3002","title":"2.4 \u76ee\u6807\u5206\u7c7b\u4e0e\u56de\u5f52"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#3-fasterrcnn","text":"Faster R-CNN\u7684\u8bad\u7ec3\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5373RPN\u7f51\u7edc\u548c\u68c0\u6d4b\u7f51\u7edcfastRCNN\u7684\u8bad\u7ec3\uff1a \u5728\u4ecb\u7ecd\u7f51\u7edc\u8bad\u7ec3\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6709\u6807\u6ce8\u597d\u7684\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u7f51\u7edc\u6a21\u578b\uff0c\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a \u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u6570\u636e\u96c6\u52a0\u8f7d \u5728\u8fd9\u91cc\u6211\u4eec\u52a0\u8f7dVOC\u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u4e2d\u5305\u542b\u6807\u6ce8\u597d\u7684\u6570\u636e\uff1a # \u6570\u636e\u96c6\u8bb0\u8f7d from voc_data_util import VocDataset , VOC_BBOX_LABEL_NAMES dataset = VocDataset ( root = '/Users/mac/Desktop/\u8ba1\u7b97\u673a\u89c6\u89c9/VOCdevkit/VOC2007' , transforms = VocDataset . get_transform ()) \u5728\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u4ee5\u9884\u6d4b\u65f6\u7684\u56fe\u7247\u4e3a\u4f8b\uff0c\u5c55\u793a\u6570\u636e\u7684\u6807\u6ce8\u4fe1\u606f\uff1a # \u771f\u5b9e\u503c\u7684\u7ed8\u5236 # \u83b7\u53d6\u56fe\u50cf\u53ca\u5bf9\u5e94\u7684\u6807\u6ce8\u4fe1\u606f img , targets = dataset [ 141 ] img = img . permute ( 1 , 2 , 0 ) . numpy () . astype ( np . uint8 ) fig = plt . imshow ( img ) # \u5c06\u6807\u6ce8\u4fe1\u606f\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for index , boxes in enumerate ( targets [ 'boxes' ] . numpy ()): fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"green\" , linewidth = 1 )) plt . show () \u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6a21\u578b\u52a0\u8f7d \u5728\u8fd9\u91cc\u52a0\u8f7d\u6a21\u578b\u6211\u4eec\u4e0d\u76f4\u63a5\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u800c\u662f\u9700\u8981\u6839\u636eVOC\u6570\u636e\u96c6\u7684\u7c7b\u522b\u4e2a\u657020\u5bf9\u6a21\u578b\u8fdb\u884c\u4fee\u6b63\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u6a21\u578b\u52a0\u8f7d # N+1\u5305\u542b\u80cc\u666f num_classes = 21 # \u6a21\u578b\u5b9e\u4f8b\u5316\uff1a\u4e0d\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u4fee\u6b63\u7c7b\u522b\u4e2a\u6570\uff0cbackbone\u4f7f\u7528\u9884\u8bad\u7ec3\u7ed3\u679c model = torchvision . models . detection . fasterrcnn_resnet50_fpn ( pretrained = False , num_classes = num_classes , pretrained_backbone = True ) \u6a21\u578b\u548c\u6570\u636e\u52a0\u8f7d\u8fdb\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u4e86\u3002","title":"3 FasterRCNN\u7684\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#31-rpn","text":"RPN\u7f51\u7edc\u7684\u4f5c\u7528\u4ece\u4f17\u591a\u7684anchors\u4e2d\u63d0\u53d6\u5305\u542b\u76ee\u6807\u7684\uff0c\u5e76\u4e14\u7ecf\u8fc7\u56de\u5f52\u8c03\u6574\u7684\u5019\u9009\u533a\u57df\u3002\u4e3a\u4e86\u8bad\u7ec3RPN\uff0c\u7ed9\u6bcf\u4e2aanchor\u5206\u914d\u662f\u5426\u5305\u542b\u76ee\u6807\u7684\u6807\u7b7e\uff0c\u4e5f\u5c31\u662f\u6b63\u8d1f\u6837\u672c\u7684\u6807\u8bb0\uff0c\u7136\u540e\u8fdb\u884c\u8bad\u7ec3\u3002","title":"3.1 RPN\u7f51\u7edc\u7684\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#311","text":"\u6b63\u8d1f\u6837\u672c\u7684\u8bbe\u7f6e\u4e3b\u8981\u5206\u4e3a3\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u4e0e\u771f\u5b9e\u6846ground truth\uff08GT\uff09\u4ea4\u5e76\u6bd4IOU\u5927\u4e8e0.7\u7684anchor\u662f\u6b63\u6837\u672c\uff0c\u5373anchor\u4e2d\u5305\u542b\u76ee\u6807\uff0c\u76ee\u6807\u503c\u8bbe\u4e3a1 \u4e0e\u771f\u5b9e\u6846ground truth\uff08GT\uff09\u4ea4\u5e76\u6bd4IOU\u5c0f\u4e8e0.3\u7684anchor\u662f\u8d1f\u6837\u672c\uff0c\u5373anchor\u4e2d\u4e0d\u5305\u542b\u76ee\u6807\uff0c\u76ee\u6807\u503c\u8bbe\u4e3a-1 \u5176\u4ed6\u7684anchor\u820d\u5f03\uff0c\u4e0d\u53c2\u4e0e\u7f51\u7edc\u7684\u8bad\u7ec3\uff0c\u76ee\u6807\u503c\u8bbe\u4e3a0 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u770b\u4e0b\u6837\u672c\u6807\u8bb0\u7684\u7ed3\u679c\uff1a\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u5c06\u4ea7\u751f\u7684159882\u4e2aanchor\u4e0e\u76ee\u6807\u771f\u5b9e\u503c\u7684\u8ba1\u7b97\u4ea4\u5e76\u6bd4\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\uff1a # \u83b7\u53d6anchor\u5bf9\u5e94\u7684\u76ee\u6807\u503c\uff1a\u8f93\u5165\uff1a\u8981\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\u7684anchors(\u5728\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u751f\u6210\u8fc7)\uff0c\u6837\u672c\u7684\u771f\u5b9e\u503c\u5373\u6807\u6ce8\u4fe1\u606f\uff1b\u8f93\u51fa\uff1arpn\u7684\u5206\u7c7b\u76ee\u6807\u503c\uff0cRPN\u7684\u56de\u5f52\u76ee\u6807\u503c rpn_label_matchs , rpn_target_deltas = model . rpn . assign_targets_to_anchors ( anchors ,[ targets ]) \u6240\u6709\u7684anchor\u90fd\u8bbe\u7f6e\u4e86\u5206\u7c7b\u7684\u76ee\u6807\u503c\u548c\u56de\u5f52\u7684\u76ee\u6807\u503c\uff0c\u4e00\u5171\u6709159882\u4e2aAnchor\u3002 # anchor\u5bf9\u5e94\u7684\u5206\u7c7b\u76ee\u6807\u503c\uff1arpn_label_matchs[0].size() torch . Size ([ 159882 ]) # \u6bcf\u4e2aanchor\u5bf9\u5e94\u7684\u6846\u7684\u76ee\u6807\u503c\uff1arpn_target_deltas[0].size() torch . Size ([ 159882 , 4 ]) \u83b7\u53d6\u6b63\u6837\u672c\uff1a\u6b63\u6837\u672c\u662f\u5305\u542b\u76ee\u6807\u7684anchor\uff0c\u5176\u76ee\u6807\u503c\u8bbe\u4e3a1\uff0c\u6b63\u6837\u672c\u7684\u4e2a\u6570\u662f29\u4e2a # \u5c5e\u4e8e\u6b63\u6837\u672c\u7684anchors\uff0c\u4e0eGT\u4ea4\u5e76\u6bd4\u8f83\u5927\u7684anchor,\u76ee\u6807\u503c\u8bbe\u4e3a1 positive_anchor_ids = torch . where ( torch . eq ( rpn_label_matchs [ 0 ], 1 ))[ 0 ] . numpy () # \u6b63\u6837\u672c\u7684\u4e2a\u6570\uff1apositive_anchor_ids.shape ( 15 ,) # \u5c06\u6b63\u6837\u672c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a # \u7ed8\u5236anchor\u7684\u6b63\u6837\u672c fig = plt . imshow ( img ) # \u904d\u5386\u6240\u6709\u7684\u6b63\u6837\u672c\u7684anchor\uff0c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for idx in positive_anchor_ids : boxes = anchors [ 0 ][ idx ] fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"white\" , linewidth = 1 )) plt . show () \u6211\u4eec\u5c06\u8fd9\u4e9b\u6b63\u6837\u672c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e9banchor\u4e0e\u76ee\u6807\u8fd8\u662f\u975e\u5e38\u63a5\u8fd1\u7684 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u4e0b\u8d1f\u6837\u672c\u7684\u7ed3\u679c\uff0c\u8d1f\u6837\u672c\u7684\u76ee\u6807\u503c\u662f-1\uff0c # \u8d1f\u6837\u672c\u7684anchor\u7684id negitivate_anchor_ids = torch . where ( torch . eq ( rpn_label_matchs [ 0 ], - 1 ))[ 0 ] . numpy () # \u8d1f\u6837\u672c\u7684\u4e2a\u6570\u4e3a\uff1anegitivate_anchor_ids.shape ( 712 ,) # \u7ed8\u5236\u90e8\u5206anchor\u7684\u8d1f\u6837\u672c fig = plt . imshow ( img ) # \u904d\u5386\u6240\u6709\u7684\u6b63\u6837\u672c\u7684anchor\uff0c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for idx in negitivate_anchor_ids : # \u8d1f\u6837\u672c\u7684anchor boxes = anchors [ 0 ][ idx ] # \u53d6\u4f5920\u4e3a0\u7684\u8d1f\u6837\u672c\u8fdb\u884c\u5c55\u793a if idx % 20 == 0 : fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"white\" , linewidth = 1 )) plt . show () \u540c\u6837\u6211\u4eec\u4e5f\u5c06\u8d1f\u6837\u672c\u5c55\u793a\u5728\u56fe\u50cf\u4e0a\uff0c\u4ece\u56fe\u50cf\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e9b\u8d1f\u6837\u672c\u7684anchor\u4e0e\u76ee\u6807\u5dee\u8ddd\u8fd8\u662f\u5f88\u5927\u7684\u3002","title":"3.1.1\u6b63\u8d1f\u6837\u672c\u6807\u8bb0"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#312-rpn","text":"RPN\u7f51\u7edc\u7684\u635f\u5931\u51fd\u6570\u662f\uff1a \u5176\u4e2d i i \u8868\u793aanchor\u7684\u7d22\u5f15 p_i p_i \u662f\u7b2ci\u4e2aanchor \u9884\u6d4b\u4e3a\u76ee\u6807\u7684\u53ef\u80fd\u6027\uff0c p_i^{*} p_i^{*} \u4e3aground-truth\u6807\u7b7e\u3002\u5982\u679c\u8fd9\u4e2aanchor\u662fpositive\u7684\uff0c\u5219ground-truth\u6807\u7b7e\u4e3a1\uff0c\u5426\u5219\u4e3a0\u3002\uff08\u5373\u5f53\u7b2ci\u4e2aanchor\u4e0eGT\u95f4IoU>0.7\uff0c\u8ba4\u4e3a\u662f\u8be5anchor\u662fpositive\uff0c\u6807\u7b7e\u4e3a1\uff1b\u53cd\u4e4bIoU<0.3\u65f6\uff0c\u8ba4\u4e3a\u662f\u8be5anchor\u662fnegative\uff0c\u6807\u7b7e\u4e3a0\uff09 t_i t_i \u8868\u793a\u8868\u793a\u6b63\u6837\u672canchor\u5230\u9884\u6d4b\u533a\u57dfbounding box\u76844\u4e2a\u53c2\u6570\u5316\u9884\u6d4b\u7ed3\u679c, t_i^{*} t_i^{*} \u662f\u8fd9\u4e2apositive anchor\u5bf9\u5e94\u7684ground-truth box\u7684\u504f\u79fb\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u9884\u6d4b\u503c\uff1a \u771f\u5b9e\u503c\uff1a \u5176\u4e2d\uff0cx\uff0cy\uff0cw\uff0ch\u8868\u793a\u7a97\u53e3\u4e2d\u5fc3\u5750\u6807\u548c\u7a97\u53e3\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u53d8\u91cfx\uff0c x_a \u548cx^{*} x_a \u548cx^{*} \u5206\u522b\u8868\u793a\u9884\u6d4b\u7a97\u53e3\u3001anchor\u7a97\u53e3\u548cGround Truth\u7684\u5750\u6807\uff08y\uff0cw\uff0ch\u540c\u7406\uff09 \u56de\u5f52\u76ee\u6807\u503c\u7684\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u7f51\u7edc\u56de\u5f52\u7684\u76ee\u6807\u503c regression_targets = model . rpn . box_coder . encode ( rpn_target_deltas , anchors ) \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\u6bcf\u4e2aanchor\u90fd\u6709\u76f8\u5e94\u7684\u56de\u5f52\u7684\u76ee\u6807\u503c\u3002 # regression_targets[0].size() torch . Size ([ 159882 , 4 ]) ( tensor ([[ 3.1478 , 30.9188 , 1.6453 , 2.3698 ], [ 4.5250 , 21.2567 , 2.0082 , 1.9951 ], [ 6.5818 , 14.7873 , 2.3829 , 1.6322 ], ... , [ - 0.8110 , - 0.1431 , - 1.1108 , - 0.4308 ], [ - 1.1469 , - 0.1011 , - 0.7644 , - 0.7775 ], [ - 1.6221 , - 0.0715 , - 0.4177 , - 1.1240 ]], dtype = torch . float64 ),) \u6574\u4e2aLoss\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u5206\u7c7b\u548c\u56de\u5f52\u7684\u635f\u5931 L_{cls} L_{cls} \u5206\u7c7b\u7684\u635f\u5931\uff08classification loss\uff09\uff0c\u662f\u4e00\u4e2a\u4e8c\u5206\u7c7b\u5668\u7684softmax loss\u3002 L_{reg} L_{reg} \u662f\u56de\u5f52\u635f\u5931\uff0c\u4e3a smooth(x) smooth(x) \u635f\u5931,\u5e76\u4e14\u53ea\u6709\u6b63\u6837\u672c\u624d\u53c2\u4e0e\u56de\u5f52\u635f\u5931\u8ba1\u7b97 N_{cls} N_{cls} \u548c N_{reg} N_{reg} \u5206\u522b\u7528\u6765\u6807\u51c6\u5316\u5206\u7c7b\u635f\u5931\u9879 L_{cls} L_{cls} \u548c\u56de\u5f52\u635f\u5931\u9879 L_{reg} L_{reg} \uff0c\u9ed8\u8ba4\u7528batch size\u8bbe\u7f6e N_{cls} N_{cls} \uff0c\u7528anchor\u4f4d\u7f6e\u6570\u76ee~2000\u521d\u59cb\u5316 N_{reg} N_{reg} N_{cls} N_{cls} \u548c N_{reg} N_{reg} \u76f8\u5dee\u8fc7\u5927\uff0c\u7528\u53c2\u6570\u03bb\u6765\u5e73\u8861\u4e24\u8005\uff0c\u4e00\u822c\u53d6\u503c\u4e3a N_{reg} N_{reg} \u548c N_{cls} N_{cls} \u7684\u6bd4\u503c10\u5373\u53ef\u3002","title":"3.1.2 RPN\u7f51\u7edc\u7684\u635f\u5931\u51fd\u6570"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#32-fastrcnn","text":"\u4f7f\u7528RPN\u7f51\u7edc\u6536\u96c6\u5230\u7684\u5019\u9009\u533a\u57df\u548cimageNet\u9884\u8bad\u7ec3\u7684\u5377\u79ef\u7f51\u7edc\u63d0\u53d6\u7684\u7279\u5f81\u5bf9\u68c0\u6d4b\u7684FastRCNN\u7f51\u7edc\u8fdb\u884c\u8bad\u7ec3\u3002","title":"3.2 FastRCNN\u7f51\u7edc\u7684\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#321","text":"\u5728FastRCNN\u7f51\u7edc\u8bad\u7ec3\u65f6\uff1a \u9996\u5148\u5c06\u4e0e\u771f\u5b9e\u6846ground truth\uff08GT\uff09\u4ea4\u5e76\u6bd4IOU\u5927\u4e8e0.5\u7684\u5019\u9009\u533a\u57df\u8bbe\u4e3a\u6b63\u6837\u672c\uff0c\u7c7b\u522b\u7684\u76ee\u6807\u503c\u662fGT\u7684\u7c7b\u522b \u5c06\u4e0e\u771f\u5b9e\u6846ground truth\uff08GT\uff09\u4ea4\u5e76\u6bd4IOU\u5c0f\u4e8e0.5\u7684\u5019\u9009\u533a\u57df\u8bbe\u4e3a\u8d1f\u6837\u672c\uff0c\u7c7b\u522b\u7684\u76ee\u6807\u503c\u662f0 \u63a5\u4e0b\u6765\u6211\u4eec\u5728\u4ee3\u7801\u770b\u4e0b\u6b63\u8d1f\u6837\u672c\u6807\u8bb0\u7684\u7ed3\u679c\uff1a\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u5c06proposal\u5c42\u4ea7\u751f\u7684\u5019\u9009\u533a\u57df\u4e0e\u76ee\u6807\u771f\u5b9e\u503c\u7684\u8ba1\u7b97\u4ea4\u5e76\u6bd4\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\uff1a # fastRCNN\u7684\u6b63\u8d1f\u6837\u672c\u8bbe\u7f6e # \u8f93\u5165\uff1aRPN\u7f51\u7edc\u751f\u6210\u7684\u5019\u9009\u533a\u57df\uff0c # \u8f93\u51fa\uff1a\u53c2\u4e0e\u8bad\u7ec3\u7684\u5019\u9009\u533a\u57dfproposals\u53ca\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u7684\u7d22\u5f15matched_idxs\uff0c\u5019\u9009\u533a\u57df\u5206\u7c7b\u7684\u76ee\u6807\u503clabels\uff0c\u56de\u5f52\u7684\u76ee\u6807\u503cregression_targets # \u4ece\u751f\u6210\u7684\u6240\u6709\u7684proposal\u4e2d\u9009\u62e9\u6b63\u8d1f\u6837\u672c\u9001\u5165\u7f51\u7edc\u4e2d proposals , matched_idxs , labels , regression_targets = model . roi_heads . select_training_samples ( proposal [ 0 ], [ targets ]) \u6700\u7ec8\u83b7\u53d6\u7684\u5019\u9009\u533a\u57df\u7684\u4e2a\u6570\u4e3a512\uff0clabels\u4e2d0\u503c\u5bf9\u5e94\u7684\u80cc\u666f\u7c7b\u522b\uff0c\u975e\u96f6\u503c\u5bf9\u5e94\u7740\u6240\u5c5e\u7684\u7c7b\u522bID # proposals[0].size() torch . Size ([ 512 , 4 ]) # regression_targets[0].size() torch . Size ([ 512 , 4 ]) # labels [ tensor ([ 15 , 15 , 15 , 15 , 0 , 0 , 15 , 0 , 15 , 15 , 15 , 15 , 0 , 0 , 15 , 15 , 0 , 15 , 0 , 15 , 0 , 15 , 15 , 15 , 15 , 0 , 15 , 15 , 15 , 0 , 0 , 0 , 15 , 0 , 15 , 15 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 15 , 15 , 0 , 15 , 0 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 15 , 0 , 0 , 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 9 , 15 , 0 , 0 , 0 , 0 , 0 , 15 , 15 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 15 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , 15 , 15 , 15 , 15 ])] \u83b7\u53d6\u6b63\u6837\u672c\uff1a\u6b63\u6837\u672c\u662f\u8d1f\u8d23\u76ee\u6807\u68c0\u6d4b\u7684\u5019\u9009\u533a\u57df\uff0c\u5176\u76ee\u6807\u503c\u4e0d\u662f0\uff0c\u6b63\u6837\u672c\u7684\u4e2a\u6570\u662f64\u4e2a # \u83b7\u53d6\u6b63\u6837\u672c\u7684\u7d22\u5f15 positive_proposal_ids = torch . where ( torch . gt ( labels [ 0 ], 0 ))[ 0 ] . numpy () # positive_proposal_ids.shape ( 64 ,) \u5c06\u8fd9\u4e9b\u6b63\u6837\u672c\u5c55\u793a\u5728\u56fe\u50cf\u4e0a\uff1a # \u7ed8\u5236\u90e8\u5206\u5019\u9009\u533a\u57df\u7684\u8d1f\u6837\u672c fig = plt . imshow ( img ) # \u904d\u5386\u6240\u6709\u7684\u8d1f\u6837\u672c\u7684\u5019\u9009\u533a\u57df\uff0c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for idx in positive_proposal_ids : # \u6b63\u6837\u672c\u7684proposals boxes = proposals [ 0 ][ idx ] # \u53d6\u4f5910\u4e3a0\u7684\u8d1f\u6837\u672c\u8fdb\u884c\u5c55\u793a if idx % 10 == 0 : fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"white\" , linewidth = 1 )) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e9b\u6846\u8ddf\u771f\u5b9e\u503c\u662f\u975e\u5e38\u63a5\u8fd1\u7684 \u540c\u6837\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u53d6\u8d1f\u6837\u672c\uff08\u80cc\u666f\uff09\uff0c\u5e76\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff1a # \u8d1f\u6837\u672c\u5bf9\u5e94\u7684ID negitivate_proposal_ids = torch . where ( torch . eq ( labels [ 0 ], 0 ))[ 0 ] . numpy () # negitivate_proposal_ids.shape ( 448 ,) # \u7ed8\u5236\u90e8\u5206\u5019\u9009\u533a\u57df\u7684\u8d1f\u6837\u672c fig = plt . imshow ( img ) # \u904d\u5386\u6240\u6709\u7684\u8d1f\u6837\u672c\u7684\u5019\u9009\u533a\u57df\uff0c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a for idx in negitivate_proposal_ids : # \u8d1f\u6837\u672c\u7684proposals boxes = proposals [ 0 ][ idx ] # \u53d6\u4f5910\u4e3a0\u7684\u8d1f\u6837\u672c\u8fdb\u884c\u5c55\u793a if idx % 10 == 0 : fig . axes . add_patch ( plt . Rectangle ( xy = ( boxes [ 0 ], boxes [ 1 ]), width = boxes [ 2 ] - boxes [ 0 ], height = boxes [ 3 ] - boxes [ 1 ], fill = False , edgecolor = \"white\" , linewidth = 1 )) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"3.2.1 \u6b63\u8d1f\u6837\u672c\u6807\u8bb0"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#322-fastrcnn","text":"FastRCNN\u7684\u8f93\u51fa\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u4e00\u90e8\u5206\u662fsoftmax\u5c42\u8fdb\u884c\u5206\u7c7b\uff0c\u8f93\u51fa\u7c7b\u522b\u6709K\u4e2a\u7c7b\u522b\u52a0\u4e0a\u201d\u80cc\u666f\u201d\u7c7b\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u56de\u5f52bounding box regressor\u3002\u4e5f\u5c31\u662f\uff1a \u4e00\u90e8\u5206\u8f93\u51fa\u5728K+1\u4e2a\u7c7b\u522b\u4e0a\u7684\u79bb\u6563\u6982\u7387\u5206\u5e03\uff08\u6bcf\u4e2a\u5019\u9009\u533a\u57df\uff09\uff0c p=(p0,p1,...,pk) p=(p0,p1,...,pk) \u3002\u901a\u5e38\uff0c\u901a\u8fc7\u5168\u8fde\u63a5\u5c42\u7684K+1\u4e2a\u8f93\u51fa\u4e0a\u7684Softmax\u6765\u8ba1\u7b97p\u3002 \u53e6\u4e00\u90e8\u5206\u8f93\u51fa\u5bf9\u4e8e\u7531K\u4e2a\u7c7b\u522b\u4e2d\u7684\u6bcf\u4e00\u4e2a\u68c0\u6d4b\u6846\u56de\u5f52\u504f\u79fb\uff0c t^{k}=(t_{x}^{k},t_{y}^{k},t_{w}^{k},t_{h}^{k}) t^{k}=(t_{x}^{k},t_{y}^{k},t_{w}^{k},t_{h}^{k}) \u3002\u5176\u4e2d t_k t_k \u6307\u5b9a\u76f8\u5bf9\u4e8e\u5019\u9009\u6846\u7684\u5c3a\u5ea6\u4e0d\u53d8\u8f6c\u6362\u548c\u5bf9\u6570\u7a7a\u95f4\u9ad8\u5ea6/\u5bbd\u5ea6\u79fb\u4f4d\uff0c\u4e0e\u5728RPN\u7f51\u7edc\u4e2d\u662f\u4e00\u6837\u7684\u3002 \u6bcf\u4e2a\u8bad\u7ec3\u7684\u5019\u9009\u533a\u57df\u7528 \u5206\u7c7b\u76ee\u6807\u503cu\u548c\u68c0\u6d4b\u6846\u56de\u5f52\u76ee\u6807\u503cv\u6807\u8bb0 \u3002\u80cc\u666f\u6837\u672c\u7528u=0\u6765\u8868\u793a\uff0c\u5bf9\u6bcf\u4e2a\u6807\u8bb0\u7684\u5019\u9009\u533a\u57df\u4f7f\u7528\u591a\u4efb\u52a1\u635f\u5931L\u4ee5\u8054\u5408\u8bad\u7ec3\u5206\u7c7b\u548c\u68c0\u6d4b\u6846\u56de\u5f52\uff1a \u5176\u4e2d L_{cls}(p, u) = -\\log p_u L_{cls}(p, u) = -\\log p_u \uff0c\u8868\u793a\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u7b2c\u4e8c\u4e2a\u635f\u5931 L_{loc} L_{loc} \uff0c\u662f\u5b9a\u4e49\u76ee\u6807\u503c\u548c\u9884\u6d4b\u68c0\u6d4b\u6846\u7684\u56db\u5143\u7ec4\u4e4b\u95f4\u7684\u635f\u5931\u4f7f\u7528smoothL1\u635f\u5931\u8ba1\u7b97\uff0c\u540c\u6837\u662f\u53ea\u6709\u6b63\u6837\u672c\uff08\u975e\u80cc\u666f\uff09\u7684\u5019\u9009\u533a\u57df\u624d\u8ba1\u7b97\u56de\u5f52\u635f\u5931\uff0c\u53c2\u6570\u03bb\u8bbe\u4e3a1\u3002","title":"3.2.2  FastRCNN\u7684\u635f\u5931\u51fd\u6570"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/02-Faster-RCNN/#33-fasterrcnn","text":"\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u7f51\u7edc\u6a21\u578b\u67b6\u6784\u548c\u9884\u6d4b\u7ed3\u679c\uff0c\u5728\u7f51\u7edc\u9884\u6d4b\u524d\u6211\u4eec\u9700\u8981\u5bf9\u7f51\u7edc\u8fdb\u884c\u8bad\u7ec3\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6765\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3\uff0c\u6a21\u578b\u8bad\u7ec3\u4e5f\u5c31\u662f\u8981\u4f7f\u7528\u635f\u5931\u51fd\u6570\uff0c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u5229\u7528\u4f18\u5316\u5668\u8fdb\u884c\u53c2\u6570\u66f4\u65b0\uff0c\u8bad\u7ec3\u7684\u6d41\u7a0b\u662f\uff1a \u4f7f\u7528Dataloader\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e \u6307\u5b9a\u4f18\u5316\u5668\uff1a\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u52a0\u52a8\u91cf\u7684SGD\u65b9\u6cd5 \u8bbe\u7f6e\u8f6e\u6b21epoch\uff0c\u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\u83b7\u53d6batch\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u8ba1\u7b97\u635f\u5931\u51fd\u6570\uff0c\u4f7f\u7528\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u53c2\u6570\uff0c\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3 \u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u8fd9\u4e2a\u6d41\u7a0b\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3\u3002\u8be5\u90e8\u5206\u4ee3\u7801\u5728fasterRCNN.ipynb\u4e2d\uff0c \u4f7f\u7528Dataloader\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e from torch.utils.data import DataLoader def collate_fn ( batch ): return tuple ( zip ( * batch )) # \u83b7\u53d6batch\u7684\u6570\u636e\uff0c\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3 train_data_loader = DataLoader ( dataset , batch_size = 2 , shuffle = True , collate_fn = collate_fn ) \u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u4e00\u4e2abatch\u4e2d\u7684\u6570\u636e\u5c55\u793a\u51fa\u6765\uff1a # \u904d\u5386\u6570\u636e\uff0c\u83b7\u53d6\u7b2c\u4e00\u4e2abatch\u7684\u6570\u636e\u8fdb\u884c\u5c55\u793a for i , data in enumerate ( train_data_loader ): inputs , labels = data # batch\u7684\u5927\u5c0f print ( '\u56fe\u7247\u4e2a\u6570\uff1a' , len ( inputs )) print ( '\u76ee\u6807\u503c\uff1a' , labels ) break \u7ed3\u679c\u4e3a\uff1a \u56fe\u7247\u4e2a\u6570 \uff1a 2 \u76ee\u6807\u503c \uff1a ({ 'boxes' : tensor ([[ 654.4000 , 0.0000 , 798.4000 , 744.3851 ], [ 481.6000 , 79.1444 , 774.4000 , 742.2460 ], [ 403.2000 , 320.8556 , 619.2000 , 795.7219 ], [ 160.0000 , 329.4117 , 488.0000 , 793.5829 ], [ 75.2000 , 348.6631 , 265.6000 , 774.3316 ], [ 35.2000 , 468.4492 , 102.4000 , 648.1283 ], [ 1.6000 , 444.9198 , 96.0000 , 750.8021 ]], dtype = torch . float64 ), 'labels' : tensor ([ 10 , 10 , 10 , 10 , 10 , 10 , 10 ]), 'image_id' : tensor ([ 3172 ]), 'area' : tensor ([ 31320. , 56730. , 29970. , 44485. , 23681. , 3528. , 8437. ]), 'iscrowd' : tensor ([ 0 , 0 , 0 , 0 , 0 , 0 , 0 ])}, { 'boxes' : tensor ([[ 432.0000 , 170.6666 , 571.2000 , 206.9334 ], [ 604.8000 , 142.9333 , 648.0000 , 183.4667 ]], dtype = torch . float64 ), 'labels' : tensor ([ 6 , 6 ]), 'image_id' : tensor ([ 1001 ]), 'area' : tensor ([ 1479. , 513. ]), 'iscrowd' : tensor ([ 0 , 0 ])} \u4f18\u5316\u5668\u8bbe\u7f6e # \u83b7\u53d6\u6240\u6709\u8981\u8fdb\u884c\u8bad\u7ec3\u7684\u53c2\u6570\uff0c\u8bbe\u7f6e\u4f18\u5316\u5668 params = [ p for p in model . parameters () if p . requires_grad ] optimizer = torch . optim . SGD ( params , lr = 0.005 , momentum = 0.9 , weight_decay = 0.0005 ) \u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 \u8fed\u4ee3\u6b21\u6570 itr = 1 # \u5b58\u653e\u8bad\u7ec3\u635f\u5931 total_train_loss = [] # \u635f\u5931\u503c losses_value = 0 # \u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( 2 ): # \u8bad\u7ec3\u6a21\u5f0f model . train () train_loss = [] # \u8fdb\u5ea6\u6761 # \u904d\u5386\u6570\u636e\uff0c\u83b7\u53d6\u56fe\u50cf\uff0c\u76ee\u6807\u503c\u548c\u56fe\u50cfid for images , targets in train_data_loader : # \u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3\uff0c\u83b7\u53d6\u635f\u5931\u503c(RPN\u7684\u635f\u5931+FastRCNN\u7684\u635f\u5931),\u5c06\u4fe1\u606f\u6253\u5370\u51fa\u6765\u5206\u6790 loss_dict = model ( images , targets ) print ( loss_dict ) # \u5c06\u635f\u5931\u6c42\u548c losses = sum ( loss for loss in loss_dict . values ()) # \u83b7\u53d6loss\u503c losses_value = losses . item () train_loss . append ( losses_value ) # \u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u66f4\u65b0\u53c2\u6570 optimizer . zero_grad () losses . backward () optimizer . step () # \u65e5\u5fd7\u4fe1\u606f print ( f \"Epoch: { epoch + 1 } , Batch: { itr } , Loss: { losses_value } \" ) # \u8fed\u4ee3\u6b21\u6570\u589e1 itr += 1 # \u83b7\u53d6\u5f53\u524d\u8f6e\u6b21\u7684\u635f\u5931 epoch_train_loss = np . mean ( train_loss ) # \u8f6e\u6b21\u635f\u5931\u5199\u5165\u5230\u5217\u8868\u4e2d total_train_loss . append ( epoch_train_loss ) \u7ed3\u679c\u4e3a\uff1a { 'loss_classifier' : tensor ( 29.4023 , grad_fn =< NllLossBackward0 > ), 'loss_box_reg' : tensor ( 2.7863 , grad_fn =< DivBackward0 > ), 'loss_objectness' : tensor ( 6.2046 , grad_fn =< BinaryCrossEntropyWithLogitsBackward0 > ), 'loss_rpn_box_reg' : tensor ( 0.8658 , dtype = torch . float64 , grad_fn =< DivBackward0 > )} Epoch : 1 , Batch : 1 , Loss : 39.25891468526476 { 'loss_classifier' : tensor ( 60.0640 , grad_fn =< NllLossBackward0 > ), 'loss_box_reg' : tensor ( 0.72087 , grad_fn =< DivBackward0 > ), 'loss_objectness' : tensor ( 0.22394 , grad_fn =< BinaryCrossEntropyWithLogitsBackward0 > ), 'loss_rpn_box_reg' : tensor ( 0.291624814647 , dtype = torch . float64 , grad_fn =< DivBackward0 > )} Epoch : 1 , Batch : 2 , Loss : 61.38612275054647 \u3002\u3002\u3002\u3002\u3002\u3002 \u635f\u5931\u51fd\u6570\u7684\u7ed3\u679c\u4e2d\u5305\u542b\uff1arpn\u7684\u635f\u5931\uff08loss_objectness\uff0closs_rpn_box_reg\uff09\u548cfastRCNN\u7684\u635f\u5931\uff08loss_classifier\uff0closs_box_reg\uff09\uff0c\u5c06\u4ed6\u4eec\u52a0\u5728\u4e00\u8d77\u5c31\u53ef\u5f97\u5230\u6574\u4e2a\u6a21\u578b\u7684\u635f\u5931\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u3002 \u6211\u4eec\u591a\u8bad\u7ec3\u51e0\u4e2a\u8f6e\u6b21\uff0c\u635f\u5931\u51fd\u6570\u7684\u53d8\u6362\u66f2\u7ebf\u5982\u4e0b\u56fe\u6240\u793a\uff1a # \u7ed8\u5236\u635f\u5931\u51fd\u6570\u53d8\u5316\u7684\u66f2\u7ebf plt . plot ( range ( len ( total_train_loss )),[ loss . numpy () for loss in total_train_loss ]) plt . grid () \u5f53\u6211\u4eec\u8bad\u7ec3\u597d\u6a21\u578b\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\u4e86\uff0c\u4e5f\u5c31\u662f\u672c\u8282\u5f00\u5934\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u7684\u5185\u5bb9\u3002 \u603b\u7ed3 \u719f\u6089FasterRCNN\u76ee\u6807\u68c0\u6d4b\u7684\u601d\u60f3 \u5229\u7528CNN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u5229\u7528RPN\u751f\u6210\u5019\u9009\u533a\u57df\uff0c\u6700\u540e\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52 \u77e5\u9053anchor\u7684\u601d\u60f3 anchor\u6280\u672f\u5c06\u68c0\u6d4b\u95ee\u9898\u8f6c\u6362\u4e3a**\"\u8fd9\u4e2a\u56fa\u5b9a\u53c2\u8003\u6846\u4e2d\u6709\u6ca1\u6709\u76ee\u6807\uff0c\u76ee\u6807\u6846\u504f\u79bb\u53c2\u8003\u6846\u591a\u8fdc\"**\uff0c\u4e0d\u518d\u9700\u8981\u591a\u5c3a\u5ea6\u904d\u5386\u6ed1\u7a97 \u638c\u63e1RPN\u7f51\u7edc\u662f\u5982\u4f55\u8fdb\u884c\u5019\u9009\u533a\u57df\u7684\u751f\u6210\u7684 \u901a\u8fc7softmax\u5224\u65adanchors\u5c5e\u4e8epositive\u6216\u8005negative\uff0c\u518d\u5229\u7528bounding box regression\u4fee\u6b63anchors\u83b7\u5f97\u7cbe\u786e\u7684proposals \u638c\u63e1ROIPooling\u7684\u4f7f\u7528\u65b9\u6cd5 RoIpooling\u4f7f\u7528\u6700\u5927\u6c60\u5316\u5c06\u4efb\u4f55\u6709\u6548\u7684RoI\u533a\u57df\u5185\u7684\u7279\u5f81\u8f6c\u6362\u6210\u5177\u6709H\u00d7W\u7684\u56fa\u5b9a\u7a7a\u95f4\u8303\u56f4\u7684\u5c0ffeature map \u77e5\u9053fasterRCNN\u7684\u8bad\u7ec3\u65b9\u6cd5 \u6b63\u8d1f\u6837\u672c\u8bbe\u7f6e\u7684\u65b9\u6cd5\uff0c\u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u7aef\u5230\u7aef\u7684\u7f51\u7edc\u8bad\u7ec3","title":"3.3 FasterRCNN\u7684\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/","text":"2.4 \u9ea6\u7a57\u68c0\u6d4b\u6848\u4f8b-FasterRCNN \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u9ea6\u7a57\u68c0\u6d4b\u7684\u6570\u636e\u96c6\u7684\u6784\u6210 \u7406\u89e3\u9879\u76ee\u89e3\u51b3\u7684\u5168\u6d41\u7a0b \u80fd\u591f\u5229\u7528fasterRCNN\u7f51\u7edc\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u9884\u6d4b 1. \u9ea6\u7a57\u68c0\u6d4b\u9879\u76ee\u7b80\u4ecb \u00b6 \u5c0f\u9ea6\u662f\u6211\u56fd\u6700\u91cd\u8981\u7684\u7cae\u98df\u4f5c\u7269\u4e4b\u4e00\uff0c\u5176\u4e0d\u4ec5\u5173\u4e4e\u7740\u4eba\u4eec\u65e5\u5e38\u7684\u996e\u98df\u9700\u6c42\uff0c\u540c\u65f6\u5f71\u54cd\u7740\u56fd\u6c11\u7ecf\u6d4e\u7684\u53d1\u5c55\u548c\u793e\u4f1a\u7a33\u5b9a\u3002\u968f\u7740\u667a\u80fd\u6280\u672f\u7684\u4e0d\u65ad\u53d1\u5c55\uff0c\u667a\u6167\u519c\u4e1a\u5bf9\u7cae\u98df\u7684\u751f\u4ea7\u8d77\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u4e00\u4e9b\u667a\u80fd\u6280\u672f\u5bf9\u4f20\u7edf\u519c\u4e1a\u8d77\u5230\u91cd\u5927\u7684\u63a8\u52a8\u4f5c\u7528\u3002 \u9ea6\u7a57\u8bc6\u522b\u5728\u667a\u6167\u519c\u4e1a\u4e2d\u6709\u8f83\u9ad8\u7684\u5e94\u7528\u4ef7\u503c\uff0c\u5982\u7cae\u98df\u4ea7\u91cf\u4f30\u8ba1\u3001\u79cd\u5b50\u7b5b\u9009\u3001\u548c\u79cd\u5b50\u57fa\u56e0\u6027\u80fd\u7b49\u3002\u8bb8\u591a\u7814\u7a76\u4eba\u5458\u4e3b\u8981\u5173\u6ce8\u667a\u6167\u519c\u4e1a\u548c\u9ea6\u7a57\u8ba1\u6570\u3002\u4f20\u7edf\u9ea6\u7a57\u8ba1\u6570\u4e3b\u8981\u4f9d\u9760\u4eba\u5de5\u89c6\u89c9\u8fdb\u884c\u4e3b\u89c2\u8fa8\u522b\u548c\u5224\u65ad\u3002\u8be5\u65b9\u6cd5\u5177\u6709\u7b80\u5355\u3001\u65b9\u4fbf\u7b49\u7279\u70b9\uff0c\u4f46\u9700\u8981\u5927\u91cf\u7684\u4eba\u529b\u7269\u529b\u6548\u7387\u4f4e\u4e0b\u3001\u4eba\u7684\u4e3b\u89c2\u56e0\u7d20\u8f83\u591a\u3002\u968f\u7740\u56fe\u50cf\u8bc6\u522b\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4eba\u4eec\u501f\u52a9\u667a\u80fd\u7b97\u6cd5\u66ff\u4ee3\u4f20\u7edf\u7684\u8ba1\u6570\u65b9\u6cd5\u3002\u5728\u5bf9\u9ea6\u7a57\u56fe\u50cf\u8fdb\u884c\u7cbe\u51c6\u68c0\u6d4b\u65f6\u4f1a\u9047\u5230\u89c6\u89c9\u4e0a\u7684\u6311\u6218\uff0c\u5982\u5c0f\u9ea6\u690d\u682a\u91cd\u53e0\uff0c\u98ce\u52a8\u4e0b\u7684\u6a21\u7cca\u56fe\u50cf\u3002\u8fd9\u4e9b\u95ee\u9898\u52a0\u5267\u4e86\u8bc6\u522b\u5355\u4e2a\u5c0f\u9ea6\u5934\u7684\u96be\u5ea6\u3002\u4e3a\u4e86\u514b\u670d\u8fd9\u4e9b\u5e72\u6270\u7684\u56e0\u7d20\uff0c\u5c06\u8ba1\u7b97\u673a\u6280\u672f\u4e0e\u519c\u4e1a\u6df1\u5ea6\u878d\u5408\uff0c\u7ed3\u5408\u56fe\u50cf\u5904\u7406\u57fa\u672c\u6280\u5de7\uff0c\u5229\u7528\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u795e\u7ecf\u7f51\u7edc\u8bbe\u8ba1\u4e00\u5957\u57fa\u4e8eFaster R-CNN\u7684\u9ea6\u7a57\u56fe\u50cf\u8bc6\u522b\u7b97\u6cd5\uff0c\u7528\u5176\u5bf9\u5927\u7530\u4e0b\u5c0f\u9ea6\u7684\u6570\u91cf\u3001\u5bc6\u5ea6\u3001\u5927\u5c0f\u7b49\u53c2\u6570\u9884\u4f30\u3002\u5c0f\u9ea6\u7ba1\u7406\u51b3\u7b56\u8005\u53ef\u8fd0\u7528\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u5c0f\u9ea6\u751f\u4ea7\u8fc7\u7a0b\u7684\u667a\u80fd\u51b3\u7b56\u548c\u7cbe\u786e\u7ba1\u7406\uff0c\u4e3a\u5c0f\u9ea6\u7684\u667a\u80fd\u8bc6\u522b\u76d1\u63a7\u7cfb\u7edf\u63d0\u4f9b\u7406\u8bba\u4f9d\u636e\u548c\u6280\u672f\u652f\u6301\u3002 2. \u9ea6\u7a57\u6570\u636e\u96c6\u4ecb\u7ecd\u4e0e\u6570\u636e\u5206\u6790 \u00b6 \u5c0f\u9ea6\u56fe\u50cf\u6570\u636e\u96c6\u6765\u81eaGlobal Wheat Head detection (GWHD) dataset\uff0c\u5176\u662f\u7b2c\u4e00\u4e2a\u4ece\u73b0\u573a\u5149\u5b66\u56fe\u50cf\u8fdb\u884c\u5c0f\u9ea6\u5934\u68c0\u6d4b\u7684\u5927\u578b\u6570\u636e\u96c6\uff0c\u5305\u62ec\u591a\u4e2a\u5730\u533a\u7684\u4e0d\u540c\u54c1\u79cd\uff0c\u6db5\u76d6\u4e86\u7531\u6b27\u6d32(\u6cd5\u56fd\uff0c\u82f1\u56fd\uff0c\u745e\u58eb)\uff0c\u4e9a\u6d32(\u4e2d\u56fd\uff0c\u65e5\u672c)\uff0c\u5927\u6d0b\u6d32(\u6fb3\u5927\u5229\u4e9a)\u548c\u5317\u7f8e(\u52a0\u62ff\u5927)\u7684\u6807\u6ce8\u56fe\u50cf\u3002\u6240\u6709\u56fe\u50cf\u7684\u901a\u7528\u683c\u5f0f\u4e3a1024 \u00d7 1024 px\uff0c\u5206\u8fa8\u7387\u4e3a\u6bcf\u50cf\u7d200.1~0.3 mm\u3002\u672c\u6587\u7814\u7a76\u7684\u662f\u4e0d\u540c\u54c1\u79cd\u5c0f\u9ea6\u5934\u7684\u5bc6\u5ea6\u548c\u5927\u5c0f\uff0c\u90e8\u5206\u56fe\u50cf\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8fd9\u4e9b\u6570\u636e\u5b58\u653e\u5728wheatData\u6587\u4ef6\u5939\u4e2d\uff0c\u5176\u4e2d\u5305\u62ec\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u6807\u6ce8\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 2.1 \u6570\u636e\u8bfb\u53d6 \u00b6 \u9996\u5148\u6211\u4eec\u4f7f\u7528pandas\u8bfb\u53d6train_data.csv\u6587\u4ef6\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset_utils.py\u4e2d\u3002 # \u6570\u636e\u83b7\u53d6\u4e0e\u5206\u6790:\u6307\u5b9a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u8def\u5f84 train_data_dir = 'wheatData/train' test_data_dir = 'wheatData/test' # \u8bfb\u53d6CSV\u6587\u4ef6 train_data_label = pd . read_csv ( 'wheatData/train_data.csv' ) print ( train_data_label . head ()) \u7ed3\u679c\u4e3a\uff1a \u5176\u4e2d\u6bcf\u4e00\u884c\u8868\u793a\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u6807\u6ce8\u6846\u5982\u4e0b\u56fe\u767d\u8272\u65b9\u6846\u6240\u793a\uff1a \u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a image_id\uff1a\u56fe\u50cf\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u6307\u5f53\u524d\u6807\u6ce8\u6846\u6240\u5728\u7684\u56fe\u50cf width\u548cheight: \u56fe\u50cf\u7684\u5bbd\u9ad8\uff0c\u5728\u5f53\u524d\u6570\u636e\u96c6\u4e2d\uff0c\u6240\u6709\u56fe\u7247\u7684\u5927\u5c0f\u5747\u4e3a1024x1024 x\u548cy: \u8868\u793a\u5f53\u524d\u6807\u6ce8\u6846\u7684\u5de6\u4e0a\u89d2\u5750\u6807 w\u548ch: \u8868\u793a\u6807\u6ce8\u6846\u7684\u5bbd\u548c\u9ad8\u3002 \u5bf9\u5e94\u7684\u56fe\u7247\u6570\u636e\u90fd\u5b58\u653e\u5728train\u6587\u4ef6\u5939\u4e2d\uff0ctest\u4e2d\u7684\u56fe\u7247\u662f\u6d4b\u8bd5\u56fe\u50cf\uff0c\u672a\u8fdb\u884c\u6807\u6ce8 2.2 \u6570\u636e\u5206\u6790 \u00b6 2.2.1 \u6570\u636e\u91cf\u7684\u5206\u6790 \u00b6 \u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset_utils.py\u4e2d\u3002 \u6807\u6ce8\u6846\u7684\u6570\u91cf # \u8bad\u7ec3\u6570\u636e\u5927\u5c0f\uff08\u8fd9\u91cc\u6307\u7684\u662f\u76ee\u6807\u6846\uff09 print ( \"\u76ee\u6807\u6846\u4e2a\u6570\uff1a {} \" . format ( train_data_label . shape )) \u7ed3\u679c\u4e3a\uff1a \u76ee\u6807\u6846\u4e2a\u6570 \uff1a ( 147793 , 9 ) \u8bad\u7ec3\u96c6\u4e2d\u4e00\u5171\u6807\u6ce8\u4e86147793\u4e2a\u76ee\u6807\u6846 \u8bad\u7ec3\u96c6\u56fe\u7247\u7684\u6570\u91cf # \u6709\u6807\u6ce8\u4fe1\u606f\u56fe\u7247\u7684\u6570\u91cf print ( \"\u56fe\u7247\u6570\u91cf\uff1a {} \" . format ( train_data_label [ 'image_id' ] . nunique ())) # \u6240\u6709\u56fe\u7247\u7684\u6570\u91cf print ( \"\u6240\u6709\u56fe\u7247\u6570\u91cf\uff1a {} \" . format ( len ( os . listdir ( train_data_dir )))) \u7ed3\u679c\u4e3a\uff1a \u56fe\u7247\u6570\u91cf \uff1a 3373 \u6240\u6709\u56fe\u7247\u6570\u91cf \uff1a 3422 \u8bf4\u660e\u6709 3422-3373=49 \u5f20\u56fe\u7247\u6ca1\u6709\u6807\u6ce8\uff0c\u6240\u4ee5\u540e\u9762\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u65f6\u6211\u4eec\u53ea\u80fd\u9009\u62e9\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u7247\u8fdb\u884c\u8bad\u7ec3\u3002 2.2.2 \u6570\u636e\u5206\u5e03\u7684\u5206\u6790 \u00b6 \u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset_utils.py\u4e2d\u3002 \u56fe\u7247\u4e2d\u76ee\u6807\u6846\u6570\u91cf\u5206\u5e03 counts = train_data_label [ 'image_id' ] . value_counts () print ( \"\u5355\u5f20\u56fe\u7247\u4e2d\u6807\u6ce8\u6846\u7684\u6700\u5927\u503c {} \u548c\u6700\u5c0f\u503c {} \" . format ( max ( counts ), min ( counts ))) sns . displot ( counts , kde = True , color = \"g\" ) plt . xlabel ( 'boxes' ) plt . ylabel ( 'images' ) plt . show () \u7ed3\u679c\u4e3a\uff1a \u5355\u5f20\u56fe\u7247\u4e2d\u6807\u6ce8\u6846\u7684\u6700\u5927\u503c116\u548c\u6700\u5c0f\u503c1 \u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u5f20\u56fe\u7247\u4e2d\u7684\u6807\u6ce8\u6846\u4e2a\u6570\u572820-80\u4e4b\u95f4\uff0c\u5982\u679c\u5728\u68c0\u6d4b\u65f6\u4e0e\u8be5\u8303\u56f4\u76f8\u5dee\u8f83\u5927\u5219\u9700\u8981\u8fdb\u884c\u6838\u67e5\u662f\u5426\u51fa\u73b0\u95ee\u9898\u3002 \u6807\u6ce8\u6846\u4f4d\u7f6e\u5de6\u4e0a\u89d2\u5750\u6807\u7684\u5206\u5e03 # \u6807\u6ce8\u6846\u5de6\u4e0a\u89d2\u5750\u6807\u7684\u5206\u5e03 sns . histplot ( data = train_data_label , x = 'x' , y = 'y' , bins = 50 , pmax = 0.9 ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u770b\u51fa\u5750\u6807x,y\u7684\u8303\u56f4\u57280-1000\u4e4b\u95f4\uff0c\u4e14\u6bcf\u4e00\u90e8\u5206\u7684\u5206\u5e03\u90fd\u6bd4\u8f83\u5747\u5300\uff0c\u6240\u4ee5\u53ef\u4ee5\u5224\u65ad\u51fa\u76ee\u6807\u6846\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u56fe\u50cf\u7684\u4efb\u610f\u4f4d\u7f6e\u3002 \u6807\u6ce8\u6846\u4f4d\u7f6e\u4e2d\u5fc3\u70b9\u5750\u6807\u7684\u5206\u5e03 # \u83b7\u53d6\u6570\u636e\u7684\u4e2d\u5fc3\u70b9\u5750\u6807 train_data_label [ 'cx' ] = train_data_label [ 'x' ] + train_data_label [ 'w' ] / 2 train_data_label [ 'cy' ] = train_data_label [ 'y' ] + train_data_label [ 'h' ] / 2 # \u7ed8\u5236\u5206\u5e03\u56fe\u50cf sns . histplot ( data = train_data_label , x = 'cx' , y = 'cy' , bins = 50 , pmax = 0.9 ) # \u8bbe\u7f6e\u8f74\u63cf\u8ff0 plt . xlabel ( 'cx' ) plt . ylabel ( 'cy' ) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u770b\u51fa\u5750\u6807cx,cy\u7684\u8303\u56f4\u57280-1000\u4e4b\u95f4\uff0c\u4e14\u6bcf\u4e00\u90e8\u5206\u7684\u5206\u5e03\u90fd\u6bd4\u8f83\u5747\u5300\uff0c\u6240\u4ee5\u53ef\u4ee5\u5224\u65ad\u51fa\u76ee\u6807\u6846\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u56fe\u50cf\u7684\u4efb\u610f\u4f4d\u7f6e\u3002 \u6807\u6ce8\u6846\u7684\u5bbd\u9ad8\u7684\u5206\u5e03 # \u6807\u6ce8\u6846\u5bbd\u9ad8\u7684\u5206\u5e03 sns . histplot ( data = train_data_label , x = 'w' , y = 'h' , bins = 50 , pmax = 0.9 ) # \u8f74\u63cf\u8ff0 plt . xlabel ( 'w' ) plt . ylabel ( 'h' ) plt . show () \u7ed3\u679c\u4e3a\uff1a \u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u770b\u51fa\u6807\u7816\u6846\u5bbd\u9ad8\u7684\u8303\u56f4\u57280-1000\u4e4b\u95f4\uff0c\u4e3b\u8981\u96c6\u4e2d\u57280-400\u4e4b\u95f4\uff0c\u6bd4\u4f8b\u96c6\u4e2d\u57281\uff1a1\uff0c\u8fd9\u53ef\u4ee5\u4f5c\u4e3aanchor\u8bbe\u7f6e\u7684\u4f9d\u636e\uff0c \u6807\u6ce8\u6846\u9762\u79ef\u7684\u5206\u5e03 # \u6807\u6ce8\u6846\u9762\u79ef\u7684\u5206\u5e03\uff1a\u7528\u6765\u8bbe\u7f6eanchor\u7684\u5c3a\u5ea6 aeras = train_data_label [ 'w' ] * train_data_label [ 'h' ] print ( \"\u76ee\u6807\u6846\u6700\u5c0f\u9762\u79ef\u4e3a {} \u6700\u5927\u9762\u79ef\u4e3a {} \" . format ( min ( aeras ), max ( aeras ))) sns . histplot ( aeras , bins = 50 , kde = False ) plt . show () \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6807\u6ce8\u6846\u7684\u9762\u79ef\u96c6\u4e2d\u57280-5000\u4ee5\u4e0b\uff0c\u53ef\u4ee5\u7528\u6765\u7b5b\u9009\u5f02\u5e38\u7684\u68c0\u6d4b\u6846\u3002 2.2.3 \u6570\u636e\u5c55\u793a \u00b6 \u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset_utils.py\u4e2d\u3002 # \u56fe\u7247\u53ca\u6807\u6ce8\u6846\u9884\u89c8 # \u8bbe\u7f6e\u5750\u6807\u8f74\u7684\u4e2a\u6570 num_rows , num_cols = 1 , 2 # \u83b7\u53d6\u6807\u6ce8\u4fe1\u606f ids = train_data_label [ 'image_id' ] . unique ()[ 100 : 100 + num_rows * num_cols ] # \u8bfb\u53d6\u56fe\u7247 imgs = [ plt . imread ( f ' { train_data_dir } / { n } .jpg' ) for n in ids ] # \u56fe\u7247\u663e\u793a axes = show_images ( imgs , num_rows , num_cols ) # \u663e\u793a\u6807\u6ce8\u6846 for ax , id in zip ( axes , ids ): datas = train_data_label [ train_data_label [ 'image_id' ] == id ] bboxes = [( d [ 'x' ], d [ 'y' ], d [ 'x' ] + d [ 'w' ], d [ 'y' ] + d [ 'h' ]) for _ , d in datas . iterrows ()] show_bboxes ( ax , bboxes , labels = None , colors = [ 'r' ]) plt . show () \u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u6807\u6ce8\u6846\u7ed8\u5236\u5728\u76f8\u5e94\u7684\u56fe\u7247\u4e0a\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 3.\u6570\u636e\u52a0\u8f7dDataSet\u7684\u6784\u5efa \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u7ee7\u627f torch.utils.data.Dataset \u62bd\u8c61\u7c7b\uff0c\u5b9e\u73b0 __init__ __len__ __getitem__ \u3002 \u5176\u4e2d\uff1a __init__ \u65b9\u6cd5\u8fdb\u884c\u53c2\u6570\u7684\u521d\u59cb\u5316\uff0c\u5305\u62ec __len__ \u65b9\u6cd5\u83b7\u53d6\u6570\u91cf\u96c6\u4e2d\u56fe\u7247\u7684\u6570\u91cf __getitem__ \u83b7\u53d6\u6570\u636e\uff1a image: \u56fe\u50cf\u6570\u636e target: \u5b57\u5178\u6570\u636e\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u65f6\u7684\u76ee\u6807\u503c\u4fe1\u606f\uff0c\u4ecb\u7ecd\u5982\u4e0b\uff1a boxes : \u8868\u793a\u6807\u6ce8\u6846\u7684\u5de6\u4e0a\u89d2\u5750\u6807\u548c\u53f3\u4e0b\u89d2\u5750\u6807 [x0, y0, x1, y1] \u3002 label : \u6807\u5fd7\u6807\u6ce8\u6846\u7684\u7c7b\u522b\uff0c\u5728\u5f53\u524d\u4efb\u52a1\u4e2d\u53ea\u6709\u5c0f\u9ea6\u4e00\u4e2a\u7c7b\u522b\uff0c\u6240\u4ee5\u6240\u6709\u6807\u6ce8\u6846\u7684\u7c7b\u522b\u6807\u7b7e\u503c\u8bbe\u4e3a1 \u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset.py\u4e2d\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u6570\u636e\u8bfb\u53d6\u7c7b class Wheat ( Dataset ): # \u521d\u59cb\u5316 def __init__ ( self , dataframe , image_dir , phase = 'train' , transforms = None ): ''' :param dataframe: \u6570\u636e\u6807\u6ce8\u7ed3\u679c :param image_dir: \u56fe\u50cf\u8def\u5f84 :param phase: \u8bad\u7ec3\u9636\u6bb5train\u6216\u9884\u6d4b\u9636\u6bb5test :param transforms: \u56fe\u50cf\u589e\u5f3a\u5904\u7406 ''' super () . __init__ () # \u6570\u636e\u6807\u6ce8\u7684CSV\u7ed3\u679c self . df = dataframe # \u56fe\u50cf\u8def\u5f84 self . image_dir = image_dir # \u9636\u6bb5\u4fe1\u606f self . phase = phase # \u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5 self . transforms = transforms # \u56fe\u50cf\u6587\u4ef6\u540d\u79f0\uff1a\u53bb\u91cd\u4e4b\u540e\u7684\u7ed3\u679c self . image_id = dataframe [ \"image_id\" ] . unique () # \u83b7\u53d6\u6570\u636e\u7684\u6570\u91cf def __len__ ( self ): return len ( self . image_id ) # \u83b7\u53d6\u6bcf\u4e00\u5e45\u56fe\u7247 def __getitem__ ( self , idx ): # \u83b7\u53d6\u56fe\u50cf\u4fe1\u606f image_id = self . image_id [ idx ] image = plt . imread ( f ' { self . image_dir } / { image_id } .jpg' ) . astype ( np . float32 ) / 255.0 # \u8bad\u7ec3\u9636\u6bb5 if self . phase == 'train' : # \u6839\u636e\u56fe\u50cf\u7684\u540d\u79f0\u83b7\u53d6\u5bf9\u5e94\u7684\u6807\u6ce8\u4fe1\u606f records = self . df [ self . df [ 'image_id' ] == image_id ] # \u83b7\u53d6\u76ee\u6807\u6846 boxes = records [[ 'x' , 'y' , 'w' , 'h' ]] . values # \u83b7\u53d6\u76ee\u6807\u6846\u7684\u53f3\u4e0b\u89d2\u5750\u6807 boxes [:, 2 ] = boxes [:, 0 ] + boxes [:, 2 ] boxes [:, 3 ] = boxes [:, 1 ] + boxes [:, 3 ] # \u6bcf\u4e00\u6846\u7684\u7c7b\u522b\u4e3a\u5c0f\u9ea6\uff0c\u8bbe\u4e3a1\uff08\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7c7b\u522b\uff09 labels = torch . ones (( records . shape [ 0 ],), dtype = torch . int64 ) # \u8bbe\u7f6e\u76ee\u6807\u503c\u4fe1\u606f\uff0c\u76ee\u6807\u503c\u5b58\u653e\u5728target\u5b57\u5178\u4e2d\uff1a\u76ee\u6807\u6846\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u7c7b\u522b\u503c target = {} target [ 'boxes' ] = boxes target [ 'labels' ] = labels # \u589e\u5f3a\u5904\u7406 if self . transforms : # \u589e\u5f3a\u7684\u5185\u5bb9\u5305\u62ec\uff1a\u56fe\u50cf\uff0c\u6846\u548c\u7c7b\u522b sample = { \"image\" : image , 'bboxes' : target [ \"boxes\" ], \"labels\" : labels } # \u5c06sample\u5b57\u5178\u4e2d\u7684key\u548cvalue\u89e3\u5305\u4e3akey=value\u7684\u65b9\u5f0f\u4f20\u8f93\u5230\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u4e2d sample = self . transforms ( ** sample ) # \u83b7\u53d6\u589e\u5f3a\u540e\u7684\u56fe\u50cf image = sample [ \"image\" ] # \u5bf9\u56fe\u50cf\u4e2d\u7684\u6807\u6ce8\u6846\u5750\u6807\u8fdb\u884c\u62fc\u63a5\uff0c\u5e76\u8c03\u6574\u6210n*4\u7684\u7ef4\u5ea6,n\u8868\u793a\u56fe\u50cf\u7684\u76ee\u6807\u6846\u7684\u6570\u91cf target [ 'boxes' ] = torch . stack ( tuple ( map ( torch . tensor , zip ( * sample [ 'bboxes' ])))) . permute ( 1 , 0 ) # \u8fd4\u56de\u589e\u5f3a\u540e\u7684\u56fe\u50cf\uff0c\u76ee\u6807\u503c\u548c\u5bf9\u5e94\u7684\u56fe\u50cf\u540d\u79f0 return image , target , image_id # \u9884\u6d4b\u9636\u6bb5 else : # \u9884\u6d4b\u9636\u6bb5\u53ea\u9700\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406\uff0c\u6ca1\u6709\u76ee\u6807\u503c if self . transforms : sample = { \"image\" : image } sample = self . transforms ( ** sample ) image = sample [ 'image' ] return image , image_id @staticmethod def get_transform (): # \u8bad\u7ec3\u9636\u6bb5\u56fe\u50cf\u589e\u5f3a\u8fdb\u884c\u7ffb\u8f6c\uff08\u6ce8\u610f\u6846\u4e5f\u4f1a\u968f\u4e4b\u53d8\u6362\uff09\u548c\u7c7b\u578b\u7684\u8f6c\u6362 return A . Compose ([ A . Flip ( 0.5 ), ToTensor () ], bbox_params = { 'format' : 'pascal_voc' , 'label_fields' : [ 'labels' ]}) @staticmethod def get_test_transform (): # \u9884\u6d4b\u65f6\u53ea\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u7684\u8f6c\u6362 return A . Compose ([ ToTensor () ]) \u63a5\u4e0b\u6765\u6211\u4eec\u4ee5\u8bad\u7ec3\u96c6\u6570\u636e\u4e3a\u4f8b\uff0c\u6765\u770b\u4e0b\u8f93\u51fa\u7684\u7ed3\u679c\uff1a if __name__ == \"__main__\" : # \u83b7\u53d6\u6570\u636e\u548c\u6807\u7b7e\u4fe1\u606f train_data_dir = 'wheatData/train' train_data_label = pd . read_csv ( 'wheatData/train_data.csv' ) # \u5b9e\u4f8b\u5316\u6570\u636e\u83b7\u53d6\u7c7b train_dataset = Wheat ( train_data_label , train_data_dir ) # \u904d\u5386\u56fe\u50cf\u8fdb\u884c\u663e\u793a datas = [ train_dataset [ i ] for i in range ( 10 , 12 )] # \u83b7\u53d6\u56fe\u50cf\u6570\u636e\uff08CHW-\u300bHWC\uff09 imgs = [ d [ 0 ] . permute ( 1 , 2 , 0 ) . numpy () for d in datas ] # \u56fe\u50cf\u5c55\u793a axes = show_images ( imgs , 1 , 2 ) # \u6807\u6ce8\u6846\u5c55\u793a for ax , ( image , target , image_id ) in zip ( axes , datas ): show_bboxes ( ax , target [ 'boxes' ], colors = [ 'w' ]) plt . show () \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a 4.\u6a21\u578b\u8bad\u7ec3 \u00b6 4.1 \u6a21\u578b\u6784\u5efa \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u6784\u5efafasterRCNN\u7684\u6a21\u578b\u7684\u6765\u8fdb\u884c\u9ea6\u7a57\u68c0\u6d4b\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b\uff1a \u9996\u5148\u6211\u4eec\u5229\u7528torchvision\u521b\u5efaFaster RCNN\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u521b\u5efa\u6a21\u578b\uff0c\u4f7f\u7528torchvision\u4e2d\u7684fasterRCNN\u6a21\u578b\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b; \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4e0d\u4fee\u6539backbone\u90e8\u5206\u7684\u53c2\u6570 model = torchvision . models . detection . fasterrcnn_resnet50_fpn ( pretrained = True , trainable_backbone_layers = False ) print ( \"\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u8f93\u51fa\u7aef {} \" . format ( model . roi_heads . box_predictor )) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u9884\u8bad\u7ec3\u6a21\u578b\u7684\u8f93\u51fa\u7aefFastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 91 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 364 , bias = True ) ) \u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u524d\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u8f93\u51fa\u7c7b\u522b\u4e2a\u6570\u4e3a90\u7c7b\u5e76\u4e0d\u9002\u5408\u6211\u4eec\u5f53\u524d\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u8f93\u51fa\u7aef\u8fdb\u884c\u4fee\u6539\u3002 \u6a21\u578b\u7684\u4fee\u6539\uff0c\u6211\u4eec\u9700\u8981\u66ff\u6362\u8f93\u51fa\u5c42\uff0c\u8981\u83b7\u53d6\u8f93\u51fa\u5c42\u8f93\u5165\u7279\u5f81\u7684\u5927\u5c0f\uff0c\u5e76\u5c06\u8f93\u51fa\u5c42\u7684\u5927\u5c0f\u6539\u4e3a2\uff1a # \u5f53\u524d\u4efb\u52a1\u68c0\u6d4b\u4e00\u7c7b\u6570\u636e\uff08\u5c0f\u9ea6\uff09\uff0cfasterRcnn\u4e2d\u9700\u8981\u8bbe\u7f6e\u4e3aN+1(\u80cc\u666f)\uff0c\u8bbe\u7f6e\u4e3a2 num_classes = 2 # \u83b7\u53d6\u8f93\u51fa\u7aef\u7684\u7279\u5f81\u5411\u91cf\u7684\u7ef4\u5ea6 in_features = model . roi_heads . box_predictor . cls_score . in_features # \u8bbe\u7f6e\u8f93\u51fa\u7aef\uff1a model . roi_heads . box_predictor = FastRCNNPredictor ( in_features , num_classes ) print ( \"\u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aef {} \" . format ( model . roi_heads . box_predictor )) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aefFastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 2 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 8 , bias = True ) ) \u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u4fee\u6539\u540e\u7684\u6a21\u578b\u8f93\u51fa\u7c7b\u522b\u4e2a\u6570\u4e3a2\u7c7b\uff0c\u9002\u5408\u6211\u4eec\u5f53\u524d\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u8be5\u6a21\u578b\u6765\u5904\u7406\u5f53\u524d\u7684\u4efb\u52a1\u3002 4.2 \u8bad\u7ec3\u53c2\u6570\u8bbe\u7f6e \u00b6 \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u8bbe\u5907\u4fe1\u606f\uff0c\u4f18\u5316\u5668\uff0c\u8f6e\u6b21\uff0c\u6279\u91cf\u5927\u5c0f\u7b49\u53c2\u6570\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b\uff1a # \u8bad\u7ec3\u8bbe\u5907\u7684\u8bbe\u7f6e\uff0c\u6709GPU\u7684\u4f7f\u7528GPU\uff0c\u5426\u5219\u4f7f\u7528CPU\u8fdb\u884c\u8bad\u7ec3 device = torch . device ( 'cuda' ) if torch . cuda . is_available () else torch . device ( 'cpu' ) # \u5c06\u6a21\u578b\u5199\u5165\u5230\u8bbe\u5907\u4e2d model . to ( device ) # \u83b7\u53d6\u6240\u6709\u8981\u8fdb\u884c\u8bad\u7ec3\u7684\u53c2\u6570\uff0c\u8bbe\u7f6e\u4f18\u5316\u5668 params = [ p for p in model . parameters () if p . requires_grad ] optimizer = torch . optim . SGD ( params , lr = 0.005 , momentum = 0.9 , weight_decay = 0.0005 ) # \u8bbe\u7f6e\u8bad\u7ec3\u7684\u8f6e\u6b21 num_epochs = 10 # \u6279\u6b21\u5927\u5c0f batch_size = 4 \u8f93\u51fa\u4fe1\u606f\u5982\u4e0b\u6240\u793a\uff1a \u8bbe\u5907\u4fe1\u606f \uff1a cpu \u4f18\u5316\u5668 \uff1a SGD ( Parameter Group 0 dampening : 0 lr : 0.005 momentum : 0.9 nesterov : False weight_decay : 0.0005 ) \u4ece\u8f93\u51fa\u4fe1\u606f\u4e2d\u53ef\u4ee5\u770b\u51fa\u5f53\u524d\u8bbe\u5907\u662fCPU\uff0c\u4f18\u5316\u5668\u4f7f\u7528\u52a0\u52a8\u91cf\u7684\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u3002 4.3 \u6570\u636e\u52a0\u8f7d \u00b6 \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u6309\u7167\u6279\u6b21\u7684\u5927\u5c0f\u6765\u83b7\u53d6\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3\uff0c\u521b\u5efaDataLoader\u6765\u83b7\u53d6\u6570\u636e\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b\uff1a\u5728\u8fd9\u91cc\u6307\u660e\u6570\u636e\u7684\u4e3a\u4f4d\u7f6e\uff0c\u521b\u5efaDataloader\u83b7\u53d6\u6570\u636e\u96c6\u3002 # \u83b7\u53d6\u6570\u636e\u548c\u6807\u7b7e\u4fe1\u606f train_data_dir = 'wheatData/train' train_data_label = pd . read_csv ( 'wheatData/train_data.csv' ) # \u5b9e\u4f8b\u5316\u6570\u636e\u83b7\u53d6\u7c7b train_dataset = Wheat ( train_data_label , train_data_dir , transforms = Wheat . get_transform ()) def collate_fn ( batch ): return tuple ( zip ( * batch )) # \u83b7\u53d6batch\u7684\u6570\u636e\uff0c\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3 train_data_loader = DataLoader ( train_dataset , batch_size = batch_size , shuffle = True , collate_fn = collate_fn ) \u63a5\u4e0b\u6765\u6211\u4eec\u5c55\u793a\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u5982\u4e0b\u6240\u793a\uff1a # batch\u6570\u636e\u7684\u5c55\u793a(\u6bcf\u4e2abatch\u4e2d\u6709batchsize\u4e2a\u6570\u636e) for i , ( imgs , targets , img_id ) in enumerate ( train_data_loader ): # \u6807\u6ce8\u4fe1\u606f print ( '\u6807\u6ce8\u4fe1\u606f' , targets ) # \u83b7\u53d6\u5f53\u524dbatch\u4e2d\u7684\u56fe\u50cf imgs = [ imgs [ j ] . permute ( 1 , 2 , 0 ) for j in range ( batch_size )] # \u56fe\u50cf\u5c55\u793a axes = show_images ( imgs , 2 , 2 ) # \u6807\u6ce8\u6846\u5c55\u793a for ax , target in zip ( axes , targets ): show_bboxes ( ax , target [ 'boxes' ], colors = [ 'w' ]) plt . show () break \u7ed3\u679c\u5982\u4e0b\uff1a \u6bcf\u4e2abatch\u662f\u56db\u5f20\u56fe\u7247\uff0c\u6807\u6ce8\u4fe1\u606f\u5982\u4e0a\u56fe\u6240\u793a\u3002 4.4 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u6a21\u578b\u6784\u5efa\u5b8c\u6210\u548c\u6570\u636e\u52a0\u8f7d\u8fdb\u6765\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b\uff0c\u6574\u4f53\u6d41\u7a0b\uff1a \u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21 \u904d\u5386\u6bcf\u4e2abatch\u7684\u56fe\u50cf \u6a21\u578b\u524d\u5411\u4f20\u64ad\u8fdb\u884c\u9884\u6d4b \u635f\u5931\u8ba1\u7b97 \u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u68af\u5ea6\u5373\u53ef # \u8fed\u4ee3\u6b21\u6570 itr = 1 # \u5b58\u653e\u8bad\u7ec3\u635f\u5931 total_train_loss = [] # \u635f\u5931\u503c losses_value = 0 # \u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( num_epochs ): # \u8ba1\u65f6 start_time = time . time () # \u8bad\u7ec3\u6a21\u5f0f model . train () train_loss = [] # \u8fdb\u5ea6\u6761 pbar = tqdm ( train_data_loader , desc = 'let \\' s train' ) # \u904d\u5386\u6570\u636e\uff0c\u83b7\u53d6\u56fe\u50cf\uff0c\u76ee\u6807\u503c\u548c\u56fe\u50cfid for images , targets , image_ids in pbar : # \u5c06\u56fe\u50cf\u5199\u5165\u8bbe\u5907\u4e2d images = list ( image . to ( device ) for image in images ) # \u5c06\u76ee\u6807\u503c\u5199\u5165\u8bbe\u5907\u4e2d\uff1akey\uff1avalue targets = [{ k : v . to ( device ) for k , v in t . items ()} for t in targets ] # \u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3\uff0c\u83b7\u53d6\u635f\u5931\u503c loss_dict = model ( images , targets ) print ( loss_dict ) # \u5c06\u635f\u5931\u6c42\u548c losses = sum ( loss for loss in loss_dict . values ()) # \u83b7\u53d6loss\u503c losses_value = losses . item () train_loss . append ( losses_value ) # \u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u66f4\u65b0\u53c2\u6570 optimizer . zero_grad () losses . backward () optimizer . step () # \u65e5\u5fd7\u4fe1\u606f pbar . set_description ( f \"Epoch: { epoch + 1 } , Batch: { itr } , Loss: { losses_value } \" ) # \u8fed\u4ee3\u6b21\u6570\u589e1 itr += 1 # \u83b7\u53d6\u5f53\u524d\u8f6e\u6b21\u7684\u635f\u5931 epoch_train_loss = np . mean ( train_loss ) # \u8f6e\u6b21\u635f\u5931\u5199\u5165\u5230\u5217\u8868\u4e2d total_train_loss . append ( epoch_train_loss ) \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\uff1a Epoch : 1 , Batch : 675 , Loss : 1.100306952323752 : 100 %| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 675 / 675 [ 08 : 26 < 00 : 00 , 1.33 it / s ] Epoch Completed : 1 / 10 , Time : 566.7130048274994 , Train Loss : 1.05390335455138 Epoch : 2 , Batch : 1350 , Loss : 0.8195391336080114 : 100 %| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 675 / 675 [ 08 : 27 < 00 : 00 , 1.33 it / s ] Epoch Completed : 2 / 10 , Time : 569.5055477619171 , Train Loss : 0.8958109236268262 \u3002\u3002\u3002 \u6211\u4eec\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\u7ed8\u5236\u51fa\u6765\uff1a # \u7ed8\u5236\u6574\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u8f6e\u6b21\u7684\u635f\u5931 plt . figure ( figsize = ( 8 , 5 )) sns . set_style ( style = \"whitegrid\" ) sns . lineplot ( x = range ( 1 , len ( total_train_loss ) + 1 ), y = total_train_loss , label = \"Train Loss\" ) plt . xlabel ( \"epoch\" ) plt . ylabel ( \"Loss\" ) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 4.5 \u6a21\u578b\u4fdd\u5b58 \u00b6 \u6211\u4eec\u8bad\u7ec3\u5b8c\u6a21\u578b\u540e\uff0c\u9700\u8981\u628a\u6a21\u578b\u53c2\u6570\u4fdd\u5b58\u4e0b\u6765\uff0c\u4fdd\u5b58\u7684\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a # 4.\u6a21\u578b\u4fdd\u5b58 torch . save ( model . state_dict (), 'fasterrcnn_resnet50_fpn.pth' ) \u6a21\u578b\u53c2\u6570\u4fdd\u5b58\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u53c2\u6570\u8fdb\u884c\u9884\u6d4b\u4e86\u3002 5.\u6a21\u578b\u6d4b\u8bd5 \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u8981\u52a0\u8f7d\u8981\u9884\u6d4b\u7684\u56fe\u7247\u6570\u636e\uff0c\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u5e76\u5229\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\uff0c\u8be5\u90e8\u5206\u7684\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/test.py\u4e2d\u3002 5.1 \u6570\u636e\u548c\u6a21\u578b\u52a0\u8f7d \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u9996\u5148\u51c6\u5907\u6d4b\u8bd5\u7684\u6570\u636e\uff0c\u5728\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u4ee3\u7801\u5728\u5728\u6587\u4ef6fasterRCNN_code/test.py\u4e2d\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a \u6570\u636e\u7684\u52a0\u8f7d\uff0c\u6574\u4f53\u6d41\u7a0b\u662f\uff1a \u8bbe\u7f6e\u8981\u9884\u6d4b\u7684\u56fe\u7247\u7684\u8def\u5f84 \u5b9e\u4f8b\u5316\u6d4b\u8bd5\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u7c7b \u521b\u5efadataloader\u83b7\u53d6\u9001\u5165\u7f51\u7edc\u4e2d\u7684\u6570\u636e \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u8bbe\u7f6e\u6d4b\u8bd5\u6570\u636e\u96c6\u8def\u5f84 test_data_dir = 'wheatData/test' # \u52a0\u8f7d\u6570\u636e test_data = pd . read_csv ( 'wheatData/submission.csv' ) print ( test_data . tail ()) # \u5b9e\u4f8b\u5316\u6570\u636e\u8bfb\u53d6\u7c7b test_data = Wheat ( test_data , test_data_dir , phase = \"test\" , transforms = Wheat . get_test_transform ()) def collate_fn ( batch ): return tuple ( zip ( * batch )) # \u8bbe\u7f6ebatch_size batchsize = 2 # \u52a0\u8f7d\u6d4b\u8bd5\u96c6\u6570\u636e test_data_loader = DataLoader ( # \u6d4b\u8bd5\u6570\u636e test_data , # \u6279\u6b21\u5927\u5c0f batch_size = batchsize , # \u6d4b\u8bd5\u96c6\u4e0d\u9700\u8981\u6253\u4e71 shuffle = False , # \u4e0d\u6ee1batch\u7684\u6570\u636e\u4f9d\u7136\u8981\u8fdb\u884c\u9884\u6d4b drop_last = False , collate_fn = collate_fn ) \u8f93\u51fa\u7ed3\u679c\uff1a \u53c2\u6570\u7f51\u7edc\u9884\u6d4b\u7684\u56fe\u7247\u7684image_id\u5982\u4e0b\u6240\u793a\uff1a \u6d4b\u8bd5\u56fe\u50cf\u7684\u5c55\u793a\u4ee3\u7801\u5982\u4e0b\uff1a # \u6d4b\u8bd5\u96c6\u56fe\u7247\u7684\u5c55\u793a for i , ( imgs , img_id ) in enumerate ( test_data_loader ): # \u83b7\u53d6\u5f53\u524dbatch\u4e2d\u7684\u56fe\u50cf imgs = [ imgs [ j ] . permute ( 1 , 2 , 0 ) for j in range ( batchsize )] # \u56fe\u50cf\u5c55\u793a for img in imgs : plt . imshow ( img ) plt . show () break \u5176\u4e2d\u67d0\u5e45\u56fe\u7247\u5c55\u793a\u6548\u679c\u5982\u4e0b\u6240\u793a\uff1a \u6a21\u578b\u53c2\u6570\u52a0\u8f7d\uff0c\u6d41\u7a0b\u662f\uff1a \u6307\u5b9a\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570\u7684\u8def\u5f84 \u52a0\u8f7d\u6a21\u578b\u7ed3\u6784\uff08\u4e0e\u8bad\u7ec3\u9636\u6bb5\u662f\u4e00\u6837\u7684\uff09\uff0c\u5e76\u52a0\u8f7d\u6a21\u578b\u53c2\u6570 \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u9884\u6d4b\u6a21\u5f0f\uff0c\u5e76\u5199\u5165\u5230\u8bbe\u5907\u4e2d # \u6307\u660e\u6a21\u578b\u53c2\u6570\u7684\u8def\u5f84 weight_dir = 'weights/fasterrcnn_resnet50_fpn.pth' # 2.\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b # \u8bbe\u7f6e\u8bbe\u5907\u4fe1\u606f device = torch . device ( 'cuda' ) if torch . cuda . is_available () else torch . device ( 'cpu' ) # \u6784\u5efafasterRCNN\u6a21\u578b model = torchvision . models . detection . fasterrcnn_resnet50_fpn ( pretrained = False , pretrained_backbone = False ) # \u7c7b\u522b\u4e2a\u6570\uff1aN+1 num_classes = 2 # \u83b7\u53d6\u8f93\u51fa\u5c42\u8f93\u5165\u7279\u5f81\u5411\u91cf\u7684\u7ef4\u5ea6 in_features = model . roi_heads . box_predictor . cls_score . in_features # \u6784\u5efafasterRCNN\u7684\u8f93\u51fa\u7aef model . roi_heads . box_predictor = FastRCNNPredictor ( in_features , num_classes ) print ( \"\u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aef {} \" . format ( model . roi_heads . box_predictor )) # \u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u53c2\u6570 model . load_state_dict ( torch . load ( weight_dir , map_location = device )) # \u6a21\u578b\u9884\u6d4b\u6a21\u5f0f model . eval () # \u5c06\u6a21\u578b\u5199\u5165\u5230\u8bbe\u5907\u4e2d model . to ( device ) \u5728\u8fd9\u91cc\u6211\u4eec\u6253\u5370\u6a21\u578b\u7684\u8f93\u51fa\u7aef\uff1a \u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aefFastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 2 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 8 , bias = True ) ) \u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7684\u6a21\u578b\u662f\u8fdb\u884c\u9ea6\u7a57\u68c0\u6d4b\u7684\u6a21\u578b\u67b6\u6784\u3002 5.2 \u6a21\u578b\u9884\u6d4b \u00b6 \u51c6\u5907\u6d4b\u8bd5\u7684\u6570\u636e\u548c\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u4ee3\u7801\u5728\u5728\u6587\u4ef6fasterRCNN_code/test.py\u4e2d\uff0c\u5177\u4f53\u5b9e\u73b0\u6d41\u7a0b\u5982\u4e0b\uff1a \u8bbe\u7f6e\u9884\u6d4b\u7684\u7f6e\u4fe1\u5ea6\u9608\u503c \u904d\u5386\u6bcf\u4e2abatch\u7684\u56fe\u7247\u8fdb\u884c\u9884\u6d4b \u904d\u5386\u9884\u6d4b\u7ed3\u679c\uff0c\u4f7f\u7528\u7f6e\u4fe1\u5ea6\u9608\u503c\u8fdb\u884c\u7b5b\u9009 \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u7c7b\u522b\u6982\u7387\u7684\u9608\u503c score_threshold = 0.7 # \u5b58\u653e\u9884\u6d4b\u7ed3\u679c image_outputs = [] # \u904d\u5386\u6bcf\u4e2a\u6279\u6b21\u7684\u6d4b\u8bd5\u6570\u636e for images , image_ids in test_data_loader : # \u83b7\u53d6\u6bcf\u4e00\u5e45\u56fe\u7247\u5e76\u5199\u5165\u5230\u8bbe\u5907\u4e2d images = list ( image . to ( device ) for image in images ) # \u6a21\u578b\u9884\u6d4b\u8fd4\u56de\u7ed3\u679c outputs = model ( images ) # \u904d\u5386\u56fe\u50cf\u548c\u9884\u6d4b\u7ed3\u679c for image_id , output in zip ( image_ids , outputs ): # \u6846 boxes = output [ 'boxes' ] . data . cpu () . numpy () # \u7c7b\u522b\u6982\u7387\u503c scores = output [ 'scores' ] . data . cpu () . numpy () # \u4f7f\u7528\u9884\u6d4b\u8fdb\u884c\u7b5b\u9009 mask = scores >= score_threshold # \u83b7\u53d6\u6700\u7ec8\u7684\u68c0\u6d4b\u6846\u548c\u7c7b\u522b\u6982\u7387\u503c boxes = boxes [ mask ] . astype ( np . int32 ) scores = scores [ mask ] # \u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u8fdb\u884c\u4fdd\u5b58 image_outputs . append (( image_id , boxes , scores )) \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c\u5c55\u793a\uff1a # \u9884\u6d4b\u7ed3\u679c\u5c55\u793a # \u83b7\u53d6\u6d4b\u8bd5\u96c6\u56fe\u7247\u6570\u636e datas = [ test_data [ i ] for i in range ( 0 , len ( image_outputs ))] imgs = [ d [ 0 ] . permute ( 1 , 2 , 0 ) . numpy () for d in test_data ] # \u56fe\u50cf\u5c55\u793a axes = show_images ( imgs , 2 , len ( image_outputs ) // 2 ) # \u9884\u6d4b\u6846\u7684\u5c55\u793a for ax , ( img_id , boxes , score ) in zip ( axes , image_outputs ): show_bboxes ( ax , boxes , colors = [ 'blue' ]) plt . show () \u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u4e0a\u56fe\u5c55\u793a\u4e86\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u89c2\u6d4b\u51fa\u5927\u90e8\u5206\u7684\u9ea6\u7a57\u88ab\u6211\u4eec\u68c0\u6d4b\u51fa\u6765\u4e86\u3002\u5230\u8fd9\u91cc\u6574\u4e2a\u6848\u4f8b\u5c31\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u5b8c\u6210\u4e86\u3002 \u603b\u7ed3 \u4e86\u89e3\u9ea6\u7a57\u68c0\u6d4b\u7684\u6570\u636e\u96c6\u7684\u6784\u6210 \u4e3b\u8981\u6709\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\u6784\u6210\uff0c\u8bad\u7ec3\u96c6\u6570\u636e\u8fdb\u884c\u4e86\u6807\u6ce8\u3002 \u7406\u89e3\u9879\u76ee\u89e3\u51b3\u7684\u5168\u6d41\u7a0b \u6570\u636e\u8bfb\u53d6-\u300b\u6570\u636e\u5206\u6790-\u300b\u6570\u636e\u52a0\u8f7d-\u300b\u6a21\u578b\u6784\u5efa-\u300b\u6a21\u578b\u8bad\u7ec3-\u300b\u6a21\u578b\u6d4b\u8bd5 \u80fd\u591f\u5229\u7528fasterRCNN\u7f51\u7edc\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u9884\u6d4b","title":"2.4 \u9ea6\u7a57\u68c0\u6d4b\u6848\u4f8b-FasterRCNN"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#24-fasterrcnn","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u9ea6\u7a57\u68c0\u6d4b\u7684\u6570\u636e\u96c6\u7684\u6784\u6210 \u7406\u89e3\u9879\u76ee\u89e3\u51b3\u7684\u5168\u6d41\u7a0b \u80fd\u591f\u5229\u7528fasterRCNN\u7f51\u7edc\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u9884\u6d4b","title":"2.4 \u9ea6\u7a57\u68c0\u6d4b\u6848\u4f8b-FasterRCNN"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#1","text":"\u5c0f\u9ea6\u662f\u6211\u56fd\u6700\u91cd\u8981\u7684\u7cae\u98df\u4f5c\u7269\u4e4b\u4e00\uff0c\u5176\u4e0d\u4ec5\u5173\u4e4e\u7740\u4eba\u4eec\u65e5\u5e38\u7684\u996e\u98df\u9700\u6c42\uff0c\u540c\u65f6\u5f71\u54cd\u7740\u56fd\u6c11\u7ecf\u6d4e\u7684\u53d1\u5c55\u548c\u793e\u4f1a\u7a33\u5b9a\u3002\u968f\u7740\u667a\u80fd\u6280\u672f\u7684\u4e0d\u65ad\u53d1\u5c55\uff0c\u667a\u6167\u519c\u4e1a\u5bf9\u7cae\u98df\u7684\u751f\u4ea7\u8d77\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u4e00\u4e9b\u667a\u80fd\u6280\u672f\u5bf9\u4f20\u7edf\u519c\u4e1a\u8d77\u5230\u91cd\u5927\u7684\u63a8\u52a8\u4f5c\u7528\u3002 \u9ea6\u7a57\u8bc6\u522b\u5728\u667a\u6167\u519c\u4e1a\u4e2d\u6709\u8f83\u9ad8\u7684\u5e94\u7528\u4ef7\u503c\uff0c\u5982\u7cae\u98df\u4ea7\u91cf\u4f30\u8ba1\u3001\u79cd\u5b50\u7b5b\u9009\u3001\u548c\u79cd\u5b50\u57fa\u56e0\u6027\u80fd\u7b49\u3002\u8bb8\u591a\u7814\u7a76\u4eba\u5458\u4e3b\u8981\u5173\u6ce8\u667a\u6167\u519c\u4e1a\u548c\u9ea6\u7a57\u8ba1\u6570\u3002\u4f20\u7edf\u9ea6\u7a57\u8ba1\u6570\u4e3b\u8981\u4f9d\u9760\u4eba\u5de5\u89c6\u89c9\u8fdb\u884c\u4e3b\u89c2\u8fa8\u522b\u548c\u5224\u65ad\u3002\u8be5\u65b9\u6cd5\u5177\u6709\u7b80\u5355\u3001\u65b9\u4fbf\u7b49\u7279\u70b9\uff0c\u4f46\u9700\u8981\u5927\u91cf\u7684\u4eba\u529b\u7269\u529b\u6548\u7387\u4f4e\u4e0b\u3001\u4eba\u7684\u4e3b\u89c2\u56e0\u7d20\u8f83\u591a\u3002\u968f\u7740\u56fe\u50cf\u8bc6\u522b\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4eba\u4eec\u501f\u52a9\u667a\u80fd\u7b97\u6cd5\u66ff\u4ee3\u4f20\u7edf\u7684\u8ba1\u6570\u65b9\u6cd5\u3002\u5728\u5bf9\u9ea6\u7a57\u56fe\u50cf\u8fdb\u884c\u7cbe\u51c6\u68c0\u6d4b\u65f6\u4f1a\u9047\u5230\u89c6\u89c9\u4e0a\u7684\u6311\u6218\uff0c\u5982\u5c0f\u9ea6\u690d\u682a\u91cd\u53e0\uff0c\u98ce\u52a8\u4e0b\u7684\u6a21\u7cca\u56fe\u50cf\u3002\u8fd9\u4e9b\u95ee\u9898\u52a0\u5267\u4e86\u8bc6\u522b\u5355\u4e2a\u5c0f\u9ea6\u5934\u7684\u96be\u5ea6\u3002\u4e3a\u4e86\u514b\u670d\u8fd9\u4e9b\u5e72\u6270\u7684\u56e0\u7d20\uff0c\u5c06\u8ba1\u7b97\u673a\u6280\u672f\u4e0e\u519c\u4e1a\u6df1\u5ea6\u878d\u5408\uff0c\u7ed3\u5408\u56fe\u50cf\u5904\u7406\u57fa\u672c\u6280\u5de7\uff0c\u5229\u7528\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u795e\u7ecf\u7f51\u7edc\u8bbe\u8ba1\u4e00\u5957\u57fa\u4e8eFaster R-CNN\u7684\u9ea6\u7a57\u56fe\u50cf\u8bc6\u522b\u7b97\u6cd5\uff0c\u7528\u5176\u5bf9\u5927\u7530\u4e0b\u5c0f\u9ea6\u7684\u6570\u91cf\u3001\u5bc6\u5ea6\u3001\u5927\u5c0f\u7b49\u53c2\u6570\u9884\u4f30\u3002\u5c0f\u9ea6\u7ba1\u7406\u51b3\u7b56\u8005\u53ef\u8fd0\u7528\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u5c0f\u9ea6\u751f\u4ea7\u8fc7\u7a0b\u7684\u667a\u80fd\u51b3\u7b56\u548c\u7cbe\u786e\u7ba1\u7406\uff0c\u4e3a\u5c0f\u9ea6\u7684\u667a\u80fd\u8bc6\u522b\u76d1\u63a7\u7cfb\u7edf\u63d0\u4f9b\u7406\u8bba\u4f9d\u636e\u548c\u6280\u672f\u652f\u6301\u3002","title":"1. \u9ea6\u7a57\u68c0\u6d4b\u9879\u76ee\u7b80\u4ecb"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#2","text":"\u5c0f\u9ea6\u56fe\u50cf\u6570\u636e\u96c6\u6765\u81eaGlobal Wheat Head detection (GWHD) dataset\uff0c\u5176\u662f\u7b2c\u4e00\u4e2a\u4ece\u73b0\u573a\u5149\u5b66\u56fe\u50cf\u8fdb\u884c\u5c0f\u9ea6\u5934\u68c0\u6d4b\u7684\u5927\u578b\u6570\u636e\u96c6\uff0c\u5305\u62ec\u591a\u4e2a\u5730\u533a\u7684\u4e0d\u540c\u54c1\u79cd\uff0c\u6db5\u76d6\u4e86\u7531\u6b27\u6d32(\u6cd5\u56fd\uff0c\u82f1\u56fd\uff0c\u745e\u58eb)\uff0c\u4e9a\u6d32(\u4e2d\u56fd\uff0c\u65e5\u672c)\uff0c\u5927\u6d0b\u6d32(\u6fb3\u5927\u5229\u4e9a)\u548c\u5317\u7f8e(\u52a0\u62ff\u5927)\u7684\u6807\u6ce8\u56fe\u50cf\u3002\u6240\u6709\u56fe\u50cf\u7684\u901a\u7528\u683c\u5f0f\u4e3a1024 \u00d7 1024 px\uff0c\u5206\u8fa8\u7387\u4e3a\u6bcf\u50cf\u7d200.1~0.3 mm\u3002\u672c\u6587\u7814\u7a76\u7684\u662f\u4e0d\u540c\u54c1\u79cd\u5c0f\u9ea6\u5934\u7684\u5bc6\u5ea6\u548c\u5927\u5c0f\uff0c\u90e8\u5206\u56fe\u50cf\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8fd9\u4e9b\u6570\u636e\u5b58\u653e\u5728wheatData\u6587\u4ef6\u5939\u4e2d\uff0c\u5176\u4e2d\u5305\u62ec\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u6807\u6ce8\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"2. \u9ea6\u7a57\u6570\u636e\u96c6\u4ecb\u7ecd\u4e0e\u6570\u636e\u5206\u6790"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#21","text":"\u9996\u5148\u6211\u4eec\u4f7f\u7528pandas\u8bfb\u53d6train_data.csv\u6587\u4ef6\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset_utils.py\u4e2d\u3002 # \u6570\u636e\u83b7\u53d6\u4e0e\u5206\u6790:\u6307\u5b9a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u8def\u5f84 train_data_dir = 'wheatData/train' test_data_dir = 'wheatData/test' # \u8bfb\u53d6CSV\u6587\u4ef6 train_data_label = pd . read_csv ( 'wheatData/train_data.csv' ) print ( train_data_label . head ()) \u7ed3\u679c\u4e3a\uff1a \u5176\u4e2d\u6bcf\u4e00\u884c\u8868\u793a\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u6807\u6ce8\u6846\u5982\u4e0b\u56fe\u767d\u8272\u65b9\u6846\u6240\u793a\uff1a \u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a image_id\uff1a\u56fe\u50cf\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u6307\u5f53\u524d\u6807\u6ce8\u6846\u6240\u5728\u7684\u56fe\u50cf width\u548cheight: \u56fe\u50cf\u7684\u5bbd\u9ad8\uff0c\u5728\u5f53\u524d\u6570\u636e\u96c6\u4e2d\uff0c\u6240\u6709\u56fe\u7247\u7684\u5927\u5c0f\u5747\u4e3a1024x1024 x\u548cy: \u8868\u793a\u5f53\u524d\u6807\u6ce8\u6846\u7684\u5de6\u4e0a\u89d2\u5750\u6807 w\u548ch: \u8868\u793a\u6807\u6ce8\u6846\u7684\u5bbd\u548c\u9ad8\u3002 \u5bf9\u5e94\u7684\u56fe\u7247\u6570\u636e\u90fd\u5b58\u653e\u5728train\u6587\u4ef6\u5939\u4e2d\uff0ctest\u4e2d\u7684\u56fe\u7247\u662f\u6d4b\u8bd5\u56fe\u50cf\uff0c\u672a\u8fdb\u884c\u6807\u6ce8","title":"2.1 \u6570\u636e\u8bfb\u53d6"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#22","text":"","title":"2.2 \u6570\u636e\u5206\u6790"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#221","text":"\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset_utils.py\u4e2d\u3002 \u6807\u6ce8\u6846\u7684\u6570\u91cf # \u8bad\u7ec3\u6570\u636e\u5927\u5c0f\uff08\u8fd9\u91cc\u6307\u7684\u662f\u76ee\u6807\u6846\uff09 print ( \"\u76ee\u6807\u6846\u4e2a\u6570\uff1a {} \" . format ( train_data_label . shape )) \u7ed3\u679c\u4e3a\uff1a \u76ee\u6807\u6846\u4e2a\u6570 \uff1a ( 147793 , 9 ) \u8bad\u7ec3\u96c6\u4e2d\u4e00\u5171\u6807\u6ce8\u4e86147793\u4e2a\u76ee\u6807\u6846 \u8bad\u7ec3\u96c6\u56fe\u7247\u7684\u6570\u91cf # \u6709\u6807\u6ce8\u4fe1\u606f\u56fe\u7247\u7684\u6570\u91cf print ( \"\u56fe\u7247\u6570\u91cf\uff1a {} \" . format ( train_data_label [ 'image_id' ] . nunique ())) # \u6240\u6709\u56fe\u7247\u7684\u6570\u91cf print ( \"\u6240\u6709\u56fe\u7247\u6570\u91cf\uff1a {} \" . format ( len ( os . listdir ( train_data_dir )))) \u7ed3\u679c\u4e3a\uff1a \u56fe\u7247\u6570\u91cf \uff1a 3373 \u6240\u6709\u56fe\u7247\u6570\u91cf \uff1a 3422 \u8bf4\u660e\u6709 3422-3373=49 \u5f20\u56fe\u7247\u6ca1\u6709\u6807\u6ce8\uff0c\u6240\u4ee5\u540e\u9762\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u65f6\u6211\u4eec\u53ea\u80fd\u9009\u62e9\u6807\u6ce8\u4fe1\u606f\u7684\u56fe\u7247\u8fdb\u884c\u8bad\u7ec3\u3002","title":"2.2.1 \u6570\u636e\u91cf\u7684\u5206\u6790"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#222","text":"\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset_utils.py\u4e2d\u3002 \u56fe\u7247\u4e2d\u76ee\u6807\u6846\u6570\u91cf\u5206\u5e03 counts = train_data_label [ 'image_id' ] . value_counts () print ( \"\u5355\u5f20\u56fe\u7247\u4e2d\u6807\u6ce8\u6846\u7684\u6700\u5927\u503c {} \u548c\u6700\u5c0f\u503c {} \" . format ( max ( counts ), min ( counts ))) sns . displot ( counts , kde = True , color = \"g\" ) plt . xlabel ( 'boxes' ) plt . ylabel ( 'images' ) plt . show () \u7ed3\u679c\u4e3a\uff1a \u5355\u5f20\u56fe\u7247\u4e2d\u6807\u6ce8\u6846\u7684\u6700\u5927\u503c116\u548c\u6700\u5c0f\u503c1 \u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u5f20\u56fe\u7247\u4e2d\u7684\u6807\u6ce8\u6846\u4e2a\u6570\u572820-80\u4e4b\u95f4\uff0c\u5982\u679c\u5728\u68c0\u6d4b\u65f6\u4e0e\u8be5\u8303\u56f4\u76f8\u5dee\u8f83\u5927\u5219\u9700\u8981\u8fdb\u884c\u6838\u67e5\u662f\u5426\u51fa\u73b0\u95ee\u9898\u3002 \u6807\u6ce8\u6846\u4f4d\u7f6e\u5de6\u4e0a\u89d2\u5750\u6807\u7684\u5206\u5e03 # \u6807\u6ce8\u6846\u5de6\u4e0a\u89d2\u5750\u6807\u7684\u5206\u5e03 sns . histplot ( data = train_data_label , x = 'x' , y = 'y' , bins = 50 , pmax = 0.9 ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u770b\u51fa\u5750\u6807x,y\u7684\u8303\u56f4\u57280-1000\u4e4b\u95f4\uff0c\u4e14\u6bcf\u4e00\u90e8\u5206\u7684\u5206\u5e03\u90fd\u6bd4\u8f83\u5747\u5300\uff0c\u6240\u4ee5\u53ef\u4ee5\u5224\u65ad\u51fa\u76ee\u6807\u6846\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u56fe\u50cf\u7684\u4efb\u610f\u4f4d\u7f6e\u3002 \u6807\u6ce8\u6846\u4f4d\u7f6e\u4e2d\u5fc3\u70b9\u5750\u6807\u7684\u5206\u5e03 # \u83b7\u53d6\u6570\u636e\u7684\u4e2d\u5fc3\u70b9\u5750\u6807 train_data_label [ 'cx' ] = train_data_label [ 'x' ] + train_data_label [ 'w' ] / 2 train_data_label [ 'cy' ] = train_data_label [ 'y' ] + train_data_label [ 'h' ] / 2 # \u7ed8\u5236\u5206\u5e03\u56fe\u50cf sns . histplot ( data = train_data_label , x = 'cx' , y = 'cy' , bins = 50 , pmax = 0.9 ) # \u8bbe\u7f6e\u8f74\u63cf\u8ff0 plt . xlabel ( 'cx' ) plt . ylabel ( 'cy' ) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u770b\u51fa\u5750\u6807cx,cy\u7684\u8303\u56f4\u57280-1000\u4e4b\u95f4\uff0c\u4e14\u6bcf\u4e00\u90e8\u5206\u7684\u5206\u5e03\u90fd\u6bd4\u8f83\u5747\u5300\uff0c\u6240\u4ee5\u53ef\u4ee5\u5224\u65ad\u51fa\u76ee\u6807\u6846\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u56fe\u50cf\u7684\u4efb\u610f\u4f4d\u7f6e\u3002 \u6807\u6ce8\u6846\u7684\u5bbd\u9ad8\u7684\u5206\u5e03 # \u6807\u6ce8\u6846\u5bbd\u9ad8\u7684\u5206\u5e03 sns . histplot ( data = train_data_label , x = 'w' , y = 'h' , bins = 50 , pmax = 0.9 ) # \u8f74\u63cf\u8ff0 plt . xlabel ( 'w' ) plt . ylabel ( 'h' ) plt . show () \u7ed3\u679c\u4e3a\uff1a \u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u770b\u51fa\u6807\u7816\u6846\u5bbd\u9ad8\u7684\u8303\u56f4\u57280-1000\u4e4b\u95f4\uff0c\u4e3b\u8981\u96c6\u4e2d\u57280-400\u4e4b\u95f4\uff0c\u6bd4\u4f8b\u96c6\u4e2d\u57281\uff1a1\uff0c\u8fd9\u53ef\u4ee5\u4f5c\u4e3aanchor\u8bbe\u7f6e\u7684\u4f9d\u636e\uff0c \u6807\u6ce8\u6846\u9762\u79ef\u7684\u5206\u5e03 # \u6807\u6ce8\u6846\u9762\u79ef\u7684\u5206\u5e03\uff1a\u7528\u6765\u8bbe\u7f6eanchor\u7684\u5c3a\u5ea6 aeras = train_data_label [ 'w' ] * train_data_label [ 'h' ] print ( \"\u76ee\u6807\u6846\u6700\u5c0f\u9762\u79ef\u4e3a {} \u6700\u5927\u9762\u79ef\u4e3a {} \" . format ( min ( aeras ), max ( aeras ))) sns . histplot ( aeras , bins = 50 , kde = False ) plt . show () \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6807\u6ce8\u6846\u7684\u9762\u79ef\u96c6\u4e2d\u57280-5000\u4ee5\u4e0b\uff0c\u53ef\u4ee5\u7528\u6765\u7b5b\u9009\u5f02\u5e38\u7684\u68c0\u6d4b\u6846\u3002","title":"2.2.2 \u6570\u636e\u5206\u5e03\u7684\u5206\u6790"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#223","text":"\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset_utils.py\u4e2d\u3002 # \u56fe\u7247\u53ca\u6807\u6ce8\u6846\u9884\u89c8 # \u8bbe\u7f6e\u5750\u6807\u8f74\u7684\u4e2a\u6570 num_rows , num_cols = 1 , 2 # \u83b7\u53d6\u6807\u6ce8\u4fe1\u606f ids = train_data_label [ 'image_id' ] . unique ()[ 100 : 100 + num_rows * num_cols ] # \u8bfb\u53d6\u56fe\u7247 imgs = [ plt . imread ( f ' { train_data_dir } / { n } .jpg' ) for n in ids ] # \u56fe\u7247\u663e\u793a axes = show_images ( imgs , num_rows , num_cols ) # \u663e\u793a\u6807\u6ce8\u6846 for ax , id in zip ( axes , ids ): datas = train_data_label [ train_data_label [ 'image_id' ] == id ] bboxes = [( d [ 'x' ], d [ 'y' ], d [ 'x' ] + d [ 'w' ], d [ 'y' ] + d [ 'h' ]) for _ , d in datas . iterrows ()] show_bboxes ( ax , bboxes , labels = None , colors = [ 'r' ]) plt . show () \u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u6807\u6ce8\u6846\u7ed8\u5236\u5728\u76f8\u5e94\u7684\u56fe\u7247\u4e0a\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"2.2.3 \u6570\u636e\u5c55\u793a"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#3dataset","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u7ee7\u627f torch.utils.data.Dataset \u62bd\u8c61\u7c7b\uff0c\u5b9e\u73b0 __init__ __len__ __getitem__ \u3002 \u5176\u4e2d\uff1a __init__ \u65b9\u6cd5\u8fdb\u884c\u53c2\u6570\u7684\u521d\u59cb\u5316\uff0c\u5305\u62ec __len__ \u65b9\u6cd5\u83b7\u53d6\u6570\u91cf\u96c6\u4e2d\u56fe\u7247\u7684\u6570\u91cf __getitem__ \u83b7\u53d6\u6570\u636e\uff1a image: \u56fe\u50cf\u6570\u636e target: \u5b57\u5178\u6570\u636e\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u65f6\u7684\u76ee\u6807\u503c\u4fe1\u606f\uff0c\u4ecb\u7ecd\u5982\u4e0b\uff1a boxes : \u8868\u793a\u6807\u6ce8\u6846\u7684\u5de6\u4e0a\u89d2\u5750\u6807\u548c\u53f3\u4e0b\u89d2\u5750\u6807 [x0, y0, x1, y1] \u3002 label : \u6807\u5fd7\u6807\u6ce8\u6846\u7684\u7c7b\u522b\uff0c\u5728\u5f53\u524d\u4efb\u52a1\u4e2d\u53ea\u6709\u5c0f\u9ea6\u4e00\u4e2a\u7c7b\u522b\uff0c\u6240\u4ee5\u6240\u6709\u6807\u6ce8\u6846\u7684\u7c7b\u522b\u6807\u7b7e\u503c\u8bbe\u4e3a1 \u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6\uff1afasterRCNN_code/dataset.py\u4e2d\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u6570\u636e\u8bfb\u53d6\u7c7b class Wheat ( Dataset ): # \u521d\u59cb\u5316 def __init__ ( self , dataframe , image_dir , phase = 'train' , transforms = None ): ''' :param dataframe: \u6570\u636e\u6807\u6ce8\u7ed3\u679c :param image_dir: \u56fe\u50cf\u8def\u5f84 :param phase: \u8bad\u7ec3\u9636\u6bb5train\u6216\u9884\u6d4b\u9636\u6bb5test :param transforms: \u56fe\u50cf\u589e\u5f3a\u5904\u7406 ''' super () . __init__ () # \u6570\u636e\u6807\u6ce8\u7684CSV\u7ed3\u679c self . df = dataframe # \u56fe\u50cf\u8def\u5f84 self . image_dir = image_dir # \u9636\u6bb5\u4fe1\u606f self . phase = phase # \u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5 self . transforms = transforms # \u56fe\u50cf\u6587\u4ef6\u540d\u79f0\uff1a\u53bb\u91cd\u4e4b\u540e\u7684\u7ed3\u679c self . image_id = dataframe [ \"image_id\" ] . unique () # \u83b7\u53d6\u6570\u636e\u7684\u6570\u91cf def __len__ ( self ): return len ( self . image_id ) # \u83b7\u53d6\u6bcf\u4e00\u5e45\u56fe\u7247 def __getitem__ ( self , idx ): # \u83b7\u53d6\u56fe\u50cf\u4fe1\u606f image_id = self . image_id [ idx ] image = plt . imread ( f ' { self . image_dir } / { image_id } .jpg' ) . astype ( np . float32 ) / 255.0 # \u8bad\u7ec3\u9636\u6bb5 if self . phase == 'train' : # \u6839\u636e\u56fe\u50cf\u7684\u540d\u79f0\u83b7\u53d6\u5bf9\u5e94\u7684\u6807\u6ce8\u4fe1\u606f records = self . df [ self . df [ 'image_id' ] == image_id ] # \u83b7\u53d6\u76ee\u6807\u6846 boxes = records [[ 'x' , 'y' , 'w' , 'h' ]] . values # \u83b7\u53d6\u76ee\u6807\u6846\u7684\u53f3\u4e0b\u89d2\u5750\u6807 boxes [:, 2 ] = boxes [:, 0 ] + boxes [:, 2 ] boxes [:, 3 ] = boxes [:, 1 ] + boxes [:, 3 ] # \u6bcf\u4e00\u6846\u7684\u7c7b\u522b\u4e3a\u5c0f\u9ea6\uff0c\u8bbe\u4e3a1\uff08\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7c7b\u522b\uff09 labels = torch . ones (( records . shape [ 0 ],), dtype = torch . int64 ) # \u8bbe\u7f6e\u76ee\u6807\u503c\u4fe1\u606f\uff0c\u76ee\u6807\u503c\u5b58\u653e\u5728target\u5b57\u5178\u4e2d\uff1a\u76ee\u6807\u6846\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u7c7b\u522b\u503c target = {} target [ 'boxes' ] = boxes target [ 'labels' ] = labels # \u589e\u5f3a\u5904\u7406 if self . transforms : # \u589e\u5f3a\u7684\u5185\u5bb9\u5305\u62ec\uff1a\u56fe\u50cf\uff0c\u6846\u548c\u7c7b\u522b sample = { \"image\" : image , 'bboxes' : target [ \"boxes\" ], \"labels\" : labels } # \u5c06sample\u5b57\u5178\u4e2d\u7684key\u548cvalue\u89e3\u5305\u4e3akey=value\u7684\u65b9\u5f0f\u4f20\u8f93\u5230\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u4e2d sample = self . transforms ( ** sample ) # \u83b7\u53d6\u589e\u5f3a\u540e\u7684\u56fe\u50cf image = sample [ \"image\" ] # \u5bf9\u56fe\u50cf\u4e2d\u7684\u6807\u6ce8\u6846\u5750\u6807\u8fdb\u884c\u62fc\u63a5\uff0c\u5e76\u8c03\u6574\u6210n*4\u7684\u7ef4\u5ea6,n\u8868\u793a\u56fe\u50cf\u7684\u76ee\u6807\u6846\u7684\u6570\u91cf target [ 'boxes' ] = torch . stack ( tuple ( map ( torch . tensor , zip ( * sample [ 'bboxes' ])))) . permute ( 1 , 0 ) # \u8fd4\u56de\u589e\u5f3a\u540e\u7684\u56fe\u50cf\uff0c\u76ee\u6807\u503c\u548c\u5bf9\u5e94\u7684\u56fe\u50cf\u540d\u79f0 return image , target , image_id # \u9884\u6d4b\u9636\u6bb5 else : # \u9884\u6d4b\u9636\u6bb5\u53ea\u9700\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406\uff0c\u6ca1\u6709\u76ee\u6807\u503c if self . transforms : sample = { \"image\" : image } sample = self . transforms ( ** sample ) image = sample [ 'image' ] return image , image_id @staticmethod def get_transform (): # \u8bad\u7ec3\u9636\u6bb5\u56fe\u50cf\u589e\u5f3a\u8fdb\u884c\u7ffb\u8f6c\uff08\u6ce8\u610f\u6846\u4e5f\u4f1a\u968f\u4e4b\u53d8\u6362\uff09\u548c\u7c7b\u578b\u7684\u8f6c\u6362 return A . Compose ([ A . Flip ( 0.5 ), ToTensor () ], bbox_params = { 'format' : 'pascal_voc' , 'label_fields' : [ 'labels' ]}) @staticmethod def get_test_transform (): # \u9884\u6d4b\u65f6\u53ea\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u7684\u8f6c\u6362 return A . Compose ([ ToTensor () ]) \u63a5\u4e0b\u6765\u6211\u4eec\u4ee5\u8bad\u7ec3\u96c6\u6570\u636e\u4e3a\u4f8b\uff0c\u6765\u770b\u4e0b\u8f93\u51fa\u7684\u7ed3\u679c\uff1a if __name__ == \"__main__\" : # \u83b7\u53d6\u6570\u636e\u548c\u6807\u7b7e\u4fe1\u606f train_data_dir = 'wheatData/train' train_data_label = pd . read_csv ( 'wheatData/train_data.csv' ) # \u5b9e\u4f8b\u5316\u6570\u636e\u83b7\u53d6\u7c7b train_dataset = Wheat ( train_data_label , train_data_dir ) # \u904d\u5386\u56fe\u50cf\u8fdb\u884c\u663e\u793a datas = [ train_dataset [ i ] for i in range ( 10 , 12 )] # \u83b7\u53d6\u56fe\u50cf\u6570\u636e\uff08CHW-\u300bHWC\uff09 imgs = [ d [ 0 ] . permute ( 1 , 2 , 0 ) . numpy () for d in datas ] # \u56fe\u50cf\u5c55\u793a axes = show_images ( imgs , 1 , 2 ) # \u6807\u6ce8\u6846\u5c55\u793a for ax , ( image , target , image_id ) in zip ( axes , datas ): show_bboxes ( ax , target [ 'boxes' ], colors = [ 'w' ]) plt . show () \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a","title":"3.\u6570\u636e\u52a0\u8f7dDataSet\u7684\u6784\u5efa"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#4","text":"","title":"4.\u6a21\u578b\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#41","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u6784\u5efafasterRCNN\u7684\u6a21\u578b\u7684\u6765\u8fdb\u884c\u9ea6\u7a57\u68c0\u6d4b\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b\uff1a \u9996\u5148\u6211\u4eec\u5229\u7528torchvision\u521b\u5efaFaster RCNN\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u521b\u5efa\u6a21\u578b\uff0c\u4f7f\u7528torchvision\u4e2d\u7684fasterRCNN\u6a21\u578b\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b; \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4e0d\u4fee\u6539backbone\u90e8\u5206\u7684\u53c2\u6570 model = torchvision . models . detection . fasterrcnn_resnet50_fpn ( pretrained = True , trainable_backbone_layers = False ) print ( \"\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u8f93\u51fa\u7aef {} \" . format ( model . roi_heads . box_predictor )) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u9884\u8bad\u7ec3\u6a21\u578b\u7684\u8f93\u51fa\u7aefFastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 91 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 364 , bias = True ) ) \u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5f53\u524d\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u8f93\u51fa\u7c7b\u522b\u4e2a\u6570\u4e3a90\u7c7b\u5e76\u4e0d\u9002\u5408\u6211\u4eec\u5f53\u524d\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u8f93\u51fa\u7aef\u8fdb\u884c\u4fee\u6539\u3002 \u6a21\u578b\u7684\u4fee\u6539\uff0c\u6211\u4eec\u9700\u8981\u66ff\u6362\u8f93\u51fa\u5c42\uff0c\u8981\u83b7\u53d6\u8f93\u51fa\u5c42\u8f93\u5165\u7279\u5f81\u7684\u5927\u5c0f\uff0c\u5e76\u5c06\u8f93\u51fa\u5c42\u7684\u5927\u5c0f\u6539\u4e3a2\uff1a # \u5f53\u524d\u4efb\u52a1\u68c0\u6d4b\u4e00\u7c7b\u6570\u636e\uff08\u5c0f\u9ea6\uff09\uff0cfasterRcnn\u4e2d\u9700\u8981\u8bbe\u7f6e\u4e3aN+1(\u80cc\u666f)\uff0c\u8bbe\u7f6e\u4e3a2 num_classes = 2 # \u83b7\u53d6\u8f93\u51fa\u7aef\u7684\u7279\u5f81\u5411\u91cf\u7684\u7ef4\u5ea6 in_features = model . roi_heads . box_predictor . cls_score . in_features # \u8bbe\u7f6e\u8f93\u51fa\u7aef\uff1a model . roi_heads . box_predictor = FastRCNNPredictor ( in_features , num_classes ) print ( \"\u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aef {} \" . format ( model . roi_heads . box_predictor )) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aefFastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 2 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 8 , bias = True ) ) \u4ece\u8f93\u51fa\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u4fee\u6539\u540e\u7684\u6a21\u578b\u8f93\u51fa\u7c7b\u522b\u4e2a\u6570\u4e3a2\u7c7b\uff0c\u9002\u5408\u6211\u4eec\u5f53\u524d\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u8be5\u6a21\u578b\u6765\u5904\u7406\u5f53\u524d\u7684\u4efb\u52a1\u3002","title":"4.1 \u6a21\u578b\u6784\u5efa"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#42","text":"\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u8bbe\u5907\u4fe1\u606f\uff0c\u4f18\u5316\u5668\uff0c\u8f6e\u6b21\uff0c\u6279\u91cf\u5927\u5c0f\u7b49\u53c2\u6570\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b\uff1a # \u8bad\u7ec3\u8bbe\u5907\u7684\u8bbe\u7f6e\uff0c\u6709GPU\u7684\u4f7f\u7528GPU\uff0c\u5426\u5219\u4f7f\u7528CPU\u8fdb\u884c\u8bad\u7ec3 device = torch . device ( 'cuda' ) if torch . cuda . is_available () else torch . device ( 'cpu' ) # \u5c06\u6a21\u578b\u5199\u5165\u5230\u8bbe\u5907\u4e2d model . to ( device ) # \u83b7\u53d6\u6240\u6709\u8981\u8fdb\u884c\u8bad\u7ec3\u7684\u53c2\u6570\uff0c\u8bbe\u7f6e\u4f18\u5316\u5668 params = [ p for p in model . parameters () if p . requires_grad ] optimizer = torch . optim . SGD ( params , lr = 0.005 , momentum = 0.9 , weight_decay = 0.0005 ) # \u8bbe\u7f6e\u8bad\u7ec3\u7684\u8f6e\u6b21 num_epochs = 10 # \u6279\u6b21\u5927\u5c0f batch_size = 4 \u8f93\u51fa\u4fe1\u606f\u5982\u4e0b\u6240\u793a\uff1a \u8bbe\u5907\u4fe1\u606f \uff1a cpu \u4f18\u5316\u5668 \uff1a SGD ( Parameter Group 0 dampening : 0 lr : 0.005 momentum : 0.9 nesterov : False weight_decay : 0.0005 ) \u4ece\u8f93\u51fa\u4fe1\u606f\u4e2d\u53ef\u4ee5\u770b\u51fa\u5f53\u524d\u8bbe\u5907\u662fCPU\uff0c\u4f18\u5316\u5668\u4f7f\u7528\u52a0\u52a8\u91cf\u7684\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u3002","title":"4.2 \u8bad\u7ec3\u53c2\u6570\u8bbe\u7f6e"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#43","text":"\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u6309\u7167\u6279\u6b21\u7684\u5927\u5c0f\u6765\u83b7\u53d6\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3\uff0c\u521b\u5efaDataLoader\u6765\u83b7\u53d6\u6570\u636e\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b\uff1a\u5728\u8fd9\u91cc\u6307\u660e\u6570\u636e\u7684\u4e3a\u4f4d\u7f6e\uff0c\u521b\u5efaDataloader\u83b7\u53d6\u6570\u636e\u96c6\u3002 # \u83b7\u53d6\u6570\u636e\u548c\u6807\u7b7e\u4fe1\u606f train_data_dir = 'wheatData/train' train_data_label = pd . read_csv ( 'wheatData/train_data.csv' ) # \u5b9e\u4f8b\u5316\u6570\u636e\u83b7\u53d6\u7c7b train_dataset = Wheat ( train_data_label , train_data_dir , transforms = Wheat . get_transform ()) def collate_fn ( batch ): return tuple ( zip ( * batch )) # \u83b7\u53d6batch\u7684\u6570\u636e\uff0c\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3 train_data_loader = DataLoader ( train_dataset , batch_size = batch_size , shuffle = True , collate_fn = collate_fn ) \u63a5\u4e0b\u6765\u6211\u4eec\u5c55\u793a\u6bcf\u4e2abatch\u7684\u6570\u636e\uff0c\u5982\u4e0b\u6240\u793a\uff1a # batch\u6570\u636e\u7684\u5c55\u793a(\u6bcf\u4e2abatch\u4e2d\u6709batchsize\u4e2a\u6570\u636e) for i , ( imgs , targets , img_id ) in enumerate ( train_data_loader ): # \u6807\u6ce8\u4fe1\u606f print ( '\u6807\u6ce8\u4fe1\u606f' , targets ) # \u83b7\u53d6\u5f53\u524dbatch\u4e2d\u7684\u56fe\u50cf imgs = [ imgs [ j ] . permute ( 1 , 2 , 0 ) for j in range ( batch_size )] # \u56fe\u50cf\u5c55\u793a axes = show_images ( imgs , 2 , 2 ) # \u6807\u6ce8\u6846\u5c55\u793a for ax , target in zip ( axes , targets ): show_bboxes ( ax , target [ 'boxes' ], colors = [ 'w' ]) plt . show () break \u7ed3\u679c\u5982\u4e0b\uff1a \u6bcf\u4e2abatch\u662f\u56db\u5f20\u56fe\u7247\uff0c\u6807\u6ce8\u4fe1\u606f\u5982\u4e0a\u56fe\u6240\u793a\u3002","title":"4.3 \u6570\u636e\u52a0\u8f7d"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#44","text":"\u6a21\u578b\u6784\u5efa\u5b8c\u6210\u548c\u6570\u636e\u52a0\u8f7d\u8fdb\u6765\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4e0b\uff0c\u6574\u4f53\u6d41\u7a0b\uff1a \u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21 \u904d\u5386\u6bcf\u4e2abatch\u7684\u56fe\u50cf \u6a21\u578b\u524d\u5411\u4f20\u64ad\u8fdb\u884c\u9884\u6d4b \u635f\u5931\u8ba1\u7b97 \u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u68af\u5ea6\u5373\u53ef # \u8fed\u4ee3\u6b21\u6570 itr = 1 # \u5b58\u653e\u8bad\u7ec3\u635f\u5931 total_train_loss = [] # \u635f\u5931\u503c losses_value = 0 # \u904d\u5386\u6bcf\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( num_epochs ): # \u8ba1\u65f6 start_time = time . time () # \u8bad\u7ec3\u6a21\u5f0f model . train () train_loss = [] # \u8fdb\u5ea6\u6761 pbar = tqdm ( train_data_loader , desc = 'let \\' s train' ) # \u904d\u5386\u6570\u636e\uff0c\u83b7\u53d6\u56fe\u50cf\uff0c\u76ee\u6807\u503c\u548c\u56fe\u50cfid for images , targets , image_ids in pbar : # \u5c06\u56fe\u50cf\u5199\u5165\u8bbe\u5907\u4e2d images = list ( image . to ( device ) for image in images ) # \u5c06\u76ee\u6807\u503c\u5199\u5165\u8bbe\u5907\u4e2d\uff1akey\uff1avalue targets = [{ k : v . to ( device ) for k , v in t . items ()} for t in targets ] # \u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u8bad\u7ec3\uff0c\u83b7\u53d6\u635f\u5931\u503c loss_dict = model ( images , targets ) print ( loss_dict ) # \u5c06\u635f\u5931\u6c42\u548c losses = sum ( loss for loss in loss_dict . values ()) # \u83b7\u53d6loss\u503c losses_value = losses . item () train_loss . append ( losses_value ) # \u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u66f4\u65b0\u53c2\u6570 optimizer . zero_grad () losses . backward () optimizer . step () # \u65e5\u5fd7\u4fe1\u606f pbar . set_description ( f \"Epoch: { epoch + 1 } , Batch: { itr } , Loss: { losses_value } \" ) # \u8fed\u4ee3\u6b21\u6570\u589e1 itr += 1 # \u83b7\u53d6\u5f53\u524d\u8f6e\u6b21\u7684\u635f\u5931 epoch_train_loss = np . mean ( train_loss ) # \u8f6e\u6b21\u635f\u5931\u5199\u5165\u5230\u5217\u8868\u4e2d total_train_loss . append ( epoch_train_loss ) \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\uff1a Epoch : 1 , Batch : 675 , Loss : 1.100306952323752 : 100 %| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 675 / 675 [ 08 : 26 < 00 : 00 , 1.33 it / s ] Epoch Completed : 1 / 10 , Time : 566.7130048274994 , Train Loss : 1.05390335455138 Epoch : 2 , Batch : 1350 , Loss : 0.8195391336080114 : 100 %| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 675 / 675 [ 08 : 27 < 00 : 00 , 1.33 it / s ] Epoch Completed : 2 / 10 , Time : 569.5055477619171 , Train Loss : 0.8958109236268262 \u3002\u3002\u3002 \u6211\u4eec\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u635f\u5931\u51fd\u6570\u7684\u53d8\u5316\u66f2\u7ebf\u7ed8\u5236\u51fa\u6765\uff1a # \u7ed8\u5236\u6574\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u8f6e\u6b21\u7684\u635f\u5931 plt . figure ( figsize = ( 8 , 5 )) sns . set_style ( style = \"whitegrid\" ) sns . lineplot ( x = range ( 1 , len ( total_train_loss ) + 1 ), y = total_train_loss , label = \"Train Loss\" ) plt . xlabel ( \"epoch\" ) plt . ylabel ( \"Loss\" ) plt . show () \u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"4.4 \u6a21\u578b\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#45","text":"\u6211\u4eec\u8bad\u7ec3\u5b8c\u6a21\u578b\u540e\uff0c\u9700\u8981\u628a\u6a21\u578b\u53c2\u6570\u4fdd\u5b58\u4e0b\u6765\uff0c\u4fdd\u5b58\u7684\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/train.py\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a # 4.\u6a21\u578b\u4fdd\u5b58 torch . save ( model . state_dict (), 'fasterrcnn_resnet50_fpn.pth' ) \u6a21\u578b\u53c2\u6570\u4fdd\u5b58\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u53c2\u6570\u8fdb\u884c\u9884\u6d4b\u4e86\u3002","title":"4.5 \u6a21\u578b\u4fdd\u5b58"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#5","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u8981\u52a0\u8f7d\u8981\u9884\u6d4b\u7684\u56fe\u7247\u6570\u636e\uff0c\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u5e76\u5229\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\uff0c\u8be5\u90e8\u5206\u7684\u4ee3\u7801\u5728\u6587\u4ef6fasterRCNN_code/test.py\u4e2d\u3002","title":"5.\u6a21\u578b\u6d4b\u8bd5"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#51","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u9996\u5148\u51c6\u5907\u6d4b\u8bd5\u7684\u6570\u636e\uff0c\u5728\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u4ee3\u7801\u5728\u5728\u6587\u4ef6fasterRCNN_code/test.py\u4e2d\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a \u6570\u636e\u7684\u52a0\u8f7d\uff0c\u6574\u4f53\u6d41\u7a0b\u662f\uff1a \u8bbe\u7f6e\u8981\u9884\u6d4b\u7684\u56fe\u7247\u7684\u8def\u5f84 \u5b9e\u4f8b\u5316\u6d4b\u8bd5\u6570\u636e\u96c6\u7684\u8bfb\u53d6\u7c7b \u521b\u5efadataloader\u83b7\u53d6\u9001\u5165\u7f51\u7edc\u4e2d\u7684\u6570\u636e \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u8bbe\u7f6e\u6d4b\u8bd5\u6570\u636e\u96c6\u8def\u5f84 test_data_dir = 'wheatData/test' # \u52a0\u8f7d\u6570\u636e test_data = pd . read_csv ( 'wheatData/submission.csv' ) print ( test_data . tail ()) # \u5b9e\u4f8b\u5316\u6570\u636e\u8bfb\u53d6\u7c7b test_data = Wheat ( test_data , test_data_dir , phase = \"test\" , transforms = Wheat . get_test_transform ()) def collate_fn ( batch ): return tuple ( zip ( * batch )) # \u8bbe\u7f6ebatch_size batchsize = 2 # \u52a0\u8f7d\u6d4b\u8bd5\u96c6\u6570\u636e test_data_loader = DataLoader ( # \u6d4b\u8bd5\u6570\u636e test_data , # \u6279\u6b21\u5927\u5c0f batch_size = batchsize , # \u6d4b\u8bd5\u96c6\u4e0d\u9700\u8981\u6253\u4e71 shuffle = False , # \u4e0d\u6ee1batch\u7684\u6570\u636e\u4f9d\u7136\u8981\u8fdb\u884c\u9884\u6d4b drop_last = False , collate_fn = collate_fn ) \u8f93\u51fa\u7ed3\u679c\uff1a \u53c2\u6570\u7f51\u7edc\u9884\u6d4b\u7684\u56fe\u7247\u7684image_id\u5982\u4e0b\u6240\u793a\uff1a \u6d4b\u8bd5\u56fe\u50cf\u7684\u5c55\u793a\u4ee3\u7801\u5982\u4e0b\uff1a # \u6d4b\u8bd5\u96c6\u56fe\u7247\u7684\u5c55\u793a for i , ( imgs , img_id ) in enumerate ( test_data_loader ): # \u83b7\u53d6\u5f53\u524dbatch\u4e2d\u7684\u56fe\u50cf imgs = [ imgs [ j ] . permute ( 1 , 2 , 0 ) for j in range ( batchsize )] # \u56fe\u50cf\u5c55\u793a for img in imgs : plt . imshow ( img ) plt . show () break \u5176\u4e2d\u67d0\u5e45\u56fe\u7247\u5c55\u793a\u6548\u679c\u5982\u4e0b\u6240\u793a\uff1a \u6a21\u578b\u53c2\u6570\u52a0\u8f7d\uff0c\u6d41\u7a0b\u662f\uff1a \u6307\u5b9a\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570\u7684\u8def\u5f84 \u52a0\u8f7d\u6a21\u578b\u7ed3\u6784\uff08\u4e0e\u8bad\u7ec3\u9636\u6bb5\u662f\u4e00\u6837\u7684\uff09\uff0c\u5e76\u52a0\u8f7d\u6a21\u578b\u53c2\u6570 \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u9884\u6d4b\u6a21\u5f0f\uff0c\u5e76\u5199\u5165\u5230\u8bbe\u5907\u4e2d # \u6307\u660e\u6a21\u578b\u53c2\u6570\u7684\u8def\u5f84 weight_dir = 'weights/fasterrcnn_resnet50_fpn.pth' # 2.\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b # \u8bbe\u7f6e\u8bbe\u5907\u4fe1\u606f device = torch . device ( 'cuda' ) if torch . cuda . is_available () else torch . device ( 'cpu' ) # \u6784\u5efafasterRCNN\u6a21\u578b model = torchvision . models . detection . fasterrcnn_resnet50_fpn ( pretrained = False , pretrained_backbone = False ) # \u7c7b\u522b\u4e2a\u6570\uff1aN+1 num_classes = 2 # \u83b7\u53d6\u8f93\u51fa\u5c42\u8f93\u5165\u7279\u5f81\u5411\u91cf\u7684\u7ef4\u5ea6 in_features = model . roi_heads . box_predictor . cls_score . in_features # \u6784\u5efafasterRCNN\u7684\u8f93\u51fa\u7aef model . roi_heads . box_predictor = FastRCNNPredictor ( in_features , num_classes ) print ( \"\u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aef {} \" . format ( model . roi_heads . box_predictor )) # \u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u53c2\u6570 model . load_state_dict ( torch . load ( weight_dir , map_location = device )) # \u6a21\u578b\u9884\u6d4b\u6a21\u5f0f model . eval () # \u5c06\u6a21\u578b\u5199\u5165\u5230\u8bbe\u5907\u4e2d model . to ( device ) \u5728\u8fd9\u91cc\u6211\u4eec\u6253\u5370\u6a21\u578b\u7684\u8f93\u51fa\u7aef\uff1a \u5f53\u524d\u4efb\u52a1\u7684\u8f93\u51fa\u7aefFastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 2 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 8 , bias = True ) ) \u4ece\u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7684\u6a21\u578b\u662f\u8fdb\u884c\u9ea6\u7a57\u68c0\u6d4b\u7684\u6a21\u578b\u67b6\u6784\u3002","title":"5.1 \u6570\u636e\u548c\u6a21\u578b\u52a0\u8f7d"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/03-wheat_detection_fasterRCNN/#52","text":"\u51c6\u5907\u6d4b\u8bd5\u7684\u6570\u636e\u548c\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6570\u636e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u4ee3\u7801\u5728\u5728\u6587\u4ef6fasterRCNN_code/test.py\u4e2d\uff0c\u5177\u4f53\u5b9e\u73b0\u6d41\u7a0b\u5982\u4e0b\uff1a \u8bbe\u7f6e\u9884\u6d4b\u7684\u7f6e\u4fe1\u5ea6\u9608\u503c \u904d\u5386\u6bcf\u4e2abatch\u7684\u56fe\u7247\u8fdb\u884c\u9884\u6d4b \u904d\u5386\u9884\u6d4b\u7ed3\u679c\uff0c\u4f7f\u7528\u7f6e\u4fe1\u5ea6\u9608\u503c\u8fdb\u884c\u7b5b\u9009 \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a # \u7c7b\u522b\u6982\u7387\u7684\u9608\u503c score_threshold = 0.7 # \u5b58\u653e\u9884\u6d4b\u7ed3\u679c image_outputs = [] # \u904d\u5386\u6bcf\u4e2a\u6279\u6b21\u7684\u6d4b\u8bd5\u6570\u636e for images , image_ids in test_data_loader : # \u83b7\u53d6\u6bcf\u4e00\u5e45\u56fe\u7247\u5e76\u5199\u5165\u5230\u8bbe\u5907\u4e2d images = list ( image . to ( device ) for image in images ) # \u6a21\u578b\u9884\u6d4b\u8fd4\u56de\u7ed3\u679c outputs = model ( images ) # \u904d\u5386\u56fe\u50cf\u548c\u9884\u6d4b\u7ed3\u679c for image_id , output in zip ( image_ids , outputs ): # \u6846 boxes = output [ 'boxes' ] . data . cpu () . numpy () # \u7c7b\u522b\u6982\u7387\u503c scores = output [ 'scores' ] . data . cpu () . numpy () # \u4f7f\u7528\u9884\u6d4b\u8fdb\u884c\u7b5b\u9009 mask = scores >= score_threshold # \u83b7\u53d6\u6700\u7ec8\u7684\u68c0\u6d4b\u6846\u548c\u7c7b\u522b\u6982\u7387\u503c boxes = boxes [ mask ] . astype ( np . int32 ) scores = scores [ mask ] # \u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u8fdb\u884c\u4fdd\u5b58 image_outputs . append (( image_id , boxes , scores )) \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u9884\u6d4b\u7ed3\u679c\u8fdb\u884c\u5c55\u793a\uff1a # \u9884\u6d4b\u7ed3\u679c\u5c55\u793a # \u83b7\u53d6\u6d4b\u8bd5\u96c6\u56fe\u7247\u6570\u636e datas = [ test_data [ i ] for i in range ( 0 , len ( image_outputs ))] imgs = [ d [ 0 ] . permute ( 1 , 2 , 0 ) . numpy () for d in test_data ] # \u56fe\u50cf\u5c55\u793a axes = show_images ( imgs , 2 , len ( image_outputs ) // 2 ) # \u9884\u6d4b\u6846\u7684\u5c55\u793a for ax , ( img_id , boxes , score ) in zip ( axes , image_outputs ): show_bboxes ( ax , boxes , colors = [ 'blue' ]) plt . show () \u5c55\u793a\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u4e0a\u56fe\u5c55\u793a\u4e86\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u89c2\u6d4b\u51fa\u5927\u90e8\u5206\u7684\u9ea6\u7a57\u88ab\u6211\u4eec\u68c0\u6d4b\u51fa\u6765\u4e86\u3002\u5230\u8fd9\u91cc\u6574\u4e2a\u6848\u4f8b\u5c31\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u5b8c\u6210\u4e86\u3002 \u603b\u7ed3 \u4e86\u89e3\u9ea6\u7a57\u68c0\u6d4b\u7684\u6570\u636e\u96c6\u7684\u6784\u6210 \u4e3b\u8981\u6709\u8bad\u7ec3\u96c6\u6570\u636e\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\u6784\u6210\uff0c\u8bad\u7ec3\u96c6\u6570\u636e\u8fdb\u884c\u4e86\u6807\u6ce8\u3002 \u7406\u89e3\u9879\u76ee\u89e3\u51b3\u7684\u5168\u6d41\u7a0b \u6570\u636e\u8bfb\u53d6-\u300b\u6570\u636e\u5206\u6790-\u300b\u6570\u636e\u52a0\u8f7d-\u300b\u6a21\u578b\u6784\u5efa-\u300b\u6a21\u578b\u8bad\u7ec3-\u300b\u6a21\u578b\u6d4b\u8bd5 \u80fd\u591f\u5229\u7528fasterRCNN\u7f51\u7edc\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u9884\u6d4b","title":"5.2 \u6a21\u578b\u9884\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/","text":"2.5.yolo\u7cfb\u5217 \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053yolo\u7f51\u7edc\u67b6\u6784\uff0c\u7406\u89e3\u5176\u8f93\u5165\u8f93\u51fa \u77e5\u9053yolo\u6a21\u578b\u7684\u8bad\u7ec3\u6837\u672c\u6784\u5efa\u7684\u65b9\u6cd5 \u7406\u89e3yolo\u6a21\u578b\u7684\u635f\u5931\u51fd\u6570 \u77e5\u9053yoloV2\u6a21\u578b\u7684\u6539\u8fdb\u65b9\u6cd5 \u77e5\u9053yoloV3\u6a21\u578b\u7684\u7f51\u7edc\u7ed3\u6784\u53ca\u7f51\u7edc\u8f93\u51fa \u4e86\u89e3yoloV3\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u8bbe\u8ba1\u548c\u635f\u5931\u51fd\u6570\u7684\u8ba1\u7b97 YOLO\u7cfb\u5217\u7b97\u6cd5\u662f\u4e00\u7c7b\u5178\u578b\u7684one-stage\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\uff0c\u5176\u5229\u7528anchor box\u5c06\u5206\u7c7b\u4e0e\u76ee\u6807\u5b9a\u4f4d\u7684\u56de\u5f52\u95ee\u9898\u7ed3\u5408\u8d77\u6765\uff0c\u4ece\u800c\u505a\u5230\u4e86\u9ad8\u6548\u3001\u7075\u6d3b\u548c\u6cdb\u5316\u6027\u80fd\u597d\uff0c\u6240\u4ee5\u5728\u5de5\u4e1a\u754c\u4e5f\u5341\u5206\u53d7\u6b22\u8fce\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecdYOLO \u7cfb\u5217\u7b97\u6cd5\u3002 1.yolo\u7b97\u6cd5 \u00b6 Yolo\u7b97\u6cd5\u91c7\u7528\u4e00\u4e2a\u5355\u72ec\u7684CNN\u6a21\u578b\u5b9e\u73b0end-to-end\u7684\u76ee\u6807\u68c0\u6d4b\uff0c\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u5229\u7528\u6574\u5f20\u56fe\u4f5c\u4e3a\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u76f4\u63a5\u5728\u8f93\u51fa\u5c42\u56de\u5f52 bounding box\uff08\u8fb9\u754c\u6846\uff09 \u7684\u4f4d\u7f6e\u53ca\u5176\u6240\u5c5e\u7684\u7c7b\u522b\uff0c\u6574\u4e2a\u7cfb\u7edf\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u9996\u5148\u5c06\u8f93\u5165\u56fe\u7247resize\u5230448x448\uff0c\u7136\u540e\u9001\u5165CNN\u7f51\u7edc\uff0c\u6700\u540e\u5904\u7406\u7f51\u7edc\u9884\u6d4b\u7ed3\u679c\u5f97\u5230\u68c0\u6d4b\u7684\u76ee\u6807\u3002\u76f8\u6bd4R-CNN\u7b97\u6cd5\uff0c\u5176\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u6846\u67b6\uff0c\u5176\u901f\u5ea6\u66f4\u5feb\u3002 1.1 Yolo\u7b97\u6cd5\u601d\u60f3 \u00b6 \u5728\u4ecb\u7ecdYolo\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u56de\u5fc6\u4e0bRCNN\u6a21\u578b\uff0cRCNN\u6a21\u578b\u63d0\u51fa\u4e86\u5019\u9009\u533a(Region Proposals)\u7684\u65b9\u6cd5\uff0c\u5148\u4ece\u56fe\u7247\u4e2d\u641c\u7d22\u51fa\u4e00\u4e9b\u53ef\u80fd\u5b58\u5728\u5bf9\u8c61\u7684\u5019\u9009\u533a\uff08Selective Search\uff09\uff0c\u5927\u69822000\u4e2a\u5de6\u53f3\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u5019\u9009\u533a\u8fdb\u884c\u5bf9\u8c61\u8bc6\u522b\uff0c\u4f46\u5904\u7406\u901f\u5ea6\u8f83\u6162\u3002 Yolo\u610f\u601d\u662fYou Only Look Once\uff0c\u5b83\u5e76\u6ca1\u6709\u771f\u6b63\u7684\u53bb\u6389\u5019\u9009\u533a\u57df\uff0c\u800c\u662f\u521b\u9020\u6027\u7684\u5c06\u5019\u9009\u533a\u548c\u76ee\u6807\u5206\u7c7b\u5408\u4e8c\u4e3a\u4e00\uff0c\u770b\u4e00\u773c\u56fe\u7247\u5c31\u80fd\u77e5\u9053\u6709\u54ea\u4e9b\u5bf9\u8c61\u4ee5\u53ca\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002 Yolo\u6a21\u578b\u91c7\u7528\u9884\u5b9a\u4e49\u9884\u6d4b\u533a\u57df\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u76ee\u6807\u68c0\u6d4b\uff0c\u5177\u4f53\u800c\u8a00\u662f\u5c06\u539f\u59cb\u56fe\u50cf\u5212\u5206\u4e3a 7x7=49 \u4e2a\u7f51\u683c\uff08grid\uff09\uff0c\u6bcf\u4e2a\u7f51\u683c\u5141\u8bb8\u9884\u6d4b\u51fa2\u4e2a\u8fb9\u6846\uff08bounding box\uff0c\u5305\u542b\u67d0\u4e2a\u5bf9\u8c61\u7684\u77e9\u5f62\u6846\uff09\uff0c\u603b\u5171 49x2=98 \u4e2abounding box\u3002\u6211\u4eec\u5c06\u5176\u7406\u89e3\u4e3a98\u4e2a\u9884\u6d4b\u533a\uff0c\u5f88\u7c97\u7565\u7684\u8986\u76d6\u4e86\u56fe\u7247\u7684\u6574\u4e2a\u533a\u57df\uff0c\u5c31\u5728\u8fd998\u4e2a\u9884\u6d4b\u533a\u4e2d\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\u3002 \u53ea\u8981\u5f97\u5230\u8fd998\u4e2a\u533a\u57df\u7684\u76ee\u6807\u5206\u7c7b\u548c\u56de\u5f52\u7ed3\u679c\uff0c\u518d\u8fdb\u884cNMS\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7684\u76ee\u6807\u68c0\u6d4b\u7ed3\u679c\u3002\u90a3\u5177\u4f53\u8981\u600e\u6837\u5b9e\u73b0\u5462\uff1f 1.2 Yolo\u7684\u7f51\u7edc\u7ed3\u6784 \u00b6 YOLO\u7684\u7ed3\u6784\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u5355\u7eaf\u7684\u5377\u79ef\u3001\u6c60\u5316\u6700\u540e\u52a0\u4e86\u4e24\u5c42\u5168\u8fde\u63a5\uff0c\u4ece\u7f51\u7edc\u7ed3\u6784\u4e0a\u770b\uff0c\u4e0e\u524d\u9762\u4ecb\u7ecd\u7684CNN\u5206\u7c7b\u7f51\u7edc\u6ca1\u6709\u672c\u8d28\u7684\u533a\u522b\uff0c\u6700\u5927\u7684\u5dee\u5f02\u662f\u8f93\u51fa\u5c42\u7528\u7ebf\u6027\u51fd\u6570\u505a\u6fc0\u6d3b\u51fd\u6570\uff0c\u56e0\u4e3a\u9700\u8981\u9884\u6d4bbounding box\u7684\u4f4d\u7f6e\uff08\u6570\u503c\u578b\uff09\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5bf9\u8c61\u7684\u6982\u7387\u3002\u6240\u4ee5\u7c97\u7565\u6765\u8bf4\uff0cYOLO\u7684\u6574\u4e2a\u7ed3\u6784\u5c31\u662f\u8f93\u5165\u56fe\u7247\u7ecf\u8fc7\u795e\u7ecf\u7f51\u7edc\u7684\u53d8\u6362\u5f97\u5230\u4e00\u4e2a\u8f93\u51fa\u7684\u5f20\u91cf\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7f51\u7edc\u7ed3\u6784\u6bd4\u8f83\u7b80\u5355\uff0c\u91cd\u70b9\u662f\u6211\u4eec\u8981\u7406\u89e3\u7f51\u7edc\u8f93\u5165\u4e0e\u8f93\u51fa\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 1.2.1 \u7f51\u7edc\u8f93\u5165 \u00b6 \u7f51\u7edc\u7684\u8f93\u5165\u662f\u539f\u59cb\u56fe\u50cf\uff0c\u552f\u4e00\u7684\u8981\u6c42\u662f\u7f29\u653e\u5230448x448\u7684\u5927\u5c0f\u3002\u4e3b\u8981\u662f\u56e0\u4e3aYolo\u7684\u7f51\u7edc\u4e2d\uff0c\u5377\u79ef\u5c42\u6700\u540e\u63a5\u4e86\u4e24\u4e2a\u5168\u8fde\u63a5\u5c42\uff0c\u5168\u8fde\u63a5\u5c42\u662f\u8981\u6c42\u56fa\u5b9a\u5927\u5c0f\u7684\u5411\u91cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u6240\u4ee5Yolo\u7684\u8f93\u5165\u56fe\u50cf\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a448x448\u3002 1.2.2 \u7f51\u7edc\u8f93\u51fa \u00b6 \u7f51\u7edc\u7684\u8f93\u51fa\u5c31\u662f\u4e00\u4e2a7x7x30 \u7684\u5f20\u91cf\uff08tensor\uff09\u3002\u90a3\u8fd9\u4e2a\u8f93\u51fa\u7ed3\u679c\u6211\u4eec\u8981\u600e\u4e48\u7406\u89e3\u90a3\uff1f 1.7x7\u7f51\u683c \u00b6 \u6839\u636eYOLO\u7684\u8bbe\u8ba1\uff0c\u8f93\u5165\u56fe\u50cf\u88ab\u5212\u5206\u4e3a 7x7 \u7684\u7f51\u683c\uff08grid\uff09\uff0c\u8f93\u51fa\u5f20\u91cf\u4e2d\u7684 7x7 \u5c31\u5bf9\u5e94\u7740\u8f93\u5165\u56fe\u50cf\u7684 7x7 \u7f51\u683c\u3002\u6216\u8005\u6211\u4eec\u628a 7x7x30 \u7684\u5f20\u91cf\u770b\u4f5c 7x7=49\u4e2a30\u7ef4\u7684\u5411\u91cf\uff0c\u4e5f\u5c31\u662f\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u7f51\u683c\u5bf9\u5e94\u8f93\u51fa\u4e00\u4e2a30\u7ef4\u7684\u5411\u91cf\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bd4\u5982\u8f93\u5165\u56fe\u50cf\u5de6\u4e0a\u89d2\u7684\u7f51\u683c\u5bf9\u5e94\u5230\u8f93\u51fa\u5f20\u91cf\u4e2d\u5de6\u4e0a\u89d2\u7684\u5411\u91cf\u3002 2.30\u7ef4\u5411\u91cf \u00b6 30\u7ef4\u7684\u5411\u91cf\u5305\u542b\uff1a2\u4e2abbox\u7684\u4f4d\u7f6e\u548c\u7f6e\u4fe1\u5ea6\u4ee5\u53ca\u8be5\u7f51\u683c\u5c5e\u4e8e20\u4e2a\u7c7b\u522b\u7684\u6982\u7387 2\u4e2abounding box\u7684\u4f4d\u7f6e \u6bcf\u4e2abounding box\u9700\u89814\u4e2a\u6570\u503c\u6765\u8868\u793a\u5176\u4f4d\u7f6e\uff0c(Center_x,Center_y,width,height)\uff0c\u5373(bounding box\u7684\u4e2d\u5fc3\u70b9\u7684x\u5750\u6807\uff0cy\u5750\u6807\uff0cbounding box\u7684\u5bbd\u5ea6\uff0c\u9ad8\u5ea6)\uff0c2\u4e2abounding box\u5171\u9700\u89818\u4e2a\u6570\u503c\u6765\u8868\u793a\u5176\u4f4d\u7f6e\u3002 2\u4e2abounding box\u7684\u7f6e\u4fe1\u5ea6 bounding box\u7684\u7f6e\u4fe1\u5ea6 = \u8be5bounding box\u5185\u5b58\u5728\u5bf9\u8c61\u7684\u6982\u7387 * \u8be5bounding box\u4e0e\u8be5\u5bf9\u8c61\u5b9e\u9645bounding box\u7684IOU\uff0c\u7528\u516c\u5f0f\u8868\u793a\u5c31\u662f\uff1a Pr(Object)\u662fbounding box\u5185\u5b58\u5728\u5bf9\u8c61\u7684\u6982\u7387 20\u4e2a\u5bf9\u8c61\u5206\u7c7b\u7684\u6982\u7387 Yolo\u652f\u6301\u8bc6\u522b20\u79cd\u4e0d\u540c\u7684\u5bf9\u8c61\uff08\u4eba\u3001\u9e1f\u3001\u732b\u3001\u6c7d\u8f66\u3001\u6905\u5b50\u7b49\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u670920\u4e2a\u503c\u8868\u793a\u8be5\u7f51\u683c\u4f4d\u7f6e\u5b58\u5728\u4efb\u4e00\u79cd\u5bf9\u8c61\u7684\u6982\u7387. 1.3Yolo\u6a21\u578b\u7684\u8bad\u7ec3 \u00b6 \u5728\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u8bad\u7ec3\u6837\u672c\u548c\u8bbe\u8ba1\u635f\u5931\u51fd\u6570\uff0c\u624d\u80fd\u5229\u7528\u68af\u5ea6\u4e0b\u964d\u5bf9\u7f51\u7edc\u8fdb\u884c\u8bad\u7ec3\u3002 1.3.1\u8bad\u7ec3\u6837\u672c\u7684\u6784\u5efa \u00b6 \u5c06\u4e00\u5e45\u56fe\u7247\u8f93\u5165\u5230yolo\u6a21\u578b\u4e2d\uff0c\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u4e00\u4e2a7x7x30\u5f20\u91cf\uff0c\u6784\u5efa\u6807\u7b7elabel\u65f6\u5bf9\u4e8e\u539f\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7f51\u683cgrid\u90fd\u9700\u8981\u6784\u5efa\u4e00\u4e2a30\u7ef4\u7684\u5411\u91cf\u3002\u5bf9\u7167\u4e0b\u56fe\u6211\u4eec\u6765\u6784\u5efa\u76ee\u6807\u5411\u91cf\uff1a 20\u4e2a\u5bf9\u8c61\u5206\u7c7b\u7684\u6982\u7387 \u5bf9\u4e8e\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\uff0c\u5148\u627e\u5230\u5176\u4e2d\u5fc3\u70b9\u3002\u6bd4\u5982\u4e0a\u56fe\u4e2d\u81ea\u884c\u8f66\uff0c\u5176\u4e2d\u5fc3\u70b9\u5728\u9ec4\u8272\u5706\u70b9\u4f4d\u7f6e\uff0c\u4e2d\u5fc3\u70b9\u843d\u5728\u9ec4\u8272\u7f51\u683c\u5185\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9ec4\u8272\u7f51\u683c\u5bf9\u5e94\u768430\u7ef4\u5411\u91cf\u4e2d\uff0c\u81ea\u884c\u8f66\u7684\u6982\u7387\u662f1\uff0c\u5176\u5b83\u5bf9\u8c61\u7684\u6982\u7387\u662f0\u3002\u6240\u6709\u5176\u5b8348\u4e2a\u7f51\u683c\u768430\u7ef4\u5411\u91cf\u4e2d\uff0c\u8be5\u81ea\u884c\u8f66\u7684\u6982\u7387\u90fd\u662f0\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\"\u4e2d\u5fc3\u70b9\u6240\u5728\u7684\u7f51\u683c\u5bf9\u9884\u6d4b\u8be5\u5bf9\u8c61\u8d1f\u8d23\"\u3002\u72d7\u548c\u6c7d\u8f66\u7684\u5206\u7c7b\u6982\u7387\u4e5f\u662f\u540c\u6837\u7684\u65b9\u6cd5\u586b\u5199 2\u4e2abounding box\u7684\u4f4d\u7f6e \u8bad\u7ec3\u6837\u672c\u7684bbox\u4f4d\u7f6e\u5e94\u8be5\u586b\u5199\u5bf9\u8c61\u771f\u5b9e\u7684\u4f4d\u7f6ebbox\uff0c\u4f46\u4e00\u4e2a\u5bf9\u8c61\u5bf9\u5e94\u4e862\u4e2abounding box\uff0c\u8be5\u586b\u54ea\u4e00\u4e2a\u5462\uff1f\u9700\u8981\u6839\u636e\u7f51\u7edc\u8f93\u51fa\u7684bbox\u4e0e\u5bf9\u8c61\u5b9e\u9645bbox\u7684IOU\u6765\u9009\u62e9\uff0c\u6240\u4ee5\u8981\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u52a8\u6001\u51b3\u5b9a\u5230\u5e95\u586b\u54ea\u4e00\u4e2abbox\u3002 2\u4e2abounding box\u7684\u7f6e\u4fe1\u5ea6 \u9884\u6d4b\u7f6e\u4fe1\u5ea6\u7684\u516c\u5f0f\u4e3a\uff1a IOU_{pred}^{truth} IOU_{pred}^{truth} \u5229\u7528\u7f51\u7edc\u8f93\u51fa\u76842\u4e2abounding box\u4e0e\u5bf9\u8c61\u771f\u5b9ebounding box\u8ba1\u7b97\u51fa\u6765\u3002\u7136\u540e\u770b\u8fd92\u4e2abounding box\u7684IOU\uff0c\u54ea\u4e2a\u6bd4\u8f83\u5927\uff0c\u5c31\u7531\u54ea\u4e2abounding box\u6765\u8d1f\u8d23\u9884\u6d4b\u8be5\u5bf9\u8c61\u662f\u5426\u5b58\u5728\uff0c\u5373\u8be5bounding box\u7684Pr(Object)=1\uff0c\u540c\u65f6\u5bf9\u8c61\u771f\u5b9ebounding box\u7684\u4f4d\u7f6e\u4e5f\u5c31\u586b\u5165\u8be5bounding box\u3002\u53e6\u4e00\u4e2a\u4e0d\u8d1f\u8d23\u9884\u6d4b\u7684bounding box\u7684Pr(Object)=0\u3002 \u4e0a\u56fe\u4e2d\u81ea\u884c\u8f66\u6240\u5728\u7684grid\u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 1.3.2 \u635f\u5931\u51fd\u6570 \u00b6 \u635f\u5931\u5c31\u662f\u7f51\u7edc\u5b9e\u9645\u8f93\u51fa\u503c\u4e0e\u6837\u672c\u6807\u7b7e\u503c\u4e4b\u95f4\u7684\u504f\u5dee\uff1a yolo\u7ed9\u51fa\u7684\u635f\u5931\u51fd\u6570\uff1a \u6ce8\uff1a\u5176\u4e2d 1_{i}^{obj} 1_{i}^{obj} \u8868\u793a\u76ee\u6807\u662f\u5426\u51fa\u73b0\u5728\u7f51\u683c\u5355\u5143i\u4e2d\uff0c 1_{ij}^{obj} 1_{ij}^{obj} \u8868\u793a\u5355\u5143\u683ci\u4e2d\u7684\u7b2cj\u4e2a\u8fb9\u754c\u6846\u9884\u6d4b\u5668\u8d1f\u8d23\u8be5\u9884\u6d4b\uff0cYOLO\u8bbe\u7f6e \\lambda_{coord} = 5 \\lambda_{coord} = 5 \u6765\u8c03\u9ad8\u4f4d\u7f6e\u8bef\u5dee\u7684\u6743\u91cd\uff0c \\lambda_{noobj} = 0.5 \\lambda_{noobj} = 0.5 \u5373\u8c03\u4f4e\u4e0d\u5b58\u5728\u5bf9\u8c61\u7684bounding box\u7684\u7f6e\u4fe1\u5ea6\u8bef\u5dee\u7684\u6743\u91cd\u3002 1.3.3 \u6a21\u578b\u8bad\u7ec3 \u00b6 Yolo\u5148\u4f7f\u7528ImageNet\u6570\u636e\u96c6\u5bf9\u524d20\u5c42\u5377\u79ef\u7f51\u7edc\u8fdb\u884c\u9884\u8bad\u7ec3\uff0c\u7136\u540e\u4f7f\u7528\u5b8c\u6574\u7684\u7f51\u7edc\uff0c\u5728PASCAL VOC\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u5bf9\u8c61\u8bc6\u522b\u548c\u5b9a\u4f4d\u7684\u8bad\u7ec3\u3002 Yolo\u7684\u6700\u540e\u4e00\u5c42\u91c7\u7528\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff0c\u5176\u5b83\u5c42\u90fd\u662fLeaky ReLU\u3002\u8bad\u7ec3\u4e2d\u91c7\u7528\u4e86drop out\u548c\u6570\u636e\u589e\u5f3a\uff08data augmentation\uff09\u6765\u9632\u6b62\u8fc7\u62df\u5408. 1.4 \u6a21\u578b\u9884\u6d4b \u00b6 \u5c06\u56fe\u7247resize\u6210448x448\u7684\u5927\u5c0f\uff0c\u9001\u5165\u5230yolo\u7f51\u7edc\u4e2d\uff0c\u8f93\u51fa\u4e00\u4e2a 7x7x30 \u7684\u5f20\u91cf\uff08tensor\uff09\u6765\u8868\u793a\u56fe\u7247\u4e2d\u6240\u6709\u7f51\u683c\u5305\u542b\u7684\u5bf9\u8c61\uff08\u6982\u7387\uff09\u4ee5\u53ca\u8be5\u5bf9\u8c61\u53ef\u80fd\u76842\u4e2a\u4f4d\u7f6e\uff08bounding box\uff09\u548c\u53ef\u4fe1\u7a0b\u5ea6\uff08\u7f6e\u4fe1\u5ea6\uff09\u3002\u5728\u91c7\u7528NMS\uff08Non-maximal suppression\uff0c\u975e\u6781\u5927\u503c\u6291\u5236\uff09\u7b97\u6cd5\u9009\u51fa\u6700\u6709\u53ef\u80fd\u662f\u76ee\u6807\u7684\u7ed3\u679c\u3002 1.5 yolo\u603b\u7ed3 \u00b6 \u4f18\u70b9 \u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u5904\u7406\u901f\u5ea6\u53ef\u4ee5\u8fbe\u523045fps\uff0c\u5176\u5feb\u901f\u7248\u672c\uff08\u7f51\u7edc\u8f83\u5c0f\uff09\u751a\u81f3\u53ef\u4ee5\u8fbe\u5230155fps\u3002 \u8bad\u7ec3\u548c\u9884\u6d4b\u53ef\u4ee5\u7aef\u5230\u7aef\u7684\u8fdb\u884c\uff0c\u975e\u5e38\u7b80\u4fbf\u3002 \u7f3a\u70b9 \u51c6\u786e\u7387\u4f1a\u6253\u6298\u6263 \u5bf9\u4e8e\u5c0f\u76ee\u6807\u548c\u9760\u7684\u5f88\u8fd1\u7684\u76ee\u6807\u68c0\u6d4b\u6548\u679c\u5e76\u4e0d\u597d 2.yoloV2 \u00b6 YOLOv2\u76f8\u5bf9v1\u7248\u672c\uff0c\u5728\u7ee7\u7eed\u4fdd\u6301\u5904\u7406\u901f\u5ea6\u7684\u57fa\u7840\u4e0a\uff0c\u4ece\u9884\u6d4b\u66f4\u51c6\u786e\uff08Better\uff09\uff0c\u901f\u5ea6\u66f4\u5feb\uff08Faster\uff09\uff0c\u8bc6\u522b\u5bf9\u8c61\u66f4\u591a\uff08Stronger\uff09\u8fd9\u4e09\u4e2a\u65b9\u9762\u8fdb\u884c\u4e86\u6539\u8fdb\u3002\u5176\u4e2d\u8bc6\u522b\u66f4\u591a\u5bf9\u8c61\u4e5f\u5c31\u662f\u6269\u5c55\u5230\u80fd\u591f\u68c0\u6d4b9000\u79cd\u4e0d\u540c\u5bf9\u8c61\uff0c\u79f0\u4e4b\u4e3aYOLO9000\u3002 \u4e0b\u9762\u6211\u4eec\u770b\u4e0byoloV2\u7684\u90fd\u505a\u4e86\u54ea\u4e9b\u6539\u8fdb\uff1f 2.1 \u9884\u6d4b\u66f4\u51c6\u786e\uff08better\uff09 \u00b6 2.1.1 batch normalization \u00b6 \u6279\u6807\u51c6\u5316\u6709\u52a9\u4e8e\u89e3\u51b3\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u7684\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8\u95ee\u9898\uff0c\u964d\u4f4e\u5bf9\u4e00\u4e9b\u8d85\u53c2\u6570\u7684\u654f\u611f\u6027\uff0c\u5e76\u4e14\u6bcf\u4e2abatch\u5206\u522b\u8fdb\u884c\u5f52\u4e00\u5316\u7684\u65f6\u5019\uff0c\u8d77\u5230\u4e86\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u6548\u679c\uff0c\u4ece\u800c\u80fd\u591f\u83b7\u5f97\u66f4\u597d\u7684\u6536\u655b\u901f\u5ea6\u548c\u6536\u655b\u6548\u679c\u3002\u5728yoloV2\u4e2d\u5377\u79ef\u540e\u5168\u90e8\u52a0\u5165Batch Normalization\uff0c\u7f51\u7edc\u4f1a\u63d0\u53472%\u7684mAP\u3002 2.1.2 \u4f7f\u7528\u9ad8\u5206\u8fa8\u7387\u56fe\u50cf\u5fae\u8c03\u5206\u7c7b\u6a21\u578b \u00b6 YOLO v1\u4f7f\u7528ImageNet\u7684\u56fe\u50cf\u5206\u7c7b\u6837\u672c\u91c7\u7528 224x224 \u4f5c\u4e3a\u8f93\u5165\uff0c\u6765\u8bad\u7ec3CNN\u5377\u79ef\u5c42\u3002\u7136\u540e\u5728\u8bad\u7ec3\u5bf9\u8c61\u68c0\u6d4b\u65f6\uff0c\u68c0\u6d4b\u7528\u7684\u56fe\u50cf\u6837\u672c\u91c7\u7528\u66f4\u9ad8\u5206\u8fa8\u7387\u7684 448x448 \u7684\u56fe\u50cf\u4f5c\u4e3a\u8f93\u5165\u3002\u4f46\u8fd9\u6837\u5207\u6362\u5bf9\u6a21\u578b\u6027\u80fd\u6709\u4e00\u5b9a\u5f71\u54cd\u3002 YOLOV2\u5728\u91c7\u7528 224x224 \u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u6a21\u578b\u9884\u8bad\u7ec3\u540e\uff0c\u518d\u91c7\u7528 448x448 \u7684\u9ad8\u5206\u8fa8\u7387\u6837\u672c\u5bf9\u5206\u7c7b\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\uff0810\u4e2aepoch\uff09\uff0c\u4f7f\u7f51\u7edc\u7279\u5f81\u9010\u6e10\u9002\u5e94 448x448 \u7684\u5206\u8fa8\u7387\u3002\u7136\u540e\u518d\u4f7f\u7528 448x448 \u7684\u68c0\u6d4b\u6837\u672c\u8fdb\u884c\u8bad\u7ec3\uff0c\u7f13\u89e3\u4e86\u5206\u8fa8\u7387\u7a81\u7136\u5207\u6362\u9020\u6210\u7684\u5f71\u54cd\u3002 \u4f7f\u7528\u8be5\u6280\u5de7\u540e\u7f51\u7edc\u7684mAP\u63d0\u5347\u4e86\u7ea64%\u3002 2.1.3 \u91c7\u7528Anchor Boxes \u00b6 YOLO1\u5e76\u6ca1\u6709\u91c7\u7528\u5148\u9a8c\u6846\uff0c\u5e76\u4e14\u6bcf\u4e2agrid\u53ea\u9884\u6d4b\u4e24\u4e2abounding box\uff0c\u6574\u4e2a\u56fe\u50cf98\u4e2a\u3002YOLO2\u5982\u679c\u6bcf\u4e2agrid\u91c7\u75285\u4e2a\u5148\u9a8c\u6846\uff0c\u603b\u5171\u670913x13x5=845\u4e2a\u5148\u9a8c\u6846\u3002\u901a\u8fc7\u5f15\u5165anchor boxes\uff0c\u4f7f\u5f97\u9884\u6d4b\u7684box\u6570\u91cf\u66f4\u591a\uff0813x13xn\uff09\u3002 2.2.4 \u805a\u7c7b\u63d0\u53d6anchor\u5c3a\u5ea6 \u00b6 Faster-rcnn\u9009\u62e9\u7684anchor\u6bd4\u4f8b\u90fd\u662f\u624b\u52a8\u6307\u5b9a\u7684\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u5b8c\u5168\u9002\u5408\u6570\u636e\u96c6\u3002YOLO2\u5c1d\u8bd5\u7edf\u8ba1\u51fa\u66f4\u7b26\u5408\u6837\u672c\u4e2d\u5bf9\u8c61\u5c3a\u5bf8\u7684\u5148\u9a8c\u6846\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u7f51\u7edc\u5fae\u8c03\u5148\u9a8c\u6846\u5230\u5b9e\u9645\u4f4d\u7f6e\u7684\u96be\u5ea6\u3002YOLO2\u7684\u505a\u6cd5\u662f\u5bf9\u8bad\u7ec3\u96c6\u4e2d\u6807\u6ce8\u7684\u8fb9\u6846\u8fdb\u884c\u805a\u7c7b\u5206\u6790\uff0c\u4ee5\u5bfb\u627e\u5c3d\u53ef\u80fd\u5339\u914d\u6837\u672c\u7684\u8fb9\u6846\u5c3a\u5bf8\u3002 YoloV2\u9009\u62e9\u4e86\u805a\u7c7b\u7684\u4e94\u79cd\u5c3a\u5bf8\u6700\u4e3aanchor box\u3002 2.1.5 \u8fb9\u6846\u4f4d\u7f6e\u7684\u9884\u6d4b \u00b6 Yolov2\u4e2d\u5c06\u8fb9\u6846\u7684\u7ed3\u679c\u7ea6\u675f\u5728\u7279\u5b9a\u7684\u7f51\u683c\u4e2d\uff1a \u5176\u4e2d\uff0c b_x,b_y,b_w,b_h b_x,b_y,b_w,b_h \u662f\u9884\u6d4b\u8fb9\u6846\u7684\u4e2d\u5fc3\u548c\u5bbd\u9ad8\u3002 Pr(object)\u2217IOU(b,object) Pr(object)\u2217IOU(b,object) \u662f\u9884\u6d4b\u8fb9\u6846\u7684\u7f6e\u4fe1\u5ea6\uff0cYOLO1\u662f\u76f4\u63a5\u9884\u6d4b\u7f6e\u4fe1\u5ea6\u7684\u503c\uff0c\u8fd9\u91cc\u5bf9\u9884\u6d4b\u53c2\u6570 t_o t_o \u8fdb\u884c\u03c3\u53d8\u6362\u540e\u4f5c\u4e3a\u7f6e\u4fe1\u5ea6\u7684\u503c\u3002 c_x,c_y c_x,c_y \u662f\u5f53\u524d\u7f51\u683c\u5de6\u4e0a\u89d2\u5230\u56fe\u50cf\u5de6\u4e0a\u89d2\u7684\u8ddd\u79bb\uff0c\u8981\u5148\u5c06\u7f51\u683c\u5927\u5c0f\u5f52\u4e00\u5316\uff0c\u5373\u4ee4\u4e00\u4e2a\u7f51\u683c\u7684\u5bbd=1\uff0c\u9ad8=1\u3002 p_w,p_h p_w,p_h \u662f\u5148\u9a8c\u6846\u7684\u5bbd\u548c\u9ad8\u3002 \u03c3\u662fsigmoid\u51fd\u6570\u3002 t_x,t_y,t_w,t_h,t_o t_x,t_y,t_w,t_h,t_o \u662f\u8981\u5b66\u4e60\u7684\u53c2\u6570\uff0c\u5206\u522b\u7528\u4e8e\u9884\u6d4b\u8fb9\u6846\u7684\u4e2d\u5fc3\u548c\u5bbd\u9ad8\uff0c\u4ee5\u53ca\u7f6e\u4fe1\u5ea6\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7531\u4e8e\u03c3\u51fd\u6570\u5c06 t_x,t_y t_x,t_y \u7ea6\u675f\u5728(0,1)\u8303\u56f4\u5185\uff0c\u9884\u6d4b\u8fb9\u6846\u7684\u84dd\u8272\u4e2d\u5fc3\u70b9\u88ab\u7ea6\u675f\u5728\u84dd\u8272\u80cc\u666f\u7684\u7f51\u683c\u5185\u3002\u7ea6\u675f\u8fb9\u6846\u4f4d\u7f6e\u4f7f\u5f97\u6a21\u578b\u66f4\u5bb9\u6613\u5b66\u4e60\uff0c\u4e14\u9884\u6d4b\u66f4\u4e3a\u7a33\u5b9a\u3002 \u5047\u8bbe\u7f51\u7edc\u9884\u6d4b\u503c\u4e3a\uff1a anchor\u6846\u4e3a\uff1a \u5219\u76ee\u6807\u5728\u7279\u5f81\u56fe\u4e2d\u7684\u4f4d\u7f6e\uff1a \u5728\u539f\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6e\uff1a 2.1.6 \u7ec6\u7c92\u5ea6\u7279\u5f81\u878d\u5408 \u00b6 \u56fe\u50cf\u4e2d\u5bf9\u8c61\u4f1a\u6709\u5927\u6709\u5c0f\uff0c\u8f93\u5165\u56fe\u50cf\u7ecf\u8fc7\u591a\u5c42\u7f51\u7edc\u63d0\u53d6\u7279\u5f81\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u4e2d\uff0c\u8f83\u5c0f\u7684\u5bf9\u8c61\u53ef\u80fd\u7279\u5f81\u5df2\u7ecf\u4e0d\u660e\u663e\u751a\u81f3\u88ab\u5ffd\u7565\u6389\u4e86\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u68c0\u6d4b\u51fa\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5bf9\u8c61\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u9700\u8981\u4fdd\u7559\u4e00\u4e9b\u66f4\u7ec6\u8282\u7684\u4fe1\u606f\u3002 YOLO2\u5f15\u5165\u4e00\u79cd\u79f0\u4e3apassthrough\u5c42\u7684\u65b9\u6cd5\u5728\u7279\u5f81\u56fe\u4e2d\u4fdd\u7559\u4e00\u4e9b\u7ec6\u8282\u4fe1\u606f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u6700\u540e\u4e00\u4e2apooling\u4e4b\u524d\uff0c\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u662f26x26x512\uff0c\u5c06\u51761\u62c64\uff0c\u76f4\u63a5\u4f20\u9012\uff08passthrough\uff09\u5230pooling\u540e\uff08\u5e76\u4e14\u53c8\u7ecf\u8fc7\u4e00\u7ec4\u5377\u79ef\uff09\u7684\u7279\u5f81\u56fe\uff0c\u4e24\u8005\u53e0\u52a0\u5230\u4e00\u8d77\u4f5c\u4e3a\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u3002 \u5177\u4f53\u7684\u62c6\u5206\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a 2.1.7 \u591a\u5c3a\u5ea6\u8bad\u7ec3 \u00b6 YOLO2\u4e2d\u6ca1\u6709\u5168\u8fde\u63a5\u5c42\uff0c\u53ef\u4ee5\u8f93\u5165\u4efb\u4f55\u5c3a\u5bf8\u7684\u56fe\u50cf\u3002\u56e0\u4e3a\u6574\u4e2a\u7f51\u7edc\u4e0b\u91c7\u6837\u500d\u6570\u662f32\uff0c\u91c7\u7528\u4e86{320,352,...,608}\u7b4910\u79cd\u8f93\u5165\u56fe\u50cf\u7684\u5c3a\u5bf8\uff0c\u8fd9\u4e9b\u5c3a\u5bf8\u7684\u8f93\u5165\u56fe\u50cf\u5bf9\u5e94\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u5bbd\u548c\u9ad8\u662f{10,11,...19}\u3002\u8bad\u7ec3\u65f6\u6bcf10\u4e2abatch\u5c31\u968f\u673a\u66f4\u6362\u4e00\u79cd\u5c3a\u5bf8\uff0c\u4f7f\u7f51\u7edc\u80fd\u591f\u9002\u5e94\u5404\u79cd\u5927\u5c0f\u7684\u5bf9\u8c61\u68c0\u6d4b\u3002 2.2 \u901f\u5ea6\u66f4\u5feb\uff08Faster\uff09 \u00b6 yoloV2\u63d0\u51fa\u4e86Darknet-19\uff08\u670919\u4e2a\u5377\u79ef\u5c42\u548c5\u4e2aMaxPooling\u5c42\uff09\u7f51\u7edc\u7ed3\u6784\u4f5c\u4e3a\u7279\u5f81\u63d0\u53d6\u7f51\u7edc\u3002DarkNet-19\u6bd4VGG-16\u5c0f\u4e00\u4e9b\uff0c\u7cbe\u5ea6\u4e0d\u5f31\u4e8eVGG-16\uff0c\u4f46\u6d6e\u70b9\u8fd0\u7b97\u91cf\u51cf\u5c11\u5230\u7ea6\u2155\uff0c\u4ee5\u4fdd\u8bc1\u66f4\u5feb\u7684\u8fd0\u7b97\u901f\u5ea6\u3002 yoloV2\u7684\u7f51\u7edc\u4e2d\u53ea\u6709\u5377\u79ef+pooling\uff0c\u4ece416x416x3 \u53d8\u6362\u5230 13x13x5x25\u3002\u589e\u52a0\u4e86batch normalization\uff0c\u589e\u52a0\u4e86\u4e00\u4e2apassthrough\u5c42\uff0c\u53bb\u6389\u4e86\u5168\u8fde\u63a5\u5c42\uff0c\u4ee5\u53ca\u91c7\u7528\u4e865\u4e2a\u5148\u9a8c\u6846,\u7f51\u7edc\u7684\u8f93\u51fa\u5982\u4e0b\u56fe\u6240\u793a\uff1a 2.3 \u8bc6\u522b\u5bf9\u8c61\u66f4\u591a \u00b6 VOC\u6570\u636e\u96c6\u53ef\u4ee5\u68c0\u6d4b20\u79cd\u5bf9\u8c61\uff0c\u4f46\u5b9e\u9645\u4e0a\u5bf9\u8c61\u7684\u79cd\u7c7b\u975e\u5e38\u591a\uff0c\u53ea\u662f\u7f3a\u5c11\u76f8\u5e94\u7684\u7528\u4e8e\u5bf9\u8c61\u68c0\u6d4b\u7684\u8bad\u7ec3\u6837\u672c\u3002YOLO2\u5c1d\u8bd5\u5229\u7528ImageNet\u975e\u5e38\u5927\u91cf\u7684\u5206\u7c7b\u6837\u672c\uff0c\u8054\u5408COCO\u7684\u5bf9\u8c61\u68c0\u6d4b\u6570\u636e\u96c6\u4e00\u8d77\u8bad\u7ec3\uff0c\u4f7f\u5f97YOLO2\u5373\u4f7f\u6ca1\u6709\u5b66\u8fc7\u5f88\u591a\u5bf9\u8c61\u7684\u68c0\u6d4b\u6837\u672c\uff0c\u4e5f\u80fd\u68c0\u6d4b\u51fa\u8fd9\u4e9b\u5bf9\u8c61\u3002 3.yoloV3 \u00b6 yoloV3\u4ee5V1\uff0cV2\u4e3a\u57fa\u7840\u8fdb\u884c\u7684\u6539\u8fdb\uff0c\u4e3b\u8981\u6709\uff1a\u5229\u7528\u591a\u5c3a\u5ea6\u7279\u5f81\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\uff1b\u5148\u9a8c\u6846\u66f4\u4e30\u5bcc\uff1b\u8c03\u6574\u4e86\u7f51\u7edc\u7ed3\u6784\uff1b\u5bf9\u8c61\u5206\u7c7b\u4f7f\u7528logistic\u4ee3\u66ff\u4e86softmax,\u66f4\u9002\u7528\u4e8e\u591a\u6807\u7b7e\u5206\u7c7b\u4efb\u52a1\u3002 3.1\u7b97\u6cd5\u7b80\u4ecb \u00b6 YOLOv3\u662fYOLO (You Only Look Once)\u7cfb\u5217\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7684\u7b2c\u4e09\u7248\uff0c\u76f8\u6bd4\u4e4b\u524d\u7684\u7b97\u6cd5\uff0c\u5c24\u5176\u662f\u9488\u5bf9\u5c0f\u76ee\u6807\uff0c\u7cbe\u5ea6\u6709\u663e\u8457\u63d0\u5347\u3002 yoloV3\u7684\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5e45\u8f93\u5165\u56fe\u50cf\uff0cYOLOv3\u4f1a\u9884\u6d4b\u4e09\u4e2a\u4e0d\u540c\u5c3a\u5ea6\u7684\u8f93\u51fa\uff0c\u76ee\u7684\u662f\u68c0\u6d4b\u51fa\u4e0d\u540c\u5927\u5c0f\u7684\u76ee\u6807\u3002 3.2 \u7f51\u7edc\u7ed3\u6784 \u00b6 yoloV3\u7684\u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a\u6574\u4e2av3\u7ed3\u6784\u91cc\u9762\uff0c\u6ca1\u6709\u6c60\u5316\u5c42\u548c\u5168\u8fde\u63a5\u5c42\uff0c\u7f51\u7edc\u7684\u4e0b\u91c7\u6837\u662f\u901a\u8fc7\u8bbe\u7f6e\u5377\u79ef\u7684\u6b65\u957f\u4e3a2\u6765\u8fbe\u5230\u7684\uff0c\u6bcf\u5f53\u901a\u8fc7\u8fd9\u4e2a\u5377\u79ef\u5c42\u4e4b\u540e\u56fe\u50cf\u7684\u5c3a\u5bf8\u5c31\u4f1a\u51cf\u5c0f\u5230\u4e00\u534a\u3002 \u57fa\u672c\u7ec4\u4ef6\uff1a\u84dd\u8272\u65b9\u6846\u5185\u90e8\u5206 1\u3001CBL\uff1aYolov3\u7f51\u7edc\u7ed3\u6784\u4e2d\u7684\u6700\u5c0f\u7ec4\u4ef6\uff0c\u7531Conv+Bn+Leaky_relu\u6fc0\u6d3b\u51fd\u6570\u4e09\u8005\u7ec4\u6210\u3002 2\u3001Res unit\uff1a\u501f\u9274Resnet\u7f51\u7edc\u4e2d\u7684\u6b8b\u5dee\u7ed3\u6784\uff0c\u8ba9\u7f51\u7edc\u53ef\u4ee5\u6784\u5efa\u7684\u66f4\u6df1\u3002 3\u3001ResX\uff1a\u7531\u4e00\u4e2aCBL\u548cX\u4e2a\u6b8b\u5dee\u7ec4\u4ef6\u6784\u6210\uff0c\u662fYolov3\u4e2d\u7684\u5927\u7ec4\u4ef6\u3002\u6bcf\u4e2aRes\u6a21\u5757\u524d\u9762\u7684CBL\u90fd\u8d77\u5230\u4e0b\u91c7\u6837\u7684\u4f5c\u7528\uff0c\u56e0\u6b64\u7ecf\u8fc75\u6b21Res\u6a21\u5757\u540e\uff0c\u5f97\u5230\u7684\u7279\u5f81\u56fe\u662f416->208->104->52->26->13\u5927\u5c0f\u3002 \u5176\u4ed6\u57fa\u7840\u64cd\u4f5c\uff1a 1\u3001Concat\uff1a\u5f20\u91cf\u62fc\u63a5\uff0c\u4f1a\u6269\u5145\u4e24\u4e2a\u5f20\u91cf\u7684\u7ef4\u5ea6\uff0c\u4f8b\u598226\u00d726\u00d7256\u548c26\u00d726\u00d7512\u4e24\u4e2a\u5f20\u91cf\u62fc\u63a5\uff0c\u7ed3\u679c\u662f26\u00d726\u00d7768\u3002 2\u3001Add\uff1a\u5f20\u91cf\u76f8\u52a0\uff0c\u5f20\u91cf\u76f4\u63a5\u76f8\u52a0\uff0c\u4e0d\u4f1a\u6269\u5145\u7ef4\u5ea6\uff0c\u4f8b\u5982104\u00d7104\u00d7128\u548c104\u00d7104\u00d7128\u76f8\u52a0\uff0c\u7ed3\u679c\u8fd8\u662f104\u00d7104\u00d7128\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u8f93\u5165\uff08input\uff09,backbone, neck, \u8f93\u51fa\uff08output\uff09\u56db\u90e8\u5206\u4ecb\u7ecdyoloV3\u7684\u7ed3\u6784\u3002 3.2.1 \u7f51\u7edc\u8f93\u5165 \uff08input\uff09 \u00b6 \u7f51\u7edc\u7684\u8f93\u5165\u5bf9\u56fe\u50cf\u7684\u8981\u6c42\u662f\u5927\u5c0f\u5fc5\u987b\u662f32\u7684\u500d\u6570\uff08V2,V4,V5\u4e2d\u90fd\u662f\u8fd9\u4e00\u8981\u6c42\uff09\u3002\u4e3b\u8981\u662f\u56e0\u4e3aYoloV3\u7684\u7f51\u7edc\u4e2d\uff0c\u6574\u4e2a\u7f51\u7edc\u7684\u6700\u5927\u7684\u4e0b\u91c7\u6837\u500d\u657032\uff0c\u6240\u4ee5Yolo\u7684\u8f93\u5165\u56fe\u50cf\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a32\u7684\u500d\u6570\uff0c\u5728V3\u7248\u672c\u4e2d\u9ed8\u8ba4\u662f416x416\u3002 3.2.2 \u9aa8\u5e72\u7f51\u7edc\uff08backbone\uff09 \u00b6 bacbone\u4e3b\u8981\u7528\u6765\u8fdb\u884c\u56fe\u50cf\u7279\u5f81\u63d0\u53d6\uff0cYOLO3\u91c7\u7528\u4e86Darknet-53\u7684\u7f51\u7edc\u7ed3\u6784\uff08\u542b\u670953\u4e2a\u5377\u79ef\u5c42\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e2aResX\u4e2d\u5305\u542b1+2\u00d7X\u4e2a\u5377\u79ef\u5c42\uff0c\u56e0\u6b64\u6574\u4e2a\u4e3b\u5e72\u7f51\u7edcBackbone\u4e2d\u4e00\u5171\u5305\u542b1+\uff081+2\u00d71\uff09+\uff081+2\u00d72\uff09+\uff081+2\u00d78\uff09+\uff081+2\u00d78\uff09+\uff081+2\u00d74\uff09=52\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2aFC\u5168\u8fde\u63a5\u5c42\uff0c\u5373\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2aDarknet53\u5206\u7c7b\u7f51\u7edc\u3002 \u5b83\u501f\u9274\u4e86\u6b8b\u5dee\u7f51\u7edcResNet\u7684\u505a\u6cd5\uff0c\u5728\u5c42\u4e4b\u95f4\u8bbe\u7f6e\u4e86shortcut\uff0c\u6765\u89e3\u51b3\u6df1\u5c42\u7f51\u7edc\u68af\u5ea6\u7684\u95ee\u9898\uff0cshortcut\u5982\u4e0b\u56fe\u6240\u793a\uff1a\u5305\u542b\u4e24\u4e2a\u5377\u79ef\u5c42\u548c\u4e00\u4e2ashortcut connections\u3002 3.2.3 neck\u90e8\u5206 \u00b6 yoloV3\u6700\u91cd\u8981\u7684\u4e00\u4e2a\u6539\u8fdb\u662f\u5f15\u5165\u4e86FPN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u878d\u5408\uff0c\u5e76\u83b7\u53d6\u591a\u79cd\u5c3a\u5ea6\u7684\u7279\u5f81\u56fe\uff0c\u8fdb\u800c\u5b8c\u6210\u591a\u5c3a\u5ea6\u68c0\u6d4b\uff0c\u5982\u4e0b\u6240\u793a\uff1a FPN\u7f51\u7edc\u4e0e\u5728FasterRCNN\u4e2d\u7684\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u662f\u5f53\u524d\u5c42\u7684feature map\u4f1a\u5bf9\u672a\u6765\u5c42\u7684feature map\u8fdb\u884c\u4e0a\u91c7\u6837\uff0c\u5e76\u52a0\u4ee5\u5229\u7528\u3002\u8fd9\u6837\uff0c\u5f53\u524d\u7684feature map\u5c31\u53ef\u4ee5\u83b7\u5f97\u201c\u672a\u6765\u201d\u5c42\u7684\u4fe1\u606f\uff0c\u628a\u4f4e\u9636\u7279\u5f81\u4e0e\u9ad8\u9636\u7279\u5f81\u5c31\u6709\u673a\u878d\u5408\u8d77\u6765\u4e86\uff0c\u63d0\u5347\u68c0\u6d4b\u7cbe\u5ea6\u3002 \u5728YOLOv3\u4e2d\uff0c\u5c31\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u76ee\u6807\u591a\u5c3a\u5ea6\u7684\u53d8\u6362\u7684\u3002FasterRCNN\u4e2d\u7684\u7279\u5f81\u878d\u5408\u4f7f\u7528\u7684\u662fADD\u7684\u65b9\u5f0f\uff0c\u800c\u5728V3\u4e2d\u91c7\u7528\u7684\u65b9\u5f0f\u662fconcat\uff0c\u5176\u4ed6\u7684\u5904\u7406\u4e0eFasterRCNN\u4e2d\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 3.2.4 \u8f93\u51fa\u90e8\u5206 \u00b6 anchor \u4e0eV2\u7248\u672c\u4e00\u6837\uff0cyoloV3\u91c7\u7528K-means\u805a\u7c7b\u5f97\u5230\u5148\u9a8c\u6846\u7684\u5c3a\u5bf8\uff0c\u4e3a\u6bcf\u79cd\u5c3a\u5ea6\u8bbe\u5b9a3\u79cd\u5148\u9a8c\u6846\uff0c\u603b\u5171\u805a\u7c7b\u51fa9\u79cd\u5c3a\u5bf8\u7684\u5148\u9a8c\u6846\u3002 \u5728COCO\u6570\u636e\u96c6\u8fd99\u4e2a\u5148\u9a8c\u6846\u662f\uff1a(10x13)\uff0c(16x30)\uff0c(33x23)\uff0c(30x61)\uff0c(62x45)\uff0c(59x119)\uff0c(116x90)\uff0c(156x198)\uff0c(373x326)\u3002\u5728\u6700\u5c0f\u7684(13x13)\u7279\u5f81\u56fe\u4e0a\uff08\u6709\u6700\u5927\u7684\u611f\u53d7\u91ce\uff09\u5e94\u7528\u8f83\u5927\u7684\u5148\u9a8c\u6846(116x90)\uff0c(156x198)\uff0c(373x326)\uff0c\u9002\u5408\u68c0\u6d4b\u8f83\u5927\u7684\u5bf9\u8c61\u3002\u4e2d\u7b49\u7684(26x26)\u7279\u5f81\u56fe\u4e0a\uff08\u4e2d\u7b49\u611f\u53d7\u91ce\uff09\u5e94\u7528\u4e2d\u7b49\u7684\u5148\u9a8c\u6846(30x61)\uff0c(62x45)\uff0c(59x119)\uff0c\u9002\u5408\u68c0\u6d4b\u4e2d\u7b49\u5927\u5c0f\u7684\u5bf9\u8c61\u3002\u8f83\u5927\u7684(52x52)\u7279\u5f81\u56fe\u4e0a\uff08\u8f83\u5c0f\u7684\u611f\u53d7\u91ce\uff09\u5e94\u7528,\u5176\u4e2d\u8f83\u5c0f\u7684\u5148\u9a8c\u6846(10x13)\uff0c(16x30)\uff0c(33x23)\uff0c\u9002\u5408\u68c0\u6d4b\u8f83\u5c0f\u7684\u5bf9\u8c61\u3002 \u76f4\u89c2\u4e0a\u611f\u53d79\u79cd\u5148\u9a8c\u6846\u7684\u5c3a\u5bf8\uff0c\u4e0b\u56fe\u4e2d\u84dd\u8272\u6846\u4e3a\u805a\u7c7b\u5f97\u5230\u7684\u5148\u9a8c\u6846\u3002\u9ec4\u8272\u6846\u5f0fground truth\uff0c\u7ea2\u6846\u662f\u5bf9\u8c61\u4e2d\u5fc3\u70b9\u6240\u5728\u7684\u7f51\u683c\u3002 \u8f93\u51fa\u7ed3\u679c YoloV3\u7684\u8f93\u51fa\u5f62\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8f93\u5165416\u00d7416\u00d73\u7684\u56fe\u50cf\uff0c\u901a\u8fc7darknet\u7f51\u7edc\u5f97\u5230\u4e09\u79cd\u4e0d\u540c\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u5c3a\u5ea6\u90fd\u5bf9\u5e94N\u4e2a\u901a\u9053\uff0c\u5305\u542b\u7740\u9884\u6d4b\u7684\u4fe1\u606f\uff1b \u6bcf\u4e2a\u7f51\u683c\u6bcf\u4e2a\u5c3a\u5bf8\u7684anchors\u7684\u9884\u6d4b\u7ed3\u679c\u3002 YOLOv3\u5171\u670913\u00d713\u00d73 + 26\u00d726\u00d73 + 52\u00d752\u00d73\u4e2a\u9884\u6d4b \u3002\u6bcf\u4e2a\u9884\u6d4b\u5bf9\u5e9485\u7ef4\uff0c\u5206\u522b\u662f4\uff08\u5750\u6807\u503c\u4e0eV2\u4e00\u6837\uff09\u30011\uff08\u7f6e\u4fe1\u5ea6\u5206\u6570\uff09\u300180\uff08coco\u7c7b\u522b\u6982\u7387\uff09\u3002 \u8f93\u51fa\u6982\u7387\u503c \u9884\u6d4b\u5bf9\u8c61\u7c7b\u522b\u65f6\u4e0d\u4f7f\u7528softmax\uff0c\u800c\u662f\u88ab\u66ff\u6362\u4e3a\u4e00\u4e2a1x1\u7684\u5377\u79ef\u5c42+logistic\u6fc0\u6d3b\u51fd\u6570\u7684\u7ed3\u6784\u3002\u4f7f\u7528softmax\u5c42\u7684\u65f6\u5019\u5176\u5b9e\u5df2\u7ecf\u5047\u8bbe\u6bcf\u4e2a\u8f93\u51fa\u4ec5\u5bf9\u5e94\u67d0\u4e00\u4e2a\u5355\u4e2a\u7684class\uff0c\u4f46\u662f\u5728\u67d0\u4e9bclass\u5b58\u5728\u91cd\u53e0\u60c5\u51b5\uff08\u4f8b\u5982woman\u548cperson\uff09\u7684\u6570\u636e\u96c6\u4e2d\uff0c\u4f7f\u7528softmax\u5c31\u4e0d\u80fd\u4f7f\u7f51\u7edc\u5bf9\u6570\u636e\u8fdb\u884c\u5f88\u597d\u7684\u9884\u6d4b\u3002 3.3 \u7f51\u7edc\u8bad\u7ec3 \u00b6 3.3.1\u8bad\u7ec3\u6837\u672c\u7684\u6784\u5efa \u00b6 \u6211\u4eec\u4ecb\u7ecd\u4e86\u7f51\u7edc\u7684\u8f93\u51fa\u662f\u5bf9anchor\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u7684\uff0c\u6240\u4ee5\u5728\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\u65f6\u4e5f\u9700\u8981\u5bf9anchor\u8fdb\u884c\u8bbe\u7f6e\uff1a\u6211\u4eec\u7684\u601d\u8def\u662f\u4e0e\u771f\u5b9e\u6846\u4ea4\u5e76\u6bd4\u8f83\u5927\u7684anchor\u5c31\u662f\u6b63\u6837\u672c\uff0c\u8d1f\u8d23\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\uff0c\u4e0e\u771f\u5b9e\u6846\u4ea4\u5e76\u6bd4\u5c0f\u7684anchor\u662f\u8d1f\u6837\u672c\uff0c\u8d1f\u6837\u672c\u4e0d\u8d1f\u8d23\u8fdb\u884c\u76ee\u6807\u9884\u6d4b\uff0c\u4e5f\u5c31\u662f\u80cc\u666f\uff0c\u90a3\u5728\u8fd9\u91cc\u6211\u4eec\u662f\u5982\u4f55\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\u7684\u5462\uff1f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6b63\u6837\u672c \uff1a\u9996\u5148\u8ba1\u7b97\u76ee\u6807\u4e2d\u5fc3\u70b9\u843d\u5728\u54ea\u4e2agrid\u4e0a\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2agrid\u5bf9\u5e94\u76843\u4e2a\u5148\u9a8c\u6846\uff08anchor\uff09\u548c\u76ee\u6807\u771f\u5b9e\u4f4d\u7f6e\u7684IOU\u503c\uff0c\u53d6IOU\u503c\u6700\u5927\u7684\u5148\u9a8c\u6846\u548c\u76ee\u6807\u5339\u914d\u3002\u90a3\u4e48\u8be5anchor \u5c31\u8d1f\u8d23\u9884\u6d4b\u8fd9\u4e2a\u76ee\u6807\uff0c\u90a3\u8fd9\u4e2aanchor\u5c31\u4f5c\u4e3a\u6b63\u6837\u672c\uff0c\u5c06\u5176\u7f6e\u4fe1\u5ea6\u8bbe\u4e3a1\uff0c\u5176\u4ed6\u7684\u76ee\u6807\u503c\u6839\u636e\u6807\u6ce8\u4fe1\u606f\u8bbe\u7f6e\u3002 \u8d1f\u6837\u672c \uff1a\u6240\u6709\u4e0d\u662f\u6b63\u6837\u672c\u7684anchor\u90fd\u662f\u8d1f\u6837\u672c\uff0c\u5c06\u5176\u7f6e\u4fe1\u5ea6\u8bbe\u4e3a0\uff0c\u53c2\u4e0e\u635f\u5931\u8ba1\u7b97\uff0c\u5176\u5b83\u7684\u503c\u4e0d\u53c2\u4e0e\u635f\u5931\u8ba1\u7b97\uff0c\u9ed8\u8ba4\u4e3a0\u3002 3.3.2 \u635f\u5931\u51fd\u6570 \u00b6 YoloV3\u7684\u635f\u5931\u51fd\u6570\u5206\u4e3a\u4e09\u90e8\u5206\uff1a box\u7684\u635f\u5931\uff1a \u53ea\u6709\u8d1f\u8d23\u68c0\u6d4b\u7684gridcell\u4e2d\u7684anchor\u624d\u4f1a\u8ba1\u5165\u635f\u5931,\u5bf9x,y,w,h\u5206\u522b\u6c42\u5747\u65b9\u8bef\u5dee \u7f6e\u4fe1\u5ea6\u7684\u635f\u5931 \u7f6e\u4fe1\u5ea6\u7684\u635f\u5931\u662f\u4e8c\u5206\u7c7b\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff0c\u6240\u6709\u7684box\u90fd\u8ba1\u5165\u635f\u5931\u8ba1\u7b97 \u5206\u7c7b\u7684\u635f\u5931\uff1a \u5206\u7c7b\u7684\u635f\u5931\u662f\u4e8c\u5206\u7c7b\u7684\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u53ea\u6709\u8d1f\u8d23\u68c0\u6d4b\u76ee\u6807\u7684\u624d\u8ba1\u7b97\u635f\u5931 \u6211\u4eec\u5c06\u8fd9\u4e09\u4e2a\u635f\u5931\u52a0\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u83b7\u53d6\u603b\u635f\u5931\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u3002 3.3.3 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e0e\u5176\u4ed6\u7f51\u7edc\u662f\u7c7b\u4f3c\u7684\uff0c\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8bad\u7ec3\u96c6\u7684\u6807\u6ce8\u4fe1\u606f\u83b7\u53d6\u6bcf\u5e45\u56fe\u50cf\u5bf9\u5e94\u7684\u76ee\u6807\u503c\uff0c\u5373\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\uff08\u4e09\u4e2a\u5c3a\u5ea6\u7684\u76ee\u6807\u503c\uff09\uff0c\u63a5\u4e0b\u6765\u5c06\u56fe\u50cf\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u8ba1\u7b97\u9884\u6d4b\u7ed3\u679c\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5dee\u5f02\uff08\u635f\u5931\u51fd\u6570\uff09\uff0c\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u53c2\u6570\u5373\u53ef\uff0c\u76f4\u5230\u635f\u5931\u6536\u655b\u5373\u53ef\u3002 3.4 \u6a21\u578b\u9884\u6d4b \u00b6 \u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u6211\u4eec\u5c06\u56fe\u7247resize\u6210416x416\u7684\u5927\u5c0f\uff0c\u9001\u5165\u5230yoloV3\u7f51\u7edc\u4e2d\uff0c\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e2d\u5305\u542b\u8fb9\u6846\u5750\u6807\uff084\u4e2a\u6570\u503c\uff09\uff0c\u8fb9\u6846\u7f6e\u4fe1\u5ea6\uff081\u4e2a\u6570\u503c\uff09\uff0c\u5bf9\u8c61\u7c7b\u522b\u7684\u6982\u7387\uff08\u5bf9\u4e8eCOCO\u6570\u636e\u96c6\uff0c\u670980\u79cd\u5bf9\u8c61\uff09\u3002\u6211\u4eec\u7b5b\u9009\u51fa\u7f6e\u4fe1\u5ea6\u8f83\u9ad8\u7684\u68c0\u6d4b\u7ed3\u679c\uff08>0.5\uff09\uff0c\u5728\u91c7\u7528NMS\uff08Non-maximal suppression\uff0c\u975e\u6781\u5927\u503c\u6291\u5236\uff09\u7b97\u6cd5\u9009\u51fa\u6700\u6709\u53ef\u80fd\u662f\u76ee\u6807\u7684\u7ed3\u679c\uff0c\u5c31\u5b8c\u6210\u4e86\u76ee\u6807\u7684\u68c0\u6d4b\u3002 \u603b\u7ed3 \u77e5\u9053yolo\u7f51\u7edc\u67b6\u6784\uff0c\u7406\u89e3\u5176\u8f93\u5165\u8f93\u51fa YOLO\u7684\u6574\u4e2a\u7ed3\u6784\u5c31\u662f\u8f93\u5165\u56fe\u7247\u7ecf\u8fc7\u795e\u7ecf\u7f51\u7edc\u7684\u53d8\u6362\u5f97\u5230\u4e00\u4e2a\u8f93\u51fa\u7684\u5f20\u91cf \u77e5\u9053yolo\u6a21\u578b\u7684\u8bad\u7ec3\u6837\u672c\u6784\u5efa\u7684\u65b9\u6cd5 \u5bf9\u4e8e\u539f\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7f51\u683cgrid\u90fd\u9700\u8981\u6784\u5efa\u4e00\u4e2a30\u7ef4\u7684\u5411\u91cf\uff1a\u5206\u7c7b\uff0c\u7f6e\u4fe1\u5ea6\uff0c\u56de\u5f52\u7684\u76ee\u6807\u503c \u7406\u89e3yolo\u6a21\u578b\u7684\u635f\u5931\u51fd\u6570 \u635f\u5931\u51fd\u6570\u5206\u4e3a3\u90e8\u5206\uff1a\u5206\u7c7b\u635f\u5931\uff0c\u56de\u5f52\u635f\u5931\uff0c\u7f6e\u4fe1\u5ea6\u635f\u5931 \u77e5\u9053yoloV2\u6a21\u578b\u7684\u6539\u8fdb\u65b9\u6cd5 \u4f7f\u7528\u4e86BN\u5c42\uff0c\u9ad8\u5206\u8fa8\u7387\u8bad\u7ec3\uff0c\u91c7\u7528Anchorbox\uff0c\u805a\u7c7b\u5f97\u5230anchorbox\u7684\u5c3a\u5bf8\uff0c\u6539\u8fdb\u8fb9\u754c\u6846\u9884\u6d4b\u7684\u65b9\u6cd5\uff0c\u7279\u5f81\u878d\u5408\uff0c\u591a\u5c3a\u5ea6\u8bad\u7ec3\uff0c\u7f51\u7edc\u6a21\u578b\u4f7f\u7528darknet19\uff0c\u5229\u7528imagenet\u6570\u636e\u96c6\u8bc6\u522b\u66f4\u591a\u7684\u76ee\u6807 yoloV3\u6a21\u578b\u6a21\u578b\u7ed3\u6784 \u6a21\u578b\u8f93\u5165\u56fe\u50cf\u5927\u5c0f\u662f32\u7684\u500d\u6570\uff0cbackbone\u662fdarknet53\uff0c\u4f7f\u7528FPN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u878d\u5408\uff1b\u8f93\u51fa\u5305\u542b3\u4e2a\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e2d\u5305\u542b\u8fb9\u6846\u5750\u6807\uff084\u4e2a\u6570\u503c\uff09\uff0c\u8fb9\u6846\u7f6e\u4fe1\u5ea6\uff081\u4e2a\u6570\u503c\uff09\uff0c\u5bf9\u8c61\u7c7b\u522b\u7684\u6982\u7387\uff08\u5bf9\u4e8eCOCO\u6570\u636e\u96c6\uff0c\u670980\u79cd\u5bf9\u8c61\uff09\u3002 yoloV3\u6a21\u578b\u7684\u8bad\u7ec3\u65b9\u5f0f \u77e5\u9053\u635f\u5931\u51fd\u6570\uff0c\u6b63\u8d1f\u6837\u672c\u8bbe\u7f6e\uff0c\u8fdb\u884c\u8bad\u7ec3\u3002","title":"2.5.yolo\u7cfb\u5217"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#25yolo","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053yolo\u7f51\u7edc\u67b6\u6784\uff0c\u7406\u89e3\u5176\u8f93\u5165\u8f93\u51fa \u77e5\u9053yolo\u6a21\u578b\u7684\u8bad\u7ec3\u6837\u672c\u6784\u5efa\u7684\u65b9\u6cd5 \u7406\u89e3yolo\u6a21\u578b\u7684\u635f\u5931\u51fd\u6570 \u77e5\u9053yoloV2\u6a21\u578b\u7684\u6539\u8fdb\u65b9\u6cd5 \u77e5\u9053yoloV3\u6a21\u578b\u7684\u7f51\u7edc\u7ed3\u6784\u53ca\u7f51\u7edc\u8f93\u51fa \u4e86\u89e3yoloV3\u6a21\u578b\u6b63\u8d1f\u6837\u672c\u8bbe\u8ba1\u548c\u635f\u5931\u51fd\u6570\u7684\u8ba1\u7b97 YOLO\u7cfb\u5217\u7b97\u6cd5\u662f\u4e00\u7c7b\u5178\u578b\u7684one-stage\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\uff0c\u5176\u5229\u7528anchor box\u5c06\u5206\u7c7b\u4e0e\u76ee\u6807\u5b9a\u4f4d\u7684\u56de\u5f52\u95ee\u9898\u7ed3\u5408\u8d77\u6765\uff0c\u4ece\u800c\u505a\u5230\u4e86\u9ad8\u6548\u3001\u7075\u6d3b\u548c\u6cdb\u5316\u6027\u80fd\u597d\uff0c\u6240\u4ee5\u5728\u5de5\u4e1a\u754c\u4e5f\u5341\u5206\u53d7\u6b22\u8fce\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecdYOLO \u7cfb\u5217\u7b97\u6cd5\u3002","title":"2.5.yolo\u7cfb\u5217"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#1yolo","text":"Yolo\u7b97\u6cd5\u91c7\u7528\u4e00\u4e2a\u5355\u72ec\u7684CNN\u6a21\u578b\u5b9e\u73b0end-to-end\u7684\u76ee\u6807\u68c0\u6d4b\uff0c\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u5229\u7528\u6574\u5f20\u56fe\u4f5c\u4e3a\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u76f4\u63a5\u5728\u8f93\u51fa\u5c42\u56de\u5f52 bounding box\uff08\u8fb9\u754c\u6846\uff09 \u7684\u4f4d\u7f6e\u53ca\u5176\u6240\u5c5e\u7684\u7c7b\u522b\uff0c\u6574\u4e2a\u7cfb\u7edf\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u9996\u5148\u5c06\u8f93\u5165\u56fe\u7247resize\u5230448x448\uff0c\u7136\u540e\u9001\u5165CNN\u7f51\u7edc\uff0c\u6700\u540e\u5904\u7406\u7f51\u7edc\u9884\u6d4b\u7ed3\u679c\u5f97\u5230\u68c0\u6d4b\u7684\u76ee\u6807\u3002\u76f8\u6bd4R-CNN\u7b97\u6cd5\uff0c\u5176\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u6846\u67b6\uff0c\u5176\u901f\u5ea6\u66f4\u5feb\u3002","title":"1.yolo\u7b97\u6cd5"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#11-yolo","text":"\u5728\u4ecb\u7ecdYolo\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u56de\u5fc6\u4e0bRCNN\u6a21\u578b\uff0cRCNN\u6a21\u578b\u63d0\u51fa\u4e86\u5019\u9009\u533a(Region Proposals)\u7684\u65b9\u6cd5\uff0c\u5148\u4ece\u56fe\u7247\u4e2d\u641c\u7d22\u51fa\u4e00\u4e9b\u53ef\u80fd\u5b58\u5728\u5bf9\u8c61\u7684\u5019\u9009\u533a\uff08Selective Search\uff09\uff0c\u5927\u69822000\u4e2a\u5de6\u53f3\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u5019\u9009\u533a\u8fdb\u884c\u5bf9\u8c61\u8bc6\u522b\uff0c\u4f46\u5904\u7406\u901f\u5ea6\u8f83\u6162\u3002 Yolo\u610f\u601d\u662fYou Only Look Once\uff0c\u5b83\u5e76\u6ca1\u6709\u771f\u6b63\u7684\u53bb\u6389\u5019\u9009\u533a\u57df\uff0c\u800c\u662f\u521b\u9020\u6027\u7684\u5c06\u5019\u9009\u533a\u548c\u76ee\u6807\u5206\u7c7b\u5408\u4e8c\u4e3a\u4e00\uff0c\u770b\u4e00\u773c\u56fe\u7247\u5c31\u80fd\u77e5\u9053\u6709\u54ea\u4e9b\u5bf9\u8c61\u4ee5\u53ca\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002 Yolo\u6a21\u578b\u91c7\u7528\u9884\u5b9a\u4e49\u9884\u6d4b\u533a\u57df\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u76ee\u6807\u68c0\u6d4b\uff0c\u5177\u4f53\u800c\u8a00\u662f\u5c06\u539f\u59cb\u56fe\u50cf\u5212\u5206\u4e3a 7x7=49 \u4e2a\u7f51\u683c\uff08grid\uff09\uff0c\u6bcf\u4e2a\u7f51\u683c\u5141\u8bb8\u9884\u6d4b\u51fa2\u4e2a\u8fb9\u6846\uff08bounding box\uff0c\u5305\u542b\u67d0\u4e2a\u5bf9\u8c61\u7684\u77e9\u5f62\u6846\uff09\uff0c\u603b\u5171 49x2=98 \u4e2abounding box\u3002\u6211\u4eec\u5c06\u5176\u7406\u89e3\u4e3a98\u4e2a\u9884\u6d4b\u533a\uff0c\u5f88\u7c97\u7565\u7684\u8986\u76d6\u4e86\u56fe\u7247\u7684\u6574\u4e2a\u533a\u57df\uff0c\u5c31\u5728\u8fd998\u4e2a\u9884\u6d4b\u533a\u4e2d\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\u3002 \u53ea\u8981\u5f97\u5230\u8fd998\u4e2a\u533a\u57df\u7684\u76ee\u6807\u5206\u7c7b\u548c\u56de\u5f52\u7ed3\u679c\uff0c\u518d\u8fdb\u884cNMS\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7684\u76ee\u6807\u68c0\u6d4b\u7ed3\u679c\u3002\u90a3\u5177\u4f53\u8981\u600e\u6837\u5b9e\u73b0\u5462\uff1f","title":"1.1 Yolo\u7b97\u6cd5\u601d\u60f3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#12-yolo","text":"YOLO\u7684\u7ed3\u6784\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u5355\u7eaf\u7684\u5377\u79ef\u3001\u6c60\u5316\u6700\u540e\u52a0\u4e86\u4e24\u5c42\u5168\u8fde\u63a5\uff0c\u4ece\u7f51\u7edc\u7ed3\u6784\u4e0a\u770b\uff0c\u4e0e\u524d\u9762\u4ecb\u7ecd\u7684CNN\u5206\u7c7b\u7f51\u7edc\u6ca1\u6709\u672c\u8d28\u7684\u533a\u522b\uff0c\u6700\u5927\u7684\u5dee\u5f02\u662f\u8f93\u51fa\u5c42\u7528\u7ebf\u6027\u51fd\u6570\u505a\u6fc0\u6d3b\u51fd\u6570\uff0c\u56e0\u4e3a\u9700\u8981\u9884\u6d4bbounding box\u7684\u4f4d\u7f6e\uff08\u6570\u503c\u578b\uff09\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5bf9\u8c61\u7684\u6982\u7387\u3002\u6240\u4ee5\u7c97\u7565\u6765\u8bf4\uff0cYOLO\u7684\u6574\u4e2a\u7ed3\u6784\u5c31\u662f\u8f93\u5165\u56fe\u7247\u7ecf\u8fc7\u795e\u7ecf\u7f51\u7edc\u7684\u53d8\u6362\u5f97\u5230\u4e00\u4e2a\u8f93\u51fa\u7684\u5f20\u91cf\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7f51\u7edc\u7ed3\u6784\u6bd4\u8f83\u7b80\u5355\uff0c\u91cd\u70b9\u662f\u6211\u4eec\u8981\u7406\u89e3\u7f51\u7edc\u8f93\u5165\u4e0e\u8f93\u51fa\u4e4b\u95f4\u7684\u5173\u7cfb\u3002","title":"1.2 Yolo\u7684\u7f51\u7edc\u7ed3\u6784"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#121","text":"\u7f51\u7edc\u7684\u8f93\u5165\u662f\u539f\u59cb\u56fe\u50cf\uff0c\u552f\u4e00\u7684\u8981\u6c42\u662f\u7f29\u653e\u5230448x448\u7684\u5927\u5c0f\u3002\u4e3b\u8981\u662f\u56e0\u4e3aYolo\u7684\u7f51\u7edc\u4e2d\uff0c\u5377\u79ef\u5c42\u6700\u540e\u63a5\u4e86\u4e24\u4e2a\u5168\u8fde\u63a5\u5c42\uff0c\u5168\u8fde\u63a5\u5c42\u662f\u8981\u6c42\u56fa\u5b9a\u5927\u5c0f\u7684\u5411\u91cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u6240\u4ee5Yolo\u7684\u8f93\u5165\u56fe\u50cf\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a448x448\u3002","title":"1.2.1 \u7f51\u7edc\u8f93\u5165"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#122","text":"\u7f51\u7edc\u7684\u8f93\u51fa\u5c31\u662f\u4e00\u4e2a7x7x30 \u7684\u5f20\u91cf\uff08tensor\uff09\u3002\u90a3\u8fd9\u4e2a\u8f93\u51fa\u7ed3\u679c\u6211\u4eec\u8981\u600e\u4e48\u7406\u89e3\u90a3\uff1f","title":"1.2.2 \u7f51\u7edc\u8f93\u51fa"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#17x7","text":"\u6839\u636eYOLO\u7684\u8bbe\u8ba1\uff0c\u8f93\u5165\u56fe\u50cf\u88ab\u5212\u5206\u4e3a 7x7 \u7684\u7f51\u683c\uff08grid\uff09\uff0c\u8f93\u51fa\u5f20\u91cf\u4e2d\u7684 7x7 \u5c31\u5bf9\u5e94\u7740\u8f93\u5165\u56fe\u50cf\u7684 7x7 \u7f51\u683c\u3002\u6216\u8005\u6211\u4eec\u628a 7x7x30 \u7684\u5f20\u91cf\u770b\u4f5c 7x7=49\u4e2a30\u7ef4\u7684\u5411\u91cf\uff0c\u4e5f\u5c31\u662f\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u7f51\u683c\u5bf9\u5e94\u8f93\u51fa\u4e00\u4e2a30\u7ef4\u7684\u5411\u91cf\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bd4\u5982\u8f93\u5165\u56fe\u50cf\u5de6\u4e0a\u89d2\u7684\u7f51\u683c\u5bf9\u5e94\u5230\u8f93\u51fa\u5f20\u91cf\u4e2d\u5de6\u4e0a\u89d2\u7684\u5411\u91cf\u3002","title":"1.7x7\u7f51\u683c"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#230","text":"30\u7ef4\u7684\u5411\u91cf\u5305\u542b\uff1a2\u4e2abbox\u7684\u4f4d\u7f6e\u548c\u7f6e\u4fe1\u5ea6\u4ee5\u53ca\u8be5\u7f51\u683c\u5c5e\u4e8e20\u4e2a\u7c7b\u522b\u7684\u6982\u7387 2\u4e2abounding box\u7684\u4f4d\u7f6e \u6bcf\u4e2abounding box\u9700\u89814\u4e2a\u6570\u503c\u6765\u8868\u793a\u5176\u4f4d\u7f6e\uff0c(Center_x,Center_y,width,height)\uff0c\u5373(bounding box\u7684\u4e2d\u5fc3\u70b9\u7684x\u5750\u6807\uff0cy\u5750\u6807\uff0cbounding box\u7684\u5bbd\u5ea6\uff0c\u9ad8\u5ea6)\uff0c2\u4e2abounding box\u5171\u9700\u89818\u4e2a\u6570\u503c\u6765\u8868\u793a\u5176\u4f4d\u7f6e\u3002 2\u4e2abounding box\u7684\u7f6e\u4fe1\u5ea6 bounding box\u7684\u7f6e\u4fe1\u5ea6 = \u8be5bounding box\u5185\u5b58\u5728\u5bf9\u8c61\u7684\u6982\u7387 * \u8be5bounding box\u4e0e\u8be5\u5bf9\u8c61\u5b9e\u9645bounding box\u7684IOU\uff0c\u7528\u516c\u5f0f\u8868\u793a\u5c31\u662f\uff1a Pr(Object)\u662fbounding box\u5185\u5b58\u5728\u5bf9\u8c61\u7684\u6982\u7387 20\u4e2a\u5bf9\u8c61\u5206\u7c7b\u7684\u6982\u7387 Yolo\u652f\u6301\u8bc6\u522b20\u79cd\u4e0d\u540c\u7684\u5bf9\u8c61\uff08\u4eba\u3001\u9e1f\u3001\u732b\u3001\u6c7d\u8f66\u3001\u6905\u5b50\u7b49\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u670920\u4e2a\u503c\u8868\u793a\u8be5\u7f51\u683c\u4f4d\u7f6e\u5b58\u5728\u4efb\u4e00\u79cd\u5bf9\u8c61\u7684\u6982\u7387.","title":"2.30\u7ef4\u5411\u91cf"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#13yolo","text":"\u5728\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u8bad\u7ec3\u6837\u672c\u548c\u8bbe\u8ba1\u635f\u5931\u51fd\u6570\uff0c\u624d\u80fd\u5229\u7528\u68af\u5ea6\u4e0b\u964d\u5bf9\u7f51\u7edc\u8fdb\u884c\u8bad\u7ec3\u3002","title":"1.3Yolo\u6a21\u578b\u7684\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#131","text":"\u5c06\u4e00\u5e45\u56fe\u7247\u8f93\u5165\u5230yolo\u6a21\u578b\u4e2d\uff0c\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u4e00\u4e2a7x7x30\u5f20\u91cf\uff0c\u6784\u5efa\u6807\u7b7elabel\u65f6\u5bf9\u4e8e\u539f\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7f51\u683cgrid\u90fd\u9700\u8981\u6784\u5efa\u4e00\u4e2a30\u7ef4\u7684\u5411\u91cf\u3002\u5bf9\u7167\u4e0b\u56fe\u6211\u4eec\u6765\u6784\u5efa\u76ee\u6807\u5411\u91cf\uff1a 20\u4e2a\u5bf9\u8c61\u5206\u7c7b\u7684\u6982\u7387 \u5bf9\u4e8e\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\uff0c\u5148\u627e\u5230\u5176\u4e2d\u5fc3\u70b9\u3002\u6bd4\u5982\u4e0a\u56fe\u4e2d\u81ea\u884c\u8f66\uff0c\u5176\u4e2d\u5fc3\u70b9\u5728\u9ec4\u8272\u5706\u70b9\u4f4d\u7f6e\uff0c\u4e2d\u5fc3\u70b9\u843d\u5728\u9ec4\u8272\u7f51\u683c\u5185\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9ec4\u8272\u7f51\u683c\u5bf9\u5e94\u768430\u7ef4\u5411\u91cf\u4e2d\uff0c\u81ea\u884c\u8f66\u7684\u6982\u7387\u662f1\uff0c\u5176\u5b83\u5bf9\u8c61\u7684\u6982\u7387\u662f0\u3002\u6240\u6709\u5176\u5b8348\u4e2a\u7f51\u683c\u768430\u7ef4\u5411\u91cf\u4e2d\uff0c\u8be5\u81ea\u884c\u8f66\u7684\u6982\u7387\u90fd\u662f0\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\"\u4e2d\u5fc3\u70b9\u6240\u5728\u7684\u7f51\u683c\u5bf9\u9884\u6d4b\u8be5\u5bf9\u8c61\u8d1f\u8d23\"\u3002\u72d7\u548c\u6c7d\u8f66\u7684\u5206\u7c7b\u6982\u7387\u4e5f\u662f\u540c\u6837\u7684\u65b9\u6cd5\u586b\u5199 2\u4e2abounding box\u7684\u4f4d\u7f6e \u8bad\u7ec3\u6837\u672c\u7684bbox\u4f4d\u7f6e\u5e94\u8be5\u586b\u5199\u5bf9\u8c61\u771f\u5b9e\u7684\u4f4d\u7f6ebbox\uff0c\u4f46\u4e00\u4e2a\u5bf9\u8c61\u5bf9\u5e94\u4e862\u4e2abounding box\uff0c\u8be5\u586b\u54ea\u4e00\u4e2a\u5462\uff1f\u9700\u8981\u6839\u636e\u7f51\u7edc\u8f93\u51fa\u7684bbox\u4e0e\u5bf9\u8c61\u5b9e\u9645bbox\u7684IOU\u6765\u9009\u62e9\uff0c\u6240\u4ee5\u8981\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u52a8\u6001\u51b3\u5b9a\u5230\u5e95\u586b\u54ea\u4e00\u4e2abbox\u3002 2\u4e2abounding box\u7684\u7f6e\u4fe1\u5ea6 \u9884\u6d4b\u7f6e\u4fe1\u5ea6\u7684\u516c\u5f0f\u4e3a\uff1a IOU_{pred}^{truth} IOU_{pred}^{truth} \u5229\u7528\u7f51\u7edc\u8f93\u51fa\u76842\u4e2abounding box\u4e0e\u5bf9\u8c61\u771f\u5b9ebounding box\u8ba1\u7b97\u51fa\u6765\u3002\u7136\u540e\u770b\u8fd92\u4e2abounding box\u7684IOU\uff0c\u54ea\u4e2a\u6bd4\u8f83\u5927\uff0c\u5c31\u7531\u54ea\u4e2abounding box\u6765\u8d1f\u8d23\u9884\u6d4b\u8be5\u5bf9\u8c61\u662f\u5426\u5b58\u5728\uff0c\u5373\u8be5bounding box\u7684Pr(Object)=1\uff0c\u540c\u65f6\u5bf9\u8c61\u771f\u5b9ebounding box\u7684\u4f4d\u7f6e\u4e5f\u5c31\u586b\u5165\u8be5bounding box\u3002\u53e6\u4e00\u4e2a\u4e0d\u8d1f\u8d23\u9884\u6d4b\u7684bounding box\u7684Pr(Object)=0\u3002 \u4e0a\u56fe\u4e2d\u81ea\u884c\u8f66\u6240\u5728\u7684grid\u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"1.3.1\u8bad\u7ec3\u6837\u672c\u7684\u6784\u5efa"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#132","text":"\u635f\u5931\u5c31\u662f\u7f51\u7edc\u5b9e\u9645\u8f93\u51fa\u503c\u4e0e\u6837\u672c\u6807\u7b7e\u503c\u4e4b\u95f4\u7684\u504f\u5dee\uff1a yolo\u7ed9\u51fa\u7684\u635f\u5931\u51fd\u6570\uff1a \u6ce8\uff1a\u5176\u4e2d 1_{i}^{obj} 1_{i}^{obj} \u8868\u793a\u76ee\u6807\u662f\u5426\u51fa\u73b0\u5728\u7f51\u683c\u5355\u5143i\u4e2d\uff0c 1_{ij}^{obj} 1_{ij}^{obj} \u8868\u793a\u5355\u5143\u683ci\u4e2d\u7684\u7b2cj\u4e2a\u8fb9\u754c\u6846\u9884\u6d4b\u5668\u8d1f\u8d23\u8be5\u9884\u6d4b\uff0cYOLO\u8bbe\u7f6e \\lambda_{coord} = 5 \\lambda_{coord} = 5 \u6765\u8c03\u9ad8\u4f4d\u7f6e\u8bef\u5dee\u7684\u6743\u91cd\uff0c \\lambda_{noobj} = 0.5 \\lambda_{noobj} = 0.5 \u5373\u8c03\u4f4e\u4e0d\u5b58\u5728\u5bf9\u8c61\u7684bounding box\u7684\u7f6e\u4fe1\u5ea6\u8bef\u5dee\u7684\u6743\u91cd\u3002","title":"1.3.2 \u635f\u5931\u51fd\u6570"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#133","text":"Yolo\u5148\u4f7f\u7528ImageNet\u6570\u636e\u96c6\u5bf9\u524d20\u5c42\u5377\u79ef\u7f51\u7edc\u8fdb\u884c\u9884\u8bad\u7ec3\uff0c\u7136\u540e\u4f7f\u7528\u5b8c\u6574\u7684\u7f51\u7edc\uff0c\u5728PASCAL VOC\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u5bf9\u8c61\u8bc6\u522b\u548c\u5b9a\u4f4d\u7684\u8bad\u7ec3\u3002 Yolo\u7684\u6700\u540e\u4e00\u5c42\u91c7\u7528\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff0c\u5176\u5b83\u5c42\u90fd\u662fLeaky ReLU\u3002\u8bad\u7ec3\u4e2d\u91c7\u7528\u4e86drop out\u548c\u6570\u636e\u589e\u5f3a\uff08data augmentation\uff09\u6765\u9632\u6b62\u8fc7\u62df\u5408.","title":"1.3.3 \u6a21\u578b\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#14","text":"\u5c06\u56fe\u7247resize\u6210448x448\u7684\u5927\u5c0f\uff0c\u9001\u5165\u5230yolo\u7f51\u7edc\u4e2d\uff0c\u8f93\u51fa\u4e00\u4e2a 7x7x30 \u7684\u5f20\u91cf\uff08tensor\uff09\u6765\u8868\u793a\u56fe\u7247\u4e2d\u6240\u6709\u7f51\u683c\u5305\u542b\u7684\u5bf9\u8c61\uff08\u6982\u7387\uff09\u4ee5\u53ca\u8be5\u5bf9\u8c61\u53ef\u80fd\u76842\u4e2a\u4f4d\u7f6e\uff08bounding box\uff09\u548c\u53ef\u4fe1\u7a0b\u5ea6\uff08\u7f6e\u4fe1\u5ea6\uff09\u3002\u5728\u91c7\u7528NMS\uff08Non-maximal suppression\uff0c\u975e\u6781\u5927\u503c\u6291\u5236\uff09\u7b97\u6cd5\u9009\u51fa\u6700\u6709\u53ef\u80fd\u662f\u76ee\u6807\u7684\u7ed3\u679c\u3002","title":"1.4 \u6a21\u578b\u9884\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#15-yolo","text":"\u4f18\u70b9 \u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u5904\u7406\u901f\u5ea6\u53ef\u4ee5\u8fbe\u523045fps\uff0c\u5176\u5feb\u901f\u7248\u672c\uff08\u7f51\u7edc\u8f83\u5c0f\uff09\u751a\u81f3\u53ef\u4ee5\u8fbe\u5230155fps\u3002 \u8bad\u7ec3\u548c\u9884\u6d4b\u53ef\u4ee5\u7aef\u5230\u7aef\u7684\u8fdb\u884c\uff0c\u975e\u5e38\u7b80\u4fbf\u3002 \u7f3a\u70b9 \u51c6\u786e\u7387\u4f1a\u6253\u6298\u6263 \u5bf9\u4e8e\u5c0f\u76ee\u6807\u548c\u9760\u7684\u5f88\u8fd1\u7684\u76ee\u6807\u68c0\u6d4b\u6548\u679c\u5e76\u4e0d\u597d","title":"1.5 yolo\u603b\u7ed3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#2yolov2","text":"YOLOv2\u76f8\u5bf9v1\u7248\u672c\uff0c\u5728\u7ee7\u7eed\u4fdd\u6301\u5904\u7406\u901f\u5ea6\u7684\u57fa\u7840\u4e0a\uff0c\u4ece\u9884\u6d4b\u66f4\u51c6\u786e\uff08Better\uff09\uff0c\u901f\u5ea6\u66f4\u5feb\uff08Faster\uff09\uff0c\u8bc6\u522b\u5bf9\u8c61\u66f4\u591a\uff08Stronger\uff09\u8fd9\u4e09\u4e2a\u65b9\u9762\u8fdb\u884c\u4e86\u6539\u8fdb\u3002\u5176\u4e2d\u8bc6\u522b\u66f4\u591a\u5bf9\u8c61\u4e5f\u5c31\u662f\u6269\u5c55\u5230\u80fd\u591f\u68c0\u6d4b9000\u79cd\u4e0d\u540c\u5bf9\u8c61\uff0c\u79f0\u4e4b\u4e3aYOLO9000\u3002 \u4e0b\u9762\u6211\u4eec\u770b\u4e0byoloV2\u7684\u90fd\u505a\u4e86\u54ea\u4e9b\u6539\u8fdb\uff1f","title":"2.yoloV2"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#21-better","text":"","title":"2.1 \u9884\u6d4b\u66f4\u51c6\u786e\uff08better\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#211-batch-normalization","text":"\u6279\u6807\u51c6\u5316\u6709\u52a9\u4e8e\u89e3\u51b3\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u7684\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8\u95ee\u9898\uff0c\u964d\u4f4e\u5bf9\u4e00\u4e9b\u8d85\u53c2\u6570\u7684\u654f\u611f\u6027\uff0c\u5e76\u4e14\u6bcf\u4e2abatch\u5206\u522b\u8fdb\u884c\u5f52\u4e00\u5316\u7684\u65f6\u5019\uff0c\u8d77\u5230\u4e86\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u6548\u679c\uff0c\u4ece\u800c\u80fd\u591f\u83b7\u5f97\u66f4\u597d\u7684\u6536\u655b\u901f\u5ea6\u548c\u6536\u655b\u6548\u679c\u3002\u5728yoloV2\u4e2d\u5377\u79ef\u540e\u5168\u90e8\u52a0\u5165Batch Normalization\uff0c\u7f51\u7edc\u4f1a\u63d0\u53472%\u7684mAP\u3002","title":"2.1.1 batch normalization"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#212","text":"YOLO v1\u4f7f\u7528ImageNet\u7684\u56fe\u50cf\u5206\u7c7b\u6837\u672c\u91c7\u7528 224x224 \u4f5c\u4e3a\u8f93\u5165\uff0c\u6765\u8bad\u7ec3CNN\u5377\u79ef\u5c42\u3002\u7136\u540e\u5728\u8bad\u7ec3\u5bf9\u8c61\u68c0\u6d4b\u65f6\uff0c\u68c0\u6d4b\u7528\u7684\u56fe\u50cf\u6837\u672c\u91c7\u7528\u66f4\u9ad8\u5206\u8fa8\u7387\u7684 448x448 \u7684\u56fe\u50cf\u4f5c\u4e3a\u8f93\u5165\u3002\u4f46\u8fd9\u6837\u5207\u6362\u5bf9\u6a21\u578b\u6027\u80fd\u6709\u4e00\u5b9a\u5f71\u54cd\u3002 YOLOV2\u5728\u91c7\u7528 224x224 \u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u6a21\u578b\u9884\u8bad\u7ec3\u540e\uff0c\u518d\u91c7\u7528 448x448 \u7684\u9ad8\u5206\u8fa8\u7387\u6837\u672c\u5bf9\u5206\u7c7b\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\uff0810\u4e2aepoch\uff09\uff0c\u4f7f\u7f51\u7edc\u7279\u5f81\u9010\u6e10\u9002\u5e94 448x448 \u7684\u5206\u8fa8\u7387\u3002\u7136\u540e\u518d\u4f7f\u7528 448x448 \u7684\u68c0\u6d4b\u6837\u672c\u8fdb\u884c\u8bad\u7ec3\uff0c\u7f13\u89e3\u4e86\u5206\u8fa8\u7387\u7a81\u7136\u5207\u6362\u9020\u6210\u7684\u5f71\u54cd\u3002 \u4f7f\u7528\u8be5\u6280\u5de7\u540e\u7f51\u7edc\u7684mAP\u63d0\u5347\u4e86\u7ea64%\u3002","title":"2.1.2 \u4f7f\u7528\u9ad8\u5206\u8fa8\u7387\u56fe\u50cf\u5fae\u8c03\u5206\u7c7b\u6a21\u578b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#213-anchor-boxes","text":"YOLO1\u5e76\u6ca1\u6709\u91c7\u7528\u5148\u9a8c\u6846\uff0c\u5e76\u4e14\u6bcf\u4e2agrid\u53ea\u9884\u6d4b\u4e24\u4e2abounding box\uff0c\u6574\u4e2a\u56fe\u50cf98\u4e2a\u3002YOLO2\u5982\u679c\u6bcf\u4e2agrid\u91c7\u75285\u4e2a\u5148\u9a8c\u6846\uff0c\u603b\u5171\u670913x13x5=845\u4e2a\u5148\u9a8c\u6846\u3002\u901a\u8fc7\u5f15\u5165anchor boxes\uff0c\u4f7f\u5f97\u9884\u6d4b\u7684box\u6570\u91cf\u66f4\u591a\uff0813x13xn\uff09\u3002","title":"2.1.3 \u91c7\u7528Anchor Boxes"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#224-anchor","text":"Faster-rcnn\u9009\u62e9\u7684anchor\u6bd4\u4f8b\u90fd\u662f\u624b\u52a8\u6307\u5b9a\u7684\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u5b8c\u5168\u9002\u5408\u6570\u636e\u96c6\u3002YOLO2\u5c1d\u8bd5\u7edf\u8ba1\u51fa\u66f4\u7b26\u5408\u6837\u672c\u4e2d\u5bf9\u8c61\u5c3a\u5bf8\u7684\u5148\u9a8c\u6846\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u7f51\u7edc\u5fae\u8c03\u5148\u9a8c\u6846\u5230\u5b9e\u9645\u4f4d\u7f6e\u7684\u96be\u5ea6\u3002YOLO2\u7684\u505a\u6cd5\u662f\u5bf9\u8bad\u7ec3\u96c6\u4e2d\u6807\u6ce8\u7684\u8fb9\u6846\u8fdb\u884c\u805a\u7c7b\u5206\u6790\uff0c\u4ee5\u5bfb\u627e\u5c3d\u53ef\u80fd\u5339\u914d\u6837\u672c\u7684\u8fb9\u6846\u5c3a\u5bf8\u3002 YoloV2\u9009\u62e9\u4e86\u805a\u7c7b\u7684\u4e94\u79cd\u5c3a\u5bf8\u6700\u4e3aanchor box\u3002","title":"2.2.4 \u805a\u7c7b\u63d0\u53d6anchor\u5c3a\u5ea6"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#215","text":"Yolov2\u4e2d\u5c06\u8fb9\u6846\u7684\u7ed3\u679c\u7ea6\u675f\u5728\u7279\u5b9a\u7684\u7f51\u683c\u4e2d\uff1a \u5176\u4e2d\uff0c b_x,b_y,b_w,b_h b_x,b_y,b_w,b_h \u662f\u9884\u6d4b\u8fb9\u6846\u7684\u4e2d\u5fc3\u548c\u5bbd\u9ad8\u3002 Pr(object)\u2217IOU(b,object) Pr(object)\u2217IOU(b,object) \u662f\u9884\u6d4b\u8fb9\u6846\u7684\u7f6e\u4fe1\u5ea6\uff0cYOLO1\u662f\u76f4\u63a5\u9884\u6d4b\u7f6e\u4fe1\u5ea6\u7684\u503c\uff0c\u8fd9\u91cc\u5bf9\u9884\u6d4b\u53c2\u6570 t_o t_o \u8fdb\u884c\u03c3\u53d8\u6362\u540e\u4f5c\u4e3a\u7f6e\u4fe1\u5ea6\u7684\u503c\u3002 c_x,c_y c_x,c_y \u662f\u5f53\u524d\u7f51\u683c\u5de6\u4e0a\u89d2\u5230\u56fe\u50cf\u5de6\u4e0a\u89d2\u7684\u8ddd\u79bb\uff0c\u8981\u5148\u5c06\u7f51\u683c\u5927\u5c0f\u5f52\u4e00\u5316\uff0c\u5373\u4ee4\u4e00\u4e2a\u7f51\u683c\u7684\u5bbd=1\uff0c\u9ad8=1\u3002 p_w,p_h p_w,p_h \u662f\u5148\u9a8c\u6846\u7684\u5bbd\u548c\u9ad8\u3002 \u03c3\u662fsigmoid\u51fd\u6570\u3002 t_x,t_y,t_w,t_h,t_o t_x,t_y,t_w,t_h,t_o \u662f\u8981\u5b66\u4e60\u7684\u53c2\u6570\uff0c\u5206\u522b\u7528\u4e8e\u9884\u6d4b\u8fb9\u6846\u7684\u4e2d\u5fc3\u548c\u5bbd\u9ad8\uff0c\u4ee5\u53ca\u7f6e\u4fe1\u5ea6\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7531\u4e8e\u03c3\u51fd\u6570\u5c06 t_x,t_y t_x,t_y \u7ea6\u675f\u5728(0,1)\u8303\u56f4\u5185\uff0c\u9884\u6d4b\u8fb9\u6846\u7684\u84dd\u8272\u4e2d\u5fc3\u70b9\u88ab\u7ea6\u675f\u5728\u84dd\u8272\u80cc\u666f\u7684\u7f51\u683c\u5185\u3002\u7ea6\u675f\u8fb9\u6846\u4f4d\u7f6e\u4f7f\u5f97\u6a21\u578b\u66f4\u5bb9\u6613\u5b66\u4e60\uff0c\u4e14\u9884\u6d4b\u66f4\u4e3a\u7a33\u5b9a\u3002 \u5047\u8bbe\u7f51\u7edc\u9884\u6d4b\u503c\u4e3a\uff1a anchor\u6846\u4e3a\uff1a \u5219\u76ee\u6807\u5728\u7279\u5f81\u56fe\u4e2d\u7684\u4f4d\u7f6e\uff1a \u5728\u539f\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6e\uff1a","title":"2.1.5 \u8fb9\u6846\u4f4d\u7f6e\u7684\u9884\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#216","text":"\u56fe\u50cf\u4e2d\u5bf9\u8c61\u4f1a\u6709\u5927\u6709\u5c0f\uff0c\u8f93\u5165\u56fe\u50cf\u7ecf\u8fc7\u591a\u5c42\u7f51\u7edc\u63d0\u53d6\u7279\u5f81\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u4e2d\uff0c\u8f83\u5c0f\u7684\u5bf9\u8c61\u53ef\u80fd\u7279\u5f81\u5df2\u7ecf\u4e0d\u660e\u663e\u751a\u81f3\u88ab\u5ffd\u7565\u6389\u4e86\u3002\u4e3a\u4e86\u66f4\u597d\u7684\u68c0\u6d4b\u51fa\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5bf9\u8c61\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u9700\u8981\u4fdd\u7559\u4e00\u4e9b\u66f4\u7ec6\u8282\u7684\u4fe1\u606f\u3002 YOLO2\u5f15\u5165\u4e00\u79cd\u79f0\u4e3apassthrough\u5c42\u7684\u65b9\u6cd5\u5728\u7279\u5f81\u56fe\u4e2d\u4fdd\u7559\u4e00\u4e9b\u7ec6\u8282\u4fe1\u606f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u6700\u540e\u4e00\u4e2apooling\u4e4b\u524d\uff0c\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u662f26x26x512\uff0c\u5c06\u51761\u62c64\uff0c\u76f4\u63a5\u4f20\u9012\uff08passthrough\uff09\u5230pooling\u540e\uff08\u5e76\u4e14\u53c8\u7ecf\u8fc7\u4e00\u7ec4\u5377\u79ef\uff09\u7684\u7279\u5f81\u56fe\uff0c\u4e24\u8005\u53e0\u52a0\u5230\u4e00\u8d77\u4f5c\u4e3a\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u3002 \u5177\u4f53\u7684\u62c6\u5206\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a","title":"2.1.6 \u7ec6\u7c92\u5ea6\u7279\u5f81\u878d\u5408"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#217","text":"YOLO2\u4e2d\u6ca1\u6709\u5168\u8fde\u63a5\u5c42\uff0c\u53ef\u4ee5\u8f93\u5165\u4efb\u4f55\u5c3a\u5bf8\u7684\u56fe\u50cf\u3002\u56e0\u4e3a\u6574\u4e2a\u7f51\u7edc\u4e0b\u91c7\u6837\u500d\u6570\u662f32\uff0c\u91c7\u7528\u4e86{320,352,...,608}\u7b4910\u79cd\u8f93\u5165\u56fe\u50cf\u7684\u5c3a\u5bf8\uff0c\u8fd9\u4e9b\u5c3a\u5bf8\u7684\u8f93\u5165\u56fe\u50cf\u5bf9\u5e94\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u5bbd\u548c\u9ad8\u662f{10,11,...19}\u3002\u8bad\u7ec3\u65f6\u6bcf10\u4e2abatch\u5c31\u968f\u673a\u66f4\u6362\u4e00\u79cd\u5c3a\u5bf8\uff0c\u4f7f\u7f51\u7edc\u80fd\u591f\u9002\u5e94\u5404\u79cd\u5927\u5c0f\u7684\u5bf9\u8c61\u68c0\u6d4b\u3002","title":"2.1.7 \u591a\u5c3a\u5ea6\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#22-faster","text":"yoloV2\u63d0\u51fa\u4e86Darknet-19\uff08\u670919\u4e2a\u5377\u79ef\u5c42\u548c5\u4e2aMaxPooling\u5c42\uff09\u7f51\u7edc\u7ed3\u6784\u4f5c\u4e3a\u7279\u5f81\u63d0\u53d6\u7f51\u7edc\u3002DarkNet-19\u6bd4VGG-16\u5c0f\u4e00\u4e9b\uff0c\u7cbe\u5ea6\u4e0d\u5f31\u4e8eVGG-16\uff0c\u4f46\u6d6e\u70b9\u8fd0\u7b97\u91cf\u51cf\u5c11\u5230\u7ea6\u2155\uff0c\u4ee5\u4fdd\u8bc1\u66f4\u5feb\u7684\u8fd0\u7b97\u901f\u5ea6\u3002 yoloV2\u7684\u7f51\u7edc\u4e2d\u53ea\u6709\u5377\u79ef+pooling\uff0c\u4ece416x416x3 \u53d8\u6362\u5230 13x13x5x25\u3002\u589e\u52a0\u4e86batch normalization\uff0c\u589e\u52a0\u4e86\u4e00\u4e2apassthrough\u5c42\uff0c\u53bb\u6389\u4e86\u5168\u8fde\u63a5\u5c42\uff0c\u4ee5\u53ca\u91c7\u7528\u4e865\u4e2a\u5148\u9a8c\u6846,\u7f51\u7edc\u7684\u8f93\u51fa\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"2.2 \u901f\u5ea6\u66f4\u5feb\uff08Faster\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#23","text":"VOC\u6570\u636e\u96c6\u53ef\u4ee5\u68c0\u6d4b20\u79cd\u5bf9\u8c61\uff0c\u4f46\u5b9e\u9645\u4e0a\u5bf9\u8c61\u7684\u79cd\u7c7b\u975e\u5e38\u591a\uff0c\u53ea\u662f\u7f3a\u5c11\u76f8\u5e94\u7684\u7528\u4e8e\u5bf9\u8c61\u68c0\u6d4b\u7684\u8bad\u7ec3\u6837\u672c\u3002YOLO2\u5c1d\u8bd5\u5229\u7528ImageNet\u975e\u5e38\u5927\u91cf\u7684\u5206\u7c7b\u6837\u672c\uff0c\u8054\u5408COCO\u7684\u5bf9\u8c61\u68c0\u6d4b\u6570\u636e\u96c6\u4e00\u8d77\u8bad\u7ec3\uff0c\u4f7f\u5f97YOLO2\u5373\u4f7f\u6ca1\u6709\u5b66\u8fc7\u5f88\u591a\u5bf9\u8c61\u7684\u68c0\u6d4b\u6837\u672c\uff0c\u4e5f\u80fd\u68c0\u6d4b\u51fa\u8fd9\u4e9b\u5bf9\u8c61\u3002","title":"2.3 \u8bc6\u522b\u5bf9\u8c61\u66f4\u591a"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#3yolov3","text":"yoloV3\u4ee5V1\uff0cV2\u4e3a\u57fa\u7840\u8fdb\u884c\u7684\u6539\u8fdb\uff0c\u4e3b\u8981\u6709\uff1a\u5229\u7528\u591a\u5c3a\u5ea6\u7279\u5f81\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\uff1b\u5148\u9a8c\u6846\u66f4\u4e30\u5bcc\uff1b\u8c03\u6574\u4e86\u7f51\u7edc\u7ed3\u6784\uff1b\u5bf9\u8c61\u5206\u7c7b\u4f7f\u7528logistic\u4ee3\u66ff\u4e86softmax,\u66f4\u9002\u7528\u4e8e\u591a\u6807\u7b7e\u5206\u7c7b\u4efb\u52a1\u3002","title":"3.yoloV3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#31","text":"YOLOv3\u662fYOLO (You Only Look Once)\u7cfb\u5217\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7684\u7b2c\u4e09\u7248\uff0c\u76f8\u6bd4\u4e4b\u524d\u7684\u7b97\u6cd5\uff0c\u5c24\u5176\u662f\u9488\u5bf9\u5c0f\u76ee\u6807\uff0c\u7cbe\u5ea6\u6709\u663e\u8457\u63d0\u5347\u3002 yoloV3\u7684\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5e45\u8f93\u5165\u56fe\u50cf\uff0cYOLOv3\u4f1a\u9884\u6d4b\u4e09\u4e2a\u4e0d\u540c\u5c3a\u5ea6\u7684\u8f93\u51fa\uff0c\u76ee\u7684\u662f\u68c0\u6d4b\u51fa\u4e0d\u540c\u5927\u5c0f\u7684\u76ee\u6807\u3002","title":"3.1\u7b97\u6cd5\u7b80\u4ecb"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#32","text":"yoloV3\u7684\u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a\u6574\u4e2av3\u7ed3\u6784\u91cc\u9762\uff0c\u6ca1\u6709\u6c60\u5316\u5c42\u548c\u5168\u8fde\u63a5\u5c42\uff0c\u7f51\u7edc\u7684\u4e0b\u91c7\u6837\u662f\u901a\u8fc7\u8bbe\u7f6e\u5377\u79ef\u7684\u6b65\u957f\u4e3a2\u6765\u8fbe\u5230\u7684\uff0c\u6bcf\u5f53\u901a\u8fc7\u8fd9\u4e2a\u5377\u79ef\u5c42\u4e4b\u540e\u56fe\u50cf\u7684\u5c3a\u5bf8\u5c31\u4f1a\u51cf\u5c0f\u5230\u4e00\u534a\u3002 \u57fa\u672c\u7ec4\u4ef6\uff1a\u84dd\u8272\u65b9\u6846\u5185\u90e8\u5206 1\u3001CBL\uff1aYolov3\u7f51\u7edc\u7ed3\u6784\u4e2d\u7684\u6700\u5c0f\u7ec4\u4ef6\uff0c\u7531Conv+Bn+Leaky_relu\u6fc0\u6d3b\u51fd\u6570\u4e09\u8005\u7ec4\u6210\u3002 2\u3001Res unit\uff1a\u501f\u9274Resnet\u7f51\u7edc\u4e2d\u7684\u6b8b\u5dee\u7ed3\u6784\uff0c\u8ba9\u7f51\u7edc\u53ef\u4ee5\u6784\u5efa\u7684\u66f4\u6df1\u3002 3\u3001ResX\uff1a\u7531\u4e00\u4e2aCBL\u548cX\u4e2a\u6b8b\u5dee\u7ec4\u4ef6\u6784\u6210\uff0c\u662fYolov3\u4e2d\u7684\u5927\u7ec4\u4ef6\u3002\u6bcf\u4e2aRes\u6a21\u5757\u524d\u9762\u7684CBL\u90fd\u8d77\u5230\u4e0b\u91c7\u6837\u7684\u4f5c\u7528\uff0c\u56e0\u6b64\u7ecf\u8fc75\u6b21Res\u6a21\u5757\u540e\uff0c\u5f97\u5230\u7684\u7279\u5f81\u56fe\u662f416->208->104->52->26->13\u5927\u5c0f\u3002 \u5176\u4ed6\u57fa\u7840\u64cd\u4f5c\uff1a 1\u3001Concat\uff1a\u5f20\u91cf\u62fc\u63a5\uff0c\u4f1a\u6269\u5145\u4e24\u4e2a\u5f20\u91cf\u7684\u7ef4\u5ea6\uff0c\u4f8b\u598226\u00d726\u00d7256\u548c26\u00d726\u00d7512\u4e24\u4e2a\u5f20\u91cf\u62fc\u63a5\uff0c\u7ed3\u679c\u662f26\u00d726\u00d7768\u3002 2\u3001Add\uff1a\u5f20\u91cf\u76f8\u52a0\uff0c\u5f20\u91cf\u76f4\u63a5\u76f8\u52a0\uff0c\u4e0d\u4f1a\u6269\u5145\u7ef4\u5ea6\uff0c\u4f8b\u5982104\u00d7104\u00d7128\u548c104\u00d7104\u00d7128\u76f8\u52a0\uff0c\u7ed3\u679c\u8fd8\u662f104\u00d7104\u00d7128\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u8f93\u5165\uff08input\uff09,backbone, neck, \u8f93\u51fa\uff08output\uff09\u56db\u90e8\u5206\u4ecb\u7ecdyoloV3\u7684\u7ed3\u6784\u3002","title":"3.2 \u7f51\u7edc\u7ed3\u6784"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#321-input","text":"\u7f51\u7edc\u7684\u8f93\u5165\u5bf9\u56fe\u50cf\u7684\u8981\u6c42\u662f\u5927\u5c0f\u5fc5\u987b\u662f32\u7684\u500d\u6570\uff08V2,V4,V5\u4e2d\u90fd\u662f\u8fd9\u4e00\u8981\u6c42\uff09\u3002\u4e3b\u8981\u662f\u56e0\u4e3aYoloV3\u7684\u7f51\u7edc\u4e2d\uff0c\u6574\u4e2a\u7f51\u7edc\u7684\u6700\u5927\u7684\u4e0b\u91c7\u6837\u500d\u657032\uff0c\u6240\u4ee5Yolo\u7684\u8f93\u5165\u56fe\u50cf\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a32\u7684\u500d\u6570\uff0c\u5728V3\u7248\u672c\u4e2d\u9ed8\u8ba4\u662f416x416\u3002","title":"3.2.1 \u7f51\u7edc\u8f93\u5165 \uff08input\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#322-backbone","text":"bacbone\u4e3b\u8981\u7528\u6765\u8fdb\u884c\u56fe\u50cf\u7279\u5f81\u63d0\u53d6\uff0cYOLO3\u91c7\u7528\u4e86Darknet-53\u7684\u7f51\u7edc\u7ed3\u6784\uff08\u542b\u670953\u4e2a\u5377\u79ef\u5c42\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e2aResX\u4e2d\u5305\u542b1+2\u00d7X\u4e2a\u5377\u79ef\u5c42\uff0c\u56e0\u6b64\u6574\u4e2a\u4e3b\u5e72\u7f51\u7edcBackbone\u4e2d\u4e00\u5171\u5305\u542b1+\uff081+2\u00d71\uff09+\uff081+2\u00d72\uff09+\uff081+2\u00d78\uff09+\uff081+2\u00d78\uff09+\uff081+2\u00d74\uff09=52\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2aFC\u5168\u8fde\u63a5\u5c42\uff0c\u5373\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2aDarknet53\u5206\u7c7b\u7f51\u7edc\u3002 \u5b83\u501f\u9274\u4e86\u6b8b\u5dee\u7f51\u7edcResNet\u7684\u505a\u6cd5\uff0c\u5728\u5c42\u4e4b\u95f4\u8bbe\u7f6e\u4e86shortcut\uff0c\u6765\u89e3\u51b3\u6df1\u5c42\u7f51\u7edc\u68af\u5ea6\u7684\u95ee\u9898\uff0cshortcut\u5982\u4e0b\u56fe\u6240\u793a\uff1a\u5305\u542b\u4e24\u4e2a\u5377\u79ef\u5c42\u548c\u4e00\u4e2ashortcut connections\u3002","title":"3.2.2 \u9aa8\u5e72\u7f51\u7edc\uff08backbone\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#323-neck","text":"yoloV3\u6700\u91cd\u8981\u7684\u4e00\u4e2a\u6539\u8fdb\u662f\u5f15\u5165\u4e86FPN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u878d\u5408\uff0c\u5e76\u83b7\u53d6\u591a\u79cd\u5c3a\u5ea6\u7684\u7279\u5f81\u56fe\uff0c\u8fdb\u800c\u5b8c\u6210\u591a\u5c3a\u5ea6\u68c0\u6d4b\uff0c\u5982\u4e0b\u6240\u793a\uff1a FPN\u7f51\u7edc\u4e0e\u5728FasterRCNN\u4e2d\u7684\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u662f\u5f53\u524d\u5c42\u7684feature map\u4f1a\u5bf9\u672a\u6765\u5c42\u7684feature map\u8fdb\u884c\u4e0a\u91c7\u6837\uff0c\u5e76\u52a0\u4ee5\u5229\u7528\u3002\u8fd9\u6837\uff0c\u5f53\u524d\u7684feature map\u5c31\u53ef\u4ee5\u83b7\u5f97\u201c\u672a\u6765\u201d\u5c42\u7684\u4fe1\u606f\uff0c\u628a\u4f4e\u9636\u7279\u5f81\u4e0e\u9ad8\u9636\u7279\u5f81\u5c31\u6709\u673a\u878d\u5408\u8d77\u6765\u4e86\uff0c\u63d0\u5347\u68c0\u6d4b\u7cbe\u5ea6\u3002 \u5728YOLOv3\u4e2d\uff0c\u5c31\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u76ee\u6807\u591a\u5c3a\u5ea6\u7684\u53d8\u6362\u7684\u3002FasterRCNN\u4e2d\u7684\u7279\u5f81\u878d\u5408\u4f7f\u7528\u7684\u662fADD\u7684\u65b9\u5f0f\uff0c\u800c\u5728V3\u4e2d\u91c7\u7528\u7684\u65b9\u5f0f\u662fconcat\uff0c\u5176\u4ed6\u7684\u5904\u7406\u4e0eFasterRCNN\u4e2d\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002","title":"3.2.3 neck\u90e8\u5206"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#324","text":"anchor \u4e0eV2\u7248\u672c\u4e00\u6837\uff0cyoloV3\u91c7\u7528K-means\u805a\u7c7b\u5f97\u5230\u5148\u9a8c\u6846\u7684\u5c3a\u5bf8\uff0c\u4e3a\u6bcf\u79cd\u5c3a\u5ea6\u8bbe\u5b9a3\u79cd\u5148\u9a8c\u6846\uff0c\u603b\u5171\u805a\u7c7b\u51fa9\u79cd\u5c3a\u5bf8\u7684\u5148\u9a8c\u6846\u3002 \u5728COCO\u6570\u636e\u96c6\u8fd99\u4e2a\u5148\u9a8c\u6846\u662f\uff1a(10x13)\uff0c(16x30)\uff0c(33x23)\uff0c(30x61)\uff0c(62x45)\uff0c(59x119)\uff0c(116x90)\uff0c(156x198)\uff0c(373x326)\u3002\u5728\u6700\u5c0f\u7684(13x13)\u7279\u5f81\u56fe\u4e0a\uff08\u6709\u6700\u5927\u7684\u611f\u53d7\u91ce\uff09\u5e94\u7528\u8f83\u5927\u7684\u5148\u9a8c\u6846(116x90)\uff0c(156x198)\uff0c(373x326)\uff0c\u9002\u5408\u68c0\u6d4b\u8f83\u5927\u7684\u5bf9\u8c61\u3002\u4e2d\u7b49\u7684(26x26)\u7279\u5f81\u56fe\u4e0a\uff08\u4e2d\u7b49\u611f\u53d7\u91ce\uff09\u5e94\u7528\u4e2d\u7b49\u7684\u5148\u9a8c\u6846(30x61)\uff0c(62x45)\uff0c(59x119)\uff0c\u9002\u5408\u68c0\u6d4b\u4e2d\u7b49\u5927\u5c0f\u7684\u5bf9\u8c61\u3002\u8f83\u5927\u7684(52x52)\u7279\u5f81\u56fe\u4e0a\uff08\u8f83\u5c0f\u7684\u611f\u53d7\u91ce\uff09\u5e94\u7528,\u5176\u4e2d\u8f83\u5c0f\u7684\u5148\u9a8c\u6846(10x13)\uff0c(16x30)\uff0c(33x23)\uff0c\u9002\u5408\u68c0\u6d4b\u8f83\u5c0f\u7684\u5bf9\u8c61\u3002 \u76f4\u89c2\u4e0a\u611f\u53d79\u79cd\u5148\u9a8c\u6846\u7684\u5c3a\u5bf8\uff0c\u4e0b\u56fe\u4e2d\u84dd\u8272\u6846\u4e3a\u805a\u7c7b\u5f97\u5230\u7684\u5148\u9a8c\u6846\u3002\u9ec4\u8272\u6846\u5f0fground truth\uff0c\u7ea2\u6846\u662f\u5bf9\u8c61\u4e2d\u5fc3\u70b9\u6240\u5728\u7684\u7f51\u683c\u3002 \u8f93\u51fa\u7ed3\u679c YoloV3\u7684\u8f93\u51fa\u5f62\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8f93\u5165416\u00d7416\u00d73\u7684\u56fe\u50cf\uff0c\u901a\u8fc7darknet\u7f51\u7edc\u5f97\u5230\u4e09\u79cd\u4e0d\u540c\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u5c3a\u5ea6\u90fd\u5bf9\u5e94N\u4e2a\u901a\u9053\uff0c\u5305\u542b\u7740\u9884\u6d4b\u7684\u4fe1\u606f\uff1b \u6bcf\u4e2a\u7f51\u683c\u6bcf\u4e2a\u5c3a\u5bf8\u7684anchors\u7684\u9884\u6d4b\u7ed3\u679c\u3002 YOLOv3\u5171\u670913\u00d713\u00d73 + 26\u00d726\u00d73 + 52\u00d752\u00d73\u4e2a\u9884\u6d4b \u3002\u6bcf\u4e2a\u9884\u6d4b\u5bf9\u5e9485\u7ef4\uff0c\u5206\u522b\u662f4\uff08\u5750\u6807\u503c\u4e0eV2\u4e00\u6837\uff09\u30011\uff08\u7f6e\u4fe1\u5ea6\u5206\u6570\uff09\u300180\uff08coco\u7c7b\u522b\u6982\u7387\uff09\u3002 \u8f93\u51fa\u6982\u7387\u503c \u9884\u6d4b\u5bf9\u8c61\u7c7b\u522b\u65f6\u4e0d\u4f7f\u7528softmax\uff0c\u800c\u662f\u88ab\u66ff\u6362\u4e3a\u4e00\u4e2a1x1\u7684\u5377\u79ef\u5c42+logistic\u6fc0\u6d3b\u51fd\u6570\u7684\u7ed3\u6784\u3002\u4f7f\u7528softmax\u5c42\u7684\u65f6\u5019\u5176\u5b9e\u5df2\u7ecf\u5047\u8bbe\u6bcf\u4e2a\u8f93\u51fa\u4ec5\u5bf9\u5e94\u67d0\u4e00\u4e2a\u5355\u4e2a\u7684class\uff0c\u4f46\u662f\u5728\u67d0\u4e9bclass\u5b58\u5728\u91cd\u53e0\u60c5\u51b5\uff08\u4f8b\u5982woman\u548cperson\uff09\u7684\u6570\u636e\u96c6\u4e2d\uff0c\u4f7f\u7528softmax\u5c31\u4e0d\u80fd\u4f7f\u7f51\u7edc\u5bf9\u6570\u636e\u8fdb\u884c\u5f88\u597d\u7684\u9884\u6d4b\u3002","title":"3.2.4 \u8f93\u51fa\u90e8\u5206"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#33","text":"","title":"3.3 \u7f51\u7edc\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#331","text":"\u6211\u4eec\u4ecb\u7ecd\u4e86\u7f51\u7edc\u7684\u8f93\u51fa\u662f\u5bf9anchor\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u7684\uff0c\u6240\u4ee5\u5728\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\u65f6\u4e5f\u9700\u8981\u5bf9anchor\u8fdb\u884c\u8bbe\u7f6e\uff1a\u6211\u4eec\u7684\u601d\u8def\u662f\u4e0e\u771f\u5b9e\u6846\u4ea4\u5e76\u6bd4\u8f83\u5927\u7684anchor\u5c31\u662f\u6b63\u6837\u672c\uff0c\u8d1f\u8d23\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\uff0c\u4e0e\u771f\u5b9e\u6846\u4ea4\u5e76\u6bd4\u5c0f\u7684anchor\u662f\u8d1f\u6837\u672c\uff0c\u8d1f\u6837\u672c\u4e0d\u8d1f\u8d23\u8fdb\u884c\u76ee\u6807\u9884\u6d4b\uff0c\u4e5f\u5c31\u662f\u80cc\u666f\uff0c\u90a3\u5728\u8fd9\u91cc\u6211\u4eec\u662f\u5982\u4f55\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\u7684\u5462\uff1f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6b63\u6837\u672c \uff1a\u9996\u5148\u8ba1\u7b97\u76ee\u6807\u4e2d\u5fc3\u70b9\u843d\u5728\u54ea\u4e2agrid\u4e0a\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2agrid\u5bf9\u5e94\u76843\u4e2a\u5148\u9a8c\u6846\uff08anchor\uff09\u548c\u76ee\u6807\u771f\u5b9e\u4f4d\u7f6e\u7684IOU\u503c\uff0c\u53d6IOU\u503c\u6700\u5927\u7684\u5148\u9a8c\u6846\u548c\u76ee\u6807\u5339\u914d\u3002\u90a3\u4e48\u8be5anchor \u5c31\u8d1f\u8d23\u9884\u6d4b\u8fd9\u4e2a\u76ee\u6807\uff0c\u90a3\u8fd9\u4e2aanchor\u5c31\u4f5c\u4e3a\u6b63\u6837\u672c\uff0c\u5c06\u5176\u7f6e\u4fe1\u5ea6\u8bbe\u4e3a1\uff0c\u5176\u4ed6\u7684\u76ee\u6807\u503c\u6839\u636e\u6807\u6ce8\u4fe1\u606f\u8bbe\u7f6e\u3002 \u8d1f\u6837\u672c \uff1a\u6240\u6709\u4e0d\u662f\u6b63\u6837\u672c\u7684anchor\u90fd\u662f\u8d1f\u6837\u672c\uff0c\u5c06\u5176\u7f6e\u4fe1\u5ea6\u8bbe\u4e3a0\uff0c\u53c2\u4e0e\u635f\u5931\u8ba1\u7b97\uff0c\u5176\u5b83\u7684\u503c\u4e0d\u53c2\u4e0e\u635f\u5931\u8ba1\u7b97\uff0c\u9ed8\u8ba4\u4e3a0\u3002","title":"3.3.1\u8bad\u7ec3\u6837\u672c\u7684\u6784\u5efa"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#332","text":"YoloV3\u7684\u635f\u5931\u51fd\u6570\u5206\u4e3a\u4e09\u90e8\u5206\uff1a box\u7684\u635f\u5931\uff1a \u53ea\u6709\u8d1f\u8d23\u68c0\u6d4b\u7684gridcell\u4e2d\u7684anchor\u624d\u4f1a\u8ba1\u5165\u635f\u5931,\u5bf9x,y,w,h\u5206\u522b\u6c42\u5747\u65b9\u8bef\u5dee \u7f6e\u4fe1\u5ea6\u7684\u635f\u5931 \u7f6e\u4fe1\u5ea6\u7684\u635f\u5931\u662f\u4e8c\u5206\u7c7b\u7684\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff0c\u6240\u6709\u7684box\u90fd\u8ba1\u5165\u635f\u5931\u8ba1\u7b97 \u5206\u7c7b\u7684\u635f\u5931\uff1a \u5206\u7c7b\u7684\u635f\u5931\u662f\u4e8c\u5206\u7c7b\u7684\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u53ea\u6709\u8d1f\u8d23\u68c0\u6d4b\u76ee\u6807\u7684\u624d\u8ba1\u7b97\u635f\u5931 \u6211\u4eec\u5c06\u8fd9\u4e09\u4e2a\u635f\u5931\u52a0\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u83b7\u53d6\u603b\u635f\u5931\uff0c\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u3002","title":"3.3.2 \u635f\u5931\u51fd\u6570"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#333","text":"\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e0e\u5176\u4ed6\u7f51\u7edc\u662f\u7c7b\u4f3c\u7684\uff0c\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8bad\u7ec3\u96c6\u7684\u6807\u6ce8\u4fe1\u606f\u83b7\u53d6\u6bcf\u5e45\u56fe\u50cf\u5bf9\u5e94\u7684\u76ee\u6807\u503c\uff0c\u5373\u8bbe\u7f6e\u6b63\u8d1f\u6837\u672c\uff08\u4e09\u4e2a\u5c3a\u5ea6\u7684\u76ee\u6807\u503c\uff09\uff0c\u63a5\u4e0b\u6765\u5c06\u56fe\u50cf\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u8ba1\u7b97\u9884\u6d4b\u7ed3\u679c\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5dee\u5f02\uff08\u635f\u5931\u51fd\u6570\uff09\uff0c\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u53c2\u6570\u5373\u53ef\uff0c\u76f4\u5230\u635f\u5931\u6536\u655b\u5373\u53ef\u3002","title":"3.3.3 \u6a21\u578b\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04-yolo/#34","text":"\u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u6211\u4eec\u5c06\u56fe\u7247resize\u6210416x416\u7684\u5927\u5c0f\uff0c\u9001\u5165\u5230yoloV3\u7f51\u7edc\u4e2d\uff0c\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e2d\u5305\u542b\u8fb9\u6846\u5750\u6807\uff084\u4e2a\u6570\u503c\uff09\uff0c\u8fb9\u6846\u7f6e\u4fe1\u5ea6\uff081\u4e2a\u6570\u503c\uff09\uff0c\u5bf9\u8c61\u7c7b\u522b\u7684\u6982\u7387\uff08\u5bf9\u4e8eCOCO\u6570\u636e\u96c6\uff0c\u670980\u79cd\u5bf9\u8c61\uff09\u3002\u6211\u4eec\u7b5b\u9009\u51fa\u7f6e\u4fe1\u5ea6\u8f83\u9ad8\u7684\u68c0\u6d4b\u7ed3\u679c\uff08>0.5\uff09\uff0c\u5728\u91c7\u7528NMS\uff08Non-maximal suppression\uff0c\u975e\u6781\u5927\u503c\u6291\u5236\uff09\u7b97\u6cd5\u9009\u51fa\u6700\u6709\u53ef\u80fd\u662f\u76ee\u6807\u7684\u7ed3\u679c\uff0c\u5c31\u5b8c\u6210\u4e86\u76ee\u6807\u7684\u68c0\u6d4b\u3002 \u603b\u7ed3 \u77e5\u9053yolo\u7f51\u7edc\u67b6\u6784\uff0c\u7406\u89e3\u5176\u8f93\u5165\u8f93\u51fa YOLO\u7684\u6574\u4e2a\u7ed3\u6784\u5c31\u662f\u8f93\u5165\u56fe\u7247\u7ecf\u8fc7\u795e\u7ecf\u7f51\u7edc\u7684\u53d8\u6362\u5f97\u5230\u4e00\u4e2a\u8f93\u51fa\u7684\u5f20\u91cf \u77e5\u9053yolo\u6a21\u578b\u7684\u8bad\u7ec3\u6837\u672c\u6784\u5efa\u7684\u65b9\u6cd5 \u5bf9\u4e8e\u539f\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7f51\u683cgrid\u90fd\u9700\u8981\u6784\u5efa\u4e00\u4e2a30\u7ef4\u7684\u5411\u91cf\uff1a\u5206\u7c7b\uff0c\u7f6e\u4fe1\u5ea6\uff0c\u56de\u5f52\u7684\u76ee\u6807\u503c \u7406\u89e3yolo\u6a21\u578b\u7684\u635f\u5931\u51fd\u6570 \u635f\u5931\u51fd\u6570\u5206\u4e3a3\u90e8\u5206\uff1a\u5206\u7c7b\u635f\u5931\uff0c\u56de\u5f52\u635f\u5931\uff0c\u7f6e\u4fe1\u5ea6\u635f\u5931 \u77e5\u9053yoloV2\u6a21\u578b\u7684\u6539\u8fdb\u65b9\u6cd5 \u4f7f\u7528\u4e86BN\u5c42\uff0c\u9ad8\u5206\u8fa8\u7387\u8bad\u7ec3\uff0c\u91c7\u7528Anchorbox\uff0c\u805a\u7c7b\u5f97\u5230anchorbox\u7684\u5c3a\u5bf8\uff0c\u6539\u8fdb\u8fb9\u754c\u6846\u9884\u6d4b\u7684\u65b9\u6cd5\uff0c\u7279\u5f81\u878d\u5408\uff0c\u591a\u5c3a\u5ea6\u8bad\u7ec3\uff0c\u7f51\u7edc\u6a21\u578b\u4f7f\u7528darknet19\uff0c\u5229\u7528imagenet\u6570\u636e\u96c6\u8bc6\u522b\u66f4\u591a\u7684\u76ee\u6807 yoloV3\u6a21\u578b\u6a21\u578b\u7ed3\u6784 \u6a21\u578b\u8f93\u5165\u56fe\u50cf\u5927\u5c0f\u662f32\u7684\u500d\u6570\uff0cbackbone\u662fdarknet53\uff0c\u4f7f\u7528FPN\u7f51\u7edc\u8fdb\u884c\u7279\u5f81\u878d\u5408\uff1b\u8f93\u51fa\u5305\u542b3\u4e2a\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e2d\u5305\u542b\u8fb9\u6846\u5750\u6807\uff084\u4e2a\u6570\u503c\uff09\uff0c\u8fb9\u6846\u7f6e\u4fe1\u5ea6\uff081\u4e2a\u6570\u503c\uff09\uff0c\u5bf9\u8c61\u7c7b\u522b\u7684\u6982\u7387\uff08\u5bf9\u4e8eCOCO\u6570\u636e\u96c6\uff0c\u670980\u79cd\u5bf9\u8c61\uff09\u3002 yoloV3\u6a21\u578b\u7684\u8bad\u7ec3\u65b9\u5f0f \u77e5\u9053\u635f\u5931\u51fd\u6570\uff0c\u6b63\u8d1f\u6837\u672c\u8bbe\u7f6e\uff0c\u8fdb\u884c\u8bad\u7ec3\u3002","title":"3.4 \u6a21\u578b\u9884\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/","text":"2.6.yoloV4\u7b97\u6cd5\u8be6\u89e3 \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3yoloV4\u7f51\u7edc\u67b6\u6784 \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u4e2d\u5e38\u89c1\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5 \u77e5\u9053yoloV4\u7684\u635f\u5931\u51fd\u6570\u7684\u8ba1\u7b97\u65b9\u6cd5 1. \u7b97\u6cd5\u7b80\u4ecb \u00b6 YOLO\u4e4b\u7236\u57282020\u5e74\u521d\u5ba3\u5e03\u9000\u51faCV\u754c\uff0cYOLOv4 \u7684\u4f5c\u8005\u5e76\u4e0d\u662fYOLO\u7cfb\u5217 \u7684\u539f\u4f5c\u8005\u3002YOLOV4\u662fYOLO\u7cfb\u5217\u4e00\u4e2a\u91cd\u5927\u7684\u66f4\u65b0\uff0c\u5176\u5728COCO\u6570\u636e\u96c6\u4e0a\u7684\u68c0\u6d4b\u7cbe\u5ea6\u548c\u68c0\u6d4b\u901f\u5ea6\uff0c\u5e76\u5f97\u5230\u4e86Joseph Redmon\u7684\u5b98\u65b9\u8ba4\u53ef\uff0c\u88ab\u8ba4\u4e3a\u662f\u5f53\u524d\u6700\u5f3a\u7684\u5b9e\u65f6\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u4e4b\u4e00\u3002 yoloV4\u4f5c\u8005\u603b\u7ed3\u4e86\u76ee\u6807\u68c0\u6d4b\u7684\u5404\u79cd\u6280\u5de7\uff0c\u7136\u540e\u7ecf\u8fc7\u7b5b\u9009\uff0c\u6392\u5217\u7ec4\u5408\uff0c\u6328\u4e2a\u5b9e\u9a8c\uff08ablation study\uff09\u54ea\u4e9b\u65b9\u6cd5\u6709\u6548\uff0c\u63d0\u5347\u4e86yolo\u5728COCO\u6570\u636e\u96c6\u4e0a\u7684\u68c0\u6d4b\u6548\u679c\u3002\u603b\u4f53\u6765\u8bf4\uff0cYolov4\u5e76\u6ca1\u6709\u521b\u9020\u65b0\u7684\u6539\u8fdb\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u76ee\u6807\u68c0\u6d4b\u7684\u6280\u5de7\uff0c\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5728COCO\u6570\u636e\u96c6\u4e0a\uff0cyoloV4\u7684\u68c0\u6d4b\u901f\u5ea6\u548c\u68c0\u6d4b\u7cbe\u5ea6\u90fd\u6709\u8f83\u5927\u7684\u63d0\u5347\u3002 2.yoloV4\u7684\u7f51\u7edc\u7ed3\u6784 \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u9996\u5148\u6765\u770b\u4e0b\u5b83\u7684\u7f51\u7edc\u67b6\u6784\uff0c\u6211\u4eec\u4f9d\u7136\u628a\u5b83\u5206\u6210\u8f93\u5165\uff0cbackbone,Neck\u548c\u8f93\u51fa\u7aef\u56db\u90e8\u5206\uff0c\u5982\u4e0b\u6240\u793a\uff1a Yolov4\u7684\u6574\u4f53\u67b6\u6784\u4e0eYolov3\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff0c\u4e0d\u8fc7\u4f7f\u7528\u5404\u79cd\u65b0\u7684\u7b97\u6cd5\u601d\u60f3\u5bf9\u5404\u4e2a\u5b50\u7ed3\u6784\u90fd\u8fdb\u884c\u4e86\u6539\u8fdb\u3002 \u57fa\u672c\u7ec4\u4ef6\uff1a CBM\uff1aYolov4\u7f51\u7edc\u7ed3\u6784\u4e2d\u7684\u6700\u5c0f\u7ec4\u4ef6\uff0c\u7531Conv+Bn+Mish\u6fc0\u6d3b\u51fd\u6570\u4e09\u8005\u7ec4\u6210\u3002 CBL\uff1a\u7531Conv+Bn+Leaky_relu\u6fc0\u6d3b\u51fd\u6570\u4e09\u8005\u7ec4\u6210\u3002 Res unit\uff1a\u501f\u9274Resnet\u7f51\u7edc\u4e2d\u7684\u6b8b\u5dee\u7ed3\u6784\uff0c\u8ba9\u7f51\u7edc\u53ef\u4ee5\u6784\u5efa\u7684\u66f4\u6df1\u3002 CSPX\uff1a\u7531\u4e09\u4e2a\u5377\u79ef\u5c42\u548cX\u4e2aRes unint\u6a21\u5757Concate\u7ec4\u6210\u3002 SPP\uff1a\u91c7\u75281\u00d71\uff0c5\u00d75\uff0c9\u00d79\uff0c13\u00d713\u7684\u6700\u5927\u6c60\u5316\u7684\u65b9\u5f0f\uff0c\u8fdb\u884c\u591a\u5c3a\u5ea6\u878d\u5408\u3002 \u5176\u4ed6\u57fa\u7840\u64cd\u4f5c\uff1a Concat\uff1a\u5f20\u91cf\u62fc\u63a5\uff0c\u901a\u9053\u7ef4\u5ea6\u4f1a\u6269\u5145\u3002 Add\uff1a\u5f20\u91cf\u76f8\u52a0\uff0c\u4e0d\u4f1a\u6269\u5145\u7ef4\u5ea6\u3002 Backbone\u4e2d\u5377\u79ef\u5c42\u7684\u6570\u91cf\uff1a \u6bcf\u4e2aCSPX\u4e2d\u5305\u542b3+2\u00d7X\u4e2a\u5377\u79ef\u5c42\uff0c\u56e0\u6b64\u6574\u4e2a\u4e3b\u5e72\u7f51\u7edcBackbone\u4e2d\u4e00\u5171\u5305\u542b2+\uff083+2\u00d71\uff09+2+\uff083+2\u00d72\uff09+2+\uff083+2\u00d78\uff09+2+\uff083+2\u00d78\uff09+2+\uff083+2\u00d74\uff09+1=72\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u8f93\u5165\u7aef\uff08input\uff09,backbone, neck, \u8f93\u51fa\u7aef\uff08output\uff09\u56db\u90e8\u5206\u4ecb\u7ecdyoloV4\u7f51\u7edc\u7684\u5185\u5bb9\u3002 2.1 \u8f93\u5165\uff08input\uff09 \u00b6 yoloV4\u7f51\u7edc\u7684\u8f93\u5165\u4f9d\u7136\u8981\u6c42\u662f32\u7684\u500d\u6570\uff0c\u4f46\u5927\u5c0f\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5728yoloV4\u4e2d\u9ed8\u8ba4\u662f608\u00d7608\uff0c\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4fee\u6539\uff0c\u6bd4\u5982320\u00d7320\uff0c\u4e00\u822c\u662f32\u7684\u500d\u6570\u3002 \u8f93\u5165\u56fe\u50cf\u7684\u5927\u5c0f\u548c\u6700\u540e\u7684\u4e09\u4e2a\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u4e5f\u662f\u5bf9\u5e94\u7684\uff0c\u6bd4\u5982416\u00d7416\u7684\u8f93\u5165\uff0c\u6700\u540e\u7684\u4e09\u4e2a\u7279\u5f81\u56fe\u5927\u5c0f\u662f13\u00d713\uff0c26\u00d726\uff0c52\u00d752\uff0c \u5982\u679c\u662f608\u00d7608\uff0c\u6700\u540e\u7684\u4e09\u4e2a\u7279\u5f81\u56fe\u5927\u5c0f\u5219\u662f19\u00d719\uff0c38\u00d738\uff0c76\u00d776\u3002 yoloV4\u5728\u8f93\u5165\u7aef\u9664\u4e86\u91c7\u7528\u5e38\u89c4\u7684\u53cd\u8f6c\u3001\u88c1\u5207\u3001\u65cb\u8f6c\u7b49\u65b9\u6cd5\u5916\uff0c\u989d\u5916\u4e3b\u8981\u91c7\u7528\u4e86CutMix\u548c\u9a6c\u8d5b\u514b\u6570\u636e\u589e\u5f3a\uff08Mosaic data augmentation\uff09\uff0c\u524d\u8005\u662f\u5c06\u53e6\u4e00\u5f20\u56fe\u968f\u673a\u8d34\u5728\u4e00\u5f20\u56fe\u4e0a\uff0c\u540e\u8005\u662f\u5c06\u56db\u5f20\u56fe\u62fc\u63a5\uff0c\u76ee\u7684\u90fd\u662f\u4f7f\u67d0\u4e9b\u76ee\u6807\u5728\u8131\u79bb\u5176\u5e38\u89c4\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u8bad\u7ec3\uff0c\u63d0\u9ad8\u7f51\u7edc\u7684\u9c81\u68d2\u6027\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u9a6c\u8d5b\u514b\u589e\u5f3a\u65b9\u5f0f\u5c064\u5f20\u8bad\u7ec3\u56fe\u50cf\u6309\u4e00\u5b9a\u6bd4\u4f8b\u7ec4\u5408\u62101\u5f20\u3002Mosaic\u589e\u5f3a\u65b9\u5f0f\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u5b66\u4e60\u5982\u4f55\u8bc6\u522b\u5c3a\u5bf8\u5c0f\u7684\u7269\u4f53\uff0c\u8fd8\u80fd\u591f\u5e2e\u52a9\u6a21\u578b\u5728\u56fe\u50cf\u7684\u4e0d\u540c\u90e8\u5206\u5b9a\u4f4d\u4e0d\u540c\u7c7b\u578b\u7684\u76ee\u6807\u3002 2.2 backbone \u00b6 yoloV4\u7f51\u7edc\u7684backbone\u662f\u5728yoloV3\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u6539\u8fdb\uff0c\u4f7f\u7528\u7684\u662fCSPDarknet53\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a CBM\u6a21\u5757\u4e2d\u4f7f\u7528\u4e86mish\u6fc0\u6d3b\u51fd\u6570\uff1a mish\u662f\u975e\u5355\u8c03\u795e\u7ecf\u6fc0\u6d3b\u51fd\u6570\uff0c\u5e73\u6ed1\u7684\u6fc0\u6d3b\u51fd\u6570\u5141\u8bb8\u66f4\u597d\u7684\u4fe1\u606f\u6df1\u5165\u795e\u7ecf\u7f51\u7edc\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u597d\u7684\u51c6\u786e\u6027\u548c\u6cdb\u5316\u3002\u6839\u636e\u5b9e\u9a8c\uff0c\u8be5\u51fd\u6570\u5728\u6700\u7ec8\u51c6\u786e\u5ea6\u4e0a\u6bd4Swish(+0.494%)\u548cReLU(+ 1.671%)\u90fd\u6709\u63d0\u9ad8\u3002 V4\u7684\u4f5c\u8005\u5728backbone\u4e2d\u4f7f\u7528\u4e86mish\u6fc0\u6d3b\uff0c\u5176\u4ed6\u90e8\u5206\u4f9d\u7136\u4f7f\u7528leakyrelu\u6fc0\u6d3b\u3002 backbone\u4e2d\u5305\u542b5\u4e2aCSP\u6a21\u5757\uff0c\u6bcf\u4e2aCSP\u6a21\u5757\u5728\u7b2c\u4e00\u4e2aCBM\u662f\u5377\u79ef\u6b65\u957f\u4e3a2\uff0c\u4e0b\u91c7\u6837\u4e00\u6b21\uff1a \u4e00\u5171\u67095\u4e2aCSP\uff0c\u8f93\u5165\u56fe\u50cf\u662f608x608\uff0c\u6240\u4ee5\u7279\u5f81\u56fe\u53d8\u5316\u7684\u89c4\u5f8b\u662f\uff1a608->304->152->76->38->19\uff0c\u7ecf\u8fc75\u6b21CSP\u6a21\u5757\u540e\u5f97\u523019x19\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 2.3 neck \u00b6 \u5728yoloV3\u4e2d\u4f5c\u8005\u4f7f\u7528FPN\u8fdb\u884c\u7279\u5f81\u878d\u5408\uff0cV4\u4e2d\u9664\u4e86\u4f7f\u7528FPN\u4e4b\u5916\u8fd8\u589e\u52a0\u4e86PAN\u7ed3\u6784\uff1a \u9001\u5165\u5230Neck\u90e8\u5206\u7684\u7279\u5f81\u56fe\u662f19x19,38x38,76x76\u7684\u5927\u5c0f\uff0c\u878d\u5408\u540e\u7684\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u4e5f\u4e3a19x19,38x38,76x76\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e0bV4\u4e2d\u662f\u5982\u4f55\u6765\u5b8c\u6210\u7279\u5f81\u878d\u5408\u7684\u3002 \u6574\u4e2a\u878d\u5408\u8fc7\u7a0b\u662f\u9996\u5148bacbone\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u83b7\u53d6\u7279\u5f81\u56fe\uff0c\u5176\u6b21\u7ecf\u8fc7FPN\u7f51\u7edc\u8fdb\u884c\u878d\u5408\uff0c\u8fd9\u4e00\u90e8\u5206\u4e0eV3\u662f\u4e00\u6837\u7684\uff0cV3\u4e2d\u76f4\u63a5\u9001\u5165\u8f93\u51fa\u7aef\u8fdb\u884c\u9884\u6d4b\u3002\u800c\u5728V4\u4e2d\u8fd8\u8981\u8fdb\u884c\u6700\u540e\u4e00\u6b65\u7684\u4e0a\u91c7\u6837\u8fdb\u884c\u878d\u5408\uff0c\u6700\u540e\u5728\u9001\u5165\u8f93\u51fa\u90e8\u5206\u8fdb\u884c\u9884\u6d4b\u3002\u6240\u6709\u7684\u878d\u5408\u90fd\u901a\u8fc7concat\u6765\u8fdb\u884c\u3002 2.4 \u8f93\u51fa\uff08output\uff09 \u00b6 V4\u7684\u8f93\u51fa\u7aef\u4e0eV3\u7684\u8f93\u51fa\u7aef\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u7ed3\u679c\uff0c\u5177\u4f53\u4e0d\u518d\u8d58\u8ff0\u3002 3.\u6a21\u578b\u8bad\u7ec3 \u00b6 yoloV4\u4e2d\u7684\u6a21\u578b\u8bad\u7ec3\u4e0e\u9884\u6d4b\u548cYoloV3\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u5305\u62ec\u6b63\u8d1f\u6837\u672c\u7684\u8bbe\u7f6e\u65b9\u5f0f\uff0c\u635f\u5931\u51fd\u6570\u7684\u6784\u6210\u53ca\u8bad\u7ec3\u8fc7\u7a0b\u3002\u552f\u4e00\u4e0d\u540c\u662f\u5728\u8ba1\u7b97\u56de\u5f52\u503c\u5f97\u635f\u5931\u65f6\uff0cV4\u4e2d\u91c7\u7528\u4e86IOU\u7684\u635f\u5931\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0b\u51e0\u79cdIOU\u7684\u635f\u5931\uff1a\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u5927\u5bb6\u5148\u56de\u987e\u4e0bV3\u4e2d\u8fb9\u6846\u56de\u5f52\u635f\u5931\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002 3.1 IOU\u635f\u5931 \u00b6 IOU\u635f\u5931\u975e\u5e38\u7b80\u5355\uff0c\u76f4\u63a5\u4f7f\u7528\u68c0\u6d4b\u6846\u4e0e\u771f\u5b9e\u6846\u7684\u4ea4\u5e76\u6bd4\u5e76\u53d6\u5bf9\u6570\u4f5c\u4e3a\u56de\u5f52\u7684\u635f\u5931\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u5f88\u5bb9\u6613\u5730\u77e5\u9053\uff0c\u5f53\u9884\u6d4b\u8fb9\u754c\u6846\u4e0e\u771f\u5b9e\u8fb9\u754c\u6846\u6ca1\u6709\u4ea4\u96c6\u65f6\uff0cIOU=0\uff0c\u8fd9\u65f6\u65e0\u6cd5\u8ba1\u7b97\u635f\u5931\u503c\u8d8b\u4e8e\u65e0\u7a77\u5927\uff0c\u4e5f\u5c31\u6ca1\u6709\u529e\u6cd5\u4f18\u5316\u7f51\u7edc\u3002 3.2 GIOU\u635f\u5931 \u00b6 GIOU\u635f\u5931\u662f\u4e3a\u4e86\u7f13\u89e3IOU\u635f\u5931\u7684\u95ee\u9898\u63d0\u51fa\u6765\u7684\uff0c\u6211\u770b\u4e0bGIOU\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a \u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u7684\u95ee\u9898\u662f\u5f53\u68c0\u6d4b\u6846\u5728\u771f\u5b9e\u6846\u5185\u90e8\u6216\u6b63\u5f0f\u6846\u5728\u68c0\u6d4b\u6846\u5185\u90e8\u65f6\uff0c\u65e0\u6cd5\u8861\u91cf\u5dee\u96c6\uff0c\u635f\u5931\u51fd\u6570\u9000\u5316\u4e3a1-IOU\uff0c\u4e0b\u8ff03\u79cd\u7684\u635f\u5931\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u5229\u4e8e\u8fb9\u6846\u7684\u56de\u5f52\u3002 3.3 DIOU\u635f\u5931 \u00b6 \u4e3a\u4e86\u7f13\u89e3\u4e0a\u8ff0GIOU\u4e2d\u7684\u95ee\u9898\uff0c\u53c8\u63d0\u51faD_IOU\u635f\u5931\uff0c\u5728DIOU\u635f\u5931\u4e2d\u5c31\u8003\u8651\u7684\u771f\u5b9e\u6846\u7684\u4e2d\u5fc3\u70b9\u8ddd\u79bb\uff0c\u91cd\u53e0\u9762\u79ef\u548c\u957f\u5bbd\u6bd4\u7b49\u56e0\u7d20\uff1a dis_c\u8d8a\u5c0f\u8bf4\u660eC\u7684\u9762\u79ef\u8d8a\u5c0f\uff0cdis\u8d8a\u5c0f\u8bf4\u660e\u4e24\u4e2a\u6846\u8ddd\u79bb\u8d8a\u8fd1\u3002 3.4 CIOU\u635f\u5931 \u00b6 CIOU\u5728DIOU\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u5f71\u54cd\u56e0\u5b50\uff0c\u5c06\u68c0\u6d4b\u6846\u4e0e\u771f\u5b9e\u6846\u7684\u957f\u5bbd\u90fd\u8003\u8651\u8fdb\u53bb\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a \u5176\u4e2dv\u662f\u8861\u91cf\u957f\u5bbd\u6bd4\u4e00\u81f4\u6027\u7684\u53c2\u6570\uff0c\u5b9a\u4e49\u4e3a\uff1a yoloV4\u4e2d\u5728\u56de\u5f52\u8fb9\u6846\u65f6\uff0c\u91c7\u7528CIOU_loss,\u4f7f\u5f97\u68c0\u6d4b\u6846\u7684\u7cbe\u5ea6\u66f4\u9ad8\u4e00\u4e9b\u3002 4 \u6a21\u578b\u9884\u6d4b \u00b6 \u4e0eyoloV3\u7c7b\u4f3c\uff0c\u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u6211\u4eec\u5c06\u56fe\u7247resize\u6210608x608\u7684\u5927\u5c0f\uff0c\u9001\u5165\u5230yoloV4\u7f51\u7edc\u4e2d\uff0c\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e2d\u5305\u542b\u8fb9\u6846\u5750\u6807\uff084\u4e2a\u6570\u503c\uff09\uff0c\u8fb9\u6846\u7f6e\u4fe1\u5ea6\uff081\u4e2a\u6570\u503c\uff09\uff0c\u5bf9\u8c61\u7c7b\u522b\u7684\u6982\u7387\uff08\u5bf9\u4e8eCOCO\u6570\u636e\u96c6\uff0c\u670980\u79cd\u5bf9\u8c61\uff09\u3002\u6211\u4eec\u7b5b\u9009\u51fa\u7f6e\u4fe1\u5ea6\u8f83\u9ad8\u7684\u68c0\u6d4b\u7ed3\u679c\uff08>0.5\uff09\uff0c\u5728\u91c7\u7528DIOU-NMS\u7b97\u6cd5\u9009\u51fa\u6700\u6709\u53ef\u80fd\u662f\u76ee\u6807\u7684\u7ed3\u679c\uff0c\u5c31\u5b8c\u6210\u4e86\u76ee\u6807\u7684\u68c0\u6d4b\u3002 \u603b\u7ed3 \u4e86\u89e3yoloV4\u7f51\u7edc\u67b6\u6784 \u200b \u8f93\u5165\uff0cbackbone\uff0cneck\uff0c\u8f93\u51fa \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u4e2d\u5e38\u89c1\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5 \u200b \u9a6c\u8d5b\u514b\u589e\u5f3a:\u5c0f\u76ee\u6807\u68c0\u6d4b \u77e5\u9053yoloV4\u7684\u635f\u5931\u51fd\u6570\u7684\u8ba1\u7b97\u65b9\u6cd5 IOU_loss,GIOu_loss,DIOU_loss,CIOU_loss","title":"2.6.yoloV4\u7b97\u6cd5\u8be6\u89e3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#26yolov4","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3yoloV4\u7f51\u7edc\u67b6\u6784 \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u4e2d\u5e38\u89c1\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5 \u77e5\u9053yoloV4\u7684\u635f\u5931\u51fd\u6570\u7684\u8ba1\u7b97\u65b9\u6cd5","title":"2.6.yoloV4\u7b97\u6cd5\u8be6\u89e3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#1","text":"YOLO\u4e4b\u7236\u57282020\u5e74\u521d\u5ba3\u5e03\u9000\u51faCV\u754c\uff0cYOLOv4 \u7684\u4f5c\u8005\u5e76\u4e0d\u662fYOLO\u7cfb\u5217 \u7684\u539f\u4f5c\u8005\u3002YOLOV4\u662fYOLO\u7cfb\u5217\u4e00\u4e2a\u91cd\u5927\u7684\u66f4\u65b0\uff0c\u5176\u5728COCO\u6570\u636e\u96c6\u4e0a\u7684\u68c0\u6d4b\u7cbe\u5ea6\u548c\u68c0\u6d4b\u901f\u5ea6\uff0c\u5e76\u5f97\u5230\u4e86Joseph Redmon\u7684\u5b98\u65b9\u8ba4\u53ef\uff0c\u88ab\u8ba4\u4e3a\u662f\u5f53\u524d\u6700\u5f3a\u7684\u5b9e\u65f6\u5bf9\u8c61\u68c0\u6d4b\u6a21\u578b\u4e4b\u4e00\u3002 yoloV4\u4f5c\u8005\u603b\u7ed3\u4e86\u76ee\u6807\u68c0\u6d4b\u7684\u5404\u79cd\u6280\u5de7\uff0c\u7136\u540e\u7ecf\u8fc7\u7b5b\u9009\uff0c\u6392\u5217\u7ec4\u5408\uff0c\u6328\u4e2a\u5b9e\u9a8c\uff08ablation study\uff09\u54ea\u4e9b\u65b9\u6cd5\u6709\u6548\uff0c\u63d0\u5347\u4e86yolo\u5728COCO\u6570\u636e\u96c6\u4e0a\u7684\u68c0\u6d4b\u6548\u679c\u3002\u603b\u4f53\u6765\u8bf4\uff0cYolov4\u5e76\u6ca1\u6709\u521b\u9020\u65b0\u7684\u6539\u8fdb\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u76ee\u6807\u68c0\u6d4b\u7684\u6280\u5de7\uff0c\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5728COCO\u6570\u636e\u96c6\u4e0a\uff0cyoloV4\u7684\u68c0\u6d4b\u901f\u5ea6\u548c\u68c0\u6d4b\u7cbe\u5ea6\u90fd\u6709\u8f83\u5927\u7684\u63d0\u5347\u3002","title":"1. \u7b97\u6cd5\u7b80\u4ecb"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#2yolov4","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u9996\u5148\u6765\u770b\u4e0b\u5b83\u7684\u7f51\u7edc\u67b6\u6784\uff0c\u6211\u4eec\u4f9d\u7136\u628a\u5b83\u5206\u6210\u8f93\u5165\uff0cbackbone,Neck\u548c\u8f93\u51fa\u7aef\u56db\u90e8\u5206\uff0c\u5982\u4e0b\u6240\u793a\uff1a Yolov4\u7684\u6574\u4f53\u67b6\u6784\u4e0eYolov3\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff0c\u4e0d\u8fc7\u4f7f\u7528\u5404\u79cd\u65b0\u7684\u7b97\u6cd5\u601d\u60f3\u5bf9\u5404\u4e2a\u5b50\u7ed3\u6784\u90fd\u8fdb\u884c\u4e86\u6539\u8fdb\u3002 \u57fa\u672c\u7ec4\u4ef6\uff1a CBM\uff1aYolov4\u7f51\u7edc\u7ed3\u6784\u4e2d\u7684\u6700\u5c0f\u7ec4\u4ef6\uff0c\u7531Conv+Bn+Mish\u6fc0\u6d3b\u51fd\u6570\u4e09\u8005\u7ec4\u6210\u3002 CBL\uff1a\u7531Conv+Bn+Leaky_relu\u6fc0\u6d3b\u51fd\u6570\u4e09\u8005\u7ec4\u6210\u3002 Res unit\uff1a\u501f\u9274Resnet\u7f51\u7edc\u4e2d\u7684\u6b8b\u5dee\u7ed3\u6784\uff0c\u8ba9\u7f51\u7edc\u53ef\u4ee5\u6784\u5efa\u7684\u66f4\u6df1\u3002 CSPX\uff1a\u7531\u4e09\u4e2a\u5377\u79ef\u5c42\u548cX\u4e2aRes unint\u6a21\u5757Concate\u7ec4\u6210\u3002 SPP\uff1a\u91c7\u75281\u00d71\uff0c5\u00d75\uff0c9\u00d79\uff0c13\u00d713\u7684\u6700\u5927\u6c60\u5316\u7684\u65b9\u5f0f\uff0c\u8fdb\u884c\u591a\u5c3a\u5ea6\u878d\u5408\u3002 \u5176\u4ed6\u57fa\u7840\u64cd\u4f5c\uff1a Concat\uff1a\u5f20\u91cf\u62fc\u63a5\uff0c\u901a\u9053\u7ef4\u5ea6\u4f1a\u6269\u5145\u3002 Add\uff1a\u5f20\u91cf\u76f8\u52a0\uff0c\u4e0d\u4f1a\u6269\u5145\u7ef4\u5ea6\u3002 Backbone\u4e2d\u5377\u79ef\u5c42\u7684\u6570\u91cf\uff1a \u6bcf\u4e2aCSPX\u4e2d\u5305\u542b3+2\u00d7X\u4e2a\u5377\u79ef\u5c42\uff0c\u56e0\u6b64\u6574\u4e2a\u4e3b\u5e72\u7f51\u7edcBackbone\u4e2d\u4e00\u5171\u5305\u542b2+\uff083+2\u00d71\uff09+2+\uff083+2\u00d72\uff09+2+\uff083+2\u00d78\uff09+2+\uff083+2\u00d78\uff09+2+\uff083+2\u00d74\uff09+1=72\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u8f93\u5165\u7aef\uff08input\uff09,backbone, neck, \u8f93\u51fa\u7aef\uff08output\uff09\u56db\u90e8\u5206\u4ecb\u7ecdyoloV4\u7f51\u7edc\u7684\u5185\u5bb9\u3002","title":"2.yoloV4\u7684\u7f51\u7edc\u7ed3\u6784"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#21-input","text":"yoloV4\u7f51\u7edc\u7684\u8f93\u5165\u4f9d\u7136\u8981\u6c42\u662f32\u7684\u500d\u6570\uff0c\u4f46\u5927\u5c0f\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5728yoloV4\u4e2d\u9ed8\u8ba4\u662f608\u00d7608\uff0c\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4fee\u6539\uff0c\u6bd4\u5982320\u00d7320\uff0c\u4e00\u822c\u662f32\u7684\u500d\u6570\u3002 \u8f93\u5165\u56fe\u50cf\u7684\u5927\u5c0f\u548c\u6700\u540e\u7684\u4e09\u4e2a\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u4e5f\u662f\u5bf9\u5e94\u7684\uff0c\u6bd4\u5982416\u00d7416\u7684\u8f93\u5165\uff0c\u6700\u540e\u7684\u4e09\u4e2a\u7279\u5f81\u56fe\u5927\u5c0f\u662f13\u00d713\uff0c26\u00d726\uff0c52\u00d752\uff0c \u5982\u679c\u662f608\u00d7608\uff0c\u6700\u540e\u7684\u4e09\u4e2a\u7279\u5f81\u56fe\u5927\u5c0f\u5219\u662f19\u00d719\uff0c38\u00d738\uff0c76\u00d776\u3002 yoloV4\u5728\u8f93\u5165\u7aef\u9664\u4e86\u91c7\u7528\u5e38\u89c4\u7684\u53cd\u8f6c\u3001\u88c1\u5207\u3001\u65cb\u8f6c\u7b49\u65b9\u6cd5\u5916\uff0c\u989d\u5916\u4e3b\u8981\u91c7\u7528\u4e86CutMix\u548c\u9a6c\u8d5b\u514b\u6570\u636e\u589e\u5f3a\uff08Mosaic data augmentation\uff09\uff0c\u524d\u8005\u662f\u5c06\u53e6\u4e00\u5f20\u56fe\u968f\u673a\u8d34\u5728\u4e00\u5f20\u56fe\u4e0a\uff0c\u540e\u8005\u662f\u5c06\u56db\u5f20\u56fe\u62fc\u63a5\uff0c\u76ee\u7684\u90fd\u662f\u4f7f\u67d0\u4e9b\u76ee\u6807\u5728\u8131\u79bb\u5176\u5e38\u89c4\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u8bad\u7ec3\uff0c\u63d0\u9ad8\u7f51\u7edc\u7684\u9c81\u68d2\u6027\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u9a6c\u8d5b\u514b\u589e\u5f3a\u65b9\u5f0f\u5c064\u5f20\u8bad\u7ec3\u56fe\u50cf\u6309\u4e00\u5b9a\u6bd4\u4f8b\u7ec4\u5408\u62101\u5f20\u3002Mosaic\u589e\u5f3a\u65b9\u5f0f\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u5b66\u4e60\u5982\u4f55\u8bc6\u522b\u5c3a\u5bf8\u5c0f\u7684\u7269\u4f53\uff0c\u8fd8\u80fd\u591f\u5e2e\u52a9\u6a21\u578b\u5728\u56fe\u50cf\u7684\u4e0d\u540c\u90e8\u5206\u5b9a\u4f4d\u4e0d\u540c\u7c7b\u578b\u7684\u76ee\u6807\u3002","title":"2.1 \u8f93\u5165\uff08input\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#22-backbone","text":"yoloV4\u7f51\u7edc\u7684backbone\u662f\u5728yoloV3\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u6539\u8fdb\uff0c\u4f7f\u7528\u7684\u662fCSPDarknet53\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a CBM\u6a21\u5757\u4e2d\u4f7f\u7528\u4e86mish\u6fc0\u6d3b\u51fd\u6570\uff1a mish\u662f\u975e\u5355\u8c03\u795e\u7ecf\u6fc0\u6d3b\u51fd\u6570\uff0c\u5e73\u6ed1\u7684\u6fc0\u6d3b\u51fd\u6570\u5141\u8bb8\u66f4\u597d\u7684\u4fe1\u606f\u6df1\u5165\u795e\u7ecf\u7f51\u7edc\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u597d\u7684\u51c6\u786e\u6027\u548c\u6cdb\u5316\u3002\u6839\u636e\u5b9e\u9a8c\uff0c\u8be5\u51fd\u6570\u5728\u6700\u7ec8\u51c6\u786e\u5ea6\u4e0a\u6bd4Swish(+0.494%)\u548cReLU(+ 1.671%)\u90fd\u6709\u63d0\u9ad8\u3002 V4\u7684\u4f5c\u8005\u5728backbone\u4e2d\u4f7f\u7528\u4e86mish\u6fc0\u6d3b\uff0c\u5176\u4ed6\u90e8\u5206\u4f9d\u7136\u4f7f\u7528leakyrelu\u6fc0\u6d3b\u3002 backbone\u4e2d\u5305\u542b5\u4e2aCSP\u6a21\u5757\uff0c\u6bcf\u4e2aCSP\u6a21\u5757\u5728\u7b2c\u4e00\u4e2aCBM\u662f\u5377\u79ef\u6b65\u957f\u4e3a2\uff0c\u4e0b\u91c7\u6837\u4e00\u6b21\uff1a \u4e00\u5171\u67095\u4e2aCSP\uff0c\u8f93\u5165\u56fe\u50cf\u662f608x608\uff0c\u6240\u4ee5\u7279\u5f81\u56fe\u53d8\u5316\u7684\u89c4\u5f8b\u662f\uff1a608->304->152->76->38->19\uff0c\u7ecf\u8fc75\u6b21CSP\u6a21\u5757\u540e\u5f97\u523019x19\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002","title":"2.2 backbone"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#23-neck","text":"\u5728yoloV3\u4e2d\u4f5c\u8005\u4f7f\u7528FPN\u8fdb\u884c\u7279\u5f81\u878d\u5408\uff0cV4\u4e2d\u9664\u4e86\u4f7f\u7528FPN\u4e4b\u5916\u8fd8\u589e\u52a0\u4e86PAN\u7ed3\u6784\uff1a \u9001\u5165\u5230Neck\u90e8\u5206\u7684\u7279\u5f81\u56fe\u662f19x19,38x38,76x76\u7684\u5927\u5c0f\uff0c\u878d\u5408\u540e\u7684\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u4e5f\u4e3a19x19,38x38,76x76\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e0bV4\u4e2d\u662f\u5982\u4f55\u6765\u5b8c\u6210\u7279\u5f81\u878d\u5408\u7684\u3002 \u6574\u4e2a\u878d\u5408\u8fc7\u7a0b\u662f\u9996\u5148bacbone\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\u83b7\u53d6\u7279\u5f81\u56fe\uff0c\u5176\u6b21\u7ecf\u8fc7FPN\u7f51\u7edc\u8fdb\u884c\u878d\u5408\uff0c\u8fd9\u4e00\u90e8\u5206\u4e0eV3\u662f\u4e00\u6837\u7684\uff0cV3\u4e2d\u76f4\u63a5\u9001\u5165\u8f93\u51fa\u7aef\u8fdb\u884c\u9884\u6d4b\u3002\u800c\u5728V4\u4e2d\u8fd8\u8981\u8fdb\u884c\u6700\u540e\u4e00\u6b65\u7684\u4e0a\u91c7\u6837\u8fdb\u884c\u878d\u5408\uff0c\u6700\u540e\u5728\u9001\u5165\u8f93\u51fa\u90e8\u5206\u8fdb\u884c\u9884\u6d4b\u3002\u6240\u6709\u7684\u878d\u5408\u90fd\u901a\u8fc7concat\u6765\u8fdb\u884c\u3002","title":"2.3 neck"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#24-output","text":"V4\u7684\u8f93\u51fa\u7aef\u4e0eV3\u7684\u8f93\u51fa\u7aef\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u7ed3\u679c\uff0c\u5177\u4f53\u4e0d\u518d\u8d58\u8ff0\u3002","title":"2.4 \u8f93\u51fa\uff08output\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#3","text":"yoloV4\u4e2d\u7684\u6a21\u578b\u8bad\u7ec3\u4e0e\u9884\u6d4b\u548cYoloV3\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u5305\u62ec\u6b63\u8d1f\u6837\u672c\u7684\u8bbe\u7f6e\u65b9\u5f0f\uff0c\u635f\u5931\u51fd\u6570\u7684\u6784\u6210\u53ca\u8bad\u7ec3\u8fc7\u7a0b\u3002\u552f\u4e00\u4e0d\u540c\u662f\u5728\u8ba1\u7b97\u56de\u5f52\u503c\u5f97\u635f\u5931\u65f6\uff0cV4\u4e2d\u91c7\u7528\u4e86IOU\u7684\u635f\u5931\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0b\u51e0\u79cdIOU\u7684\u635f\u5931\uff1a\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u5927\u5bb6\u5148\u56de\u987e\u4e0bV3\u4e2d\u8fb9\u6846\u56de\u5f52\u635f\u5931\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002","title":"3.\u6a21\u578b\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#31-iou","text":"IOU\u635f\u5931\u975e\u5e38\u7b80\u5355\uff0c\u76f4\u63a5\u4f7f\u7528\u68c0\u6d4b\u6846\u4e0e\u771f\u5b9e\u6846\u7684\u4ea4\u5e76\u6bd4\u5e76\u53d6\u5bf9\u6570\u4f5c\u4e3a\u56de\u5f52\u7684\u635f\u5931\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u5f88\u5bb9\u6613\u5730\u77e5\u9053\uff0c\u5f53\u9884\u6d4b\u8fb9\u754c\u6846\u4e0e\u771f\u5b9e\u8fb9\u754c\u6846\u6ca1\u6709\u4ea4\u96c6\u65f6\uff0cIOU=0\uff0c\u8fd9\u65f6\u65e0\u6cd5\u8ba1\u7b97\u635f\u5931\u503c\u8d8b\u4e8e\u65e0\u7a77\u5927\uff0c\u4e5f\u5c31\u6ca1\u6709\u529e\u6cd5\u4f18\u5316\u7f51\u7edc\u3002","title":"3.1 IOU\u635f\u5931"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#32-giou","text":"GIOU\u635f\u5931\u662f\u4e3a\u4e86\u7f13\u89e3IOU\u635f\u5931\u7684\u95ee\u9898\u63d0\u51fa\u6765\u7684\uff0c\u6211\u770b\u4e0bGIOU\u7684\u8ba1\u7b97\u65b9\u6cd5\uff1a \u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u7684\u95ee\u9898\u662f\u5f53\u68c0\u6d4b\u6846\u5728\u771f\u5b9e\u6846\u5185\u90e8\u6216\u6b63\u5f0f\u6846\u5728\u68c0\u6d4b\u6846\u5185\u90e8\u65f6\uff0c\u65e0\u6cd5\u8861\u91cf\u5dee\u96c6\uff0c\u635f\u5931\u51fd\u6570\u9000\u5316\u4e3a1-IOU\uff0c\u4e0b\u8ff03\u79cd\u7684\u635f\u5931\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u5229\u4e8e\u8fb9\u6846\u7684\u56de\u5f52\u3002","title":"3.2 GIOU\u635f\u5931"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#33-diou","text":"\u4e3a\u4e86\u7f13\u89e3\u4e0a\u8ff0GIOU\u4e2d\u7684\u95ee\u9898\uff0c\u53c8\u63d0\u51faD_IOU\u635f\u5931\uff0c\u5728DIOU\u635f\u5931\u4e2d\u5c31\u8003\u8651\u7684\u771f\u5b9e\u6846\u7684\u4e2d\u5fc3\u70b9\u8ddd\u79bb\uff0c\u91cd\u53e0\u9762\u79ef\u548c\u957f\u5bbd\u6bd4\u7b49\u56e0\u7d20\uff1a dis_c\u8d8a\u5c0f\u8bf4\u660eC\u7684\u9762\u79ef\u8d8a\u5c0f\uff0cdis\u8d8a\u5c0f\u8bf4\u660e\u4e24\u4e2a\u6846\u8ddd\u79bb\u8d8a\u8fd1\u3002","title":"3.3 DIOU\u635f\u5931"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#34-ciou","text":"CIOU\u5728DIOU\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u5f71\u54cd\u56e0\u5b50\uff0c\u5c06\u68c0\u6d4b\u6846\u4e0e\u771f\u5b9e\u6846\u7684\u957f\u5bbd\u90fd\u8003\u8651\u8fdb\u53bb\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a \u5176\u4e2dv\u662f\u8861\u91cf\u957f\u5bbd\u6bd4\u4e00\u81f4\u6027\u7684\u53c2\u6570\uff0c\u5b9a\u4e49\u4e3a\uff1a yoloV4\u4e2d\u5728\u56de\u5f52\u8fb9\u6846\u65f6\uff0c\u91c7\u7528CIOU_loss,\u4f7f\u5f97\u68c0\u6d4b\u6846\u7684\u7cbe\u5ea6\u66f4\u9ad8\u4e00\u4e9b\u3002","title":"3.4 CIOU\u635f\u5931"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/05-yoloV4%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#4","text":"\u4e0eyoloV3\u7c7b\u4f3c\uff0c\u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u6211\u4eec\u5c06\u56fe\u7247resize\u6210608x608\u7684\u5927\u5c0f\uff0c\u9001\u5165\u5230yoloV4\u7f51\u7edc\u4e2d\uff0c\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e2d\u5305\u542b\u8fb9\u6846\u5750\u6807\uff084\u4e2a\u6570\u503c\uff09\uff0c\u8fb9\u6846\u7f6e\u4fe1\u5ea6\uff081\u4e2a\u6570\u503c\uff09\uff0c\u5bf9\u8c61\u7c7b\u522b\u7684\u6982\u7387\uff08\u5bf9\u4e8eCOCO\u6570\u636e\u96c6\uff0c\u670980\u79cd\u5bf9\u8c61\uff09\u3002\u6211\u4eec\u7b5b\u9009\u51fa\u7f6e\u4fe1\u5ea6\u8f83\u9ad8\u7684\u68c0\u6d4b\u7ed3\u679c\uff08>0.5\uff09\uff0c\u5728\u91c7\u7528DIOU-NMS\u7b97\u6cd5\u9009\u51fa\u6700\u6709\u53ef\u80fd\u662f\u76ee\u6807\u7684\u7ed3\u679c\uff0c\u5c31\u5b8c\u6210\u4e86\u76ee\u6807\u7684\u68c0\u6d4b\u3002 \u603b\u7ed3 \u4e86\u89e3yoloV4\u7f51\u7edc\u67b6\u6784 \u200b \u8f93\u5165\uff0cbackbone\uff0cneck\uff0c\u8f93\u51fa \u77e5\u9053\u76ee\u6807\u68c0\u6d4b\u4e2d\u5e38\u89c1\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5 \u200b \u9a6c\u8d5b\u514b\u589e\u5f3a:\u5c0f\u76ee\u6807\u68c0\u6d4b \u77e5\u9053yoloV4\u7684\u635f\u5931\u51fd\u6570\u7684\u8ba1\u7b97\u65b9\u6cd5 IOU_loss,GIOu_loss,DIOU_loss,CIOU_loss","title":"4 \u6a21\u578b\u9884\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/","text":"2.7.yoloV5\u7b97\u6cd5\u8be6\u89e3\u53ca\u6848\u4f8b \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3yoloV5\u7f51\u7edc\u67b6\u6784 \u77e5\u9053yoloV5\u4e2d\u4f7f\u7528\u7684\u7b56\u7565 \u80fd\u591f\u4f7f\u7528yoloV5\u6846\u67b6\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b **YOLO v5**\u662f\u4ee5\u4e00\u6b3e\u53eb\u505aiDetection\u7684APP\u8fdb\u5165\u4eba\u4eec\u89c6\u91ce\u7684\uff0c\u8be5APP\u5c31\u662f\u4f7f\u7528V5\u8fdb\u884c\u68c0\u6d4b\u7684\u3002\u4f7f\u7528iOS\u7cfb\u5217\u7684\u540c\u5b66\u4eec\uff0c\u5c31\u53ef\u4ee5\u7acb\u523b\u53bb\u4e0b\u8f7d\u8fd9\u4e2aapp\uff0c\u8bd5\u4e00\u4e0b\u8fd9\u4e2aAPP\u7684\u68c0\u6d4b\u6548\u679c\u548c\u901f\u5ea6\u3002app\u9876\u7aef\u6709\u4e00\u7cfb\u5217\u7684\u9009\u9879\uff0c\u6765\u8c03\u8282app\u4f7f\u7528\u7684\u6a21\u578b\u7684\u5927\u5c0f\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8f83\u5927\u7684\u6a21\u578b\u5b9e\u65f6\u6027\u5dee\u4f46\u7cbe\u5ea6\u9ad8\uff0c\u8f83\u5c0f\u7684\u6a21\u578b\u5b9e\u65f6\u6027\u597d\u4f46\u7cbe\u5ea6\u5dee\u3002\u53e6\u5916\u4e5f\u53ef\u4ee5\u8c03\u8282APP\u4e0b\u7aef\u7684\u7f6e\u4fe1\u5ea6\u548cIOU\u9608\u503c\u6765\u8c03\u6574\u68c0\u6d4b\u7ed3\u679c\u3002 1. \u7b97\u6cd5\u7b80\u4ecb \u00b6 YOLO\u4e4b\u7236\u57282020\u5e74\u521d\u5ba3\u5e03\u9000\u51faCV\u754c\uff0c4\u6708\u4efdYOLOv4\u6a2a\u7a7a\u51fa\u4e16\uff0c\u5e76\u6536\u5230\u539f\u4f5c\u8005\u7684\u8ba4\u53ef\u3002\u4ec5\u4e24\u4e2a\u6708\u4e4b\u540e\uff0cyoloV5\u7684\u4ee3\u7801\u5f00\u6e90\uff0c\u81ea\u6b64YOLO\u7cfb\u5217\u8fdb\u5165\u5230V5\u7684\u65f6\u4ee3\u3002yoloV5\u76f8\u6bd4\u4e8e\u4e4b\u524d\u7684yolo\u6700\u5927\u7684\u597d\u5904\u662f\u57fa\u4e8epytorch\u5b9e\u73b0\uff0c\u5f88\u5bb9\u6613\u88ab\u7b97\u6cd5\u5de5\u7a0b\u5e08\u4f7f\u7528\u3002\u5230\u76ee\u524d\u4e3a\u6b62yoloV5\u5df2\u8fed\u4ee3\u4e86\u591a\u4e2a\u7248\u672c\uff0c2022\u5e742\u6708\u6cd5\u53d1\u5e03\u4e86\u6700\u65b0\u76846.1\u7248\u672c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ee56.1\u7248\u672c\u4e3a\u4f8b\uff0c\u7ed9\u5927\u5bb6\u4ecb\u7ecdV5\u7b97\u6cd5\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u6570\u636e\u589e\u5f3a\uff0c\u540e\u5904\u7406\u4ee5\u53ca\u635f\u5931\u51fd\u6570\uff0c\u5bf9\u6574\u4e2a\u7f51\u7edc\u7684\u57fa\u7840\u77e5\u8bc6\u8fdb\u884c\u5206\u6790\uff1a yoloV5\u5305\u542b\u591a\u79cd\u7c7b\u578b\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u6309\u6a21\u578b\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u662fyoloV5n\uff0cyoloV5s\uff0cyoloV5m\uff0cyoloV5l\uff0cyoloV5x\u3002\u5176\u4e2dYoloV5n\u7f51\u7edc\u662fYolov5\u7cfb\u5217\u4e2d**\u6df1\u5ea6\u6700\u5c0f**\uff0c\u7279\u5f81\u56fe\u7684**\u5bbd\u5ea6\u6700\u5c0f**\u7684\u7f51\u7edc\u3002\u540e\u9762\u76844\u79cd\u90fd\u662f\u5728\u6b64\u57fa\u7840\u4e0a\u4e0d\u65ad\u52a0\u6df1\uff0c\u4e0d\u65ad\u52a0\u5bbd\u5f97\u5230\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u8f83\u5927\u6a21\u578b\u5b9e\u65f6\u6027\u5dee\u4f46\u7cbe\u5ea6\u9ad8\uff0c\u8f83\u5c0f\u7684\u6a21\u578b\u5b9e\u65f6\u6027\u597d\u4f46\u7cbe\u5ea6\u5dee\u3002 2.\u5f00\u6e90\u6846\u67b6 \u00b6 \u6211\u4eec\u4eceyoloV5\u7684github\u4e2d\u5c06\u5f00\u6e90\u4ee3\u7801clone\u4e0b\u6765\uff0c\u5176\u4ee3\u7801\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a\u5305\u62ec\u7f51\u7edc\u7ed3\u6784\uff0c\u8bad\u7ec3\uff0c\u9884\u6d4b\u7684\u76f8\u5173\u5185\u5bb9\uff0c \u5c06\u4ee3\u7801\u83b7\u53d6\u5230\u672c\u5730\u540e\uff0c\u9700\u8981\u5b89\u88c5\u76f8\u5e94\u7684\u5de5\u5177\u5305\uff0ccd\u5230yoloV5-master\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u521b\u5efa\u865a\u62df\u73af\u5883\u8981\u6c42python>3.7\u4e14torch>1.7\uff0c\u6267\u884c\uff1a pip install -r requirements.txt \u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u5373\u53ef\u8fd0\u884c\u4ee3\u7801\u3002 \u5728\u4ecb\u7ecd\u7f51\u7edc\u4e4b\u524d\u6211\u4eec\u5148\u6765\u770b\u4e0b\u9884\u6d4b\u7ed3\u679c\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u7684yolov5s\u6765\u8fdb\u884c\u9884\u6d4b\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\uff1ayolov5-master/yolov5.ipynb\u6587\u4ef6\u4e2d # \u5bfc\u5165\u9884\u6d4b\u5de5\u5177 import detect # \u8fd0\u884c\u9884\u6d4b\u7a0b\u5e8f\uff1a\u6307\u5b9a\u8981\u9884\u6d4b\u7684\u56fe\u7247\uff0c\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53ca\u662f\u5426\u663e\u793a\u56fe\u7247 detect . run ( source = \"data/images/img3.jpg\" , weights = 'yolov5s.pt' , view_img = False ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a Fusing layers ... Model Summary : 213 layers , 7225885 parameters , 0 gradients , 16.5 GFLOPs WARNING : -- img - size ( 640 , 640 ) must be multiple of max stride 32 , updating to [ 640 , 640 ] image 1 / 1 / Users / mac / Desktop / \u8ba1\u7b97\u673a\u89c6\u89c9 / yolov5 - master / data / images / img3 . jpg : 480 x640 4 persons , 1 chair , Done . ( 0.233 s ) Speed : 1.5 ms pre - process , 232.8 ms inference , 3.4 ms NMS per image at shape ( 1 , 3 , 640 , 640 ) Results saved to runs / detect / exp7 \u4ece\u4e0a\u8ff0\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6574\u4e2a\u8fc7\u7a0b\u662f\u52a0\u8f7d\u6a21\u578b\uff0c\u5c06\u56fe\u7247\u8c03\u6574\u4e3a640*640\u7684\u5927\u5c0f\uff0c\u8fdb\u884c\u9884\u6d4b\u5e76\u540e\u5904\u7406\uff0c\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728runs/detect/exp7\u6587\u4ef6\u5939\u4e2d\uff0c\u68c0\u6d4b\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u63a5\u4e0b\u6765\u6211\u4eec\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e0byoloV5\u5177\u4f53\u662f\u5982\u4f55\u6765\u5b8c\u6210\u76ee\u6807\u68c0\u6d4b\u7684\u3002 3.\u6a21\u578b\u8be6\u89e3 \u00b6 3.1 \u6a21\u578b\u7ed3\u6784 \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u9996\u5148\u6765\u770b\u4e0byoloV5\u7684\u7f51\u7edc\u67b6\u6784\uff0c\u6211\u4eec\u4f9d\u7136\u628a\u5b83\u5206\u6210\u8f93\u5165\uff0cbackbone,Neck\u548c\u8f93\u51fa\u7aef\u56db\u90e8\u5206\uff0c\u5982\u4e0b\u6240\u793a\uff1a Yolov5\u7684\u6574\u4f53\u67b6\u6784\u4e0eYoloV4\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff0c\u5728V5\u4e2d\u4f7f\u7528\u7684\u662fleaky_relu\u6fc0\u6d3b\u51fd\u6570\uff0c\u6ca1\u6709\u4f7f\u7528mish\u6fc0\u6d3b\u51fd\u6570. \u57fa\u672c\u7ec4\u4ef6\uff1a CBL\uff1a\u7531Conv+Bn+Leaky_relu\u6fc0\u6d3b\u51fd\u6570\u4e09\u8005\u7ec4\u6210\u3002 Res unit\uff1a\u501f\u9274Resnet\u7f51\u7edc\u4e2d\u7684\u6b8b\u5dee\u7ed3\u6784\uff0c\u8ba9\u7f51\u7edc\u53ef\u4ee5\u6784\u5efa\u7684\u66f4\u6df1\u3002 CSP1_X\uff1a\u7531\u4e09\u4e2a\u5377\u79ef\u5c42\u548cX\u4e2aRes unint\u6a21\u5757Concate\u7ec4\u6210\uff0c\u6a21\u578b\u5b9e\u73b0\u4f7f\u7528C3\u6765\u5b8c\u6210\uff0c\u5c06shortcut\u8bbe\u4e3aTrue\u5373\u53ef CSP2_X\uff1a\u8fd9\u4e2a\u5728V4\u4e2d\u6ca1\u6709\u4f7f\u7528\uff0c\u7531\u4e09\u4e2a\u5377\u79ef\u5c42\u548c2X\u4e2aRes unint\u6a21\u5757Concate\u7ec4\u6210\uff0c\u6a21\u578b\u5b9e\u73b0\u4f7f\u7528C3\u6765\u5b8c\u6210\uff0c\u5c06shortcut\u8bbe\u4e3aFalse\u5373\u53ef SPPF\uff1aV4\u4e2d\u4f7f\u7528\u7684SPP\u8fdb\u884c\u878d\u5408\uff0c\u5728\u8fd9\u91cc\u91c7\u75281x1\u5377\u79ef\u548c3\u4e2a\u4e32\u8054\u76845x5\u7684\u6700\u5927\u6c60\u5316\u7684\u65b9\u5f0f\uff0c\u8fdb\u884c\u591a\u5c3a\u5ea6\u878d\u5408\u3002 \u5176\u4ed6\u57fa\u7840\u64cd\u4f5c\uff1a Concat\uff1a\u5f20\u91cf\u62fc\u63a5\uff0c\u901a\u9053\u7ef4\u5ea6\u4f1a\u6269\u5145\u3002 Add\uff1a\u5f20\u91cf\u76f8\u52a0\uff0c\u4e0d\u4f1a\u6269\u5145\u7ef4\u5ea6\u3002 \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u6a21\u578b\u6bcf\u4e00\u90e8\u5206\u7684\u4f5c\u7528\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u8f93\u5165\u7aef\uff08input\uff09,backbone, neck, \u8f93\u51fa\u7aef\uff08output\uff09\u56db\u90e8\u5206\u4ecb\u7ecdyoloV4\u7f51\u7edc\u7684\u5185\u5bb9\u3002 3.1.1 \u8f93\u5165\uff08input\uff09 \u00b6 yoloV5\u7f51\u7edc\u7684\u8f93\u5165\u4f9d\u7136\u8981\u6c42\u662f32\u7684\u500d\u6570\uff0c\u4f46\u5927\u5c0f\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5728yoloV5\u4e2d\u9ed8\u8ba4\u662f640\u00d7640\uff0c\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u8c03\u6574\u3002V5\u7684\u9884\u6d4b\u9636\u6bb5\u4e0d\u8981\u6c42\u9001\u5165\u7f51\u7edc\u4e2d\u7684\u56fe\u50cf\u662f\u65b9\u5f62\u7684\uff0c\u8fd9\u8981\u4fdd\u8bc1\u9ad8\u5bbd\u90fd\u4e3a32\u7684\u500d\u6570\u5373\u53ef\uff0c\u8c03\u6574\u7b56\u7565\u6211\u4eec\u4ecb\u7ecd\u5982\u4e0b\uff1a \u5728\u8fd9\u91cc\u6211\u4eec\u5148\u56de\u987e\u4e0bV3V4\u4e2d\u7684\u505a\u6cd5\uff0c\u4e5f\u662fV5\u5728\u8bad\u7ec3\u65f6\u5bf9\u8f93\u5165\u56fe\u50cf\u5927\u5c0f\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u4f8b\u5982\uff1a1200x800\u7684\u539f\u59cb\u56fe\u50cf\u76f4\u63a5\u7f29\u653e\u586b\u5145\u4e3a640x640\u7684\u5927\u5c0f\uff0c\u5177\u4f53\u64cd\u4f5c\u957f\u8fb91200\u76f4\u63a5\u7f29\u653e\u4e3a640\u6bd4\u4f8b\u4e3a0.53\uff0c\u77ed\u8fb9\u7f29\u653e\u4e3a800x0.53=426,426\u4e0d\u8db3640\uff0c\u5219\u5728\u77ed\u8fb9\u7684\u65b9\u5411\u4e24\u4fa7\u5206\u522b\u586b\u5145\uff08640-426\uff09/2 =107\u4e2a\u7070\u5ea6\u50cf\u7d20\uff08114\uff0c114\uff0c114\uff09\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u90a3\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u5728\u6bcf\u4e2abatch\u8fdb\u884c\u8bad\u7ec3\u65f6\u9001\u5165\u7684\u56fe\u50cf\u5927\u5c0f\u662f\u4e00\u6837\u7684\u3002\u4f46\u662f\u5728\u9884\u6d4b\u65f6\u4e00\u822c\u662f\u9001\u5165\u4e00\u5e45\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b\uff0c\u800c\u4e0a\u8ff0\u8fd9\u79cd\u586b\u5145\u65b9\u5f0f\u5728\u77ed\u8fb9\u586b\u5145\u4e86\u8f83\u591a\u7684\u80cc\u666f\u50cf\u7d20\uff0c\u5b58\u5728\u4fe1\u606f\u5197\u4f59\uff0c\u5f71\u54cd\u63a8\u7406\u901f\u5ea6\u3002\u6240\u4ee5\u5728V5\u4e2d\u8fdb\u884c\u9884\u6d4b\u65f6\u4f7f\u7528\u4e86\u81ea\u9002\u5e94\u7684\u586b\u5145\u65b9\u5f0f\uff0c\u5177\u4f53\u64cd\u4f5c\u957f\u8fb91200\u76f4\u63a5\u7f29\u653e\u4e3a640\u6bd4\u4f8b\u4e3a0.53\uff0c\u77ed\u8fb9\u7f29\u653e\u4e3a800x0.53=426,426\u4e0d\u80fd\u88ab32\u6574\u9664\u6240\u4ee5\u9700\u8981\u5728\u8fdb\u884c\u586b\u5145\uff0c\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u627e\u5230\u79bb426\u6700\u8fd1\u768432\u7684\u6574\u6570\u500d\u7684\u503c\u5373426+\uff08640-426\uff09%32=448, \u5219\u5728\u77ed\u8fb9\u7684\u65b9\u5411\u4e24\u4fa7\u5206\u522b\u586b\u5145\uff08448-426\uff09/2 =11\u4e2a\u7070\u5ea6\u50cf\u7d20\uff08114\uff0c114\uff0c114\uff09\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u77ed\u8fb9\u7684\u586b\u5145\u6bd4\u539f\u59cb\u7684\u586b\u5145\u65b9\u5f0f\u5c0f\u4e86\u5f88\u591a\uff0c\u5728\u63a8\u7406\u65f6\uff0c\u8ba1\u7b97\u91cf\u4e5f\u4f1a\u51cf\u5c11\uff0c\u76ee\u6807\u68c0\u6d4b\u7684\u901f\u5ea6\u4f1a\u5f97\u5230\u63d0\u5347\u3002 \u5176\u4ed6\u7684\u4e0eyoloV4\u7c7b\u4f3c\uff0cV5\u5728\u8f93\u5165\u7aef\u91c7\u7528\u53cd\u8f6c\u3001\u88c1\u5207\u3001\u65cb\u8f6c\uff0cCutMix\u548c\u9a6c\u8d5b\u514b\u6570\u636e\u589e\u5f3a\uff08Mosaic data augmentation\uff09\u7b49\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\u3002 3.1.2 backbone \u00b6 yoloV5\u7f51\u7edc\u7684backbone\u548cyoloV4\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u4f7f\u7528\u7684\u662fCSP\u7ed3\u6784\uff0c\u5728yoloV5\u4e2d\u90fd\u662f\u4f7f\u7528\u7684leakyrelu\u6fc0\u6d3b\u51fd\u6570\uff0c\u6ca1\u6709\u4f7f\u7528mish\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a yoloV4\u4e2d\u4e00\u5171\u67095\u4e2aCSP\uff0c\u8f93\u5165\u56fe\u50cf\u662f608x608\uff0c\u6240\u4ee5\u7279\u5f81\u56fe\u53d8\u5316\u7684\u89c4\u5f8b\u662f\uff1a608->304->152->76->38->19\uff0c\u7ecf\u8fc75\u6b21CSP\u6a21\u5757\u540e\u5f97\u523019x19\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 \u800c\u5728V5\u4e2d\u964d\u91c7\u6837\u901a\u8fc7CBL\u6765\u5b8c\u6210\uff0c\u8f93\u5165\u56fe\u50cf\u662f640x640,\u6240\u4ee5\u7279\u5f81\u56fe\u53d8\u5316\u7684\u89c4\u5f8b\u662f\uff1a640->320->160->80->40->20\uff0c\u7ecf\u8fc75\u6b21CBL\u6a21\u5757\u540e\u5f97\u523020x20\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 \u53e6\u5916\u5c06V4\u4e2d\u4f7f\u7528\u7684\u662fSPP\uff0c\u800c\u5728V5\u4e2d\u4f7f\u7528\u7684\u662fSPPF\uff0c\u5982\u4e0b\u6240\u793a\uff1a SPP\u5c42\u4f7f\u75285x5,9x9,13x13\u6c60\u5316\u7a97\u53e3\u5bf9\u7279\u5f81\u8fdb\u884c\u878d\u5408\uff0c\u5728\u9001\u5165\u7f51\u7edcneck\u4e4b\u524d\u80fd\u591f\u5f97\u5230\u66f4\u591a\u7684\u4fe1\u606f\u3002\u800c\u5728SPPF\u4f7f\u75283\u4e2a5\u00d75\u7684\u6700\u5927\u6c60\u5316\uff0c\u4ee3\u66ff\u539f\u6765\u76845\u00d75\u30019\u00d79\u300113\u00d713\u6700\u5927\u6c60\u5316\uff0c\u5728\u4fdd\u8bc1\u51c6\u786e\u7387\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u9ad8\u4e86\u8ba1\u7b97\u901f\u5ea6\u3002 3.1.3 neck \u00b6 yolov5\u4e2d\u7684\u7279\u5f81\u878d\u5408\u65b9\u5f0f\u4e0eV4\u7684\u878d\u5408\u65b9\u5f0f\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5c06\u5728V4\u4e2d\u4f7f\u7528\u7684\u90e8\u5206CBL\u66ff\u6362\u6210\u4e86CSP2_X\u6a21\u5757\uff0c\u589e\u5f3a\u4e86\u7f51\u7edc\u7684\u7279\u5f81\u878d\u5408\u80fd\u529b\u3002\u5982\u4e0b\u6240\u793a\uff1a CSP2_X\u7684\u6a21\u5757\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a 3.1.4 \u8f93\u51fa\uff08output\uff09 \u00b6 V5\u7684\u8f93\u51fa\u7aef\u4e0eV4V3\u7684\u8f93\u51fa\u7aef\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u7ed3\u679c\uff0c\u5177\u4f53\u4e0d\u518d\u8d58\u8ff0\u3002 3.2 \u6a21\u578b\u8bad\u7ec3 \u00b6 yoloV5\u4e2d\u7684\u6a21\u578b\u8bad\u7ec3\u548cYoloV4\u662f\u7c7b\u4f3c\u7684\u8bad\u7ec3\u8fc7\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u635f\u5931\u51fd\u6570\u4f7f\u7528GIOU\u635f\u5931\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6b63\u6837\u672c\u7684\u6570\u91cf\uff0c\u53ea\u4e0d\u8fc7\u5728\u8fdb\u884c\u6b63\u8d1f\u6837\u672c\u8bbe\u8ba1\u65f6\u8fdb\u884c\u4e86\u8c03\u6574\u3002 3.2.1 anchor\u7684\u81ea\u52a8\u8c03\u6574 \u00b6 yoloV3\u548cV4\u4e2d\u7684anchor\u662f\u9884\u5148\u4f7f\u7528kmeans\u5b9a\u4e49\u597d\u7684\uff0c\u800cyoloV5\u4e2d\u7684anchor\u662f\u57fa\u4e8e\u8bad\u7ec3\u6570\u636e\u81ea\u52a8\u5b66\u4e60\u7684\u3002\u5728Yolov3\u3001Yolov4\u4e2d\uff0c\u8bad\u7ec3\u4e0d\u540c\u7684\u6570\u636e\u96c6\u65f6\uff0c\u8ba1\u7b97\u521d\u59cb\u951a\u6846\u7684\u503c\u662f\u901a\u8fc7\u5355\u72ec\u7684\u7a0b\u5e8f\u8fd0\u884c\u7684\u3002\u4f46Yolov5\u4e2d\u5c06\u6b64\u529f\u80fd\u5d4c\u5165\u5230\u4ee3\u7801\u4e2d\uff0c\u6bcf\u6b21\u8bad\u7ec3\u65f6\uff0c\u81ea\u9002\u5e94\u7684\u8ba1\u7b97\u4e0d\u540c\u8bad\u7ec3\u96c6\u4e2d\u7684\u6700\u4f73\u951a\u6846\u503c\u3002 3.2.2 \u6b63\u8d1f\u6837\u672c\u7684\u8bbe\u8ba1 \u00b6 \u5728yolo v3v4\u4e2d\uff0c\u4fdd\u8bc1\u6bcf\u4e2agt bbox\u6709\u4e00\u4e2a\u552f\u4e00\u7684anchor\u8fdb\u884c\u5bf9\u5e94\uff0c\u5339\u914d\u89c4\u5219\u5c31\u662fIOU\u6700\u5927\uff0c\u5e76\u4e14\u67d0\u4e2agt\u4e0d\u80fd\u5728\u4e09\u4e2a\u9884\u6d4b\u5c42\u7684\u67d0\u51e0\u5c42\u4e0a\u540c\u65f6\u8fdb\u884c\u5339\u914d\u3002\u4e0d\u8003\u8651\u4e00\u4e2agt bbox\u5bf9\u5e94\u591a\u4e2aanchor\u7684\u573a\u5408\uff0c\u4e5f\u4e0d\u8003\u8651anchor\u662f\u5426\u8bbe\u7f6e\u5408\u7406\u3002 \u800c\u5728yolov5\u91c7\u7528\u4e86\u8de8\u7f51\u683c\u5339\u914d\u89c4\u5219\uff0c\u589e\u52a0\u6b63\u6837\u672canchor\u6570\u76ee\u7684\u505a\u6cd5\uff1a\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u8f93\u51fa\u5c42\uff0c\u76f4\u63a5\u91c7\u7528shape\u89c4\u5219\u5339\u914d\uff0c\u8ba1\u7b97\u5f53\u524d\u7684\u76ee\u6807\u6846GT\u5bbd\u9ad8\u548c\u6bcf\u4e00\u5c3a\u5ea6\u7684anchor\u5bbd\u9ad8\u7684\u6bd4\u4f8b\uff0c\u5982\u679c\u5bbd\u9ad8\u6bd4\u4f8b\u5c0f\u4e8e\u8bbe\u5b9a\u9608\u503c\uff0c\u5219\u8bf4\u660e\u8be5bbox\u548canchor\u5339\u914d\u5ea6\u8db3\u591f\uff0c\u5c06\u8be5anchor\u5728\u8be5\u5c3a\u5ea6\u4e2d\u8ba4\u4e3a\u662f\u6b63\u6837\u672c\u3002\u7136\u540e\u8ba1\u7b97GT\u843d\u5728\u54ea\u4e2a\u7f51\u683c\u5185\uff0c\u540c\u65f6\u5229\u7528\u56db\u820d\u4e94\u5165\u89c4\u5219\uff0c\u627e\u51fa\u6700\u8fd1\u7684\u4e24\u4e2a\u7f51\u683c\uff0c\u5c06\u8fd9\u4e09\u4e2a\u7f51\u683c\u90fd\u8ba4\u4e3a\u662f\u8d1f\u8d23\u9884\u6d4b\u8be5bbox\u7684\uff0c\u53ef\u4ee5\u53d1\u73b0\u7c97\u7565\u4f30\u8ba1\u6b63\u6837\u672c\u6570\u76f8\u6bd4\u524dyolo\u7cfb\u5217\uff0c\u589e\u52a0\u4e86\u4e09\u500d\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7eff\u70b9\u8868\u793a\u8be5gt bbox\u4e2d\u5fc3\uff0c\u73b0\u5728\u9700\u8981\u989d\u5916\u8003\u8651\u51762\u4e2a\u6700\u8fd1\u7684\u90bb\u57df\u7f51\u683c\u7684anchor\u4e5f\u4f5c\u4e3a\u8be5gt bbox\u7684\u6b63\u6837\u672c\uff0c\u660e\u663e\u589e\u52a0\u4e86\u6b63\u6837\u672c\u7684\u6570\u91cf\u3002 3.3 \u6a21\u578b\u9884\u6d4b \u00b6 \u4e0eyoloV4\u7c7b\u4f3c\uff0c\u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u6211\u4eec\u5c06\u56fe\u7247resize\u540e\uff0c\u9001\u5165\u5230yoloV5\u7f51\u7edc\u4e2d\uff0c\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e2d\u5305\u542b\u8fb9\u6846\u5750\u6807\uff084\u4e2a\u6570\u503c\uff09\uff0c\u8fb9\u6846\u7f6e\u4fe1\u5ea6\uff081\u4e2a\u6570\u503c\uff09\uff0c\u5bf9\u8c61\u7c7b\u522b\u7684\u6982\u7387\uff08\u5bf9\u4e8eCOCO\u6570\u636e\u96c6\uff0c\u670980\u79cd\u5bf9\u8c61\uff09\u3002\u6211\u4eec\u7b5b\u9009\u51fa\u7f6e\u4fe1\u5ea6\u8f83\u9ad8\u7684\u68c0\u6d4b\u7ed3\u679c\uff08>0.5\uff09\uff0c\u5728\u91c7\u7528NMS\u7b97\u6cd5\u9009\u51fa\u6700\u6709\u53ef\u80fd\u662f\u76ee\u6807\u7684\u7ed3\u679c\uff0c\u5c31\u5b8c\u6210\u4e86\u76ee\u6807\u7684\u68c0\u6d4b\u3002 4.\u6848\u4f8b\u5b9e\u73b0 \u00b6 4.1 \u6570\u636e\u6784\u5efa \u00b6 4.1.1 \u6807\u6ce8\u65b9\u6cd5 \u00b6 \u6839\u636e\u8981\u5b9e\u73b0\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u9700\u8981\u6536\u96c6\u5927\u91cf\u7684\u56fe\u50cf\u6570\u636e\uff0c\u4e00\u822c\u6765\u8bf4\u5305\u542b\u4e24\u5927\u6765\u6e90\uff0c\u4e00\u90e8\u5206\u662f\u7f51\u7edc\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u5f00\u6e90\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u767e\u5ea6\u3001Google\u56fe\u7247\u722c\u866b\u5f97\u5230\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u7528\u6237\u573a\u666f\u7684\u89c6\u9891\u5f55\u50cf\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u6570\u636e\u91cf\u4f1a\u66f4\u5927\u3002\u5bf9\u4e8e\u5f00\u6e90\u6570\u636e\u6211\u4eec\u4e0d\u9700\u8981\u8fdb\u884c\u6807\u6ce8\uff0c\u800c\u722c\u53d6\u7684\u6570\u636e\u548c\u89c6\u9891\u5f55\u50cf\u9700\u8981\u8fdb\u884c\u6807\u6ce8\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f00\u6e90\u5de5\u5177labelImg\u8fdb\u884c\u6807\u6ce8\uff0c\u5b89\u88c5\u65b9\u6cd5\u662f\uff1a pip install labelImg \u5b89\u88c5\u5b8c\u6210\u540e\u518d\u7ec8\u7aef\u4f7f\u7528\uff1alabelImg\u5373\u53ef\u542f\u52a8\u6807\u6ce8\u7a0b\u5e8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u6807\u6ce8\u597d\u4fe1\u606f\u540e\u70b9\u51fb\u4fdd\u5b58\u5373\u53ef\u5c06\u6807\u6ce8\u4fe1\u606f\u6dfb\u52a0\u5230\u5bf9\u4e00\u4e2a\u7684txt\u6587\u4ef6\u4e2d\uff0c\u4e3b\u8981\u662f2\u4e2a\u4eba\u548c\u4e00\u4e2a\u9886\u5e26\uff0c\u53e6\u5916\u8fd8\u4f1a\u751f\u6210\u4ee5class.txt\u4fdd\u5b58\u76ee\u6807\u7684\u7c7b\u522b\u4fe1\u606f\u3002 \u6807\u6ce8\u4fe1\u606f\uff1a\u7c7b\u522b\uff0c\u4e2d\u5fc3\u70b9x,y\u5750\u6807\uff0c\u5bbd\u9ad8\uff08\u5f52\u4e00\u5316\u540e\u7684\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5c06\u6807\u6ce8\u597d\u7684\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u6587\u4ef6\u548c\u6587\u672c\u6807\u7b7e\u5206\u522b\u5b58\u653e\u5728\u81ea\u5df1\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u6211\u4eec\u4ee5coco128\u6570\u636e\u4e3a\u4f8b\uff1a images\u6587\u4ef6\u5939\u4e2d\u5b58\u653e\u56fe\u7247\u6587\u4ef6\uff0clabels\u4e2d\u5b58\u653e\u6807\u7b7e\u6587\u4ef6txt\u3002 4.1.2 \u6570\u636e\u52a0\u8f7d \u00b6 \u5728yoloV5\u7684\u6846\u67b6\u4e2d\u6211\u4eec\u8fdb\u884c\u6570\u636e\u52a0\u8f7d\u65f6\u53ea\u9700\u914d\u7f6e\u597dyaml\u6587\u4ef6\u5373\u53ef\uff0c\u6211\u4eec\u4ee5coco128\u4e3a\u4f8b\uff0cCOCO128\u6570\u636e\u96c6\u662f\u7531COCO\u6570\u636e\u96c6\u7684\u524d128\u5f20\u56fe\u50cf\u7ec4\u6210\u7684\u5c0f\u6570\u636e\u96c6\u3002\u8fd9128\u5f20\u56fe\u50cf\u7528\u4e8e\u8bad\u7ec3\u548c\u9a8c\u8bc1\u3002\u5728\u8fd9\u91cc\u521b\u5efacoco128.yaml\u6587\u4ef6\uff0c\u9700\u8981\u914d\u7f6e\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a # \u6570\u636e\u5b58\u653e\u8def\u5f84\u7684\u914d\u7f6e path : ../ datasets / coco128 # \u6839\u76ee\u5f55 train : images / train2017 # \u8bad\u7ec3\u96c6\u6570\u636e\u7684\u76ee\u5f55\uff08\u6839\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u7ecf\uff09 val : images / train2017 # \u9a8c\u8bc1\u96c6\u6570\u636e\u7684\u76ee\u5f55\uff08\u6839\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u7ecf\uff09\uff0c\u5728\u8fd9\u91cc\u9a8c\u8bc1\u96c6\u548c\u8bad\u7ec3\u96c6\u662f\u540c\u4e00\u4e2a test : # \u6d4b\u8bd5\u96c6\uff0c\u53ef\u9009 # \u6570\u636e\u96c6\u7684\u7c7b\u578b\u4fe1\u606f nc : 80 # \u7c7b\u522b\u4e2a\u6570 names : [ 'person' , 'bicycle' , 'car' , 'motorcycle' , 'airplane' , 'bus' , 'train' , 'truck' , 'boat' , 'traffic light' , 'fire hydrant' , 'stop sign' , 'parking meter' , 'bench' , 'bird' , 'cat' , 'dog' , 'horse' , 'sheep' , 'cow' , 'elephant' , 'bear' , 'zebra' , 'giraffe' , 'backpack' , 'umbrella' , 'handbag' , 'tie' , 'suitcase' , 'frisbee' , 'skis' , 'snowboard' , 'sports ball' , 'kite' , 'baseball bat' , 'baseball glove' , 'skateboard' , 'surfboard' , 'tennis racket' , 'bottle' , 'wine glass' , 'cup' , 'fork' , 'knife' , 'spoon' , 'bowl' , 'banana' , 'apple' , 'sandwich' , 'orange' , 'broccoli' , 'carrot' , 'hot dog' , 'pizza' , 'donut' , 'cake' , 'chair' , 'couch' , 'potted plant' , 'bed' , 'dining table' , 'toilet' , 'tv' , 'laptop' , 'mouse' , 'remote' , 'keyboard' , 'cell phone' , 'microwave' , 'oven' , 'toaster' , 'sink' , 'refrigerator' , 'book' , 'clock' , 'vase' , 'scissors' , 'teddy bear' , 'hair drier' , 'toothbrush' ] # \u7c7b\u522b\u540d\u79f0 \u6570\u636e\u96c6\u914d\u7f6e\u6587\u4ef6,\u5b9a\u4e49\u4e86: \u8bad\u7ec3\u56fe\u50cf\u7684\u8def\u5f84 \u9a8c\u8bc1\u56fe\u50cf\u7684\u8def\u5f84 \u7c7b\u7684\u6570\u91cf \u7c7b\u540d\u79f0\u7684\u5217\u8868 \u914d\u7f6e\u597d\u8fd9\u4e9b\u4fe1\u606f\u540eyoloV5\u7684\u6846\u67b6\u4f1a\u81ea\u52a8\u7684\u52a0\u8f7d\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\u3002 4.2 \u6a21\u578b\u9009\u62e9\uff08\u6784\u5efa\uff09 \u00b6 \u5728yoloV5\u4e2d\u6784\u5efa\u7f51\u7edc\u65f6\u901a\u8fc7yaml\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\uff0c\u7528\u6765\u83b7\u53d6\u4e0d\u540c\u5927\u5c0f\u7c7b\u578b\u7684\u6a21\u578b\uff0c\u914d\u7f6e\u6587\u4ef6\u5728\u6587\u4ef6\u5939yolov5-master/models\u6587\u4ef6\u5939\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a\u5305\u542byoloV5n\uff0cyoloV5s\uff0cyoloV5m\uff0cyoloV5l\uff0cyoloV5x\u7684\u914d\u7f6e\u4fe1\u606f\uff1a \u5728\u8fd9\u91cc\u6211\u4eec\u4ee5yoloV5s\u4e3a\u4f8b\uff0c\u6765\u5206\u6790\u4e0b\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\uff0c\u4e3b\u8981\u5305\u542b\u4e09\u90e8\u5206\u5185\u5bb9\uff1a \u6a21\u578b\u53c2\u6570 # \u6a21\u578b\u53c2\u6570 nc : 80 # \u7c7b\u522b\u4e2a\u6570 # \u4e0d\u540c\u5927\u5c0f\u7684\u6a21\u578b\u53ea\u8981\u914d\u7f6e\u8fd9\u4e24\u4e2a\u53c2\u6570\u5373\u53ef depth_multiple : 0.33 # \u6a21\u578b\u6df1\u5ea6\u7684\u6bd4\u4f8b\uff0c\u5373\u7f51\u7edc\u5c42\u6570\u7684\u6bd4\u4f8b width_multiple : 0.50 # \u6a21\u578b\u5bbd\u5ea6\u7684\u6bd4\u4f8b\uff0c\u5373\u7f51\u7edc\u6bcf\u4e00\u5c42\u6df1\u5ea6\u7684\u6bd4\u4f8b # anchor\u7684\u8bbe\u7f6e\uff0c\u4e0eyoloV3\u662f\u4e00\u6837\u7684 anchors : - [ 10 , 13 , 16 , 30 , 33 , 23 ] # P3/8 - [ 30 , 61 , 62 , 45 , 59 , 119 ] # P4/16 - [ 116 , 90 , 156 , 198 , 373 , 326 ] # P5/32 \u4e0d\u540c\u5927\u5c0f\u6a21\u578b\u7684\u6df1\u5ea6\u548c\u5bbd\u5ea6\u7684\u6bd4\u4f8b\u5982\u4e0b\u56fe\u6240\u793a\uff1a yoloV5n yoloV5s yoloV5m yoloV5l yoloV5x \u6df1\u5ea6\u6bd4\u4f8b 0.33 0.33 0.67 1 1.33 \u5bbd\u5ea6\u6bd4\u4f8b 0.25 0.50 0.75 1 1.25 \u4ece\u4e0a\u8868\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u4eceyoloV5n\u5230yoloV5x\u662f\u9010\u6e10\u53d8\u5927\u7684\u3002 backbone\u7684\u8bbe\u7f6e backbone\u6307\u7279\u5f81\u63d0\u53d6\u90e8\u5206\uff0c\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fdb\u884c\u914d\u7f6e\uff0c\u6bcf\u4e00\u90e8\u5206\u4ee5[from, number, module, args]\u7684\u65b9\u5f0f\u914d\u7f6e\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u5176\u4e2d\uff1a from \u8868\u793a\u8be5\u5c42\u7684\u8f93\u5165\u4ece\u54ea\u6765\u3002-1\u8868\u793a\u8f93\u5165\u53d6\u81ea\u4e0a\u4e00\u5c42\uff0c-2\u8868\u793a\u4e0a\u4e24\u5c42\uff0c3\u8868\u793a\u7b2c3\u5c42\uff08\u4ece0\u5f00\u59cb\u6570\uff09\uff0c[-1, 4]\u8868\u793a\u53d6\u81ea\u4e0a\u4e00\u5c42\u548c\u7b2c4\u5c42\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u3002\u3002\u4ece0\u5f00\u59cb\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u5c42\uff0c\u4f8b\u59820-P\u00bd\u8868\u793a\u7b2c0\u5c42\uff0c\u7279\u5f81\u56fe\u5c3a\u5bf8\u4e3a\u8f93\u5165\u7684\u00bd\u3002 number \u8868\u793a\u8be5\u5c42\u6a21\u5757\u5806\u53e0\u7684\u6b21\u6570\uff0c\u6700\u7ec8\u7684\u6b21\u6570\u8fd8\u8981\u4e58\u4e0adepth_multiple\u7cfb\u6570 module \u8868\u793a\u8be5\u5c42\u7684\u6a21\u5757\u3002Conv\u8868\u793a\u5377\u79ef+BN+\u6fc0\u6d3b\u6a21\u5757\u3002C3\u8868\u793acsp1_x\u7ed3\u6784\u3002 args \u8868\u793a\u8f93\u5165\u5230\u6a21\u5757\u7684\u53c2\u6570\u3002\u4f8b\u5982Conv\uff1a[128, 3, 2] \u8868\u793a\u8f93\u51fa\u901a\u9053128\uff0c\u5377\u79ef\u6838\u5c3a\u5bf83\uff0cstride=2\uff1bC3\u6a21\u5757\uff1a[1024],\u8868\u793a\u901a\u9053\u6570\u4e3a1024\uff0c\u6700\u7ec8\u7684\u8f93\u51fa\u901a\u9053\u6570\u8fd8\u8981\u4e58\u4e0a width_multiple\uff0c # \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5c06\u6a21\u578b\u7ed3\u679c\u5206\u4e3abackbone\u548chead\u4e24\u90e8\u5206\uff1a backbone : # [from, number, module, args] [ [ - 1 , 1 , Conv , [ 64 , 6 , 2 , 2 ] ], # 0-P1/2 [64, 6, 2, 2 ] \u8868\u793a\u8f93\u51fa\u901a\u9053128\uff0c\u5377\u79ef\u6838\u5c3a\u5bf83\uff0cstride=2\uff0cpadding=2 [ - 1 , 1 , Conv , [ 128 , 3 , 2 ] ], # 1-P2/4 [128, 3, 2] \u8868\u793a\u8f93\u51fa\u901a\u9053128\uff0c\u5377\u79ef\u6838\u5c3a\u5bf83\uff0cstride=2 [ - 1 , 3 , C3 , [ 128 ] ], # \u6307csp1_x\u7ec4\u4ef6,\u5176\u4e2d1024\u8868\u793a\u901a\u9053\u6570\u4e3a1024 [ - 1 , 1 , Conv , [ 256 , 3 , 2 ] ], # 3-P3/8 [ - 1 , 6 , C3 , [ 256 ] ], [ - 1 , 1 , Conv , [ 512 , 3 , 2 ] ], # 5-P4/16 [ - 1 , 9 , C3 , [ 512 ] ], [ - 1 , 1 , Conv , [ 1024 , 3 , 2 ] ], # 7-P5/32 [ - 1 , 3 , C3 , [ 1024 ] ], [ - 1 , 1 , SPPF , [ 1024 , 5 ] ], # 9 [ 1024, 5 ]\u8868\u793a\u8f93\u51fa\u901a\u9053\u6570\u4e3a1025\uff0c\u6c60\u5316\u7a97\u53e3\u4e3a5\u3002 ] head\u7684\u8bbe\u7f6e Head\u6307neck\u548coutput\u4e24\u90e8\u5206\uff0c\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fdb\u884c\u914d\u7f6e\uff0c\u6bcf\u4e2a\u6a21\u5757\u7684\u914d\u7f6e\u4e0ebackbone\u4e2d\u662f\u4e00\u6837\u7684\u3002 head : # [from, number, module, args] [ [ - 1 , 1 , Conv , [ 512 , 1 , 1 ] ], [ - 1 , 1 , nn . Upsample , [ None , 2 , 'nearest' ] ], # nn.Upsample\u6a21\u5757\u7684\u53c2\u6570[ None, 2, 'nearest' ] None\u8868\u793a\u901a\u9053\u6570\u4e0e\u8f93\u5165\u901a\u9053\u76f8\u540c\uff0c2\u8868\u793a\u4e0a\u91c7\u6837\u500d\u6570\uff0c'nearest'\u8868\u793a\u5dee\u503c\u65b9\u6cd5 [ [ - 1 , 6 ], 1 , Concat , [ 1 ] ], # \u8868\u793a\u4e0a\u4e00\u5c42\u8f93\u51fa\u4e0e\u7b2c6\u5c42\u8f93\u51fa\u8fdb\u884cconcat\u878d\u5408\uff0c\u6700\u540e[ 1 ]\u8868\u793a\u7279\u5f81\u56fe\u7684\u957f\u5bbd\u4e0d\u53d1\u751f\u53d8\u5316 [ - 1 , 3 , C3 , [ 512 , False ] ], # 13 [ - 1 , 1 , Conv , [ 256 , 1 , 1 ] ], [ - 1 , 1 , nn . Upsample , [ None , 2 , 'nearest' ] ], [ [ - 1 , 4 ], 1 , Concat , [ 1 ] ], # cat backbone P3 [ - 1 , 3 , C3 , [ 256 , False ] ], # 17 (P3/8-small) \u8868\u793acsp2_3, 256\u8868\u793a\u901a\u9053\u6570\uff0cFalse\u8868\u793a\u4e0d\u4f7f\u7528\u6b8b\u5dee\u6a21\u5757 [ - 1 , 1 , Conv , [ 256 , 3 , 2 ] ], [ [ - 1 , 14 ], 1 , Concat , [ 1 ] ], # cat head P4 [ - 1 , 3 , C3 , [ 512 , False ] ], # 20 (P4/16-medium) [ - 1 , 1 , Conv , [ 512 , 3 , 2 ] ], [ [ - 1 , 10 ], 1 , Concat , [ 1 ] ], # cat head P5 [ - 1 , 3 , C3 , [ 1024 , False ] ], # 23 (P5/32-large) [ [ 17 , 20 , 23 ], 1 , Detect , [ nc , anchors ] ], # Detect(P3, P4, P5) \u8f93\u51fa\u5c42\u8bbe\u7f6e\uff1a\u301017\uff0c20\uff0c23\u3011\u8868\u793a\u8f93\u5165\u5c42\uff0cnc\u8868\u793a\u7c7b\u522b\u4e2a\u6570\uff0canchors\u8868\u793aanchor\u7684\u8bbe\u7f6e ] \u4e0a\u8ff0\u5c31\u662f\u6211\u4eec\u5728V5\u4e2d\u6784\u5efa\u6a21\u578b\u7684\u65b9\u5f0f\uff0c\u6784\u5efa\u597d\u6a21\u578b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u8bad\u7ec3\u96c6\u6570\u636e\u5bf9\u5176\u8fdb\u884c\u8bad\u7ec3 4.3 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u6570\u636e\u96c6\u548c\u6a21\u578b\u51c6\u5907\u597d\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7684\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u6a21\u578b\u8bad\u7ec3 import train # \u6a21\u578b\u8bad\u7ec3\uff1a\u8bbe\u7f6e\u76f8\u5e94\u7684\u53c2\u6570\uff1a\u6a21\u578b\u914d\u7f6e\u4fe1\u606f train . run ( cfg = 'models/yolov5s.yaml' , # \u6a21\u578b\u7ed3\u6784\u7684\u914d\u7f6e\u6587\u4ef6 data = 'data/coco128.yaml' , # \u6570\u636e\u7684\u914d\u7f6e\u6587\u4ef6 imgsz = 640 , # \u56fe\u50cf\u5927\u5c0f batch_size = 2 , # \u6279\u6b21\u5927\u5c0f weights = 'yolov5s.pt' , # \u9884\u8bad\u7ec3\u6a21\u578b epochs = 1 , # \u8bad\u7ec3\u8f6e\u6b21 worker = 1 # \u6570\u636e\u52a0\u8f7d\u7684\u7ebf\u7a0b\u6570\uff0c\u6839\u636e\u786c\u4ef6\u8d44\u6e90\u8fdb\u884c\u8bbe\u7f6e ) \u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a train : weights = yolov5s . pt , cfg = models / yolov5s . yaml , data = data / coco128 . yaml , hyp = data / hyps / hyp . scratch - low . yaml , epochs = 1 , batch_size = 2 , imgsz = 640 , rect = False , resume = False , nosave = False , noval = False , noautoanchor = False , evolve = None , bucket = , cache = None , image_weights = False , device = , multi_scale = False , single_cls = False , optimizer = SGD , sync_bn = False , workers = 8 , project = runs / train , name = exp , exist_ok = False , quad = False , cos_lr = False , label_smoothing = 0.0 , patience = 100 , freeze = [ 0 ], save_period =- 1 , local_rank =- 1 , entity = None , upload_dataset = False , bbox_interval =- 1 , artifact_alias = latest , worker = 1 , lr = 0.01 hyperparameters : lr0 = 0.01 , lrf = 0.01 , momentum = 0.937 , weight_decay = 0.0005 , warmup_epochs = 3.0 , warmup_momentum = 0.8 , warmup_bias_lr = 0.1 , box = 0.05 , cls = 0.5 , cls_pw = 1.0 , obj = 1.0 , obj_pw = 1.0 , iou_t = 0.2 , anchor_t = 4.0 , fl_gamma = 0.0 , hsv_h = 0.015 , hsv_s = 0.7 , hsv_v = 0.4 , degrees = 0.0 , translate = 0.1 , scale = 0.5 , shear = 0.0 , perspective = 0.0 , flipud = 0.0 , fliplr = 0.5 , mosaic = 1.0 , mixup = 0.0 , copy_paste = 0.0 \u3002\u3002\u3002\u3002 AutoAnchor : 4.27 anchors / target , 0.994 Best Possible Recall ( BPR ) . Current anchors are a good fit to dataset \u2705 Image sizes 640 train , 640 val Using 2 dataloader workers Logging results to runs / train / exp4 Starting training for 1 epochs ... Epoch gpu_mem box obj cls labels img_size 0 %| | 0 / 64 [ 00 : 13 < ? , ? it / s ] \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f1a\u8fdb\u884c\u6570\u636e\u7684\u589e\u5f3a\uff0canchor\u7684\u8c03\u6574\uff0c\u8bad\u7ec3\u4fe1\u606f\u7684\u5904\u7406\u7b49\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4f1a\u88ab\u4fdd\u5b58\u5728run/train/expX\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u63a5\u4e0b\u6765\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9\u4e9b\u7ed3\u679c\uff1a opt.yaml\u4e2d\u7684\u8d85\u53c2\u6570\u4e3b\u8981\u6307\u5b66\u4e60\u7387\uff0c\u4f18\u5316\u5668\uff0c\u9608\u503c\u7b49\u4e00\u7cfb\u5217\u7684\u53c2\u6570\uff0c\u4fdd\u5b58\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684hyperparameters\u7684\u53c2\u6570\u3002 # \u5b66\u4e60\u7387\u8bbe\u7f6e lr0 : 0.01 lrf : 0.2 momentum : 0.937 # \u5b66\u4e60\u7387\u9884\u70ed weight_decay : 0.0005 warmup_epochs : 3.0 warmup_momentum : 0.8 warmup_bias_lr : 0.1 # \u635f\u5931\u51fd\u6570\u7684\u53c2\u6570 box : 0.05 cls : 0.5 cls_pw : 1.0 obj : 1.0 obj_pw : 1.0 iou_t : 0.2 anchor_t : 4.0 fl_gamma : 0.0 # \u6570\u636e\u589e\u5f3a\u7684\u53c2\u6570 hsv_h : 0.015 hsv_s : 0.7 hsv_v : 0.4 degrees : 0.0 translate : 0.1 scale : 0.5 shear : 0.0 perspective : 0.0 flipud : 0.0 fliplr : 0.5 mosaic : 1.0 mixup : 0.0 opt.yaml\u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\u5305\u62ec\u6279\u6b21\u5927\u5c0f\uff0c\u8f6e\u6b21\u7b49\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2dtrain\u7684\u53c2\u6570\u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u6a21\u578b\u914d\u7f6e\u4fe1\u606f weights : yolov5s . pt cfg : 'yolov5s.yaml' # \u6570\u636e data : data / coco128 . yaml # \u8bad\u7ec3\u53c2\u6570 hyp : data / hyp . scratch . yaml epochs : 20 batch_size : 16 img_size : - 640 - 640 \u3002\u3002\u3002\u3002 \u6570\u636e\u5206\u6790\u7684\u7ed3\u679c\uff0c\u5728\u8fd9\u91cc\u5bf9\u6807\u6ce8\u6846\u7c7b\u522b\uff0c\u4e2d\u5fc3\u70b9\u5750\u6807\u53ca\u6807\u6ce8\u6846\u5bbd\u9ad8\u7684\u5206\u5e03\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u9001\u5165\u7f51\u7edc\u4e2d\u8bad\u7ec3\u96c6\u6570\u636e\u5982\u4e0b\u6240\u793a\uff1a\u8be5\u56fe\u4e2d\u663e\u793a\u4e86\u5f53\u524d\u9001\u5165\u7f51\u7edc\u4e2d16\u5e45\u56fe\u50cf\uff0c\u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\u8fdb\u884c\u4e86masic\u7684\u589e\u5f3a\u5904\u7406 \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5bf9\u9a8c\u8bc1\u96c6\u6570\u636e\u9884\u6d4b\u7ed3\u679c\uff0c\u6765\u5bf9\u6bd4\u4e0b\u9884\u6d4b\u548c\u771f\u5b9e\u503c\u7ed3\u679c\uff1a \u771f\u5b9e\u6807\u6ce8\u7684\u7ed3\u679c\uff1a \u7f51\u7edc\u9884\u6d4b\u7ed3\u679c\uff1a \u5bf9\u6bd4\u4e24\u5e45\u56fe\u50cf\u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u6709\u4e9b\u76ee\u6807\u6ca1\u6709\u88ab\u68c0\u6d4b\u5230\uff0c\u4f46\u662f\u5927\u90e8\u5206\u76ee\u6807\u6a21\u578b\u90fd\u68c0\u6d4b\u51fa\u6765\u4e86 \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u635f\u5931\u51fd\u6570\uff0c\u51c6\u786e\u7387\u7684\u53d8\u5316\u60c5\u51b5\u5982\u4e0b\u6240\u793a\uff1a \u5728\u8fd9\u91cc\u662f\u8bad\u7ec3\u4e8620\u4e2a\u8f6e\u6b21\u7684\u7ed3\u679c\uff0c\u4ece\u8fd9\u4e2a\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u968f\u7740\u8bad\u7ec3\u7684\u8fdb\u884c\u635f\u5931\u662f\u5728\u4e0d\u65ad\u4e0b\u964d\u7684\uff0c\u800c\u51c6\u786e\u7387\u662f\u5728\u4e0d\u65ad\u63d0\u5347\u7684\u3002\u7531\u4e8e\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u9a8c\u8bc1\u96c6\u548c\u8bad\u7ec3\u96c6\u4f7f\u7528\u7684\u662f\u76f8\u540c\u7684\u6570\u636e\uff0c\u6240\u4ee5\u9a8c\u8bc1\u96c6\u7684\u66f2\u7ebf\u53d8\u5316\u66f4\u5e73\u6ed1\u4e00\u4e9b\u3002 \u6a21\u578b\u8bad\u7ec3\u6743\u91cd\u7684\u4fdd\u5b58\u7ed3\u679c\uff0c\u5728weights\u6587\u4ef6\u5939\u4e2d\u4fdd\u5b58\u4e86\u6700\u540e\u4e00\u4e2a\u8f6e\u6b21\u7684\u8bad\u7ec3\u7ed3\u679clast.pt\u548c\u9a8c\u8bc1\u96c6\u7cbe\u5ea6\u6700\u9ad8\u7684\u7ed3\u679cbest.pt,\u5982\u4e0b\u6240\u793a\uff1a \u5230\u8fd9\u91cc\u6a21\u578b\u5c31\u88ab\u6211\u4eec\u8bad\u7ec3\u597d\u4e86\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6743\u91cd\u53c2\u6570\u8fdb\u884c\u9884\u6d4b\u4e86\u3002 4.4 \u6a21\u578b\u9884\u6d4b \u00b6 \u6a21\u578b\u9884\u6d4b\u7684\u65b9\u6cd5\u4e0e\u672c\u7ae0\u5f00\u5934\u662f\u4e00\u6837\u7684\uff0c\u4f7f\u7528detect\u6765\u8fdb\u884c\u9884\u6d4b\uff0c\u52a0\u8f7d\u521a\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u9884\u6d4b\u5de5\u5177 import detect # \u8fd0\u884c\u9884\u6d4b\u7a0b\u5e8f\uff1a\u6307\u5b9a\u8981\u9884\u6d4b\u7684\u56fe\u7247\uff0c\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53ca\u662f\u5426\u663e\u793a\u56fe\u7247 detect . run ( source = \"data/images/img3.jpg\" , weights = 'runs/train/exp3/weights/best.pt' , view_img = False ) \u6211\u4eec\u4f9d\u7136\u5bf9\u524d\u9762\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b\uff0c\u7ed3\u679c\u4e3a\uff1a \u5728\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u5c06\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u68c0\u6d4b\u51fa\u6765\u3002 \u603b\u7ed3 \u4e86\u89e3yoloV5\u7f51\u7edc\u67b6\u6784 \u8f93\u5165\uff0cbackbone\uff0cneck\uff0coutput \u77e5\u9053yoloV5\u4e2d\u4f7f\u7528\u7684\u7b56\u7565 \u56fe\u50cf\u5c3a\u5bf8\u7684\u8c03\u6574\uff0c\u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5\uff0c\u6b63\u8d1f\u6837\u672c\u7684\u8bbe\u7f6e\u7b49\u3002 \u80fd\u591f\u4f7f\u7528yoloV5\u6846\u67b6\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b","title":"2.7.yoloV5\u7b97\u6cd5\u8be6\u89e3\u53ca\u6848\u4f8b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#27yolov5","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3yoloV5\u7f51\u7edc\u67b6\u6784 \u77e5\u9053yoloV5\u4e2d\u4f7f\u7528\u7684\u7b56\u7565 \u80fd\u591f\u4f7f\u7528yoloV5\u6846\u67b6\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b **YOLO v5**\u662f\u4ee5\u4e00\u6b3e\u53eb\u505aiDetection\u7684APP\u8fdb\u5165\u4eba\u4eec\u89c6\u91ce\u7684\uff0c\u8be5APP\u5c31\u662f\u4f7f\u7528V5\u8fdb\u884c\u68c0\u6d4b\u7684\u3002\u4f7f\u7528iOS\u7cfb\u5217\u7684\u540c\u5b66\u4eec\uff0c\u5c31\u53ef\u4ee5\u7acb\u523b\u53bb\u4e0b\u8f7d\u8fd9\u4e2aapp\uff0c\u8bd5\u4e00\u4e0b\u8fd9\u4e2aAPP\u7684\u68c0\u6d4b\u6548\u679c\u548c\u901f\u5ea6\u3002app\u9876\u7aef\u6709\u4e00\u7cfb\u5217\u7684\u9009\u9879\uff0c\u6765\u8c03\u8282app\u4f7f\u7528\u7684\u6a21\u578b\u7684\u5927\u5c0f\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8f83\u5927\u7684\u6a21\u578b\u5b9e\u65f6\u6027\u5dee\u4f46\u7cbe\u5ea6\u9ad8\uff0c\u8f83\u5c0f\u7684\u6a21\u578b\u5b9e\u65f6\u6027\u597d\u4f46\u7cbe\u5ea6\u5dee\u3002\u53e6\u5916\u4e5f\u53ef\u4ee5\u8c03\u8282APP\u4e0b\u7aef\u7684\u7f6e\u4fe1\u5ea6\u548cIOU\u9608\u503c\u6765\u8c03\u6574\u68c0\u6d4b\u7ed3\u679c\u3002","title":"2.7.yoloV5\u7b97\u6cd5\u8be6\u89e3\u53ca\u6848\u4f8b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#1","text":"YOLO\u4e4b\u7236\u57282020\u5e74\u521d\u5ba3\u5e03\u9000\u51faCV\u754c\uff0c4\u6708\u4efdYOLOv4\u6a2a\u7a7a\u51fa\u4e16\uff0c\u5e76\u6536\u5230\u539f\u4f5c\u8005\u7684\u8ba4\u53ef\u3002\u4ec5\u4e24\u4e2a\u6708\u4e4b\u540e\uff0cyoloV5\u7684\u4ee3\u7801\u5f00\u6e90\uff0c\u81ea\u6b64YOLO\u7cfb\u5217\u8fdb\u5165\u5230V5\u7684\u65f6\u4ee3\u3002yoloV5\u76f8\u6bd4\u4e8e\u4e4b\u524d\u7684yolo\u6700\u5927\u7684\u597d\u5904\u662f\u57fa\u4e8epytorch\u5b9e\u73b0\uff0c\u5f88\u5bb9\u6613\u88ab\u7b97\u6cd5\u5de5\u7a0b\u5e08\u4f7f\u7528\u3002\u5230\u76ee\u524d\u4e3a\u6b62yoloV5\u5df2\u8fed\u4ee3\u4e86\u591a\u4e2a\u7248\u672c\uff0c2022\u5e742\u6708\u6cd5\u53d1\u5e03\u4e86\u6700\u65b0\u76846.1\u7248\u672c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ee56.1\u7248\u672c\u4e3a\u4f8b\uff0c\u7ed9\u5927\u5bb6\u4ecb\u7ecdV5\u7b97\u6cd5\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u6570\u636e\u589e\u5f3a\uff0c\u540e\u5904\u7406\u4ee5\u53ca\u635f\u5931\u51fd\u6570\uff0c\u5bf9\u6574\u4e2a\u7f51\u7edc\u7684\u57fa\u7840\u77e5\u8bc6\u8fdb\u884c\u5206\u6790\uff1a yoloV5\u5305\u542b\u591a\u79cd\u7c7b\u578b\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u6309\u6a21\u578b\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u662fyoloV5n\uff0cyoloV5s\uff0cyoloV5m\uff0cyoloV5l\uff0cyoloV5x\u3002\u5176\u4e2dYoloV5n\u7f51\u7edc\u662fYolov5\u7cfb\u5217\u4e2d**\u6df1\u5ea6\u6700\u5c0f**\uff0c\u7279\u5f81\u56fe\u7684**\u5bbd\u5ea6\u6700\u5c0f**\u7684\u7f51\u7edc\u3002\u540e\u9762\u76844\u79cd\u90fd\u662f\u5728\u6b64\u57fa\u7840\u4e0a\u4e0d\u65ad\u52a0\u6df1\uff0c\u4e0d\u65ad\u52a0\u5bbd\u5f97\u5230\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u8f83\u5927\u6a21\u578b\u5b9e\u65f6\u6027\u5dee\u4f46\u7cbe\u5ea6\u9ad8\uff0c\u8f83\u5c0f\u7684\u6a21\u578b\u5b9e\u65f6\u6027\u597d\u4f46\u7cbe\u5ea6\u5dee\u3002","title":"1. \u7b97\u6cd5\u7b80\u4ecb"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#2","text":"\u6211\u4eec\u4eceyoloV5\u7684github\u4e2d\u5c06\u5f00\u6e90\u4ee3\u7801clone\u4e0b\u6765\uff0c\u5176\u4ee3\u7801\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a\u5305\u62ec\u7f51\u7edc\u7ed3\u6784\uff0c\u8bad\u7ec3\uff0c\u9884\u6d4b\u7684\u76f8\u5173\u5185\u5bb9\uff0c \u5c06\u4ee3\u7801\u83b7\u53d6\u5230\u672c\u5730\u540e\uff0c\u9700\u8981\u5b89\u88c5\u76f8\u5e94\u7684\u5de5\u5177\u5305\uff0ccd\u5230yoloV5-master\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u521b\u5efa\u865a\u62df\u73af\u5883\u8981\u6c42python>3.7\u4e14torch>1.7\uff0c\u6267\u884c\uff1a pip install -r requirements.txt \u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u5373\u53ef\u8fd0\u884c\u4ee3\u7801\u3002 \u5728\u4ecb\u7ecd\u7f51\u7edc\u4e4b\u524d\u6211\u4eec\u5148\u6765\u770b\u4e0b\u9884\u6d4b\u7ed3\u679c\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u7684yolov5s\u6765\u8fdb\u884c\u9884\u6d4b\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u5728\uff1ayolov5-master/yolov5.ipynb\u6587\u4ef6\u4e2d # \u5bfc\u5165\u9884\u6d4b\u5de5\u5177 import detect # \u8fd0\u884c\u9884\u6d4b\u7a0b\u5e8f\uff1a\u6307\u5b9a\u8981\u9884\u6d4b\u7684\u56fe\u7247\uff0c\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53ca\u662f\u5426\u663e\u793a\u56fe\u7247 detect . run ( source = \"data/images/img3.jpg\" , weights = 'yolov5s.pt' , view_img = False ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a Fusing layers ... Model Summary : 213 layers , 7225885 parameters , 0 gradients , 16.5 GFLOPs WARNING : -- img - size ( 640 , 640 ) must be multiple of max stride 32 , updating to [ 640 , 640 ] image 1 / 1 / Users / mac / Desktop / \u8ba1\u7b97\u673a\u89c6\u89c9 / yolov5 - master / data / images / img3 . jpg : 480 x640 4 persons , 1 chair , Done . ( 0.233 s ) Speed : 1.5 ms pre - process , 232.8 ms inference , 3.4 ms NMS per image at shape ( 1 , 3 , 640 , 640 ) Results saved to runs / detect / exp7 \u4ece\u4e0a\u8ff0\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6574\u4e2a\u8fc7\u7a0b\u662f\u52a0\u8f7d\u6a21\u578b\uff0c\u5c06\u56fe\u7247\u8c03\u6574\u4e3a640*640\u7684\u5927\u5c0f\uff0c\u8fdb\u884c\u9884\u6d4b\u5e76\u540e\u5904\u7406\uff0c\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728runs/detect/exp7\u6587\u4ef6\u5939\u4e2d\uff0c\u68c0\u6d4b\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u63a5\u4e0b\u6765\u6211\u4eec\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e0byoloV5\u5177\u4f53\u662f\u5982\u4f55\u6765\u5b8c\u6210\u76ee\u6807\u68c0\u6d4b\u7684\u3002","title":"2.\u5f00\u6e90\u6846\u67b6"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#3","text":"","title":"3.\u6a21\u578b\u8be6\u89e3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#31","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u9996\u5148\u6765\u770b\u4e0byoloV5\u7684\u7f51\u7edc\u67b6\u6784\uff0c\u6211\u4eec\u4f9d\u7136\u628a\u5b83\u5206\u6210\u8f93\u5165\uff0cbackbone,Neck\u548c\u8f93\u51fa\u7aef\u56db\u90e8\u5206\uff0c\u5982\u4e0b\u6240\u793a\uff1a Yolov5\u7684\u6574\u4f53\u67b6\u6784\u4e0eYoloV4\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff0c\u5728V5\u4e2d\u4f7f\u7528\u7684\u662fleaky_relu\u6fc0\u6d3b\u51fd\u6570\uff0c\u6ca1\u6709\u4f7f\u7528mish\u6fc0\u6d3b\u51fd\u6570. \u57fa\u672c\u7ec4\u4ef6\uff1a CBL\uff1a\u7531Conv+Bn+Leaky_relu\u6fc0\u6d3b\u51fd\u6570\u4e09\u8005\u7ec4\u6210\u3002 Res unit\uff1a\u501f\u9274Resnet\u7f51\u7edc\u4e2d\u7684\u6b8b\u5dee\u7ed3\u6784\uff0c\u8ba9\u7f51\u7edc\u53ef\u4ee5\u6784\u5efa\u7684\u66f4\u6df1\u3002 CSP1_X\uff1a\u7531\u4e09\u4e2a\u5377\u79ef\u5c42\u548cX\u4e2aRes unint\u6a21\u5757Concate\u7ec4\u6210\uff0c\u6a21\u578b\u5b9e\u73b0\u4f7f\u7528C3\u6765\u5b8c\u6210\uff0c\u5c06shortcut\u8bbe\u4e3aTrue\u5373\u53ef CSP2_X\uff1a\u8fd9\u4e2a\u5728V4\u4e2d\u6ca1\u6709\u4f7f\u7528\uff0c\u7531\u4e09\u4e2a\u5377\u79ef\u5c42\u548c2X\u4e2aRes unint\u6a21\u5757Concate\u7ec4\u6210\uff0c\u6a21\u578b\u5b9e\u73b0\u4f7f\u7528C3\u6765\u5b8c\u6210\uff0c\u5c06shortcut\u8bbe\u4e3aFalse\u5373\u53ef SPPF\uff1aV4\u4e2d\u4f7f\u7528\u7684SPP\u8fdb\u884c\u878d\u5408\uff0c\u5728\u8fd9\u91cc\u91c7\u75281x1\u5377\u79ef\u548c3\u4e2a\u4e32\u8054\u76845x5\u7684\u6700\u5927\u6c60\u5316\u7684\u65b9\u5f0f\uff0c\u8fdb\u884c\u591a\u5c3a\u5ea6\u878d\u5408\u3002 \u5176\u4ed6\u57fa\u7840\u64cd\u4f5c\uff1a Concat\uff1a\u5f20\u91cf\u62fc\u63a5\uff0c\u901a\u9053\u7ef4\u5ea6\u4f1a\u6269\u5145\u3002 Add\uff1a\u5f20\u91cf\u76f8\u52a0\uff0c\u4e0d\u4f1a\u6269\u5145\u7ef4\u5ea6\u3002 \u4e3a\u4e86\u66f4\u597d\u7684\u7406\u89e3\u6a21\u578b\u6bcf\u4e00\u90e8\u5206\u7684\u4f5c\u7528\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6309\u7167\u8f93\u5165\u7aef\uff08input\uff09,backbone, neck, \u8f93\u51fa\u7aef\uff08output\uff09\u56db\u90e8\u5206\u4ecb\u7ecdyoloV4\u7f51\u7edc\u7684\u5185\u5bb9\u3002","title":"3.1 \u6a21\u578b\u7ed3\u6784"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#311-input","text":"yoloV5\u7f51\u7edc\u7684\u8f93\u5165\u4f9d\u7136\u8981\u6c42\u662f32\u7684\u500d\u6570\uff0c\u4f46\u5927\u5c0f\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u5728yoloV5\u4e2d\u9ed8\u8ba4\u662f640\u00d7640\uff0c\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u8c03\u6574\u3002V5\u7684\u9884\u6d4b\u9636\u6bb5\u4e0d\u8981\u6c42\u9001\u5165\u7f51\u7edc\u4e2d\u7684\u56fe\u50cf\u662f\u65b9\u5f62\u7684\uff0c\u8fd9\u8981\u4fdd\u8bc1\u9ad8\u5bbd\u90fd\u4e3a32\u7684\u500d\u6570\u5373\u53ef\uff0c\u8c03\u6574\u7b56\u7565\u6211\u4eec\u4ecb\u7ecd\u5982\u4e0b\uff1a \u5728\u8fd9\u91cc\u6211\u4eec\u5148\u56de\u987e\u4e0bV3V4\u4e2d\u7684\u505a\u6cd5\uff0c\u4e5f\u662fV5\u5728\u8bad\u7ec3\u65f6\u5bf9\u8f93\u5165\u56fe\u50cf\u5927\u5c0f\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u4f8b\u5982\uff1a1200x800\u7684\u539f\u59cb\u56fe\u50cf\u76f4\u63a5\u7f29\u653e\u586b\u5145\u4e3a640x640\u7684\u5927\u5c0f\uff0c\u5177\u4f53\u64cd\u4f5c\u957f\u8fb91200\u76f4\u63a5\u7f29\u653e\u4e3a640\u6bd4\u4f8b\u4e3a0.53\uff0c\u77ed\u8fb9\u7f29\u653e\u4e3a800x0.53=426,426\u4e0d\u8db3640\uff0c\u5219\u5728\u77ed\u8fb9\u7684\u65b9\u5411\u4e24\u4fa7\u5206\u522b\u586b\u5145\uff08640-426\uff09/2 =107\u4e2a\u7070\u5ea6\u50cf\u7d20\uff08114\uff0c114\uff0c114\uff09\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u90a3\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u5728\u6bcf\u4e2abatch\u8fdb\u884c\u8bad\u7ec3\u65f6\u9001\u5165\u7684\u56fe\u50cf\u5927\u5c0f\u662f\u4e00\u6837\u7684\u3002\u4f46\u662f\u5728\u9884\u6d4b\u65f6\u4e00\u822c\u662f\u9001\u5165\u4e00\u5e45\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b\uff0c\u800c\u4e0a\u8ff0\u8fd9\u79cd\u586b\u5145\u65b9\u5f0f\u5728\u77ed\u8fb9\u586b\u5145\u4e86\u8f83\u591a\u7684\u80cc\u666f\u50cf\u7d20\uff0c\u5b58\u5728\u4fe1\u606f\u5197\u4f59\uff0c\u5f71\u54cd\u63a8\u7406\u901f\u5ea6\u3002\u6240\u4ee5\u5728V5\u4e2d\u8fdb\u884c\u9884\u6d4b\u65f6\u4f7f\u7528\u4e86\u81ea\u9002\u5e94\u7684\u586b\u5145\u65b9\u5f0f\uff0c\u5177\u4f53\u64cd\u4f5c\u957f\u8fb91200\u76f4\u63a5\u7f29\u653e\u4e3a640\u6bd4\u4f8b\u4e3a0.53\uff0c\u77ed\u8fb9\u7f29\u653e\u4e3a800x0.53=426,426\u4e0d\u80fd\u88ab32\u6574\u9664\u6240\u4ee5\u9700\u8981\u5728\u8fdb\u884c\u586b\u5145\uff0c\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u627e\u5230\u79bb426\u6700\u8fd1\u768432\u7684\u6574\u6570\u500d\u7684\u503c\u5373426+\uff08640-426\uff09%32=448, \u5219\u5728\u77ed\u8fb9\u7684\u65b9\u5411\u4e24\u4fa7\u5206\u522b\u586b\u5145\uff08448-426\uff09/2 =11\u4e2a\u7070\u5ea6\u50cf\u7d20\uff08114\uff0c114\uff0c114\uff09\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u77ed\u8fb9\u7684\u586b\u5145\u6bd4\u539f\u59cb\u7684\u586b\u5145\u65b9\u5f0f\u5c0f\u4e86\u5f88\u591a\uff0c\u5728\u63a8\u7406\u65f6\uff0c\u8ba1\u7b97\u91cf\u4e5f\u4f1a\u51cf\u5c11\uff0c\u76ee\u6807\u68c0\u6d4b\u7684\u901f\u5ea6\u4f1a\u5f97\u5230\u63d0\u5347\u3002 \u5176\u4ed6\u7684\u4e0eyoloV4\u7c7b\u4f3c\uff0cV5\u5728\u8f93\u5165\u7aef\u91c7\u7528\u53cd\u8f6c\u3001\u88c1\u5207\u3001\u65cb\u8f6c\uff0cCutMix\u548c\u9a6c\u8d5b\u514b\u6570\u636e\u589e\u5f3a\uff08Mosaic data augmentation\uff09\u7b49\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\u3002","title":"3.1.1 \u8f93\u5165\uff08input\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#312-backbone","text":"yoloV5\u7f51\u7edc\u7684backbone\u548cyoloV4\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u4f7f\u7528\u7684\u662fCSP\u7ed3\u6784\uff0c\u5728yoloV5\u4e2d\u90fd\u662f\u4f7f\u7528\u7684leakyrelu\u6fc0\u6d3b\u51fd\u6570\uff0c\u6ca1\u6709\u4f7f\u7528mish\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a yoloV4\u4e2d\u4e00\u5171\u67095\u4e2aCSP\uff0c\u8f93\u5165\u56fe\u50cf\u662f608x608\uff0c\u6240\u4ee5\u7279\u5f81\u56fe\u53d8\u5316\u7684\u89c4\u5f8b\u662f\uff1a608->304->152->76->38->19\uff0c\u7ecf\u8fc75\u6b21CSP\u6a21\u5757\u540e\u5f97\u523019x19\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 \u800c\u5728V5\u4e2d\u964d\u91c7\u6837\u901a\u8fc7CBL\u6765\u5b8c\u6210\uff0c\u8f93\u5165\u56fe\u50cf\u662f640x640,\u6240\u4ee5\u7279\u5f81\u56fe\u53d8\u5316\u7684\u89c4\u5f8b\u662f\uff1a640->320->160->80->40->20\uff0c\u7ecf\u8fc75\u6b21CBL\u6a21\u5757\u540e\u5f97\u523020x20\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 \u53e6\u5916\u5c06V4\u4e2d\u4f7f\u7528\u7684\u662fSPP\uff0c\u800c\u5728V5\u4e2d\u4f7f\u7528\u7684\u662fSPPF\uff0c\u5982\u4e0b\u6240\u793a\uff1a SPP\u5c42\u4f7f\u75285x5,9x9,13x13\u6c60\u5316\u7a97\u53e3\u5bf9\u7279\u5f81\u8fdb\u884c\u878d\u5408\uff0c\u5728\u9001\u5165\u7f51\u7edcneck\u4e4b\u524d\u80fd\u591f\u5f97\u5230\u66f4\u591a\u7684\u4fe1\u606f\u3002\u800c\u5728SPPF\u4f7f\u75283\u4e2a5\u00d75\u7684\u6700\u5927\u6c60\u5316\uff0c\u4ee3\u66ff\u539f\u6765\u76845\u00d75\u30019\u00d79\u300113\u00d713\u6700\u5927\u6c60\u5316\uff0c\u5728\u4fdd\u8bc1\u51c6\u786e\u7387\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u9ad8\u4e86\u8ba1\u7b97\u901f\u5ea6\u3002","title":"3.1.2 backbone"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#313-neck","text":"yolov5\u4e2d\u7684\u7279\u5f81\u878d\u5408\u65b9\u5f0f\u4e0eV4\u7684\u878d\u5408\u65b9\u5f0f\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5c06\u5728V4\u4e2d\u4f7f\u7528\u7684\u90e8\u5206CBL\u66ff\u6362\u6210\u4e86CSP2_X\u6a21\u5757\uff0c\u589e\u5f3a\u4e86\u7f51\u7edc\u7684\u7279\u5f81\u878d\u5408\u80fd\u529b\u3002\u5982\u4e0b\u6240\u793a\uff1a CSP2_X\u7684\u6a21\u5757\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a","title":"3.1.3 neck"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#314-output","text":"V5\u7684\u8f93\u51fa\u7aef\u4e0eV4V3\u7684\u8f93\u51fa\u7aef\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u7ed3\u679c\uff0c\u5177\u4f53\u4e0d\u518d\u8d58\u8ff0\u3002","title":"3.1.4 \u8f93\u51fa\uff08output\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#32","text":"yoloV5\u4e2d\u7684\u6a21\u578b\u8bad\u7ec3\u548cYoloV4\u662f\u7c7b\u4f3c\u7684\u8bad\u7ec3\u8fc7\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u635f\u5931\u51fd\u6570\u4f7f\u7528GIOU\u635f\u5931\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6b63\u6837\u672c\u7684\u6570\u91cf\uff0c\u53ea\u4e0d\u8fc7\u5728\u8fdb\u884c\u6b63\u8d1f\u6837\u672c\u8bbe\u8ba1\u65f6\u8fdb\u884c\u4e86\u8c03\u6574\u3002","title":"3.2 \u6a21\u578b\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#321-anchor","text":"yoloV3\u548cV4\u4e2d\u7684anchor\u662f\u9884\u5148\u4f7f\u7528kmeans\u5b9a\u4e49\u597d\u7684\uff0c\u800cyoloV5\u4e2d\u7684anchor\u662f\u57fa\u4e8e\u8bad\u7ec3\u6570\u636e\u81ea\u52a8\u5b66\u4e60\u7684\u3002\u5728Yolov3\u3001Yolov4\u4e2d\uff0c\u8bad\u7ec3\u4e0d\u540c\u7684\u6570\u636e\u96c6\u65f6\uff0c\u8ba1\u7b97\u521d\u59cb\u951a\u6846\u7684\u503c\u662f\u901a\u8fc7\u5355\u72ec\u7684\u7a0b\u5e8f\u8fd0\u884c\u7684\u3002\u4f46Yolov5\u4e2d\u5c06\u6b64\u529f\u80fd\u5d4c\u5165\u5230\u4ee3\u7801\u4e2d\uff0c\u6bcf\u6b21\u8bad\u7ec3\u65f6\uff0c\u81ea\u9002\u5e94\u7684\u8ba1\u7b97\u4e0d\u540c\u8bad\u7ec3\u96c6\u4e2d\u7684\u6700\u4f73\u951a\u6846\u503c\u3002","title":"3.2.1 anchor\u7684\u81ea\u52a8\u8c03\u6574"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#322","text":"\u5728yolo v3v4\u4e2d\uff0c\u4fdd\u8bc1\u6bcf\u4e2agt bbox\u6709\u4e00\u4e2a\u552f\u4e00\u7684anchor\u8fdb\u884c\u5bf9\u5e94\uff0c\u5339\u914d\u89c4\u5219\u5c31\u662fIOU\u6700\u5927\uff0c\u5e76\u4e14\u67d0\u4e2agt\u4e0d\u80fd\u5728\u4e09\u4e2a\u9884\u6d4b\u5c42\u7684\u67d0\u51e0\u5c42\u4e0a\u540c\u65f6\u8fdb\u884c\u5339\u914d\u3002\u4e0d\u8003\u8651\u4e00\u4e2agt bbox\u5bf9\u5e94\u591a\u4e2aanchor\u7684\u573a\u5408\uff0c\u4e5f\u4e0d\u8003\u8651anchor\u662f\u5426\u8bbe\u7f6e\u5408\u7406\u3002 \u800c\u5728yolov5\u91c7\u7528\u4e86\u8de8\u7f51\u683c\u5339\u914d\u89c4\u5219\uff0c\u589e\u52a0\u6b63\u6837\u672canchor\u6570\u76ee\u7684\u505a\u6cd5\uff1a\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u8f93\u51fa\u5c42\uff0c\u76f4\u63a5\u91c7\u7528shape\u89c4\u5219\u5339\u914d\uff0c\u8ba1\u7b97\u5f53\u524d\u7684\u76ee\u6807\u6846GT\u5bbd\u9ad8\u548c\u6bcf\u4e00\u5c3a\u5ea6\u7684anchor\u5bbd\u9ad8\u7684\u6bd4\u4f8b\uff0c\u5982\u679c\u5bbd\u9ad8\u6bd4\u4f8b\u5c0f\u4e8e\u8bbe\u5b9a\u9608\u503c\uff0c\u5219\u8bf4\u660e\u8be5bbox\u548canchor\u5339\u914d\u5ea6\u8db3\u591f\uff0c\u5c06\u8be5anchor\u5728\u8be5\u5c3a\u5ea6\u4e2d\u8ba4\u4e3a\u662f\u6b63\u6837\u672c\u3002\u7136\u540e\u8ba1\u7b97GT\u843d\u5728\u54ea\u4e2a\u7f51\u683c\u5185\uff0c\u540c\u65f6\u5229\u7528\u56db\u820d\u4e94\u5165\u89c4\u5219\uff0c\u627e\u51fa\u6700\u8fd1\u7684\u4e24\u4e2a\u7f51\u683c\uff0c\u5c06\u8fd9\u4e09\u4e2a\u7f51\u683c\u90fd\u8ba4\u4e3a\u662f\u8d1f\u8d23\u9884\u6d4b\u8be5bbox\u7684\uff0c\u53ef\u4ee5\u53d1\u73b0\u7c97\u7565\u4f30\u8ba1\u6b63\u6837\u672c\u6570\u76f8\u6bd4\u524dyolo\u7cfb\u5217\uff0c\u589e\u52a0\u4e86\u4e09\u500d\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7eff\u70b9\u8868\u793a\u8be5gt bbox\u4e2d\u5fc3\uff0c\u73b0\u5728\u9700\u8981\u989d\u5916\u8003\u8651\u51762\u4e2a\u6700\u8fd1\u7684\u90bb\u57df\u7f51\u683c\u7684anchor\u4e5f\u4f5c\u4e3a\u8be5gt bbox\u7684\u6b63\u6837\u672c\uff0c\u660e\u663e\u589e\u52a0\u4e86\u6b63\u6837\u672c\u7684\u6570\u91cf\u3002","title":"3.2.2 \u6b63\u8d1f\u6837\u672c\u7684\u8bbe\u8ba1"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#33","text":"\u4e0eyoloV4\u7c7b\u4f3c\uff0c\u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u6211\u4eec\u5c06\u56fe\u7247resize\u540e\uff0c\u9001\u5165\u5230yoloV5\u7f51\u7edc\u4e2d\uff0c\u8f93\u51fa3\u4e2a\u5c3a\u5ea6\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u4e2d\u5305\u542b\u8fb9\u6846\u5750\u6807\uff084\u4e2a\u6570\u503c\uff09\uff0c\u8fb9\u6846\u7f6e\u4fe1\u5ea6\uff081\u4e2a\u6570\u503c\uff09\uff0c\u5bf9\u8c61\u7c7b\u522b\u7684\u6982\u7387\uff08\u5bf9\u4e8eCOCO\u6570\u636e\u96c6\uff0c\u670980\u79cd\u5bf9\u8c61\uff09\u3002\u6211\u4eec\u7b5b\u9009\u51fa\u7f6e\u4fe1\u5ea6\u8f83\u9ad8\u7684\u68c0\u6d4b\u7ed3\u679c\uff08>0.5\uff09\uff0c\u5728\u91c7\u7528NMS\u7b97\u6cd5\u9009\u51fa\u6700\u6709\u53ef\u80fd\u662f\u76ee\u6807\u7684\u7ed3\u679c\uff0c\u5c31\u5b8c\u6210\u4e86\u76ee\u6807\u7684\u68c0\u6d4b\u3002","title":"3.3 \u6a21\u578b\u9884\u6d4b"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#4","text":"","title":"4.\u6848\u4f8b\u5b9e\u73b0"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#41","text":"","title":"4.1 \u6570\u636e\u6784\u5efa"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#411","text":"\u6839\u636e\u8981\u5b9e\u73b0\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u9700\u8981\u6536\u96c6\u5927\u91cf\u7684\u56fe\u50cf\u6570\u636e\uff0c\u4e00\u822c\u6765\u8bf4\u5305\u542b\u4e24\u5927\u6765\u6e90\uff0c\u4e00\u90e8\u5206\u662f\u7f51\u7edc\u6570\u636e\uff0c\u53ef\u4ee5\u662f\u5f00\u6e90\u6570\u636e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u767e\u5ea6\u3001Google\u56fe\u7247\u722c\u866b\u5f97\u5230\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u7528\u6237\u573a\u666f\u7684\u89c6\u9891\u5f55\u50cf\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u6570\u636e\u91cf\u4f1a\u66f4\u5927\u3002\u5bf9\u4e8e\u5f00\u6e90\u6570\u636e\u6211\u4eec\u4e0d\u9700\u8981\u8fdb\u884c\u6807\u6ce8\uff0c\u800c\u722c\u53d6\u7684\u6570\u636e\u548c\u89c6\u9891\u5f55\u50cf\u9700\u8981\u8fdb\u884c\u6807\u6ce8\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f00\u6e90\u5de5\u5177labelImg\u8fdb\u884c\u6807\u6ce8\uff0c\u5b89\u88c5\u65b9\u6cd5\u662f\uff1a pip install labelImg \u5b89\u88c5\u5b8c\u6210\u540e\u518d\u7ec8\u7aef\u4f7f\u7528\uff1alabelImg\u5373\u53ef\u542f\u52a8\u6807\u6ce8\u7a0b\u5e8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u6807\u6ce8\u597d\u4fe1\u606f\u540e\u70b9\u51fb\u4fdd\u5b58\u5373\u53ef\u5c06\u6807\u6ce8\u4fe1\u606f\u6dfb\u52a0\u5230\u5bf9\u4e00\u4e2a\u7684txt\u6587\u4ef6\u4e2d\uff0c\u4e3b\u8981\u662f2\u4e2a\u4eba\u548c\u4e00\u4e2a\u9886\u5e26\uff0c\u53e6\u5916\u8fd8\u4f1a\u751f\u6210\u4ee5class.txt\u4fdd\u5b58\u76ee\u6807\u7684\u7c7b\u522b\u4fe1\u606f\u3002 \u6807\u6ce8\u4fe1\u606f\uff1a\u7c7b\u522b\uff0c\u4e2d\u5fc3\u70b9x,y\u5750\u6807\uff0c\u5bbd\u9ad8\uff08\u5f52\u4e00\u5316\u540e\u7684\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5c06\u6807\u6ce8\u597d\u7684\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u6587\u4ef6\u548c\u6587\u672c\u6807\u7b7e\u5206\u522b\u5b58\u653e\u5728\u81ea\u5df1\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u6211\u4eec\u4ee5coco128\u6570\u636e\u4e3a\u4f8b\uff1a images\u6587\u4ef6\u5939\u4e2d\u5b58\u653e\u56fe\u7247\u6587\u4ef6\uff0clabels\u4e2d\u5b58\u653e\u6807\u7b7e\u6587\u4ef6txt\u3002","title":"4.1.1 \u6807\u6ce8\u65b9\u6cd5"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#412","text":"\u5728yoloV5\u7684\u6846\u67b6\u4e2d\u6211\u4eec\u8fdb\u884c\u6570\u636e\u52a0\u8f7d\u65f6\u53ea\u9700\u914d\u7f6e\u597dyaml\u6587\u4ef6\u5373\u53ef\uff0c\u6211\u4eec\u4ee5coco128\u4e3a\u4f8b\uff0cCOCO128\u6570\u636e\u96c6\u662f\u7531COCO\u6570\u636e\u96c6\u7684\u524d128\u5f20\u56fe\u50cf\u7ec4\u6210\u7684\u5c0f\u6570\u636e\u96c6\u3002\u8fd9128\u5f20\u56fe\u50cf\u7528\u4e8e\u8bad\u7ec3\u548c\u9a8c\u8bc1\u3002\u5728\u8fd9\u91cc\u521b\u5efacoco128.yaml\u6587\u4ef6\uff0c\u9700\u8981\u914d\u7f6e\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a # \u6570\u636e\u5b58\u653e\u8def\u5f84\u7684\u914d\u7f6e path : ../ datasets / coco128 # \u6839\u76ee\u5f55 train : images / train2017 # \u8bad\u7ec3\u96c6\u6570\u636e\u7684\u76ee\u5f55\uff08\u6839\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u7ecf\uff09 val : images / train2017 # \u9a8c\u8bc1\u96c6\u6570\u636e\u7684\u76ee\u5f55\uff08\u6839\u76ee\u5f55\u7684\u76f8\u5bf9\u8def\u7ecf\uff09\uff0c\u5728\u8fd9\u91cc\u9a8c\u8bc1\u96c6\u548c\u8bad\u7ec3\u96c6\u662f\u540c\u4e00\u4e2a test : # \u6d4b\u8bd5\u96c6\uff0c\u53ef\u9009 # \u6570\u636e\u96c6\u7684\u7c7b\u578b\u4fe1\u606f nc : 80 # \u7c7b\u522b\u4e2a\u6570 names : [ 'person' , 'bicycle' , 'car' , 'motorcycle' , 'airplane' , 'bus' , 'train' , 'truck' , 'boat' , 'traffic light' , 'fire hydrant' , 'stop sign' , 'parking meter' , 'bench' , 'bird' , 'cat' , 'dog' , 'horse' , 'sheep' , 'cow' , 'elephant' , 'bear' , 'zebra' , 'giraffe' , 'backpack' , 'umbrella' , 'handbag' , 'tie' , 'suitcase' , 'frisbee' , 'skis' , 'snowboard' , 'sports ball' , 'kite' , 'baseball bat' , 'baseball glove' , 'skateboard' , 'surfboard' , 'tennis racket' , 'bottle' , 'wine glass' , 'cup' , 'fork' , 'knife' , 'spoon' , 'bowl' , 'banana' , 'apple' , 'sandwich' , 'orange' , 'broccoli' , 'carrot' , 'hot dog' , 'pizza' , 'donut' , 'cake' , 'chair' , 'couch' , 'potted plant' , 'bed' , 'dining table' , 'toilet' , 'tv' , 'laptop' , 'mouse' , 'remote' , 'keyboard' , 'cell phone' , 'microwave' , 'oven' , 'toaster' , 'sink' , 'refrigerator' , 'book' , 'clock' , 'vase' , 'scissors' , 'teddy bear' , 'hair drier' , 'toothbrush' ] # \u7c7b\u522b\u540d\u79f0 \u6570\u636e\u96c6\u914d\u7f6e\u6587\u4ef6,\u5b9a\u4e49\u4e86: \u8bad\u7ec3\u56fe\u50cf\u7684\u8def\u5f84 \u9a8c\u8bc1\u56fe\u50cf\u7684\u8def\u5f84 \u7c7b\u7684\u6570\u91cf \u7c7b\u540d\u79f0\u7684\u5217\u8868 \u914d\u7f6e\u597d\u8fd9\u4e9b\u4fe1\u606f\u540eyoloV5\u7684\u6846\u67b6\u4f1a\u81ea\u52a8\u7684\u52a0\u8f7d\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\u3002","title":"4.1.2 \u6570\u636e\u52a0\u8f7d"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#42","text":"\u5728yoloV5\u4e2d\u6784\u5efa\u7f51\u7edc\u65f6\u901a\u8fc7yaml\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\uff0c\u7528\u6765\u83b7\u53d6\u4e0d\u540c\u5927\u5c0f\u7c7b\u578b\u7684\u6a21\u578b\uff0c\u914d\u7f6e\u6587\u4ef6\u5728\u6587\u4ef6\u5939yolov5-master/models\u6587\u4ef6\u5939\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a\u5305\u542byoloV5n\uff0cyoloV5s\uff0cyoloV5m\uff0cyoloV5l\uff0cyoloV5x\u7684\u914d\u7f6e\u4fe1\u606f\uff1a \u5728\u8fd9\u91cc\u6211\u4eec\u4ee5yoloV5s\u4e3a\u4f8b\uff0c\u6765\u5206\u6790\u4e0b\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\uff0c\u4e3b\u8981\u5305\u542b\u4e09\u90e8\u5206\u5185\u5bb9\uff1a \u6a21\u578b\u53c2\u6570 # \u6a21\u578b\u53c2\u6570 nc : 80 # \u7c7b\u522b\u4e2a\u6570 # \u4e0d\u540c\u5927\u5c0f\u7684\u6a21\u578b\u53ea\u8981\u914d\u7f6e\u8fd9\u4e24\u4e2a\u53c2\u6570\u5373\u53ef depth_multiple : 0.33 # \u6a21\u578b\u6df1\u5ea6\u7684\u6bd4\u4f8b\uff0c\u5373\u7f51\u7edc\u5c42\u6570\u7684\u6bd4\u4f8b width_multiple : 0.50 # \u6a21\u578b\u5bbd\u5ea6\u7684\u6bd4\u4f8b\uff0c\u5373\u7f51\u7edc\u6bcf\u4e00\u5c42\u6df1\u5ea6\u7684\u6bd4\u4f8b # anchor\u7684\u8bbe\u7f6e\uff0c\u4e0eyoloV3\u662f\u4e00\u6837\u7684 anchors : - [ 10 , 13 , 16 , 30 , 33 , 23 ] # P3/8 - [ 30 , 61 , 62 , 45 , 59 , 119 ] # P4/16 - [ 116 , 90 , 156 , 198 , 373 , 326 ] # P5/32 \u4e0d\u540c\u5927\u5c0f\u6a21\u578b\u7684\u6df1\u5ea6\u548c\u5bbd\u5ea6\u7684\u6bd4\u4f8b\u5982\u4e0b\u56fe\u6240\u793a\uff1a yoloV5n yoloV5s yoloV5m yoloV5l yoloV5x \u6df1\u5ea6\u6bd4\u4f8b 0.33 0.33 0.67 1 1.33 \u5bbd\u5ea6\u6bd4\u4f8b 0.25 0.50 0.75 1 1.25 \u4ece\u4e0a\u8868\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u4eceyoloV5n\u5230yoloV5x\u662f\u9010\u6e10\u53d8\u5927\u7684\u3002 backbone\u7684\u8bbe\u7f6e backbone\u6307\u7279\u5f81\u63d0\u53d6\u90e8\u5206\uff0c\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fdb\u884c\u914d\u7f6e\uff0c\u6bcf\u4e00\u90e8\u5206\u4ee5[from, number, module, args]\u7684\u65b9\u5f0f\u914d\u7f6e\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u5176\u4e2d\uff1a from \u8868\u793a\u8be5\u5c42\u7684\u8f93\u5165\u4ece\u54ea\u6765\u3002-1\u8868\u793a\u8f93\u5165\u53d6\u81ea\u4e0a\u4e00\u5c42\uff0c-2\u8868\u793a\u4e0a\u4e24\u5c42\uff0c3\u8868\u793a\u7b2c3\u5c42\uff08\u4ece0\u5f00\u59cb\u6570\uff09\uff0c[-1, 4]\u8868\u793a\u53d6\u81ea\u4e0a\u4e00\u5c42\u548c\u7b2c4\u5c42\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u3002\u3002\u4ece0\u5f00\u59cb\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u5c42\uff0c\u4f8b\u59820-P\u00bd\u8868\u793a\u7b2c0\u5c42\uff0c\u7279\u5f81\u56fe\u5c3a\u5bf8\u4e3a\u8f93\u5165\u7684\u00bd\u3002 number \u8868\u793a\u8be5\u5c42\u6a21\u5757\u5806\u53e0\u7684\u6b21\u6570\uff0c\u6700\u7ec8\u7684\u6b21\u6570\u8fd8\u8981\u4e58\u4e0adepth_multiple\u7cfb\u6570 module \u8868\u793a\u8be5\u5c42\u7684\u6a21\u5757\u3002Conv\u8868\u793a\u5377\u79ef+BN+\u6fc0\u6d3b\u6a21\u5757\u3002C3\u8868\u793acsp1_x\u7ed3\u6784\u3002 args \u8868\u793a\u8f93\u5165\u5230\u6a21\u5757\u7684\u53c2\u6570\u3002\u4f8b\u5982Conv\uff1a[128, 3, 2] \u8868\u793a\u8f93\u51fa\u901a\u9053128\uff0c\u5377\u79ef\u6838\u5c3a\u5bf83\uff0cstride=2\uff1bC3\u6a21\u5757\uff1a[1024],\u8868\u793a\u901a\u9053\u6570\u4e3a1024\uff0c\u6700\u7ec8\u7684\u8f93\u51fa\u901a\u9053\u6570\u8fd8\u8981\u4e58\u4e0a width_multiple\uff0c # \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5c06\u6a21\u578b\u7ed3\u679c\u5206\u4e3abackbone\u548chead\u4e24\u90e8\u5206\uff1a backbone : # [from, number, module, args] [ [ - 1 , 1 , Conv , [ 64 , 6 , 2 , 2 ] ], # 0-P1/2 [64, 6, 2, 2 ] \u8868\u793a\u8f93\u51fa\u901a\u9053128\uff0c\u5377\u79ef\u6838\u5c3a\u5bf83\uff0cstride=2\uff0cpadding=2 [ - 1 , 1 , Conv , [ 128 , 3 , 2 ] ], # 1-P2/4 [128, 3, 2] \u8868\u793a\u8f93\u51fa\u901a\u9053128\uff0c\u5377\u79ef\u6838\u5c3a\u5bf83\uff0cstride=2 [ - 1 , 3 , C3 , [ 128 ] ], # \u6307csp1_x\u7ec4\u4ef6,\u5176\u4e2d1024\u8868\u793a\u901a\u9053\u6570\u4e3a1024 [ - 1 , 1 , Conv , [ 256 , 3 , 2 ] ], # 3-P3/8 [ - 1 , 6 , C3 , [ 256 ] ], [ - 1 , 1 , Conv , [ 512 , 3 , 2 ] ], # 5-P4/16 [ - 1 , 9 , C3 , [ 512 ] ], [ - 1 , 1 , Conv , [ 1024 , 3 , 2 ] ], # 7-P5/32 [ - 1 , 3 , C3 , [ 1024 ] ], [ - 1 , 1 , SPPF , [ 1024 , 5 ] ], # 9 [ 1024, 5 ]\u8868\u793a\u8f93\u51fa\u901a\u9053\u6570\u4e3a1025\uff0c\u6c60\u5316\u7a97\u53e3\u4e3a5\u3002 ] head\u7684\u8bbe\u7f6e Head\u6307neck\u548coutput\u4e24\u90e8\u5206\uff0c\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fdb\u884c\u914d\u7f6e\uff0c\u6bcf\u4e2a\u6a21\u5757\u7684\u914d\u7f6e\u4e0ebackbone\u4e2d\u662f\u4e00\u6837\u7684\u3002 head : # [from, number, module, args] [ [ - 1 , 1 , Conv , [ 512 , 1 , 1 ] ], [ - 1 , 1 , nn . Upsample , [ None , 2 , 'nearest' ] ], # nn.Upsample\u6a21\u5757\u7684\u53c2\u6570[ None, 2, 'nearest' ] None\u8868\u793a\u901a\u9053\u6570\u4e0e\u8f93\u5165\u901a\u9053\u76f8\u540c\uff0c2\u8868\u793a\u4e0a\u91c7\u6837\u500d\u6570\uff0c'nearest'\u8868\u793a\u5dee\u503c\u65b9\u6cd5 [ [ - 1 , 6 ], 1 , Concat , [ 1 ] ], # \u8868\u793a\u4e0a\u4e00\u5c42\u8f93\u51fa\u4e0e\u7b2c6\u5c42\u8f93\u51fa\u8fdb\u884cconcat\u878d\u5408\uff0c\u6700\u540e[ 1 ]\u8868\u793a\u7279\u5f81\u56fe\u7684\u957f\u5bbd\u4e0d\u53d1\u751f\u53d8\u5316 [ - 1 , 3 , C3 , [ 512 , False ] ], # 13 [ - 1 , 1 , Conv , [ 256 , 1 , 1 ] ], [ - 1 , 1 , nn . Upsample , [ None , 2 , 'nearest' ] ], [ [ - 1 , 4 ], 1 , Concat , [ 1 ] ], # cat backbone P3 [ - 1 , 3 , C3 , [ 256 , False ] ], # 17 (P3/8-small) \u8868\u793acsp2_3, 256\u8868\u793a\u901a\u9053\u6570\uff0cFalse\u8868\u793a\u4e0d\u4f7f\u7528\u6b8b\u5dee\u6a21\u5757 [ - 1 , 1 , Conv , [ 256 , 3 , 2 ] ], [ [ - 1 , 14 ], 1 , Concat , [ 1 ] ], # cat head P4 [ - 1 , 3 , C3 , [ 512 , False ] ], # 20 (P4/16-medium) [ - 1 , 1 , Conv , [ 512 , 3 , 2 ] ], [ [ - 1 , 10 ], 1 , Concat , [ 1 ] ], # cat head P5 [ - 1 , 3 , C3 , [ 1024 , False ] ], # 23 (P5/32-large) [ [ 17 , 20 , 23 ], 1 , Detect , [ nc , anchors ] ], # Detect(P3, P4, P5) \u8f93\u51fa\u5c42\u8bbe\u7f6e\uff1a\u301017\uff0c20\uff0c23\u3011\u8868\u793a\u8f93\u5165\u5c42\uff0cnc\u8868\u793a\u7c7b\u522b\u4e2a\u6570\uff0canchors\u8868\u793aanchor\u7684\u8bbe\u7f6e ] \u4e0a\u8ff0\u5c31\u662f\u6211\u4eec\u5728V5\u4e2d\u6784\u5efa\u6a21\u578b\u7684\u65b9\u5f0f\uff0c\u6784\u5efa\u597d\u6a21\u578b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u8bad\u7ec3\u96c6\u6570\u636e\u5bf9\u5176\u8fdb\u884c\u8bad\u7ec3","title":"4.2 \u6a21\u578b\u9009\u62e9\uff08\u6784\u5efa\uff09"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#43","text":"\u6570\u636e\u96c6\u548c\u6a21\u578b\u51c6\u5907\u597d\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bad\u7ec3\u7684\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u6a21\u578b\u8bad\u7ec3 import train # \u6a21\u578b\u8bad\u7ec3\uff1a\u8bbe\u7f6e\u76f8\u5e94\u7684\u53c2\u6570\uff1a\u6a21\u578b\u914d\u7f6e\u4fe1\u606f train . run ( cfg = 'models/yolov5s.yaml' , # \u6a21\u578b\u7ed3\u6784\u7684\u914d\u7f6e\u6587\u4ef6 data = 'data/coco128.yaml' , # \u6570\u636e\u7684\u914d\u7f6e\u6587\u4ef6 imgsz = 640 , # \u56fe\u50cf\u5927\u5c0f batch_size = 2 , # \u6279\u6b21\u5927\u5c0f weights = 'yolov5s.pt' , # \u9884\u8bad\u7ec3\u6a21\u578b epochs = 1 , # \u8bad\u7ec3\u8f6e\u6b21 worker = 1 # \u6570\u636e\u52a0\u8f7d\u7684\u7ebf\u7a0b\u6570\uff0c\u6839\u636e\u786c\u4ef6\u8d44\u6e90\u8fdb\u884c\u8bbe\u7f6e ) \u8bad\u7ec3\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a train : weights = yolov5s . pt , cfg = models / yolov5s . yaml , data = data / coco128 . yaml , hyp = data / hyps / hyp . scratch - low . yaml , epochs = 1 , batch_size = 2 , imgsz = 640 , rect = False , resume = False , nosave = False , noval = False , noautoanchor = False , evolve = None , bucket = , cache = None , image_weights = False , device = , multi_scale = False , single_cls = False , optimizer = SGD , sync_bn = False , workers = 8 , project = runs / train , name = exp , exist_ok = False , quad = False , cos_lr = False , label_smoothing = 0.0 , patience = 100 , freeze = [ 0 ], save_period =- 1 , local_rank =- 1 , entity = None , upload_dataset = False , bbox_interval =- 1 , artifact_alias = latest , worker = 1 , lr = 0.01 hyperparameters : lr0 = 0.01 , lrf = 0.01 , momentum = 0.937 , weight_decay = 0.0005 , warmup_epochs = 3.0 , warmup_momentum = 0.8 , warmup_bias_lr = 0.1 , box = 0.05 , cls = 0.5 , cls_pw = 1.0 , obj = 1.0 , obj_pw = 1.0 , iou_t = 0.2 , anchor_t = 4.0 , fl_gamma = 0.0 , hsv_h = 0.015 , hsv_s = 0.7 , hsv_v = 0.4 , degrees = 0.0 , translate = 0.1 , scale = 0.5 , shear = 0.0 , perspective = 0.0 , flipud = 0.0 , fliplr = 0.5 , mosaic = 1.0 , mixup = 0.0 , copy_paste = 0.0 \u3002\u3002\u3002\u3002 AutoAnchor : 4.27 anchors / target , 0.994 Best Possible Recall ( BPR ) . Current anchors are a good fit to dataset \u2705 Image sizes 640 train , 640 val Using 2 dataloader workers Logging results to runs / train / exp4 Starting training for 1 epochs ... Epoch gpu_mem box obj cls labels img_size 0 %| | 0 / 64 [ 00 : 13 < ? , ? it / s ] \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f1a\u8fdb\u884c\u6570\u636e\u7684\u589e\u5f3a\uff0canchor\u7684\u8c03\u6574\uff0c\u8bad\u7ec3\u4fe1\u606f\u7684\u5904\u7406\u7b49\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4f1a\u88ab\u4fdd\u5b58\u5728run/train/expX\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u63a5\u4e0b\u6765\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9\u4e9b\u7ed3\u679c\uff1a opt.yaml\u4e2d\u7684\u8d85\u53c2\u6570\u4e3b\u8981\u6307\u5b66\u4e60\u7387\uff0c\u4f18\u5316\u5668\uff0c\u9608\u503c\u7b49\u4e00\u7cfb\u5217\u7684\u53c2\u6570\uff0c\u4fdd\u5b58\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684hyperparameters\u7684\u53c2\u6570\u3002 # \u5b66\u4e60\u7387\u8bbe\u7f6e lr0 : 0.01 lrf : 0.2 momentum : 0.937 # \u5b66\u4e60\u7387\u9884\u70ed weight_decay : 0.0005 warmup_epochs : 3.0 warmup_momentum : 0.8 warmup_bias_lr : 0.1 # \u635f\u5931\u51fd\u6570\u7684\u53c2\u6570 box : 0.05 cls : 0.5 cls_pw : 1.0 obj : 1.0 obj_pw : 1.0 iou_t : 0.2 anchor_t : 4.0 fl_gamma : 0.0 # \u6570\u636e\u589e\u5f3a\u7684\u53c2\u6570 hsv_h : 0.015 hsv_s : 0.7 hsv_v : 0.4 degrees : 0.0 translate : 0.1 scale : 0.5 shear : 0.0 perspective : 0.0 flipud : 0.0 fliplr : 0.5 mosaic : 1.0 mixup : 0.0 opt.yaml\u4e2d\u7684\u914d\u7f6e\u4fe1\u606f\u5305\u62ec\u6279\u6b21\u5927\u5c0f\uff0c\u8f6e\u6b21\u7b49\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2dtrain\u7684\u53c2\u6570\u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\uff1a # \u6a21\u578b\u914d\u7f6e\u4fe1\u606f weights : yolov5s . pt cfg : 'yolov5s.yaml' # \u6570\u636e data : data / coco128 . yaml # \u8bad\u7ec3\u53c2\u6570 hyp : data / hyp . scratch . yaml epochs : 20 batch_size : 16 img_size : - 640 - 640 \u3002\u3002\u3002\u3002 \u6570\u636e\u5206\u6790\u7684\u7ed3\u679c\uff0c\u5728\u8fd9\u91cc\u5bf9\u6807\u6ce8\u6846\u7c7b\u522b\uff0c\u4e2d\u5fc3\u70b9\u5750\u6807\u53ca\u6807\u6ce8\u6846\u5bbd\u9ad8\u7684\u5206\u5e03\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u9001\u5165\u7f51\u7edc\u4e2d\u8bad\u7ec3\u96c6\u6570\u636e\u5982\u4e0b\u6240\u793a\uff1a\u8be5\u56fe\u4e2d\u663e\u793a\u4e86\u5f53\u524d\u9001\u5165\u7f51\u7edc\u4e2d16\u5e45\u56fe\u50cf\uff0c\u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\u8fdb\u884c\u4e86masic\u7684\u589e\u5f3a\u5904\u7406 \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5bf9\u9a8c\u8bc1\u96c6\u6570\u636e\u9884\u6d4b\u7ed3\u679c\uff0c\u6765\u5bf9\u6bd4\u4e0b\u9884\u6d4b\u548c\u771f\u5b9e\u503c\u7ed3\u679c\uff1a \u771f\u5b9e\u6807\u6ce8\u7684\u7ed3\u679c\uff1a \u7f51\u7edc\u9884\u6d4b\u7ed3\u679c\uff1a \u5bf9\u6bd4\u4e24\u5e45\u56fe\u50cf\u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u6709\u4e9b\u76ee\u6807\u6ca1\u6709\u88ab\u68c0\u6d4b\u5230\uff0c\u4f46\u662f\u5927\u90e8\u5206\u76ee\u6807\u6a21\u578b\u90fd\u68c0\u6d4b\u51fa\u6765\u4e86 \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u635f\u5931\u51fd\u6570\uff0c\u51c6\u786e\u7387\u7684\u53d8\u5316\u60c5\u51b5\u5982\u4e0b\u6240\u793a\uff1a \u5728\u8fd9\u91cc\u662f\u8bad\u7ec3\u4e8620\u4e2a\u8f6e\u6b21\u7684\u7ed3\u679c\uff0c\u4ece\u8fd9\u4e2a\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u968f\u7740\u8bad\u7ec3\u7684\u8fdb\u884c\u635f\u5931\u662f\u5728\u4e0d\u65ad\u4e0b\u964d\u7684\uff0c\u800c\u51c6\u786e\u7387\u662f\u5728\u4e0d\u65ad\u63d0\u5347\u7684\u3002\u7531\u4e8e\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u9a8c\u8bc1\u96c6\u548c\u8bad\u7ec3\u96c6\u4f7f\u7528\u7684\u662f\u76f8\u540c\u7684\u6570\u636e\uff0c\u6240\u4ee5\u9a8c\u8bc1\u96c6\u7684\u66f2\u7ebf\u53d8\u5316\u66f4\u5e73\u6ed1\u4e00\u4e9b\u3002 \u6a21\u578b\u8bad\u7ec3\u6743\u91cd\u7684\u4fdd\u5b58\u7ed3\u679c\uff0c\u5728weights\u6587\u4ef6\u5939\u4e2d\u4fdd\u5b58\u4e86\u6700\u540e\u4e00\u4e2a\u8f6e\u6b21\u7684\u8bad\u7ec3\u7ed3\u679clast.pt\u548c\u9a8c\u8bc1\u96c6\u7cbe\u5ea6\u6700\u9ad8\u7684\u7ed3\u679cbest.pt,\u5982\u4e0b\u6240\u793a\uff1a \u5230\u8fd9\u91cc\u6a21\u578b\u5c31\u88ab\u6211\u4eec\u8bad\u7ec3\u597d\u4e86\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6743\u91cd\u53c2\u6570\u8fdb\u884c\u9884\u6d4b\u4e86\u3002","title":"4.3 \u6a21\u578b\u8bad\u7ec3"},{"location":"02-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/06-yoloV5%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/#44","text":"\u6a21\u578b\u9884\u6d4b\u7684\u65b9\u6cd5\u4e0e\u672c\u7ae0\u5f00\u5934\u662f\u4e00\u6837\u7684\uff0c\u4f7f\u7528detect\u6765\u8fdb\u884c\u9884\u6d4b\uff0c\u52a0\u8f7d\u521a\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570\u5982\u4e0b\u6240\u793a\uff1a # \u5bfc\u5165\u9884\u6d4b\u5de5\u5177 import detect # \u8fd0\u884c\u9884\u6d4b\u7a0b\u5e8f\uff1a\u6307\u5b9a\u8981\u9884\u6d4b\u7684\u56fe\u7247\uff0c\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53ca\u662f\u5426\u663e\u793a\u56fe\u7247 detect . run ( source = \"data/images/img3.jpg\" , weights = 'runs/train/exp3/weights/best.pt' , view_img = False ) \u6211\u4eec\u4f9d\u7136\u5bf9\u524d\u9762\u56fe\u50cf\u8fdb\u884c\u9884\u6d4b\uff0c\u7ed3\u679c\u4e3a\uff1a \u5728\u8fd9\u91cc\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u5c06\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u68c0\u6d4b\u51fa\u6765\u3002 \u603b\u7ed3 \u4e86\u89e3yoloV5\u7f51\u7edc\u67b6\u6784 \u8f93\u5165\uff0cbackbone\uff0cneck\uff0coutput \u77e5\u9053yoloV5\u4e2d\u4f7f\u7528\u7684\u7b56\u7565 \u56fe\u50cf\u5c3a\u5bf8\u7684\u8c03\u6574\uff0c\u56fe\u50cf\u589e\u5f3a\u65b9\u6cd5\uff0c\u6b63\u8d1f\u6837\u672c\u7684\u8bbe\u7f6e\u7b49\u3002 \u80fd\u591f\u4f7f\u7528yoloV5\u6846\u67b6\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b","title":"4.4 \u6a21\u578b\u9884\u6d4b"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/","text":"3.1 \u56fe\u50cf\u5206\u5272 \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u56fe\u50cf\u5206\u5272\u7684\u76ee\u7684 \u77e5\u9053\u56fe\u50cf\u5206\u5272\u7684\u4efb\u52a1\u7c7b\u578b \u77e5\u9053\u56fe\u50cf\u5206\u5272\u7684\u8bc4\u4f30\u65b9\u6cd5 \u8ba1\u7b97\u673a\u89c6\u89c9\u65e8\u5728\u8bc6\u522b\u548c\u7406\u89e3\u56fe\u50cf\u4e2d\u7684\u5185\u5bb9\uff0c\u5305\u542b\u4e09\u5927\u57fa\u672c\u4efb\u52a1\uff1a\u56fe\u50cf\u5206\u7c7b(\u56fea)\u3001\u76ee\u6807\u68c0\u6d4b(\u56feb)\u548c\u56fe\u50cf\u5206\u5272,\u5176\u4e2d\u56fe\u50cf\u5206\u5272\u53c8\u53ef\u5206\u4e3a\uff1a\u8bed\u4e49\u5206\u5272(\u56fec)\u548c\u5b9e\u4f8b\u5206\u5272(\u56fed)\u3002 \u8fd9\u4e09\u4e2a\u4efb\u52a1\u5bf9\u56fe\u50cf\u7684\u7406\u89e3\u9010\u6b65\u6df1\u5165\u3002\u5047\u8bbe\u7ed9\u5b9a\u4e00\u5f20\u8f93\u5165\u56fe\u50cf\uff0c \u56fe\u50cf\u5206\u7c7b\u65e8\u5728\u5224\u65ad\u8be5\u56fe\u50cf\u6240\u5c5e\u7c7b\u522b\u3002 \u76ee\u6807\u68c0\u6d4b\u662f\u5728\u56fe\u50cf\u5206\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u4e00\u6b65\u5224\u65ad\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u5177\u4f53\u5728\u56fe\u50cf\u7684\u4ec0\u4e48\u4f4d\u7f6e\uff0c\u901a\u5e38\u662f\u4ee5\u5916\u5305\u77e9\u5f62(bounding box)\u7684\u5f62\u5f0f\u8868\u793a\u3002 \u56fe\u50cf\u5206\u5272\u662f\u76ee\u6807\u68c0\u6d4b\u66f4\u8fdb\u9636\u7684\u4efb\u52a1\uff0c\u76ee\u6807\u68c0\u6d4b\u53ea\u9700\u8981\u6846\u51fa\u6bcf\u4e2a\u76ee\u6807\u7684\u5305\u56f4\u76d2\uff0c\u8bed\u4e49\u5206\u5272\u9700\u8981\u8fdb\u4e00\u6b65\u5224\u65ad\u56fe\u50cf\u4e2d\u54ea\u4e9b\u50cf\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u76ee\u6807\u3002\u4f46\u662f\uff0c\u8bed\u4e49\u5206\u5272\u4e0d\u533a\u5206\u5c5e\u4e8e\u76f8\u540c\u7c7b\u522b\u7684\u4e0d\u540c\u5b9e\u4f8b\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5f53\u56fe\u50cf\u4e2d\u6709\u591a\u4e2acube\u65f6\uff0c\u8bed\u4e49\u5206\u5272\u4f1a\u5c06\u6240\u6709\u7acb\u65b9\u4f53\u6574\u4f53\u7684\u6240\u6709\u50cf\u7d20\u9884\u6d4b\u4e3a\u201ccube\u201d\u8fd9\u4e2a\u7c7b\u522b\u3002\u4e0e\u6b64\u4e0d\u540c\u7684\u662f\uff0c**\u5b9e\u4f8b\u5206\u5272**\u9700\u8981\u533a\u5206\u51fa\u54ea\u4e9b\u50cf\u7d20\u5c5e\u4e8e\u7b2c\u4e00\u4e2acube\u3001\u54ea\u4e9b\u50cf\u7d20\u5c5e\u4e8e\u7b2c\u4e8c\u4e2acube\u2026\u2026\u3002 1.1 \u56fe\u50cf\u5206\u5272\u7684\u5b9a\u4e49 \u00b6 \u5b9a\u4e49\uff1a\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\uff0c\u56fe\u50cf\u5206\u5272\uff08Object Segmentation\uff09\u6307\u7684\u662f\u5c06\u6570\u5b57\u56fe\u50cf\u7ec6\u5206\u4e3a\u591a\u4e2a\u56fe\u50cf\u5b50\u533a\u57df\uff08\u50cf\u7d20\u7684\u96c6\u5408\uff09\u7684\u8fc7\u7a0b\uff0c\u5e76\u4e14\u540c\u4e00\u4e2a\u5b50\u533a\u57df\u5185\u7684\u7279\u5f81\u5177\u6709\u4e00\u5b9a\u76f8\u4f3c\u6027\uff0c\u4e0d\u540c\u5b50\u533a\u57df\u7684\u7279\u5f81\u5448\u73b0\u8f83\u4e3a\u660e\u663e\u7684\u5dee\u5f02\u3002 \u56fe\u50cf\u5206\u5272\u7684\u76ee\u6807\u5c31\u662f\u4e3a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u5206\u7c7b\u3002\u5e94\u7528\u9886\u57df\u975e\u5e38\u7684\u5e7f\u6cdb\uff1a\u81ea\u52a8\u9a7e\u9a76\u3001\u533b\u7597\u5f71\u50cf\uff0c\u56fe\u50cf\u7f8e\u5316\u3001\u4e09\u7ef4\u91cd\u5efa\u7b49\u7b49\u3002 \u81ea\u52a8\u9a7e\u9a76\uff08Autonomous vehicles\uff09\uff1a\u6c7d\u8f66\u9700\u8981\u5b89\u88c5\u5fc5\u8981\u7684\u611f\u77e5\u7cfb\u7edf\u4ee5\u4e86\u89e3\u5b83\u4eec\u7684\u73af\u5883\uff0c\u8fd9\u6837\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u624d\u80fd\u591f\u5b89\u5168\u5730\u9a76\u5165\u73b0\u6709\u7684\u9053\u8def \u533b\u7597\u5f71\u50cf\u8bca\u65ad\uff08Medical image diagnostics\uff09\uff1a\u673a\u5668\u5728\u5206\u6790\u80fd\u529b\u4e0a\u6bd4\u653e\u5c04\u79d1\u533b\u751f\u66f4\u5f3a\uff0c\u800c\u4e14\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u8bca\u65ad\u6240\u9700\u65f6\u95f4\u3002 \u56fe\u50cf\u5206\u5272\u662f\u4e00\u4e2a\u975e\u5e38\u56f0\u96be\u7684\u95ee\u9898\uff0c\u5c24\u5176\u662f\u5728\u6df1\u5ea6\u5b66\u4e60\u4e4b\u524d\u3002\u6df1\u5ea6\u5b66\u4e60\u4f7f\u5f97\u56fe\u50cf\u5206\u5272\u7684\u51c6\u786e\u7387\u63d0\u9ad8\u4e86\u5f88\u591a\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4e3b\u8981\u56f4\u7ed5\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u56fe\u50cf\u5206\u5272\u7684\u5185\u5bb9\u3002 1.2 \u4efb\u52a1\u7c7b\u578b \u00b6 1.2.1 \u4efb\u52a1\u63cf\u8ff0 \u00b6 \u7b80\u5355\u6765\u8bf4\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u8f93\u5165\u4e00\u4e2aRGB\u5f69\u8272\u56fe\u7247 \uff08height\u00d7width\u00d73\uff09 \uff08height\u00d7width\u00d73\uff09 \u6216\u8005\u4e00\u4e2a\u7070\u5ea6\u56fe \uff08height\u00d7width\u00d71\uff09 \uff08height\u00d7width\u00d71\uff09 \uff0c\u7136\u540e\u8f93\u51fa\u4e00\u4e2a\u5305\u542b\u5404\u4e2a\u50cf\u7d20\u7c7b\u522b\u6807\u7b7e\u7684\u5206\u5272\u56fe \uff08height\u00d7width\u00d71\uff09 \uff08height\u00d7width\u00d71\uff09 \u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e0e\u6211\u4eec\u5904\u7406\u5206\u7c7b\u503c\u7684\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u9884\u6d4b\u76ee\u6807\u53ef\u4ee5\u91c7\u7528one-hot\u7f16\u7801\uff0c\u5373\u4e3a\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u7c7b\u521b\u5efa\u4e00\u4e2a\u8f93\u51fa\u901a\u9053\u3002\u901a\u8fc7\u53d6\u6bcf\u4e2a\u50cf\u7d20\u70b9\u5728\u5404\u4e2achannel\u7684argmax\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7684\u9884\u6d4b\u5206\u5272\u56fe\uff0c\uff08\u5982\u4e0b\u56fe\u6240\u793a\uff09\uff1a \u6bd4\u5982\uff1aperson\u7684\u7f16\u7801\u4e3a\uff1a10000\uff0c\u800cGrass\u7684\u7f16\u7801\u4e3a\uff1a00100 \u5f53\u5c06\u9884\u6d4b\u7ed3\u679c\u53e0\u52a0\u5230\u5355\u4e2achannel\u65f6\uff0c\u79f0\u8fd9\u4e3a\u4e00\u4e2a\u63a9\u819cmask\uff0c\u5b83\u53ef\u4ee5\u7ed9\u51fa\u4e00\u5f20\u56fe\u50cf\u4e2d\u67d0\u4e2a\u7279\u5b9a\u7c7b\u7684\u6240\u5728\u533a\u57df\uff1a 1.2.2 \u4efb\u52a1\u7c7b\u578b \u00b6 \u76ee\u524d\u7684\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u4e3b\u8981\u6709\u4e24\u7c7b\uff1a \u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272 \u6211\u4eec\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u6765\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u5206\u5272\u65b9\u5f0f\uff1a \u8bed\u4e49\u5206\u5272\u5c31\u662f\u628a\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u8d4b\u4e88\u4e00\u4e2a\u7c7b\u522b\u6807\u7b7e\uff0c\u5982\u4e0b\u56fe\u6211\u4eec\u5c06\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u5206\u7c7b\u4e3a\u4eba\uff0c\u7f8a\uff0c\u72d7\uff0c\u8349\u5730\u5373\u53ef\u3002 \u5b9e\u4f8b\u5206\u5272\uff0c\u76f8\u5bf9\u4e8e\u8bed\u4e49\u5206\u5272\u6765\u8bb2\uff0c\u4e0d\u4ec5\u8981\u533a\u5206\u4e0d\u540c\u7c7b\u522b\u7684\u50cf\u7d20\uff0c\u8fd8\u9700\u8981\u9700\u8981\u5bf9\u540c\u4e00\u7c7b\u522b\u7684\u4e0d\u540c\u4e2a\u4f53\u8fdb\u884c\u533a\u5206\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e0d\u4ec5\u9700\u8981\u8fdb\u884c\u7c7b\u522b\u7684\u5212\u5206\uff0c\u8fd8\u8981\u5c06\u5404\u4e2a\u4e2a\u4f53\u5212\u5206\u51fa\u6765\uff1a\u7f8a1\uff0c\u7f8a2\uff0c\u7f8a3\uff0c\u7f8a4\uff0c\u7f8a5\u7b49\u3002 \u76ee\u524d\u56fe\u50cf\u5206\u5272\u7684\u4efb\u52a1\u4e3b\u8981\u96c6\u4e2d\u5728\u8bed\u4e49\u5206\u5272\uff0c\u800c\u76ee\u524d\u7684\u96be\u70b9\u4e5f\u5728\u4e8e\u201c\u8bed\u4e49\u201d\uff0c\u8868\u8fbe\u67d0\u4e00\u8bed\u4e49\u7684\u540c\u4e00\u7269\u4f53\u5e76\u4e0d\u603b\u662f\u4ee5\u76f8\u540c\u7684\u5f62\u8c61\u51fa\u73b0\uff0c\u5982\u5305\u542b\u4e0d\u540c\u7684\u989c\u8272\u3001\u7eb9\u7406\u7b49\uff0c\u8fd9\u5bf9\u7cbe\u786e\u5206\u5272\u5e26\u6765\u4e86\u5f88\u5927\u7684\u6311\u6218\u3002\u800c\u4e14\u4ee5\u76ee\u524d\u7684\u6a21\u578b\u8868\u73b0\u6765\u770b\uff0c\u5728\u51c6\u786e\u7387\u4e0a\u8fd8\u6709\u5f88\u5927\u7684\u63d0\u5347\u7a7a\u95f4\u3002\u800c\u5b9e\u4f8b\u5206\u5272\u7684\u601d\u8def\u4e3b\u8981\u662f\u76ee\u6807\u68c0\u6d4b+\u8bed\u4e49\u5206\u5272\uff0c\u5373\u7528\u76ee\u6807\u68c0\u6d4b\u65b9\u6cd5\u5c06\u56fe\u50cf\u4e2d\u7684\u4e0d\u540c\u5b9e\u4f8b\u6846\u51fa\uff0c\u518d\u7528\u8bed\u4e49\u5206\u5272\u65b9\u6cd5\u5728\u4e0d\u540c\u68c0\u6d4b\u7ed3\u679c\u5185\u8fdb\u884c\u9010\u50cf\u7d20\u6807\u8bb0\u3002 1.3 \u8bc4\u4ef7\u6307\u6807 \u00b6 \u56fe\u50cf\u5206\u5272\u4e2d\u901a\u5e38\u4f7f\u7528\u8bb8\u591a\u6807\u51c6\u6765\u8861\u91cf\u7b97\u6cd5\u7684\u7cbe\u5ea6\u3002\u8fd9\u4e9b\u6807\u51c6\u901a\u5e38\u662f\u50cf\u7d20\u7cbe\u5ea6\u53caIoU\u7684\u53d8\u79cd\uff0c\u4ee5\u4e0b\u6211\u4eec\u5c06\u4f1a\u4ecb\u7ecd\u5e38\u7528\u7684\u51e0\u79cd\u9010\u50cf\u7d20\u6807\u8bb0\u7684\u7cbe\u5ea6\u6807\u51c6\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u89e3\u91ca\uff0c\u5047\u8bbe\u5982\u4e0b\uff1a\u5171\u6709 k+1 k+1 \u4e2a\u7c7b\uff08\u4ece L_0 L_0 \u5230 L_k L_k \uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u80cc\u666f\u7c7b\uff09\uff0c p_{ij} p_{ij} \u8868\u793a\u672c\u5c5e\u4e8e\u7c7b i i \u4f46\u88ab\u9884\u6d4b\u4e3a\u7c7b j j \u7684\u50cf\u7d20\u3002\u5373 p_{ii} p_{ii} \u8868\u793a\u9884\u6d4b\u6b63\u786e\u7684\u50cf\u7d20\u3002 1.3.1 \u50cf\u7d20\u7cbe\u5ea6 \u00b6 Pixel Accuracy(PA\uff0c\u50cf\u7d20\u7cbe\u5ea6)\uff1a\u8fd9\u662f\u6700\u7b80\u5355\u7684\u5ea6\u91cf\uff0c\u4e3a\u9884\u6d4b\u6b63\u786e\u7684\u50cf\u7d20\u5360\u603b\u50cf\u7d20\u7684\u6bd4\u4f8b\u3002 \u5bf9\u4e8e\u6837\u672c\u4e0d\u5747\u8861\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\u533b\u5b66\u56fe\u50cf\u5206\u5272\u4e2d\uff0c\u80cc\u666f\u4e0e\u6807\u8bb0\u6837\u672c\u4e4b\u95f4\u7684\u6bd4\u4f8b\u5f80\u5f80\u4e25\u91cd\u5931\u8861\u3002\u56e0\u6b64\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u8fdb\u884c\u5ea6\u91cf\u3002 1.3.2 \u5e73\u5747\u50cf\u7d20\u7cbe\u5ea6 \u00b6 Mean Pixel Accuracy(MPA\uff0c\u5e73\u5747\u50cf\u7d20\u7cbe\u5ea6)\uff1a\u662fPA\u7684\u4e00\u79cd\u7b80\u5355\u63d0\u5347\uff0c\u8ba1\u7b97\u6bcf\u4e2a**\u7c7b\u5185**\u88ab\u6b63\u786e\u5206\u7c7b\u50cf\u7d20\u6570\u7684\u6bd4\u4f8b\uff0c\u4e4b\u540e\u6c42\u6240\u6709\u7c7b\u7684\u5e73\u5747\u3002 1.3.3 \u5e73\u5747\u4ea4\u5e76\u6bd4 \u00b6 Mean Intersection over Union(MIoU\uff0c\u5e73\u5747\u4ea4\u5e76\u6bd4)\uff1a\u4e3a\u8bed\u4e49\u5206\u5272\u7684\u6807\u51c6\u5ea6\u91cf\uff0c\u5176\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u4e4b\u6bd4\uff0c\u5728\u8bed\u4e49\u5206\u5272\u7684\u95ee\u9898\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u96c6\u5408\u4e3a\u771f\u5b9e\u503c\uff08ground truth\uff09\u548c\u9884\u6d4b\u503c\uff08predicted segmentation\uff09\u3002\u4ea4\u96c6\u4e3a\u9884\u6d4b\u6b63\u786e\u7684\u50cf\u7d20\u6570\uff08intersection\uff09\uff0c\u5e76\u96c6\u4e3a\u9884\u6d4b\u6216\u771f\u5b9e\u503c\u4e3a i i \u7c7b\u7684\u548c\u51cf\u53bb\u9884\u6d4b\u6b63\u786e\u7684\u50cf\u7d20\uff0c\u5728\u6bcf\u4e2a\u7c7b\u4e0a\u8ba1\u7b97IoU\uff0c\u4e4b\u540e\u6c42\u5e73\u5747\u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u5982\u4f55\u7406\u89e3\u8fd9\u91cc\u7684\u516c\u5f0f\u5462\uff1f\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7ea2\u8272\u5706\u4ee3\u8868\u771f\u5b9e\u503c\uff0c\u9ec4\u8272\u5706\u4ee3\u8868\u9884\u6d4b\u503c\u3002\u6a59\u8272\u90e8\u5206\u7ea2\u8272\u5706\u4e0e\u9ec4\u8272\u5706\u7684\u4ea4\u96c6\uff0c\u5373\u9884\u6d4b\u6b63\u786e\u7684\u90e8\u5206\uff0c\u7ea2\u8272\u90e8\u5206\u8868\u793a\u5047\u8d1f\uff08\u771f\u5b9e\u503c\u4e3a\u8be5\u7c7b\u9884\u6d4b\u9519\u8bef\uff09\u7684\u90e8\u5206\uff0c\u9ec4\u8272\u8868\u793a\u5047\u6b63\uff08\u9884\u6d4b\u503c\u4e3ai\u7c7b\uff0c\u771f\u5b9e\u503c\u4e3a\u5176\u4ed6\uff09\u7684\u90e8\u5206\u3002 MIoU\u8ba1\u7b97\u7684\u662f\u8ba1\u7b97A\u4e0eB\u7684\u4ea4\u96c6\uff08\u6a59\u8272\u90e8\u5206\uff09\u4e0eA\u4e0eB\u7684\u5e76\u96c6\uff08\u7ea2\u8272+\u6a59\u8272+\u9ec4\u8272\uff09\u4e4b\u95f4\u7684\u6bd4\u4f8b\uff0c\u5728\u7406\u60f3\u72b6\u6001\u4e0bA\u4e0eB\u91cd\u5408\uff0c\u4e24\u8005\u6bd4\u4f8b\u4e3a1 \u3002 \u5728\u4ee5\u4e0a\u6240\u6709\u7684\u5ea6\u91cf\u6807\u51c6\u4e2d\uff0cMIoU\u7531\u4e8e\u5176\u7b80\u6d01\u3001\u4ee3\u8868\u6027\u5f3a\u800c\u6210\u4e3a\u6700\u5e38\u7528\u7684\u5ea6\u91cf\u6807\u51c6\uff0c\u5927\u591a\u6570\u7814\u7a76\u4eba\u5458\u90fd\u4f7f\u7528\u8be5\u6807\u51c6\u62a5\u544a\u5176\u7ed3\u679c\u3002PA\u5bf9\u4e8e\u6837\u672c\u4e0d\u5747\u8861\u7684\u60c5\u51b5\u4e0d\u9002\u7528\u3002 \u603b\u7ed3 \u56fe\u50cf\u5206\u5272\u7684\u5b9a\u4e49 \u56fe\u50cf\u5206\u5272\uff08Object Segmentation\uff09\u6307\u7684\u662f\u5c06\u6570\u5b57\u56fe\u50cf\u7ec6\u5206\u4e3a\u591a\u4e2a\u56fe\u50cf\u5b50\u533a\u57df\uff08\u50cf\u7d20\u7684\u96c6\u5408\uff09\u7684\u8fc7\u7a0b\uff0c\u5e76\u4e14\u540c\u4e00\u4e2a\u5b50\u533a\u57df\u5185\u7684\u7279\u5f81\u5177\u6709\u4e00\u5b9a\u76f8\u4f3c\u6027\uff0c\u4e0d\u540c\u5b50\u533a\u57df\u7684\u7279\u5f81\u5448\u73b0\u8f83\u4e3a\u660e\u663e\u7684\u5dee\u5f02\u3002 \u56fe\u50cf\u5206\u5272\u7684\u4efb\u52a1\u7c7b\u578b \u56fe\u50cf\u5206\u5272\u7684\u4efb\u52a1\u5c31\u662f\u7ed9\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u5206\u7c7b \u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272 \u56fe\u50cf\u5206\u5272\u7684\u8bc4\u4f30\u6307\u6807 \u50cf\u7d20\u7cbe\u5ea6\uff08PA\uff09\uff0c\u5e73\u5747\u50cf\u7d20\u7cbe\u5ea6\uff08mPA\uff09\u548c \u5e73\u5747\u4ea4\u5e76\u6bd4\uff08mIOU\uff09 \u6700\u5e38\u7528\u7684\u662fMIOU","title":"3.1 \u56fe\u50cf\u5206\u5272"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#31","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u56fe\u50cf\u5206\u5272\u7684\u76ee\u7684 \u77e5\u9053\u56fe\u50cf\u5206\u5272\u7684\u4efb\u52a1\u7c7b\u578b \u77e5\u9053\u56fe\u50cf\u5206\u5272\u7684\u8bc4\u4f30\u65b9\u6cd5 \u8ba1\u7b97\u673a\u89c6\u89c9\u65e8\u5728\u8bc6\u522b\u548c\u7406\u89e3\u56fe\u50cf\u4e2d\u7684\u5185\u5bb9\uff0c\u5305\u542b\u4e09\u5927\u57fa\u672c\u4efb\u52a1\uff1a\u56fe\u50cf\u5206\u7c7b(\u56fea)\u3001\u76ee\u6807\u68c0\u6d4b(\u56feb)\u548c\u56fe\u50cf\u5206\u5272,\u5176\u4e2d\u56fe\u50cf\u5206\u5272\u53c8\u53ef\u5206\u4e3a\uff1a\u8bed\u4e49\u5206\u5272(\u56fec)\u548c\u5b9e\u4f8b\u5206\u5272(\u56fed)\u3002 \u8fd9\u4e09\u4e2a\u4efb\u52a1\u5bf9\u56fe\u50cf\u7684\u7406\u89e3\u9010\u6b65\u6df1\u5165\u3002\u5047\u8bbe\u7ed9\u5b9a\u4e00\u5f20\u8f93\u5165\u56fe\u50cf\uff0c \u56fe\u50cf\u5206\u7c7b\u65e8\u5728\u5224\u65ad\u8be5\u56fe\u50cf\u6240\u5c5e\u7c7b\u522b\u3002 \u76ee\u6807\u68c0\u6d4b\u662f\u5728\u56fe\u50cf\u5206\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u8fdb\u4e00\u6b65\u5224\u65ad\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u5177\u4f53\u5728\u56fe\u50cf\u7684\u4ec0\u4e48\u4f4d\u7f6e\uff0c\u901a\u5e38\u662f\u4ee5\u5916\u5305\u77e9\u5f62(bounding box)\u7684\u5f62\u5f0f\u8868\u793a\u3002 \u56fe\u50cf\u5206\u5272\u662f\u76ee\u6807\u68c0\u6d4b\u66f4\u8fdb\u9636\u7684\u4efb\u52a1\uff0c\u76ee\u6807\u68c0\u6d4b\u53ea\u9700\u8981\u6846\u51fa\u6bcf\u4e2a\u76ee\u6807\u7684\u5305\u56f4\u76d2\uff0c\u8bed\u4e49\u5206\u5272\u9700\u8981\u8fdb\u4e00\u6b65\u5224\u65ad\u56fe\u50cf\u4e2d\u54ea\u4e9b\u50cf\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u76ee\u6807\u3002\u4f46\u662f\uff0c\u8bed\u4e49\u5206\u5272\u4e0d\u533a\u5206\u5c5e\u4e8e\u76f8\u540c\u7c7b\u522b\u7684\u4e0d\u540c\u5b9e\u4f8b\u3002\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5f53\u56fe\u50cf\u4e2d\u6709\u591a\u4e2acube\u65f6\uff0c\u8bed\u4e49\u5206\u5272\u4f1a\u5c06\u6240\u6709\u7acb\u65b9\u4f53\u6574\u4f53\u7684\u6240\u6709\u50cf\u7d20\u9884\u6d4b\u4e3a\u201ccube\u201d\u8fd9\u4e2a\u7c7b\u522b\u3002\u4e0e\u6b64\u4e0d\u540c\u7684\u662f\uff0c**\u5b9e\u4f8b\u5206\u5272**\u9700\u8981\u533a\u5206\u51fa\u54ea\u4e9b\u50cf\u7d20\u5c5e\u4e8e\u7b2c\u4e00\u4e2acube\u3001\u54ea\u4e9b\u50cf\u7d20\u5c5e\u4e8e\u7b2c\u4e8c\u4e2acube\u2026\u2026\u3002","title":"3.1 \u56fe\u50cf\u5206\u5272"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#11","text":"\u5b9a\u4e49\uff1a\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\uff0c\u56fe\u50cf\u5206\u5272\uff08Object Segmentation\uff09\u6307\u7684\u662f\u5c06\u6570\u5b57\u56fe\u50cf\u7ec6\u5206\u4e3a\u591a\u4e2a\u56fe\u50cf\u5b50\u533a\u57df\uff08\u50cf\u7d20\u7684\u96c6\u5408\uff09\u7684\u8fc7\u7a0b\uff0c\u5e76\u4e14\u540c\u4e00\u4e2a\u5b50\u533a\u57df\u5185\u7684\u7279\u5f81\u5177\u6709\u4e00\u5b9a\u76f8\u4f3c\u6027\uff0c\u4e0d\u540c\u5b50\u533a\u57df\u7684\u7279\u5f81\u5448\u73b0\u8f83\u4e3a\u660e\u663e\u7684\u5dee\u5f02\u3002 \u56fe\u50cf\u5206\u5272\u7684\u76ee\u6807\u5c31\u662f\u4e3a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u5206\u7c7b\u3002\u5e94\u7528\u9886\u57df\u975e\u5e38\u7684\u5e7f\u6cdb\uff1a\u81ea\u52a8\u9a7e\u9a76\u3001\u533b\u7597\u5f71\u50cf\uff0c\u56fe\u50cf\u7f8e\u5316\u3001\u4e09\u7ef4\u91cd\u5efa\u7b49\u7b49\u3002 \u81ea\u52a8\u9a7e\u9a76\uff08Autonomous vehicles\uff09\uff1a\u6c7d\u8f66\u9700\u8981\u5b89\u88c5\u5fc5\u8981\u7684\u611f\u77e5\u7cfb\u7edf\u4ee5\u4e86\u89e3\u5b83\u4eec\u7684\u73af\u5883\uff0c\u8fd9\u6837\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u624d\u80fd\u591f\u5b89\u5168\u5730\u9a76\u5165\u73b0\u6709\u7684\u9053\u8def \u533b\u7597\u5f71\u50cf\u8bca\u65ad\uff08Medical image diagnostics\uff09\uff1a\u673a\u5668\u5728\u5206\u6790\u80fd\u529b\u4e0a\u6bd4\u653e\u5c04\u79d1\u533b\u751f\u66f4\u5f3a\uff0c\u800c\u4e14\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u8bca\u65ad\u6240\u9700\u65f6\u95f4\u3002 \u56fe\u50cf\u5206\u5272\u662f\u4e00\u4e2a\u975e\u5e38\u56f0\u96be\u7684\u95ee\u9898\uff0c\u5c24\u5176\u662f\u5728\u6df1\u5ea6\u5b66\u4e60\u4e4b\u524d\u3002\u6df1\u5ea6\u5b66\u4e60\u4f7f\u5f97\u56fe\u50cf\u5206\u5272\u7684\u51c6\u786e\u7387\u63d0\u9ad8\u4e86\u5f88\u591a\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4e3b\u8981\u56f4\u7ed5\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u56fe\u50cf\u5206\u5272\u7684\u5185\u5bb9\u3002","title":"1.1 \u56fe\u50cf\u5206\u5272\u7684\u5b9a\u4e49"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#12","text":"","title":"1.2 \u4efb\u52a1\u7c7b\u578b"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#121","text":"\u7b80\u5355\u6765\u8bf4\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u8f93\u5165\u4e00\u4e2aRGB\u5f69\u8272\u56fe\u7247 \uff08height\u00d7width\u00d73\uff09 \uff08height\u00d7width\u00d73\uff09 \u6216\u8005\u4e00\u4e2a\u7070\u5ea6\u56fe \uff08height\u00d7width\u00d71\uff09 \uff08height\u00d7width\u00d71\uff09 \uff0c\u7136\u540e\u8f93\u51fa\u4e00\u4e2a\u5305\u542b\u5404\u4e2a\u50cf\u7d20\u7c7b\u522b\u6807\u7b7e\u7684\u5206\u5272\u56fe \uff08height\u00d7width\u00d71\uff09 \uff08height\u00d7width\u00d71\uff09 \u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e0e\u6211\u4eec\u5904\u7406\u5206\u7c7b\u503c\u7684\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u9884\u6d4b\u76ee\u6807\u53ef\u4ee5\u91c7\u7528one-hot\u7f16\u7801\uff0c\u5373\u4e3a\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u7c7b\u521b\u5efa\u4e00\u4e2a\u8f93\u51fa\u901a\u9053\u3002\u901a\u8fc7\u53d6\u6bcf\u4e2a\u50cf\u7d20\u70b9\u5728\u5404\u4e2achannel\u7684argmax\u53ef\u4ee5\u5f97\u5230\u6700\u7ec8\u7684\u9884\u6d4b\u5206\u5272\u56fe\uff0c\uff08\u5982\u4e0b\u56fe\u6240\u793a\uff09\uff1a \u6bd4\u5982\uff1aperson\u7684\u7f16\u7801\u4e3a\uff1a10000\uff0c\u800cGrass\u7684\u7f16\u7801\u4e3a\uff1a00100 \u5f53\u5c06\u9884\u6d4b\u7ed3\u679c\u53e0\u52a0\u5230\u5355\u4e2achannel\u65f6\uff0c\u79f0\u8fd9\u4e3a\u4e00\u4e2a\u63a9\u819cmask\uff0c\u5b83\u53ef\u4ee5\u7ed9\u51fa\u4e00\u5f20\u56fe\u50cf\u4e2d\u67d0\u4e2a\u7279\u5b9a\u7c7b\u7684\u6240\u5728\u533a\u57df\uff1a","title":"1.2.1 \u4efb\u52a1\u63cf\u8ff0"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#122","text":"\u76ee\u524d\u7684\u56fe\u50cf\u5206\u5272\u4efb\u52a1\u4e3b\u8981\u6709\u4e24\u7c7b\uff1a \u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272 \u6211\u4eec\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u6765\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u5206\u5272\u65b9\u5f0f\uff1a \u8bed\u4e49\u5206\u5272\u5c31\u662f\u628a\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u8d4b\u4e88\u4e00\u4e2a\u7c7b\u522b\u6807\u7b7e\uff0c\u5982\u4e0b\u56fe\u6211\u4eec\u5c06\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u5206\u7c7b\u4e3a\u4eba\uff0c\u7f8a\uff0c\u72d7\uff0c\u8349\u5730\u5373\u53ef\u3002 \u5b9e\u4f8b\u5206\u5272\uff0c\u76f8\u5bf9\u4e8e\u8bed\u4e49\u5206\u5272\u6765\u8bb2\uff0c\u4e0d\u4ec5\u8981\u533a\u5206\u4e0d\u540c\u7c7b\u522b\u7684\u50cf\u7d20\uff0c\u8fd8\u9700\u8981\u9700\u8981\u5bf9\u540c\u4e00\u7c7b\u522b\u7684\u4e0d\u540c\u4e2a\u4f53\u8fdb\u884c\u533a\u5206\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e0d\u4ec5\u9700\u8981\u8fdb\u884c\u7c7b\u522b\u7684\u5212\u5206\uff0c\u8fd8\u8981\u5c06\u5404\u4e2a\u4e2a\u4f53\u5212\u5206\u51fa\u6765\uff1a\u7f8a1\uff0c\u7f8a2\uff0c\u7f8a3\uff0c\u7f8a4\uff0c\u7f8a5\u7b49\u3002 \u76ee\u524d\u56fe\u50cf\u5206\u5272\u7684\u4efb\u52a1\u4e3b\u8981\u96c6\u4e2d\u5728\u8bed\u4e49\u5206\u5272\uff0c\u800c\u76ee\u524d\u7684\u96be\u70b9\u4e5f\u5728\u4e8e\u201c\u8bed\u4e49\u201d\uff0c\u8868\u8fbe\u67d0\u4e00\u8bed\u4e49\u7684\u540c\u4e00\u7269\u4f53\u5e76\u4e0d\u603b\u662f\u4ee5\u76f8\u540c\u7684\u5f62\u8c61\u51fa\u73b0\uff0c\u5982\u5305\u542b\u4e0d\u540c\u7684\u989c\u8272\u3001\u7eb9\u7406\u7b49\uff0c\u8fd9\u5bf9\u7cbe\u786e\u5206\u5272\u5e26\u6765\u4e86\u5f88\u5927\u7684\u6311\u6218\u3002\u800c\u4e14\u4ee5\u76ee\u524d\u7684\u6a21\u578b\u8868\u73b0\u6765\u770b\uff0c\u5728\u51c6\u786e\u7387\u4e0a\u8fd8\u6709\u5f88\u5927\u7684\u63d0\u5347\u7a7a\u95f4\u3002\u800c\u5b9e\u4f8b\u5206\u5272\u7684\u601d\u8def\u4e3b\u8981\u662f\u76ee\u6807\u68c0\u6d4b+\u8bed\u4e49\u5206\u5272\uff0c\u5373\u7528\u76ee\u6807\u68c0\u6d4b\u65b9\u6cd5\u5c06\u56fe\u50cf\u4e2d\u7684\u4e0d\u540c\u5b9e\u4f8b\u6846\u51fa\uff0c\u518d\u7528\u8bed\u4e49\u5206\u5272\u65b9\u6cd5\u5728\u4e0d\u540c\u68c0\u6d4b\u7ed3\u679c\u5185\u8fdb\u884c\u9010\u50cf\u7d20\u6807\u8bb0\u3002","title":"1.2.2 \u4efb\u52a1\u7c7b\u578b"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#13","text":"\u56fe\u50cf\u5206\u5272\u4e2d\u901a\u5e38\u4f7f\u7528\u8bb8\u591a\u6807\u51c6\u6765\u8861\u91cf\u7b97\u6cd5\u7684\u7cbe\u5ea6\u3002\u8fd9\u4e9b\u6807\u51c6\u901a\u5e38\u662f\u50cf\u7d20\u7cbe\u5ea6\u53caIoU\u7684\u53d8\u79cd\uff0c\u4ee5\u4e0b\u6211\u4eec\u5c06\u4f1a\u4ecb\u7ecd\u5e38\u7528\u7684\u51e0\u79cd\u9010\u50cf\u7d20\u6807\u8bb0\u7684\u7cbe\u5ea6\u6807\u51c6\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u89e3\u91ca\uff0c\u5047\u8bbe\u5982\u4e0b\uff1a\u5171\u6709 k+1 k+1 \u4e2a\u7c7b\uff08\u4ece L_0 L_0 \u5230 L_k L_k \uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u80cc\u666f\u7c7b\uff09\uff0c p_{ij} p_{ij} \u8868\u793a\u672c\u5c5e\u4e8e\u7c7b i i \u4f46\u88ab\u9884\u6d4b\u4e3a\u7c7b j j \u7684\u50cf\u7d20\u3002\u5373 p_{ii} p_{ii} \u8868\u793a\u9884\u6d4b\u6b63\u786e\u7684\u50cf\u7d20\u3002","title":"1.3 \u8bc4\u4ef7\u6307\u6807"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#131","text":"Pixel Accuracy(PA\uff0c\u50cf\u7d20\u7cbe\u5ea6)\uff1a\u8fd9\u662f\u6700\u7b80\u5355\u7684\u5ea6\u91cf\uff0c\u4e3a\u9884\u6d4b\u6b63\u786e\u7684\u50cf\u7d20\u5360\u603b\u50cf\u7d20\u7684\u6bd4\u4f8b\u3002 \u5bf9\u4e8e\u6837\u672c\u4e0d\u5747\u8861\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\u533b\u5b66\u56fe\u50cf\u5206\u5272\u4e2d\uff0c\u80cc\u666f\u4e0e\u6807\u8bb0\u6837\u672c\u4e4b\u95f4\u7684\u6bd4\u4f8b\u5f80\u5f80\u4e25\u91cd\u5931\u8861\u3002\u56e0\u6b64\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u8fdb\u884c\u5ea6\u91cf\u3002","title":"1.3.1 \u50cf\u7d20\u7cbe\u5ea6"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#132","text":"Mean Pixel Accuracy(MPA\uff0c\u5e73\u5747\u50cf\u7d20\u7cbe\u5ea6)\uff1a\u662fPA\u7684\u4e00\u79cd\u7b80\u5355\u63d0\u5347\uff0c\u8ba1\u7b97\u6bcf\u4e2a**\u7c7b\u5185**\u88ab\u6b63\u786e\u5206\u7c7b\u50cf\u7d20\u6570\u7684\u6bd4\u4f8b\uff0c\u4e4b\u540e\u6c42\u6240\u6709\u7c7b\u7684\u5e73\u5747\u3002","title":"1.3.2 \u5e73\u5747\u50cf\u7d20\u7cbe\u5ea6"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/01-overview/#133","text":"Mean Intersection over Union(MIoU\uff0c\u5e73\u5747\u4ea4\u5e76\u6bd4)\uff1a\u4e3a\u8bed\u4e49\u5206\u5272\u7684\u6807\u51c6\u5ea6\u91cf\uff0c\u5176\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u548c\u5e76\u96c6\u4e4b\u6bd4\uff0c\u5728\u8bed\u4e49\u5206\u5272\u7684\u95ee\u9898\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u96c6\u5408\u4e3a\u771f\u5b9e\u503c\uff08ground truth\uff09\u548c\u9884\u6d4b\u503c\uff08predicted segmentation\uff09\u3002\u4ea4\u96c6\u4e3a\u9884\u6d4b\u6b63\u786e\u7684\u50cf\u7d20\u6570\uff08intersection\uff09\uff0c\u5e76\u96c6\u4e3a\u9884\u6d4b\u6216\u771f\u5b9e\u503c\u4e3a i i \u7c7b\u7684\u548c\u51cf\u53bb\u9884\u6d4b\u6b63\u786e\u7684\u50cf\u7d20\uff0c\u5728\u6bcf\u4e2a\u7c7b\u4e0a\u8ba1\u7b97IoU\uff0c\u4e4b\u540e\u6c42\u5e73\u5747\u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u5982\u4f55\u7406\u89e3\u8fd9\u91cc\u7684\u516c\u5f0f\u5462\uff1f\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7ea2\u8272\u5706\u4ee3\u8868\u771f\u5b9e\u503c\uff0c\u9ec4\u8272\u5706\u4ee3\u8868\u9884\u6d4b\u503c\u3002\u6a59\u8272\u90e8\u5206\u7ea2\u8272\u5706\u4e0e\u9ec4\u8272\u5706\u7684\u4ea4\u96c6\uff0c\u5373\u9884\u6d4b\u6b63\u786e\u7684\u90e8\u5206\uff0c\u7ea2\u8272\u90e8\u5206\u8868\u793a\u5047\u8d1f\uff08\u771f\u5b9e\u503c\u4e3a\u8be5\u7c7b\u9884\u6d4b\u9519\u8bef\uff09\u7684\u90e8\u5206\uff0c\u9ec4\u8272\u8868\u793a\u5047\u6b63\uff08\u9884\u6d4b\u503c\u4e3ai\u7c7b\uff0c\u771f\u5b9e\u503c\u4e3a\u5176\u4ed6\uff09\u7684\u90e8\u5206\u3002 MIoU\u8ba1\u7b97\u7684\u662f\u8ba1\u7b97A\u4e0eB\u7684\u4ea4\u96c6\uff08\u6a59\u8272\u90e8\u5206\uff09\u4e0eA\u4e0eB\u7684\u5e76\u96c6\uff08\u7ea2\u8272+\u6a59\u8272+\u9ec4\u8272\uff09\u4e4b\u95f4\u7684\u6bd4\u4f8b\uff0c\u5728\u7406\u60f3\u72b6\u6001\u4e0bA\u4e0eB\u91cd\u5408\uff0c\u4e24\u8005\u6bd4\u4f8b\u4e3a1 \u3002 \u5728\u4ee5\u4e0a\u6240\u6709\u7684\u5ea6\u91cf\u6807\u51c6\u4e2d\uff0cMIoU\u7531\u4e8e\u5176\u7b80\u6d01\u3001\u4ee3\u8868\u6027\u5f3a\u800c\u6210\u4e3a\u6700\u5e38\u7528\u7684\u5ea6\u91cf\u6807\u51c6\uff0c\u5927\u591a\u6570\u7814\u7a76\u4eba\u5458\u90fd\u4f7f\u7528\u8be5\u6807\u51c6\u62a5\u544a\u5176\u7ed3\u679c\u3002PA\u5bf9\u4e8e\u6837\u672c\u4e0d\u5747\u8861\u7684\u60c5\u51b5\u4e0d\u9002\u7528\u3002 \u603b\u7ed3 \u56fe\u50cf\u5206\u5272\u7684\u5b9a\u4e49 \u56fe\u50cf\u5206\u5272\uff08Object Segmentation\uff09\u6307\u7684\u662f\u5c06\u6570\u5b57\u56fe\u50cf\u7ec6\u5206\u4e3a\u591a\u4e2a\u56fe\u50cf\u5b50\u533a\u57df\uff08\u50cf\u7d20\u7684\u96c6\u5408\uff09\u7684\u8fc7\u7a0b\uff0c\u5e76\u4e14\u540c\u4e00\u4e2a\u5b50\u533a\u57df\u5185\u7684\u7279\u5f81\u5177\u6709\u4e00\u5b9a\u76f8\u4f3c\u6027\uff0c\u4e0d\u540c\u5b50\u533a\u57df\u7684\u7279\u5f81\u5448\u73b0\u8f83\u4e3a\u660e\u663e\u7684\u5dee\u5f02\u3002 \u56fe\u50cf\u5206\u5272\u7684\u4efb\u52a1\u7c7b\u578b \u56fe\u50cf\u5206\u5272\u7684\u4efb\u52a1\u5c31\u662f\u7ed9\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u5206\u7c7b \u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272 \u56fe\u50cf\u5206\u5272\u7684\u8bc4\u4f30\u6307\u6807 \u50cf\u7d20\u7cbe\u5ea6\uff08PA\uff09\uff0c\u5e73\u5747\u50cf\u7d20\u7cbe\u5ea6\uff08mPA\uff09\u548c \u5e73\u5747\u4ea4\u5e76\u6bd4\uff08mIOU\uff09 \u6700\u5e38\u7528\u7684\u662fMIOU","title":"1.3.3 \u5e73\u5747\u4ea4\u5e76\u6bd4"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/","text":"3.2 \u8bed\u4e49\u5206\u5272\uff1aFCN\u548cUNet \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3FCN\u7684\u7ed3\u6784 \u4e86\u89e3FCN\u7684\u4e0a\u91c7\u6837\u65b9\u6cd5\u53ca\u8df3\u5c42\u8fde\u63a5 \u638c\u63e1Unet\u7f51\u7edc\u7ed3\u6784 1.FCN\u7f51\u7edc \u00b6 FCN\uff08Fully Convolutional Networks\uff09 \u7528\u4e8e\u56fe\u50cf\u8bed\u4e49\u5206\u5272\uff0c\u81ea\u4ece\u8be5\u7f51\u7edc\u63d0\u51fa\u540e\uff0c\u5c31\u6210\u4e3a\u8bed\u4e49\u5206\u5272\u7684\u57fa\u672c\u6846\u67b6\uff0c\u540e\u7eed\u7b97\u6cd5\u57fa\u672c\u90fd\u662f\u5728\u8be5\u7f51\u7edc\u6846\u67b6\u4e2d\u6539\u8fdb\u800c\u6765\u3002 \u5bf9\u4e8e\u4e00\u822c\u7684\u5206\u7c7bCNN\u7f51\u7edc\uff0c\u5982VGG\u548cResnet\uff0c\u90fd\u4f1a\u5728\u7f51\u7edc\u7684\u6700\u540e\u52a0\u5165\u4e00\u4e9b\u5168\u8fde\u63a5\u5c42\uff0c\u7ecf\u8fc7softmax\u540e\u5c31\u53ef\u4ee5\u83b7\u5f97\u7c7b\u522b\u6982\u7387\u4fe1\u606f\u3002 \u4f46\u662f\u8fd9\u4e2a\u6982\u7387\u53ea\u80fd\u6807\u8bc6\u6574\u4e2a\u56fe\u7247\u7684\u7c7b\u522b\uff0c\u4e0d\u80fd\u6807\u8bc6\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u7c7b\u522b\uff0c\u6240\u4ee5\u8fd9\u79cd\u5168\u8fde\u63a5\u65b9\u6cd5\u4e0d\u9002\u7528\u4e8e\u56fe\u50cf\u5206\u5272\u3002 \u800cFCN\u63d0\u51fa\u53ef\u4ee5\u628a\u540e\u9762\u51e0\u4e2a\u5168\u8fde\u63a5\u90fd\u6362\u6210\u5377\u79ef\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u5f97\u4e00\u5f202\u7ef4\u7684feature map\uff0c\u540e\u63a5softmax\u83b7\u5f97\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u5206\u7c7b\u4fe1\u606f\uff0c\u4ece\u800c\u89e3\u51b3\u4e86\u5206\u5272\u95ee\u9898\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7b80\u800c\u8a00\u4e4b\uff0cFCN\u548cCNN\u7684\u533a\u522b\u5c31\u662f\uff1aCNN\u5377\u79ef\u5c42\u4e4b\u540e\u8fde\u63a5\u7684\u662f\u5168\u8fde\u63a5\u5c42\uff1bFCN\u5377\u79ef\u5c42\u4e4b\u540e\u4ecd\u8fde\u63a5\u5377\u79ef\u5c42\uff0c\u8f93\u51fa\u7684\u662f\u4e0e\u8f93\u5165\u5927\u5c0f\u76f8\u540c\u7684\u7279\u5f81\u56fe\u3002 1.1 \u7f51\u7edc\u7ed3\u6784 \u00b6 FCN\u662f\u4e00\u4e2a\u7aef\u5230\u7aef\uff0c\u50cf\u7d20\u5bf9\u50cf\u7d20\u7684\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u7528\u4e8e\u8fdb\u884c\u56fe\u50cf\u7684\u8bed\u4e49\u5206\u5272\u3002\u6574\u4f53\u7684\u7f51\u7edc\u7ed3\u6784\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u5168\u5377\u79ef\u90e8\u5206\u548c\u4e0a\u91c7\u6837\u90e8\u5206\u3002 1.1.1 \u5168\u5377\u79ef\u90e8\u5206 \u00b6 \u5168\u5377\u79ef\u90e8\u5206\u4f7f\u7528\u7ecf\u5178\u7684CNN\u7f51\u7edc\uff08\u4ee5AlexNet\u7f51\u7edc\u4e3a\u4f8b\uff09\uff0c\u5e76\u628a\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\u6362\u6210 \u5377\u79ef\uff0c\u7528\u4e8e\u63d0\u53d6\u7279\u5f81\u3002 \u5728\u4f20\u7edf\u7684Alex\u7ed3\u6784\u4e2d\uff0c\u524d5\u5c42\u662f\u5377\u79ef\u5c42\uff0c\u7b2c6\u5c42\u548c\u7b2c7\u5c42\u5206\u522b\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a4096\u7684\u4e00\u7ef4\u5411\u91cf\uff0c\u7b2c8\u5c42\u662f\u957f\u5ea6\u4e3a1000\u7684\u4e00\u7ef4\u5411\u91cf\uff0c\u5206\u522b\u5bf9\u5e941000\u4e2a\u4e0d\u540c\u7c7b\u522b\u7684\u6982\u7387\u3002 FCN\u5c06\u6700\u540e\u76843\u5c42\u8f6c\u6362\u4e3a\u5377\u79ef\u5c42\uff0c\u5377\u79ef\u6838\u7684\u5927\u5c0f (\u901a\u9053\u6570\uff0c\u5bbd\uff0c\u9ad8) \u5206\u522b\u4e3a (4096,1,1)\u3001(4096,1,1)\u3001(1000,1,1)\uff0c\u867d\u7136\u53c2\u6570\u6570\u76ee\u76f8\u540c\uff0c\u4f46\u662f\u8ba1\u7b97\u65b9\u6cd5\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u8fd9\u65f6\u8fd8\u53ef\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u53c2\u6570\u3002 CNN\u4e2d\u8f93\u5165\u7684\u56fe\u50cf\u56fa\u5b9a\u6210227x227\u5927\u5c0f\uff0c\u7b2c\u4e00\u5c42pooling\u540e\u4e3a55x55\uff0c\u7b2c\u4e8c\u5c42pooling\u540e\u56fe\u50cf\u5927\u5c0f\u4e3a27x27\uff0c\u7b2c\u4e94\u5c42pooling\u540e\u7684\u56fe\u50cf\u5927\u5c0f\u4e3a13x13, \u800cFCN\u8f93\u5165\u7684\u56fe\u50cf\u662fH*W\u5927\u5c0f\uff0c\u7b2c\u4e00\u5c42pooling\u540e\u53d8\u4e3a\u539f\u56fe\u5927\u5c0f\u7684\u00bd\uff0c\u7b2c\u4e8c\u5c42\u53d8\u4e3a\u539f\u56fe\u5927\u5c0f\u7684\u00bc\uff0c\u7b2c\u4e94\u5c42\u53d8\u4e3a\u539f\u56fe\u5927\u5c0f\u7684\u215b\uff0c\u7b2c\u516b\u5c42\u53d8\u4e3a\u539f\u56fe\u5927\u5c0f\u76841/16\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7ecf\u8fc7\u591a\u6b21\u5377\u79ef\u548cpooling\u4ee5\u540e\uff0c\u5f97\u5230\u7684\u56fe\u50cf\u8d8a\u6765\u8d8a\u5c0f\uff0c\u5206\u8fa8\u7387\u8d8a\u6765\u8d8a\u4f4e\u3002\u5bf9\u6700\u7ec8\u7684\u7279\u5f81\u56fe\u8fdb\u884cupsampling\uff0c\u628a\u56fe\u50cf\u8fdb\u884c\u653e\u5927\u5230\u539f\u56fe\u50cf\u7684\u5927\u5c0f\uff0c\u5c31\u5f97\u5230\u539f\u56fe\u50cf\u7684\u5206\u5272\u7ed3\u679c\u3002 1.1.2 \u4e0a\u91c7\u6837\u90e8\u5206 \u00b6 \u4e0a\u91c7\u6837\u90e8\u5206\u5c06\u6700\u7ec8\u5f97\u5230\u7684\u7279\u5f81\u56fe\u4e0a\u91c7\u6837\u5f97\u5230\u539f\u56fe\u50cf\u5927\u5c0f\u7684\u8bed\u4e49\u5206\u5272\u7ed3\u679c\u3002 \u5728\u8fd9\u91cc\u91c7\u7528\u7684\u4e0a\u91c7\u6837\u65b9\u6cd5\u662f\u53cd\u5377\u79ef\uff08Deconvolution\uff09\uff0c\u4e5f\u53eb\u505a\u8f6c\u7f6e\u5377\u79ef\uff08Transposed Convolution\uff09\uff1a \u53cd\u5377\u79ef\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6b63\u5411\u5377\u79ef \u901a\u4fd7\u7684\u8bb2\uff0c\u5c31\u662f\u8f93\u5165\u88650+\u5377\u79ef\u3002\u5148\u6309\u7167\u4e00\u5b9a\u7684\u6bd4\u4f8b\u901a\u8fc7\u88650\u6765\u6269\u5927\u8f93\u5165\u56fe\u50cf\u7684\u5c3a\u5bf8\uff0c\u518d\u8fdb\u884c\u6b63\u5411\u5377\u79ef\u5373\u53ef\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\u4e3a3x3\uff0c\u5377\u79ef\u6838kernel\u4e3a3x3\uff0c\u6b65\u957fstrides=2\uff0c\u586b\u5145padding=1 \u5047\u8bbe\u53cd\u5377\u79ef\u7684\u8f93\u5165\u662fn x n \uff0c\u53cd\u5377\u79ef\u7684\u8f93\u51fa\u4e3amxm \uff0cpadding=p\uff0cstride=s\uff0ckernel_size = k\u3002 \u90a3\u4e48\u6b64\u65f6\u53cd\u5377\u79ef\u7684\u8f93\u51fa\u5c31\u4e3a\uff1a m = s(n-1) + k -2p m = s(n-1) + k -2p \u4e0e\u6b63\u5411\u5377\u79ef\u4e0d\u540c\u7684\u662f\uff0c\u8981\u5148\u6839\u636e\u6b65\u957fstrides\u5bf9\u8f93\u5165\u7684\u5185\u90e8\u8fdb\u884c\u586b\u5145\uff0c\u8fd9\u91ccstrides\u53ef\u4ee5\u7406\u89e3\u6210\u8f93\u5165\u653e\u5927\u7684\u500d\u6570\uff0c\u800c\u4e0d\u80fd\u7406\u89e3\u6210\u5377\u79ef\u79fb\u52a8\u7684\u6b65\u957f\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u53cd\u5377\u79ef\u5b9e\u73b0\u4e0a\u91c7\u6837\u3002 1.2 \u8df3\u5c42\u8fde\u63a5 \u00b6 \u5982\u679c\u53ea\u5229\u7528\u53cd\u5377\u79ef\u5bf9\u6700\u540e\u4e00\u5c42\u7684\u7279\u5f81\u56fe\u8fdb\u884c\u4e0a\u91c7\u6837\u7684\u5230\u539f\u56fe\u5927\u5c0f\u7684\u5206\u5272\uff0c\u7531\u4e8e\u6700\u540e\u4e00\u5c42\u7684\u7279\u5f81\u56fe\u592a\u5c0f\uff0c\u4f1a\u635f\u5931\u5f88\u591a\u7ec6\u8282\u3002\u56e0\u800c\u63d0\u51fa\u589e\u52a0Skips\u7ed3\u6784\u5c06\u6700\u540e\u4e00\u5c42\u7684\u9884\u6d4b\uff08\u6709\u66f4\u5bcc\u7684\u5168\u5c40\u4fe1\u606f\uff09\u548c\u66f4\u6d45\u5c42\uff08\u6709\u66f4\u591a\u7684\u5c40\u90e8\u7ec6\u8282\uff09\u7684\u9884\u6d4b\u7ed3\u5408\u8d77\u6765\u3002 \u90a3\u4e48\uff1a \u5bf9\u4e8eFCN-32s\uff0c\u76f4\u63a5\u5bf9pool5 feature\u8fdb\u884c32\u500d\u4e0a\u91c7\u6837\u83b7\u5f9732x upsampled feature\uff0c\u518d\u5bf932x upsampled feature\u6bcf\u4e2a\u70b9\u505asoftmax prediction\u83b7\u5f9732x upsampled feature prediction\uff08\u5373\u5206\u5272\u56fe\uff09\u3002 \u5bf9\u4e8eFCN-16s\uff0c\u9996\u5148\u5bf9pool5 feature\u8fdb\u884c2\u500d\u4e0a\u91c7\u6837\u83b7\u5f972x upsampled feature\uff0c\u518d\u628apool4 feature\u548c2x upsampled feature\u9010\u70b9\u76f8\u52a0\uff0c\u7136\u540e\u5bf9\u76f8\u52a0\u7684feature\u8fdb\u884c16\u500d\u4e0a\u91c7\u6837\uff0c\u5e76softmax prediction\uff0c\u83b7\u5f9716x upsampled feature prediction\u3002 \u5bf9\u4e8eFCN-8s\uff0c\u9996\u5148\u8fdb\u884cpool4+2x upsampled feature\u9010\u70b9\u76f8\u52a0\uff0c\u7136\u540e\u53c8\u8fdb\u884cpool3+2x upsampled\u9010\u70b9\u76f8\u52a0\uff0c\u5373\u8fdb\u884c\u66f4\u591a\u6b21\u7279\u5f81\u878d\u5408\u3002\u5177\u4f53\u8fc7\u7a0b\u4e0e16s\u7c7b\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002 \u4e0b\u9762\u6709\u4e00\u5f2032\u500d\uff0c16\u500d\u548c8\u500d\u4e0a\u91c7\u6837\u5f97\u5230\u7684\u7ed3\u679c\u56fe\u5bf9\u6bd4\uff1a \u53ef\u4ee5\u770b\u5230\u968f\u7740\u4e0a\u91c7\u6837\u505a\u5f97\u8d8a\u591a\uff0c\u5206\u5272\u7ed3\u679c\u8d8a\u6765\u8d8a\u7cbe\u7ec6\u3002 1.3 \u603b\u7ed3 \u00b6 \u4f18\u70b9 \u7aef\u5230\u7aef\u7684\uff0c\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u5927\u5c0f\u7684\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\uff0c\u6bd4\u8f83\u9ad8\u6548\u3002 \u5c40\u9650\u6027 \u5f97\u5230\u7684\u7ed3\u679c\u8fd8\u662f\u4e0d\u591f\u7cbe\u7ec6\u3002\u8fdb\u884c8\u500d\u4e0a\u91c7\u6837\u867d\u7136\u6bd432\u500d\u7684\u6548\u679c\u597d\u4e86\u5f88\u591a\uff0c\u4f46\u662f\u4e0a\u91c7\u6837\u7684\u7ed3\u679c\u8fd8\u662f\u6bd4\u8f83\u6a21\u7cca\u7684\uff0c\u5bf9\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u4e0d\u654f\u611f\u3002\u800c\u4e14\u5728\u5bf9\u5404\u4e2a\u50cf\u7d20\u8fdb\u884c\u5206\u7c7b\u65f6\uff0c\u6ca1\u6709\u8003\u8651\u50cf\u7d20\u4e0e\u50cf\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 2.Unet\u7f51\u7edc \u00b6 Unet\u7f51\u7edc\u662f\u5efa\u7acb\u5728FCN\u7f51\u7edc\u57fa\u7840\u4e0a\u7684\uff0c\u5b83\u7684\u7f51\u7edc\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u603b\u4f53\u6765\u8bf4\u4e0eFCN\u601d\u8def\u975e\u5e38\u7c7b\u4f3c\u3002 \u6574\u4e2a\u7f51\u7edc\u7531\u7f16\u7801\u90e8\u5206\uff08\u5de6\uff09 \u548c \u89e3\u7801\u90e8\u5206\uff08\u53f3\uff09\u7ec4\u6210\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5927\u5927\u7684U\u5b57\u6bcd\uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b\uff1a 1\u3001\u7f16\u7801\u90e8\u5206\u662f\u5178\u578b\u7684\u5377\u79ef\u7f51\u7edc\u67b6\u6784\uff1a \u67b6\u6784\u4e2d\u542b\u6709\u7740\u4e00\u79cd\u91cd\u590d\u7ed3\u6784\uff0c\u6bcf\u6b21\u91cd\u590d\u4e2d\u90fd\u67092\u4e2a 3 x 3\u5377\u79ef\u5c42\u3001\u975e\u7ebf\u6027ReLU\u5c42\u548c\u4e00\u4e2a 2 x 2 max pooling\u5c42\uff08stride\u4e3a2\uff09\u3002\uff08\u56fe\u4e2d\u7684\u84dd\u7bad\u5934\u3001\u7ea2\u7bad\u5934\uff0c\u6ca1\u753bReLu\uff09 \u6bcf\u4e00\u6b21\u4e0b\u91c7\u6837\u540e\u6211\u4eec\u90fd\u628a\u7279\u5f81\u901a\u9053\u7684\u6570\u91cf\u52a0\u500d 2\u3001\u89e3\u7801\u90e8\u5206\u4e5f\u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u6a21\u5f0f\uff1a \u6bcf\u4e00\u6b65\u90fd\u9996\u5148\u4f7f\u7528\u53cd\u5377\u79ef(up-convolution)\uff0c\u6bcf\u6b21\u4f7f\u7528\u53cd\u5377\u79ef\u90fd\u5c06\u7279\u5f81\u901a\u9053\u6570\u91cf\u51cf\u534a\uff0c\u7279\u5f81\u56fe\u5927\u5c0f\u52a0\u500d\u3002\uff08\u56fe\u4e2d\u7eff\u7bad\u5934\uff09 \u53cd\u5377\u79ef\u8fc7\u540e\uff0c\u5c06\u53cd\u5377\u79ef\u7684\u7ed3\u679c\u4e0e\u7f16\u7801\u90e8\u5206\u4e2d\u5bf9\u5e94\u6b65\u9aa4\u7684\u7279\u5f81\u56fe\u62fc\u63a5\u8d77\u6765\u3002\uff08\u767d/\u84dd\u5757\uff09 \u7f16\u7801\u90e8\u5206\u4e2d\u7684\u7279\u5f81\u56fe\u5c3a\u5bf8\u7a0d\u5927\uff0c\u5c06\u5176\u4fee\u526a\u8fc7\u540e\u8fdb\u884c\u62fc\u63a5\u3002\uff08\u5de6\u8fb9\u6df1\u84dd\u865a\u7ebf\uff09 \u5bf9\u62fc\u63a5\u540e\u7684map\u518d\u8fdb\u884c2\u6b213 x 3\u7684\u5377\u79ef\u3002\uff08\u53f3\u4fa7\u84dd\u7bad\u5934\uff09 \u6700\u540e\u4e00\u5c42\u7684\u5377\u79ef\u6838\u5927\u5c0f\u4e3a1 x 1\uff0c\u5c0664\u901a\u9053\u7684\u7279\u5f81\u56fe\u8f6c\u5316\u4e3a\u7279\u5b9a\u7c7b\u522b\u6570\u91cf\uff08\u5206\u7c7b\u6570\u91cf\uff09\u7684\u7ed3\u679c\u3002\uff08\u56fe\u4e2d\u9752\u8272\u7bad\u5934\uff09 \u603b\u7ed3 \u4e86\u89e3FCN\u7684\u7ed3\u6784 FCN\u7f51\u7edc\u4e0eCNN\u7684\u4e0d\u540c\u662f\u5c06\u5168\u8fde\u63a5\u5c42\u66ff\u6362\u4e3a\u5377\u79ef\u5c42\u63d0\u53d6\u56fe\u50cf\u7684\u7279\u5f81\uff0c\u83b7\u53d6\u4e8c\u7ef4\u7684\u7279\u5f81\u56fe\uff0c\u5f97\u5230\u56fe\u50cf\u7684\u5206\u5272\u7ed3\u679c\uff0c\u6574\u4e2a\u7f51\u7edc\u53ef\u5206\u4e3a\u5168\u5377\u79ef\u90e8\u5206\u548c\u4e0a\u91c7\u6837\u4e24\u90e8\u5206 \u4e86\u89e3FCN\u7684\u4e0a\u91c7\u6837\u65b9\u6cd5\u53ca\u8df3\u5c42\u8fde\u63a5 \u4e0a\u91c7\u6837\uff1a\u4f7f\u7528\u53cd\u5377\u79ef\u5b8c\u6210 \u8df3\u5c42\u8fde\u63a5\uff1a\u5c06\u7f51\u7edc\u63d0\u53d6\u7684\u6df1\u5c42\u7279\u5f81\u548c\u6d45\u5c42\u7279\u5f81\u7ed3\u5408\u8d77\u6765 \u638c\u63e1Unet\u7f51\u7edc\u7ed3\u6784 \u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5927\u5927\u7684U\u5b57\u6bcd\uff1a\u9996\u5148\u8fdb\u884c\u5377\u79ef\u548c\u6c60\u5316\u6765\u5b8c\u6210\u4e0b\u91c7\u6837\uff1b\u7136\u540e\u901a\u8fc7\u53cd\u5377\u79ef\u8fdb\u884c\u4e0a\u91c7\u6837\uff0ccrop\u4e4b\u524d\u7684\u4f4e\u5c42feature map\uff0c\u8fdb\u884c\u878d\u5408\uff1b\u7136\u540e\u518d\u6b21\u4e0a\u91c7\u6837\u3002\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u83b7\u5f97\u8f93\u51fa\u7684feature map\uff0c\u6700\u540e\u7ecf\u8fc7softmax\u83b7\u5f97\u8f93\u51fa\u5206\u5272\u7ed3\u679c","title":"3.2 \u8bed\u4e49\u5206\u5272\uff1aFCN\u548cUNet"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#32-fcnunet","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3FCN\u7684\u7ed3\u6784 \u4e86\u89e3FCN\u7684\u4e0a\u91c7\u6837\u65b9\u6cd5\u53ca\u8df3\u5c42\u8fde\u63a5 \u638c\u63e1Unet\u7f51\u7edc\u7ed3\u6784","title":"3.2 \u8bed\u4e49\u5206\u5272\uff1aFCN\u548cUNet"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#1fcn","text":"FCN\uff08Fully Convolutional Networks\uff09 \u7528\u4e8e\u56fe\u50cf\u8bed\u4e49\u5206\u5272\uff0c\u81ea\u4ece\u8be5\u7f51\u7edc\u63d0\u51fa\u540e\uff0c\u5c31\u6210\u4e3a\u8bed\u4e49\u5206\u5272\u7684\u57fa\u672c\u6846\u67b6\uff0c\u540e\u7eed\u7b97\u6cd5\u57fa\u672c\u90fd\u662f\u5728\u8be5\u7f51\u7edc\u6846\u67b6\u4e2d\u6539\u8fdb\u800c\u6765\u3002 \u5bf9\u4e8e\u4e00\u822c\u7684\u5206\u7c7bCNN\u7f51\u7edc\uff0c\u5982VGG\u548cResnet\uff0c\u90fd\u4f1a\u5728\u7f51\u7edc\u7684\u6700\u540e\u52a0\u5165\u4e00\u4e9b\u5168\u8fde\u63a5\u5c42\uff0c\u7ecf\u8fc7softmax\u540e\u5c31\u53ef\u4ee5\u83b7\u5f97\u7c7b\u522b\u6982\u7387\u4fe1\u606f\u3002 \u4f46\u662f\u8fd9\u4e2a\u6982\u7387\u53ea\u80fd\u6807\u8bc6\u6574\u4e2a\u56fe\u7247\u7684\u7c7b\u522b\uff0c\u4e0d\u80fd\u6807\u8bc6\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u7c7b\u522b\uff0c\u6240\u4ee5\u8fd9\u79cd\u5168\u8fde\u63a5\u65b9\u6cd5\u4e0d\u9002\u7528\u4e8e\u56fe\u50cf\u5206\u5272\u3002 \u800cFCN\u63d0\u51fa\u53ef\u4ee5\u628a\u540e\u9762\u51e0\u4e2a\u5168\u8fde\u63a5\u90fd\u6362\u6210\u5377\u79ef\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u5f97\u4e00\u5f202\u7ef4\u7684feature map\uff0c\u540e\u63a5softmax\u83b7\u5f97\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u5206\u7c7b\u4fe1\u606f\uff0c\u4ece\u800c\u89e3\u51b3\u4e86\u5206\u5272\u95ee\u9898\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7b80\u800c\u8a00\u4e4b\uff0cFCN\u548cCNN\u7684\u533a\u522b\u5c31\u662f\uff1aCNN\u5377\u79ef\u5c42\u4e4b\u540e\u8fde\u63a5\u7684\u662f\u5168\u8fde\u63a5\u5c42\uff1bFCN\u5377\u79ef\u5c42\u4e4b\u540e\u4ecd\u8fde\u63a5\u5377\u79ef\u5c42\uff0c\u8f93\u51fa\u7684\u662f\u4e0e\u8f93\u5165\u5927\u5c0f\u76f8\u540c\u7684\u7279\u5f81\u56fe\u3002","title":"1.FCN\u7f51\u7edc"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#11","text":"FCN\u662f\u4e00\u4e2a\u7aef\u5230\u7aef\uff0c\u50cf\u7d20\u5bf9\u50cf\u7d20\u7684\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u7528\u4e8e\u8fdb\u884c\u56fe\u50cf\u7684\u8bed\u4e49\u5206\u5272\u3002\u6574\u4f53\u7684\u7f51\u7edc\u7ed3\u6784\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u5168\u5377\u79ef\u90e8\u5206\u548c\u4e0a\u91c7\u6837\u90e8\u5206\u3002","title":"1.1 \u7f51\u7edc\u7ed3\u6784"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#111","text":"\u5168\u5377\u79ef\u90e8\u5206\u4f7f\u7528\u7ecf\u5178\u7684CNN\u7f51\u7edc\uff08\u4ee5AlexNet\u7f51\u7edc\u4e3a\u4f8b\uff09\uff0c\u5e76\u628a\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\u6362\u6210 \u5377\u79ef\uff0c\u7528\u4e8e\u63d0\u53d6\u7279\u5f81\u3002 \u5728\u4f20\u7edf\u7684Alex\u7ed3\u6784\u4e2d\uff0c\u524d5\u5c42\u662f\u5377\u79ef\u5c42\uff0c\u7b2c6\u5c42\u548c\u7b2c7\u5c42\u5206\u522b\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a4096\u7684\u4e00\u7ef4\u5411\u91cf\uff0c\u7b2c8\u5c42\u662f\u957f\u5ea6\u4e3a1000\u7684\u4e00\u7ef4\u5411\u91cf\uff0c\u5206\u522b\u5bf9\u5e941000\u4e2a\u4e0d\u540c\u7c7b\u522b\u7684\u6982\u7387\u3002 FCN\u5c06\u6700\u540e\u76843\u5c42\u8f6c\u6362\u4e3a\u5377\u79ef\u5c42\uff0c\u5377\u79ef\u6838\u7684\u5927\u5c0f (\u901a\u9053\u6570\uff0c\u5bbd\uff0c\u9ad8) \u5206\u522b\u4e3a (4096,1,1)\u3001(4096,1,1)\u3001(1000,1,1)\uff0c\u867d\u7136\u53c2\u6570\u6570\u76ee\u76f8\u540c\uff0c\u4f46\u662f\u8ba1\u7b97\u65b9\u6cd5\u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u8fd9\u65f6\u8fd8\u53ef\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u53c2\u6570\u3002 CNN\u4e2d\u8f93\u5165\u7684\u56fe\u50cf\u56fa\u5b9a\u6210227x227\u5927\u5c0f\uff0c\u7b2c\u4e00\u5c42pooling\u540e\u4e3a55x55\uff0c\u7b2c\u4e8c\u5c42pooling\u540e\u56fe\u50cf\u5927\u5c0f\u4e3a27x27\uff0c\u7b2c\u4e94\u5c42pooling\u540e\u7684\u56fe\u50cf\u5927\u5c0f\u4e3a13x13, \u800cFCN\u8f93\u5165\u7684\u56fe\u50cf\u662fH*W\u5927\u5c0f\uff0c\u7b2c\u4e00\u5c42pooling\u540e\u53d8\u4e3a\u539f\u56fe\u5927\u5c0f\u7684\u00bd\uff0c\u7b2c\u4e8c\u5c42\u53d8\u4e3a\u539f\u56fe\u5927\u5c0f\u7684\u00bc\uff0c\u7b2c\u4e94\u5c42\u53d8\u4e3a\u539f\u56fe\u5927\u5c0f\u7684\u215b\uff0c\u7b2c\u516b\u5c42\u53d8\u4e3a\u539f\u56fe\u5927\u5c0f\u76841/16\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7ecf\u8fc7\u591a\u6b21\u5377\u79ef\u548cpooling\u4ee5\u540e\uff0c\u5f97\u5230\u7684\u56fe\u50cf\u8d8a\u6765\u8d8a\u5c0f\uff0c\u5206\u8fa8\u7387\u8d8a\u6765\u8d8a\u4f4e\u3002\u5bf9\u6700\u7ec8\u7684\u7279\u5f81\u56fe\u8fdb\u884cupsampling\uff0c\u628a\u56fe\u50cf\u8fdb\u884c\u653e\u5927\u5230\u539f\u56fe\u50cf\u7684\u5927\u5c0f\uff0c\u5c31\u5f97\u5230\u539f\u56fe\u50cf\u7684\u5206\u5272\u7ed3\u679c\u3002","title":"1.1.1 \u5168\u5377\u79ef\u90e8\u5206"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#112","text":"\u4e0a\u91c7\u6837\u90e8\u5206\u5c06\u6700\u7ec8\u5f97\u5230\u7684\u7279\u5f81\u56fe\u4e0a\u91c7\u6837\u5f97\u5230\u539f\u56fe\u50cf\u5927\u5c0f\u7684\u8bed\u4e49\u5206\u5272\u7ed3\u679c\u3002 \u5728\u8fd9\u91cc\u91c7\u7528\u7684\u4e0a\u91c7\u6837\u65b9\u6cd5\u662f\u53cd\u5377\u79ef\uff08Deconvolution\uff09\uff0c\u4e5f\u53eb\u505a\u8f6c\u7f6e\u5377\u79ef\uff08Transposed Convolution\uff09\uff1a \u53cd\u5377\u79ef\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6b63\u5411\u5377\u79ef \u901a\u4fd7\u7684\u8bb2\uff0c\u5c31\u662f\u8f93\u5165\u88650+\u5377\u79ef\u3002\u5148\u6309\u7167\u4e00\u5b9a\u7684\u6bd4\u4f8b\u901a\u8fc7\u88650\u6765\u6269\u5927\u8f93\u5165\u56fe\u50cf\u7684\u5c3a\u5bf8\uff0c\u518d\u8fdb\u884c\u6b63\u5411\u5377\u79ef\u5373\u53ef\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\u4e3a3x3\uff0c\u5377\u79ef\u6838kernel\u4e3a3x3\uff0c\u6b65\u957fstrides=2\uff0c\u586b\u5145padding=1 \u5047\u8bbe\u53cd\u5377\u79ef\u7684\u8f93\u5165\u662fn x n \uff0c\u53cd\u5377\u79ef\u7684\u8f93\u51fa\u4e3amxm \uff0cpadding=p\uff0cstride=s\uff0ckernel_size = k\u3002 \u90a3\u4e48\u6b64\u65f6\u53cd\u5377\u79ef\u7684\u8f93\u51fa\u5c31\u4e3a\uff1a m = s(n-1) + k -2p m = s(n-1) + k -2p \u4e0e\u6b63\u5411\u5377\u79ef\u4e0d\u540c\u7684\u662f\uff0c\u8981\u5148\u6839\u636e\u6b65\u957fstrides\u5bf9\u8f93\u5165\u7684\u5185\u90e8\u8fdb\u884c\u586b\u5145\uff0c\u8fd9\u91ccstrides\u53ef\u4ee5\u7406\u89e3\u6210\u8f93\u5165\u653e\u5927\u7684\u500d\u6570\uff0c\u800c\u4e0d\u80fd\u7406\u89e3\u6210\u5377\u79ef\u79fb\u52a8\u7684\u6b65\u957f\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u53cd\u5377\u79ef\u5b9e\u73b0\u4e0a\u91c7\u6837\u3002","title":"1.1.2 \u4e0a\u91c7\u6837\u90e8\u5206"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#12","text":"\u5982\u679c\u53ea\u5229\u7528\u53cd\u5377\u79ef\u5bf9\u6700\u540e\u4e00\u5c42\u7684\u7279\u5f81\u56fe\u8fdb\u884c\u4e0a\u91c7\u6837\u7684\u5230\u539f\u56fe\u5927\u5c0f\u7684\u5206\u5272\uff0c\u7531\u4e8e\u6700\u540e\u4e00\u5c42\u7684\u7279\u5f81\u56fe\u592a\u5c0f\uff0c\u4f1a\u635f\u5931\u5f88\u591a\u7ec6\u8282\u3002\u56e0\u800c\u63d0\u51fa\u589e\u52a0Skips\u7ed3\u6784\u5c06\u6700\u540e\u4e00\u5c42\u7684\u9884\u6d4b\uff08\u6709\u66f4\u5bcc\u7684\u5168\u5c40\u4fe1\u606f\uff09\u548c\u66f4\u6d45\u5c42\uff08\u6709\u66f4\u591a\u7684\u5c40\u90e8\u7ec6\u8282\uff09\u7684\u9884\u6d4b\u7ed3\u5408\u8d77\u6765\u3002 \u90a3\u4e48\uff1a \u5bf9\u4e8eFCN-32s\uff0c\u76f4\u63a5\u5bf9pool5 feature\u8fdb\u884c32\u500d\u4e0a\u91c7\u6837\u83b7\u5f9732x upsampled feature\uff0c\u518d\u5bf932x upsampled feature\u6bcf\u4e2a\u70b9\u505asoftmax prediction\u83b7\u5f9732x upsampled feature prediction\uff08\u5373\u5206\u5272\u56fe\uff09\u3002 \u5bf9\u4e8eFCN-16s\uff0c\u9996\u5148\u5bf9pool5 feature\u8fdb\u884c2\u500d\u4e0a\u91c7\u6837\u83b7\u5f972x upsampled feature\uff0c\u518d\u628apool4 feature\u548c2x upsampled feature\u9010\u70b9\u76f8\u52a0\uff0c\u7136\u540e\u5bf9\u76f8\u52a0\u7684feature\u8fdb\u884c16\u500d\u4e0a\u91c7\u6837\uff0c\u5e76softmax prediction\uff0c\u83b7\u5f9716x upsampled feature prediction\u3002 \u5bf9\u4e8eFCN-8s\uff0c\u9996\u5148\u8fdb\u884cpool4+2x upsampled feature\u9010\u70b9\u76f8\u52a0\uff0c\u7136\u540e\u53c8\u8fdb\u884cpool3+2x upsampled\u9010\u70b9\u76f8\u52a0\uff0c\u5373\u8fdb\u884c\u66f4\u591a\u6b21\u7279\u5f81\u878d\u5408\u3002\u5177\u4f53\u8fc7\u7a0b\u4e0e16s\u7c7b\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002 \u4e0b\u9762\u6709\u4e00\u5f2032\u500d\uff0c16\u500d\u548c8\u500d\u4e0a\u91c7\u6837\u5f97\u5230\u7684\u7ed3\u679c\u56fe\u5bf9\u6bd4\uff1a \u53ef\u4ee5\u770b\u5230\u968f\u7740\u4e0a\u91c7\u6837\u505a\u5f97\u8d8a\u591a\uff0c\u5206\u5272\u7ed3\u679c\u8d8a\u6765\u8d8a\u7cbe\u7ec6\u3002","title":"1.2 \u8df3\u5c42\u8fde\u63a5"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#13","text":"\u4f18\u70b9 \u7aef\u5230\u7aef\u7684\uff0c\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u5927\u5c0f\u7684\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\uff0c\u6bd4\u8f83\u9ad8\u6548\u3002 \u5c40\u9650\u6027 \u5f97\u5230\u7684\u7ed3\u679c\u8fd8\u662f\u4e0d\u591f\u7cbe\u7ec6\u3002\u8fdb\u884c8\u500d\u4e0a\u91c7\u6837\u867d\u7136\u6bd432\u500d\u7684\u6548\u679c\u597d\u4e86\u5f88\u591a\uff0c\u4f46\u662f\u4e0a\u91c7\u6837\u7684\u7ed3\u679c\u8fd8\u662f\u6bd4\u8f83\u6a21\u7cca\u7684\uff0c\u5bf9\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u4e0d\u654f\u611f\u3002\u800c\u4e14\u5728\u5bf9\u5404\u4e2a\u50cf\u7d20\u8fdb\u884c\u5206\u7c7b\u65f6\uff0c\u6ca1\u6709\u8003\u8651\u50cf\u7d20\u4e0e\u50cf\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u3002","title":"1.3 \u603b\u7ed3"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/02-%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#2unet","text":"Unet\u7f51\u7edc\u662f\u5efa\u7acb\u5728FCN\u7f51\u7edc\u57fa\u7840\u4e0a\u7684\uff0c\u5b83\u7684\u7f51\u7edc\u67b6\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u603b\u4f53\u6765\u8bf4\u4e0eFCN\u601d\u8def\u975e\u5e38\u7c7b\u4f3c\u3002 \u6574\u4e2a\u7f51\u7edc\u7531\u7f16\u7801\u90e8\u5206\uff08\u5de6\uff09 \u548c \u89e3\u7801\u90e8\u5206\uff08\u53f3\uff09\u7ec4\u6210\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5927\u5927\u7684U\u5b57\u6bcd\uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b\uff1a 1\u3001\u7f16\u7801\u90e8\u5206\u662f\u5178\u578b\u7684\u5377\u79ef\u7f51\u7edc\u67b6\u6784\uff1a \u67b6\u6784\u4e2d\u542b\u6709\u7740\u4e00\u79cd\u91cd\u590d\u7ed3\u6784\uff0c\u6bcf\u6b21\u91cd\u590d\u4e2d\u90fd\u67092\u4e2a 3 x 3\u5377\u79ef\u5c42\u3001\u975e\u7ebf\u6027ReLU\u5c42\u548c\u4e00\u4e2a 2 x 2 max pooling\u5c42\uff08stride\u4e3a2\uff09\u3002\uff08\u56fe\u4e2d\u7684\u84dd\u7bad\u5934\u3001\u7ea2\u7bad\u5934\uff0c\u6ca1\u753bReLu\uff09 \u6bcf\u4e00\u6b21\u4e0b\u91c7\u6837\u540e\u6211\u4eec\u90fd\u628a\u7279\u5f81\u901a\u9053\u7684\u6570\u91cf\u52a0\u500d 2\u3001\u89e3\u7801\u90e8\u5206\u4e5f\u4f7f\u7528\u4e86\u7c7b\u4f3c\u7684\u6a21\u5f0f\uff1a \u6bcf\u4e00\u6b65\u90fd\u9996\u5148\u4f7f\u7528\u53cd\u5377\u79ef(up-convolution)\uff0c\u6bcf\u6b21\u4f7f\u7528\u53cd\u5377\u79ef\u90fd\u5c06\u7279\u5f81\u901a\u9053\u6570\u91cf\u51cf\u534a\uff0c\u7279\u5f81\u56fe\u5927\u5c0f\u52a0\u500d\u3002\uff08\u56fe\u4e2d\u7eff\u7bad\u5934\uff09 \u53cd\u5377\u79ef\u8fc7\u540e\uff0c\u5c06\u53cd\u5377\u79ef\u7684\u7ed3\u679c\u4e0e\u7f16\u7801\u90e8\u5206\u4e2d\u5bf9\u5e94\u6b65\u9aa4\u7684\u7279\u5f81\u56fe\u62fc\u63a5\u8d77\u6765\u3002\uff08\u767d/\u84dd\u5757\uff09 \u7f16\u7801\u90e8\u5206\u4e2d\u7684\u7279\u5f81\u56fe\u5c3a\u5bf8\u7a0d\u5927\uff0c\u5c06\u5176\u4fee\u526a\u8fc7\u540e\u8fdb\u884c\u62fc\u63a5\u3002\uff08\u5de6\u8fb9\u6df1\u84dd\u865a\u7ebf\uff09 \u5bf9\u62fc\u63a5\u540e\u7684map\u518d\u8fdb\u884c2\u6b213 x 3\u7684\u5377\u79ef\u3002\uff08\u53f3\u4fa7\u84dd\u7bad\u5934\uff09 \u6700\u540e\u4e00\u5c42\u7684\u5377\u79ef\u6838\u5927\u5c0f\u4e3a1 x 1\uff0c\u5c0664\u901a\u9053\u7684\u7279\u5f81\u56fe\u8f6c\u5316\u4e3a\u7279\u5b9a\u7c7b\u522b\u6570\u91cf\uff08\u5206\u7c7b\u6570\u91cf\uff09\u7684\u7ed3\u679c\u3002\uff08\u56fe\u4e2d\u9752\u8272\u7bad\u5934\uff09 \u603b\u7ed3 \u4e86\u89e3FCN\u7684\u7ed3\u6784 FCN\u7f51\u7edc\u4e0eCNN\u7684\u4e0d\u540c\u662f\u5c06\u5168\u8fde\u63a5\u5c42\u66ff\u6362\u4e3a\u5377\u79ef\u5c42\u63d0\u53d6\u56fe\u50cf\u7684\u7279\u5f81\uff0c\u83b7\u53d6\u4e8c\u7ef4\u7684\u7279\u5f81\u56fe\uff0c\u5f97\u5230\u56fe\u50cf\u7684\u5206\u5272\u7ed3\u679c\uff0c\u6574\u4e2a\u7f51\u7edc\u53ef\u5206\u4e3a\u5168\u5377\u79ef\u90e8\u5206\u548c\u4e0a\u91c7\u6837\u4e24\u90e8\u5206 \u4e86\u89e3FCN\u7684\u4e0a\u91c7\u6837\u65b9\u6cd5\u53ca\u8df3\u5c42\u8fde\u63a5 \u4e0a\u91c7\u6837\uff1a\u4f7f\u7528\u53cd\u5377\u79ef\u5b8c\u6210 \u8df3\u5c42\u8fde\u63a5\uff1a\u5c06\u7f51\u7edc\u63d0\u53d6\u7684\u6df1\u5c42\u7279\u5f81\u548c\u6d45\u5c42\u7279\u5f81\u7ed3\u5408\u8d77\u6765 \u638c\u63e1Unet\u7f51\u7edc\u7ed3\u6784 \u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5927\u5927\u7684U\u5b57\u6bcd\uff1a\u9996\u5148\u8fdb\u884c\u5377\u79ef\u548c\u6c60\u5316\u6765\u5b8c\u6210\u4e0b\u91c7\u6837\uff1b\u7136\u540e\u901a\u8fc7\u53cd\u5377\u79ef\u8fdb\u884c\u4e0a\u91c7\u6837\uff0ccrop\u4e4b\u524d\u7684\u4f4e\u5c42feature map\uff0c\u8fdb\u884c\u878d\u5408\uff1b\u7136\u540e\u518d\u6b21\u4e0a\u91c7\u6837\u3002\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u83b7\u5f97\u8f93\u51fa\u7684feature map\uff0c\u6700\u540e\u7ecf\u8fc7softmax\u83b7\u5f97\u8f93\u51fa\u5206\u5272\u7ed3\u679c","title":"2.Unet\u7f51\u7edc"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/","text":"3.3 UNet\u6848\u4f8b \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u5ba0\u7269\u56fe\u50cf\u5206\u5272\u6570\u636e\u96c6 \u80fd\u591f\u5b8c\u6210UNet\u7f51\u7edc\u7684\u642d\u5efa \u80fd\u591f\u5b8c\u6210UNet\u7f51\u7edc\u7684\u8bad\u7ec3\u4e0e\u9884\u6d4b 1.1 \u4efb\u52a1\u53ca\u6570\u636e\u96c6\u7b80\u4ecb \u00b6 \u4f7fOxford-IIIT Pet Dataset\u5ba0\u7269\u56fe\u50cf\u5206\u5272\u6570\u636e\u96c6\uff0c\u5305\u542b37\u79cd\u5ba0\u7269\u7c7b\u522b\uff0c\u5176\u4e2d\u670912\u79cd\u732b\u7684\u7c7b\u522b\u548c25\u79cd\u72d7\u7684\u7c7b\u522b\uff0c\u6bcf\u4e2a\u7c7b\u522b\u5927\u7ea6\u6709200\u5f20\u56fe\u7247\uff0c\u6240\u6709\u56fe\u50cf\u90fd\u5177\u6709\u54c1\u79cd\uff0c\u5934\u90e8ROI\u548c\u50cf\u7d20\u7ea7\u5206\u5272\u7684\u6807\u6ce8\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe\u50cf\u5206\u5272\u65f6\u5171\u5206\u4e3a\u524d\u666f\uff0c\u80cc\u666f\u548c\u4e0d\u786e\u5b9a3\u79cd\uff0c\u56fe\u50cf\u6570\u636e\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5bf9\u5e94\u7684\u6570\u91cf\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6570\u636e\u96c6\u7684\u76ee\u5f55\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\\segdata 1\u3001Images\uff1a\u5b58\u50a8\u6570\u636e\u96c6\u7684\u56fe\u7247\u6570\u636e\uff0c\u5176\u4e2d\u56fe\u7247\u6587\u4ef6\u540d\u662f\u4ee5\u5927\u5199\u5f00\u5934\u4e3a\u201ccat\u201d\uff0c\u5c0f\u5199\u5f00\u5934\u4e3a\u201cdog\u201d\u3002 2\u3001Annotations\uff1a\u6807\u6ce8\u4fe1\u606f\uff0c\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a list.txt\u4e2d\u7684\u5185\u5bb9\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff0c\u5176\u4e2dClass ID\u5bf9\u5e94\u774037\u7c7b\u4e2d\u7684\u67d0\u4e00\u7c7b\uff0cSPECIES\u662f\u603b\u5206\u7c7b\uff0c1\u662f\u732b\uff0c2\u662f\u72d7\uff1bBreedID\u662f\u732b\u72d7\u5206\u7c7b\u4e2d\u7684\u5b50\u5206\u7c7b\uff0c\u732b\u7684\u5b50\u5206\u7c7b\u4e3a12\u7c7b\uff0c\u800c\u72d7\u7684\u5b50\u5206\u7c7b\u4e3a25\u7c7b\u3002 trimaps\u662f\u56fe\u50cf\u7684\u50cf\u7d20\u7ea7\u6807\u6ce8\u4fe1\u606f\uff0c\u662f\u6211\u4eec\u7684\u76ee\u6807\u503c \u63a5\u4e0b\u6765\u6211\u4eec\u5229\u7528UNET\u7f51\u7edc\u8fdb\u884c\u5ba0\u7269\u6570\u636e\u96c6\u5206\u5272\u3002 1.2 \u6570\u636e\u96c6\u83b7\u53d6 \u00b6 \u5728\u8fdb\u884c\u6a21\u578b\u6784\u5efa\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u8bfb\u53d6\u6570\u636e\u96c6\uff0c\u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305\uff1a import os from IPython.display import Image , display from tensorflow.keras.preprocessing.image import load_img import PIL from PIL import ImageOps 1.2.1 \u8def\u5f84\u53ca\u76f8\u5173\u53c2\u6570\u8bbe\u7f6e \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u6570\u636e\u7684\u8def\u5f84\uff0c\u56fe\u50cf\u7684\u5927\u5c0f\uff0cbatch_size\u548c\u7c7b\u522b\u6570\u91cf\uff0c\u5728\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u6280\u5de7\uff0c\u56fe\u50cf\u5206\u5272\u65f6\u5171\u5206\u4e3a\u524d\u666f\uff0c\u80cc\u666f\u548c\u4e0d\u786e\u5b9a3\u79cd\uff0c\u5206\u522b\u6807\u6ce8\u4e3a\uff1a1\uff0c2\uff0c3\uff0c\u5bf9\u7c7b\u522b\u8fdb\u884c\u70ed\u7f16\u7801\u65f6\uff0c\u6211\u4eec\u7f16\u7801\u4e3a\uff1a1\uff1a0010\uff1b2\uff1a0100\uff1b3\uff1a1000\uff0c\u8fd9\u6837\u5728\u8bbe\u7f6e\u7c7b\u522b\u4e2a\u6570\u65f6\u8bbe\u4e3a4\u5373\u53ef\u3002 # \u56fe\u7247\u4f4d\u7f6e input_dir = \"segdata/images/\" # \u6807\u6ce8\u4fe1\u606f\u4f4d\u7f6e target_dir = \"segdata/annotations/trimaps/\" # \u56fe\u50cf\u5927\u5c0f\u8bbe\u7f6e\u53ca\u7c7b\u522b\u4fe1\u606f img_size = ( 160 , 160 ) batch_size = 32 num_classes = 4 # \u56fe\u50cf\u7684\u8def\u5f84 input_img_paths = sorted ( [ os . path . join ( input_dir , fname ) for fname in os . listdir ( input_dir ) if fname . endswith ( \".jpg\" ) ] ) # \u76ee\u6807\u503c\u8def\u5f84 target_img_paths = sorted ( [ os . path . join ( target_dir , fname ) for fname in os . listdir ( target_dir ) if fname . endswith ( \".png\" ) and not fname . startswith ( \".\" ) ] ) 1.2.2 \u6570\u636e\u5c55\u793a \u00b6 \u5c06\u56fe\u50cf\u53ca\u5bf9\u5e94\u7684\u7ed3\u679c\u8fdb\u884c\u5c55\u793a\uff1a # \u663e\u793a\u67d0\u4e00\u5e45\u56fe\u50cf\uff0c\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u56fe\u50cf\uff0c\u4f7f\u7528pillow\u6253\u5f00 img = Image . open ( input_img_paths [ 10 ]) # \u8fdb\u884c\u56fe\u50cf\u5c55\u793a plt . imshow ( img ) \u6807\u6ce8\u4fe1\u606f\u4e2d\u53ea\u67093\u4e2a\u503c\uff0c\u6211\u4eec\u4f7f\u7528PIL.ImageOps.autocontrast\u8fdb\u884c\u5c55\u793a\uff0c\u8be5\u65b9\u6cd5\u8ba1\u7b97\u8f93\u5165\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\uff0c\u7136\u540e\u91cd\u65b0\u6620\u5c04\u56fe\u50cf\uff0c\u6700\u6697\u50cf\u7d20\u53d8\u4e3a\u9ed1\u8272\uff0c\u53730\uff0c\u6700\u4eae\u7684\u53d8\u4e3a\u767d\u8272\uff0c\u5373255\uff0c\u5176\u4ed6\u7684\u503c\u4ee5\u5176\u4ed6\u7684\u7070\u5ea6\u503c\u8fdb\u884c\u663e\u793a\uff0c\u5728\u8fd9\u91cc\u524d\u666f\uff0c\u80cc\u666f\u548c\u4e0d\u786e\u5b9a\u5206\u522b\u6807\u6ce8\u4e3a\uff1a1\uff0c2\uff0c3\uff0c\u6240\u4ee5\u524d\u666f\u6700\u5c0f\u663e\u793a\u4e3a\u9ed1\u8272\uff0c\u4e0d\u786e\u5b9a\u7684\u533a\u57df\u6700\u5927\u663e\u793a\u4e3a\u767d\u8272\u3002 # \u663e\u793a\u6807\u6ce8\u56fe\u50cf,\u83b7\u53d6\u5bf9\u5e94\u7684\u6807\u6ce8\u6587\u4ef6\uff0c\u5c06\u6807\u6ce8\u6570\u636e\u8fdb\u884c\u8f6c\u63620-255\u4e4b\u95f4 img_anno = ImageOps . autocontrast ( Image . open ( target_img_paths [ 10 ])) # \u4f7f\u7528\u7070\u5ea6\u56fe\u8fdb\u884c\u5c55\u793a plt . imshow ( img_anno , cmap = 'gray' ) 1.2.3 \u6784\u5efa\u6570\u636e\u96c6\u751f\u6210\u5668 \u00b6 \u5229\u7528torch.utils.data.Dataset\u6784\u5efa\u56fe\u50cf\u751f\u6210\u5668\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u4e3b\u8981\u5b9e\u73b03\u4e2a\u65b9\u6cd5\uff1binit,len\u548cgetitem\u5373\u53ef\uff0c\u901a\u8fc7 getitem \u5e94\u8fd4\u56de\u5b8c\u6574\u7684\u6279\u6b21\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a from torch.utils.data import Dataset , DataLoader import numpy as np import torchvision.transforms as T import torch # \u8fdb\u884c\u56fe\u50cf\u5c3a\u5bf8\u7684\u8c03\u6574 transforms_RS = T . Resize ( size = img_size ) transform = T . Compose ([ T . ToTensor (), transforms_RS , ]) # \u6570\u636e\u96c6\u83b7\u53d6\uff1a class OxfordPets ( Dataset ): # \u5728__init__\u65b9\u6cd5\u4e2d\u6307\u5b9a,img_size,input_img_paths,target_img_paths def __init__ ( self , input_img_paths , target_img_paths ): super () . __init__ () self . input_img_paths = input_img_paths # \u8f93\u5165\u56fe\u50cf\u8def\u5f84 self . target_img_paths = target_img_paths # \u6807\u6ce8\u56fe\u50cf\u8def\u5f84 def __len__ ( self ): # \u8ba1\u7b97\u6837\u672c\u6570\u91cf return len ( self . target_img_paths ) def __getitem__ ( self , idx ): \"\"\" \u83b7\u53d6\u67d0\u4e00\u6570\u636e \"\"\" # \u83b7\u53d6\u8f93\u5165\u7684\u56fe\u50cf\u6570\u636e input_img_path = self . input_img_paths [ idx ] img = Image . open ( input_img_path ) x = transform ( img ) # \u83b7\u53d6\u6807\u7b7e\u6570\u636e target_img_path = self . target_img_paths [ idx ] img = Image . open ( target_img_path ) y = transform ( img ) . type ( torch . long ) . squeeze () return x , y \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u65b9\u6cd5\u6765\u83b7\u53d6\u6570\u636e\u3002 1.3 \u6a21\u578b\u6784\u5efa \u00b6 Unet\u7684\u7f51\u7edc\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e3b\u8981\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7f16\u7801\u548c\u89e3\u7801\u90e8\u5206\uff0c\u6211\u4eec\u5206\u522b\u8fdb\u884c\u6784\u5efa \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305\uff1a import torch import torch.nn as nn from torch.nn import functional as F from torchsummary import summary 1.3.1 \u57fa\u7840\u5377\u79ef\u6a21\u5757 \u00b6 \u5728unet\u7f51\u7edc\u7ed3\u6784\u4e2d\u90fd\u662f\u6709\u4e24\u4e2a\u4e32\u8fde\u7684\u5377\u79ef\u6a21\u5757\u6784\u6210\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u9996\u5148\u6784\u5efa\u8fd9\u4e2a\u57fa\u7840\u6a21\u5757\uff1a # \u57fa\u672c\u5377\u79ef\u5757 class Conv ( nn . Module ): # \u9700\u8981\u6307\u660e\u8f93\u5165\u548c\u8f93\u51fa\u7684\u901a\u9053\u6570 def __init__ ( self , C_in , C_out ): super ( Conv , self ) . __init__ () self . layer = nn . Sequential ( # \u7b2c\u4e00\u4e2a\u5377\u79ef\u5757 nn . Conv2d ( C_in , C_out , 3 , 1 , 1 ), nn . BatchNorm2d ( C_out ), nn . LeakyReLU (), # \u7b2c\u4e8c\u4e2a\u5377\u79ef\u5757 nn . Conv2d ( C_out , C_out , 3 , 1 , 1 ), nn . BatchNorm2d ( C_out ), nn . LeakyReLU (), ) def forward ( self , x ): return self . layer ( x ) 1.3.2 \u4e0b\u91c7\u6837\u90e8\u5206 \u00b6 \u4e0b\u91c7\u6837\u90e8\u5206\u7684\u7279\u70b9\u662f\uff1a \u67b6\u6784\u4e2d\u542b\u6709\u7740\u4e00\u79cd\u91cd\u590d\u7ed3\u6784\uff0c\u6bcf\u6b21\u91cd\u590d\u4e2d\u90fd\u67092\u4e2a 3 x 3\u5377\u79ef\u5c42\u3001\u975e\u7ebf\u6027ReLU\u5c42\u548c\u4e00\u4e2a 2 x 2 max pooling\u5c42\uff08stride\u4e3a2\uff09\u3002 \u6bcf\u4e00\u6b21\u4e0b\u91c7\u6837\u540e\u6211\u4eec\u90fd\u628a\u7279\u5f81\u901a\u9053\u7684\u6570\u91cf\u52a0\u500d \u6bcf\u6b21\u91cd\u590d\u90fd\u6709\u4e24\u4e2a\u8f93\u51fa\uff1a\u4e00\u4e2a\u7528\u4e8e\u7f16\u7801\u90e8\u5206\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u4e00\u4e2a\u7528\u4e8e\u89e3\u7801\u90e8\u5206\u7684\u7279\u5f81\u878d\u5408 \u6784\u5efa\u7684\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a # \u4e0b\u91c7\u6837\u6a21\u5757 class DownSampling ( nn . Module ): # \u6307\u660e\u5f53\u524d\u6a21\u5757\u7684\u901a\u9053\u6570 def __init__ ( self , C ): super ( DownSampling , self ) . __init__ () self . Down = nn . Sequential ( # \u4f7f\u7528\u5377\u79ef\u8fdb\u884c2\u500d\u7684\u4e0b\u91c7\u6837\uff0c\u901a\u9053\u6570\u4e0d\u53d8 nn . Conv2d ( C , C , 3 , 2 , 1 ), nn . LeakyReLU () ) # \u524d\u5411\u4f20\u64ad\u8fc7\u7a0b def forward ( self , x ): return self . Down ( x ) 1.3.3 \u4e0a\u91c7\u6837\u90e8\u5206 \u00b6 \u4e0a\u91c7\u6837\u90e8\u5206\u4e5f\u4f7f\u7528\u4e86\u91cd\u590d\u6a21\u5757\uff1a \u6bcf\u4e00\u4e2a\u6a21\u5757\u6709\u4e24\u4e2a\u8f93\u5165\uff1a\u4e00\u4e2a\u662f\u7f16\u7801\u9636\u6bb5\u7684\u7279\u5f81\u56fe\uff0c\u4e00\u4e2a\u662f\u89e3\u7801\u90e8\u5206\u7684\u7279\u5f81\u56fe \u6bcf\u4e00\u6b65\u90fd\u9996\u5148\u4f7f\u7528\u53cd\u5377\u79ef(up-convolution)\uff0c\u6bcf\u6b21\u4f7f\u7528\u53cd\u5377\u79ef\u90fd\u5c06\u7279\u5f81\u901a\u9053\u6570\u91cf\u51cf\u534a\uff0c\u7279\u5f81\u56fe\u5927\u5c0f\u52a0\u500d\u3002\uff08\u56fe\u4e2d\u7eff\u7bad\u5934\uff09 \u53cd\u5377\u79ef\u8fc7\u540e\uff0c\u5c06\u53cd\u5377\u79ef\u7684\u7ed3\u679c\u4e0e\u7f16\u7801\u90e8\u5206\u4e2d\u5bf9\u5e94\u6b65\u9aa4\u7684\u7279\u5f81\u56fe\u62fc\u63a5\u8d77\u6765\u3002\uff08\u767d/\u84dd\u5757\uff09 \u7f16\u7801\u90e8\u5206\u4e2d\u7684\u7279\u5f81\u56fe\u5c3a\u5bf8\u7a0d\u5927\uff0c\u5c06\u5176\u4fee\u526a\u8fc7\u540e\u8fdb\u884c\u62fc\u63a5\u3002\uff08\u5de6\u8fb9\u6df1\u84dd\u865a\u7ebf\uff09 \u5bf9\u62fc\u63a5\u540e\u7684map\u518d\u8fdb\u884c2\u6b213 x 3\u7684\u5377\u79ef\u3002\uff08\u53f3\u4fa7\u84dd\u7bad\u5934\uff09 \u7f16\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a # \u4e0a\u91c7\u6837\u6a21\u5757 class UpSampling ( nn . Module ): def __init__ ( self , C ): super ( UpSampling , self ) . __init__ () # \u7279\u5f81\u56fe\u5927\u5c0f\u6269\u59272\u500d\uff0c\u901a\u9053\u6570\u51cf\u534a self . Up = nn . Conv2d ( C , C // 2 , 1 , 1 ) def forward ( self , x , r ): # \u4f7f\u7528\u90bb\u8fd1\u63d2\u503c\u8fdb\u884c\u4e0b\u91c7\u6837 up = F . interpolate ( x , scale_factor = 2 , mode = \"nearest\" ) x = self . Up ( up ) # \u62fc\u63a5\uff0c\u5f53\u524d\u4e0a\u91c7\u6837\u7684\uff0c\u548c\u4e4b\u524d\u4e0b\u91c7\u6837\u8fc7\u7a0b\u4e2d\u7684 return torch . cat (( x , r ), 1 ) 1.3.3 \u6a21\u578b\u6784\u5efa \u00b6 \u5c06\u7f16\u7801\u90e8\u5206\u548c\u89e3\u7801\u90e8\u5206\u7ec4\u5408\u4e00\u8d77\uff0c\u5c31\u53ef\u6784\u5efaunet\u7f51\u7edc\uff0c\u5728\u8fd9\u91ccunet\u7f51\u7edc\u7684\u6df1\u5ea6\u901a\u8fc7depth\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5e76\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u7f16\u7801\u6a21\u5757\u7684\u5377\u79ef\u6838\u4e2a\u6570\u901a\u8fc7filter\u8fdb\u884c\u8bbe\u7f6e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u6a21\u5757\u5c06\u7f16\u7801\u548c\u89e3\u7801\u90e8\u5206\u8fdb\u884c\u7ec4\u5408\uff1a # \u4e3b\u5e72\u7f51\u7edc class UNet ( nn . Module ): def __init__ ( self ): super ( UNet , self ) . __init__ () # 4\u6b21\u4e0b\u91c7\u6837 self . C1 = Conv ( 3 , 64 ) self . D1 = DownSampling ( 64 ) self . C2 = Conv ( 64 , 128 ) self . D2 = DownSampling ( 128 ) self . C3 = Conv ( 128 , 256 ) self . D3 = DownSampling ( 256 ) self . C4 = Conv ( 256 , 512 ) self . D4 = DownSampling ( 512 ) self . C5 = Conv ( 512 , 1024 ) # 4\u6b21\u4e0a\u91c7\u6837 self . U1 = UpSampling ( 1024 ) self . C6 = Conv ( 1024 , 512 ) self . U2 = UpSampling ( 512 ) self . C7 = Conv ( 512 , 256 ) self . U3 = UpSampling ( 256 ) self . C8 = Conv ( 256 , 128 ) self . U4 = UpSampling ( 128 ) self . C9 = Conv ( 128 , 64 ) self . Th = torch . nn . Softmax () self . pred = torch . nn . Conv2d ( 64 , 4 , 3 , 1 , 1 ) def forward ( self , x ): # \u4e0b\u91c7\u6837\u90e8\u5206 R1 = self . C1 ( x ) R2 = self . C2 ( self . D1 ( R1 )) R3 = self . C3 ( self . D2 ( R2 )) R4 = self . C4 ( self . D3 ( R3 )) Y1 = self . C5 ( self . D4 ( R4 )) # \u4e0a\u91c7\u6837\u90e8\u5206 # \u4e0a\u91c7\u6837\u7684\u65f6\u5019\u9700\u8981\u62fc\u63a5\u8d77\u6765 O1 = self . C6 ( self . U1 ( Y1 , R4 )) O2 = self . C7 ( self . U2 ( O1 , R3 )) O3 = self . C8 ( self . U3 ( O2 , R2 )) O4 = self . C9 ( self . U4 ( O3 , R1 )) # \u8f93\u51fa\u9884\u6d4b\uff0c\u8fd9\u91cc\u5927\u5c0f\u8ddf\u8f93\u5165\u662f\u4e00\u81f4\u7684 return self . Th ( self . pred ( O4 )) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\uff1a net = UNet () summary ( net , input_size = ( 3 , 256 , 256 ), batch_size = 1 ) \u67e5\u770b\u6a21\u578b\u7ed3\u6784\uff0c\u5982\u4e0b\u6240\u793a\uff1a ---------------------------------------------------------------- Layer ( type ) Output Shape Param # ================================================================ Conv2d - 1 [ 1 , 64 , 256 , 256 ] 1 , 792 BatchNorm2d - 2 [ 1 , 64 , 256 , 256 ] 128 LeakyReLU - 3 [ 1 , 64 , 256 , 256 ] 0 Conv2d - 4 [ 1 , 64 , 256 , 256 ] 36 , 928 BatchNorm2d - 5 [ 1 , 64 , 256 , 256 ] 128 LeakyReLU - 6 [ 1 , 64 , 256 , 256 ] 0 Conv - 7 [ 1 , 64 , 256 , 256 ] 0 Conv2d - 8 [ 1 , 64 , 128 , 128 ] 36 , 928 LeakyReLU - 9 [ 1 , 64 , 128 , 128 ] 0 DownSampling - 10 [ 1 , 64 , 128 , 128 ] 0 Conv2d - 11 [ 1 , 128 , 128 , 128 ] 73 , 856 BatchNorm2d - 12 [ 1 , 128 , 128 , 128 ] 256 LeakyReLU - 13 [ 1 , 128 , 128 , 128 ] 0 Conv2d - 14 [ 1 , 128 , 128 , 128 ] 147 , 584 BatchNorm2d - 15 [ 1 , 128 , 128 , 128 ] 256 LeakyReLU - 16 [ 1 , 128 , 128 , 128 ] 0 Conv - 17 [ 1 , 128 , 128 , 128 ] 0 Conv2d - 18 [ 1 , 128 , 64 , 64 ] 147 , 584 LeakyReLU - 19 [ 1 , 128 , 64 , 64 ] 0 DownSampling - 20 [ 1 , 128 , 64 , 64 ] 0 Conv2d - 21 [ 1 , 256 , 64 , 64 ] 295 , 168 BatchNorm2d - 22 [ 1 , 256 , 64 , 64 ] 512 LeakyReLU - 23 [ 1 , 256 , 64 , 64 ] 0 Conv2d - 24 [ 1 , 256 , 64 , 64 ] 590 , 080 BatchNorm2d - 25 [ 1 , 256 , 64 , 64 ] 512 LeakyReLU - 26 [ 1 , 256 , 64 , 64 ] 0 Conv - 27 [ 1 , 256 , 64 , 64 ] 0 Conv2d - 28 [ 1 , 256 , 32 , 32 ] 590 , 080 LeakyReLU - 29 [ 1 , 256 , 32 , 32 ] 0 DownSampling - 30 [ 1 , 256 , 32 , 32 ] 0 Conv2d - 31 [ 1 , 512 , 32 , 32 ] 1 , 180 , 160 BatchNorm2d - 32 [ 1 , 512 , 32 , 32 ] 1 , 024 LeakyReLU - 33 [ 1 , 512 , 32 , 32 ] 0 Conv2d - 34 [ 1 , 512 , 32 , 32 ] 2 , 359 , 808 BatchNorm2d - 35 [ 1 , 512 , 32 , 32 ] 1 , 024 LeakyReLU - 36 [ 1 , 512 , 32 , 32 ] 0 Conv - 37 [ 1 , 512 , 32 , 32 ] 0 Conv2d - 38 [ 1 , 512 , 16 , 16 ] 2 , 359 , 808 LeakyReLU - 39 [ 1 , 512 , 16 , 16 ] 0 DownSampling - 40 [ 1 , 512 , 16 , 16 ] 0 Conv2d - 41 [ 1 , 1024 , 16 , 16 ] 4 , 719 , 616 BatchNorm2d - 42 [ 1 , 1024 , 16 , 16 ] 2 , 048 LeakyReLU - 43 [ 1 , 1024 , 16 , 16 ] 0 Conv2d - 44 [ 1 , 1024 , 16 , 16 ] 9 , 438 , 208 BatchNorm2d - 45 [ 1 , 1024 , 16 , 16 ] 2 , 048 LeakyReLU - 46 [ 1 , 1024 , 16 , 16 ] 0 Conv - 47 [ 1 , 1024 , 16 , 16 ] 0 Conv2d - 48 [ 1 , 512 , 32 , 32 ] 524 , 800 UpSampling - 49 [ 1 , 1024 , 32 , 32 ] 0 Conv2d - 50 [ 1 , 512 , 32 , 32 ] 4 , 719 , 104 BatchNorm2d - 51 [ 1 , 512 , 32 , 32 ] 1 , 024 LeakyReLU - 52 [ 1 , 512 , 32 , 32 ] 0 Conv2d - 53 [ 1 , 512 , 32 , 32 ] 2 , 359 , 808 BatchNorm2d - 54 [ 1 , 512 , 32 , 32 ] 1 , 024 LeakyReLU - 55 [ 1 , 512 , 32 , 32 ] 0 Conv - 56 [ 1 , 512 , 32 , 32 ] 0 Conv2d - 57 [ 1 , 256 , 64 , 64 ] 131 , 328 UpSampling - 58 [ 1 , 512 , 64 , 64 ] 0 Conv2d - 59 [ 1 , 256 , 64 , 64 ] 1 , 179 , 904 BatchNorm2d - 60 [ 1 , 256 , 64 , 64 ] 512 LeakyReLU - 61 [ 1 , 256 , 64 , 64 ] 0 Conv2d - 62 [ 1 , 256 , 64 , 64 ] 590 , 080 BatchNorm2d - 63 [ 1 , 256 , 64 , 64 ] 512 LeakyReLU - 64 [ 1 , 256 , 64 , 64 ] 0 Conv - 65 [ 1 , 256 , 64 , 64 ] 0 Conv2d - 66 [ 1 , 128 , 128 , 128 ] 32 , 896 UpSampling - 67 [ 1 , 256 , 128 , 128 ] 0 Conv2d - 68 [ 1 , 128 , 128 , 128 ] 295 , 040 BatchNorm2d - 69 [ 1 , 128 , 128 , 128 ] 256 LeakyReLU - 70 [ 1 , 128 , 128 , 128 ] 0 Conv2d - 71 [ 1 , 128 , 128 , 128 ] 147 , 584 BatchNorm2d - 72 [ 1 , 128 , 128 , 128 ] 256 LeakyReLU - 73 [ 1 , 128 , 128 , 128 ] 0 Conv - 74 [ 1 , 128 , 128 , 128 ] 0 Conv2d - 75 [ 1 , 64 , 256 , 256 ] 8 , 256 UpSampling - 76 [ 1 , 128 , 256 , 256 ] 0 Conv2d - 77 [ 1 , 64 , 256 , 256 ] 73 , 792 BatchNorm2d - 78 [ 1 , 64 , 256 , 256 ] 128 LeakyReLU - 79 [ 1 , 64 , 256 , 256 ] 0 Conv2d - 80 [ 1 , 64 , 256 , 256 ] 36 , 928 BatchNorm2d - 81 [ 1 , 64 , 256 , 256 ] 128 LeakyReLU - 82 [ 1 , 64 , 256 , 256 ] 0 Conv - 83 [ 1 , 64 , 256 , 256 ] 0 Conv2d - 84 [ 1 , 4 , 256 , 256 ] 2 , 308 Softmax - 85 [ 1 , 4 , 256 , 256 ] 0 ================================================================ Total params : 32 , 091 , 204 Trainable params : 32 , 091 , 204 Non - trainable params : 0 ---------------------------------------------------------------- Input size ( MB ): 0.75 Forward / backward pass size ( MB ): 1083.00 Params size ( MB ): 122.42 Estimated Total Size ( MB ): 1206.17 ---------------------------------------------------------------- \u8fdb\u884c\u53ef\u89c6\u5316\u3002 1.4 \u6a21\u578b\u8bad\u7ec3 \u00b6 1.4.1 \u6570\u636e\u83b7\u53d6 \u00b6 \u8bfb\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff1a # \u83b7\u53d6\u8bad\u7ec3\u96c6 train_dataset = OxfordPets ( input_img_paths , target_img_paths ) # \u4f7f\u7528dataloader\u83b7\u53d6batch\u8bad\u7ec3\u6570\u636e train_dataloader = DataLoader ( train_dataset , batch_size = batch_size ) 1.4.2 \u6a21\u578b\u8bad\u7ec3\u53c2\u6570\u8bbe\u7f6e \u00b6 # \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 1 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( net . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss () 1.4.3 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u8bbe\u7f6eepoch\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u6307\u660e\u9a8c\u8bc1\u96c6\u6570\u636e\uff1a # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_dataloader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f net . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b print ( images . shape ) outputs = net ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () iter += 1 print ( 'epoch: {0} , loss: {1:.4f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ))) torch . save ( net , 'unet.pth' ) print ( '------------finish training-------------' ) \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\uff1a current epoch = 0 epoch : 0 , loss : 0.9539 epoch : 1 , loss : 0.5145 epoch : 2 , loss : 0.4318 epoch : 3 , loss : 0.4027 epoch : 4 , loss : 0.3551 epoch : 5 , loss : 0.3226 epoch : 6 , loss : 0.3195 epoch : 7 , loss : 0.2789 epoch : 8 , loss : 0.2599 epoch : 9 , loss : 0.2440 epoch : 10 , loss : 0.2297 epoch : 11 , loss : 0.2179 epoch : 12 , loss : 0.2081 epoch : 13 , loss : 0.2081 epoch : 14 , loss : 0.2081 \u968f\u7740\u8fed\u4ee3\u6b21\u6570\u7684\u589e\u52a0\uff0c\u8bad\u7ec3\u96c6\u635f\u5931\u51fd\u6570\u53d8\u6362\u5982\u4e0b\u56fe\u6240\u793a\uff1a 1.5 \u6a21\u578b\u9884\u6d4b \u00b6 \u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5e76\u8bbe\u7f6e\u4e3a\u9a8c\u8bc1\u6a21\u578b # \u5bfc\u5165\u5de5\u5177\u5305 import glob import os from PIL import Image # \u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570 model = torch . load ( \"unet.pth\" , map_location = torch . device ( 'cpu' )) model . eval () \u83b7\u53d6\u8981\u9884\u6d4b\u7684\u56fe\u7247 from PIL import Image import torchvision.transforms as T img_int = Image . open ( 'dog.jpg' ) img = transform ( img_int ) . unsqueeze ( dim = 0 ) \u8fdb\u884c\u6a21\u578b\u9884\u6d4b predict = model ( img ) \u9884\u6d4b\u7ed3\u679c\u663e\u793a\u7684 import torchvision.transforms.functional as F # \u56fe\u50cf\u663e\u793a # \u83b7\u53d6\u5230\u6837\u672c\u7684\u9884\u6d4b\u7ed3\u679c mask = torch . argmax ( predict [ 0 ], axis = 0 ) # \u7ef4\u5ea6\u8c03\u6574 mask = np . uint8 ( np . expand_dims ( mask , axis =- 1 )) # \u8f6c\u6362\u4e3a\u56fe\u50cf\uff0c\u5e76\u8fdb\u884c\u663e\u793a mask = ImageOps . autocontrast ( F . to_pil_image ( mask )) # \u8fdb\u884c\u56fe\u50cf\u7684\u5c55\u793a plt . imshow ( mask , cmap = 'gray' ) \u603b\u7ed3 \u4e86\u89e3\u5ba0\u7269\u56fe\u50cf\u5206\u5272\u6570\u636e\u96c6 \u5ba0\u7269\u6570\u636e\u96c6\u8fdb\u884c\u5206\u5272\u65f6\u53ea\u6709\u524d\u666f\u3001\u80cc\u666f\u548c\u4e0d\u786e\u5b9a\u7684\u50cf\u7d20\u4e09\u79cd \u80fd\u591f\u5b8c\u6210UNet\u7f51\u7edc\u7684\u642d\u5efa \u642d\u5efa\u7f16\u7801\uff0c\u89e3\u7801\u90e8\u5206\u7684\u7f51\u7edc\uff0c\u5e76\u5c06\u4e24\u8005\u7ed3\u5408\u5728\u4e00\u8d77\u6784\u5efaUnet\u7f51\u7edc \u80fd\u591f\u5b8c\u6210UNet\u7f51\u7edc\u7684\u8bad\u7ec3\u4e0e\u9884\u6d4b","title":"3.3 UNet\u6848\u4f8b"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#33-unet","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u5ba0\u7269\u56fe\u50cf\u5206\u5272\u6570\u636e\u96c6 \u80fd\u591f\u5b8c\u6210UNet\u7f51\u7edc\u7684\u642d\u5efa \u80fd\u591f\u5b8c\u6210UNet\u7f51\u7edc\u7684\u8bad\u7ec3\u4e0e\u9884\u6d4b","title":"3.3 UNet\u6848\u4f8b"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#11","text":"\u4f7fOxford-IIIT Pet Dataset\u5ba0\u7269\u56fe\u50cf\u5206\u5272\u6570\u636e\u96c6\uff0c\u5305\u542b37\u79cd\u5ba0\u7269\u7c7b\u522b\uff0c\u5176\u4e2d\u670912\u79cd\u732b\u7684\u7c7b\u522b\u548c25\u79cd\u72d7\u7684\u7c7b\u522b\uff0c\u6bcf\u4e2a\u7c7b\u522b\u5927\u7ea6\u6709200\u5f20\u56fe\u7247\uff0c\u6240\u6709\u56fe\u50cf\u90fd\u5177\u6709\u54c1\u79cd\uff0c\u5934\u90e8ROI\u548c\u50cf\u7d20\u7ea7\u5206\u5272\u7684\u6807\u6ce8\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe\u50cf\u5206\u5272\u65f6\u5171\u5206\u4e3a\u524d\u666f\uff0c\u80cc\u666f\u548c\u4e0d\u786e\u5b9a3\u79cd\uff0c\u56fe\u50cf\u6570\u636e\u5305\u542b\u7684\u7c7b\u522b\u53ca\u5bf9\u5e94\u7684\u6570\u91cf\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6570\u636e\u96c6\u7684\u76ee\u5f55\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a\\segdata 1\u3001Images\uff1a\u5b58\u50a8\u6570\u636e\u96c6\u7684\u56fe\u7247\u6570\u636e\uff0c\u5176\u4e2d\u56fe\u7247\u6587\u4ef6\u540d\u662f\u4ee5\u5927\u5199\u5f00\u5934\u4e3a\u201ccat\u201d\uff0c\u5c0f\u5199\u5f00\u5934\u4e3a\u201cdog\u201d\u3002 2\u3001Annotations\uff1a\u6807\u6ce8\u4fe1\u606f\uff0c\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a list.txt\u4e2d\u7684\u5185\u5bb9\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff0c\u5176\u4e2dClass ID\u5bf9\u5e94\u774037\u7c7b\u4e2d\u7684\u67d0\u4e00\u7c7b\uff0cSPECIES\u662f\u603b\u5206\u7c7b\uff0c1\u662f\u732b\uff0c2\u662f\u72d7\uff1bBreedID\u662f\u732b\u72d7\u5206\u7c7b\u4e2d\u7684\u5b50\u5206\u7c7b\uff0c\u732b\u7684\u5b50\u5206\u7c7b\u4e3a12\u7c7b\uff0c\u800c\u72d7\u7684\u5b50\u5206\u7c7b\u4e3a25\u7c7b\u3002 trimaps\u662f\u56fe\u50cf\u7684\u50cf\u7d20\u7ea7\u6807\u6ce8\u4fe1\u606f\uff0c\u662f\u6211\u4eec\u7684\u76ee\u6807\u503c \u63a5\u4e0b\u6765\u6211\u4eec\u5229\u7528UNET\u7f51\u7edc\u8fdb\u884c\u5ba0\u7269\u6570\u636e\u96c6\u5206\u5272\u3002","title":"1.1 \u4efb\u52a1\u53ca\u6570\u636e\u96c6\u7b80\u4ecb"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#12","text":"\u5728\u8fdb\u884c\u6a21\u578b\u6784\u5efa\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u8bfb\u53d6\u6570\u636e\u96c6\uff0c\u5bfc\u5165\u76f8\u5e94\u7684\u5de5\u5177\u5305\uff1a import os from IPython.display import Image , display from tensorflow.keras.preprocessing.image import load_img import PIL from PIL import ImageOps","title":"1.2 \u6570\u636e\u96c6\u83b7\u53d6"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#121","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u6570\u636e\u7684\u8def\u5f84\uff0c\u56fe\u50cf\u7684\u5927\u5c0f\uff0cbatch_size\u548c\u7c7b\u522b\u6570\u91cf\uff0c\u5728\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u6280\u5de7\uff0c\u56fe\u50cf\u5206\u5272\u65f6\u5171\u5206\u4e3a\u524d\u666f\uff0c\u80cc\u666f\u548c\u4e0d\u786e\u5b9a3\u79cd\uff0c\u5206\u522b\u6807\u6ce8\u4e3a\uff1a1\uff0c2\uff0c3\uff0c\u5bf9\u7c7b\u522b\u8fdb\u884c\u70ed\u7f16\u7801\u65f6\uff0c\u6211\u4eec\u7f16\u7801\u4e3a\uff1a1\uff1a0010\uff1b2\uff1a0100\uff1b3\uff1a1000\uff0c\u8fd9\u6837\u5728\u8bbe\u7f6e\u7c7b\u522b\u4e2a\u6570\u65f6\u8bbe\u4e3a4\u5373\u53ef\u3002 # \u56fe\u7247\u4f4d\u7f6e input_dir = \"segdata/images/\" # \u6807\u6ce8\u4fe1\u606f\u4f4d\u7f6e target_dir = \"segdata/annotations/trimaps/\" # \u56fe\u50cf\u5927\u5c0f\u8bbe\u7f6e\u53ca\u7c7b\u522b\u4fe1\u606f img_size = ( 160 , 160 ) batch_size = 32 num_classes = 4 # \u56fe\u50cf\u7684\u8def\u5f84 input_img_paths = sorted ( [ os . path . join ( input_dir , fname ) for fname in os . listdir ( input_dir ) if fname . endswith ( \".jpg\" ) ] ) # \u76ee\u6807\u503c\u8def\u5f84 target_img_paths = sorted ( [ os . path . join ( target_dir , fname ) for fname in os . listdir ( target_dir ) if fname . endswith ( \".png\" ) and not fname . startswith ( \".\" ) ] )","title":"1.2.1 \u8def\u5f84\u53ca\u76f8\u5173\u53c2\u6570\u8bbe\u7f6e"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#122","text":"\u5c06\u56fe\u50cf\u53ca\u5bf9\u5e94\u7684\u7ed3\u679c\u8fdb\u884c\u5c55\u793a\uff1a # \u663e\u793a\u67d0\u4e00\u5e45\u56fe\u50cf\uff0c\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u56fe\u50cf\uff0c\u4f7f\u7528pillow\u6253\u5f00 img = Image . open ( input_img_paths [ 10 ]) # \u8fdb\u884c\u56fe\u50cf\u5c55\u793a plt . imshow ( img ) \u6807\u6ce8\u4fe1\u606f\u4e2d\u53ea\u67093\u4e2a\u503c\uff0c\u6211\u4eec\u4f7f\u7528PIL.ImageOps.autocontrast\u8fdb\u884c\u5c55\u793a\uff0c\u8be5\u65b9\u6cd5\u8ba1\u7b97\u8f93\u5165\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\uff0c\u7136\u540e\u91cd\u65b0\u6620\u5c04\u56fe\u50cf\uff0c\u6700\u6697\u50cf\u7d20\u53d8\u4e3a\u9ed1\u8272\uff0c\u53730\uff0c\u6700\u4eae\u7684\u53d8\u4e3a\u767d\u8272\uff0c\u5373255\uff0c\u5176\u4ed6\u7684\u503c\u4ee5\u5176\u4ed6\u7684\u7070\u5ea6\u503c\u8fdb\u884c\u663e\u793a\uff0c\u5728\u8fd9\u91cc\u524d\u666f\uff0c\u80cc\u666f\u548c\u4e0d\u786e\u5b9a\u5206\u522b\u6807\u6ce8\u4e3a\uff1a1\uff0c2\uff0c3\uff0c\u6240\u4ee5\u524d\u666f\u6700\u5c0f\u663e\u793a\u4e3a\u9ed1\u8272\uff0c\u4e0d\u786e\u5b9a\u7684\u533a\u57df\u6700\u5927\u663e\u793a\u4e3a\u767d\u8272\u3002 # \u663e\u793a\u6807\u6ce8\u56fe\u50cf,\u83b7\u53d6\u5bf9\u5e94\u7684\u6807\u6ce8\u6587\u4ef6\uff0c\u5c06\u6807\u6ce8\u6570\u636e\u8fdb\u884c\u8f6c\u63620-255\u4e4b\u95f4 img_anno = ImageOps . autocontrast ( Image . open ( target_img_paths [ 10 ])) # \u4f7f\u7528\u7070\u5ea6\u56fe\u8fdb\u884c\u5c55\u793a plt . imshow ( img_anno , cmap = 'gray' )","title":"1.2.2 \u6570\u636e\u5c55\u793a"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#123","text":"\u5229\u7528torch.utils.data.Dataset\u6784\u5efa\u56fe\u50cf\u751f\u6210\u5668\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u4e3b\u8981\u5b9e\u73b03\u4e2a\u65b9\u6cd5\uff1binit,len\u548cgetitem\u5373\u53ef\uff0c\u901a\u8fc7 getitem \u5e94\u8fd4\u56de\u5b8c\u6574\u7684\u6279\u6b21\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u6240\u793a\uff1a from torch.utils.data import Dataset , DataLoader import numpy as np import torchvision.transforms as T import torch # \u8fdb\u884c\u56fe\u50cf\u5c3a\u5bf8\u7684\u8c03\u6574 transforms_RS = T . Resize ( size = img_size ) transform = T . Compose ([ T . ToTensor (), transforms_RS , ]) # \u6570\u636e\u96c6\u83b7\u53d6\uff1a class OxfordPets ( Dataset ): # \u5728__init__\u65b9\u6cd5\u4e2d\u6307\u5b9a,img_size,input_img_paths,target_img_paths def __init__ ( self , input_img_paths , target_img_paths ): super () . __init__ () self . input_img_paths = input_img_paths # \u8f93\u5165\u56fe\u50cf\u8def\u5f84 self . target_img_paths = target_img_paths # \u6807\u6ce8\u56fe\u50cf\u8def\u5f84 def __len__ ( self ): # \u8ba1\u7b97\u6837\u672c\u6570\u91cf return len ( self . target_img_paths ) def __getitem__ ( self , idx ): \"\"\" \u83b7\u53d6\u67d0\u4e00\u6570\u636e \"\"\" # \u83b7\u53d6\u8f93\u5165\u7684\u56fe\u50cf\u6570\u636e input_img_path = self . input_img_paths [ idx ] img = Image . open ( input_img_path ) x = transform ( img ) # \u83b7\u53d6\u6807\u7b7e\u6570\u636e target_img_path = self . target_img_paths [ idx ] img = Image . open ( target_img_path ) y = transform ( img ) . type ( torch . long ) . squeeze () return x , y \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u65b9\u6cd5\u6765\u83b7\u53d6\u6570\u636e\u3002","title":"1.2.3 \u6784\u5efa\u6570\u636e\u96c6\u751f\u6210\u5668"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#13","text":"Unet\u7684\u7f51\u7edc\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e3b\u8981\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7f16\u7801\u548c\u89e3\u7801\u90e8\u5206\uff0c\u6211\u4eec\u5206\u522b\u8fdb\u884c\u6784\u5efa \u5bfc\u5165\u76f8\u5173\u7684\u5de5\u5177\u5305\uff1a import torch import torch.nn as nn from torch.nn import functional as F from torchsummary import summary","title":"1.3 \u6a21\u578b\u6784\u5efa"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#131","text":"\u5728unet\u7f51\u7edc\u7ed3\u6784\u4e2d\u90fd\u662f\u6709\u4e24\u4e2a\u4e32\u8fde\u7684\u5377\u79ef\u6a21\u5757\u6784\u6210\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u9996\u5148\u6784\u5efa\u8fd9\u4e2a\u57fa\u7840\u6a21\u5757\uff1a # \u57fa\u672c\u5377\u79ef\u5757 class Conv ( nn . Module ): # \u9700\u8981\u6307\u660e\u8f93\u5165\u548c\u8f93\u51fa\u7684\u901a\u9053\u6570 def __init__ ( self , C_in , C_out ): super ( Conv , self ) . __init__ () self . layer = nn . Sequential ( # \u7b2c\u4e00\u4e2a\u5377\u79ef\u5757 nn . Conv2d ( C_in , C_out , 3 , 1 , 1 ), nn . BatchNorm2d ( C_out ), nn . LeakyReLU (), # \u7b2c\u4e8c\u4e2a\u5377\u79ef\u5757 nn . Conv2d ( C_out , C_out , 3 , 1 , 1 ), nn . BatchNorm2d ( C_out ), nn . LeakyReLU (), ) def forward ( self , x ): return self . layer ( x )","title":"1.3.1 \u57fa\u7840\u5377\u79ef\u6a21\u5757"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#132","text":"\u4e0b\u91c7\u6837\u90e8\u5206\u7684\u7279\u70b9\u662f\uff1a \u67b6\u6784\u4e2d\u542b\u6709\u7740\u4e00\u79cd\u91cd\u590d\u7ed3\u6784\uff0c\u6bcf\u6b21\u91cd\u590d\u4e2d\u90fd\u67092\u4e2a 3 x 3\u5377\u79ef\u5c42\u3001\u975e\u7ebf\u6027ReLU\u5c42\u548c\u4e00\u4e2a 2 x 2 max pooling\u5c42\uff08stride\u4e3a2\uff09\u3002 \u6bcf\u4e00\u6b21\u4e0b\u91c7\u6837\u540e\u6211\u4eec\u90fd\u628a\u7279\u5f81\u901a\u9053\u7684\u6570\u91cf\u52a0\u500d \u6bcf\u6b21\u91cd\u590d\u90fd\u6709\u4e24\u4e2a\u8f93\u51fa\uff1a\u4e00\u4e2a\u7528\u4e8e\u7f16\u7801\u90e8\u5206\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u4e00\u4e2a\u7528\u4e8e\u89e3\u7801\u90e8\u5206\u7684\u7279\u5f81\u878d\u5408 \u6784\u5efa\u7684\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a # \u4e0b\u91c7\u6837\u6a21\u5757 class DownSampling ( nn . Module ): # \u6307\u660e\u5f53\u524d\u6a21\u5757\u7684\u901a\u9053\u6570 def __init__ ( self , C ): super ( DownSampling , self ) . __init__ () self . Down = nn . Sequential ( # \u4f7f\u7528\u5377\u79ef\u8fdb\u884c2\u500d\u7684\u4e0b\u91c7\u6837\uff0c\u901a\u9053\u6570\u4e0d\u53d8 nn . Conv2d ( C , C , 3 , 2 , 1 ), nn . LeakyReLU () ) # \u524d\u5411\u4f20\u64ad\u8fc7\u7a0b def forward ( self , x ): return self . Down ( x )","title":"1.3.2 \u4e0b\u91c7\u6837\u90e8\u5206"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#133","text":"\u4e0a\u91c7\u6837\u90e8\u5206\u4e5f\u4f7f\u7528\u4e86\u91cd\u590d\u6a21\u5757\uff1a \u6bcf\u4e00\u4e2a\u6a21\u5757\u6709\u4e24\u4e2a\u8f93\u5165\uff1a\u4e00\u4e2a\u662f\u7f16\u7801\u9636\u6bb5\u7684\u7279\u5f81\u56fe\uff0c\u4e00\u4e2a\u662f\u89e3\u7801\u90e8\u5206\u7684\u7279\u5f81\u56fe \u6bcf\u4e00\u6b65\u90fd\u9996\u5148\u4f7f\u7528\u53cd\u5377\u79ef(up-convolution)\uff0c\u6bcf\u6b21\u4f7f\u7528\u53cd\u5377\u79ef\u90fd\u5c06\u7279\u5f81\u901a\u9053\u6570\u91cf\u51cf\u534a\uff0c\u7279\u5f81\u56fe\u5927\u5c0f\u52a0\u500d\u3002\uff08\u56fe\u4e2d\u7eff\u7bad\u5934\uff09 \u53cd\u5377\u79ef\u8fc7\u540e\uff0c\u5c06\u53cd\u5377\u79ef\u7684\u7ed3\u679c\u4e0e\u7f16\u7801\u90e8\u5206\u4e2d\u5bf9\u5e94\u6b65\u9aa4\u7684\u7279\u5f81\u56fe\u62fc\u63a5\u8d77\u6765\u3002\uff08\u767d/\u84dd\u5757\uff09 \u7f16\u7801\u90e8\u5206\u4e2d\u7684\u7279\u5f81\u56fe\u5c3a\u5bf8\u7a0d\u5927\uff0c\u5c06\u5176\u4fee\u526a\u8fc7\u540e\u8fdb\u884c\u62fc\u63a5\u3002\uff08\u5de6\u8fb9\u6df1\u84dd\u865a\u7ebf\uff09 \u5bf9\u62fc\u63a5\u540e\u7684map\u518d\u8fdb\u884c2\u6b213 x 3\u7684\u5377\u79ef\u3002\uff08\u53f3\u4fa7\u84dd\u7bad\u5934\uff09 \u7f16\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a # \u4e0a\u91c7\u6837\u6a21\u5757 class UpSampling ( nn . Module ): def __init__ ( self , C ): super ( UpSampling , self ) . __init__ () # \u7279\u5f81\u56fe\u5927\u5c0f\u6269\u59272\u500d\uff0c\u901a\u9053\u6570\u51cf\u534a self . Up = nn . Conv2d ( C , C // 2 , 1 , 1 ) def forward ( self , x , r ): # \u4f7f\u7528\u90bb\u8fd1\u63d2\u503c\u8fdb\u884c\u4e0b\u91c7\u6837 up = F . interpolate ( x , scale_factor = 2 , mode = \"nearest\" ) x = self . Up ( up ) # \u62fc\u63a5\uff0c\u5f53\u524d\u4e0a\u91c7\u6837\u7684\uff0c\u548c\u4e4b\u524d\u4e0b\u91c7\u6837\u8fc7\u7a0b\u4e2d\u7684 return torch . cat (( x , r ), 1 )","title":"1.3.3 \u4e0a\u91c7\u6837\u90e8\u5206"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#133_1","text":"\u5c06\u7f16\u7801\u90e8\u5206\u548c\u89e3\u7801\u90e8\u5206\u7ec4\u5408\u4e00\u8d77\uff0c\u5c31\u53ef\u6784\u5efaunet\u7f51\u7edc\uff0c\u5728\u8fd9\u91ccunet\u7f51\u7edc\u7684\u6df1\u5ea6\u901a\u8fc7depth\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5e76\u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u7f16\u7801\u6a21\u5757\u7684\u5377\u79ef\u6838\u4e2a\u6570\u901a\u8fc7filter\u8fdb\u884c\u8bbe\u7f6e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u6a21\u5757\u5c06\u7f16\u7801\u548c\u89e3\u7801\u90e8\u5206\u8fdb\u884c\u7ec4\u5408\uff1a # \u4e3b\u5e72\u7f51\u7edc class UNet ( nn . Module ): def __init__ ( self ): super ( UNet , self ) . __init__ () # 4\u6b21\u4e0b\u91c7\u6837 self . C1 = Conv ( 3 , 64 ) self . D1 = DownSampling ( 64 ) self . C2 = Conv ( 64 , 128 ) self . D2 = DownSampling ( 128 ) self . C3 = Conv ( 128 , 256 ) self . D3 = DownSampling ( 256 ) self . C4 = Conv ( 256 , 512 ) self . D4 = DownSampling ( 512 ) self . C5 = Conv ( 512 , 1024 ) # 4\u6b21\u4e0a\u91c7\u6837 self . U1 = UpSampling ( 1024 ) self . C6 = Conv ( 1024 , 512 ) self . U2 = UpSampling ( 512 ) self . C7 = Conv ( 512 , 256 ) self . U3 = UpSampling ( 256 ) self . C8 = Conv ( 256 , 128 ) self . U4 = UpSampling ( 128 ) self . C9 = Conv ( 128 , 64 ) self . Th = torch . nn . Softmax () self . pred = torch . nn . Conv2d ( 64 , 4 , 3 , 1 , 1 ) def forward ( self , x ): # \u4e0b\u91c7\u6837\u90e8\u5206 R1 = self . C1 ( x ) R2 = self . C2 ( self . D1 ( R1 )) R3 = self . C3 ( self . D2 ( R2 )) R4 = self . C4 ( self . D3 ( R3 )) Y1 = self . C5 ( self . D4 ( R4 )) # \u4e0a\u91c7\u6837\u90e8\u5206 # \u4e0a\u91c7\u6837\u7684\u65f6\u5019\u9700\u8981\u62fc\u63a5\u8d77\u6765 O1 = self . C6 ( self . U1 ( Y1 , R4 )) O2 = self . C7 ( self . U2 ( O1 , R3 )) O3 = self . C8 ( self . U3 ( O2 , R2 )) O4 = self . C9 ( self . U4 ( O3 , R1 )) # \u8f93\u51fa\u9884\u6d4b\uff0c\u8fd9\u91cc\u5927\u5c0f\u8ddf\u8f93\u5165\u662f\u4e00\u81f4\u7684 return self . Th ( self . pred ( O4 )) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\uff1a net = UNet () summary ( net , input_size = ( 3 , 256 , 256 ), batch_size = 1 ) \u67e5\u770b\u6a21\u578b\u7ed3\u6784\uff0c\u5982\u4e0b\u6240\u793a\uff1a ---------------------------------------------------------------- Layer ( type ) Output Shape Param # ================================================================ Conv2d - 1 [ 1 , 64 , 256 , 256 ] 1 , 792 BatchNorm2d - 2 [ 1 , 64 , 256 , 256 ] 128 LeakyReLU - 3 [ 1 , 64 , 256 , 256 ] 0 Conv2d - 4 [ 1 , 64 , 256 , 256 ] 36 , 928 BatchNorm2d - 5 [ 1 , 64 , 256 , 256 ] 128 LeakyReLU - 6 [ 1 , 64 , 256 , 256 ] 0 Conv - 7 [ 1 , 64 , 256 , 256 ] 0 Conv2d - 8 [ 1 , 64 , 128 , 128 ] 36 , 928 LeakyReLU - 9 [ 1 , 64 , 128 , 128 ] 0 DownSampling - 10 [ 1 , 64 , 128 , 128 ] 0 Conv2d - 11 [ 1 , 128 , 128 , 128 ] 73 , 856 BatchNorm2d - 12 [ 1 , 128 , 128 , 128 ] 256 LeakyReLU - 13 [ 1 , 128 , 128 , 128 ] 0 Conv2d - 14 [ 1 , 128 , 128 , 128 ] 147 , 584 BatchNorm2d - 15 [ 1 , 128 , 128 , 128 ] 256 LeakyReLU - 16 [ 1 , 128 , 128 , 128 ] 0 Conv - 17 [ 1 , 128 , 128 , 128 ] 0 Conv2d - 18 [ 1 , 128 , 64 , 64 ] 147 , 584 LeakyReLU - 19 [ 1 , 128 , 64 , 64 ] 0 DownSampling - 20 [ 1 , 128 , 64 , 64 ] 0 Conv2d - 21 [ 1 , 256 , 64 , 64 ] 295 , 168 BatchNorm2d - 22 [ 1 , 256 , 64 , 64 ] 512 LeakyReLU - 23 [ 1 , 256 , 64 , 64 ] 0 Conv2d - 24 [ 1 , 256 , 64 , 64 ] 590 , 080 BatchNorm2d - 25 [ 1 , 256 , 64 , 64 ] 512 LeakyReLU - 26 [ 1 , 256 , 64 , 64 ] 0 Conv - 27 [ 1 , 256 , 64 , 64 ] 0 Conv2d - 28 [ 1 , 256 , 32 , 32 ] 590 , 080 LeakyReLU - 29 [ 1 , 256 , 32 , 32 ] 0 DownSampling - 30 [ 1 , 256 , 32 , 32 ] 0 Conv2d - 31 [ 1 , 512 , 32 , 32 ] 1 , 180 , 160 BatchNorm2d - 32 [ 1 , 512 , 32 , 32 ] 1 , 024 LeakyReLU - 33 [ 1 , 512 , 32 , 32 ] 0 Conv2d - 34 [ 1 , 512 , 32 , 32 ] 2 , 359 , 808 BatchNorm2d - 35 [ 1 , 512 , 32 , 32 ] 1 , 024 LeakyReLU - 36 [ 1 , 512 , 32 , 32 ] 0 Conv - 37 [ 1 , 512 , 32 , 32 ] 0 Conv2d - 38 [ 1 , 512 , 16 , 16 ] 2 , 359 , 808 LeakyReLU - 39 [ 1 , 512 , 16 , 16 ] 0 DownSampling - 40 [ 1 , 512 , 16 , 16 ] 0 Conv2d - 41 [ 1 , 1024 , 16 , 16 ] 4 , 719 , 616 BatchNorm2d - 42 [ 1 , 1024 , 16 , 16 ] 2 , 048 LeakyReLU - 43 [ 1 , 1024 , 16 , 16 ] 0 Conv2d - 44 [ 1 , 1024 , 16 , 16 ] 9 , 438 , 208 BatchNorm2d - 45 [ 1 , 1024 , 16 , 16 ] 2 , 048 LeakyReLU - 46 [ 1 , 1024 , 16 , 16 ] 0 Conv - 47 [ 1 , 1024 , 16 , 16 ] 0 Conv2d - 48 [ 1 , 512 , 32 , 32 ] 524 , 800 UpSampling - 49 [ 1 , 1024 , 32 , 32 ] 0 Conv2d - 50 [ 1 , 512 , 32 , 32 ] 4 , 719 , 104 BatchNorm2d - 51 [ 1 , 512 , 32 , 32 ] 1 , 024 LeakyReLU - 52 [ 1 , 512 , 32 , 32 ] 0 Conv2d - 53 [ 1 , 512 , 32 , 32 ] 2 , 359 , 808 BatchNorm2d - 54 [ 1 , 512 , 32 , 32 ] 1 , 024 LeakyReLU - 55 [ 1 , 512 , 32 , 32 ] 0 Conv - 56 [ 1 , 512 , 32 , 32 ] 0 Conv2d - 57 [ 1 , 256 , 64 , 64 ] 131 , 328 UpSampling - 58 [ 1 , 512 , 64 , 64 ] 0 Conv2d - 59 [ 1 , 256 , 64 , 64 ] 1 , 179 , 904 BatchNorm2d - 60 [ 1 , 256 , 64 , 64 ] 512 LeakyReLU - 61 [ 1 , 256 , 64 , 64 ] 0 Conv2d - 62 [ 1 , 256 , 64 , 64 ] 590 , 080 BatchNorm2d - 63 [ 1 , 256 , 64 , 64 ] 512 LeakyReLU - 64 [ 1 , 256 , 64 , 64 ] 0 Conv - 65 [ 1 , 256 , 64 , 64 ] 0 Conv2d - 66 [ 1 , 128 , 128 , 128 ] 32 , 896 UpSampling - 67 [ 1 , 256 , 128 , 128 ] 0 Conv2d - 68 [ 1 , 128 , 128 , 128 ] 295 , 040 BatchNorm2d - 69 [ 1 , 128 , 128 , 128 ] 256 LeakyReLU - 70 [ 1 , 128 , 128 , 128 ] 0 Conv2d - 71 [ 1 , 128 , 128 , 128 ] 147 , 584 BatchNorm2d - 72 [ 1 , 128 , 128 , 128 ] 256 LeakyReLU - 73 [ 1 , 128 , 128 , 128 ] 0 Conv - 74 [ 1 , 128 , 128 , 128 ] 0 Conv2d - 75 [ 1 , 64 , 256 , 256 ] 8 , 256 UpSampling - 76 [ 1 , 128 , 256 , 256 ] 0 Conv2d - 77 [ 1 , 64 , 256 , 256 ] 73 , 792 BatchNorm2d - 78 [ 1 , 64 , 256 , 256 ] 128 LeakyReLU - 79 [ 1 , 64 , 256 , 256 ] 0 Conv2d - 80 [ 1 , 64 , 256 , 256 ] 36 , 928 BatchNorm2d - 81 [ 1 , 64 , 256 , 256 ] 128 LeakyReLU - 82 [ 1 , 64 , 256 , 256 ] 0 Conv - 83 [ 1 , 64 , 256 , 256 ] 0 Conv2d - 84 [ 1 , 4 , 256 , 256 ] 2 , 308 Softmax - 85 [ 1 , 4 , 256 , 256 ] 0 ================================================================ Total params : 32 , 091 , 204 Trainable params : 32 , 091 , 204 Non - trainable params : 0 ---------------------------------------------------------------- Input size ( MB ): 0.75 Forward / backward pass size ( MB ): 1083.00 Params size ( MB ): 122.42 Estimated Total Size ( MB ): 1206.17 ---------------------------------------------------------------- \u8fdb\u884c\u53ef\u89c6\u5316\u3002","title":"1.3.3 \u6a21\u578b\u6784\u5efa"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#14","text":"","title":"1.4 \u6a21\u578b\u8bad\u7ec3"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#141","text":"\u8bfb\u53d6\u8bad\u7ec3\u96c6\u6570\u636e\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\uff1a # \u83b7\u53d6\u8bad\u7ec3\u96c6 train_dataset = OxfordPets ( input_img_paths , target_img_paths ) # \u4f7f\u7528dataloader\u83b7\u53d6batch\u8bad\u7ec3\u6570\u636e train_dataloader = DataLoader ( train_dataset , batch_size = batch_size )","title":"1.4.1 \u6570\u636e\u83b7\u53d6"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#142","text":"# \u5b66\u4e60\u7387 learning_rate = 1e-3 # \u8bad\u7ec3\u8f6e\u6570 num_epochs = 1 # \u4f18\u5316\u7b97\u6cd5Adam = RMSProp + Momentum optimizer = torch . optim . Adam ( net . parameters (), lr = learning_rate ) # \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 loss_fn = torch . nn . CrossEntropyLoss ()","title":"1.4.2 \u6a21\u578b\u8bad\u7ec3\u53c2\u6570\u8bbe\u7f6e"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#143","text":"\u8bbe\u7f6eepoch\u5bf9\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u6307\u660e\u9a8c\u8bc1\u96c6\u6570\u636e\uff1a # \u5b9a\u4e49\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b:\u6307\u5b9a\u6570\u636e\u96c6\uff0c\u4f18\u5316\u5668\uff0c\u635f\u5931\u51fd\u6570\u548c\u8f6e\u6b21 def train ( data_loader = train_dataloader , optimizer = optimizer , loss_fn = loss_fn , epochs = num_epochs ): # \u904d\u5386\u6bcf\u4e00\u4e2a\u8f6e\u6b21\u8fdb\u884c\u8bad\u7ec3 for epoch in range ( epochs ): print ( 'current epoch = {} ' . format ( epoch )) # \u635f\u5931\u503c\u7684\u548c train_loss_sum = 0 # \u8fed\u4ee3\u6b21\u6570 iter = 0 for i , ( images , labels ) in enumerate ( data_loader ): # \u6a21\u578b\u5b9a\u4e49\u4e3a\u8bad\u7ec3\u6a21\u5f0f net . train () # \u5bf9\u6570\u636e\u8fdb\u884c\u9884\u6d4b print ( images . shape ) outputs = net ( images ) # \u8ba1\u7b97\u6a21\u578b\u7684\u635f\u5931 loss = loss_fn ( outputs , labels ) # \u5728\u505a\u53cd\u5411\u4f20\u64ad\u524d\u5148\u6e05\u9664\u7f51\u7edc\u72b6\u6001 optimizer . zero_grad () # \u635f\u5931\u503c\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u8fed\u4ee3\u66f4\u65b0 optimizer . step () # \u6c42\u635f\u5931\u7684\u548c train_loss_sum += loss . item () iter += 1 print ( 'epoch: {0} , loss: {1:.4f} ' . format ( epoch , train_loss_sum / ( iter + 0.01 ))) torch . save ( net , 'unet.pth' ) print ( '------------finish training-------------' ) \u8bad\u7ec3\u8fc7\u7a0b\u5982\u4e0b\uff1a current epoch = 0 epoch : 0 , loss : 0.9539 epoch : 1 , loss : 0.5145 epoch : 2 , loss : 0.4318 epoch : 3 , loss : 0.4027 epoch : 4 , loss : 0.3551 epoch : 5 , loss : 0.3226 epoch : 6 , loss : 0.3195 epoch : 7 , loss : 0.2789 epoch : 8 , loss : 0.2599 epoch : 9 , loss : 0.2440 epoch : 10 , loss : 0.2297 epoch : 11 , loss : 0.2179 epoch : 12 , loss : 0.2081 epoch : 13 , loss : 0.2081 epoch : 14 , loss : 0.2081 \u968f\u7740\u8fed\u4ee3\u6b21\u6570\u7684\u589e\u52a0\uff0c\u8bad\u7ec3\u96c6\u635f\u5931\u51fd\u6570\u53d8\u6362\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"1.4.3 \u6a21\u578b\u8bad\u7ec3"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/03-Unet%E6%A1%88%E4%BE%8B/#15","text":"\u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5e76\u8bbe\u7f6e\u4e3a\u9a8c\u8bc1\u6a21\u578b # \u5bfc\u5165\u5de5\u5177\u5305 import glob import os from PIL import Image # \u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u53c2\u6570 model = torch . load ( \"unet.pth\" , map_location = torch . device ( 'cpu' )) model . eval () \u83b7\u53d6\u8981\u9884\u6d4b\u7684\u56fe\u7247 from PIL import Image import torchvision.transforms as T img_int = Image . open ( 'dog.jpg' ) img = transform ( img_int ) . unsqueeze ( dim = 0 ) \u8fdb\u884c\u6a21\u578b\u9884\u6d4b predict = model ( img ) \u9884\u6d4b\u7ed3\u679c\u663e\u793a\u7684 import torchvision.transforms.functional as F # \u56fe\u50cf\u663e\u793a # \u83b7\u53d6\u5230\u6837\u672c\u7684\u9884\u6d4b\u7ed3\u679c mask = torch . argmax ( predict [ 0 ], axis = 0 ) # \u7ef4\u5ea6\u8c03\u6574 mask = np . uint8 ( np . expand_dims ( mask , axis =- 1 )) # \u8f6c\u6362\u4e3a\u56fe\u50cf\uff0c\u5e76\u8fdb\u884c\u663e\u793a mask = ImageOps . autocontrast ( F . to_pil_image ( mask )) # \u8fdb\u884c\u56fe\u50cf\u7684\u5c55\u793a plt . imshow ( mask , cmap = 'gray' ) \u603b\u7ed3 \u4e86\u89e3\u5ba0\u7269\u56fe\u50cf\u5206\u5272\u6570\u636e\u96c6 \u5ba0\u7269\u6570\u636e\u96c6\u8fdb\u884c\u5206\u5272\u65f6\u53ea\u6709\u524d\u666f\u3001\u80cc\u666f\u548c\u4e0d\u786e\u5b9a\u7684\u50cf\u7d20\u4e09\u79cd \u80fd\u591f\u5b8c\u6210UNet\u7f51\u7edc\u7684\u642d\u5efa \u642d\u5efa\u7f16\u7801\uff0c\u89e3\u7801\u90e8\u5206\u7684\u7f51\u7edc\uff0c\u5e76\u5c06\u4e24\u8005\u7ed3\u5408\u5728\u4e00\u8d77\u6784\u5efaUnet\u7f51\u7edc \u80fd\u591f\u5b8c\u6210UNet\u7f51\u7edc\u7684\u8bad\u7ec3\u4e0e\u9884\u6d4b","title":"1.5 \u6a21\u578b\u9884\u6d4b"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/","text":"3.4 Mask RCNN \u00b6 \u5b66\u4e60\u76ee\u6807 \u8bf4\u660eMask RCNN\u7684\u7ed3\u6784\u7279\u70b9 \u638c\u63e1Mask RCNN\u7684RoIAlign\u65b9\u6cd5 \u638c\u63e1Mask RCNN\u7684mask\u539f\u7406 \u77e5\u9053Mask RCNN\u7684\u635f\u5931\u51fd\u6570 \u4e0a\u56fe\u662fMaskRCNN\u9884\u6d4b\u7684\u7ed3\u679c 1.1 Mask RCNN\u6d41\u7a0b \u00b6 Mask-RCNN\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5206\u5272\uff08Instance segmentation\uff09\u7f51\u7edc\u6846\u67b6\uff0c\u901a\u8fc7\u589e\u52a0\u4e0d\u540c\u7684\u5206\u652f\u53ef\u4ee5\u5b8c\u6210\u76ee\u6807\u5206\u7c7b\uff0c\u76ee\u6807\u68c0\u6d4b\uff0c\u5b9e\u4f8b\u5206\u5272\u7b49\u591a\u79cd\u4efb\u52a1\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5c31\u662f\u5728Faster-RCNN\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u5206\u652f\uff0c\u5728\u5b9e\u73b0\u76ee\u6807\u68c0\u6d4b\u7684\u540c\u65f6\u5206\u5272\u76ee\u6807\u50cf\u7d20\uff0c\u5176\u5206\u652f\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u63a9\u7801\u5206\u652f\u662f\u4f5c\u7528\u4e8e\u6bcf\u4e2aRoI\u533a\u57df\uff08\u5019\u9009\u533a\u57df\uff09\uff0c\u4ee5\u50cf\u7d20\u5230\u50cf\u7d20\u7684\u65b9\u5f0f\u9884\u6d4b\u5206\u5272\u63a9\u7801\uff0c\u5f97\u5230\u5b9e\u4f8b\u5206\u5272\u7684\u7ed3\u679c\u3002 Mask RCNN\u7684\u6574\u4f53\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6574\u4f53\u7684\u6d41\u7a0b\u662f\uff1a \u8f93\u5165\u8981\u5904\u7406\u7684\u56fe\u7247\u3002 \u5c06\u56fe\u7247\u9001\u5165\u5230CNN\u7279\u5f81\u63d0\u53d6\u7f51\u7edc\u5f97\u5230\u7279\u5f81\u56fe\u3002 \u7136\u540e\u5bf9\u7279\u5f81\u56fe\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u4f4d\u7f6e\u8bbe\u5b9a\u56fa\u5b9a\u4e2a\u6570\u7684ROI\uff08\u5bf9\u5e94\u4e8e\u5728FasterRCNN\u4e2d\u7684Anchor\uff09\uff0c\u7136\u540e\u5c06ROI\u533a\u57df\u9001\u5165RPN\u7f51\u7edc\u8fdb\u884c\u4e8c\u5206\u7c7b(\u524d\u666f\u548c\u80cc\u666f)\u4ee5\u53ca\u5750\u6807\u56de\u5f52\uff0c\u4ee5\u83b7\u5f97\u7cbe\u70bc\u540e\u7684ROI\u533a\u57df\uff08\u5bf9\u5e94\u4e8eFasterRCNN\u4e2d\u7684\u5019\u9009\u533a\u57df\uff09\u3002 \u5bf9\u4e0a\u4e2a\u6b65\u9aa4\u4e2d\u83b7\u5f97\u7684ROI\u533a\u57df\u6267\u884cROIAlign\u64cd\u4f5c\uff08\u662f\u5bf9ROIPooling\u7684\u6539\u8fdb\uff09\uff0c\u5373\u5148\u5c06\u539f\u56fe\u548cfeature map\u7684pixel\u5bf9\u5e94\u8d77\u6765\uff0c\u7136\u540e\u5c06feature map\u548c\u56fa\u5b9a\u5927\u5c0f\u7684feature\u5bf9\u5e94\u8d77\u6765\u3002 \u6700\u540e\u5bf9\u8fd9\u4e9bROI\u533a\u57df\u8fdb\u884c\u591a\u7c7b\u522b\u5206\u7c7b\uff0c\u5019\u9009\u6846\u56de\u5f52\u548c\u5f15\u5165FCN\u751f\u6210Mask\uff0c\u5b8c\u6210\u5b9e\u4f8b\u5206\u5272\u4efb\u52a1\u3002 \u6574\u4e2a\u8fc7\u7a0b\u4e2d\u4e0eFasterRCNN\u4e2d\u4e0d\u540c\u7684\u662fROIAlign\u548c\u5206\u5272\u5206\u652f\uff0c\u5176\u4ed6\u90fd\u662f\u76f8\u540c\u7684\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u7740\u91cd\u4ecb\u7ecd\u8fd9\u4e24\u4e2a\u5185\u5bb9\u3002 1.2 ROIAlign \u00b6 FasterRCNN\u4e2d\u7684ROIPooling\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a \u5b83\u7684\u6d41\u7a0b\u662f\uff1a \u8f93\u5165\u56fe\u7247\u7684\u5927\u5c0f\u4e3a800x800\uff0c\u5176\u4e2d\u72d7\u8fd9\u4e2a\u76ee\u6807\u6846\u7684\u5927\u5c0f\u4e3a665x665\uff0c\u7ecf\u8fc7VGG16\u7f51\u7edc\u4e4b\u540e\u83b7\u5f97\u7684\u7279\u5f81\u56fe\u5c3a\u5bf8\u4e3a800/32x800/32=25x25\uff0c\u5176\u4e2d32\u4ee3\u8868VGG16\u4e2d\u76845\u6b21\u4e0b\u91c7\u6837\uff08\u6b65\u957f\u4e3a2\uff09\u64cd\u4f5c\u3002\u90a3\u4e48\uff0c\u5bf9\u4e8e\u72d7\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u5c06\u5176\u5bf9\u5e94\u5230\u7279\u5f81\u56fe\u4e0a\u5f97\u5230\u7684\u7ed3\u679c\u662f665/32x665/32=20.78x20.78=20x20\uff0c\u56e0\u4e3a\u5750\u6807\u8981\u4fdd\u7559\u6574\u6570\u6240\u4ee5\u8fd9\u91cc\u5f15\u5165\u4e86\u7b2c\u4e00\u4e2a\u91cf\u5316\u8bef\u5dee\u5373\u820d\u5f03\u4e86\u76ee\u6807\u6846\u5728\u7279\u5f81\u56fe\u4e0a\u5bf9\u5e94\u957f\u5bbd\u7684\u6d6e\u70b9\u6570\u90e8\u5206\u3002 \u63a5\u4e0b\u6765\u9700\u8981\u5c06\u8fd9\u4e2a20x20\u7684ROI\u533a\u57df\u6620\u5c04\u4e3a7x7\u7684ROI\u7279\u5f81\u56fe\uff0c\u6839\u636eROI Pooling\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u5176\u7ed3\u679c\u5c31\u662f20/7x20/7=2.86x2.86\uff0c\u540c\u6837\u6267\u884c\u53d6\u6574\u64cd\u4f5c\u64cd\u4f5c\u540eROI\u7279\u5f81\u533a\u57df\u7684\u5c3a\u5bf8\u4e3a2x2\uff0c\u8fd9\u91cc\u5f15\u5165\u4e86\u7b2c\u4e8c\u6b21\u91cf\u5316\u8bef\u5dee\u3002 \u4ece\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e24\u6b21\u91cf\u5316\u8bef\u5dee\u4f1a\u5bfc\u81f4\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u548c\u7279\u5f81\u56fe\u4e2d\u7684\u50cf\u7d20\u8fdb\u884c\u5bf9\u5e94\u65f6\u51fa\u73b0\u504f\u5dee\uff0c\u4f8b\u5982\u4e0a\u9762\u5c062.86\u91cf\u5316\u4e3a2\u7684\u65f6\u5019\u5c31\u5f15\u5165\u4e860.86\u7684\u504f\u5dee\uff0c\u8fd9\u4e2a\u504f\u5dee\u6620\u5c04\u56de\u539f\u56fe\u5c31\u662f0.86x32=27.52\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u50cf\u7d20\u504f\u5dee\u662f\u5f88\u5927\u7684\uff0c\u800c\u4e14\u8fd9\u4ec5\u4ec5\u8003\u8651\u4e86\u7b2c\u4e8c\u6b21\u7684\u91cf\u5316\u8bef\u5dee\uff0c\u6240\u4ee5\u8fd9\u4f1a\u5f71\u54cd\u6574\u4e2a\u7b97\u6cd5\u7684\u6027\u80fd\u3002 \u4e3a\u4e86\u7f13\u89e3ROI Pooling\u91cf\u5316\u8bef\u5dee\u8fc7\u5927\u7684\u95ee\u9898\uff0cMaskRCNN\u63d0\u51fa\u4e86ROIAlign\uff0cROIAlign\u6ca1\u6709\u4f7f\u7528\u91cf\u5316\u64cd\u4f5c\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u53cc\u7ebf\u6027\u63d2\u503c\u4f30\u8ba1\u975e\u6574\u6570\u70b9\u7684\u50cf\u7d20\u503c\u3002\u8fd9\u4e00\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u9488\u5bf9\u4e0a\u56fe\u7684\u6d41\u7a0b\u662f\uff1a \u8f93\u5165\u56fe\u7247\u7684\u5927\u5c0f\u4e3a800x800\uff0c\u5176\u4e2d\u72d7\u8fd9\u4e2a\u76ee\u6807\u6846\u7684\u5927\u5c0f\u4e3a665x665\uff0c\u7ecf\u8fc7VGG16\u7f51\u7edc\u4e4b\u540e\u83b7\u5f97\u7684\u7279\u5f81\u56fe\u5c3a\u5bf8\u4e3a800/32x800/32=25x25\uff0c\u5176\u4e2d32\u4ee3\u8868VGG16\u4e2d\u76845\u6b21\u4e0b\u91c7\u6837\uff08\u6b65\u957f\u4e3a2\uff09\u64cd\u4f5c\u3002\u90a3\u4e48\uff0c\u5bf9\u4e8e\u72d7\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u5c06\u5176\u5bf9\u5e94\u5230\u7279\u5f81\u56fe\u4e0a\u5f97\u5230\u7684\u7ed3\u679c\u662f665/32x665/32=20.78x20.78\uff0c\u6b64\u65f6\uff0c\u6ca1\u6709\u50cfRoiPooling\u90a3\u6837\u5c31\u884c\u53d6\u6574\u64cd\u4f5c\uff0c\u800c\u662f\u4fdd\u7559\u6d6e\u70b9\u6570\u3002 \u63a5\u4e0b\u6765\u9700\u8981\u5c06\u8fd9\u4e2a20.78x20.78\u7684ROI\u533a\u57df\u6620\u5c04\u4e3a7x7\u7684ROI\u7279\u5f81\u56fe\uff0c\u7ed3\u679c\u5c31\u662f20.78/7x20.78/7=2.97x2.97\uff0c\u5373\u6bcf\u4e2a\u5c0f\u533a\u57df\u7684\u5927\u5c0f\u4e3a2.97x2.97\u3002 \u5047\u5b9a\u6bcf\u4e2a\u5c0f\u533a\u57df\u91c7\u6837\u70b9\u6570\u4e3a4\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a2.97*2.97\u7684\u5c0f\u533a\u57df\uff0c\u5e73\u5206\u56db\u4efd\uff0c\u6bcf\u4e00\u4efd\u53d6\u5176\u4e2d\u5fc3\u70b9\u4f4d\u7f6e\uff0c\u800c\u4e2d\u5fc3\u70b9\u4f4d\u7f6e\u7684\u50cf\u7d20\uff0c\u91c7\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u6cd5\u8fdb\u884c\u8ba1\u7b97\uff0c\u8fd9\u6837\uff0c\u5c31\u4f1a\u5f97\u5230\u56db\u4e2a\u70b9\u7684\u50cf\u7d20\u503c\uff0c\u5982\u4e0b\u56fe\uff1a \u4e0a\u56fe\u4e2d\uff0c\u56db\u4e2a\u7ea2\u8272\u53c9\u53c9\u2018\u00d7\u2019\u7684\u50cf\u7d20\u503c\u662f\u901a\u8fc7\u53cc\u7ebf\u6027\u63d2\u503c\u7b97\u6cd5\u8ba1\u7b97\u5f97\u5230\u7684\u3002 \u6700\u540e\uff0c\u53d6\u56db\u4e2a\u50cf\u7d20\u503c\u4e2d\u6700\u5927\u503c\uff08\u6700\u5927\u6c60\u5316\uff09\u4f5c\u4e3a\u8fd9\u4e2a\u5c0f\u533a\u57df(\u5373\uff1a2.97x2.97\u5927\u5c0f\u7684\u533a\u57df)\u7684\u50cf\u7d20\u503c\uff0c\u5982\u6b64\u7c7b\u63a8\uff0c\u540c\u6837\u662f49\u4e2a\u5c0f\u533a\u57df\u5f97\u523049\u4e2a\u50cf\u7d20\u503c\uff0c\u7ec4\u62107x7\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 \u53cc\u7ebf\u6027\u63d2\u503c\u662f\u4e00\u79cd\u56fe\u50cf\u7f29\u653e\u586b\u5145\u7b97\u6cd5\uff0c\u5b83\u5145\u5206\u7684\u5229\u7528\u4e86\u539f\u56fe\u4e2d\u865a\u62df\u70b9\uff08\u6bd4\u598220.56\u8fd9\u4e2a\u6d6e\u70b9\u6570\uff0c\u50cf\u7d20\u4f4d\u7f6e\u4e0d\u662f\u6574\u6570\u503c\uff0c\u800c\u662f\u6d6e\u70b9\u503c\uff09\u56db\u5468\u7684\u771f\u5b9e\u5b58\u5728\u7684\u50cf\u7d20\u503c\u6765\u5171\u540c\u51b3\u5b9a\u76ee\u6807\u56fe\u4e2d\u7684\u4e00\u4e2a\u50cf\u7d20\u503c\uff0c\u5373\u53ef\u4ee5\u5c0620.56\u8fd9\u4e2a\u865a\u62df\u7684\u4f4d\u7f6e\u70b9\u5bf9\u5e94\u7684\u50cf\u7d20\u503c\u4f30\u8ba1\u51fa\u6765\u3002 1.3 \u7f51\u7edc\u7ed3\u6784 \u00b6 \u4e0a\u8ff0\u5df2\u7ecf\u4ecb\u7ecd\u4e86Mask-RCNN \u7684\u7ed3\u6784\u4e0eFasterRCNN\u662f\u76f8\u540c\u7684\uff0c\u589e\u52a0\u4e86\u4e00\u4e2a\u5206\u5272\u7684\u5934\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u9aa8\u5e72\u7f51\u7edcResNet-FPN\u7528\u4e8e\u7279\u5f81\u63d0\u53d6\uff0cRPN\u7f51\u7edc\u8fdb\u884c\u5019\u9009\u533a\u57df\u7684\u63d0\u53d6\uff0cROIAlign\u83b7\u53d6\u56fa\u5b9a\u5927\u5c0f\u7684\u7279\u5f81\u56fe\uff0c\u5934\u90e8\u7f51\u7edc\u5305\u62ec\u8fb9\u754c\u6846\u8bc6\u522b\uff08\u5206\u7c7b\u548c\u56de\u5f52\uff09+mask\u9884\u6d4b\uff0c\u5177\u4f53\u5982\u4e0b\u6240\u793a\uff1a mask\u5206\u652f\u662f\u4e00\u4e2a\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u5b9e\u9645\u5de5\u4f5c\u4e2d\u6211\u4eec\u4f7f\u7528\u53f3\u56fe\u8f83\u591a\u4e00\u4e9b\uff0c\u5176\u4e2d\u4f7f\u75282x2\u7684\u53cd\u5377\u79ef\u8fdb\u884c\u4e0a\u91c7\u6837\u3002\u9884\u6d4b\u65f6 mask \u5206\u652f\u8f93\u51fa\u7ed3\u679c resize \u5230 RoI \u7684\u5927\u5c0f, \u7136\u540e\u5e94\u7528 0.5 \u7684\u9608\u503c\u8fdb\u884c\u4e8c\u503c\u5316\u5f97\u5230\u6700\u7ec8\u7684\u5206\u5272\u7ed3\u679c\u3002 1.4 \u635f\u5931\u51fd\u6570 \u00b6 Mask-RCNN\u5728Faster-RCNN\u7684\u57fa\u7840\u4e0a\u591a\u4e86\u4e00\u4e2aROIAligin\u548cMask\u9884\u6d4b\u5206\u652f\uff0c\u56e0\u6b64Mask R-CNN\u7684\u635f\u5931\u4e5f\u662f\u591a\u4efb\u52a1\u635f\u5931\uff1a L_{cls} L_{cls} \u548c L_{box} L_{box} \u4e0efaster rcnn\u7684\u5b9a\u4e49\u6ca1\u6709\u533a\u522b\u3002\u5177\u4f53\u6765\u770b\u4e0b L_{mask} L_{mask} \u3002 Mask\u5206\u652f\u5bf9\u6bcf\u4e2aROI\u533a\u57df\u4ea7\u751f\u4e00\u4e2amxmxK\u7684\u8f93\u51fa\u7279\u5f81\u56fe\uff0c\u5373K\u4e2a\u7684\u4e8c\u503c\u63a9\u819c\u56fe\u50cf\uff0c\u5176\u4e2dK\u4ee3\u8868\u76ee\u6807\u79cd\u7c7b\u6570\u3002\u5bf9\u4e8e\u9884\u6d4b\u7684\u4e8c\u503c\u63a9\u819c\u8f93\u51fa\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u5e94\u7528 sigmoid \u51fd\u6570\uff0c\u6574\u4f53\u635f\u5931\u5b9a\u4e49\u4e3a\u5e73\u5747\u4e8c\u503c\u4ea4\u53c9\u635f\u5931\u71b5\u3002\u5bf9\u4e8e\u771f\u5b9e\u7c7b\u522b\u4e3a\ud835\udc58\u7684\ud835\udc45\ud835\udc5c\ud835\udc3c\uff0c\u4ec5\u5728\u7b2ck\u4e2a\u63a9\u7801\u4e0a\u8ba1\u7b97\u635f\u5931\uff08\u5176\u4ed6\u63a9\u7801\u8f93\u51fa\u4e0d\u8ba1\u5165\uff09\u3002\u8fd9\u6837\u505a\u89e3\u8026\u4e86\u63a9\u819c\u548c\u79cd\u7c7b\u9884\u6d4b\u3002 \u4e0d\u50cfFCN\u7684\u505a\u6cd5\uff0c\u5728\u6bcf\u4e2a\u50cf\u7d20\u70b9\u4e0a\u5e94\u7528 softmax \u51fd\u6570\uff0c\u6574\u4f53\u91c7\u7528\u7684\u591a\u4efb\u52a1\u4ea4\u53c9\u71b5\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u7c7b\u95f4\u7ade\u4e89\uff0c\u6700\u7ec8\u5bfc\u81f4\u5206\u5272\u6548\u679c\u5dee\u3002 1.5 \u4f7f\u7528MaskRCNN\u8fdb\u884c\u56fe\u50cf\u5206\u5272 \u00b6 \u5728\u8fd9\u4e00\u8282\u4e2d\u7684\u6211\u4eec\u5c06\u4f7f\u7528pytorch\u4e2d\u7684\u9884\u8bad\u7ec3\u7684MaskRCNN\u6a21\u578b\u8fdb\u884c\u56fe\u50cf\u5206\u5272\uff0c\u8be5\u9884\u8bad\u7ec3\u6a21\u578b\u6709COCO\u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3\u7684\uff0c\u53ef\u4ee5\u8fdb\u884c80\u4e2a\u7c7b\u522b\u76ee\u6807\u7684\u5206\u5272\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u4e24\u5e45\u56fe\u50cf\u8fdb\u884c\u6f14\u793a\uff1a 1.5.1 \u9884\u8bad\u7ec3\u6a21\u578b \u00b6 mask R-CNN\u6a21\u578b\u7684\u8f93\u5165\u662f\u56fe\u50cf\uff0c\u5e76\u4e14\u9700\u8981\u8f6c\u6362\u4e3a\u5f20\u91cf\u7684\u5f62\u5f0f\uff0c\u6bcf\u4e2a\u8f93\u5165\u6570\u636e\u7684\u5f62\u72b6\u4e3a\uff08batch\uff0cc\uff0ch\uff0cw\uff09\uff0c\u50cf\u7d20\u53d6\u503c\u57280-1\u8303\u56f4\u5185\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u8fdb\u884c\u5f52\u4e00\u5316\u6216\u6807\u51c6\u5316\uff0c\u56fe\u50cf\u7684\u5927\u5c0f\u6ca1\u6709\u8981\u6c42\u3002\u6a21\u578b\u7684\u8f93\u51fa\u5305\u62ec\uff1a\u76ee\u6807\u6846\u7684\u5750\u6807\uff0c\u76ee\u6807\u7c7b\u522b\u7684id \u53ca\u76f8\u5e94\u7684\u7c7b\u522b\u5206\u6570\uff0c\u6bcf\u4e2a\u76ee\u6807\u7684\u5206\u5272\u7ed3\u679c\u3002\u9996\u5148\u6211\u4eec\u8fdb\u884c\u6a21\u578b\u5b9e\u4f8b\u5316\uff1a from torchvision.models.detection import maskrcnn_resnet50_fpn model = maskrcnn_resnet50_fpn ( pretrained = True ) \u5f53torchvision<0.12\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u52a0\u8f7d\uff0c\u5f53torchvision>0.12\u65f6\uff0c\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a from torchvision.models.detection import maskrcnn_resnet50_fpn , MaskRCNN_ResNet50_FPN_Weights # \u52a0\u8f7d\u6a21\u578b\u53c2\u6570 weights = MaskRCNN_ResNet50_FPN_Weights . DEFAULT # \u52a0\u8f7d\u6a21\u578b model = maskrcnn_resnet50_fpn ( weights = weights , progress = False ) \u5728\u7b2c\u4e00\u6b21\u52a0\u8f7d\u65f6\uff0c\u4f1a\u4e0b\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u3002\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u5c06\u6a21\u578b\u8bbe\u4e3a\u9a8c\u8bc1\u6a21\u5f0f\uff0c\u5982\u4e0b\u6240\u793a\uff1a model . eval () \u5728\u8fd9\u91cc\u6211\u4eec\u8981\u770b\u4e0b\u7f51\u7edc\u7684\u7ed3\u6784\uff1a MaskRCNN ( ( transform ): GeneralizedRCNNTransform ( Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]) Resize ( min_size = ( 800 ,), max_size = 1333 , mode = 'bilinear' ) ) ( backbone ): BackboneWithFPN ( ( body ): IntermediateLayerGetter ( ( conv1 ): Conv2d ( 3 , 64 , kernel_size = ( 7 , 7 ), stride = ( 2 , 2 ), padding = ( 3 , 3 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ( maxpool ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 1 , dilation = 1 , ceil_mode = False ) ( layer1 ): Sequential ( ( 0 ): Bottleneck ( ( conv1 ): Conv2d ( 64 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): FrozenBatchNorm2d ( 256 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( 1 ): FrozenBatchNorm2d ( 256 , eps = 0.0 ) ) ) ( 1 ): Bottleneck ( ( conv1 ): Conv2d ( 256 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): FrozenBatchNorm2d ( 256 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ) ( 2 ): Bottleneck ( ( conv1 ): Conv2d ( 256 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): FrozenBatchNorm2d ( 256 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ) ) ( layer2 ): Sequential ( ...... ) ( layer3 ): Sequential ( ...... ) ( layer4 ): Sequential ( ...... ) ) ( fpn ): FeaturePyramidNetwork ( ( inner_blocks ): ModuleList ( ( 0 ): Conv2d ( 256 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 1 ): Conv2d ( 512 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 2 ): Conv2d ( 1024 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 3 ): Conv2d ( 2048 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ) ( layer_blocks ): ModuleList ( ( 0 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( 1 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( 2 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( 3 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ) ( extra_blocks ): LastLevelMaxPool () ) ) ( rpn ): RegionProposalNetwork ( ( anchor_generator ): AnchorGenerator () ( head ): RPNHead ( ( conv ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( cls_logits ): Conv2d ( 256 , 3 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( bbox_pred ): Conv2d ( 256 , 12 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ) ) ( roi_heads ): RoIHeads ( ( box_roi_pool ): MultiScaleRoIAlign ( featmap_names = [ '0' , '1' , '2' , '3' ], output_size = ( 7 , 7 ), sampling_ratio = 2 ) ( box_head ): TwoMLPHead ( ( fc6 ): Linear ( in_features = 12544 , out_features = 1024 , bias = True ) ( fc7 ): Linear ( in_features = 1024 , out_features = 1024 , bias = True ) ) ( box_predictor ): FastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 91 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 364 , bias = True ) ) ( mask_roi_pool ): MultiScaleRoIAlign ( featmap_names = [ '0' , '1' , '2' , '3' ], output_size = ( 14 , 14 ), sampling_ratio = 2 ) ( mask_head ): MaskRCNNHeads ( ( mask_fcn1 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( relu1 ): ReLU ( inplace = True ) ( mask_fcn2 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( relu2 ): ReLU ( inplace = True ) ( mask_fcn3 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( relu3 ): ReLU ( inplace = True ) ( mask_fcn4 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( relu4 ): ReLU ( inplace = True ) ) ( mask_predictor ): MaskRCNNPredictor ( ( conv5_mask ): ConvTranspose2d ( 256 , 256 , kernel_size = ( 2 , 2 ), stride = ( 2 , 2 )) ( relu ): ReLU ( inplace = True ) ( mask_fcn_logits ): Conv2d ( 256 , 91 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ) ) ) \u4e0eFasterRCNN\u7684\u7f51\u7edc\u7ed3\u6784\u76f8\u6bd4\uff0c\u591a\u4e86\u4e00\u4e2amask_head\uff0c\u7528\u4e8e\u8fdb\u884c\u56fe\u50cf\u5206\u5272\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u4e00\u6837\u7684\u3002\u8be5\u9884\u8bad\u7ec3\u6a21\u578b\u53ef\u4ee5\u5206\u5272\u7684\u76ee\u6807\u7c7b\u578b\u5982\u4e0b\u6240\u793a\uff1a COCO_NAMES = [ '__background__' , 'person' , 'bicycle' , 'car' , 'motorcycle' , 'airplane' , 'bus' , 'train' , 'truck' , 'boat' , 'traffic light' , 'fire hydrant' , 'N/A' , 'stop sign' , 'parking meter' , 'bench' , 'bird' , 'cat' , 'dog' , 'horse' , 'sheep' , 'cow' , 'elephant' , 'bear' , 'zebra' , 'giraffe' , 'N/A' , 'backpack' , 'umbrella' , 'N/A' , 'N/A' , 'handbag' , 'tie' , 'suitcase' , 'frisbee' , 'skis' , 'snowboard' , 'sports ball' , 'kite' , 'baseball bat' , 'baseball glove' , 'skateboard' , 'surfboard' , 'tennis racket' , 'bottle' , 'N/A' , 'wine glass' , 'cup' , 'fork' , 'knife' , 'spoon' , 'bowl' , 'banana' , 'apple' , 'sandwich' , 'orange' , 'broccoli' , 'carrot' , 'hot dog' , 'pizza' , 'donut' , 'cake' , 'chair' , 'couch' , 'potted plant' , 'bed' , 'N/A' , 'dining table' , 'N/A' , 'N/A' , 'toilet' , 'N/A' , 'tv' , 'laptop' , 'mouse' , 'remote' , 'keyboard' , 'cell phone' , 'microwave' , 'oven' , 'toaster' , 'sink' , 'refrigerator' , 'N/A' , 'book' , 'clock' , 'vase' , 'scissors' , 'teddy bear' , 'hair drier' , 'toothbrush' ] 1.5.2 \u52a0\u8f7d\u56fe\u7247 \u00b6 \u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u8981\u9884\u6d4b\u7684\u56fe\u7247\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u5f20\u91cf\u7684\u5f62\u5f0f\uff0c\u7136\u540e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u5728\u8fd9\u91cc\u8bfb\u53d6\u56fe\u7247\u65f6\u6211\u4eec\u4f7f\u7528pillow\u8fdb\u884c\u83b7\u53d6\uff0c\u5982\u4e0b\u6240\u793a\uff1a from PIL import Image import torchvision.transforms as T img1 = Image . open ( 'giraffe.jpg' ) img2 = Image . open ( 'elephant.jpg' ) images = [ img1 , img2 ] \u5c06\u56fe\u7247\u5c55\u793a\u51fa\u6765\uff1a # \u5212\u5206\u591a\u5750\u6807\u8f74 fig , axs = plt . subplots ( ncols = len ( images )) # \u904d\u5386\u56fe\u50cf\u8fdb\u884c\u5c55\u793a for i , img in enumerate ( images ): # \u8fdb\u884c\u56fe\u50cf\u7684\u5c55\u793a axs [ i ] . imshow ( np . asarray ( img )) plt . show () \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u5728\u5c06\u5176\u9001\u5165\u7f51\u7edc\u4e2d\u9700\u8981\u5bf9\u9f50\u8fdb\u884c\u7ef4\u5ea6\u7684\u8c03\u6574\u548c\u5f52\u4e00\u5316\u5904\u7406\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528Transforms\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a\uff1a transform = T . Compose ([ T . ToTensor ()]) images = [ transform ( img ) for img in images ] \u6211\u4eec\u770b\u4e0b\u56fe\u50cf\u7684\u5f62\u72b6\u548c\u53d6\u503c\u8303\u56f4\uff1a images [ 0 ] . shape # torch.Size([3, 800, 1200]) images [ 0 ] . min () # tensor(0.) images [ 0 ] . max () # tensor(1.) \u53ef\u4ee5\u770b\u51fa\u56fe\u50cf\u5df2\u7ecf\u8fdb\u884c\u4e86\u7ef4\u5ea6\u8c03\u6574\u548c\u5f52\u4e00\u5316\u7684\u5904\u7406\u3002\u5982\u679ctorchvision>0.12\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406\uff1a # \u901a\u8fc7\u9884\u8bad\u7ec3\u6a21\u578b\u83b7\u53d6\u5904\u7406\u65b9\u6cd5 transform = weights . transforms () # \u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406 images = [ transform ( img ) for img in images ] \u5904\u7406\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002 \u5c06\u56fe\u50cf\u5904\u7406\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u5c06\u5176\u9001\u5230\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b 1.5.3 \u6a21\u578b\u9884\u6d4b \u00b6 \u6211\u4eec\u5c06\u5904\u7406\u597d\u7684\u6570\u636e\u9001\u5165\u6a21\u578b\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u5e76\u628a\u9884\u6d4b\u7ed3\u679c\u6253\u5370\u51fa\u6765\uff1a outputs = model ( images ) print ( outputs ) \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a [{ 'boxes' : tensor ([[ 615.8633 , 152.2426 , 865.0413 , 731.4258 ], [ 248.0959 , 187.2436 , 524.1812 , 716.3829 ]], grad_fn =< StackBackward0 > ), 'labels' : tensor ([ 25 , 25 ]), 'scores' : tensor ([ 0.9996 , 0.9996 ], grad_fn =< IndexBackward0 > ), 'masks' : tensor ([[[[ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], ... , [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ]]], [[[ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], ... , [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ]]]], grad_fn =< UnsqueezeBackward0 > )}, { 'boxes' : tensor ([[ 53.8483 , 119.2455 , 660.7449 , 743.6622 ], [ 325.3315 , 127.6702 , 645.0622 , 696.3107 ]], grad_fn =< StackBackward0 > ), 'labels' : tensor ([ 22 , 22 ]), 'scores' : tensor ([ 0.9982 , 0.0599 ], grad_fn =< IndexBackward0 > ), 'masks' : tensor ([[[[ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], ... , [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ]]], [[[ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], ... , [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ]]]], grad_fn =< UnsqueezeBackward0 > )}] \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u68c0\u6d4b\u7ed3\u679c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff0c\u5c55\u793a\u4e0b\u7f51\u7edc\u7684\u68c0\u6d4b\u7ed3\u679c\uff0cMaskRCNN\u4e2d\u5305\u542b\u76ee\u6807\u68c0\u6d4b\u548c\u5206\u5272\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u5c06\u76ee\u6807\u6846\u53ca\u5206\u5272\u7ed3\u679c\u5206\u522b\u7ed8\u5236\u51fa\u6765\uff1a \u76ee\u6807\u6846\u68c0\u6d4b\u7ed3\u679c\uff1a # \u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u68c0\u6d4b\u7ed3\u679c from torchvision.utils import draw_bounding_boxes import torchvision.transforms.functional as F # \u7ed8\u5236\u76ee\u6807\u7684\u68c0\u6d4b\u6846 score_threshold = 0.8 # \u83b7\u53d6\u68c0\u6d4b\u6846\uff0c\u904d\u5386\u6bcf\u4e00\u4e2a\u68c0\u6d4b\u7ed3\u679c\u8fdb\u884c\u8fdb\u884c\u7ed8\u5236 dogs_with_boxes = [ # \u9700\u8981\u5c06\u56fe\u7247\u8f6c\u6362\u4e3aUint\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5e76\u83b7\u53d6\u6ee1\u8db3\u6761\u4ef6\u7684box\u8fdb\u884c\u7ed8\u5236 draw_bounding_boxes ( ( img * 255 ) . type ( torch . uint8 ), boxes = output [ 'boxes' ][ output [ 'scores' ] > score_threshold ], colors = 'green' , width = 5 ) for img , output in zip ( images , outputs ) ] # \u5c06\u56fe\u50cf\u5c55\u793a\u5904\u7406\uff0c\u5212\u5206\u591a\u5750\u6807\u8f74 fig , axs = plt . subplots ( ncols = len ( dogs_with_boxes )) # \u904d\u5386\u6bcf\u4e00\u5e45\u56fe\u7247\u8fdb\u884c\u663e\u793a for i , img in enumerate ( dogs_with_boxes ): # \u8f6c\u6362\u4e3apillow\u4e2d\u7684\u56fe\u50cf\u5f62\u5f0f,\u5373\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u3010H\uff0cW\uff0cC\u3011\u7684\u5f62\u5f0f img = F . to_pil_image ( img ) # \u8fdb\u884c\u56fe\u50cf\u7684\u5c55\u793a axs [ i ] . imshow ( np . asarray ( img )) \u68c0\u6d4b\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u56fe\u50cf\u5206\u5272\u7ed3\u679c\uff1a # \u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u5206\u5272\u7ed3\u679c from torchvision.utils import draw_segmentation_masks # \u5206\u7c7b\u7f6e\u4fe1\u5ea6\u7684\u9608\u503c score_threshold = 0.5 # \u5206\u5272\u7ed3\u679c\u7684\u9608\u503c proba_threshold = 0.2 # \u904d\u5386\u6bcf\u4e00\u4e2a\u5206\u5272\u7ed3\u679c\uff0c\u83b7\u53d6\u6ee1\u8db3\u6761\u4ef6\u7684\u5206\u5272\u7ed3\u679c boolean_masks = [ # \u5206\u7c7b\u548c\u5206\u5272\u7ed3\u679c\u90fd\u6ee1\u8db3\u6761\u4ef6 out [ 'masks' ][ out [ 'scores' ] > score_threshold ] > proba_threshold for out in outputs ] # \u7ed8\u5236\u5206\u5272\u7ed3\u679c,\u904d\u5386\u6bcf\u4e00\u5e45\u56fe\u50cf\u4e2d\u7ed3\u679c\uff0c\u5c06\u5176\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a objects_with_masks = [ # \u9700\u8981\u5c06\u56fe\u7247\u8f6c\u6362\u4e3aUint\u7c7b\u578b\u7684\u6570\u636e\u5e76\u5c06mask\u4e2d\u7684\u7b2c\u4e00\u7ef4\u53bb\u9664[\u76ee\u6807\u4e2a\u6570\uff0cbatch,H,w] draw_segmentation_masks (( img * 255 ) . type ( torch . uint8 ), mask . squeeze ( 1 )) for img , mask in zip ( images , boolean_masks ) ] # \u5c06\u56fe\u50cf\u5c55\u793a\u5904\u7406\uff0c\u5212\u5206\u591a\u5750\u6807\u8f74 fig , axs = plt . subplots ( ncols = len ( objects_with_masks )) # \u904d\u5386\u6bcf\u4e00\u5e45\u56fe\u7247\u8fdb\u884c\u663e\u793a for i , img in enumerate ( objects_with_masks ): # \u8f6c\u6362\u4e3apillow\u4e2d\u7684\u56fe\u50cf\u5f62\u5f0f,\u5373\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u3010H\uff0cW\uff0cC\u3011\u7684\u5f62\u5f0f img = F . to_pil_image ( img ) # \u8fdb\u884c\u56fe\u50cf\u7684\u5c55\u793a axs [ i ] . imshow ( np . asarray ( img )) \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u5230\u8fd9\u91ccMaskRCNN\u7684\u9884\u6d4b\u8fc7\u7a0b\u5c31\u7ed9\u5927\u5bb6\u5c55\u793a\u5b8c\u6210\u4e86\u3002\u4ed6\u7684\u8bad\u7ec3\u6d41\u7a0b\u5982fasterRCNN\u7684\u4e00\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002 \u603b\u7ed3 \u8bf4\u660eMask RCNN\u7684\u7ed3\u6784\u7279\u70b9 \u5728Faster-RCNN\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u5206\u652f\uff0c\u5728\u5b9e\u73b0\u76ee\u6807\u68c0\u6d4b\u7684\u540c\u65f6\u5206\u5272\u76ee\u6807\u50cf\u7d20 \u638c\u63e1Mask RCNN\u7684RoIAlign\u65b9\u6cd5 ROIAlign\u6ca1\u6709\u4f7f\u7528\u91cf\u5316\u64cd\u4f5c\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u53cc\u7ebf\u6027\u63d2\u503c\u4f30\u8ba1\u975e\u6574\u6570\u70b9\u7684\u50cf\u7d20\u503c \u638c\u63e1Mask RCNN\u7684mask\u539f\u7406 mask\u5206\u652f\u662f\u4e00\u4e2a\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u4f7f\u75282x2\u7684\u53cd\u5377\u79ef\u8fdb\u884c\u4e0a\u91c7\u6837 \u77e5\u9053Mask RCNN\u7684\u635f\u5931\u51fd\u6570 \u591a\u4efb\u52a1\u635f\u5931\u51fd\u6570\uff1a\u6709\u5206\u7c7b\uff0c\u56de\u5f52\u548c\u5206\u5272\u4e09\u90e8\u5206\u7ec4\u6210","title":"3.4 Mask RCNN"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#34-mask-rcnn","text":"\u5b66\u4e60\u76ee\u6807 \u8bf4\u660eMask RCNN\u7684\u7ed3\u6784\u7279\u70b9 \u638c\u63e1Mask RCNN\u7684RoIAlign\u65b9\u6cd5 \u638c\u63e1Mask RCNN\u7684mask\u539f\u7406 \u77e5\u9053Mask RCNN\u7684\u635f\u5931\u51fd\u6570 \u4e0a\u56fe\u662fMaskRCNN\u9884\u6d4b\u7684\u7ed3\u679c","title":"3.4 Mask RCNN"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#11-mask-rcnn","text":"Mask-RCNN\u662f\u4e00\u4e2a\u5b9e\u4f8b\u5206\u5272\uff08Instance segmentation\uff09\u7f51\u7edc\u6846\u67b6\uff0c\u901a\u8fc7\u589e\u52a0\u4e0d\u540c\u7684\u5206\u652f\u53ef\u4ee5\u5b8c\u6210\u76ee\u6807\u5206\u7c7b\uff0c\u76ee\u6807\u68c0\u6d4b\uff0c\u5b9e\u4f8b\u5206\u5272\u7b49\u591a\u79cd\u4efb\u52a1\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u5c31\u662f\u5728Faster-RCNN\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u5206\u652f\uff0c\u5728\u5b9e\u73b0\u76ee\u6807\u68c0\u6d4b\u7684\u540c\u65f6\u5206\u5272\u76ee\u6807\u50cf\u7d20\uff0c\u5176\u5206\u652f\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u63a9\u7801\u5206\u652f\u662f\u4f5c\u7528\u4e8e\u6bcf\u4e2aRoI\u533a\u57df\uff08\u5019\u9009\u533a\u57df\uff09\uff0c\u4ee5\u50cf\u7d20\u5230\u50cf\u7d20\u7684\u65b9\u5f0f\u9884\u6d4b\u5206\u5272\u63a9\u7801\uff0c\u5f97\u5230\u5b9e\u4f8b\u5206\u5272\u7684\u7ed3\u679c\u3002 Mask RCNN\u7684\u6574\u4f53\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6574\u4f53\u7684\u6d41\u7a0b\u662f\uff1a \u8f93\u5165\u8981\u5904\u7406\u7684\u56fe\u7247\u3002 \u5c06\u56fe\u7247\u9001\u5165\u5230CNN\u7279\u5f81\u63d0\u53d6\u7f51\u7edc\u5f97\u5230\u7279\u5f81\u56fe\u3002 \u7136\u540e\u5bf9\u7279\u5f81\u56fe\u7684\u6bcf\u4e00\u4e2a\u50cf\u7d20\u4f4d\u7f6e\u8bbe\u5b9a\u56fa\u5b9a\u4e2a\u6570\u7684ROI\uff08\u5bf9\u5e94\u4e8e\u5728FasterRCNN\u4e2d\u7684Anchor\uff09\uff0c\u7136\u540e\u5c06ROI\u533a\u57df\u9001\u5165RPN\u7f51\u7edc\u8fdb\u884c\u4e8c\u5206\u7c7b(\u524d\u666f\u548c\u80cc\u666f)\u4ee5\u53ca\u5750\u6807\u56de\u5f52\uff0c\u4ee5\u83b7\u5f97\u7cbe\u70bc\u540e\u7684ROI\u533a\u57df\uff08\u5bf9\u5e94\u4e8eFasterRCNN\u4e2d\u7684\u5019\u9009\u533a\u57df\uff09\u3002 \u5bf9\u4e0a\u4e2a\u6b65\u9aa4\u4e2d\u83b7\u5f97\u7684ROI\u533a\u57df\u6267\u884cROIAlign\u64cd\u4f5c\uff08\u662f\u5bf9ROIPooling\u7684\u6539\u8fdb\uff09\uff0c\u5373\u5148\u5c06\u539f\u56fe\u548cfeature map\u7684pixel\u5bf9\u5e94\u8d77\u6765\uff0c\u7136\u540e\u5c06feature map\u548c\u56fa\u5b9a\u5927\u5c0f\u7684feature\u5bf9\u5e94\u8d77\u6765\u3002 \u6700\u540e\u5bf9\u8fd9\u4e9bROI\u533a\u57df\u8fdb\u884c\u591a\u7c7b\u522b\u5206\u7c7b\uff0c\u5019\u9009\u6846\u56de\u5f52\u548c\u5f15\u5165FCN\u751f\u6210Mask\uff0c\u5b8c\u6210\u5b9e\u4f8b\u5206\u5272\u4efb\u52a1\u3002 \u6574\u4e2a\u8fc7\u7a0b\u4e2d\u4e0eFasterRCNN\u4e2d\u4e0d\u540c\u7684\u662fROIAlign\u548c\u5206\u5272\u5206\u652f\uff0c\u5176\u4ed6\u90fd\u662f\u76f8\u540c\u7684\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u7740\u91cd\u4ecb\u7ecd\u8fd9\u4e24\u4e2a\u5185\u5bb9\u3002","title":"1.1 Mask RCNN\u6d41\u7a0b"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#12-roialign","text":"FasterRCNN\u4e2d\u7684ROIPooling\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\uff1a \u5b83\u7684\u6d41\u7a0b\u662f\uff1a \u8f93\u5165\u56fe\u7247\u7684\u5927\u5c0f\u4e3a800x800\uff0c\u5176\u4e2d\u72d7\u8fd9\u4e2a\u76ee\u6807\u6846\u7684\u5927\u5c0f\u4e3a665x665\uff0c\u7ecf\u8fc7VGG16\u7f51\u7edc\u4e4b\u540e\u83b7\u5f97\u7684\u7279\u5f81\u56fe\u5c3a\u5bf8\u4e3a800/32x800/32=25x25\uff0c\u5176\u4e2d32\u4ee3\u8868VGG16\u4e2d\u76845\u6b21\u4e0b\u91c7\u6837\uff08\u6b65\u957f\u4e3a2\uff09\u64cd\u4f5c\u3002\u90a3\u4e48\uff0c\u5bf9\u4e8e\u72d7\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u5c06\u5176\u5bf9\u5e94\u5230\u7279\u5f81\u56fe\u4e0a\u5f97\u5230\u7684\u7ed3\u679c\u662f665/32x665/32=20.78x20.78=20x20\uff0c\u56e0\u4e3a\u5750\u6807\u8981\u4fdd\u7559\u6574\u6570\u6240\u4ee5\u8fd9\u91cc\u5f15\u5165\u4e86\u7b2c\u4e00\u4e2a\u91cf\u5316\u8bef\u5dee\u5373\u820d\u5f03\u4e86\u76ee\u6807\u6846\u5728\u7279\u5f81\u56fe\u4e0a\u5bf9\u5e94\u957f\u5bbd\u7684\u6d6e\u70b9\u6570\u90e8\u5206\u3002 \u63a5\u4e0b\u6765\u9700\u8981\u5c06\u8fd9\u4e2a20x20\u7684ROI\u533a\u57df\u6620\u5c04\u4e3a7x7\u7684ROI\u7279\u5f81\u56fe\uff0c\u6839\u636eROI Pooling\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u5176\u7ed3\u679c\u5c31\u662f20/7x20/7=2.86x2.86\uff0c\u540c\u6837\u6267\u884c\u53d6\u6574\u64cd\u4f5c\u64cd\u4f5c\u540eROI\u7279\u5f81\u533a\u57df\u7684\u5c3a\u5bf8\u4e3a2x2\uff0c\u8fd9\u91cc\u5f15\u5165\u4e86\u7b2c\u4e8c\u6b21\u91cf\u5316\u8bef\u5dee\u3002 \u4ece\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e24\u6b21\u91cf\u5316\u8bef\u5dee\u4f1a\u5bfc\u81f4\u539f\u59cb\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u548c\u7279\u5f81\u56fe\u4e2d\u7684\u50cf\u7d20\u8fdb\u884c\u5bf9\u5e94\u65f6\u51fa\u73b0\u504f\u5dee\uff0c\u4f8b\u5982\u4e0a\u9762\u5c062.86\u91cf\u5316\u4e3a2\u7684\u65f6\u5019\u5c31\u5f15\u5165\u4e860.86\u7684\u504f\u5dee\uff0c\u8fd9\u4e2a\u504f\u5dee\u6620\u5c04\u56de\u539f\u56fe\u5c31\u662f0.86x32=27.52\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u50cf\u7d20\u504f\u5dee\u662f\u5f88\u5927\u7684\uff0c\u800c\u4e14\u8fd9\u4ec5\u4ec5\u8003\u8651\u4e86\u7b2c\u4e8c\u6b21\u7684\u91cf\u5316\u8bef\u5dee\uff0c\u6240\u4ee5\u8fd9\u4f1a\u5f71\u54cd\u6574\u4e2a\u7b97\u6cd5\u7684\u6027\u80fd\u3002 \u4e3a\u4e86\u7f13\u89e3ROI Pooling\u91cf\u5316\u8bef\u5dee\u8fc7\u5927\u7684\u95ee\u9898\uff0cMaskRCNN\u63d0\u51fa\u4e86ROIAlign\uff0cROIAlign\u6ca1\u6709\u4f7f\u7528\u91cf\u5316\u64cd\u4f5c\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u53cc\u7ebf\u6027\u63d2\u503c\u4f30\u8ba1\u975e\u6574\u6570\u70b9\u7684\u50cf\u7d20\u503c\u3002\u8fd9\u4e00\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u9488\u5bf9\u4e0a\u56fe\u7684\u6d41\u7a0b\u662f\uff1a \u8f93\u5165\u56fe\u7247\u7684\u5927\u5c0f\u4e3a800x800\uff0c\u5176\u4e2d\u72d7\u8fd9\u4e2a\u76ee\u6807\u6846\u7684\u5927\u5c0f\u4e3a665x665\uff0c\u7ecf\u8fc7VGG16\u7f51\u7edc\u4e4b\u540e\u83b7\u5f97\u7684\u7279\u5f81\u56fe\u5c3a\u5bf8\u4e3a800/32x800/32=25x25\uff0c\u5176\u4e2d32\u4ee3\u8868VGG16\u4e2d\u76845\u6b21\u4e0b\u91c7\u6837\uff08\u6b65\u957f\u4e3a2\uff09\u64cd\u4f5c\u3002\u90a3\u4e48\uff0c\u5bf9\u4e8e\u72d7\u8fd9\u4e2a\u76ee\u6807\uff0c\u6211\u4eec\u5c06\u5176\u5bf9\u5e94\u5230\u7279\u5f81\u56fe\u4e0a\u5f97\u5230\u7684\u7ed3\u679c\u662f665/32x665/32=20.78x20.78\uff0c\u6b64\u65f6\uff0c\u6ca1\u6709\u50cfRoiPooling\u90a3\u6837\u5c31\u884c\u53d6\u6574\u64cd\u4f5c\uff0c\u800c\u662f\u4fdd\u7559\u6d6e\u70b9\u6570\u3002 \u63a5\u4e0b\u6765\u9700\u8981\u5c06\u8fd9\u4e2a20.78x20.78\u7684ROI\u533a\u57df\u6620\u5c04\u4e3a7x7\u7684ROI\u7279\u5f81\u56fe\uff0c\u7ed3\u679c\u5c31\u662f20.78/7x20.78/7=2.97x2.97\uff0c\u5373\u6bcf\u4e2a\u5c0f\u533a\u57df\u7684\u5927\u5c0f\u4e3a2.97x2.97\u3002 \u5047\u5b9a\u6bcf\u4e2a\u5c0f\u533a\u57df\u91c7\u6837\u70b9\u6570\u4e3a4\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a2.97*2.97\u7684\u5c0f\u533a\u57df\uff0c\u5e73\u5206\u56db\u4efd\uff0c\u6bcf\u4e00\u4efd\u53d6\u5176\u4e2d\u5fc3\u70b9\u4f4d\u7f6e\uff0c\u800c\u4e2d\u5fc3\u70b9\u4f4d\u7f6e\u7684\u50cf\u7d20\uff0c\u91c7\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u6cd5\u8fdb\u884c\u8ba1\u7b97\uff0c\u8fd9\u6837\uff0c\u5c31\u4f1a\u5f97\u5230\u56db\u4e2a\u70b9\u7684\u50cf\u7d20\u503c\uff0c\u5982\u4e0b\u56fe\uff1a \u4e0a\u56fe\u4e2d\uff0c\u56db\u4e2a\u7ea2\u8272\u53c9\u53c9\u2018\u00d7\u2019\u7684\u50cf\u7d20\u503c\u662f\u901a\u8fc7\u53cc\u7ebf\u6027\u63d2\u503c\u7b97\u6cd5\u8ba1\u7b97\u5f97\u5230\u7684\u3002 \u6700\u540e\uff0c\u53d6\u56db\u4e2a\u50cf\u7d20\u503c\u4e2d\u6700\u5927\u503c\uff08\u6700\u5927\u6c60\u5316\uff09\u4f5c\u4e3a\u8fd9\u4e2a\u5c0f\u533a\u57df(\u5373\uff1a2.97x2.97\u5927\u5c0f\u7684\u533a\u57df)\u7684\u50cf\u7d20\u503c\uff0c\u5982\u6b64\u7c7b\u63a8\uff0c\u540c\u6837\u662f49\u4e2a\u5c0f\u533a\u57df\u5f97\u523049\u4e2a\u50cf\u7d20\u503c\uff0c\u7ec4\u62107x7\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 \u53cc\u7ebf\u6027\u63d2\u503c\u662f\u4e00\u79cd\u56fe\u50cf\u7f29\u653e\u586b\u5145\u7b97\u6cd5\uff0c\u5b83\u5145\u5206\u7684\u5229\u7528\u4e86\u539f\u56fe\u4e2d\u865a\u62df\u70b9\uff08\u6bd4\u598220.56\u8fd9\u4e2a\u6d6e\u70b9\u6570\uff0c\u50cf\u7d20\u4f4d\u7f6e\u4e0d\u662f\u6574\u6570\u503c\uff0c\u800c\u662f\u6d6e\u70b9\u503c\uff09\u56db\u5468\u7684\u771f\u5b9e\u5b58\u5728\u7684\u50cf\u7d20\u503c\u6765\u5171\u540c\u51b3\u5b9a\u76ee\u6807\u56fe\u4e2d\u7684\u4e00\u4e2a\u50cf\u7d20\u503c\uff0c\u5373\u53ef\u4ee5\u5c0620.56\u8fd9\u4e2a\u865a\u62df\u7684\u4f4d\u7f6e\u70b9\u5bf9\u5e94\u7684\u50cf\u7d20\u503c\u4f30\u8ba1\u51fa\u6765\u3002","title":"1.2 ROIAlign"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#13","text":"\u4e0a\u8ff0\u5df2\u7ecf\u4ecb\u7ecd\u4e86Mask-RCNN \u7684\u7ed3\u6784\u4e0eFasterRCNN\u662f\u76f8\u540c\u7684\uff0c\u589e\u52a0\u4e86\u4e00\u4e2a\u5206\u5272\u7684\u5934\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u9aa8\u5e72\u7f51\u7edcResNet-FPN\u7528\u4e8e\u7279\u5f81\u63d0\u53d6\uff0cRPN\u7f51\u7edc\u8fdb\u884c\u5019\u9009\u533a\u57df\u7684\u63d0\u53d6\uff0cROIAlign\u83b7\u53d6\u56fa\u5b9a\u5927\u5c0f\u7684\u7279\u5f81\u56fe\uff0c\u5934\u90e8\u7f51\u7edc\u5305\u62ec\u8fb9\u754c\u6846\u8bc6\u522b\uff08\u5206\u7c7b\u548c\u56de\u5f52\uff09+mask\u9884\u6d4b\uff0c\u5177\u4f53\u5982\u4e0b\u6240\u793a\uff1a mask\u5206\u652f\u662f\u4e00\u4e2a\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u5b9e\u9645\u5de5\u4f5c\u4e2d\u6211\u4eec\u4f7f\u7528\u53f3\u56fe\u8f83\u591a\u4e00\u4e9b\uff0c\u5176\u4e2d\u4f7f\u75282x2\u7684\u53cd\u5377\u79ef\u8fdb\u884c\u4e0a\u91c7\u6837\u3002\u9884\u6d4b\u65f6 mask \u5206\u652f\u8f93\u51fa\u7ed3\u679c resize \u5230 RoI \u7684\u5927\u5c0f, \u7136\u540e\u5e94\u7528 0.5 \u7684\u9608\u503c\u8fdb\u884c\u4e8c\u503c\u5316\u5f97\u5230\u6700\u7ec8\u7684\u5206\u5272\u7ed3\u679c\u3002","title":"1.3 \u7f51\u7edc\u7ed3\u6784"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#14","text":"Mask-RCNN\u5728Faster-RCNN\u7684\u57fa\u7840\u4e0a\u591a\u4e86\u4e00\u4e2aROIAligin\u548cMask\u9884\u6d4b\u5206\u652f\uff0c\u56e0\u6b64Mask R-CNN\u7684\u635f\u5931\u4e5f\u662f\u591a\u4efb\u52a1\u635f\u5931\uff1a L_{cls} L_{cls} \u548c L_{box} L_{box} \u4e0efaster rcnn\u7684\u5b9a\u4e49\u6ca1\u6709\u533a\u522b\u3002\u5177\u4f53\u6765\u770b\u4e0b L_{mask} L_{mask} \u3002 Mask\u5206\u652f\u5bf9\u6bcf\u4e2aROI\u533a\u57df\u4ea7\u751f\u4e00\u4e2amxmxK\u7684\u8f93\u51fa\u7279\u5f81\u56fe\uff0c\u5373K\u4e2a\u7684\u4e8c\u503c\u63a9\u819c\u56fe\u50cf\uff0c\u5176\u4e2dK\u4ee3\u8868\u76ee\u6807\u79cd\u7c7b\u6570\u3002\u5bf9\u4e8e\u9884\u6d4b\u7684\u4e8c\u503c\u63a9\u819c\u8f93\u51fa\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u5e94\u7528 sigmoid \u51fd\u6570\uff0c\u6574\u4f53\u635f\u5931\u5b9a\u4e49\u4e3a\u5e73\u5747\u4e8c\u503c\u4ea4\u53c9\u635f\u5931\u71b5\u3002\u5bf9\u4e8e\u771f\u5b9e\u7c7b\u522b\u4e3a\ud835\udc58\u7684\ud835\udc45\ud835\udc5c\ud835\udc3c\uff0c\u4ec5\u5728\u7b2ck\u4e2a\u63a9\u7801\u4e0a\u8ba1\u7b97\u635f\u5931\uff08\u5176\u4ed6\u63a9\u7801\u8f93\u51fa\u4e0d\u8ba1\u5165\uff09\u3002\u8fd9\u6837\u505a\u89e3\u8026\u4e86\u63a9\u819c\u548c\u79cd\u7c7b\u9884\u6d4b\u3002 \u4e0d\u50cfFCN\u7684\u505a\u6cd5\uff0c\u5728\u6bcf\u4e2a\u50cf\u7d20\u70b9\u4e0a\u5e94\u7528 softmax \u51fd\u6570\uff0c\u6574\u4f53\u91c7\u7528\u7684\u591a\u4efb\u52a1\u4ea4\u53c9\u71b5\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u7c7b\u95f4\u7ade\u4e89\uff0c\u6700\u7ec8\u5bfc\u81f4\u5206\u5272\u6548\u679c\u5dee\u3002","title":"1.4 \u635f\u5931\u51fd\u6570"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#15-maskrcnn","text":"\u5728\u8fd9\u4e00\u8282\u4e2d\u7684\u6211\u4eec\u5c06\u4f7f\u7528pytorch\u4e2d\u7684\u9884\u8bad\u7ec3\u7684MaskRCNN\u6a21\u578b\u8fdb\u884c\u56fe\u50cf\u5206\u5272\uff0c\u8be5\u9884\u8bad\u7ec3\u6a21\u578b\u6709COCO\u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3\u7684\uff0c\u53ef\u4ee5\u8fdb\u884c80\u4e2a\u7c7b\u522b\u76ee\u6807\u7684\u5206\u5272\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u4e24\u5e45\u56fe\u50cf\u8fdb\u884c\u6f14\u793a\uff1a","title":"1.5 \u4f7f\u7528MaskRCNN\u8fdb\u884c\u56fe\u50cf\u5206\u5272"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#151","text":"mask R-CNN\u6a21\u578b\u7684\u8f93\u5165\u662f\u56fe\u50cf\uff0c\u5e76\u4e14\u9700\u8981\u8f6c\u6362\u4e3a\u5f20\u91cf\u7684\u5f62\u5f0f\uff0c\u6bcf\u4e2a\u8f93\u5165\u6570\u636e\u7684\u5f62\u72b6\u4e3a\uff08batch\uff0cc\uff0ch\uff0cw\uff09\uff0c\u50cf\u7d20\u53d6\u503c\u57280-1\u8303\u56f4\u5185\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u8fdb\u884c\u5f52\u4e00\u5316\u6216\u6807\u51c6\u5316\uff0c\u56fe\u50cf\u7684\u5927\u5c0f\u6ca1\u6709\u8981\u6c42\u3002\u6a21\u578b\u7684\u8f93\u51fa\u5305\u62ec\uff1a\u76ee\u6807\u6846\u7684\u5750\u6807\uff0c\u76ee\u6807\u7c7b\u522b\u7684id \u53ca\u76f8\u5e94\u7684\u7c7b\u522b\u5206\u6570\uff0c\u6bcf\u4e2a\u76ee\u6807\u7684\u5206\u5272\u7ed3\u679c\u3002\u9996\u5148\u6211\u4eec\u8fdb\u884c\u6a21\u578b\u5b9e\u4f8b\u5316\uff1a from torchvision.models.detection import maskrcnn_resnet50_fpn model = maskrcnn_resnet50_fpn ( pretrained = True ) \u5f53torchvision<0.12\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u52a0\u8f7d\uff0c\u5f53torchvision>0.12\u65f6\uff0c\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a from torchvision.models.detection import maskrcnn_resnet50_fpn , MaskRCNN_ResNet50_FPN_Weights # \u52a0\u8f7d\u6a21\u578b\u53c2\u6570 weights = MaskRCNN_ResNet50_FPN_Weights . DEFAULT # \u52a0\u8f7d\u6a21\u578b model = maskrcnn_resnet50_fpn ( weights = weights , progress = False ) \u5728\u7b2c\u4e00\u6b21\u52a0\u8f7d\u65f6\uff0c\u4f1a\u4e0b\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u3002\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u5c06\u6a21\u578b\u8bbe\u4e3a\u9a8c\u8bc1\u6a21\u5f0f\uff0c\u5982\u4e0b\u6240\u793a\uff1a model . eval () \u5728\u8fd9\u91cc\u6211\u4eec\u8981\u770b\u4e0b\u7f51\u7edc\u7684\u7ed3\u6784\uff1a MaskRCNN ( ( transform ): GeneralizedRCNNTransform ( Normalize ( mean = [ 0.485 , 0.456 , 0.406 ], std = [ 0.229 , 0.224 , 0.225 ]) Resize ( min_size = ( 800 ,), max_size = 1333 , mode = 'bilinear' ) ) ( backbone ): BackboneWithFPN ( ( body ): IntermediateLayerGetter ( ( conv1 ): Conv2d ( 3 , 64 , kernel_size = ( 7 , 7 ), stride = ( 2 , 2 ), padding = ( 3 , 3 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ( maxpool ): MaxPool2d ( kernel_size = 3 , stride = 2 , padding = 1 , dilation = 1 , ceil_mode = False ) ( layer1 ): Sequential ( ( 0 ): Bottleneck ( ( conv1 ): Conv2d ( 64 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): FrozenBatchNorm2d ( 256 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ( downsample ): Sequential ( ( 0 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( 1 ): FrozenBatchNorm2d ( 256 , eps = 0.0 ) ) ) ( 1 ): Bottleneck ( ( conv1 ): Conv2d ( 256 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): FrozenBatchNorm2d ( 256 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ) ( 2 ): Bottleneck ( ( conv1 ): Conv2d ( 256 , 64 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn1 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv2 ): Conv2d ( 64 , 64 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 ), bias = False ) ( bn2 ): FrozenBatchNorm2d ( 64 , eps = 0.0 ) ( conv3 ): Conv2d ( 64 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 ), bias = False ) ( bn3 ): FrozenBatchNorm2d ( 256 , eps = 0.0 ) ( relu ): ReLU ( inplace = True ) ) ) ( layer2 ): Sequential ( ...... ) ( layer3 ): Sequential ( ...... ) ( layer4 ): Sequential ( ...... ) ) ( fpn ): FeaturePyramidNetwork ( ( inner_blocks ): ModuleList ( ( 0 ): Conv2d ( 256 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 1 ): Conv2d ( 512 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 2 ): Conv2d ( 1024 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( 3 ): Conv2d ( 2048 , 256 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ) ( layer_blocks ): ModuleList ( ( 0 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( 1 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( 2 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( 3 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ) ( extra_blocks ): LastLevelMaxPool () ) ) ( rpn ): RegionProposalNetwork ( ( anchor_generator ): AnchorGenerator () ( head ): RPNHead ( ( conv ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( cls_logits ): Conv2d ( 256 , 3 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ( bbox_pred ): Conv2d ( 256 , 12 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ) ) ( roi_heads ): RoIHeads ( ( box_roi_pool ): MultiScaleRoIAlign ( featmap_names = [ '0' , '1' , '2' , '3' ], output_size = ( 7 , 7 ), sampling_ratio = 2 ) ( box_head ): TwoMLPHead ( ( fc6 ): Linear ( in_features = 12544 , out_features = 1024 , bias = True ) ( fc7 ): Linear ( in_features = 1024 , out_features = 1024 , bias = True ) ) ( box_predictor ): FastRCNNPredictor ( ( cls_score ): Linear ( in_features = 1024 , out_features = 91 , bias = True ) ( bbox_pred ): Linear ( in_features = 1024 , out_features = 364 , bias = True ) ) ( mask_roi_pool ): MultiScaleRoIAlign ( featmap_names = [ '0' , '1' , '2' , '3' ], output_size = ( 14 , 14 ), sampling_ratio = 2 ) ( mask_head ): MaskRCNNHeads ( ( mask_fcn1 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( relu1 ): ReLU ( inplace = True ) ( mask_fcn2 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( relu2 ): ReLU ( inplace = True ) ( mask_fcn3 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( relu3 ): ReLU ( inplace = True ) ( mask_fcn4 ): Conv2d ( 256 , 256 , kernel_size = ( 3 , 3 ), stride = ( 1 , 1 ), padding = ( 1 , 1 )) ( relu4 ): ReLU ( inplace = True ) ) ( mask_predictor ): MaskRCNNPredictor ( ( conv5_mask ): ConvTranspose2d ( 256 , 256 , kernel_size = ( 2 , 2 ), stride = ( 2 , 2 )) ( relu ): ReLU ( inplace = True ) ( mask_fcn_logits ): Conv2d ( 256 , 91 , kernel_size = ( 1 , 1 ), stride = ( 1 , 1 )) ) ) ) \u4e0eFasterRCNN\u7684\u7f51\u7edc\u7ed3\u6784\u76f8\u6bd4\uff0c\u591a\u4e86\u4e00\u4e2amask_head\uff0c\u7528\u4e8e\u8fdb\u884c\u56fe\u50cf\u5206\u5272\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u4e00\u6837\u7684\u3002\u8be5\u9884\u8bad\u7ec3\u6a21\u578b\u53ef\u4ee5\u5206\u5272\u7684\u76ee\u6807\u7c7b\u578b\u5982\u4e0b\u6240\u793a\uff1a COCO_NAMES = [ '__background__' , 'person' , 'bicycle' , 'car' , 'motorcycle' , 'airplane' , 'bus' , 'train' , 'truck' , 'boat' , 'traffic light' , 'fire hydrant' , 'N/A' , 'stop sign' , 'parking meter' , 'bench' , 'bird' , 'cat' , 'dog' , 'horse' , 'sheep' , 'cow' , 'elephant' , 'bear' , 'zebra' , 'giraffe' , 'N/A' , 'backpack' , 'umbrella' , 'N/A' , 'N/A' , 'handbag' , 'tie' , 'suitcase' , 'frisbee' , 'skis' , 'snowboard' , 'sports ball' , 'kite' , 'baseball bat' , 'baseball glove' , 'skateboard' , 'surfboard' , 'tennis racket' , 'bottle' , 'N/A' , 'wine glass' , 'cup' , 'fork' , 'knife' , 'spoon' , 'bowl' , 'banana' , 'apple' , 'sandwich' , 'orange' , 'broccoli' , 'carrot' , 'hot dog' , 'pizza' , 'donut' , 'cake' , 'chair' , 'couch' , 'potted plant' , 'bed' , 'N/A' , 'dining table' , 'N/A' , 'N/A' , 'toilet' , 'N/A' , 'tv' , 'laptop' , 'mouse' , 'remote' , 'keyboard' , 'cell phone' , 'microwave' , 'oven' , 'toaster' , 'sink' , 'refrigerator' , 'N/A' , 'book' , 'clock' , 'vase' , 'scissors' , 'teddy bear' , 'hair drier' , 'toothbrush' ]","title":"1.5.1 \u9884\u8bad\u7ec3\u6a21\u578b"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#152","text":"\u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u8981\u9884\u6d4b\u7684\u56fe\u7247\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u5f20\u91cf\u7684\u5f62\u5f0f\uff0c\u7136\u540e\u9001\u5165\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u5728\u8fd9\u91cc\u8bfb\u53d6\u56fe\u7247\u65f6\u6211\u4eec\u4f7f\u7528pillow\u8fdb\u884c\u83b7\u53d6\uff0c\u5982\u4e0b\u6240\u793a\uff1a from PIL import Image import torchvision.transforms as T img1 = Image . open ( 'giraffe.jpg' ) img2 = Image . open ( 'elephant.jpg' ) images = [ img1 , img2 ] \u5c06\u56fe\u7247\u5c55\u793a\u51fa\u6765\uff1a # \u5212\u5206\u591a\u5750\u6807\u8f74 fig , axs = plt . subplots ( ncols = len ( images )) # \u904d\u5386\u56fe\u50cf\u8fdb\u884c\u5c55\u793a for i , img in enumerate ( images ): # \u8fdb\u884c\u56fe\u50cf\u7684\u5c55\u793a axs [ i ] . imshow ( np . asarray ( img )) plt . show () \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u5728\u5c06\u5176\u9001\u5165\u7f51\u7edc\u4e2d\u9700\u8981\u5bf9\u9f50\u8fdb\u884c\u7ef4\u5ea6\u7684\u8c03\u6574\u548c\u5f52\u4e00\u5316\u5904\u7406\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528Transforms\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a\uff1a transform = T . Compose ([ T . ToTensor ()]) images = [ transform ( img ) for img in images ] \u6211\u4eec\u770b\u4e0b\u56fe\u50cf\u7684\u5f62\u72b6\u548c\u53d6\u503c\u8303\u56f4\uff1a images [ 0 ] . shape # torch.Size([3, 800, 1200]) images [ 0 ] . min () # tensor(0.) images [ 0 ] . max () # tensor(1.) \u53ef\u4ee5\u770b\u51fa\u56fe\u50cf\u5df2\u7ecf\u8fdb\u884c\u4e86\u7ef4\u5ea6\u8c03\u6574\u548c\u5f52\u4e00\u5316\u7684\u5904\u7406\u3002\u5982\u679ctorchvision>0.12\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406\uff1a # \u901a\u8fc7\u9884\u8bad\u7ec3\u6a21\u578b\u83b7\u53d6\u5904\u7406\u65b9\u6cd5 transform = weights . transforms () # \u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406 images = [ transform ( img ) for img in images ] \u5904\u7406\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002 \u5c06\u56fe\u50cf\u5904\u7406\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u5c06\u5176\u9001\u5230\u7f51\u7edc\u4e2d\u8fdb\u884c\u9884\u6d4b","title":"1.5.2 \u52a0\u8f7d\u56fe\u7247"},{"location":"03-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/04-%E5%AE%9E%E4%BE%8B%E5%88%86%E5%89%B2/#153","text":"\u6211\u4eec\u5c06\u5904\u7406\u597d\u7684\u6570\u636e\u9001\u5165\u6a21\u578b\u4e2d\u8fdb\u884c\u9884\u6d4b\uff0c\u5e76\u628a\u9884\u6d4b\u7ed3\u679c\u6253\u5370\u51fa\u6765\uff1a outputs = model ( images ) print ( outputs ) \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a [{ 'boxes' : tensor ([[ 615.8633 , 152.2426 , 865.0413 , 731.4258 ], [ 248.0959 , 187.2436 , 524.1812 , 716.3829 ]], grad_fn =< StackBackward0 > ), 'labels' : tensor ([ 25 , 25 ]), 'scores' : tensor ([ 0.9996 , 0.9996 ], grad_fn =< IndexBackward0 > ), 'masks' : tensor ([[[[ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], ... , [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ]]], [[[ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], ... , [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ]]]], grad_fn =< UnsqueezeBackward0 > )}, { 'boxes' : tensor ([[ 53.8483 , 119.2455 , 660.7449 , 743.6622 ], [ 325.3315 , 127.6702 , 645.0622 , 696.3107 ]], grad_fn =< StackBackward0 > ), 'labels' : tensor ([ 22 , 22 ]), 'scores' : tensor ([ 0.9982 , 0.0599 ], grad_fn =< IndexBackward0 > ), 'masks' : tensor ([[[[ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], ... , [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ]]], [[[ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], ... , [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ], [ 0. , 0. , 0. , ... , 0. , 0. , 0. ]]]], grad_fn =< UnsqueezeBackward0 > )}] \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u68c0\u6d4b\u7ed3\u679c\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a\uff0c\u5c55\u793a\u4e0b\u7f51\u7edc\u7684\u68c0\u6d4b\u7ed3\u679c\uff0cMaskRCNN\u4e2d\u5305\u542b\u76ee\u6807\u68c0\u6d4b\u548c\u5206\u5272\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u5c06\u76ee\u6807\u6846\u53ca\u5206\u5272\u7ed3\u679c\u5206\u522b\u7ed8\u5236\u51fa\u6765\uff1a \u76ee\u6807\u6846\u68c0\u6d4b\u7ed3\u679c\uff1a # \u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u68c0\u6d4b\u7ed3\u679c from torchvision.utils import draw_bounding_boxes import torchvision.transforms.functional as F # \u7ed8\u5236\u76ee\u6807\u7684\u68c0\u6d4b\u6846 score_threshold = 0.8 # \u83b7\u53d6\u68c0\u6d4b\u6846\uff0c\u904d\u5386\u6bcf\u4e00\u4e2a\u68c0\u6d4b\u7ed3\u679c\u8fdb\u884c\u8fdb\u884c\u7ed8\u5236 dogs_with_boxes = [ # \u9700\u8981\u5c06\u56fe\u7247\u8f6c\u6362\u4e3aUint\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5e76\u83b7\u53d6\u6ee1\u8db3\u6761\u4ef6\u7684box\u8fdb\u884c\u7ed8\u5236 draw_bounding_boxes ( ( img * 255 ) . type ( torch . uint8 ), boxes = output [ 'boxes' ][ output [ 'scores' ] > score_threshold ], colors = 'green' , width = 5 ) for img , output in zip ( images , outputs ) ] # \u5c06\u56fe\u50cf\u5c55\u793a\u5904\u7406\uff0c\u5212\u5206\u591a\u5750\u6807\u8f74 fig , axs = plt . subplots ( ncols = len ( dogs_with_boxes )) # \u904d\u5386\u6bcf\u4e00\u5e45\u56fe\u7247\u8fdb\u884c\u663e\u793a for i , img in enumerate ( dogs_with_boxes ): # \u8f6c\u6362\u4e3apillow\u4e2d\u7684\u56fe\u50cf\u5f62\u5f0f,\u5373\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u3010H\uff0cW\uff0cC\u3011\u7684\u5f62\u5f0f img = F . to_pil_image ( img ) # \u8fdb\u884c\u56fe\u50cf\u7684\u5c55\u793a axs [ i ] . imshow ( np . asarray ( img )) \u68c0\u6d4b\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u56fe\u50cf\u5206\u5272\u7ed3\u679c\uff1a # \u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u5206\u5272\u7ed3\u679c from torchvision.utils import draw_segmentation_masks # \u5206\u7c7b\u7f6e\u4fe1\u5ea6\u7684\u9608\u503c score_threshold = 0.5 # \u5206\u5272\u7ed3\u679c\u7684\u9608\u503c proba_threshold = 0.2 # \u904d\u5386\u6bcf\u4e00\u4e2a\u5206\u5272\u7ed3\u679c\uff0c\u83b7\u53d6\u6ee1\u8db3\u6761\u4ef6\u7684\u5206\u5272\u7ed3\u679c boolean_masks = [ # \u5206\u7c7b\u548c\u5206\u5272\u7ed3\u679c\u90fd\u6ee1\u8db3\u6761\u4ef6 out [ 'masks' ][ out [ 'scores' ] > score_threshold ] > proba_threshold for out in outputs ] # \u7ed8\u5236\u5206\u5272\u7ed3\u679c,\u904d\u5386\u6bcf\u4e00\u5e45\u56fe\u50cf\u4e2d\u7ed3\u679c\uff0c\u5c06\u5176\u7ed8\u5236\u5728\u56fe\u50cf\u4e0a objects_with_masks = [ # \u9700\u8981\u5c06\u56fe\u7247\u8f6c\u6362\u4e3aUint\u7c7b\u578b\u7684\u6570\u636e\u5e76\u5c06mask\u4e2d\u7684\u7b2c\u4e00\u7ef4\u53bb\u9664[\u76ee\u6807\u4e2a\u6570\uff0cbatch,H,w] draw_segmentation_masks (( img * 255 ) . type ( torch . uint8 ), mask . squeeze ( 1 )) for img , mask in zip ( images , boolean_masks ) ] # \u5c06\u56fe\u50cf\u5c55\u793a\u5904\u7406\uff0c\u5212\u5206\u591a\u5750\u6807\u8f74 fig , axs = plt . subplots ( ncols = len ( objects_with_masks )) # \u904d\u5386\u6bcf\u4e00\u5e45\u56fe\u7247\u8fdb\u884c\u663e\u793a for i , img in enumerate ( objects_with_masks ): # \u8f6c\u6362\u4e3apillow\u4e2d\u7684\u56fe\u50cf\u5f62\u5f0f,\u5373\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u3010H\uff0cW\uff0cC\u3011\u7684\u5f62\u5f0f img = F . to_pil_image ( img ) # \u8fdb\u884c\u56fe\u50cf\u7684\u5c55\u793a axs [ i ] . imshow ( np . asarray ( img )) \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a \u5230\u8fd9\u91ccMaskRCNN\u7684\u9884\u6d4b\u8fc7\u7a0b\u5c31\u7ed9\u5927\u5bb6\u5c55\u793a\u5b8c\u6210\u4e86\u3002\u4ed6\u7684\u8bad\u7ec3\u6d41\u7a0b\u5982fasterRCNN\u7684\u4e00\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002 \u603b\u7ed3 \u8bf4\u660eMask RCNN\u7684\u7ed3\u6784\u7279\u70b9 \u5728Faster-RCNN\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u4e00\u4e2a\u5206\u652f\uff0c\u5728\u5b9e\u73b0\u76ee\u6807\u68c0\u6d4b\u7684\u540c\u65f6\u5206\u5272\u76ee\u6807\u50cf\u7d20 \u638c\u63e1Mask RCNN\u7684RoIAlign\u65b9\u6cd5 ROIAlign\u6ca1\u6709\u4f7f\u7528\u91cf\u5316\u64cd\u4f5c\uff0c\u800c\u662f\u4f7f\u7528\u4e86\u53cc\u7ebf\u6027\u63d2\u503c\u4f30\u8ba1\u975e\u6574\u6570\u70b9\u7684\u50cf\u7d20\u503c \u638c\u63e1Mask RCNN\u7684mask\u539f\u7406 mask\u5206\u652f\u662f\u4e00\u4e2a\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u4f7f\u75282x2\u7684\u53cd\u5377\u79ef\u8fdb\u884c\u4e0a\u91c7\u6837 \u77e5\u9053Mask RCNN\u7684\u635f\u5931\u51fd\u6570 \u591a\u4efb\u52a1\u635f\u5931\u51fd\u6570\uff1a\u6709\u5206\u7c7b\uff0c\u56de\u5f52\u548c\u5206\u5272\u4e09\u90e8\u5206\u7ec4\u6210","title":"1.5.3 \u6a21\u578b\u9884\u6d4b"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/01-OpenCV%E7%AE%80%E4%BB%8B/","text":"4.1 OpenCV\u7b80\u4ecb \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3OpenCV\u662f\u4ec0\u4e48 \u80fd\u591f\u72ec\u7acb\u5b89\u88c5OpenCV 1 \u4ec0\u4e48\u662fOpenCV \u00b6 1.1 OpenCV\u7b80\u4ecb \u00b6 OpenCV\u662f\u4e00\u6b3e\u7531Intel\u516c\u53f8\u4fc4\u7f57\u65af\u56e2\u961f\u53d1\u8d77\u5e76\u53c2\u4e0e\u548c\u7ef4\u62a4\u7684\u4e00\u4e2a\u8ba1\u7b97\u673a\u89c6\u89c9\u5904\u7406\u5f00\u6e90\u8f6f\u4ef6\u5e93\uff0c\u652f\u6301\u4e0e\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u673a\u5668\u5b66\u4e60\u76f8\u5173\u7684\u4f17\u591a\u7b97\u6cd5\uff0c\u5e76\u4e14\u6b63\u5728\u65e5\u76ca\u6269\u5c55\u3002 OpenCV\u7684\u4f18\u52bf\uff1a \u7f16\u7a0b\u8bed\u8a00 OpenCV\u57fa\u4e8eC++\u5b9e\u73b0\uff0c\u540c\u65f6\u63d0\u4f9bpython, Ruby, Matlab\u7b49\u8bed\u8a00\u7684\u63a5\u53e3\u3002OpenCV-Python\u662fOpenCV\u7684Python API\uff0c\u7ed3\u5408\u4e86OpenCV C++ API\u548cPython\u8bed\u8a00\u7684\u6700\u4f73\u7279\u6027\u3002 \u8de8\u5e73\u53f0 \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u5e73\u53f0\u4e0a\u4f7f\u7528\uff0c\u5305\u62ecWindows\uff0cLinux\uff0cOS X\uff0cAndroid\u548ciOS\u3002 \u6d3b\u8dc3\u7684\u5f00\u53d1\u56e2\u961f \u4e30\u5bcc\u7684API \u5b8c\u5584\u7684\u4f20\u7edf\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\uff0c\u6db5\u76d6\u4e3b\u6d41\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u540c\u65f6\u6dfb\u52a0\u4e86\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u652f\u6301\u3002 1.2 OpenCV-Python \u00b6 OpenCV-Python\u662f\u4e00\u4e2aPython\u7ed1\u5b9a\u5e93\uff0c\u65e8\u5728\u89e3\u51b3\u8ba1\u7b97\u673a\u89c6\u89c9\u95ee\u9898\u3002 Python\u662f\u4e00\u79cd\u7531Guido van Rossum\u5f00\u53d1\u7684\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u5f88\u5feb\u5c31\u53d8\u5f97\u975e\u5e38\u6d41\u884c\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u7684\u7b80\u5355\u6027\u548c\u4ee3\u7801\u53ef\u8bfb\u6027\u3002\u5b83\u4f7f\u7a0b\u5e8f\u5458\u80fd\u591f\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u884c\u8868\u8fbe\u601d\u60f3\uff0c\u800c\u4e0d\u4f1a\u964d\u4f4e\u53ef\u8bfb\u6027\u3002 \u4e0eC / C++\u7b49\u8bed\u8a00\u76f8\u6bd4\uff0cPython\u901f\u5ea6\u8f83\u6162\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cPython\u53ef\u4ee5\u4f7f\u7528C / C++\u8f7b\u677e\u6269\u5c55\uff0c\u8fd9\u4f7f\u6211\u4eec\u53ef\u4ee5\u5728C / C++\u4e2d\u7f16\u5199\u8ba1\u7b97\u5bc6\u96c6\u578b\u4ee3\u7801\uff0c\u5e76\u521b\u5efa\u53ef\u7528\u4f5cPython\u6a21\u5757\u7684Python\u5305\u88c5\u5668\u3002\u8fd9\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u4e24\u4e2a\u597d\u5904\uff1a\u9996\u5148\uff0c\u4ee3\u7801\u4e0e\u539f\u59cbC / C++\u4ee3\u7801\u4e00\u6837\u5feb\uff08\u56e0\u4e3a\u5b83\u662f\u5728\u540e\u53f0\u5de5\u4f5c\u7684\u5b9e\u9645C++\u4ee3\u7801\uff09\uff0c\u5176\u6b21\uff0c\u5728Python\u4e2d\u7f16\u5199\u4ee3\u7801\u6bd4\u4f7f\u7528C / C++\u66f4\u5bb9\u6613\u3002OpenCV-Python\u662f\u539f\u59cbOpenCV C++\u5b9e\u73b0\u7684Python\u5305\u88c5\u5668\u3002 OpenCV-Python\u4f7f\u7528Numpy\uff0c\u8fd9\u662f\u4e00\u4e2a\u9ad8\u5ea6\u4f18\u5316\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u5e93\uff0c\u5177\u6709MATLAB\u98ce\u683c\u7684\u8bed\u6cd5\u3002\u6240\u6709OpenCV\u6570\u7ec4\u7ed3\u6784\u90fd\u8f6c\u6362\u4e3aNumpy\u6570\u7ec4\u3002\u8fd9\u4e5f\u4f7f\u5f97\u4e0e\u4f7f\u7528Numpy\u7684\u5176\u4ed6\u5e93\uff08\u5982SciPy\u548cMatplotlib\uff09\u96c6\u6210\u66f4\u5bb9\u6613\u3002 2 OpenCV\u5b89\u88c5\u65b9\u6cd5 \u00b6 \u5b89\u88c5OpenCV\u4e4b\u524d\u9700\u8981\u5148\u5b89\u88c5numpy, matplotlib\u3002\u5b89\u88c5\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a pip install opencv-python \u73b0\u5728\u53ef\u4ee5\u6d4b\u8bd5\u4e0b\u662f\u5426\u5b89\u88c5\u6210\u529f\uff0c\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u65e0\u62a5\u9519\u5219\u8bf4\u660e\u5b89\u88c5\u6210\u529f\u3002 import cv2 # \u8bfb\u4e00\u4e2a\u56fe\u7247\u5e76\u8fdb\u884c\u663e\u793a(\u56fe\u7247\u8def\u5f84\u9700\u81ea\u5df1\u6307\u5b9a) lena = cv2 . imread ( \"1.jpg\" ) cv2 . imshow ( \"image\" , lena ) cv2 . waitKey ( 0 ) \u603b\u7ed3 1.OpenCV\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5f00\u6e90\u5e93 \u200b \u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00 \u200b \u8de8\u5e73\u53f0 \u200b \u6d3b\u8dc3\u7684\u5f00\u53d1\u56e2\u961f \u200b \u4e30\u5bcc\u7684API 2.\u80fd\u591f\u5b89\u88c5OpenCV-python","title":"4.1 OpenCV\u7b80\u4ecb"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/01-OpenCV%E7%AE%80%E4%BB%8B/#41-opencv","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3OpenCV\u662f\u4ec0\u4e48 \u80fd\u591f\u72ec\u7acb\u5b89\u88c5OpenCV","title":"4.1 OpenCV\u7b80\u4ecb"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/01-OpenCV%E7%AE%80%E4%BB%8B/#1-opencv","text":"","title":"1 \u4ec0\u4e48\u662fOpenCV"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/01-OpenCV%E7%AE%80%E4%BB%8B/#11-opencv","text":"OpenCV\u662f\u4e00\u6b3e\u7531Intel\u516c\u53f8\u4fc4\u7f57\u65af\u56e2\u961f\u53d1\u8d77\u5e76\u53c2\u4e0e\u548c\u7ef4\u62a4\u7684\u4e00\u4e2a\u8ba1\u7b97\u673a\u89c6\u89c9\u5904\u7406\u5f00\u6e90\u8f6f\u4ef6\u5e93\uff0c\u652f\u6301\u4e0e\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u673a\u5668\u5b66\u4e60\u76f8\u5173\u7684\u4f17\u591a\u7b97\u6cd5\uff0c\u5e76\u4e14\u6b63\u5728\u65e5\u76ca\u6269\u5c55\u3002 OpenCV\u7684\u4f18\u52bf\uff1a \u7f16\u7a0b\u8bed\u8a00 OpenCV\u57fa\u4e8eC++\u5b9e\u73b0\uff0c\u540c\u65f6\u63d0\u4f9bpython, Ruby, Matlab\u7b49\u8bed\u8a00\u7684\u63a5\u53e3\u3002OpenCV-Python\u662fOpenCV\u7684Python API\uff0c\u7ed3\u5408\u4e86OpenCV C++ API\u548cPython\u8bed\u8a00\u7684\u6700\u4f73\u7279\u6027\u3002 \u8de8\u5e73\u53f0 \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u5e73\u53f0\u4e0a\u4f7f\u7528\uff0c\u5305\u62ecWindows\uff0cLinux\uff0cOS X\uff0cAndroid\u548ciOS\u3002 \u6d3b\u8dc3\u7684\u5f00\u53d1\u56e2\u961f \u4e30\u5bcc\u7684API \u5b8c\u5584\u7684\u4f20\u7edf\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\uff0c\u6db5\u76d6\u4e3b\u6d41\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u540c\u65f6\u6dfb\u52a0\u4e86\u5bf9\u6df1\u5ea6\u5b66\u4e60\u7684\u652f\u6301\u3002","title":"1.1 OpenCV\u7b80\u4ecb"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/01-OpenCV%E7%AE%80%E4%BB%8B/#12-opencv-python","text":"OpenCV-Python\u662f\u4e00\u4e2aPython\u7ed1\u5b9a\u5e93\uff0c\u65e8\u5728\u89e3\u51b3\u8ba1\u7b97\u673a\u89c6\u89c9\u95ee\u9898\u3002 Python\u662f\u4e00\u79cd\u7531Guido van Rossum\u5f00\u53d1\u7684\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u5f88\u5feb\u5c31\u53d8\u5f97\u975e\u5e38\u6d41\u884c\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u7684\u7b80\u5355\u6027\u548c\u4ee3\u7801\u53ef\u8bfb\u6027\u3002\u5b83\u4f7f\u7a0b\u5e8f\u5458\u80fd\u591f\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u884c\u8868\u8fbe\u601d\u60f3\uff0c\u800c\u4e0d\u4f1a\u964d\u4f4e\u53ef\u8bfb\u6027\u3002 \u4e0eC / C++\u7b49\u8bed\u8a00\u76f8\u6bd4\uff0cPython\u901f\u5ea6\u8f83\u6162\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cPython\u53ef\u4ee5\u4f7f\u7528C / C++\u8f7b\u677e\u6269\u5c55\uff0c\u8fd9\u4f7f\u6211\u4eec\u53ef\u4ee5\u5728C / C++\u4e2d\u7f16\u5199\u8ba1\u7b97\u5bc6\u96c6\u578b\u4ee3\u7801\uff0c\u5e76\u521b\u5efa\u53ef\u7528\u4f5cPython\u6a21\u5757\u7684Python\u5305\u88c5\u5668\u3002\u8fd9\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u4e24\u4e2a\u597d\u5904\uff1a\u9996\u5148\uff0c\u4ee3\u7801\u4e0e\u539f\u59cbC / C++\u4ee3\u7801\u4e00\u6837\u5feb\uff08\u56e0\u4e3a\u5b83\u662f\u5728\u540e\u53f0\u5de5\u4f5c\u7684\u5b9e\u9645C++\u4ee3\u7801\uff09\uff0c\u5176\u6b21\uff0c\u5728Python\u4e2d\u7f16\u5199\u4ee3\u7801\u6bd4\u4f7f\u7528C / C++\u66f4\u5bb9\u6613\u3002OpenCV-Python\u662f\u539f\u59cbOpenCV C++\u5b9e\u73b0\u7684Python\u5305\u88c5\u5668\u3002 OpenCV-Python\u4f7f\u7528Numpy\uff0c\u8fd9\u662f\u4e00\u4e2a\u9ad8\u5ea6\u4f18\u5316\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u5e93\uff0c\u5177\u6709MATLAB\u98ce\u683c\u7684\u8bed\u6cd5\u3002\u6240\u6709OpenCV\u6570\u7ec4\u7ed3\u6784\u90fd\u8f6c\u6362\u4e3aNumpy\u6570\u7ec4\u3002\u8fd9\u4e5f\u4f7f\u5f97\u4e0e\u4f7f\u7528Numpy\u7684\u5176\u4ed6\u5e93\uff08\u5982SciPy\u548cMatplotlib\uff09\u96c6\u6210\u66f4\u5bb9\u6613\u3002","title":"1.2 OpenCV-Python"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/01-OpenCV%E7%AE%80%E4%BB%8B/#2-opencv","text":"\u5b89\u88c5OpenCV\u4e4b\u524d\u9700\u8981\u5148\u5b89\u88c5numpy, matplotlib\u3002\u5b89\u88c5\u65b9\u6cd5\u5982\u4e0b\u6240\u793a\uff1a pip install opencv-python \u73b0\u5728\u53ef\u4ee5\u6d4b\u8bd5\u4e0b\u662f\u5426\u5b89\u88c5\u6210\u529f\uff0c\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u65e0\u62a5\u9519\u5219\u8bf4\u660e\u5b89\u88c5\u6210\u529f\u3002 import cv2 # \u8bfb\u4e00\u4e2a\u56fe\u7247\u5e76\u8fdb\u884c\u663e\u793a(\u56fe\u7247\u8def\u5f84\u9700\u81ea\u5df1\u6307\u5b9a) lena = cv2 . imread ( \"1.jpg\" ) cv2 . imshow ( \"image\" , lena ) cv2 . waitKey ( 0 ) \u603b\u7ed3 1.OpenCV\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5f00\u6e90\u5e93 \u200b \u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00 \u200b \u8de8\u5e73\u53f0 \u200b \u6d3b\u8dc3\u7684\u5f00\u53d1\u56e2\u961f \u200b \u4e30\u5bcc\u7684API 2.\u80fd\u591f\u5b89\u88c5OpenCV-python","title":"2 OpenCV\u5b89\u88c5\u65b9\u6cd5"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","text":"4.2 \u56fe\u50cf\u7684\u57fa\u7840\u64cd\u4f5c \u00b6 \u5b66\u4e60\u76ee\u6807 \u638c\u63e1\u56fe\u50cf\u7684\u8bfb\u53d6\u548c\u4fdd\u5b58\u65b9\u6cd5 \u80fd\u591f\u4f7f\u7528OpenCV\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u51e0\u4f55\u56fe\u5f62 \u4e86\u89e3\u56fe\u50cf\u7684\u52a0\u6cd5\u3001\u6df7\u5408\u64cd\u4f5c 1 \u56fe\u50cf\u7684IO\u64cd\u4f5c \u00b6 \u8fd9\u91cc\u6211\u4eec\u4f1a\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u5982\u4f55\u8bfb\u53d6\u56fe\u50cf\uff0c\u5982\u4f55\u663e\u793a\u56fe\u50cf\u548c\u5982\u4f55\u4fdd\u5b58\u56fe\u50cf\u3002 1.1 \u8bfb\u53d6\u56fe\u50cf \u00b6 API cv . imread () \u53c2\u6570\uff1a \u8981\u8bfb\u53d6\u7684\u56fe\u50cf \u8bfb\u53d6\u65b9\u5f0f\u7684\u6807\u5fd7 cv.IMREAD*COLOR\uff1a\u4ee5\u5f69\u8272\u6a21\u5f0f\u52a0\u8f7d\u56fe\u50cf\uff0c\u4efb\u4f55\u56fe\u50cf\u7684\u900f\u660e\u5ea6\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\u8fd9\u662f\u9ed8\u8ba4\u53c2\u6570\u3002 cv.IMREAD*GRAYSCALE\uff1a\u4ee5\u7070\u5ea6\u6a21\u5f0f\u52a0\u8f7d\u56fe\u50cf cv.IMREAD_UNCHANGED\uff1a\u5305\u62ecalpha\u901a\u9053\u7684\u52a0\u8f7d\u56fe\u50cf\u6a21\u5f0f\u3002 \u53ef\u4ee5\u4f7f\u75281\u30010\u6216\u8005-1\u6765\u66ff\u4ee3\u4e0a\u9762\u4e09\u4e2a\u6807\u5fd7 \u53c2\u8003\u4ee3\u7801 import numpy as np import cv2 as cv # \u4ee5\u7070\u5ea6\u56fe\u7684\u5f62\u5f0f\u8bfb\u53d6\u56fe\u50cf img = cv . imread ( 'messi5.jpg' , 0 ) \u6ce8\u610f\uff1a\u5982\u679c\u52a0\u8f7d\u7684\u8def\u5f84\u6709\u9519\u8bef\uff0c\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2aNone\u503c 1.2\u663e\u793a\u56fe\u50cf \u00b6 1 . API cv . imshow () \u53c2\u6570\uff1a \u663e\u793a\u56fe\u50cf\u7684\u7a97\u53e3\u540d\u79f0\uff0c\u4ee5\u5b57\u7b26\u4e32\u7c7b\u578b\u8868\u793a \u8981\u52a0\u8f7d\u7684\u56fe\u50cf \u6ce8\u610f\uff1a\u5728\u8c03\u7528\u663e\u793a\u56fe\u50cf\u7684API\u540e\uff0c\u8981\u8c03\u7528cv.waitKey()\u7ed9\u56fe\u50cf\u7ed8\u5236\u7559\u4e0b\u65f6\u95f4\uff0c\u5426\u5219\u7a97\u53e3\u4f1a\u51fa\u73b0\u65e0\u54cd\u5e94\u60c5\u51b5\uff0c\u5e76\u4e14\u56fe\u50cf\u65e0\u6cd5\u663e\u793a\u51fa\u6765 \u3002 \u53e6\u5916\u6211\u4eec\u4e5f\u53ef\u4f7f\u7528matplotlib\u5bf9\u56fe\u50cf\u8fdb\u884c\u5c55\u793a\u3002 \u53c2\u8003\u4ee3\u7801 # opencv\u4e2d\u663e\u793a cv . imshow ( 'image' , img ) cv . waitKey ( 0 ) # matplotlib\u4e2d\u5c55\u793a plt . imshow ( img [:,:,:: - 1 ]) 1.3 \u4fdd\u5b58\u56fe\u50cf \u00b6 API cv . imwrite () \u53c2\u6570\uff1a \u6587\u4ef6\u540d\uff0c\u8981\u4fdd\u5b58\u5728\u54ea\u91cc \u8981\u4fdd\u5b58\u7684\u56fe\u50cf \u53c2\u8003\u4ee3\u7801 cv . imwrite ( 'messigray.png' , img ) 1.4 \u603b\u7ed3 \u00b6 \u6211\u4eec\u901a\u8fc7\u52a0\u8f7d\u7070\u5ea6\u56fe\u50cf\uff0c\u663e\u793a\u56fe\u50cf\uff0c\u5982\u679c\u6309's'\u5e76\u9000\u51fa\u5219\u4fdd\u5b58\u56fe\u50cf\uff0c\u6216\u8005\u6309ESC\u952e\u76f4\u63a5\u9000\u51fa\u800c\u4e0d\u4fdd\u5b58\u3002 import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( 'messi5.jpg' , 0 ) # 2 \u663e\u793a\u56fe\u50cf # 2.1 \u5229\u7528opencv\u5c55\u793a\u56fe\u50cf cv . imshow ( 'image' , img ) # 2.2 \u5728matplotplotlib\u4e2d\u5c55\u793a\u56fe\u50cf plt . imshow ( img [:,:,:: - 1 ]) plt . title ( '\u5339\u914d\u7ed3\u679c' ), plt . xticks ([]), plt . yticks ([]) plt . show () k = cv . waitKey ( 0 ) # 3 \u4fdd\u5b58\u56fe\u50cf cv . imwrite ( 'messigray.png' , img ) 2 \u7ed8\u5236\u51e0\u4f55\u56fe\u5f62 \u00b6 2.1 \u7ed8\u5236\u76f4\u7ebf \u00b6 cv.line(img,start,end,color,thickness) \u53c2\u6570\uff1a img:\u8981\u7ed8\u5236\u76f4\u7ebf\u7684\u56fe\u50cf Start,end: \u76f4\u7ebf\u7684\u8d77\u70b9\u548c\u7ec8\u70b9 color: \u7ebf\u6761\u7684\u989c\u8272 Thickness: \u7ebf\u6761\u5bbd\u5ea6 2.2 \u7ed8\u5236\u5706\u5f62 \u00b6 cv . circle ( img , centerpoint , r , color , thickness ) \u53c2\u6570\uff1a img:\u8981\u7ed8\u5236\u5706\u5f62\u7684\u56fe\u50cf Centerpoint, r: \u5706\u5fc3\u548c\u534a\u5f84 color: \u7ebf\u6761\u7684\u989c\u8272 Thickness: \u7ebf\u6761\u5bbd\u5ea6\uff0c\u4e3a-1\u65f6\u751f\u6210\u95ed\u5408\u56fe\u6848\u5e76\u586b\u5145\u989c\u8272 2.3 \u7ed8\u5236\u77e9\u5f62 \u00b6 cv . rectangle ( img , leftupper , rightdown , color , thickness ) \u53c2\u6570\uff1a img:\u8981\u7ed8\u5236\u77e9\u5f62\u7684\u56fe\u50cf Leftupper, rightdown: \u77e9\u5f62\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u5750\u6807 color: \u7ebf\u6761\u7684\u989c\u8272 Thickness: \u7ebf\u6761\u5bbd\u5ea6 2.4 \u5411\u56fe\u50cf\u4e2d\u6dfb\u52a0\u6587\u5b57 \u00b6 cv . putText ( img , text , station , font , fontsize , color , thickness , cv . LINE_AA ) \u53c2\u6570\uff1a img: \u56fe\u50cf text\uff1a\u8981\u5199\u5165\u7684\u6587\u672c\u6570\u636e station\uff1a\u6587\u672c\u7684\u653e\u7f6e\u4f4d\u7f6e font\uff1a\u5b57\u4f53 Fontsize :\u5b57\u4f53\u5927\u5c0f 2.5 \u6548\u679c\u5c55\u793a \u00b6 \u6211\u4eec\u751f\u6210\u4e00\u4e2a\u5168\u9ed1\u7684\u56fe\u50cf\uff0c\u7136\u540e\u5728\u91cc\u9762\u7ed8\u5236\u56fe\u50cf\u5e76\u6dfb\u52a0\u6587\u5b57 import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u521b\u5efa\u4e00\u4e2a\u7a7a\u767d\u7684\u56fe\u50cf img = np . zeros (( 512 , 512 , 3 ), np . uint8 ) # 2 \u7ed8\u5236\u56fe\u5f62 cv . line ( img ,( 0 , 0 ),( 511 , 511 ),( 255 , 0 , 0 ), 5 ) cv . rectangle ( img ,( 384 , 0 ),( 510 , 128 ),( 0 , 255 , 0 ), 3 ) cv . circle ( img ,( 447 , 63 ), 63 , ( 0 , 0 , 255 ), - 1 ) font = cv . FONT_HERSHEY_SIMPLEX cv . putText ( img , 'OpenCV' ,( 10 , 500 ), font , 4 ,( 255 , 255 , 255 ), 2 , cv . LINE_AA ) # 3 \u56fe\u50cf\u5c55\u793a plt . imshow ( img [:,:,:: - 1 ]) plt . title ( '\u5339\u914d\u7ed3\u679c' ), plt . xticks ([]), plt . yticks ([]) plt . show () \u7ed3\u679c\uff1a 3.\u56fe\u50cf\u7684\u52a0\u6cd5 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528OpenCV\u7684cv.add()\u51fd\u6570\u628a\u4e24\u5e45\u56fe\u50cf\u76f8\u52a0\uff0c\u6216\u8005\u53ef\u4ee5\u7b80\u5355\u5730\u901a\u8fc7numpy\u64cd\u4f5c\u6dfb\u52a0\u4e24\u4e2a\u56fe\u50cf\uff0c\u5982res = img1 + img2\u3002\u4e24\u4e2a\u56fe\u50cf\u5e94\u8be5\u5177\u6709\u76f8\u540c\u7684\u5927\u5c0f\u548c\u7c7b\u578b\uff0c\u6216\u8005\u7b2c\u4e8c\u4e2a\u56fe\u50cf\u53ef\u4ee5\u662f\u6807\u91cf\u503c\u3002 \u6ce8\u610f\uff1aOpenCV\u52a0\u6cd5\u548cNumpy\u52a0\u6cd5\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\u3002OpenCV\u7684\u52a0\u6cd5\u662f\u9971\u548c\u64cd\u4f5c\uff0c\u800cNumpy\u6dfb\u52a0\u662f\u6a21\u8fd0\u7b97\u3002 \u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\uff1a >>> x = np . uint8 ([ 250 ]) >>> y = np . uint8 ([ 10 ]) >>> print ( cv . add ( x , y ) ) # 250+10 = 260 => 255 [[ 255 ]] >>> print ( x + y ) # 250+10 = 260 % 256 = 4 [ 4 ] \u8fd9\u79cd\u5dee\u522b\u5728\u4f60\u5bf9\u4e24\u5e45\u56fe\u50cf\u8fdb\u884c\u52a0\u6cd5\u65f6\u4f1a\u66f4\u52a0\u660e\u663e\u3002OpenCV \u7684\u7ed3\u679c\u4f1a\u66f4\u597d\u4e00\u70b9\u3002\u6240\u4ee5\u6211\u4eec\u5c3d\u91cf\u4f7f\u7528 OpenCV \u4e2d\u7684\u51fd\u6570\u3002 \u6211\u4eec\u5c06\u4e0b\u9762\u4e24\u5e45\u56fe\u50cf\uff1a \u4ee3\u7801\uff1a import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img1 = cv . imread ( \"view.jpg\" ) img2 = cv . imread ( \"rain.jpg\" ) # 2 \u52a0\u6cd5\u64cd\u4f5c img3 = cv . add ( img1 , img2 ) # cv\u4e2d\u7684\u52a0\u6cd5 img4 = img1 + img2 # \u76f4\u63a5\u76f8\u52a0 # 3 \u56fe\u50cf\u663e\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img3 [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"cv\u4e2d\u7684\u52a0\u6cd5\" ) axes [ 1 ] . imshow ( img4 [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u76f4\u63a5\u76f8\u52a0\" ) plt . show () \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a 4.\u56fe\u50cf\u7684\u6df7\u5408 \u00b6 \u8fd9\u5176\u5b9e\u4e5f\u662f\u52a0\u6cd5\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u662f\u4e24\u5e45\u56fe\u50cf\u7684\u6743\u91cd\u4e0d\u540c\uff0c\u8fd9\u5c31\u4f1a\u7ed9\u4eba\u4e00\u79cd\u6df7\u5408\u6216\u8005\u900f\u660e\u7684\u611f\u89c9\u3002\u56fe\u50cf\u6df7\u5408\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a g(x) = (1\u2212\u03b1)f0(x) + \u03b1f1(x) \u901a\u8fc7\u4fee\u6539 \u03b1 \u7684\u503c\uff080 \u2192 1\uff09\uff0c\u53ef\u4ee5\u5b9e\u73b0\u975e\u5e38\u70ab\u9177\u7684\u6df7\u5408\u3002 \u73b0\u5728\u6211\u4eec\u628a\u4e24\u5e45\u56fe\u6df7\u5408\u5728\u4e00\u8d77\u3002\u7b2c\u4e00\u5e45\u56fe\u7684\u6743\u91cd\u662f0.7\uff0c\u7b2c\u4e8c\u5e45\u56fe\u7684\u6743\u91cd\u662f0.3\u3002\u51fd\u6570cv2.addWeighted()\u53ef\u4ee5\u6309\u4e0b\u9762\u7684\u516c\u5f0f\u5bf9\u56fe\u7247\u8fdb\u884c\u6df7\u5408\u64cd\u4f5c\u3002 dst = \u03b1\u22c5img1 + \u03b2\u22c5img2 + \u03b3 \u8fd9\u91cc\u03b3\u53d6\u4e3a\u96f6\u3002 \u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\uff1a import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img1 = cv . imread ( \"view.jpg\" ) img2 = cv . imread ( \"rain.jpg\" ) # 2 \u56fe\u50cf\u6df7\u5408 img3 = cv . addWeighted ( img1 , 0.7 , img2 , 0.3 , 0 ) # 3 \u56fe\u50cf\u663e\u793a plt . figure ( figsize = ( 8 , 8 )) plt . imshow ( img3 [:,:,:: - 1 ]) plt . show () \u7a97\u53e3\u5c06\u5982\u4e0b\u56fe\u663e\u793a\uff1a \u603b\u7ed3\uff1a 1.\u56fe\u50cfIO\u64cd\u4f5c\u7684API\uff1a \u200b cv.imread(): \u8bfb\u53d6\u56fe\u50cf \u200b cv.imshow()\uff1a\u663e\u793a\u56fe\u50cf \u200b cv.imwrite(): \u4fdd\u5b58\u56fe\u50cf 2.\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u51e0\u4f55\u56fe\u50cf \u200b cv.line(): \u7ed8\u5236\u76f4\u7ebf \u200b cv.circle(): \u7ed8\u5236\u5706\u5f62 \u200b cv.rectangle(): \u7ed8\u5236\u77e9\u5f62 \u200b cv.putText(): \u5728\u56fe\u50cf\u4e0a\u6dfb\u52a0\u6587\u5b57 3.\u56fe\u50cf\u52a0\u6cd5\uff1a\u5c06\u4e24\u5e45\u56fe\u50cf\u52a0\u8f7d\u4e00\u8d77 \u200b cv.add() 4.\u56fe\u50cf\u7684\u6df7\u5408\uff1a\u5c06\u4e24\u5e45\u56fe\u50cf\u6309\u7167\u4e0d\u540c\u7684\u6bd4\u4f8b\u8fdb\u884c\u6df7\u5408 \u200b cv.addweight() \u200b \u6ce8\u610f\uff1a\u56fe\u50cf\u52a0\u6cd5\u548c\u56fe\u50cf\u6df7\u5408\u90fd\u8981\u6c42\u4e24\u5e45\u56fe\u50cf\u662f\u76f8\u540c\u5927\u5c0f\u7684\u3002","title":"4.2 \u56fe\u50cf\u7684\u57fa\u7840\u64cd\u4f5c"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#42","text":"\u5b66\u4e60\u76ee\u6807 \u638c\u63e1\u56fe\u50cf\u7684\u8bfb\u53d6\u548c\u4fdd\u5b58\u65b9\u6cd5 \u80fd\u591f\u4f7f\u7528OpenCV\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u51e0\u4f55\u56fe\u5f62 \u4e86\u89e3\u56fe\u50cf\u7684\u52a0\u6cd5\u3001\u6df7\u5408\u64cd\u4f5c","title":"4.2 \u56fe\u50cf\u7684\u57fa\u7840\u64cd\u4f5c"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#1-io","text":"\u8fd9\u91cc\u6211\u4eec\u4f1a\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u5982\u4f55\u8bfb\u53d6\u56fe\u50cf\uff0c\u5982\u4f55\u663e\u793a\u56fe\u50cf\u548c\u5982\u4f55\u4fdd\u5b58\u56fe\u50cf\u3002","title":"1 \u56fe\u50cf\u7684IO\u64cd\u4f5c"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#11","text":"API cv . imread () \u53c2\u6570\uff1a \u8981\u8bfb\u53d6\u7684\u56fe\u50cf \u8bfb\u53d6\u65b9\u5f0f\u7684\u6807\u5fd7 cv.IMREAD*COLOR\uff1a\u4ee5\u5f69\u8272\u6a21\u5f0f\u52a0\u8f7d\u56fe\u50cf\uff0c\u4efb\u4f55\u56fe\u50cf\u7684\u900f\u660e\u5ea6\u90fd\u5c06\u88ab\u5ffd\u7565\u3002\u8fd9\u662f\u9ed8\u8ba4\u53c2\u6570\u3002 cv.IMREAD*GRAYSCALE\uff1a\u4ee5\u7070\u5ea6\u6a21\u5f0f\u52a0\u8f7d\u56fe\u50cf cv.IMREAD_UNCHANGED\uff1a\u5305\u62ecalpha\u901a\u9053\u7684\u52a0\u8f7d\u56fe\u50cf\u6a21\u5f0f\u3002 \u53ef\u4ee5\u4f7f\u75281\u30010\u6216\u8005-1\u6765\u66ff\u4ee3\u4e0a\u9762\u4e09\u4e2a\u6807\u5fd7 \u53c2\u8003\u4ee3\u7801 import numpy as np import cv2 as cv # \u4ee5\u7070\u5ea6\u56fe\u7684\u5f62\u5f0f\u8bfb\u53d6\u56fe\u50cf img = cv . imread ( 'messi5.jpg' , 0 ) \u6ce8\u610f\uff1a\u5982\u679c\u52a0\u8f7d\u7684\u8def\u5f84\u6709\u9519\u8bef\uff0c\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2aNone\u503c","title":"1.1 \u8bfb\u53d6\u56fe\u50cf"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#12","text":"1 . API cv . imshow () \u53c2\u6570\uff1a \u663e\u793a\u56fe\u50cf\u7684\u7a97\u53e3\u540d\u79f0\uff0c\u4ee5\u5b57\u7b26\u4e32\u7c7b\u578b\u8868\u793a \u8981\u52a0\u8f7d\u7684\u56fe\u50cf \u6ce8\u610f\uff1a\u5728\u8c03\u7528\u663e\u793a\u56fe\u50cf\u7684API\u540e\uff0c\u8981\u8c03\u7528cv.waitKey()\u7ed9\u56fe\u50cf\u7ed8\u5236\u7559\u4e0b\u65f6\u95f4\uff0c\u5426\u5219\u7a97\u53e3\u4f1a\u51fa\u73b0\u65e0\u54cd\u5e94\u60c5\u51b5\uff0c\u5e76\u4e14\u56fe\u50cf\u65e0\u6cd5\u663e\u793a\u51fa\u6765 \u3002 \u53e6\u5916\u6211\u4eec\u4e5f\u53ef\u4f7f\u7528matplotlib\u5bf9\u56fe\u50cf\u8fdb\u884c\u5c55\u793a\u3002 \u53c2\u8003\u4ee3\u7801 # opencv\u4e2d\u663e\u793a cv . imshow ( 'image' , img ) cv . waitKey ( 0 ) # matplotlib\u4e2d\u5c55\u793a plt . imshow ( img [:,:,:: - 1 ])","title":"1.2\u663e\u793a\u56fe\u50cf"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#13","text":"API cv . imwrite () \u53c2\u6570\uff1a \u6587\u4ef6\u540d\uff0c\u8981\u4fdd\u5b58\u5728\u54ea\u91cc \u8981\u4fdd\u5b58\u7684\u56fe\u50cf \u53c2\u8003\u4ee3\u7801 cv . imwrite ( 'messigray.png' , img )","title":"1.3 \u4fdd\u5b58\u56fe\u50cf"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#14","text":"\u6211\u4eec\u901a\u8fc7\u52a0\u8f7d\u7070\u5ea6\u56fe\u50cf\uff0c\u663e\u793a\u56fe\u50cf\uff0c\u5982\u679c\u6309's'\u5e76\u9000\u51fa\u5219\u4fdd\u5b58\u56fe\u50cf\uff0c\u6216\u8005\u6309ESC\u952e\u76f4\u63a5\u9000\u51fa\u800c\u4e0d\u4fdd\u5b58\u3002 import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( 'messi5.jpg' , 0 ) # 2 \u663e\u793a\u56fe\u50cf # 2.1 \u5229\u7528opencv\u5c55\u793a\u56fe\u50cf cv . imshow ( 'image' , img ) # 2.2 \u5728matplotplotlib\u4e2d\u5c55\u793a\u56fe\u50cf plt . imshow ( img [:,:,:: - 1 ]) plt . title ( '\u5339\u914d\u7ed3\u679c' ), plt . xticks ([]), plt . yticks ([]) plt . show () k = cv . waitKey ( 0 ) # 3 \u4fdd\u5b58\u56fe\u50cf cv . imwrite ( 'messigray.png' , img )","title":"1.4 \u603b\u7ed3"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#2","text":"","title":"2 \u7ed8\u5236\u51e0\u4f55\u56fe\u5f62"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#21","text":"cv.line(img,start,end,color,thickness) \u53c2\u6570\uff1a img:\u8981\u7ed8\u5236\u76f4\u7ebf\u7684\u56fe\u50cf Start,end: \u76f4\u7ebf\u7684\u8d77\u70b9\u548c\u7ec8\u70b9 color: \u7ebf\u6761\u7684\u989c\u8272 Thickness: \u7ebf\u6761\u5bbd\u5ea6","title":"2.1 \u7ed8\u5236\u76f4\u7ebf"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#22","text":"cv . circle ( img , centerpoint , r , color , thickness ) \u53c2\u6570\uff1a img:\u8981\u7ed8\u5236\u5706\u5f62\u7684\u56fe\u50cf Centerpoint, r: \u5706\u5fc3\u548c\u534a\u5f84 color: \u7ebf\u6761\u7684\u989c\u8272 Thickness: \u7ebf\u6761\u5bbd\u5ea6\uff0c\u4e3a-1\u65f6\u751f\u6210\u95ed\u5408\u56fe\u6848\u5e76\u586b\u5145\u989c\u8272","title":"2.2 \u7ed8\u5236\u5706\u5f62"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#23","text":"cv . rectangle ( img , leftupper , rightdown , color , thickness ) \u53c2\u6570\uff1a img:\u8981\u7ed8\u5236\u77e9\u5f62\u7684\u56fe\u50cf Leftupper, rightdown: \u77e9\u5f62\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u5750\u6807 color: \u7ebf\u6761\u7684\u989c\u8272 Thickness: \u7ebf\u6761\u5bbd\u5ea6","title":"2.3 \u7ed8\u5236\u77e9\u5f62"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#24","text":"cv . putText ( img , text , station , font , fontsize , color , thickness , cv . LINE_AA ) \u53c2\u6570\uff1a img: \u56fe\u50cf text\uff1a\u8981\u5199\u5165\u7684\u6587\u672c\u6570\u636e station\uff1a\u6587\u672c\u7684\u653e\u7f6e\u4f4d\u7f6e font\uff1a\u5b57\u4f53 Fontsize :\u5b57\u4f53\u5927\u5c0f","title":"2.4 \u5411\u56fe\u50cf\u4e2d\u6dfb\u52a0\u6587\u5b57"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#25","text":"\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u5168\u9ed1\u7684\u56fe\u50cf\uff0c\u7136\u540e\u5728\u91cc\u9762\u7ed8\u5236\u56fe\u50cf\u5e76\u6dfb\u52a0\u6587\u5b57 import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u521b\u5efa\u4e00\u4e2a\u7a7a\u767d\u7684\u56fe\u50cf img = np . zeros (( 512 , 512 , 3 ), np . uint8 ) # 2 \u7ed8\u5236\u56fe\u5f62 cv . line ( img ,( 0 , 0 ),( 511 , 511 ),( 255 , 0 , 0 ), 5 ) cv . rectangle ( img ,( 384 , 0 ),( 510 , 128 ),( 0 , 255 , 0 ), 3 ) cv . circle ( img ,( 447 , 63 ), 63 , ( 0 , 0 , 255 ), - 1 ) font = cv . FONT_HERSHEY_SIMPLEX cv . putText ( img , 'OpenCV' ,( 10 , 500 ), font , 4 ,( 255 , 255 , 255 ), 2 , cv . LINE_AA ) # 3 \u56fe\u50cf\u5c55\u793a plt . imshow ( img [:,:,:: - 1 ]) plt . title ( '\u5339\u914d\u7ed3\u679c' ), plt . xticks ([]), plt . yticks ([]) plt . show () \u7ed3\u679c\uff1a","title":"2.5 \u6548\u679c\u5c55\u793a"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#3","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528OpenCV\u7684cv.add()\u51fd\u6570\u628a\u4e24\u5e45\u56fe\u50cf\u76f8\u52a0\uff0c\u6216\u8005\u53ef\u4ee5\u7b80\u5355\u5730\u901a\u8fc7numpy\u64cd\u4f5c\u6dfb\u52a0\u4e24\u4e2a\u56fe\u50cf\uff0c\u5982res = img1 + img2\u3002\u4e24\u4e2a\u56fe\u50cf\u5e94\u8be5\u5177\u6709\u76f8\u540c\u7684\u5927\u5c0f\u548c\u7c7b\u578b\uff0c\u6216\u8005\u7b2c\u4e8c\u4e2a\u56fe\u50cf\u53ef\u4ee5\u662f\u6807\u91cf\u503c\u3002 \u6ce8\u610f\uff1aOpenCV\u52a0\u6cd5\u548cNumpy\u52a0\u6cd5\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\u3002OpenCV\u7684\u52a0\u6cd5\u662f\u9971\u548c\u64cd\u4f5c\uff0c\u800cNumpy\u6dfb\u52a0\u662f\u6a21\u8fd0\u7b97\u3002 \u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\uff1a >>> x = np . uint8 ([ 250 ]) >>> y = np . uint8 ([ 10 ]) >>> print ( cv . add ( x , y ) ) # 250+10 = 260 => 255 [[ 255 ]] >>> print ( x + y ) # 250+10 = 260 % 256 = 4 [ 4 ] \u8fd9\u79cd\u5dee\u522b\u5728\u4f60\u5bf9\u4e24\u5e45\u56fe\u50cf\u8fdb\u884c\u52a0\u6cd5\u65f6\u4f1a\u66f4\u52a0\u660e\u663e\u3002OpenCV \u7684\u7ed3\u679c\u4f1a\u66f4\u597d\u4e00\u70b9\u3002\u6240\u4ee5\u6211\u4eec\u5c3d\u91cf\u4f7f\u7528 OpenCV \u4e2d\u7684\u51fd\u6570\u3002 \u6211\u4eec\u5c06\u4e0b\u9762\u4e24\u5e45\u56fe\u50cf\uff1a \u4ee3\u7801\uff1a import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img1 = cv . imread ( \"view.jpg\" ) img2 = cv . imread ( \"rain.jpg\" ) # 2 \u52a0\u6cd5\u64cd\u4f5c img3 = cv . add ( img1 , img2 ) # cv\u4e2d\u7684\u52a0\u6cd5 img4 = img1 + img2 # \u76f4\u63a5\u76f8\u52a0 # 3 \u56fe\u50cf\u663e\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img3 [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"cv\u4e2d\u7684\u52a0\u6cd5\" ) axes [ 1 ] . imshow ( img4 [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u76f4\u63a5\u76f8\u52a0\" ) plt . show () \u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a","title":"3.\u56fe\u50cf\u7684\u52a0\u6cd5"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/02-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#4","text":"\u8fd9\u5176\u5b9e\u4e5f\u662f\u52a0\u6cd5\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u662f\u4e24\u5e45\u56fe\u50cf\u7684\u6743\u91cd\u4e0d\u540c\uff0c\u8fd9\u5c31\u4f1a\u7ed9\u4eba\u4e00\u79cd\u6df7\u5408\u6216\u8005\u900f\u660e\u7684\u611f\u89c9\u3002\u56fe\u50cf\u6df7\u5408\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a g(x) = (1\u2212\u03b1)f0(x) + \u03b1f1(x) \u901a\u8fc7\u4fee\u6539 \u03b1 \u7684\u503c\uff080 \u2192 1\uff09\uff0c\u53ef\u4ee5\u5b9e\u73b0\u975e\u5e38\u70ab\u9177\u7684\u6df7\u5408\u3002 \u73b0\u5728\u6211\u4eec\u628a\u4e24\u5e45\u56fe\u6df7\u5408\u5728\u4e00\u8d77\u3002\u7b2c\u4e00\u5e45\u56fe\u7684\u6743\u91cd\u662f0.7\uff0c\u7b2c\u4e8c\u5e45\u56fe\u7684\u6743\u91cd\u662f0.3\u3002\u51fd\u6570cv2.addWeighted()\u53ef\u4ee5\u6309\u4e0b\u9762\u7684\u516c\u5f0f\u5bf9\u56fe\u7247\u8fdb\u884c\u6df7\u5408\u64cd\u4f5c\u3002 dst = \u03b1\u22c5img1 + \u03b2\u22c5img2 + \u03b3 \u8fd9\u91cc\u03b3\u53d6\u4e3a\u96f6\u3002 \u53c2\u8003\u4ee5\u4e0b\u4ee3\u7801\uff1a import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img1 = cv . imread ( \"view.jpg\" ) img2 = cv . imread ( \"rain.jpg\" ) # 2 \u56fe\u50cf\u6df7\u5408 img3 = cv . addWeighted ( img1 , 0.7 , img2 , 0.3 , 0 ) # 3 \u56fe\u50cf\u663e\u793a plt . figure ( figsize = ( 8 , 8 )) plt . imshow ( img3 [:,:,:: - 1 ]) plt . show () \u7a97\u53e3\u5c06\u5982\u4e0b\u56fe\u663e\u793a\uff1a \u603b\u7ed3\uff1a 1.\u56fe\u50cfIO\u64cd\u4f5c\u7684API\uff1a \u200b cv.imread(): \u8bfb\u53d6\u56fe\u50cf \u200b cv.imshow()\uff1a\u663e\u793a\u56fe\u50cf \u200b cv.imwrite(): \u4fdd\u5b58\u56fe\u50cf 2.\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u51e0\u4f55\u56fe\u50cf \u200b cv.line(): \u7ed8\u5236\u76f4\u7ebf \u200b cv.circle(): \u7ed8\u5236\u5706\u5f62 \u200b cv.rectangle(): \u7ed8\u5236\u77e9\u5f62 \u200b cv.putText(): \u5728\u56fe\u50cf\u4e0a\u6dfb\u52a0\u6587\u5b57 3.\u56fe\u50cf\u52a0\u6cd5\uff1a\u5c06\u4e24\u5e45\u56fe\u50cf\u52a0\u8f7d\u4e00\u8d77 \u200b cv.add() 4.\u56fe\u50cf\u7684\u6df7\u5408\uff1a\u5c06\u4e24\u5e45\u56fe\u50cf\u6309\u7167\u4e0d\u540c\u7684\u6bd4\u4f8b\u8fdb\u884c\u6df7\u5408 \u200b cv.addweight() \u200b \u6ce8\u610f\uff1a\u56fe\u50cf\u52a0\u6cd5\u548c\u56fe\u50cf\u6df7\u5408\u90fd\u8981\u6c42\u4e24\u5e45\u56fe\u50cf\u662f\u76f8\u540c\u5927\u5c0f\u7684\u3002","title":"4.\u56fe\u50cf\u7684\u6df7\u5408"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/03-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/","text":"4.3 \u51e0\u4f55\u53d8\u6362 \u00b6 \u5b66\u4e60\u76ee\u6807 \u638c\u63e1\u56fe\u50cf\u7684\u7f29\u653e\uff0c\u5e73\u79fb\uff0c\u65cb\u8f6c\u7b49 \u4e86\u89e3\u6570\u5b57\u56fe\u50cf\u7684\u4eff\u5c04\u53d8\u6362\u548c\u900f\u5c04\u53d8\u6362 1 \u56fe\u50cf\u7f29\u653e \u00b6 \u7f29\u653e\u662f\u5bf9\u56fe\u50cf\u7684\u5927\u5c0f\u8fdb\u884c\u8c03\u6574\uff0c\u5373\u4f7f\u56fe\u50cf\u653e\u5927\u6216\u7f29\u5c0f\u3002 1.1 API cv2 . resize ( src , dsize , fx = 0 , fy = 0 , interpolation = cv2 . INTER_LINEAR ) \u53c2\u6570\uff1a src : \u8f93\u5165\u56fe\u50cf dsize: \u7edd\u5bf9\u5c3a\u5bf8\uff0c\u76f4\u63a5\u6307\u5b9a\u8c03\u6574\u540e\u56fe\u50cf\u7684\u5927\u5c0f fx,fy: \u76f8\u5bf9\u5c3a\u5bf8\uff0c\u5c06dsize\u8bbe\u7f6e\u4e3aNone\uff0c\u7136\u540e\u5c06fx\u548cfy\u8bbe\u7f6e\u4e3a\u6bd4\u4f8b\u56e0\u5b50\u5373\u53ef interpolation\uff1a\u63d2\u503c\u65b9\u6cd5\uff0c 1.2 \u793a\u4f8b import cv2 as cv # 1. \u8bfb\u53d6\u56fe\u7247 img1 = cv . imread ( \"./image/dog.jpeg\" ) # 2.\u56fe\u50cf\u7f29\u653e # 2.1 \u7edd\u5bf9\u5c3a\u5bf8 rows , cols = img1 . shape [: 2 ] res = cv . resize ( img1 ,( 2 * cols , 2 * rows ), interpolation = cv . INTER_CUBIC ) # 2.2 \u76f8\u5bf9\u5c3a\u5bf8 res1 = cv . resize ( img1 , None , fx = 0.5 , fy = 0.5 ) # 3 \u56fe\u50cf\u663e\u793a # 3.1 \u4f7f\u7528opencv\u663e\u793a\u56fe\u50cf cv . imshow ( \"orignal\" , img1 ) cv . imshow ( \"enlarge\" , res ) cv . imshow ( \"shrink\uff09\" , res1 ) cv . waitKey ( 0 ) # 3.2 \u4f7f\u7528matplotlib\u663e\u793a\u56fe\u50cf fig , axes = plt . subplots ( nrows = 1 , ncols = 3 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( res [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u7edd\u5bf9\u5c3a\u5ea6\uff08\u653e\u5927\uff09\" ) axes [ 1 ] . imshow ( img1 [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u539f\u56fe\" ) axes [ 2 ] . imshow ( res1 [:,:,:: - 1 ]) axes [ 2 ] . set_title ( \"\u76f8\u5bf9\u5c3a\u5ea6\uff08\u7f29\u5c0f\uff09\" ) plt . show () 2 \u56fe\u50cf\u5e73\u79fb \u00b6 \u56fe\u50cf\u5e73\u79fb\u5c06\u56fe\u50cf\u6309\u7167\u6307\u5b9a\u65b9\u5411\u548c\u8ddd\u79bb\uff0c\u79fb\u52a8\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u3002 2.1 API cv . warpAffine ( img , M , dsize ) \u53c2\u6570\uff1a img: \u8f93\u5165\u56fe\u50cf M\uff1a 2 * * 3\u79fb\u52a8\u77e9\u9635 \u5bf9\u4e8e(x,y)\u5904\u7684\u50cf\u7d20\u70b9\uff0c\u8981\u628a\u5b83\u79fb\u52a8\u5230( x+t_x , y+t_y x+t_x , y+t_y )\u5904\u65f6\uff0cM\u77e9\u9635\u5e94\u5982\u4e0b\u8bbe\u7f6e\uff1a M=\\begin{bmatrix} 1&0&t_x\\\\ 0&1&t_y\\\\ \\end{bmatrix} M=\\begin{bmatrix} 1&0&t_x\\\\ 0&1&t_y\\\\ \\end{bmatrix} \u6ce8\u610f\uff1a\u5c06 M M \u8bbe\u7f6e\u4e3anp.float32\u7c7b\u578b\u7684Numpy\u6570\u7ec4\u3002 dsize: \u8f93\u51fa\u56fe\u50cf\u7684\u5927\u5c0f \u6ce8\u610f\uff1a\u8f93\u51fa\u56fe\u50cf\u7684\u5927\u5c0f\uff0c\u5b83\u5e94\u8be5\u662f(\u5bbd\u5ea6\uff0c\u9ad8\u5ea6)\u7684\u5f62\u5f0f\u3002\u8bf7\u8bb0\u4f4f,width=\u5217\u6570\uff0cheight=\u884c\u6570\u3002 2.2 \u793a\u4f8b \u9700\u6c42\u662f\u5c06\u56fe\u50cf\u7684\u50cf\u7d20\u70b9\u79fb\u52a8(50,100)\u7684\u8ddd\u79bb\uff1a import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1. \u8bfb\u53d6\u56fe\u50cf img1 = cv . imread ( \"./image/image2.jpg\" ) # 2. \u56fe\u50cf\u5e73\u79fb rows , cols = img1 . shape [: 2 ] M = M = np . float32 ([[ 1 , 0 , 100 ],[ 0 , 1 , 50 ]]) # \u5e73\u79fb\u77e9\u9635 dst = cv . warpAffine ( img1 , M ,( cols , rows )) # 3. \u56fe\u50cf\u663e\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img1 [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u539f\u56fe\" ) axes [ 1 ] . imshow ( dst [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u5e73\u79fb\u540e\u7ed3\u679c\" ) plt . show () 3 \u56fe\u50cf\u65cb\u8f6c \u00b6 \u56fe\u50cf\u65cb\u8f6c\u662f\u6307\u56fe\u50cf\u6309\u7167\u67d0\u4e2a\u4f4d\u7f6e\u8f6c\u52a8\u4e00\u5b9a\u89d2\u5ea6\u7684\u8fc7\u7a0b\uff0c\u65cb\u8f6c\u4e2d\u56fe\u50cf\u4ecd\u4fdd\u6301\u8fd9\u539f\u59cb\u5c3a\u5bf8\u3002\u56fe\u50cf\u65cb\u8f6c\u540e\u56fe\u50cf\u7684\u6c34\u5e73\u5bf9\u79f0\u8f74\u3001\u5782\u76f4\u5bf9\u79f0\u8f74\u53ca\u4e2d\u5fc3\u5750\u6807\u539f\u70b9\u90fd\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u6362\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u56fe\u50cf\u65cb\u8f6c\u4e2d\u7684\u5750\u6807\u8fdb\u884c\u76f8\u5e94\u8f6c\u6362\u3002 \u5728OpenCV\u4e2d\u56fe\u50cf\u65cb\u8f6c\u9996\u5148\u6839\u636e\u65cb\u8f6c\u89d2\u5ea6\u548c\u65cb\u8f6c\u4e2d\u5fc3\u83b7\u53d6\u65cb\u8f6c\u77e9\u9635\uff0c\u7136\u540e\u6839\u636e\u65cb\u8f6c\u77e9\u9635\u8fdb\u884c\u53d8\u6362\uff0c\u5373\u53ef\u5b9e\u73b0\u4efb\u610f\u89d2\u5ea6\u548c\u4efb\u610f\u4e2d\u5fc3\u7684\u65cb\u8f6c\u6548\u679c\u3002 3.1 API cv2.getRotationMatrix2D(center, angle, scale) \u53c2\u6570\uff1a center\uff1a\u65cb\u8f6c\u4e2d\u5fc3 angle\uff1a\u65cb\u8f6c\u89d2\u5ea6 scale\uff1a\u7f29\u653e\u6bd4\u4f8b \u8fd4\u56de\uff1a M\uff1a\u65cb\u8f6c\u77e9\u9635 \u8c03\u7528cv.warpAffine\u5b8c\u6210\u56fe\u50cf\u7684\u65cb\u8f6c 3.2 \u793a\u4f8b import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( \"./image/image2.jpg\" ) # 2 \u56fe\u50cf\u65cb\u8f6c rows , cols = img . shape [: 2 ] # 2.1 \u751f\u6210\u65cb\u8f6c\u77e9\u9635 M = cv . getRotationMatrix2D (( cols / 2 , rows / 2 ), 90 , 1 ) # 2.2 \u8fdb\u884c\u65cb\u8f6c\u53d8\u6362 dst = cv . warpAffine ( img , M ,( cols , rows )) # 3 \u56fe\u50cf\u5c55\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img1 [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u539f\u56fe\" ) axes [ 1 ] . imshow ( dst [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u65cb\u8f6c\u540e\u7ed3\u679c\" ) plt . show () 4 \u4eff\u5c04\u53d8\u6362 \u00b6 \u56fe\u50cf\u7684\u4eff\u5c04\u53d8\u6362\u6d89\u53ca\u5230\u56fe\u50cf\u7684\u5f62\u72b6\u4f4d\u7f6e\u89d2\u5ea6\u7684\u53d8\u5316\uff0c\u662f\u6df1\u5ea6\u5b66\u4e60\u9884\u5904\u7406\u4e2d\u5e38\u5230\u7684\u529f\u80fd,\u4eff\u5c04\u53d8\u6362\u4e3b\u8981\u662f\u5bf9\u56fe\u50cf\u7684\u7f29\u653e\uff0c\u65cb\u8f6c\uff0c\u7ffb\u8f6c\u548c\u5e73\u79fb\u7b49\u64cd\u4f5c\u7684\u7ec4\u5408\u3002 \u90a3\u4ec0\u4e48\u662f\u56fe\u50cf\u7684\u4eff\u5c04\u53d8\u6362\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u56fe1\u4e2d\u7684\u70b91, 2 \u548c 3 \u4e0e\u56fe\u4e8c\u4e2d\u4e09\u4e2a\u70b9\u4e00\u4e00\u6620\u5c04, \u4ecd\u7136\u5f62\u6210\u4e09\u89d2\u5f62, \u4f46\u5f62\u72b6\u5df2\u7ecf\u5927\u5927\u6539\u53d8\uff0c\u901a\u8fc7\u8fd9\u6837\u4e24\u7ec4\u4e09\u70b9\uff08\u611f\u5174\u8da3\u70b9\uff09\u6c42\u51fa\u4eff\u5c04\u53d8\u6362\uff0c \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u80fd\u628a\u4eff\u5c04\u53d8\u6362\u5e94\u7528\u5230\u56fe\u50cf\u4e2d\u6240\u6709\u7684\u70b9\u4e2d\uff0c\u5c31\u5b8c\u6210\u4e86\u56fe\u50cf\u7684\u4eff\u5c04\u53d8\u6362\u3002 \u5728OpenCV\u4e2d\uff0c\u4eff\u5c04\u53d8\u6362\u7684\u77e9\u9635\u662f\u4e00\u4e2a2\u00d73\u7684\u77e9\u9635\uff0c M = \\left[\\begin{matrix} A & B \\end{matrix}\\right]=\\left[\\begin{matrix} a_{00}& a_{01}&b_0\\\\ a_{10}&a_{11}&b_1 \\end{matrix}\\right] M = \\left[\\begin{matrix} A & B \\end{matrix}\\right]=\\left[\\begin{matrix} a_{00}& a_{01}&b_0\\\\ a_{10}&a_{11}&b_1 \\end{matrix}\\right] \u5176\u4e2d\u5de6\u8fb9\u76842\u00d72\u5b50\u77e9\u9635 A A \u662f\u7ebf\u6027\u53d8\u6362\u77e9\u9635\uff0c\u53f3\u8fb9\u76842\u00d71\u5b50\u77e9\u9635 B B \u662f\u5e73\u79fb\u9879\uff1a A=\\left[ \\begin{matrix} a_{00} & a_{01}\\\\ a_{10} & a_{11} \\end{matrix} \\right], B=\\left[ \\begin{matrix} b_{0}\\\\ b_{1} \\end{matrix} \\right] A=\\left[ \\begin{matrix} a_{00} & a_{01}\\\\ a_{10} & a_{11} \\end{matrix} \\right], B=\\left[ \\begin{matrix} b_{0}\\\\ b_{1} \\end{matrix} \\right] \u5bf9\u4e8e\u56fe\u50cf\u4e0a\u7684\u4efb\u4e00\u4f4d\u7f6e(x,y)\uff0c\u4eff\u5c04\u53d8\u6362\u6267\u884c\u7684\u662f\u5982\u4e0b\u7684\u64cd\u4f5c\uff1a T_{affine}=A\\left[\\begin{matrix} x\\\\ y \\end{matrix} \\right]+B=M\\left[\\begin{matrix}x\\\\y\\\\1\\end{matrix}\\right] T_{affine}=A\\left[\\begin{matrix} x\\\\ y \\end{matrix} \\right]+B=M\\left[\\begin{matrix}x\\\\y\\\\1\\end{matrix}\\right] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u56fe\u50cf\u800c\u8a00\uff0c\u5bbd\u5ea6\u65b9\u5411\u662fx\uff0c\u9ad8\u5ea6\u65b9\u5411\u662fy\uff0c\u5750\u6807\u7684\u987a\u5e8f\u548c\u56fe\u50cf\u50cf\u7d20\u5bf9\u5e94\u4e0b\u6807\u4e00\u81f4\u3002\u6240\u4ee5\u539f\u70b9\u7684\u4f4d\u7f6e\u4e0d\u662f\u5de6\u4e0b\u89d2\u800c\u662f\u53f3\u4e0a\u89d2\uff0cy\u7684\u65b9\u5411\u4e5f\u4e0d\u662f\u5411\u4e0a\uff0c\u800c\u662f\u5411\u4e0b\u3002 \u5728\u4eff\u5c04\u53d8\u6362\u4e2d\uff0c\u539f\u56fe\u4e2d\u6240\u6709\u7684\u5e73\u884c\u7ebf\u5728\u7ed3\u679c\u56fe\u50cf\u4e2d\u540c\u6837\u5e73\u884c\u3002\u4e3a\u4e86\u521b\u5efa\u8fd9\u4e2a\u77e9\u9635\u6211\u4eec\u9700\u8981\u4ece\u539f\u56fe\u50cf\u4e2d\u627e\u5230\u4e09\u4e2a\u70b9\u4ee5\u53ca\u4ed6\u4eec\u5728\u8f93\u51fa\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6e\u3002\u7136\u540ecv2.getA\ufb03neTransform \u4f1a\u521b\u5efa\u4e00\u4e2a 2x3 \u7684\u77e9\u9635\uff0c\u6700\u540e\u8fd9\u4e2a\u77e9\u9635\u4f1a\u88ab\u4f20\u7ed9\u51fd\u6570 cv2.warpA\ufb03ne\u3002 \u793a\u4f8b import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( \"./image/image2.jpg\" ) # 2 \u4eff\u5c04\u53d8\u6362 rows , cols = img . shape [: 2 ] # 2.1 \u521b\u5efa\u53d8\u6362\u77e9\u9635 pts1 = np . float32 ([[ 50 , 50 ],[ 200 , 50 ],[ 50 , 200 ]]) pts2 = np . float32 ([[ 100 , 100 ],[ 200 , 50 ],[ 100 , 250 ]]) M = cv . getAffineTransform ( pts1 , pts2 ) # 2.2 \u5b8c\u6210\u4eff\u5c04\u53d8\u6362 dst = cv . warpAffine ( img , M ,( cols , rows )) # 3 \u56fe\u50cf\u663e\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u539f\u56fe\" ) axes [ 1 ] . imshow ( dst [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u4eff\u5c04\u540e\u7ed3\u679c\" ) plt . show () 5 \u900f\u5c04\u53d8\u6362 \u00b6 \u900f\u5c04\u53d8\u6362\u662f\u89c6\u89d2\u53d8\u5316\u7684\u7ed3\u679c\uff0c\u662f\u6307\u5229\u7528\u900f\u89c6\u4e2d\u5fc3\u3001\u50cf\u70b9\u3001\u76ee\u6807\u70b9\u4e09\u70b9\u5171\u7ebf\u7684\u6761\u4ef6\uff0c\u6309\u900f\u89c6\u65cb\u8f6c\u5b9a\u5f8b\u4f7f\u627f\u5f71\u9762\uff08\u900f\u89c6\u9762\uff09\u7ed5\u8ff9\u7ebf\uff08\u900f\u89c6\u8f74\uff09\u65cb\u8f6c\u67d0\u4e00\u89d2\u5ea6\uff0c\u7834\u574f\u539f\u6709\u7684\u6295\u5f71\u5149\u7ebf\u675f\uff0c\u4ecd\u80fd\u4fdd\u6301\u627f\u5f71\u9762\u4e0a\u6295\u5f71\u51e0\u4f55\u56fe\u5f62\u4e0d\u53d8\u7684\u53d8\u6362\u3002 \u5b83\u7684\u672c\u8d28\u5c06\u56fe\u50cf\u6295\u5f71\u5230\u4e00\u4e2a\u65b0\u7684\u89c6\u5e73\u9762\uff0c\u5176\u901a\u7528\u53d8\u6362\u516c\u5f0f\u4e3a\uff1a \\left[\\begin{matrix} x' & y'& z' \\end{matrix}\\right]=\\left[\\begin{matrix} u & v & w \\end{matrix}\\right]\\left[\\begin{matrix} a_{00}& a_{01}&a_{02}\\\\ a_{10}&a_{11}&a_{12}\\\\ a_{20}&a_{21}&a_{22} \\end{matrix}\\right] \\left[\\begin{matrix} x' & y'& z' \\end{matrix}\\right]=\\left[\\begin{matrix} u & v & w \\end{matrix}\\right]\\left[\\begin{matrix} a_{00}& a_{01}&a_{02}\\\\ a_{10}&a_{11}&a_{12}\\\\ a_{20}&a_{21}&a_{22} \\end{matrix}\\right] \u5176\u4e2d\uff0c(u,v)\u662f\u539f\u59cb\u7684\u56fe\u50cf\u50cf\u7d20\u5750\u6807\uff0cw\u53d6\u503c\u4e3a1\uff0c(x=x'/z',y=y'/z')\u662f\u900f\u5c04\u53d8\u6362\u540e\u7684\u7ed3\u679c\u3002\u540e\u9762\u7684\u77e9\u9635\u79f0\u4e3a\u900f\u89c6\u53d8\u6362\u77e9\u9635\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5176\u5206\u4e3a\u4e09\u90e8\u5206\uff1a T = \\left[\\begin{matrix} a_{00}& a_{01}&a_{02}\\\\ a_{10}&a_{11}&a_{12}\\\\ a_{20}&a_{21}&a_{22} \\end{matrix}\\right] = \\left[\\begin{matrix} T1& T2\\\\ T3&a_{22} \\end{matrix}\\right] T = \\left[\\begin{matrix} a_{00}& a_{01}&a_{02}\\\\ a_{10}&a_{11}&a_{12}\\\\ a_{20}&a_{21}&a_{22} \\end{matrix}\\right] = \\left[\\begin{matrix} T1& T2\\\\ T3&a_{22} \\end{matrix}\\right] \u5176\u4e2d\uff1aT1\u8868\u793a\u5bf9\u56fe\u50cf\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\uff0cT2\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u79fb\uff0cT3\u8868\u793a\u5bf9\u56fe\u50cf\u8fdb\u884c\u6295\u5c04\u53d8\u6362\uff0c a_{22} a_{22} \u4e00\u822c\u8bbe\u4e3a1. \u5728opencv\u4e2d\uff0c\u6211\u4eec\u8981\u627e\u5230\u56db\u4e2a\u70b9\uff0c\u5176\u4e2d\u4efb\u610f\u4e09\u4e2a\u4e0d\u5171\u7ebf\uff0c\u7136\u540e\u83b7\u53d6\u53d8\u6362\u77e9\u9635T\uff0c\u518d\u8fdb\u884c\u900f\u5c04\u53d8\u6362\u3002\u901a\u8fc7\u51fd\u6570cv.getPerspectiveTransform\u627e\u5230\u53d8\u6362\u77e9\u9635\uff0c\u5c06cv.warpPerspective\u5e94\u7528\u4e8e\u6b643x3\u53d8\u6362\u77e9\u9635\u3002 \u793a\u4f8b import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( \"./image/image2.jpg\" ) # 2 \u900f\u5c04\u53d8\u6362 rows , cols = img . shape [: 2 ] # 2.1 \u521b\u5efa\u53d8\u6362\u77e9\u9635 pts1 = np . float32 ([[ 56 , 65 ],[ 368 , 52 ],[ 28 , 387 ],[ 389 , 390 ]]) pts2 = np . float32 ([[ 100 , 145 ],[ 300 , 100 ],[ 80 , 290 ],[ 310 , 300 ]]) T = cv . getPerspectiveTransform ( pts1 , pts2 ) # 2.2 \u8fdb\u884c\u53d8\u6362 dst = cv . warpPerspective ( img , T ,( cols , rows )) # 3 \u56fe\u50cf\u663e\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u539f\u56fe\" ) axes [ 1 ] . imshow ( dst [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u900f\u5c04\u540e\u7ed3\u679c\" ) plt . show () \u603b\u7ed3 1.\u56fe\u50cf\u7f29\u653e\uff1a\u5bf9\u56fe\u50cf\u8fdb\u884c\u653e\u5927\u6216\u7f29\u5c0f \u200b cv.resize() 2.\u56fe\u50cf\u5e73\u79fb\uff1a \u200b \u6307\u5b9a\u5e73\u79fb\u77e9\u9635\u540e\uff0c\u8c03\u7528cv.warpAffine()\u5e73\u79fb\u56fe\u50cf 3.\u56fe\u50cf\u65cb\u8f6c\uff1a \u200b \u8c03\u7528cv.getRotationMatrix2D\u83b7\u53d6\u65cb\u8f6c\u77e9\u9635\uff0c\u7136\u540e\u8c03\u7528cv.warpAffine()\u8fdb\u884c\u65cb\u8f6c 4.\u4eff\u5c04\u53d8\u6362\uff1a \u200b \u8c03\u7528cv.getAffineTransform\u5c06\u521b\u5efa\u53d8\u6362\u77e9\u9635\uff0c\u6700\u540e\u8be5\u77e9\u9635\u5c06\u4f20\u9012\u7ed9cv.warpAffine()\u8fdb\u884c\u53d8\u6362 5.\u900f\u5c04\u53d8\u6362\uff1a \u200b \u901a\u8fc7\u51fd\u6570cv.getPerspectiveTransform()\u627e\u5230\u53d8\u6362\u77e9\u9635\uff0c\u5c06cv.warpPerspective()\u8fdb\u884c\u6295\u5c04\u53d8\u6362","title":"4.3 \u51e0\u4f55\u53d8\u6362"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/03-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#43","text":"\u5b66\u4e60\u76ee\u6807 \u638c\u63e1\u56fe\u50cf\u7684\u7f29\u653e\uff0c\u5e73\u79fb\uff0c\u65cb\u8f6c\u7b49 \u4e86\u89e3\u6570\u5b57\u56fe\u50cf\u7684\u4eff\u5c04\u53d8\u6362\u548c\u900f\u5c04\u53d8\u6362","title":"4.3 \u51e0\u4f55\u53d8\u6362"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/03-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#1","text":"\u7f29\u653e\u662f\u5bf9\u56fe\u50cf\u7684\u5927\u5c0f\u8fdb\u884c\u8c03\u6574\uff0c\u5373\u4f7f\u56fe\u50cf\u653e\u5927\u6216\u7f29\u5c0f\u3002 1.1 API cv2 . resize ( src , dsize , fx = 0 , fy = 0 , interpolation = cv2 . INTER_LINEAR ) \u53c2\u6570\uff1a src : \u8f93\u5165\u56fe\u50cf dsize: \u7edd\u5bf9\u5c3a\u5bf8\uff0c\u76f4\u63a5\u6307\u5b9a\u8c03\u6574\u540e\u56fe\u50cf\u7684\u5927\u5c0f fx,fy: \u76f8\u5bf9\u5c3a\u5bf8\uff0c\u5c06dsize\u8bbe\u7f6e\u4e3aNone\uff0c\u7136\u540e\u5c06fx\u548cfy\u8bbe\u7f6e\u4e3a\u6bd4\u4f8b\u56e0\u5b50\u5373\u53ef interpolation\uff1a\u63d2\u503c\u65b9\u6cd5\uff0c 1.2 \u793a\u4f8b import cv2 as cv # 1. \u8bfb\u53d6\u56fe\u7247 img1 = cv . imread ( \"./image/dog.jpeg\" ) # 2.\u56fe\u50cf\u7f29\u653e # 2.1 \u7edd\u5bf9\u5c3a\u5bf8 rows , cols = img1 . shape [: 2 ] res = cv . resize ( img1 ,( 2 * cols , 2 * rows ), interpolation = cv . INTER_CUBIC ) # 2.2 \u76f8\u5bf9\u5c3a\u5bf8 res1 = cv . resize ( img1 , None , fx = 0.5 , fy = 0.5 ) # 3 \u56fe\u50cf\u663e\u793a # 3.1 \u4f7f\u7528opencv\u663e\u793a\u56fe\u50cf cv . imshow ( \"orignal\" , img1 ) cv . imshow ( \"enlarge\" , res ) cv . imshow ( \"shrink\uff09\" , res1 ) cv . waitKey ( 0 ) # 3.2 \u4f7f\u7528matplotlib\u663e\u793a\u56fe\u50cf fig , axes = plt . subplots ( nrows = 1 , ncols = 3 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( res [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u7edd\u5bf9\u5c3a\u5ea6\uff08\u653e\u5927\uff09\" ) axes [ 1 ] . imshow ( img1 [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u539f\u56fe\" ) axes [ 2 ] . imshow ( res1 [:,:,:: - 1 ]) axes [ 2 ] . set_title ( \"\u76f8\u5bf9\u5c3a\u5ea6\uff08\u7f29\u5c0f\uff09\" ) plt . show ()","title":"1 \u56fe\u50cf\u7f29\u653e"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/03-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#2","text":"\u56fe\u50cf\u5e73\u79fb\u5c06\u56fe\u50cf\u6309\u7167\u6307\u5b9a\u65b9\u5411\u548c\u8ddd\u79bb\uff0c\u79fb\u52a8\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u3002 2.1 API cv . warpAffine ( img , M , dsize ) \u53c2\u6570\uff1a img: \u8f93\u5165\u56fe\u50cf M\uff1a 2 * * 3\u79fb\u52a8\u77e9\u9635 \u5bf9\u4e8e(x,y)\u5904\u7684\u50cf\u7d20\u70b9\uff0c\u8981\u628a\u5b83\u79fb\u52a8\u5230( x+t_x , y+t_y x+t_x , y+t_y )\u5904\u65f6\uff0cM\u77e9\u9635\u5e94\u5982\u4e0b\u8bbe\u7f6e\uff1a M=\\begin{bmatrix} 1&0&t_x\\\\ 0&1&t_y\\\\ \\end{bmatrix} M=\\begin{bmatrix} 1&0&t_x\\\\ 0&1&t_y\\\\ \\end{bmatrix} \u6ce8\u610f\uff1a\u5c06 M M \u8bbe\u7f6e\u4e3anp.float32\u7c7b\u578b\u7684Numpy\u6570\u7ec4\u3002 dsize: \u8f93\u51fa\u56fe\u50cf\u7684\u5927\u5c0f \u6ce8\u610f\uff1a\u8f93\u51fa\u56fe\u50cf\u7684\u5927\u5c0f\uff0c\u5b83\u5e94\u8be5\u662f(\u5bbd\u5ea6\uff0c\u9ad8\u5ea6)\u7684\u5f62\u5f0f\u3002\u8bf7\u8bb0\u4f4f,width=\u5217\u6570\uff0cheight=\u884c\u6570\u3002 2.2 \u793a\u4f8b \u9700\u6c42\u662f\u5c06\u56fe\u50cf\u7684\u50cf\u7d20\u70b9\u79fb\u52a8(50,100)\u7684\u8ddd\u79bb\uff1a import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1. \u8bfb\u53d6\u56fe\u50cf img1 = cv . imread ( \"./image/image2.jpg\" ) # 2. \u56fe\u50cf\u5e73\u79fb rows , cols = img1 . shape [: 2 ] M = M = np . float32 ([[ 1 , 0 , 100 ],[ 0 , 1 , 50 ]]) # \u5e73\u79fb\u77e9\u9635 dst = cv . warpAffine ( img1 , M ,( cols , rows )) # 3. \u56fe\u50cf\u663e\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img1 [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u539f\u56fe\" ) axes [ 1 ] . imshow ( dst [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u5e73\u79fb\u540e\u7ed3\u679c\" ) plt . show ()","title":"2 \u56fe\u50cf\u5e73\u79fb"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/03-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#3","text":"\u56fe\u50cf\u65cb\u8f6c\u662f\u6307\u56fe\u50cf\u6309\u7167\u67d0\u4e2a\u4f4d\u7f6e\u8f6c\u52a8\u4e00\u5b9a\u89d2\u5ea6\u7684\u8fc7\u7a0b\uff0c\u65cb\u8f6c\u4e2d\u56fe\u50cf\u4ecd\u4fdd\u6301\u8fd9\u539f\u59cb\u5c3a\u5bf8\u3002\u56fe\u50cf\u65cb\u8f6c\u540e\u56fe\u50cf\u7684\u6c34\u5e73\u5bf9\u79f0\u8f74\u3001\u5782\u76f4\u5bf9\u79f0\u8f74\u53ca\u4e2d\u5fc3\u5750\u6807\u539f\u70b9\u90fd\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u6362\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u56fe\u50cf\u65cb\u8f6c\u4e2d\u7684\u5750\u6807\u8fdb\u884c\u76f8\u5e94\u8f6c\u6362\u3002 \u5728OpenCV\u4e2d\u56fe\u50cf\u65cb\u8f6c\u9996\u5148\u6839\u636e\u65cb\u8f6c\u89d2\u5ea6\u548c\u65cb\u8f6c\u4e2d\u5fc3\u83b7\u53d6\u65cb\u8f6c\u77e9\u9635\uff0c\u7136\u540e\u6839\u636e\u65cb\u8f6c\u77e9\u9635\u8fdb\u884c\u53d8\u6362\uff0c\u5373\u53ef\u5b9e\u73b0\u4efb\u610f\u89d2\u5ea6\u548c\u4efb\u610f\u4e2d\u5fc3\u7684\u65cb\u8f6c\u6548\u679c\u3002 3.1 API cv2.getRotationMatrix2D(center, angle, scale) \u53c2\u6570\uff1a center\uff1a\u65cb\u8f6c\u4e2d\u5fc3 angle\uff1a\u65cb\u8f6c\u89d2\u5ea6 scale\uff1a\u7f29\u653e\u6bd4\u4f8b \u8fd4\u56de\uff1a M\uff1a\u65cb\u8f6c\u77e9\u9635 \u8c03\u7528cv.warpAffine\u5b8c\u6210\u56fe\u50cf\u7684\u65cb\u8f6c 3.2 \u793a\u4f8b import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( \"./image/image2.jpg\" ) # 2 \u56fe\u50cf\u65cb\u8f6c rows , cols = img . shape [: 2 ] # 2.1 \u751f\u6210\u65cb\u8f6c\u77e9\u9635 M = cv . getRotationMatrix2D (( cols / 2 , rows / 2 ), 90 , 1 ) # 2.2 \u8fdb\u884c\u65cb\u8f6c\u53d8\u6362 dst = cv . warpAffine ( img , M ,( cols , rows )) # 3 \u56fe\u50cf\u5c55\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img1 [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u539f\u56fe\" ) axes [ 1 ] . imshow ( dst [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u65cb\u8f6c\u540e\u7ed3\u679c\" ) plt . show ()","title":"3 \u56fe\u50cf\u65cb\u8f6c"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/03-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#4","text":"\u56fe\u50cf\u7684\u4eff\u5c04\u53d8\u6362\u6d89\u53ca\u5230\u56fe\u50cf\u7684\u5f62\u72b6\u4f4d\u7f6e\u89d2\u5ea6\u7684\u53d8\u5316\uff0c\u662f\u6df1\u5ea6\u5b66\u4e60\u9884\u5904\u7406\u4e2d\u5e38\u5230\u7684\u529f\u80fd,\u4eff\u5c04\u53d8\u6362\u4e3b\u8981\u662f\u5bf9\u56fe\u50cf\u7684\u7f29\u653e\uff0c\u65cb\u8f6c\uff0c\u7ffb\u8f6c\u548c\u5e73\u79fb\u7b49\u64cd\u4f5c\u7684\u7ec4\u5408\u3002 \u90a3\u4ec0\u4e48\u662f\u56fe\u50cf\u7684\u4eff\u5c04\u53d8\u6362\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u56fe1\u4e2d\u7684\u70b91, 2 \u548c 3 \u4e0e\u56fe\u4e8c\u4e2d\u4e09\u4e2a\u70b9\u4e00\u4e00\u6620\u5c04, \u4ecd\u7136\u5f62\u6210\u4e09\u89d2\u5f62, \u4f46\u5f62\u72b6\u5df2\u7ecf\u5927\u5927\u6539\u53d8\uff0c\u901a\u8fc7\u8fd9\u6837\u4e24\u7ec4\u4e09\u70b9\uff08\u611f\u5174\u8da3\u70b9\uff09\u6c42\u51fa\u4eff\u5c04\u53d8\u6362\uff0c \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u80fd\u628a\u4eff\u5c04\u53d8\u6362\u5e94\u7528\u5230\u56fe\u50cf\u4e2d\u6240\u6709\u7684\u70b9\u4e2d\uff0c\u5c31\u5b8c\u6210\u4e86\u56fe\u50cf\u7684\u4eff\u5c04\u53d8\u6362\u3002 \u5728OpenCV\u4e2d\uff0c\u4eff\u5c04\u53d8\u6362\u7684\u77e9\u9635\u662f\u4e00\u4e2a2\u00d73\u7684\u77e9\u9635\uff0c M = \\left[\\begin{matrix} A & B \\end{matrix}\\right]=\\left[\\begin{matrix} a_{00}& a_{01}&b_0\\\\ a_{10}&a_{11}&b_1 \\end{matrix}\\right] M = \\left[\\begin{matrix} A & B \\end{matrix}\\right]=\\left[\\begin{matrix} a_{00}& a_{01}&b_0\\\\ a_{10}&a_{11}&b_1 \\end{matrix}\\right] \u5176\u4e2d\u5de6\u8fb9\u76842\u00d72\u5b50\u77e9\u9635 A A \u662f\u7ebf\u6027\u53d8\u6362\u77e9\u9635\uff0c\u53f3\u8fb9\u76842\u00d71\u5b50\u77e9\u9635 B B \u662f\u5e73\u79fb\u9879\uff1a A=\\left[ \\begin{matrix} a_{00} & a_{01}\\\\ a_{10} & a_{11} \\end{matrix} \\right], B=\\left[ \\begin{matrix} b_{0}\\\\ b_{1} \\end{matrix} \\right] A=\\left[ \\begin{matrix} a_{00} & a_{01}\\\\ a_{10} & a_{11} \\end{matrix} \\right], B=\\left[ \\begin{matrix} b_{0}\\\\ b_{1} \\end{matrix} \\right] \u5bf9\u4e8e\u56fe\u50cf\u4e0a\u7684\u4efb\u4e00\u4f4d\u7f6e(x,y)\uff0c\u4eff\u5c04\u53d8\u6362\u6267\u884c\u7684\u662f\u5982\u4e0b\u7684\u64cd\u4f5c\uff1a T_{affine}=A\\left[\\begin{matrix} x\\\\ y \\end{matrix} \\right]+B=M\\left[\\begin{matrix}x\\\\y\\\\1\\end{matrix}\\right] T_{affine}=A\\left[\\begin{matrix} x\\\\ y \\end{matrix} \\right]+B=M\\left[\\begin{matrix}x\\\\y\\\\1\\end{matrix}\\right] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u56fe\u50cf\u800c\u8a00\uff0c\u5bbd\u5ea6\u65b9\u5411\u662fx\uff0c\u9ad8\u5ea6\u65b9\u5411\u662fy\uff0c\u5750\u6807\u7684\u987a\u5e8f\u548c\u56fe\u50cf\u50cf\u7d20\u5bf9\u5e94\u4e0b\u6807\u4e00\u81f4\u3002\u6240\u4ee5\u539f\u70b9\u7684\u4f4d\u7f6e\u4e0d\u662f\u5de6\u4e0b\u89d2\u800c\u662f\u53f3\u4e0a\u89d2\uff0cy\u7684\u65b9\u5411\u4e5f\u4e0d\u662f\u5411\u4e0a\uff0c\u800c\u662f\u5411\u4e0b\u3002 \u5728\u4eff\u5c04\u53d8\u6362\u4e2d\uff0c\u539f\u56fe\u4e2d\u6240\u6709\u7684\u5e73\u884c\u7ebf\u5728\u7ed3\u679c\u56fe\u50cf\u4e2d\u540c\u6837\u5e73\u884c\u3002\u4e3a\u4e86\u521b\u5efa\u8fd9\u4e2a\u77e9\u9635\u6211\u4eec\u9700\u8981\u4ece\u539f\u56fe\u50cf\u4e2d\u627e\u5230\u4e09\u4e2a\u70b9\u4ee5\u53ca\u4ed6\u4eec\u5728\u8f93\u51fa\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6e\u3002\u7136\u540ecv2.getA\ufb03neTransform \u4f1a\u521b\u5efa\u4e00\u4e2a 2x3 \u7684\u77e9\u9635\uff0c\u6700\u540e\u8fd9\u4e2a\u77e9\u9635\u4f1a\u88ab\u4f20\u7ed9\u51fd\u6570 cv2.warpA\ufb03ne\u3002 \u793a\u4f8b import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( \"./image/image2.jpg\" ) # 2 \u4eff\u5c04\u53d8\u6362 rows , cols = img . shape [: 2 ] # 2.1 \u521b\u5efa\u53d8\u6362\u77e9\u9635 pts1 = np . float32 ([[ 50 , 50 ],[ 200 , 50 ],[ 50 , 200 ]]) pts2 = np . float32 ([[ 100 , 100 ],[ 200 , 50 ],[ 100 , 250 ]]) M = cv . getAffineTransform ( pts1 , pts2 ) # 2.2 \u5b8c\u6210\u4eff\u5c04\u53d8\u6362 dst = cv . warpAffine ( img , M ,( cols , rows )) # 3 \u56fe\u50cf\u663e\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u539f\u56fe\" ) axes [ 1 ] . imshow ( dst [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u4eff\u5c04\u540e\u7ed3\u679c\" ) plt . show ()","title":"4 \u4eff\u5c04\u53d8\u6362"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/03-%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/#5","text":"\u900f\u5c04\u53d8\u6362\u662f\u89c6\u89d2\u53d8\u5316\u7684\u7ed3\u679c\uff0c\u662f\u6307\u5229\u7528\u900f\u89c6\u4e2d\u5fc3\u3001\u50cf\u70b9\u3001\u76ee\u6807\u70b9\u4e09\u70b9\u5171\u7ebf\u7684\u6761\u4ef6\uff0c\u6309\u900f\u89c6\u65cb\u8f6c\u5b9a\u5f8b\u4f7f\u627f\u5f71\u9762\uff08\u900f\u89c6\u9762\uff09\u7ed5\u8ff9\u7ebf\uff08\u900f\u89c6\u8f74\uff09\u65cb\u8f6c\u67d0\u4e00\u89d2\u5ea6\uff0c\u7834\u574f\u539f\u6709\u7684\u6295\u5f71\u5149\u7ebf\u675f\uff0c\u4ecd\u80fd\u4fdd\u6301\u627f\u5f71\u9762\u4e0a\u6295\u5f71\u51e0\u4f55\u56fe\u5f62\u4e0d\u53d8\u7684\u53d8\u6362\u3002 \u5b83\u7684\u672c\u8d28\u5c06\u56fe\u50cf\u6295\u5f71\u5230\u4e00\u4e2a\u65b0\u7684\u89c6\u5e73\u9762\uff0c\u5176\u901a\u7528\u53d8\u6362\u516c\u5f0f\u4e3a\uff1a \\left[\\begin{matrix} x' & y'& z' \\end{matrix}\\right]=\\left[\\begin{matrix} u & v & w \\end{matrix}\\right]\\left[\\begin{matrix} a_{00}& a_{01}&a_{02}\\\\ a_{10}&a_{11}&a_{12}\\\\ a_{20}&a_{21}&a_{22} \\end{matrix}\\right] \\left[\\begin{matrix} x' & y'& z' \\end{matrix}\\right]=\\left[\\begin{matrix} u & v & w \\end{matrix}\\right]\\left[\\begin{matrix} a_{00}& a_{01}&a_{02}\\\\ a_{10}&a_{11}&a_{12}\\\\ a_{20}&a_{21}&a_{22} \\end{matrix}\\right] \u5176\u4e2d\uff0c(u,v)\u662f\u539f\u59cb\u7684\u56fe\u50cf\u50cf\u7d20\u5750\u6807\uff0cw\u53d6\u503c\u4e3a1\uff0c(x=x'/z',y=y'/z')\u662f\u900f\u5c04\u53d8\u6362\u540e\u7684\u7ed3\u679c\u3002\u540e\u9762\u7684\u77e9\u9635\u79f0\u4e3a\u900f\u89c6\u53d8\u6362\u77e9\u9635\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5176\u5206\u4e3a\u4e09\u90e8\u5206\uff1a T = \\left[\\begin{matrix} a_{00}& a_{01}&a_{02}\\\\ a_{10}&a_{11}&a_{12}\\\\ a_{20}&a_{21}&a_{22} \\end{matrix}\\right] = \\left[\\begin{matrix} T1& T2\\\\ T3&a_{22} \\end{matrix}\\right] T = \\left[\\begin{matrix} a_{00}& a_{01}&a_{02}\\\\ a_{10}&a_{11}&a_{12}\\\\ a_{20}&a_{21}&a_{22} \\end{matrix}\\right] = \\left[\\begin{matrix} T1& T2\\\\ T3&a_{22} \\end{matrix}\\right] \u5176\u4e2d\uff1aT1\u8868\u793a\u5bf9\u56fe\u50cf\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\uff0cT2\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u79fb\uff0cT3\u8868\u793a\u5bf9\u56fe\u50cf\u8fdb\u884c\u6295\u5c04\u53d8\u6362\uff0c a_{22} a_{22} \u4e00\u822c\u8bbe\u4e3a1. \u5728opencv\u4e2d\uff0c\u6211\u4eec\u8981\u627e\u5230\u56db\u4e2a\u70b9\uff0c\u5176\u4e2d\u4efb\u610f\u4e09\u4e2a\u4e0d\u5171\u7ebf\uff0c\u7136\u540e\u83b7\u53d6\u53d8\u6362\u77e9\u9635T\uff0c\u518d\u8fdb\u884c\u900f\u5c04\u53d8\u6362\u3002\u901a\u8fc7\u51fd\u6570cv.getPerspectiveTransform\u627e\u5230\u53d8\u6362\u77e9\u9635\uff0c\u5c06cv.warpPerspective\u5e94\u7528\u4e8e\u6b643x3\u53d8\u6362\u77e9\u9635\u3002 \u793a\u4f8b import numpy as np import cv2 as cv import matplotlib.pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( \"./image/image2.jpg\" ) # 2 \u900f\u5c04\u53d8\u6362 rows , cols = img . shape [: 2 ] # 2.1 \u521b\u5efa\u53d8\u6362\u77e9\u9635 pts1 = np . float32 ([[ 56 , 65 ],[ 368 , 52 ],[ 28 , 387 ],[ 389 , 390 ]]) pts2 = np . float32 ([[ 100 , 145 ],[ 300 , 100 ],[ 80 , 290 ],[ 310 , 300 ]]) T = cv . getPerspectiveTransform ( pts1 , pts2 ) # 2.2 \u8fdb\u884c\u53d8\u6362 dst = cv . warpPerspective ( img , T ,( cols , rows )) # 3 \u56fe\u50cf\u663e\u793a fig , axes = plt . subplots ( nrows = 1 , ncols = 2 , figsize = ( 10 , 8 ), dpi = 100 ) axes [ 0 ] . imshow ( img [:,:,:: - 1 ]) axes [ 0 ] . set_title ( \"\u539f\u56fe\" ) axes [ 1 ] . imshow ( dst [:,:,:: - 1 ]) axes [ 1 ] . set_title ( \"\u900f\u5c04\u540e\u7ed3\u679c\" ) plt . show () \u603b\u7ed3 1.\u56fe\u50cf\u7f29\u653e\uff1a\u5bf9\u56fe\u50cf\u8fdb\u884c\u653e\u5927\u6216\u7f29\u5c0f \u200b cv.resize() 2.\u56fe\u50cf\u5e73\u79fb\uff1a \u200b \u6307\u5b9a\u5e73\u79fb\u77e9\u9635\u540e\uff0c\u8c03\u7528cv.warpAffine()\u5e73\u79fb\u56fe\u50cf 3.\u56fe\u50cf\u65cb\u8f6c\uff1a \u200b \u8c03\u7528cv.getRotationMatrix2D\u83b7\u53d6\u65cb\u8f6c\u77e9\u9635\uff0c\u7136\u540e\u8c03\u7528cv.warpAffine()\u8fdb\u884c\u65cb\u8f6c 4.\u4eff\u5c04\u53d8\u6362\uff1a \u200b \u8c03\u7528cv.getAffineTransform\u5c06\u521b\u5efa\u53d8\u6362\u77e9\u9635\uff0c\u6700\u540e\u8be5\u77e9\u9635\u5c06\u4f20\u9012\u7ed9cv.warpAffine()\u8fdb\u884c\u53d8\u6362 5.\u900f\u5c04\u53d8\u6362\uff1a \u200b \u901a\u8fc7\u51fd\u6570cv.getPerspectiveTransform()\u627e\u5230\u53d8\u6362\u77e9\u9635\uff0c\u5c06cv.warpPerspective()\u8fdb\u884c\u6295\u5c04\u53d8\u6362","title":"5 \u900f\u5c04\u53d8\u6362"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/","text":"4.4 \u56fe\u50cf\u5e73\u6ed1 \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u56fe\u50cf\u4e2d\u7684\u566a\u58f0\u7c7b\u578b \u4e86\u89e3\u5e73\u5747\u6ee4\u6ce2\uff0c\u9ad8\u65af\u6ee4\u6ce2\uff0c\u4e2d\u503c\u6ee4\u6ce2\u7b49\u7684\u5185\u5bb9 \u80fd\u591f\u4f7f\u7528\u6ee4\u6ce2\u5668\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406 1 \u56fe\u50cf\u566a\u58f0 \u00b6 \u7531\u4e8e\u56fe\u50cf\u91c7\u96c6\u3001\u5904\u7406\u3001\u4f20\u8f93\u7b49\u8fc7\u7a0b\u4e0d\u53ef\u907f\u514d\u7684\u4f1a\u53d7\u5230\u566a\u58f0\u7684\u6c61\u67d3\uff0c\u59a8\u788d\u4eba\u4eec\u5bf9\u56fe\u50cf\u7406\u89e3\u53ca\u5206\u6790\u5904\u7406\u3002\u5e38\u89c1\u7684\u56fe\u50cf\u566a\u58f0\u6709\u9ad8\u65af\u566a\u58f0\u3001\u6912\u76d0\u566a\u58f0\u7b49\u3002 1.1 \u6912\u76d0\u566a\u58f0 \u00b6 \u6912\u76d0\u566a\u58f0\u4e5f\u79f0\u4e3a\u8109\u51b2\u566a\u58f0\uff0c\u662f\u56fe\u50cf\u4e2d\u7ecf\u5e38\u89c1\u5230\u7684\u4e00\u79cd\u566a\u58f0\uff0c\u5b83\u662f\u4e00\u79cd\u968f\u673a\u51fa\u73b0\u7684\u767d\u70b9\u6216\u8005\u9ed1\u70b9\uff0c\u53ef\u80fd\u662f\u4eae\u7684\u533a\u57df\u6709\u9ed1\u8272\u50cf\u7d20\u6216\u662f\u5728\u6697\u7684\u533a\u57df\u6709\u767d\u8272\u50cf\u7d20\uff08\u6216\u662f\u4e24\u8005\u7686\u6709\uff09\u3002\u6912\u76d0\u566a\u58f0\u7684\u6210\u56e0\u53ef\u80fd\u662f\u5f71\u50cf\u8baf\u53f7\u53d7\u5230\u7a81\u5982\u5176\u6765\u7684\u5f3a\u70c8\u5e72\u6270\u800c\u4ea7\u751f\u3001\u7c7b\u6bd4\u6570\u4f4d\u8f6c\u6362\u5668\u6216\u4f4d\u5143\u4f20\u8f93\u9519\u8bef\u7b49\u3002\u4f8b\u5982\u5931\u6548\u7684\u611f\u5e94\u5668\u5bfc\u81f4\u50cf\u7d20\u503c\u4e3a\u6700\u5c0f\u503c\uff0c\u9971\u548c\u7684\u611f\u5e94\u5668\u5bfc\u81f4\u50cf\u7d20\u503c\u4e3a\u6700\u5927\u503c\u3002 1.2 \u9ad8\u65af\u566a\u58f0 \u00b6 \u9ad8\u65af\u566a\u58f0\u662f\u6307\u566a\u58f0\u5bc6\u5ea6\u51fd\u6570\u670d\u4ece\u9ad8\u65af\u5206\u5e03\u7684\u4e00\u7c7b\u566a\u58f0\u3002\u7531\u4e8e\u9ad8\u65af\u566a\u58f0\u5728\u7a7a\u95f4\u548c\u9891\u57df\u4e2d\u6570\u5b66\u4e0a\u7684\u6613\u5904\u7406\u6027\uff0c\u8fd9\u79cd\u566a\u58f0(\u4e5f\u79f0\u4e3a\u6b63\u6001\u566a\u58f0)\u6a21\u578b\u7ecf\u5e38\u88ab\u7528\u4e8e\u5b9e\u8df5\u4e2d\u3002\u9ad8\u65af\u968f\u673a\u53d8\u91cfz\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7531\u4e0b\u5f0f\u7ed9\u51fa\uff1a p(z)=\\frac{1}{\\sqrt{2 \\pi} \\sigma} e^{\\frac{-(z-\\mu)^{2}}{2 \\sigma^{2}}} p(z)=\\frac{1}{\\sqrt{2 \\pi} \\sigma} e^{\\frac{-(z-\\mu)^{2}}{2 \\sigma^{2}}} \u5176\u4e2dz\u8868\u793a\u7070\u5ea6\u503c\uff0c\u03bc\u8868\u793az\u7684\u5e73\u5747\u503c\u6216\u671f\u671b\u503c\uff0c\u03c3\u8868\u793az\u7684\u6807\u51c6\u5dee\u3002\u6807\u51c6\u5dee\u7684\u5e73\u65b9 \\sigma^{2} \\sigma^{2} \u79f0\u4e3az\u7684\u65b9\u5dee\u3002\u9ad8\u65af\u51fd\u6570\u7684\u66f2\u7ebf\u5982\u56fe\u6240\u793a\u3002 2 \u56fe\u50cf\u5e73\u6ed1\u7b80\u4ecb \u00b6 \u56fe\u50cf\u5e73\u6ed1\u4ece\u4fe1\u53f7\u5904\u7406\u7684\u89d2\u5ea6\u770b\u5c31\u662f\u53bb\u9664\u5176\u4e2d\u7684\u9ad8\u9891\u4fe1\u606f\uff0c\u4fdd\u7559\u4f4e\u9891\u4fe1\u606f\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5bf9\u56fe\u50cf\u5b9e\u65bd\u4f4e\u901a\u6ee4\u6ce2\u3002\u4f4e\u901a\u6ee4\u6ce2\u53ef\u4ee5\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u566a\u58f0\uff0c\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u6ed1\u3002 \u6839\u636e\u6ee4\u6ce2\u5668\u7684\u4e0d\u540c\u53ef\u5206\u4e3a\u5747\u503c\u6ee4\u6ce2\uff0c\u9ad8\u65af\u6ee4\u6ce2\uff0c\u4e2d\u503c\u6ee4\u6ce2\uff0c \u53cc\u8fb9\u6ee4\u6ce2\u3002 2.1 \u5747\u503c\u6ee4\u6ce2 \u00b6 \u91c7\u7528\u5747\u503c\u6ee4\u6ce2\u6a21\u677f\u5bf9\u56fe\u50cf\u566a\u58f0\u8fdb\u884c\u6ee4\u9664\u3002\u4ee4 \u8868\u793a\u4e2d\u5fc3\u5728(x, y)\u70b9\uff0c\u5c3a\u5bf8\u4e3am\u00d7n \u7684\u77e9\u5f62\u5b50\u56fe\u50cf\u7a97\u53e3\u7684\u5750\u6807\u7ec4\u3002 \u5747\u503c\u6ee4\u6ce2\u5668\u53ef\u8868\u793a\u4e3a\uff1a \\hat{f}(x, y)=\\frac{1}{m n} \\sum_{(s, t) \\in S_{x y}} g(s, t) \\hat{f}(x, y)=\\frac{1}{m n} \\sum_{(s, t) \\in S_{x y}} g(s, t) \u7531\u4e00\u4e2a\u5f52\u4e00\u5316\u5377\u79ef\u6846\u5b8c\u6210\u7684\u3002\u5b83\u53ea\u662f\u7528\u5377\u79ef\u6846\u8986\u76d6\u533a\u57df\u6240\u6709\u50cf\u7d20\u7684\u5e73\u5747\u503c\u6765\u4ee3\u66ff\u4e2d\u5fc3\u5143\u7d20\u3002 \u4f8b\u5982\uff0c3x3\u6807\u51c6\u5316\u7684\u5e73\u5747\u8fc7\u6ee4\u5668\u5982\u4e0b\u6240\u793a\uff1a K=\\frac{1}{9}\\begin{bmatrix} \\ 1 \\ \\ 1\\ \\ 1\\\\ \\ 1 \\ \\ 1\\ \\ 1\\\\ \\ 1 \\ \\ 1\\ \\ 1 \\end{bmatrix} K=\\frac{1}{9}\\begin{bmatrix} \\ 1 \\ \\ 1\\ \\ 1\\\\ \\ 1 \\ \\ 1\\ \\ 1\\\\ \\ 1 \\ \\ 1\\ \\ 1 \\end{bmatrix} \u5747\u503c\u6ee4\u6ce2\u7684\u4f18\u70b9\u662f\u7b97\u6cd5\u7b80\u5355\uff0c\u8ba1\u7b97\u901f\u5ea6\u8f83\u5feb\uff0c\u7f3a\u70b9\u662f\u5728\u53bb\u566a\u7684\u540c\u65f6\u53bb\u9664\u4e86\u5f88\u591a\u7ec6\u8282\u90e8\u5206\uff0c\u5c06\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca\u3002 API: cv.blur(src, ksize) \u53c2\u6570: src\uff1a\u8f93\u5165\u56fe\u50cf ksize\uff1a\u5377\u79ef\u6838\u7684\u5927\u5c0f \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( './image/dogsp.jpeg' ) # 2 \u5747\u503c\u6ee4\u6ce2 blur = cv . blur ( img ,( 5 , 5 )) # 3 \u56fe\u50cf\u663e\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img [:,:,:: - 1 ]), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( blur [:,:,:: - 1 ]), plt . title ( '\u5747\u503c\u6ee4\u6ce2\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () 2.2 \u9ad8\u65af\u6ee4\u6ce2 \u00b6 \u4e8c\u7ef4\u9ad8\u65af\u662f\u6784\u5efa\u9ad8\u65af\u6ee4\u6ce2\u5668\u7684\u57fa\u7840\uff0c\u5176\u6982\u7387\u5206\u5e03\u51fd\u6570\u5982\u4e0b\u6240\u793a\uff1a G(x,y)\u7684\u5206\u5e03\u662f\u4e00\u4e2a\u7a81\u8d77\u7684\u5e3d\u5b50\u7684\u5f62\u72b6\u3002\u8fd9\u91cc\u7684\u03c3\u53ef\u4ee5\u770b\u4f5c\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u662fx\u65b9\u5411\u7684\u6807\u51c6\u5dee \\sigma_x \\sigma_x \uff0c\u53e6\u4e00\u4e2a\u662fy\u65b9\u5411\u7684\u6807\u51c6\u5dee \\sigma_y \\sigma_y \u3002 \u5f53 \\sigma_x \\sigma_x \u548c \\sigma_y \\sigma_y \u53d6\u503c\u8d8a\u5927\uff0c\u6574\u4e2a\u5f62\u72b6\u8d8b\u8fd1\u4e8e\u6241\u5e73\uff1b\u5f53 \\sigma_x \\sigma_x \u548c \\sigma_y \\sigma_y \uff0c\u6574\u4e2a\u5f62\u72b6\u8d8a\u7a81\u8d77\u3002 \u6b63\u6001\u5206\u5e03\u662f\u4e00\u79cd\u949f\u5f62\u66f2\u7ebf\uff0c\u8d8a\u63a5\u8fd1\u4e2d\u5fc3\uff0c\u53d6\u503c\u8d8a\u5927\uff0c\u8d8a\u8fdc\u79bb\u4e2d\u5fc3\uff0c\u53d6\u503c\u8d8a\u5c0f\u3002\u8ba1\u7b97\u5e73\u6ed1\u7ed3\u679c\u65f6\uff0c\u53ea\u9700\u8981\u5c06\"\u4e2d\u5fc3\u70b9\"\u4f5c\u4e3a\u539f\u70b9\uff0c\u5176\u4ed6\u70b9\u6309\u7167\u5176\u5728\u6b63\u6001\u66f2\u7ebf\u4e0a\u7684\u4f4d\u7f6e\uff0c\u5206\u914d\u6743\u91cd\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u52a0\u6743\u5e73\u5747\u503c\u3002 \u9ad8\u65af\u5e73\u6ed1\u5728\u4ece\u56fe\u50cf\u4e2d\u53bb\u9664\u9ad8\u65af\u566a\u58f0\u65b9\u9762\u975e\u5e38\u6709\u6548\u3002 \u9ad8\u65af\u5e73\u6ed1\u7684\u6d41\u7a0b\uff1a \u9996\u5148\u786e\u5b9a\u6743\u91cd\u77e9\u9635 \u5047\u5b9a\u4e2d\u5fc3\u70b9\u7684\u5750\u6807\u662f\uff080,0\uff09\uff0c\u90a3\u4e48\u8ddd\u79bb\u5b83\u6700\u8fd1\u76848\u4e2a\u70b9\u7684\u5750\u6807\u5982\u4e0b\uff1a \u66f4\u8fdc\u7684\u70b9\u4ee5\u6b64\u7c7b\u63a8\u3002 \u4e3a\u4e86\u8ba1\u7b97\u6743\u91cd\u77e9\u9635\uff0c\u9700\u8981\u8bbe\u5b9a\u03c3\u7684\u503c\u3002\u5047\u5b9a\u03c3=1.5\uff0c\u5219\u6a21\u7cca\u534a\u5f84\u4e3a1\u7684\u6743\u91cd\u77e9\u9635\u5982\u4e0b\uff1a \u8fd99\u4e2a\u70b9\u7684\u6743\u91cd\u603b\u548c\u7b49\u4e8e0.4787147\uff0c\u5982\u679c\u53ea\u8ba1\u7b97\u8fd99\u4e2a\u70b9\u7684\u52a0\u6743\u5e73\u5747\uff0c\u8fd8\u5fc5\u987b\u8ba9\u5b83\u4eec\u7684\u6743\u91cd\u4e4b\u548c\u7b49\u4e8e1\uff0c\u56e0\u6b64\u4e0a\u97629\u4e2a\u503c\u8fd8\u8981\u5206\u522b\u9664\u4ee50.4787147\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u6743\u91cd\u77e9\u9635\u3002 \u8ba1\u7b97\u9ad8\u65af\u6a21\u7cca \u6709\u4e86\u6743\u91cd\u77e9\u9635\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u9ad8\u65af\u6a21\u7cca\u7684\u503c\u4e86\u3002 \u5047\u8bbe\u73b0\u67099\u4e2a\u50cf\u7d20\u70b9\uff0c\u7070\u5ea6\u503c\uff080-255\uff09\u5982\u4e0b\uff1a \u6bcf\u4e2a\u70b9\u4e58\u4ee5\u5bf9\u5e94\u7684\u6743\u91cd\u503c\uff1a \u5f97\u5230 \u5c06\u8fd99\u4e2a\u503c\u52a0\u8d77\u6765\uff0c\u5c31\u662f\u4e2d\u5fc3\u70b9\u7684\u9ad8\u65af\u6a21\u7cca\u7684\u503c\u3002 \u5bf9\u6240\u6709\u70b9\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5c31\u5f97\u5230\u4e86\u9ad8\u65af\u6a21\u7cca\u540e\u7684\u56fe\u50cf\u3002\u5982\u679c\u539f\u56fe\u662f\u5f69\u8272\u56fe\u7247\uff0c\u53ef\u4ee5\u5bf9RGB\u4e09\u4e2a\u901a\u9053\u5206\u522b\u505a\u9ad8\u65af\u5e73\u6ed1\u3002 API\uff1a cv2 . GaussianBlur ( src , ksize , sigmaX , sigmay ) \u53c2\u6570\uff1a src: \u8f93\u5165\u56fe\u50cf ksize:\u9ad8\u65af\u5377\u79ef\u6838\u7684\u5927\u5c0f\uff0c \u6ce8\u610f \uff1a \u5377\u79ef\u6838\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u90fd\u5e94\u4e3a\u5947\u6570\uff0c\u4e14\u53ef\u4ee5\u4e0d\u540c sigmaX: \u6c34\u5e73\u65b9\u5411\u7684\u6807\u51c6\u5dee sigmaY: \u5782\u76f4\u65b9\u5411\u7684\u6807\u51c6\u5dee\uff0c\u9ed8\u8ba4\u503c\u4e3a0\uff0c\u8868\u793a\u4e0esigmaX\u76f8\u540c \u793a\u4f8b \uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( './image/dogGasuss.jpeg' ) # 2 \u9ad8\u65af\u6ee4\u6ce2 blur = cv . GaussianBlur ( img ,( 3 , 3 ), 1 ) # 3 \u56fe\u50cf\u663e\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img [:,:,:: - 1 ]), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( blur [:,:,:: - 1 ]), plt . title ( '\u9ad8\u65af\u6ee4\u6ce2\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () 2.3 \u4e2d\u503c\u6ee4\u6ce2 \u00b6 \u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u79cd\u5178\u578b\u7684\u975e\u7ebf\u6027\u6ee4\u6ce2\u6280\u672f\uff0c\u57fa\u672c\u601d\u60f3\u662f\u7528\u50cf\u7d20\u70b9\u90bb\u57df\u7070\u5ea6\u503c\u7684\u4e2d\u503c\u6765\u4ee3\u66ff\u8be5\u50cf\u7d20\u70b9\u7684\u7070\u5ea6\u503c\u3002 \u4e2d\u503c\u6ee4\u6ce2\u5bf9\u6912\u76d0\u566a\u58f0\uff08salt-and-pepper noise\uff09\u6765\u8bf4\u5c24\u5176\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u90bb\u57df\u5185\u90a3\u4e9b\u4e0e\u5178\u578b\u503c\u5dee\u522b\u5f88\u5927\u7684\u503c\u3002 API\uff1a cv . medianBlur ( src , ksize ) \u53c2\u6570\uff1a src\uff1a\u8f93\u5165\u56fe\u50cf ksize\uff1a\u5377\u79ef\u6838\u7684\u5927\u5c0f \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( './image/dogsp.jpeg' ) # 2 \u4e2d\u503c\u6ee4\u6ce2 blur = cv . medianBlur ( img , 5 ) # 3 \u56fe\u50cf\u5c55\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img [:,:,:: - 1 ]), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( blur [:,:,:: - 1 ]), plt . title ( '\u4e2d\u503c\u6ee4\u6ce2\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () \u200b \u603b\u7ed3 1.\u56fe\u50cf\u566a\u58f0 \u6912\u76d0\u566a\u58f0\uff1a\u56fe\u50cf\u4e2d\u968f\u673a\u51fa\u73b0\u7684\u767d\u70b9\u6216\u8005\u9ed1\u70b9 \u9ad8\u65af\u566a\u58f0\uff1a\u566a\u58f0\u7684\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\u662f\u6b63\u6001\u5206\u5e03 2.\u56fe\u50cf\u5e73\u6ed1 \u5747\u503c\u6ee4\u6ce2\uff1a\u7b97\u6cd5\u7b80\u5355\uff0c\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u5728\u53bb\u566a\u7684\u540c\u65f6\u53bb\u9664\u4e86\u5f88\u591a\u7ec6\u8282\u90e8\u5206\uff0c\u5c06\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca cv.blur() \u9ad8\u65af\u6ee4\u6ce2: \u53bb\u9664\u9ad8\u65af\u566a\u58f0 cv.GaussianBlur() \u4e2d\u503c\u6ee4\u6ce2: \u53bb\u9664\u6912\u76d0\u566a\u58f0 cv.medianBlur()","title":"4.4 \u56fe\u50cf\u5e73\u6ed1"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/#44","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u56fe\u50cf\u4e2d\u7684\u566a\u58f0\u7c7b\u578b \u4e86\u89e3\u5e73\u5747\u6ee4\u6ce2\uff0c\u9ad8\u65af\u6ee4\u6ce2\uff0c\u4e2d\u503c\u6ee4\u6ce2\u7b49\u7684\u5185\u5bb9 \u80fd\u591f\u4f7f\u7528\u6ee4\u6ce2\u5668\u5bf9\u56fe\u50cf\u8fdb\u884c\u5904\u7406","title":"4.4 \u56fe\u50cf\u5e73\u6ed1"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/#1","text":"\u7531\u4e8e\u56fe\u50cf\u91c7\u96c6\u3001\u5904\u7406\u3001\u4f20\u8f93\u7b49\u8fc7\u7a0b\u4e0d\u53ef\u907f\u514d\u7684\u4f1a\u53d7\u5230\u566a\u58f0\u7684\u6c61\u67d3\uff0c\u59a8\u788d\u4eba\u4eec\u5bf9\u56fe\u50cf\u7406\u89e3\u53ca\u5206\u6790\u5904\u7406\u3002\u5e38\u89c1\u7684\u56fe\u50cf\u566a\u58f0\u6709\u9ad8\u65af\u566a\u58f0\u3001\u6912\u76d0\u566a\u58f0\u7b49\u3002","title":"1 \u56fe\u50cf\u566a\u58f0"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/#11","text":"\u6912\u76d0\u566a\u58f0\u4e5f\u79f0\u4e3a\u8109\u51b2\u566a\u58f0\uff0c\u662f\u56fe\u50cf\u4e2d\u7ecf\u5e38\u89c1\u5230\u7684\u4e00\u79cd\u566a\u58f0\uff0c\u5b83\u662f\u4e00\u79cd\u968f\u673a\u51fa\u73b0\u7684\u767d\u70b9\u6216\u8005\u9ed1\u70b9\uff0c\u53ef\u80fd\u662f\u4eae\u7684\u533a\u57df\u6709\u9ed1\u8272\u50cf\u7d20\u6216\u662f\u5728\u6697\u7684\u533a\u57df\u6709\u767d\u8272\u50cf\u7d20\uff08\u6216\u662f\u4e24\u8005\u7686\u6709\uff09\u3002\u6912\u76d0\u566a\u58f0\u7684\u6210\u56e0\u53ef\u80fd\u662f\u5f71\u50cf\u8baf\u53f7\u53d7\u5230\u7a81\u5982\u5176\u6765\u7684\u5f3a\u70c8\u5e72\u6270\u800c\u4ea7\u751f\u3001\u7c7b\u6bd4\u6570\u4f4d\u8f6c\u6362\u5668\u6216\u4f4d\u5143\u4f20\u8f93\u9519\u8bef\u7b49\u3002\u4f8b\u5982\u5931\u6548\u7684\u611f\u5e94\u5668\u5bfc\u81f4\u50cf\u7d20\u503c\u4e3a\u6700\u5c0f\u503c\uff0c\u9971\u548c\u7684\u611f\u5e94\u5668\u5bfc\u81f4\u50cf\u7d20\u503c\u4e3a\u6700\u5927\u503c\u3002","title":"1.1 \u6912\u76d0\u566a\u58f0"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/#12","text":"\u9ad8\u65af\u566a\u58f0\u662f\u6307\u566a\u58f0\u5bc6\u5ea6\u51fd\u6570\u670d\u4ece\u9ad8\u65af\u5206\u5e03\u7684\u4e00\u7c7b\u566a\u58f0\u3002\u7531\u4e8e\u9ad8\u65af\u566a\u58f0\u5728\u7a7a\u95f4\u548c\u9891\u57df\u4e2d\u6570\u5b66\u4e0a\u7684\u6613\u5904\u7406\u6027\uff0c\u8fd9\u79cd\u566a\u58f0(\u4e5f\u79f0\u4e3a\u6b63\u6001\u566a\u58f0)\u6a21\u578b\u7ecf\u5e38\u88ab\u7528\u4e8e\u5b9e\u8df5\u4e2d\u3002\u9ad8\u65af\u968f\u673a\u53d8\u91cfz\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7531\u4e0b\u5f0f\u7ed9\u51fa\uff1a p(z)=\\frac{1}{\\sqrt{2 \\pi} \\sigma} e^{\\frac{-(z-\\mu)^{2}}{2 \\sigma^{2}}} p(z)=\\frac{1}{\\sqrt{2 \\pi} \\sigma} e^{\\frac{-(z-\\mu)^{2}}{2 \\sigma^{2}}} \u5176\u4e2dz\u8868\u793a\u7070\u5ea6\u503c\uff0c\u03bc\u8868\u793az\u7684\u5e73\u5747\u503c\u6216\u671f\u671b\u503c\uff0c\u03c3\u8868\u793az\u7684\u6807\u51c6\u5dee\u3002\u6807\u51c6\u5dee\u7684\u5e73\u65b9 \\sigma^{2} \\sigma^{2} \u79f0\u4e3az\u7684\u65b9\u5dee\u3002\u9ad8\u65af\u51fd\u6570\u7684\u66f2\u7ebf\u5982\u56fe\u6240\u793a\u3002","title":"1.2 \u9ad8\u65af\u566a\u58f0"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/#2","text":"\u56fe\u50cf\u5e73\u6ed1\u4ece\u4fe1\u53f7\u5904\u7406\u7684\u89d2\u5ea6\u770b\u5c31\u662f\u53bb\u9664\u5176\u4e2d\u7684\u9ad8\u9891\u4fe1\u606f\uff0c\u4fdd\u7559\u4f4e\u9891\u4fe1\u606f\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5bf9\u56fe\u50cf\u5b9e\u65bd\u4f4e\u901a\u6ee4\u6ce2\u3002\u4f4e\u901a\u6ee4\u6ce2\u53ef\u4ee5\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u566a\u58f0\uff0c\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u6ed1\u3002 \u6839\u636e\u6ee4\u6ce2\u5668\u7684\u4e0d\u540c\u53ef\u5206\u4e3a\u5747\u503c\u6ee4\u6ce2\uff0c\u9ad8\u65af\u6ee4\u6ce2\uff0c\u4e2d\u503c\u6ee4\u6ce2\uff0c \u53cc\u8fb9\u6ee4\u6ce2\u3002","title":"2 \u56fe\u50cf\u5e73\u6ed1\u7b80\u4ecb"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/#21","text":"\u91c7\u7528\u5747\u503c\u6ee4\u6ce2\u6a21\u677f\u5bf9\u56fe\u50cf\u566a\u58f0\u8fdb\u884c\u6ee4\u9664\u3002\u4ee4 \u8868\u793a\u4e2d\u5fc3\u5728(x, y)\u70b9\uff0c\u5c3a\u5bf8\u4e3am\u00d7n \u7684\u77e9\u5f62\u5b50\u56fe\u50cf\u7a97\u53e3\u7684\u5750\u6807\u7ec4\u3002 \u5747\u503c\u6ee4\u6ce2\u5668\u53ef\u8868\u793a\u4e3a\uff1a \\hat{f}(x, y)=\\frac{1}{m n} \\sum_{(s, t) \\in S_{x y}} g(s, t) \\hat{f}(x, y)=\\frac{1}{m n} \\sum_{(s, t) \\in S_{x y}} g(s, t) \u7531\u4e00\u4e2a\u5f52\u4e00\u5316\u5377\u79ef\u6846\u5b8c\u6210\u7684\u3002\u5b83\u53ea\u662f\u7528\u5377\u79ef\u6846\u8986\u76d6\u533a\u57df\u6240\u6709\u50cf\u7d20\u7684\u5e73\u5747\u503c\u6765\u4ee3\u66ff\u4e2d\u5fc3\u5143\u7d20\u3002 \u4f8b\u5982\uff0c3x3\u6807\u51c6\u5316\u7684\u5e73\u5747\u8fc7\u6ee4\u5668\u5982\u4e0b\u6240\u793a\uff1a K=\\frac{1}{9}\\begin{bmatrix} \\ 1 \\ \\ 1\\ \\ 1\\\\ \\ 1 \\ \\ 1\\ \\ 1\\\\ \\ 1 \\ \\ 1\\ \\ 1 \\end{bmatrix} K=\\frac{1}{9}\\begin{bmatrix} \\ 1 \\ \\ 1\\ \\ 1\\\\ \\ 1 \\ \\ 1\\ \\ 1\\\\ \\ 1 \\ \\ 1\\ \\ 1 \\end{bmatrix} \u5747\u503c\u6ee4\u6ce2\u7684\u4f18\u70b9\u662f\u7b97\u6cd5\u7b80\u5355\uff0c\u8ba1\u7b97\u901f\u5ea6\u8f83\u5feb\uff0c\u7f3a\u70b9\u662f\u5728\u53bb\u566a\u7684\u540c\u65f6\u53bb\u9664\u4e86\u5f88\u591a\u7ec6\u8282\u90e8\u5206\uff0c\u5c06\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca\u3002 API: cv.blur(src, ksize) \u53c2\u6570: src\uff1a\u8f93\u5165\u56fe\u50cf ksize\uff1a\u5377\u79ef\u6838\u7684\u5927\u5c0f \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( './image/dogsp.jpeg' ) # 2 \u5747\u503c\u6ee4\u6ce2 blur = cv . blur ( img ,( 5 , 5 )) # 3 \u56fe\u50cf\u663e\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img [:,:,:: - 1 ]), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( blur [:,:,:: - 1 ]), plt . title ( '\u5747\u503c\u6ee4\u6ce2\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show ()","title":"2.1 \u5747\u503c\u6ee4\u6ce2"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/#22","text":"\u4e8c\u7ef4\u9ad8\u65af\u662f\u6784\u5efa\u9ad8\u65af\u6ee4\u6ce2\u5668\u7684\u57fa\u7840\uff0c\u5176\u6982\u7387\u5206\u5e03\u51fd\u6570\u5982\u4e0b\u6240\u793a\uff1a G(x,y)\u7684\u5206\u5e03\u662f\u4e00\u4e2a\u7a81\u8d77\u7684\u5e3d\u5b50\u7684\u5f62\u72b6\u3002\u8fd9\u91cc\u7684\u03c3\u53ef\u4ee5\u770b\u4f5c\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u662fx\u65b9\u5411\u7684\u6807\u51c6\u5dee \\sigma_x \\sigma_x \uff0c\u53e6\u4e00\u4e2a\u662fy\u65b9\u5411\u7684\u6807\u51c6\u5dee \\sigma_y \\sigma_y \u3002 \u5f53 \\sigma_x \\sigma_x \u548c \\sigma_y \\sigma_y \u53d6\u503c\u8d8a\u5927\uff0c\u6574\u4e2a\u5f62\u72b6\u8d8b\u8fd1\u4e8e\u6241\u5e73\uff1b\u5f53 \\sigma_x \\sigma_x \u548c \\sigma_y \\sigma_y \uff0c\u6574\u4e2a\u5f62\u72b6\u8d8a\u7a81\u8d77\u3002 \u6b63\u6001\u5206\u5e03\u662f\u4e00\u79cd\u949f\u5f62\u66f2\u7ebf\uff0c\u8d8a\u63a5\u8fd1\u4e2d\u5fc3\uff0c\u53d6\u503c\u8d8a\u5927\uff0c\u8d8a\u8fdc\u79bb\u4e2d\u5fc3\uff0c\u53d6\u503c\u8d8a\u5c0f\u3002\u8ba1\u7b97\u5e73\u6ed1\u7ed3\u679c\u65f6\uff0c\u53ea\u9700\u8981\u5c06\"\u4e2d\u5fc3\u70b9\"\u4f5c\u4e3a\u539f\u70b9\uff0c\u5176\u4ed6\u70b9\u6309\u7167\u5176\u5728\u6b63\u6001\u66f2\u7ebf\u4e0a\u7684\u4f4d\u7f6e\uff0c\u5206\u914d\u6743\u91cd\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u52a0\u6743\u5e73\u5747\u503c\u3002 \u9ad8\u65af\u5e73\u6ed1\u5728\u4ece\u56fe\u50cf\u4e2d\u53bb\u9664\u9ad8\u65af\u566a\u58f0\u65b9\u9762\u975e\u5e38\u6709\u6548\u3002 \u9ad8\u65af\u5e73\u6ed1\u7684\u6d41\u7a0b\uff1a \u9996\u5148\u786e\u5b9a\u6743\u91cd\u77e9\u9635 \u5047\u5b9a\u4e2d\u5fc3\u70b9\u7684\u5750\u6807\u662f\uff080,0\uff09\uff0c\u90a3\u4e48\u8ddd\u79bb\u5b83\u6700\u8fd1\u76848\u4e2a\u70b9\u7684\u5750\u6807\u5982\u4e0b\uff1a \u66f4\u8fdc\u7684\u70b9\u4ee5\u6b64\u7c7b\u63a8\u3002 \u4e3a\u4e86\u8ba1\u7b97\u6743\u91cd\u77e9\u9635\uff0c\u9700\u8981\u8bbe\u5b9a\u03c3\u7684\u503c\u3002\u5047\u5b9a\u03c3=1.5\uff0c\u5219\u6a21\u7cca\u534a\u5f84\u4e3a1\u7684\u6743\u91cd\u77e9\u9635\u5982\u4e0b\uff1a \u8fd99\u4e2a\u70b9\u7684\u6743\u91cd\u603b\u548c\u7b49\u4e8e0.4787147\uff0c\u5982\u679c\u53ea\u8ba1\u7b97\u8fd99\u4e2a\u70b9\u7684\u52a0\u6743\u5e73\u5747\uff0c\u8fd8\u5fc5\u987b\u8ba9\u5b83\u4eec\u7684\u6743\u91cd\u4e4b\u548c\u7b49\u4e8e1\uff0c\u56e0\u6b64\u4e0a\u97629\u4e2a\u503c\u8fd8\u8981\u5206\u522b\u9664\u4ee50.4787147\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u6743\u91cd\u77e9\u9635\u3002 \u8ba1\u7b97\u9ad8\u65af\u6a21\u7cca \u6709\u4e86\u6743\u91cd\u77e9\u9635\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u9ad8\u65af\u6a21\u7cca\u7684\u503c\u4e86\u3002 \u5047\u8bbe\u73b0\u67099\u4e2a\u50cf\u7d20\u70b9\uff0c\u7070\u5ea6\u503c\uff080-255\uff09\u5982\u4e0b\uff1a \u6bcf\u4e2a\u70b9\u4e58\u4ee5\u5bf9\u5e94\u7684\u6743\u91cd\u503c\uff1a \u5f97\u5230 \u5c06\u8fd99\u4e2a\u503c\u52a0\u8d77\u6765\uff0c\u5c31\u662f\u4e2d\u5fc3\u70b9\u7684\u9ad8\u65af\u6a21\u7cca\u7684\u503c\u3002 \u5bf9\u6240\u6709\u70b9\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5c31\u5f97\u5230\u4e86\u9ad8\u65af\u6a21\u7cca\u540e\u7684\u56fe\u50cf\u3002\u5982\u679c\u539f\u56fe\u662f\u5f69\u8272\u56fe\u7247\uff0c\u53ef\u4ee5\u5bf9RGB\u4e09\u4e2a\u901a\u9053\u5206\u522b\u505a\u9ad8\u65af\u5e73\u6ed1\u3002 API\uff1a cv2 . GaussianBlur ( src , ksize , sigmaX , sigmay ) \u53c2\u6570\uff1a src: \u8f93\u5165\u56fe\u50cf ksize:\u9ad8\u65af\u5377\u79ef\u6838\u7684\u5927\u5c0f\uff0c \u6ce8\u610f \uff1a \u5377\u79ef\u6838\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u90fd\u5e94\u4e3a\u5947\u6570\uff0c\u4e14\u53ef\u4ee5\u4e0d\u540c sigmaX: \u6c34\u5e73\u65b9\u5411\u7684\u6807\u51c6\u5dee sigmaY: \u5782\u76f4\u65b9\u5411\u7684\u6807\u51c6\u5dee\uff0c\u9ed8\u8ba4\u503c\u4e3a0\uff0c\u8868\u793a\u4e0esigmaX\u76f8\u540c \u793a\u4f8b \uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( './image/dogGasuss.jpeg' ) # 2 \u9ad8\u65af\u6ee4\u6ce2 blur = cv . GaussianBlur ( img ,( 3 , 3 ), 1 ) # 3 \u56fe\u50cf\u663e\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img [:,:,:: - 1 ]), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( blur [:,:,:: - 1 ]), plt . title ( '\u9ad8\u65af\u6ee4\u6ce2\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show ()","title":"2.2 \u9ad8\u65af\u6ee4\u6ce2"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/04-%E5%B9%B3%E6%BB%91%E6%96%B9%E6%B3%95/#23","text":"\u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u79cd\u5178\u578b\u7684\u975e\u7ebf\u6027\u6ee4\u6ce2\u6280\u672f\uff0c\u57fa\u672c\u601d\u60f3\u662f\u7528\u50cf\u7d20\u70b9\u90bb\u57df\u7070\u5ea6\u503c\u7684\u4e2d\u503c\u6765\u4ee3\u66ff\u8be5\u50cf\u7d20\u70b9\u7684\u7070\u5ea6\u503c\u3002 \u4e2d\u503c\u6ee4\u6ce2\u5bf9\u6912\u76d0\u566a\u58f0\uff08salt-and-pepper noise\uff09\u6765\u8bf4\u5c24\u5176\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u90bb\u57df\u5185\u90a3\u4e9b\u4e0e\u5178\u578b\u503c\u5dee\u522b\u5f88\u5927\u7684\u503c\u3002 API\uff1a cv . medianBlur ( src , ksize ) \u53c2\u6570\uff1a src\uff1a\u8f93\u5165\u56fe\u50cf ksize\uff1a\u5377\u79ef\u6838\u7684\u5927\u5c0f \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( './image/dogsp.jpeg' ) # 2 \u4e2d\u503c\u6ee4\u6ce2 blur = cv . medianBlur ( img , 5 ) # 3 \u56fe\u50cf\u5c55\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img [:,:,:: - 1 ]), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( blur [:,:,:: - 1 ]), plt . title ( '\u4e2d\u503c\u6ee4\u6ce2\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () \u200b \u603b\u7ed3 1.\u56fe\u50cf\u566a\u58f0 \u6912\u76d0\u566a\u58f0\uff1a\u56fe\u50cf\u4e2d\u968f\u673a\u51fa\u73b0\u7684\u767d\u70b9\u6216\u8005\u9ed1\u70b9 \u9ad8\u65af\u566a\u58f0\uff1a\u566a\u58f0\u7684\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\u662f\u6b63\u6001\u5206\u5e03 2.\u56fe\u50cf\u5e73\u6ed1 \u5747\u503c\u6ee4\u6ce2\uff1a\u7b97\u6cd5\u7b80\u5355\uff0c\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u5728\u53bb\u566a\u7684\u540c\u65f6\u53bb\u9664\u4e86\u5f88\u591a\u7ec6\u8282\u90e8\u5206\uff0c\u5c06\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca cv.blur() \u9ad8\u65af\u6ee4\u6ce2: \u53bb\u9664\u9ad8\u65af\u566a\u58f0 cv.GaussianBlur() \u4e2d\u503c\u6ee4\u6ce2: \u53bb\u9664\u6912\u76d0\u566a\u58f0 cv.medianBlur()","title":"2.3 \u4e2d\u503c\u6ee4\u6ce2"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/","text":"4.5 \u8fb9\u7f18\u68c0\u6d4b \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3Sobel\u7b97\u5b50\uff0cScharr\u7b97\u5b50\u548c\u62c9\u666e\u62c9\u65af\u7b97\u5b50 \u638c\u63e1canny\u8fb9\u7f18\u68c0\u6d4b\u7684\u539f\u7406\u53ca\u5e94\u7528 1 \u539f\u7406 \u00b6 \u8fb9\u7f18\u68c0\u6d4b\u662f\u56fe\u50cf\u5904\u7406\u548c\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u7684\u57fa\u672c\u95ee\u9898\uff0c\u8fb9\u7f18\u68c0\u6d4b\u7684\u76ee\u7684\u662f\u6807\u8bc6\u6570\u5b57\u56fe\u50cf\u4e2d\u4eae\u5ea6\u53d8\u5316\u660e\u663e\u7684\u70b9\u3002\u56fe\u50cf\u5c5e\u6027\u4e2d\u7684\u663e\u8457\u53d8\u5316\u901a\u5e38\u53cd\u6620\u4e86\u5c5e\u6027\u7684\u91cd\u8981\u4e8b\u4ef6\u548c\u53d8\u5316\u3002\u8fb9\u7f18\u7684\u8868\u73b0\u5f62\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe\u50cf\u8fb9\u7f18\u68c0\u6d4b\u5927\u5e45\u5ea6\u5730\u51cf\u5c11\u4e86\u6570\u636e\u91cf\uff0c\u5e76\u4e14\u5254\u9664\u4e86\u53ef\u4ee5\u8ba4\u4e3a\u4e0d\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u4fdd\u7559\u4e86\u56fe\u50cf\u91cd\u8981\u7684\u7ed3\u6784\u5c5e\u6027\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u7528\u4e8e\u8fb9\u7f18\u68c0\u6d4b\uff0c\u5b83\u4eec\u7684\u7edd\u5927\u90e8\u5206\u53ef\u4ee5\u5212\u5206\u4e3a\u4e24\u7c7b\uff1a \u57fa\u4e8e\u641c\u7d22**\u548c**\u57fa\u4e8e\u96f6\u7a7f\u8d8a \u3002 \u57fa\u4e8e\u641c\u7d22\uff1a\u901a\u8fc7\u5bfb\u627e\u56fe\u50cf\u4e00\u9636\u5bfc\u6570\u4e2d\u7684\u6700\u5927\u503c\u6765\u68c0\u6d4b\u8fb9\u754c\uff0c\u7136\u540e\u5229\u7528\u8ba1\u7b97\u7ed3\u679c\u4f30\u8ba1\u8fb9\u7f18\u7684\u5c40\u90e8\u65b9\u5411\uff0c\u901a\u5e38\u91c7\u7528\u68af\u5ea6\u7684\u65b9\u5411\uff0c\u5e76\u5229\u7528\u6b64\u65b9\u5411\u627e\u5230\u5c40\u90e8\u68af\u5ea6\u6a21\u7684\u6700\u5927\u503c\uff0c\u4ee3\u8868\u7b97\u6cd5\u662fSobel\u7b97\u5b50\u548cScharr\u7b97\u5b50\u3002 \u57fa\u4e8e\u96f6\u7a7f\u8d8a\uff1a\u901a\u8fc7\u5bfb\u627e\u56fe\u50cf\u4e8c\u9636\u5bfc\u6570\u96f6\u7a7f\u8d8a\u6765\u5bfb\u627e\u8fb9\u754c\uff0c\u4ee3\u8868\u7b97\u6cd5\u662fLaplacian\u7b97\u5b50\u3002 2 Sobel\u68c0\u6d4b\u7b97\u5b50 \u00b6 Sobel\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u5b9e\u9645\u5e94\u7528\u4e2d\u6548\u7387\u6bd4canny\u8fb9\u7f18\u68c0\u6d4b\u6548\u7387\u8981\u9ad8\uff0c\u4f46\u662f\u8fb9\u7f18\u4e0d\u5982Canny\u68c0\u6d4b\u7684\u51c6\u786e\uff0c\u4f46\u662f\u5f88\u591a\u5b9e\u9645\u5e94\u7528\u7684\u573a\u5408\uff0csobel\u8fb9\u7f18\u5374\u662f\u9996\u9009\uff0cSobel\u7b97\u5b50\u662f\u9ad8\u65af\u5e73\u6ed1\u4e0e\u5fae\u5206\u64cd\u4f5c\u7684\u7ed3\u5408\u4f53\uff0c\u6240\u4ee5\u5176\u6297\u566a\u58f0\u80fd\u529b\u5f88\u5f3a\uff0c\u7528\u9014\u8f83\u591a\u3002\u5c24\u5176\u662f\u6548\u7387\u8981\u6c42\u8f83\u9ad8\uff0c\u800c\u5bf9\u7ec6\u7eb9\u7406\u4e0d\u592a\u5173\u5fc3\u7684\u65f6\u5019\u3002 2.1 \u65b9\u6cd5 \u00b6 \u5bf9\u4e8e\u4e0d\u8fde\u7eed\u7684\u51fd\u6570\uff0c\u4e00\u9636\u5bfc\u6570\u53ef\u4ee5\u5199\u4f5c\uff1a $$ f'(x)= f(x)-f(x-1) $$ \u6216 $$ f'(x)= f(x+1)-f(x) $$ \u6240\u4ee5\u6709\uff1a $$ f'(x) = \\frac{f(x+1)-f(x-1)}{2} $$ \u5047\u8bbe\u8981\u5904\u7406\u7684\u56fe\u50cf\u4e3a I I \uff0c\u5728\u4e24\u4e2a\u65b9\u5411\u6c42\u5bfc:\u0015 \u0015\u0015\u0015 \u0015\u0015 \u6c34\u5e73\u53d8\u5316 : \u5c06\u56fe\u50cf I I \u4e0e\u5947\u6570\u5927\u5c0f\u7684\u6a21\u7248\u8fdb\u884c\u5377\u79ef\uff0c\u7ed3\u679c\u4e3a G_x G_x \u3002\u6bd4\u5982\uff0c\u5f53\u6a21\u677f\u5927\u5c0f\u4e3a3\u65f6, G_x G_x \u4e3a: G_x=\\left[\\begin{matrix}-1&0&+1\\\\-2&0&+2\\\\-1&0&+1\\end{matrix}\\right]* I G_x=\\left[\\begin{matrix}-1&0&+1\\\\-2&0&+2\\\\-1&0&+1\\end{matrix}\\right]* I \u5782\u76f4\u53d8\u5316 : \u5c06\u56fe\u50cf I I \u4e0e\u5947\u6570\u5927\u5c0f\u7684\u6a21\u677f\u8fdb\u884c\u5377\u79ef\uff0c\u7ed3\u679c\u4e3a G_y G_y \u3002\u6bd4\u5982\uff0c\u5f53\u6a21\u677f\u5927\u5c0f\u4e3a3\u65f6, G_y G_y \u4e3a: G_y = \\left[\\begin{matrix}-1&-2&-1\\\\0&0&0\\\\+1&+2&+1\\end{matrix}\\right]*I G_y = \\left[\\begin{matrix}-1&-2&-1\\\\0&0&0\\\\+1&+2&+1\\end{matrix}\\right]*I \u5728\u56fe\u50cf\u7684\u6bcf\u4e00\u70b9\uff0c\u7ed3\u5408\u4ee5\u4e0a\u4e24\u4e2a\u7ed3\u679c\u6c42\u51fa\uff1a G = \\sqrt{G_{x}^2+G_{y}^2} G = \\sqrt{G_{x}^2+G_{y}^2} \u7edf\u8ba1\u6781\u5927\u503c\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u56fe\u50cf\u7684\u8fb9\u7f18\u3002 \u6ce8\u610f \uff1a\u5f53\u5185\u6838\u5927\u5c0f\u4e3a3\u65f6, \u4ee5\u4e0aSobel\u5185\u6838\u53ef\u80fd\u4ea7\u751f\u6bd4\u8f83\u660e\u663e\u7684\u8bef\u5dee\uff0c \u4e3a\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528Scharr\u51fd\u6570\uff0c\u4f46\u8be5\u51fd\u6570\u4ec5\u4f5c\u7528\u4e8e\u5927\u5c0f\u4e3a3\u7684\u5185\u6838\u3002\u8be5\u51fd\u6570\u7684\u8fd0\u7b97\u4e0eSobel\u51fd\u6570\u4e00\u6837\u5feb\uff0c\u4f46\u7ed3\u679c\u5374\u66f4\u52a0\u7cbe\u786e\uff0c\u5176\u8ba1\u7b97\u65b9\u6cd5\u4e3a: G_x=\\left[\\begin{matrix}-3&0&+3\\\\-10&0&+10\\\\-3&0&+3\\end{matrix}\\right]* I G_x=\\left[\\begin{matrix}-3&0&+3\\\\-10&0&+10\\\\-3&0&+3\\end{matrix}\\right]* I G_y = \\left[\\begin{matrix}-3&-10&-3\\\\0&0&0\\\\+3&+10&+3\\end{matrix}\\right]*I G_y = \\left[\\begin{matrix}-3&-10&-3\\\\0&0&0\\\\+3&+10&+3\\end{matrix}\\right]*I 2.2 \u5e94\u7528 \u00b6 \u5229\u7528OpenCV\u8fdb\u884csobel\u8fb9\u7f18\u68c0\u6d4b\u7684API\u662f\uff1a Sobel_x_or_y = cv2 . Sobel ( src , ddepth , dx , dy , ksize ) \u53c2\u6570\uff1a src\uff1a\u4f20\u5165\u7684\u56fe\u50cf ddepth: \u56fe\u50cf\u7684\u6df1\u5ea6 dx\u548cdy: \u6307\u6c42\u5bfc\u7684\u9636\u6570\uff0c0\u8868\u793a\u8fd9\u4e2a\u65b9\u5411\u4e0a\u6ca1\u6709\u6c42\u5bfc\uff0c\u53d6\u503c\u4e3a0\u30011\u3002 ksize: \u662fSobel\u7b97\u5b50\u7684\u5927\u5c0f\uff0c\u5373\u5377\u79ef\u6838\u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u4e3a\u5947\u65701\u30013\u30015\u30017\uff0c\u9ed8\u8ba4\u4e3a3\u3002 \u6ce8\u610f\uff1a\u5982\u679cksize=-1\uff0c\u5c31\u6f14\u53d8\u6210\u4e3a3x3\u7684Scharr\u7b97\u5b50\u3002 Sobel\u51fd\u6570\u6c42\u5b8c\u5bfc\u6570\u540e\u4f1a\u6709\u8d1f\u503c\uff0c\u8fd8\u6709\u4f1a\u5927\u4e8e255\u7684\u503c\u3002\u800c\u539f\u56fe\u50cf\u662fuint8\uff0c\u53738\u4f4d\u65e0\u7b26\u53f7\u6570\uff0c\u6240\u4ee5Sobel\u5efa\u7acb\u7684\u56fe\u50cf\u4f4d\u6570\u4e0d\u591f\uff0c\u4f1a\u6709\u622a\u65ad\u3002\u56e0\u6b64\u8981\u4f7f\u752816\u4f4d\u6709\u7b26\u53f7\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5373cv2.CV_16S\u3002\u5904\u7406\u5b8c\u56fe\u50cf\u540e\uff0c\u518d\u4f7f\u7528cv2.convertScaleAbs()\u51fd\u6570\u5c06\u5176\u8f6c\u56de\u539f\u6765\u7684uint8\u683c\u5f0f\uff0c\u5426\u5219\u56fe\u50cf\u65e0\u6cd5\u663e\u793a\u3002 Sobel\u7b97\u5b50\u662f\u5728\u4e24\u4e2a\u65b9\u5411\u8ba1\u7b97\u7684\uff0c\u6700\u540e\u8fd8\u9700\u8981\u7528cv2.addWeighted( )\u51fd\u6570\u5c06\u5176\u7ec4\u5408\u8d77\u6765 Scale_abs = cv2.convertScaleAbs(x) # \u683c\u5f0f\u8f6c\u6362\u51fd\u6570 result = cv2.addWeighted(src1, alpha, src2, beta) # \u56fe\u50cf\u6df7\u5408 \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( './image/horse.jpg' , 0 ) # 2 \u8ba1\u7b97Sobel\u5377\u79ef\u7ed3\u679c x = cv . Sobel ( img , cv . CV_16S , 1 , 0 ) y = cv . Sobel ( img , cv . CV_16S , 0 , 1 ) # 3 \u5c06\u6570\u636e\u8fdb\u884c\u8f6c\u6362 Scale_absX = cv . convertScaleAbs ( x ) # convert \u8f6c\u6362 scale \u7f29\u653e Scale_absY = cv . convertScaleAbs ( y ) # 4 \u7ed3\u679c\u5408\u6210 result = cv . addWeighted ( Scale_absX , 0.5 , Scale_absY , 0.5 , 0 ) # 5 \u56fe\u50cf\u663e\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img , cmap = plt . cm . gray ), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( result , cmap = plt . cm . gray ), plt . title ( 'Sobel\u6ee4\u6ce2\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () \u5c06\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u8ba1\u7b97sobel\u7b97\u5b50\u7684\u90e8\u5206\u4e2d\u5c06ksize\u8bbe\u4e3a-1\uff0c\u5c31\u662f\u5229\u7528Scharr\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\u3002 x = cv . Sobel ( img , cv . CV_16S , 1 , 0 , ksize = - 1 ) y = cv . Sobel ( img , cv . CV_16S , 0 , 1 , ksize = - 1 ) 3 Laplacian\u7b97\u5b50 \u00b6 Laplacian\u662f\u5229\u7528\u4e8c\u9636\u5bfc\u6570\u6765\u68c0\u6d4b\u8fb9\u7f18 \u3002 \u56e0\u4e3a\u56fe\u50cf\u662f \u201c 2\u7ef4 \u201d, \u6211\u4eec\u9700\u8981\u5728\u4e24\u4e2a\u65b9\u5411\u6c42\u5bfc\uff0c\u5982\u4e0b\u5f0f\u6240\u793a\uff1a \\Delta src= \\frac{\\partial ^{2}src}{\\partial x^{2}}+ \\frac{\\partial ^{2}src}{\\partial y^{2}} \\Delta src= \\frac{\\partial ^{2}src}{\\partial x^{2}}+ \\frac{\\partial ^{2}src}{\\partial y^{2}} \u90a3\u4e0d\u8fde\u7eed\u51fd\u6570\u7684\u4e8c\u9636\u5bfc\u6570\u662f\uff1a f''(x)=f'(x+1)-f'(x)=f(x+1)+f(x-1)-2f(x) f''(x)=f'(x+1)-f'(x)=f(x+1)+f(x-1)-2f(x) \u90a3\u4f7f\u7528\u7684\u5377\u79ef\u6838\u662f\uff1a kernel=\\begin{bmatrix} \\ 0\\ \\ \\ \\ 1\\ \\ \\ \\ 0\\\\ \\ 1\\ -4\\ \\ 1\\\\ \\ 0\\ \\ \\ \\ 1\\ \\ \\ \\ 0 \\end{bmatrix} kernel=\\begin{bmatrix} \\ 0\\ \\ \\ \\ 1\\ \\ \\ \\ 0\\\\ \\ 1\\ -4\\ \\ 1\\\\ \\ 0\\ \\ \\ \\ 1\\ \\ \\ \\ 0 \\end{bmatrix} API\uff1a laplacian = cv2 . Laplacian ( src , ddepth , ksize ) \u53c2\u6570\uff1a Src: \u9700\u8981\u5904\u7406\u7684\u56fe\u50cf\uff0c Ddepth: \u56fe\u50cf\u7684\u6df1\u5ea6\uff0c-1\u8868\u793a\u91c7\u7528\u7684\u662f\u539f\u56fe\u50cf\u76f8\u540c\u7684\u6df1\u5ea6\uff0c\u76ee\u6807\u56fe\u50cf\u7684\u6df1\u5ea6\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e\u539f\u56fe\u50cf\u7684\u6df1\u5ea6\uff1b ksize\uff1a\u7b97\u5b50\u7684\u5927\u5c0f\uff0c\u5373\u5377\u79ef\u6838\u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u4e3a1,3,5,7\u3002 \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( './image/horse.jpg' , 0 ) # 2 laplacian\u8f6c\u6362 result = cv . Laplacian ( img , cv . CV_16S ) Scale_abs = cv . convertScaleAbs ( result ) # 3 \u56fe\u50cf\u5c55\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img , cmap = plt . cm . gray ), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( Scale_abs , cmap = plt . cm . gray ), plt . title ( 'Laplacian\u68c0\u6d4b\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () 4 Canny\u8fb9\u7f18\u68c0\u6d4b \u00b6 Canny \u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u662f\u4e00\u79cd\u975e\u5e38\u6d41\u884c\u7684\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\uff0c\u662f John F. Canny \u4e8e 1986\u5e74\u63d0\u51fa\u7684\uff0c\u88ab\u8ba4\u4e3a\u662f\u6700\u4f18\u7684\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u3002 4.1 \u539f\u7406 \u00b6 Canny\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u662f\u75314\u6b65\u6784\u6210\uff0c\u5206\u522b\u4ecb\u7ecd\u5982\u4e0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u566a\u58f0\u53bb\u9664 \u7531\u4e8e\u8fb9\u7f18\u68c0\u6d4b\u5f88\u5bb9\u6613\u53d7\u5230\u566a\u58f0\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u9996\u5148\u4f7f\u7528 5*5 5*5 \u9ad8\u65af\u6ee4\u6ce2\u5668\u53bb\u9664\u566a\u58f0\uff0c\u5728\u56fe\u50cf\u5e73\u6ed1\u90a3\u4e00\u7ae0\u8282\u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u56fe\u50cf\u68af\u5ea6 \u5bf9\u5e73\u6ed1\u540e\u7684\u56fe\u50cf\u4f7f\u7528 Sobel \u7b97\u5b50\u8ba1\u7b97\u6c34\u5e73\u65b9\u5411\u548c\u7ad6\u76f4\u65b9\u5411\u7684\u4e00\u9636\u5bfc\u6570\uff08Gx \u548c Gy\uff09\u3002\u6839\u636e\u5f97\u5230\u7684\u8fd9\u4e24\u5e45\u68af\u5ea6\u56fe\uff08Gx \u548c Gy\uff09\u627e\u5230\u8fb9\u754c\u7684\u68af\u5ea6\u548c\u65b9\u5411\uff0c\u516c\u5f0f\u5982\u4e0b: Edge\\_Gradient\\left ( G \\right )= \\sqrt{G_{x}^{2}+G_{y}^{2}} Edge\\_Gradient\\left ( G \\right )= \\sqrt{G_{x}^{2}+G_{y}^{2}} Angle\\left ( \\theta \\right )= tan^{-1}\\left ( \\frac{G_{y}}{G_{x}} \\right ) Angle\\left ( \\theta \\right )= tan^{-1}\\left ( \\frac{G_{y}}{G_{x}} \\right ) \u5982\u679c\u67d0\u4e2a\u50cf\u7d20\u70b9\u662f\u8fb9\u7f18\uff0c\u5219\u5176\u68af\u5ea6\u65b9\u5411\u603b\u662f\u5782\u76f4\u4e0e\u8fb9\u7f18\u5782\u76f4\u3002\u68af\u5ea6\u65b9\u5411\u88ab\u5f52\u4e3a\u56db\u7c7b\uff1a\u5782\u76f4\uff0c\u6c34\u5e73\uff0c\u548c\u4e24\u4e2a\u5bf9\u89d2\u7ebf\u65b9\u5411\u3002 \u7b2c\u4e09\u6b65\uff1a\u975e\u6781\u5927\u503c\u6291\u5236 \u5728\u83b7\u5f97\u68af\u5ea6\u7684\u65b9\u5411\u548c\u5927\u5c0f\u4e4b\u540e\uff0c\u5bf9\u6574\u5e45\u56fe\u50cf\u8fdb\u884c\u626b\u63cf\uff0c\u53bb\u9664\u90a3\u4e9b\u975e\u8fb9\u754c\u4e0a\u7684\u70b9\u3002\u5bf9\u6bcf\u4e00\u4e2a\u50cf\u7d20\u8fdb\u884c\u68c0\u67e5\uff0c\u770b\u8fd9\u4e2a\u70b9\u7684\u68af\u5ea6\u662f\u4e0d\u662f\u5468\u56f4\u5177\u6709\u76f8\u540c\u68af\u5ea6\u65b9\u5411\u7684\u70b9\u4e2d\u6700\u5927\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a A\u70b9\u4f4d\u4e8e\u56fe\u50cf\u7684\u8fb9\u7f18\uff0c\u5728\u5176\u68af\u5ea6\u53d8\u5316\u65b9\u5411\uff0c\u9009\u62e9\u50cf\u7d20\u70b9B\u548cC\uff0c\u7528\u6765\u68c0\u9a8cA\u70b9\u7684\u68af\u5ea6\u662f\u5426\u4e3a\u6781\u5927\u503c\uff0c\u82e5\u4e3a\u6781\u5927\u503c\uff0c\u5219\u8fdb\u884c\u4fdd\u7559\uff0c\u5426\u5219A\u70b9\u88ab\u6291\u5236\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u5177\u6709\u201c\u7ec6\u8fb9\u201d\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u3002 \u7b2c\u56db\u6b65\uff1a\u6ede\u540e\u9608\u503c \u73b0\u5728\u8981\u786e\u5b9a\u771f\u6b63\u7684\u8fb9\u754c\u3002 \u6211\u4eec\u8bbe\u7f6e\u4e24\u4e2a\u9608\u503c\uff1a minVal \u548c maxVal\u3002 \u5f53\u56fe\u50cf\u7684\u7070\u5ea6\u68af\u5ea6\u9ad8\u4e8e maxVal \u65f6\u88ab\u8ba4\u4e3a\u662f\u771f\u7684\u8fb9\u754c\uff0c \u4f4e\u4e8e minVal \u7684\u8fb9\u754c\u4f1a\u88ab\u629b\u5f03\u3002\u5982\u679c\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684\u8bdd\uff0c\u5c31\u8981\u770b\u8fd9\u4e2a\u70b9\u662f\u5426\u4e0e\u67d0\u4e2a\u88ab\u786e\u5b9a\u4e3a\u771f\u6b63\u7684\u8fb9\u754c\u70b9\u76f8\u8fde\uff0c\u5982\u679c\u662f\u5c31\u8ba4\u4e3a\u5b83\u4e5f\u662f\u8fb9\u754c\u70b9\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u629b\u5f03\u3002\u5982\u4e0b\u56fe\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0cA \u9ad8\u4e8e\u9608\u503c maxVal \u6240\u4ee5\u662f\u771f\u6b63\u7684\u8fb9\u754c\u70b9\uff0cC \u867d\u7136\u4f4e\u4e8e maxVal \u4f46\u9ad8\u4e8e minVal \u5e76\u4e14\u4e0e A \u76f8\u8fde\uff0c\u6240\u4ee5\u4e5f\u88ab\u8ba4\u4e3a\u662f\u771f\u6b63\u7684\u8fb9\u754c\u70b9\u3002\u800c B \u5c31\u4f1a\u88ab\u629b\u5f03\uff0c\u56e0\u4e3a\u4f4e\u4e8e maxVal \u800c\u4e14\u4e0d\u4e0e\u771f\u6b63\u7684\u8fb9\u754c\u70b9\u76f8\u8fde\u3002\u6240\u4ee5\u9009\u62e9\u5408\u9002\u7684 maxVal \u548c minVal \u5bf9\u4e8e\u80fd\u5426\u5f97\u5230\u597d\u7684\u7ed3\u679c\u975e\u5e38\u91cd\u8981\u3002 4.2 \u5e94\u7528 \u00b6 \u5728OpenCV\u4e2d\u8981\u5b9e\u73b0Canny\u68c0\u6d4b\u4f7f\u7528\u7684API: canny = cv2 . Canny ( image , threshold1 , threshold2 ) \u53c2\u6570\uff1a image:\u7070\u5ea6\u56fe\uff0c threshold1: minval\uff0c\u8f83\u5c0f\u7684\u9608\u503c\u5c06\u95f4\u65ad\u7684\u8fb9\u7f18\u8fde\u63a5\u8d77\u6765 threshold2: maxval\uff0c\u8f83\u5927\u7684\u9608\u503c\u68c0\u6d4b\u56fe\u50cf\u4e2d\u660e\u663e\u7684\u8fb9\u7f18 \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( './image/horse.jpg' , 0 ) # 2 Canny\u8fb9\u7f18\u68c0\u6d4b lowThreshold = 0 max_lowThreshold = 100 canny = cv . Canny ( img , lowThreshold , max_lowThreshold ) # 3 \u56fe\u50cf\u5c55\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img , cmap = plt . cm . gray ), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( canny , cmap = plt . cm . gray ), plt . title ( 'Canny\u68c0\u6d4b\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () \u603b\u7ed3 1.\u8fb9\u7f18\u68c0\u6d4b\u7684\u539f\u7406 \u57fa\u4e8e\u641c\u7d22\uff1a\u5229\u7528\u4e00\u9636\u5bfc\u6570\u7684\u6700\u5927\u503c\u83b7\u53d6\u8fb9\u754c \u57fa\u4e8e\u96f6\u7a7f\u8d8a\uff1a\u5229\u7528\u4e8c\u9636\u5bfc\u6570\u4e3a0\u83b7\u53d6\u8fb9\u754c 2.Sobel\u7b97\u5b50 \u200b \u57fa\u4e8e\u641c\u7d22\u7684\u65b9\u6cd5\u83b7\u53d6\u8fb9\u754c \u200b cv.sobel() \u200b cv.convertScaleAbs() \u200b cv.addweights() 3.Laplacian\u7b97\u5b50 \u200b \u57fa\u4e8e\u96f6\u7a7f\u8d8a\u83b7\u53d6\u8fb9\u754c \u200b cv.Laplacian() 4.Canny\u7b97\u6cd5 \u566a\u58f0\u53bb\u9664\uff1a\u9ad8\u65af\u6ee4\u6ce2 \u8ba1\u7b97\u56fe\u50cf\u68af\u5ea6\uff1asobel\u7b97\u5b50\uff0c\u8ba1\u7b97\u68af\u5ea6\u5927\u5c0f\u548c\u65b9\u5411 \u975e\u6781\u5927\u503c\u6291\u5236\uff1a\u5229\u7528\u68af\u5ea6\u65b9\u5411\u50cf\u7d20\u6765\u5224\u65ad\u5f53\u524d\u50cf\u7d20\u662f\u5426\u4e3a\u8fb9\u754c\u70b9 \u6ede\u540e\u9608\u503c\uff1a\u8bbe\u7f6e\u4e24\u4e2a\u9608\u503c\uff0c\u786e\u5b9a\u6700\u7ec8\u7684\u8fb9\u754c","title":"4.5 \u8fb9\u7f18\u68c0\u6d4b"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#45","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3Sobel\u7b97\u5b50\uff0cScharr\u7b97\u5b50\u548c\u62c9\u666e\u62c9\u65af\u7b97\u5b50 \u638c\u63e1canny\u8fb9\u7f18\u68c0\u6d4b\u7684\u539f\u7406\u53ca\u5e94\u7528","title":"4.5 \u8fb9\u7f18\u68c0\u6d4b"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#1","text":"\u8fb9\u7f18\u68c0\u6d4b\u662f\u56fe\u50cf\u5904\u7406\u548c\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u7684\u57fa\u672c\u95ee\u9898\uff0c\u8fb9\u7f18\u68c0\u6d4b\u7684\u76ee\u7684\u662f\u6807\u8bc6\u6570\u5b57\u56fe\u50cf\u4e2d\u4eae\u5ea6\u53d8\u5316\u660e\u663e\u7684\u70b9\u3002\u56fe\u50cf\u5c5e\u6027\u4e2d\u7684\u663e\u8457\u53d8\u5316\u901a\u5e38\u53cd\u6620\u4e86\u5c5e\u6027\u7684\u91cd\u8981\u4e8b\u4ef6\u548c\u53d8\u5316\u3002\u8fb9\u7f18\u7684\u8868\u73b0\u5f62\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe\u50cf\u8fb9\u7f18\u68c0\u6d4b\u5927\u5e45\u5ea6\u5730\u51cf\u5c11\u4e86\u6570\u636e\u91cf\uff0c\u5e76\u4e14\u5254\u9664\u4e86\u53ef\u4ee5\u8ba4\u4e3a\u4e0d\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u4fdd\u7559\u4e86\u56fe\u50cf\u91cd\u8981\u7684\u7ed3\u6784\u5c5e\u6027\u3002\u6709\u8bb8\u591a\u65b9\u6cd5\u7528\u4e8e\u8fb9\u7f18\u68c0\u6d4b\uff0c\u5b83\u4eec\u7684\u7edd\u5927\u90e8\u5206\u53ef\u4ee5\u5212\u5206\u4e3a\u4e24\u7c7b\uff1a \u57fa\u4e8e\u641c\u7d22**\u548c**\u57fa\u4e8e\u96f6\u7a7f\u8d8a \u3002 \u57fa\u4e8e\u641c\u7d22\uff1a\u901a\u8fc7\u5bfb\u627e\u56fe\u50cf\u4e00\u9636\u5bfc\u6570\u4e2d\u7684\u6700\u5927\u503c\u6765\u68c0\u6d4b\u8fb9\u754c\uff0c\u7136\u540e\u5229\u7528\u8ba1\u7b97\u7ed3\u679c\u4f30\u8ba1\u8fb9\u7f18\u7684\u5c40\u90e8\u65b9\u5411\uff0c\u901a\u5e38\u91c7\u7528\u68af\u5ea6\u7684\u65b9\u5411\uff0c\u5e76\u5229\u7528\u6b64\u65b9\u5411\u627e\u5230\u5c40\u90e8\u68af\u5ea6\u6a21\u7684\u6700\u5927\u503c\uff0c\u4ee3\u8868\u7b97\u6cd5\u662fSobel\u7b97\u5b50\u548cScharr\u7b97\u5b50\u3002 \u57fa\u4e8e\u96f6\u7a7f\u8d8a\uff1a\u901a\u8fc7\u5bfb\u627e\u56fe\u50cf\u4e8c\u9636\u5bfc\u6570\u96f6\u7a7f\u8d8a\u6765\u5bfb\u627e\u8fb9\u754c\uff0c\u4ee3\u8868\u7b97\u6cd5\u662fLaplacian\u7b97\u5b50\u3002","title":"1 \u539f\u7406"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#2-sobel","text":"Sobel\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u5b9e\u9645\u5e94\u7528\u4e2d\u6548\u7387\u6bd4canny\u8fb9\u7f18\u68c0\u6d4b\u6548\u7387\u8981\u9ad8\uff0c\u4f46\u662f\u8fb9\u7f18\u4e0d\u5982Canny\u68c0\u6d4b\u7684\u51c6\u786e\uff0c\u4f46\u662f\u5f88\u591a\u5b9e\u9645\u5e94\u7528\u7684\u573a\u5408\uff0csobel\u8fb9\u7f18\u5374\u662f\u9996\u9009\uff0cSobel\u7b97\u5b50\u662f\u9ad8\u65af\u5e73\u6ed1\u4e0e\u5fae\u5206\u64cd\u4f5c\u7684\u7ed3\u5408\u4f53\uff0c\u6240\u4ee5\u5176\u6297\u566a\u58f0\u80fd\u529b\u5f88\u5f3a\uff0c\u7528\u9014\u8f83\u591a\u3002\u5c24\u5176\u662f\u6548\u7387\u8981\u6c42\u8f83\u9ad8\uff0c\u800c\u5bf9\u7ec6\u7eb9\u7406\u4e0d\u592a\u5173\u5fc3\u7684\u65f6\u5019\u3002","title":"2 Sobel\u68c0\u6d4b\u7b97\u5b50"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#21","text":"\u5bf9\u4e8e\u4e0d\u8fde\u7eed\u7684\u51fd\u6570\uff0c\u4e00\u9636\u5bfc\u6570\u53ef\u4ee5\u5199\u4f5c\uff1a $$ f'(x)= f(x)-f(x-1) $$ \u6216 $$ f'(x)= f(x+1)-f(x) $$ \u6240\u4ee5\u6709\uff1a $$ f'(x) = \\frac{f(x+1)-f(x-1)}{2} $$ \u5047\u8bbe\u8981\u5904\u7406\u7684\u56fe\u50cf\u4e3a I I \uff0c\u5728\u4e24\u4e2a\u65b9\u5411\u6c42\u5bfc:\u0015 \u0015\u0015\u0015 \u0015\u0015 \u6c34\u5e73\u53d8\u5316 : \u5c06\u56fe\u50cf I I \u4e0e\u5947\u6570\u5927\u5c0f\u7684\u6a21\u7248\u8fdb\u884c\u5377\u79ef\uff0c\u7ed3\u679c\u4e3a G_x G_x \u3002\u6bd4\u5982\uff0c\u5f53\u6a21\u677f\u5927\u5c0f\u4e3a3\u65f6, G_x G_x \u4e3a: G_x=\\left[\\begin{matrix}-1&0&+1\\\\-2&0&+2\\\\-1&0&+1\\end{matrix}\\right]* I G_x=\\left[\\begin{matrix}-1&0&+1\\\\-2&0&+2\\\\-1&0&+1\\end{matrix}\\right]* I \u5782\u76f4\u53d8\u5316 : \u5c06\u56fe\u50cf I I \u4e0e\u5947\u6570\u5927\u5c0f\u7684\u6a21\u677f\u8fdb\u884c\u5377\u79ef\uff0c\u7ed3\u679c\u4e3a G_y G_y \u3002\u6bd4\u5982\uff0c\u5f53\u6a21\u677f\u5927\u5c0f\u4e3a3\u65f6, G_y G_y \u4e3a: G_y = \\left[\\begin{matrix}-1&-2&-1\\\\0&0&0\\\\+1&+2&+1\\end{matrix}\\right]*I G_y = \\left[\\begin{matrix}-1&-2&-1\\\\0&0&0\\\\+1&+2&+1\\end{matrix}\\right]*I \u5728\u56fe\u50cf\u7684\u6bcf\u4e00\u70b9\uff0c\u7ed3\u5408\u4ee5\u4e0a\u4e24\u4e2a\u7ed3\u679c\u6c42\u51fa\uff1a G = \\sqrt{G_{x}^2+G_{y}^2} G = \\sqrt{G_{x}^2+G_{y}^2} \u7edf\u8ba1\u6781\u5927\u503c\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u56fe\u50cf\u7684\u8fb9\u7f18\u3002 \u6ce8\u610f \uff1a\u5f53\u5185\u6838\u5927\u5c0f\u4e3a3\u65f6, \u4ee5\u4e0aSobel\u5185\u6838\u53ef\u80fd\u4ea7\u751f\u6bd4\u8f83\u660e\u663e\u7684\u8bef\u5dee\uff0c \u4e3a\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528Scharr\u51fd\u6570\uff0c\u4f46\u8be5\u51fd\u6570\u4ec5\u4f5c\u7528\u4e8e\u5927\u5c0f\u4e3a3\u7684\u5185\u6838\u3002\u8be5\u51fd\u6570\u7684\u8fd0\u7b97\u4e0eSobel\u51fd\u6570\u4e00\u6837\u5feb\uff0c\u4f46\u7ed3\u679c\u5374\u66f4\u52a0\u7cbe\u786e\uff0c\u5176\u8ba1\u7b97\u65b9\u6cd5\u4e3a: G_x=\\left[\\begin{matrix}-3&0&+3\\\\-10&0&+10\\\\-3&0&+3\\end{matrix}\\right]* I G_x=\\left[\\begin{matrix}-3&0&+3\\\\-10&0&+10\\\\-3&0&+3\\end{matrix}\\right]* I G_y = \\left[\\begin{matrix}-3&-10&-3\\\\0&0&0\\\\+3&+10&+3\\end{matrix}\\right]*I G_y = \\left[\\begin{matrix}-3&-10&-3\\\\0&0&0\\\\+3&+10&+3\\end{matrix}\\right]*I","title":"2.1 \u65b9\u6cd5"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#22","text":"\u5229\u7528OpenCV\u8fdb\u884csobel\u8fb9\u7f18\u68c0\u6d4b\u7684API\u662f\uff1a Sobel_x_or_y = cv2 . Sobel ( src , ddepth , dx , dy , ksize ) \u53c2\u6570\uff1a src\uff1a\u4f20\u5165\u7684\u56fe\u50cf ddepth: \u56fe\u50cf\u7684\u6df1\u5ea6 dx\u548cdy: \u6307\u6c42\u5bfc\u7684\u9636\u6570\uff0c0\u8868\u793a\u8fd9\u4e2a\u65b9\u5411\u4e0a\u6ca1\u6709\u6c42\u5bfc\uff0c\u53d6\u503c\u4e3a0\u30011\u3002 ksize: \u662fSobel\u7b97\u5b50\u7684\u5927\u5c0f\uff0c\u5373\u5377\u79ef\u6838\u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u4e3a\u5947\u65701\u30013\u30015\u30017\uff0c\u9ed8\u8ba4\u4e3a3\u3002 \u6ce8\u610f\uff1a\u5982\u679cksize=-1\uff0c\u5c31\u6f14\u53d8\u6210\u4e3a3x3\u7684Scharr\u7b97\u5b50\u3002 Sobel\u51fd\u6570\u6c42\u5b8c\u5bfc\u6570\u540e\u4f1a\u6709\u8d1f\u503c\uff0c\u8fd8\u6709\u4f1a\u5927\u4e8e255\u7684\u503c\u3002\u800c\u539f\u56fe\u50cf\u662fuint8\uff0c\u53738\u4f4d\u65e0\u7b26\u53f7\u6570\uff0c\u6240\u4ee5Sobel\u5efa\u7acb\u7684\u56fe\u50cf\u4f4d\u6570\u4e0d\u591f\uff0c\u4f1a\u6709\u622a\u65ad\u3002\u56e0\u6b64\u8981\u4f7f\u752816\u4f4d\u6709\u7b26\u53f7\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5373cv2.CV_16S\u3002\u5904\u7406\u5b8c\u56fe\u50cf\u540e\uff0c\u518d\u4f7f\u7528cv2.convertScaleAbs()\u51fd\u6570\u5c06\u5176\u8f6c\u56de\u539f\u6765\u7684uint8\u683c\u5f0f\uff0c\u5426\u5219\u56fe\u50cf\u65e0\u6cd5\u663e\u793a\u3002 Sobel\u7b97\u5b50\u662f\u5728\u4e24\u4e2a\u65b9\u5411\u8ba1\u7b97\u7684\uff0c\u6700\u540e\u8fd8\u9700\u8981\u7528cv2.addWeighted( )\u51fd\u6570\u5c06\u5176\u7ec4\u5408\u8d77\u6765 Scale_abs = cv2.convertScaleAbs(x) # \u683c\u5f0f\u8f6c\u6362\u51fd\u6570 result = cv2.addWeighted(src1, alpha, src2, beta) # \u56fe\u50cf\u6df7\u5408 \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( './image/horse.jpg' , 0 ) # 2 \u8ba1\u7b97Sobel\u5377\u79ef\u7ed3\u679c x = cv . Sobel ( img , cv . CV_16S , 1 , 0 ) y = cv . Sobel ( img , cv . CV_16S , 0 , 1 ) # 3 \u5c06\u6570\u636e\u8fdb\u884c\u8f6c\u6362 Scale_absX = cv . convertScaleAbs ( x ) # convert \u8f6c\u6362 scale \u7f29\u653e Scale_absY = cv . convertScaleAbs ( y ) # 4 \u7ed3\u679c\u5408\u6210 result = cv . addWeighted ( Scale_absX , 0.5 , Scale_absY , 0.5 , 0 ) # 5 \u56fe\u50cf\u663e\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img , cmap = plt . cm . gray ), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( result , cmap = plt . cm . gray ), plt . title ( 'Sobel\u6ee4\u6ce2\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () \u5c06\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u8ba1\u7b97sobel\u7b97\u5b50\u7684\u90e8\u5206\u4e2d\u5c06ksize\u8bbe\u4e3a-1\uff0c\u5c31\u662f\u5229\u7528Scharr\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\u3002 x = cv . Sobel ( img , cv . CV_16S , 1 , 0 , ksize = - 1 ) y = cv . Sobel ( img , cv . CV_16S , 0 , 1 , ksize = - 1 )","title":"2.2 \u5e94\u7528"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#3-laplacian","text":"Laplacian\u662f\u5229\u7528\u4e8c\u9636\u5bfc\u6570\u6765\u68c0\u6d4b\u8fb9\u7f18 \u3002 \u56e0\u4e3a\u56fe\u50cf\u662f \u201c 2\u7ef4 \u201d, \u6211\u4eec\u9700\u8981\u5728\u4e24\u4e2a\u65b9\u5411\u6c42\u5bfc\uff0c\u5982\u4e0b\u5f0f\u6240\u793a\uff1a \\Delta src= \\frac{\\partial ^{2}src}{\\partial x^{2}}+ \\frac{\\partial ^{2}src}{\\partial y^{2}} \\Delta src= \\frac{\\partial ^{2}src}{\\partial x^{2}}+ \\frac{\\partial ^{2}src}{\\partial y^{2}} \u90a3\u4e0d\u8fde\u7eed\u51fd\u6570\u7684\u4e8c\u9636\u5bfc\u6570\u662f\uff1a f''(x)=f'(x+1)-f'(x)=f(x+1)+f(x-1)-2f(x) f''(x)=f'(x+1)-f'(x)=f(x+1)+f(x-1)-2f(x) \u90a3\u4f7f\u7528\u7684\u5377\u79ef\u6838\u662f\uff1a kernel=\\begin{bmatrix} \\ 0\\ \\ \\ \\ 1\\ \\ \\ \\ 0\\\\ \\ 1\\ -4\\ \\ 1\\\\ \\ 0\\ \\ \\ \\ 1\\ \\ \\ \\ 0 \\end{bmatrix} kernel=\\begin{bmatrix} \\ 0\\ \\ \\ \\ 1\\ \\ \\ \\ 0\\\\ \\ 1\\ -4\\ \\ 1\\\\ \\ 0\\ \\ \\ \\ 1\\ \\ \\ \\ 0 \\end{bmatrix} API\uff1a laplacian = cv2 . Laplacian ( src , ddepth , ksize ) \u53c2\u6570\uff1a Src: \u9700\u8981\u5904\u7406\u7684\u56fe\u50cf\uff0c Ddepth: \u56fe\u50cf\u7684\u6df1\u5ea6\uff0c-1\u8868\u793a\u91c7\u7528\u7684\u662f\u539f\u56fe\u50cf\u76f8\u540c\u7684\u6df1\u5ea6\uff0c\u76ee\u6807\u56fe\u50cf\u7684\u6df1\u5ea6\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e\u539f\u56fe\u50cf\u7684\u6df1\u5ea6\uff1b ksize\uff1a\u7b97\u5b50\u7684\u5927\u5c0f\uff0c\u5373\u5377\u79ef\u6838\u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u4e3a1,3,5,7\u3002 \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u8bfb\u53d6\u56fe\u50cf img = cv . imread ( './image/horse.jpg' , 0 ) # 2 laplacian\u8f6c\u6362 result = cv . Laplacian ( img , cv . CV_16S ) Scale_abs = cv . convertScaleAbs ( result ) # 3 \u56fe\u50cf\u5c55\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img , cmap = plt . cm . gray ), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( Scale_abs , cmap = plt . cm . gray ), plt . title ( 'Laplacian\u68c0\u6d4b\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show ()","title":"3 Laplacian\u7b97\u5b50"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#4-canny","text":"Canny \u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u662f\u4e00\u79cd\u975e\u5e38\u6d41\u884c\u7684\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\uff0c\u662f John F. Canny \u4e8e 1986\u5e74\u63d0\u51fa\u7684\uff0c\u88ab\u8ba4\u4e3a\u662f\u6700\u4f18\u7684\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u3002","title":"4 Canny\u8fb9\u7f18\u68c0\u6d4b"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#41","text":"Canny\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u662f\u75314\u6b65\u6784\u6210\uff0c\u5206\u522b\u4ecb\u7ecd\u5982\u4e0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u566a\u58f0\u53bb\u9664 \u7531\u4e8e\u8fb9\u7f18\u68c0\u6d4b\u5f88\u5bb9\u6613\u53d7\u5230\u566a\u58f0\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u9996\u5148\u4f7f\u7528 5*5 5*5 \u9ad8\u65af\u6ee4\u6ce2\u5668\u53bb\u9664\u566a\u58f0\uff0c\u5728\u56fe\u50cf\u5e73\u6ed1\u90a3\u4e00\u7ae0\u8282\u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u56fe\u50cf\u68af\u5ea6 \u5bf9\u5e73\u6ed1\u540e\u7684\u56fe\u50cf\u4f7f\u7528 Sobel \u7b97\u5b50\u8ba1\u7b97\u6c34\u5e73\u65b9\u5411\u548c\u7ad6\u76f4\u65b9\u5411\u7684\u4e00\u9636\u5bfc\u6570\uff08Gx \u548c Gy\uff09\u3002\u6839\u636e\u5f97\u5230\u7684\u8fd9\u4e24\u5e45\u68af\u5ea6\u56fe\uff08Gx \u548c Gy\uff09\u627e\u5230\u8fb9\u754c\u7684\u68af\u5ea6\u548c\u65b9\u5411\uff0c\u516c\u5f0f\u5982\u4e0b: Edge\\_Gradient\\left ( G \\right )= \\sqrt{G_{x}^{2}+G_{y}^{2}} Edge\\_Gradient\\left ( G \\right )= \\sqrt{G_{x}^{2}+G_{y}^{2}} Angle\\left ( \\theta \\right )= tan^{-1}\\left ( \\frac{G_{y}}{G_{x}} \\right ) Angle\\left ( \\theta \\right )= tan^{-1}\\left ( \\frac{G_{y}}{G_{x}} \\right ) \u5982\u679c\u67d0\u4e2a\u50cf\u7d20\u70b9\u662f\u8fb9\u7f18\uff0c\u5219\u5176\u68af\u5ea6\u65b9\u5411\u603b\u662f\u5782\u76f4\u4e0e\u8fb9\u7f18\u5782\u76f4\u3002\u68af\u5ea6\u65b9\u5411\u88ab\u5f52\u4e3a\u56db\u7c7b\uff1a\u5782\u76f4\uff0c\u6c34\u5e73\uff0c\u548c\u4e24\u4e2a\u5bf9\u89d2\u7ebf\u65b9\u5411\u3002 \u7b2c\u4e09\u6b65\uff1a\u975e\u6781\u5927\u503c\u6291\u5236 \u5728\u83b7\u5f97\u68af\u5ea6\u7684\u65b9\u5411\u548c\u5927\u5c0f\u4e4b\u540e\uff0c\u5bf9\u6574\u5e45\u56fe\u50cf\u8fdb\u884c\u626b\u63cf\uff0c\u53bb\u9664\u90a3\u4e9b\u975e\u8fb9\u754c\u4e0a\u7684\u70b9\u3002\u5bf9\u6bcf\u4e00\u4e2a\u50cf\u7d20\u8fdb\u884c\u68c0\u67e5\uff0c\u770b\u8fd9\u4e2a\u70b9\u7684\u68af\u5ea6\u662f\u4e0d\u662f\u5468\u56f4\u5177\u6709\u76f8\u540c\u68af\u5ea6\u65b9\u5411\u7684\u70b9\u4e2d\u6700\u5927\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a A\u70b9\u4f4d\u4e8e\u56fe\u50cf\u7684\u8fb9\u7f18\uff0c\u5728\u5176\u68af\u5ea6\u53d8\u5316\u65b9\u5411\uff0c\u9009\u62e9\u50cf\u7d20\u70b9B\u548cC\uff0c\u7528\u6765\u68c0\u9a8cA\u70b9\u7684\u68af\u5ea6\u662f\u5426\u4e3a\u6781\u5927\u503c\uff0c\u82e5\u4e3a\u6781\u5927\u503c\uff0c\u5219\u8fdb\u884c\u4fdd\u7559\uff0c\u5426\u5219A\u70b9\u88ab\u6291\u5236\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u5177\u6709\u201c\u7ec6\u8fb9\u201d\u7684\u4e8c\u8fdb\u5236\u56fe\u50cf\u3002 \u7b2c\u56db\u6b65\uff1a\u6ede\u540e\u9608\u503c \u73b0\u5728\u8981\u786e\u5b9a\u771f\u6b63\u7684\u8fb9\u754c\u3002 \u6211\u4eec\u8bbe\u7f6e\u4e24\u4e2a\u9608\u503c\uff1a minVal \u548c maxVal\u3002 \u5f53\u56fe\u50cf\u7684\u7070\u5ea6\u68af\u5ea6\u9ad8\u4e8e maxVal \u65f6\u88ab\u8ba4\u4e3a\u662f\u771f\u7684\u8fb9\u754c\uff0c \u4f4e\u4e8e minVal \u7684\u8fb9\u754c\u4f1a\u88ab\u629b\u5f03\u3002\u5982\u679c\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684\u8bdd\uff0c\u5c31\u8981\u770b\u8fd9\u4e2a\u70b9\u662f\u5426\u4e0e\u67d0\u4e2a\u88ab\u786e\u5b9a\u4e3a\u771f\u6b63\u7684\u8fb9\u754c\u70b9\u76f8\u8fde\uff0c\u5982\u679c\u662f\u5c31\u8ba4\u4e3a\u5b83\u4e5f\u662f\u8fb9\u754c\u70b9\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u629b\u5f03\u3002\u5982\u4e0b\u56fe\uff1a \u5982\u4e0a\u56fe\u6240\u793a\uff0cA \u9ad8\u4e8e\u9608\u503c maxVal \u6240\u4ee5\u662f\u771f\u6b63\u7684\u8fb9\u754c\u70b9\uff0cC \u867d\u7136\u4f4e\u4e8e maxVal \u4f46\u9ad8\u4e8e minVal \u5e76\u4e14\u4e0e A \u76f8\u8fde\uff0c\u6240\u4ee5\u4e5f\u88ab\u8ba4\u4e3a\u662f\u771f\u6b63\u7684\u8fb9\u754c\u70b9\u3002\u800c B \u5c31\u4f1a\u88ab\u629b\u5f03\uff0c\u56e0\u4e3a\u4f4e\u4e8e maxVal \u800c\u4e14\u4e0d\u4e0e\u771f\u6b63\u7684\u8fb9\u754c\u70b9\u76f8\u8fde\u3002\u6240\u4ee5\u9009\u62e9\u5408\u9002\u7684 maxVal \u548c minVal \u5bf9\u4e8e\u80fd\u5426\u5f97\u5230\u597d\u7684\u7ed3\u679c\u975e\u5e38\u91cd\u8981\u3002","title":"4.1 \u539f\u7406"},{"location":"04-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86OpenCV/05-%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/#42","text":"\u5728OpenCV\u4e2d\u8981\u5b9e\u73b0Canny\u68c0\u6d4b\u4f7f\u7528\u7684API: canny = cv2 . Canny ( image , threshold1 , threshold2 ) \u53c2\u6570\uff1a image:\u7070\u5ea6\u56fe\uff0c threshold1: minval\uff0c\u8f83\u5c0f\u7684\u9608\u503c\u5c06\u95f4\u65ad\u7684\u8fb9\u7f18\u8fde\u63a5\u8d77\u6765 threshold2: maxval\uff0c\u8f83\u5927\u7684\u9608\u503c\u68c0\u6d4b\u56fe\u50cf\u4e2d\u660e\u663e\u7684\u8fb9\u7f18 \u793a\u4f8b\uff1a import cv2 as cv import numpy as np from matplotlib import pyplot as plt # 1 \u56fe\u50cf\u8bfb\u53d6 img = cv . imread ( './image/horse.jpg' , 0 ) # 2 Canny\u8fb9\u7f18\u68c0\u6d4b lowThreshold = 0 max_lowThreshold = 100 canny = cv . Canny ( img , lowThreshold , max_lowThreshold ) # 3 \u56fe\u50cf\u5c55\u793a plt . figure ( figsize = ( 10 , 8 ), dpi = 100 ) plt . subplot ( 121 ), plt . imshow ( img , cmap = plt . cm . gray ), plt . title ( '\u539f\u56fe' ) plt . xticks ([]), plt . yticks ([]) plt . subplot ( 122 ), plt . imshow ( canny , cmap = plt . cm . gray ), plt . title ( 'Canny\u68c0\u6d4b\u540e\u7ed3\u679c' ) plt . xticks ([]), plt . yticks ([]) plt . show () \u603b\u7ed3 1.\u8fb9\u7f18\u68c0\u6d4b\u7684\u539f\u7406 \u57fa\u4e8e\u641c\u7d22\uff1a\u5229\u7528\u4e00\u9636\u5bfc\u6570\u7684\u6700\u5927\u503c\u83b7\u53d6\u8fb9\u754c \u57fa\u4e8e\u96f6\u7a7f\u8d8a\uff1a\u5229\u7528\u4e8c\u9636\u5bfc\u6570\u4e3a0\u83b7\u53d6\u8fb9\u754c 2.Sobel\u7b97\u5b50 \u200b \u57fa\u4e8e\u641c\u7d22\u7684\u65b9\u6cd5\u83b7\u53d6\u8fb9\u754c \u200b cv.sobel() \u200b cv.convertScaleAbs() \u200b cv.addweights() 3.Laplacian\u7b97\u5b50 \u200b \u57fa\u4e8e\u96f6\u7a7f\u8d8a\u83b7\u53d6\u8fb9\u754c \u200b cv.Laplacian() 4.Canny\u7b97\u6cd5 \u566a\u58f0\u53bb\u9664\uff1a\u9ad8\u65af\u6ee4\u6ce2 \u8ba1\u7b97\u56fe\u50cf\u68af\u5ea6\uff1asobel\u7b97\u5b50\uff0c\u8ba1\u7b97\u68af\u5ea6\u5927\u5c0f\u548c\u65b9\u5411 \u975e\u6781\u5927\u503c\u6291\u5236\uff1a\u5229\u7528\u68af\u5ea6\u65b9\u5411\u50cf\u7d20\u6765\u5224\u65ad\u5f53\u524d\u50cf\u7d20\u662f\u5426\u4e3a\u8fb9\u754c\u70b9 \u6ede\u540e\u9608\u503c\uff1a\u8bbe\u7f6e\u4e24\u4e2a\u9608\u503c\uff0c\u786e\u5b9a\u6700\u7ec8\u7684\u8fb9\u754c","title":"4.2 \u5e94\u7528"}]}