{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html","text":"\u57fa\u4e8e\u4f01\u4e1a\u79c1\u6709\u6570\u636e\u642d\u5efaRAG\u7cfb\u7edf \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u4e86\u89e3\u9879\u76ee\u5f00\u53d1\u80cc\u666f \u638c\u63e1\u878d\u5408\u672c\u5730\u77e5\u8bc6\u7684RAG\u7cfb\u7edf\u5b9e\u73b0\u8fc7\u7a0b 1 \u80cc\u666f\u4ecb\u7ecd \u00b6 \u8fd1\u5e74\u6765\uff0c\u968f\u7740ChatGPT\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u57fa\u4e8e\u5927\u89c4\u6a21\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u7684\u6280\u672f\u5df2\u6210\u4e3a\u4eba\u5de5\u667a\u80fd\u9886\u57df\u7684\u7814\u7a76\u548c\u5e94\u7528\u70ed\u70b9\u3002\u5c24\u5176\u662f\u5927\u6a21\u578b\u5728\u5404\u7c7b\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4efb\u52a1\u4e2d\u7684\u6210\u529f\u5e94\u7528\uff0c\u63a8\u52a8\u4e86\u6559\u80b2\u884c\u4e1a\u7684\u667a\u80fd\u5316\u8f6c\u578b\u3002\u7136\u800c\uff0c\u5f53\u524d\u5e02\u9762\u4e0a\u5927\u591a\u6570\u5927\u8bed\u8a00\u6a21\u578b\u5b58\u5728\u4e00\u4e2a\u666e\u904d\u7684\u95ee\u9898\uff1a\u8fd9\u4e9b\u6a21\u578b\u4e3b\u8981\u4f9d\u8d56\u4e8e\u8fc7\u5f80\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u65e0\u6cd5\u52a8\u6001\u83b7\u53d6\u6700\u65b0\u7684\u77e5\u8bc6\u4ee5\u53ca\u5404\u4f01\u4e1a\u7279\u6709\u7684\u79c1\u6709\u77e5\u8bc6\u3002\u8fd9\u79cd\u5c40\u9650\u6027\u5e38\u5e38\u5bfc\u81f4\u751f\u6210\u7b54\u6848\u65f6\u51fa\u73b0\u201c\u5e7b\u89c9\u201d\u95ee\u9898\uff0c\u5373\u6a21\u578b\u63d0\u4f9b\u7684\u7b54\u6848\u4e0e\u5b9e\u9645\u60c5\u51b5\u4e0d\u7b26\u6216\u4e0d\u51c6\u786e\u3002 \u4e3a\u4e86\u6709\u6548\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff0c\u4f01\u4e1a\u666e\u904d\u91c7\u7528\u4e86\u4ee5\u4e0b\u4e24\u79cd\u4e3b\u8981\u624b\u6bb5\uff1a \u57fa\u4e8e\u4f01\u4e1a\u79c1\u6709\u77e5\u8bc6\u7684\u5782\u76f4\u9886\u57df\u5fae\u8c03 \uff1a\u901a\u8fc7\u5c06\u4f01\u4e1a\u9886\u57df\u7684\u7279\u5b9a\u77e5\u8bc6\u878d\u5408\u5230\u5927\u6a21\u578b\u4e2d\uff0c\u8fdb\u884c\u5fae\u8c03\uff0c\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u66f4\u597d\u5730\u670d\u52a1\u4e8e\u5782\u76f4\u884c\u4e1a\u7684\u4e13\u4e1a\u9700\u6c42\u3002 \u57fa\u4e8e\u4f01\u4e1a\u79c1\u6709\u77e5\u8bc6\u7684RAG\uff08Retrieval-Augmented Generation\uff09\u95ee\u7b54\u7cfb\u7edf \uff1a\u901a\u8fc7\u6784\u5efa\u57fa\u4e8e\u68c0\u7d22\u7684\u95ee\u7b54\u6846\u67b6\uff0c\u7ed3\u5408\u4f01\u4e1a\u79c1\u6709\u77e5\u8bc6\u5e93\uff0c\u5b9e\u73b0\u66f4\u4e3a\u7cbe\u51c6\u4e14\u52a8\u6001\u66f4\u65b0\u7684\u77e5\u8bc6\u95ee\u7b54\u670d\u52a1\uff0c\u4ece\u800c\u51cf\u5c11\u5e7b\u89c9\u95ee\u9898\u7684\u53d1\u751f\u3002 \u5728\u6b64\u80cc\u666f\u4e0b\uff0c\u4f20\u667a\u6559\u80b2\u901a\u8fc7\u91c7\u7528**LangChain**\u548c**Qwen\u5927\u6a21\u578b**\uff0c\u6784\u5efa\u4e86\u4e00\u5957\u667a\u80fd\u5316\u7684\u5b66\u79d1\u5728\u7ebf\u7b54\u7591\u7cfb\u7edf\u3002\u8be5\u7cfb\u7edf\u57fa\u4e8eRAG\u67b6\u6784\uff0c\u80fd\u591f\u901a\u8fc7\u5b9e\u65f6\u68c0\u7d22\u76f8\u5173\u77e5\u8bc6\u5e93\u4e2d\u7684\u4fe1\u606f\u6765\u589e\u5f3a\u5927\u6a21\u578b\u7684\u751f\u6210\u80fd\u529b\uff0c\u786e\u4fdd\u56de\u7b54\u7684\u51c6\u786e\u6027\u548c\u65f6\u6548\u6027\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7cfb\u7edf\u901a\u8fc7\u81ea\u52a8\u5316\u5904\u7406\u5b66\u751f\u7684\u7b54\u7591\u9700\u6c42\uff0c\u6781\u5927\u5730\u51cf\u8f7b\u4e86\u4eba\u5de5\u5ba2\u670d\u7684\u5de5\u4f5c\u538b\u529b\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u9ad8\u6548\u3001\u4f4e\u6210\u672c\u7684\u77e5\u8bc6\u670d\u52a1\u3002 \u672c\u8bfe\u7a0b\u5c06\u57fa\u4e8e\u6b64RAG\u67b6\u6784\uff0c\u5e26\u9886\u5b66\u5458\u6df1\u5165\u4e86\u89e3\u5982\u4f55\u4f7f\u7528LangChain\u548cQwen2.5-7B-Instruct\u5927\u6a21\u578b\u6784\u5efa\u4e00\u4e2a\u57fa\u4e8e\u672c\u5730\u77e5\u8bc6\u5e93\u7684\u95ee\u7b54\u7cfb\u7edf\uff0c\u89e3\u51b3\u4f01\u4e1a\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6311\u6218\uff0c\u5e76\u5c55\u793a\u8fd9\u4e00\u7cfb\u7edf\u5728\u6559\u80b2\u9886\u57df\u4e2d\u7684\u5e7f\u6cdb\u5e94\u7528\u6f5c\u529b\u3002 2 RAG\u539f\u7406 \u00b6 RAG\u7684\u57fa\u672c\u539f\u7406\uff1a 3 \u9879\u76ee\u6d41\u7a0b \u00b6 \uff08AI\uff09\u5b66\u79d1\u5728\u7ebf\u7b54\u7591\u7cfb\u7edfRAG\u4e3b\u8981\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5c06\u73b0\u6709\u540e\u53f0\u641c\u96c6\u7684FQA\u6570\u636e\u96c6\u5b58\u50a8\u5230Mysql\u6570\u636e\u5e93\u4e2d \u7b2c\u4e8c\u6b65\uff1a\u57fa\u4e8equery\u5b9e\u73b0Mysql\u6570\u636e\u5e93\u68c0\u7d22\uff1a\u5c06query\u548c\u73b0\u6709\u95ee\u9898\u5339\u914d\uff08\u505a\u76f8\u4f3c\u5ea6\u8ba1\u7b97\uff09\uff0c\u5982\u679c\u9608\u503c>=0.85\uff0c\u5c31\u8ba4\u4e3a\u95ee\u9898\u6bd4\u8f83\u660e\u786e\uff0c\u76f4\u63a5\u8fd4\u56de\u5bf9\u5e94\u7684\u7b54\u6848\uff1b\u5426\u5219\uff0c\u8fdb\u5165RAG\u68c0\u7d22\u7cfb\u7edf \u7b2c\u4e09\u6b65\uff1a\u642d\u5efa\u672c\u5730\u77e5\u8bc6\u5e93\uff1a\u5bf9\u672c\u5730\u6587\u6863\u52a0\u8f7d\u8bfb\u53d6\uff1b\u8fdb\u884c\u6587\u6863\u5206\u5272\uff1b\u6587\u6863\u5411\u91cf\u5316\uff1b\u5b58\u50a8\u5411\u91cf\u6570\u636e\u5e93\uff08Milvus\uff09 \u7b2c\u56db\u6b65\uff1a\u57fa\u4e8equery\u5b9e\u73b0Milvus\u6570\u636e\u5e93\u68c0\u7d22\uff1a\u5c06query\u8fdb\u884c\u5411\u91cf\u8868\u793a\uff0c\u5e76\u4eceMilvus\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u51fa\u76f8\u4f3c\u7684top-k\u4e2a\u6587\u672c\u6bb5\u3002 \u7b2c\u4e94\u6b65\uff1a\u5c06query\u548c\u68c0\u7d22\u51fa\u7684top-k\u6587\u672c\u6bb5\u62fc\u63a5\uff0c\u9001\u5165\u5927\u6a21\u578b\uff0c\u5b9e\u73b0\u9884\u6d4b\u3002 4 \u9879\u76ee\u7ed3\u6784 \u00b6 integrated_qa_system/ \u251c\u2500\u2500 config.ini # \u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u542b\u6240\u6709\u6a21\u5757\u7684\u914d\u7f6e \u251c\u2500\u2500 base/ \u2502 \u251c\u2500\u2500 config.py # \u914d\u7f6e\u7ba1\u7406\uff0c\u52a0\u8f7d config.ini \u2502 \u251c\u2500\u2500 logger.py # \u65e5\u5fd7\u8bbe\u7f6e \u251c\u2500\u2500 rag_qa/ \u2502 \u251c\u2500\u2500 core/ \u2502 \u2502 \u251c\u2500\u2500 prompts.py # RAG \u63d0\u793a\u6a21\u677f \u2502 \u2502 \u251c\u2500\u2500 query_classifier.py # \u67e5\u8be2\u5206\u7c7b\u5668 \u2502 \u2502 \u251c\u2500\u2500 strategy_selector.py # \u68c0\u7d22\u7b56\u7565\u9009\u62e9\u5668 \u2502 \u2502 \u251c\u2500\u2500 vector_store.py # \u5411\u91cf\u5b58\u50a8\u4e0e\u68c0\u7d22 \u2502 \u2502 \u251c\u2500\u2500 rag_system.py # RAG \u7cfb\u7edf\u6838\u5fc3\u903b\u8f91 \u2502 \u251c\u2500\u2500 main.py # RAG \u7cfb\u7edf\u72ec\u7acb\u5165\u53e3\uff0c\u652f\u6301\u5b58\u50a8\u548c\u67e5\u8be2 \u251c\u2500\u2500 mysql_qa/ \u2502 \u251c\u2500\u2500 db/ \u2502 \u2502 \u251c\u2500\u2500 mysql_client.py # MySQL \u6570\u636e\u5e93\u64cd\u4f5c \u2502 \u251c\u2500\u2500 cache/ \u2502 \u2502 \u251c\u2500\u2500 redis_client.py # Redis \u7f13\u5b58\u64cd\u4f5c \u2502 \u251c\u2500\u2500 retrieval/ \u2502 \u2502 \u251c\u2500\u2500 bm25_search.py # BM25 \u641c\u7d22 \u2502 \u251c\u2500\u2500 utils/ \u2502 \u2502 \u251c\u2500\u2500 preprocess.py # \u6587\u672c\u9884\u5904\u7406 \u2502 \u251c\u2500\u2500 main.py # MySQL \u7cfb\u7edf\u72ec\u7acb\u5165\u53e3\uff0c\u652f\u6301\u67e5\u8be2 \u251c\u2500\u2500 main.py # \u96c6\u6210\u7cfb\u7edf\u5165\u53e3\uff0c\u7ed3\u5408 RAG \u548c MySQL \u251c\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6 \u2514\u2500\u2500 logs/ \u2514\u2500\u2500 app.log # \u65e5\u5fd7\u6587\u4ef6 \u4f9d\u8d56\u6587\u4ef6 ( requirements.txt ) \u00b6 # Web\u6846\u67b6 fastapi uvicorn[standard] websockets # \u6570\u636e\u5e93\u8fde\u63a5 pymysql redis # \u5411\u91cf\u68c0\u7d22 rank_bm25 numpy jieba pandas transformers torch langchain langchain_community sentence_transformers pymilvus # AI\u6a21\u578b openai # \u914d\u7f6e\u548c\u5de5\u5177 configparser locust websocket-client # \u5176\u4ed6\u4f9d\u8d56 pydantic starlette 5 \u73af\u5883\u914d\u7f6e \u00b6 5.1 \u5b89\u88c5\u4f9d\u8d56 \u00b6 \u9996\u5148\uff0c\u786e\u4fdd\u4f60\u7684\u673a\u5668\u5b89\u88c5\u4e86Python3.10\u53ca\u5176\u4ee5\u4e0a\u7248\u672c # \u7ec8\u7aef\u67e5\u770bpython\u7684\u7248\u672c python -- version \u7d27\u63a5\u7740\u5b89\u88c5\u9879\u76ee\u7684\u4f9d\u8d56 # \u5b89\u88c5\u5168\u90e8\u4f9d\u8d56 pip install - r requirements . txt 5.2 \u5de5\u5177\u7684\u4ecb\u7ecd \u00b6 Ollama: \u4e00\u4e2a\u5f00\u6e90\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\u670d\u52a1\u5de5\u5177\uff0c\u5b83\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u5728\u672c\u5730\u8fd0\u884c\u5927\u6a21\u578b\u3002 LangChain: \u4e3a\u5404\u79cdLLMs\u5b9e\u73b0\u901a\u7528\u7684\u63a5\u53e3\uff0c\u628aLLMs\u76f8\u5173\u7684\u7ec4\u4ef6\u201c\u94fe\u63a5\u201d\u5728\u4e00\u8d77\uff0c\u7b80\u5316LLMs\u5e94\u7528\u7684\u5f00\u53d1\u96be\u5ea6\uff0c\u65b9\u4fbf\u5f00\u53d1\u8005\u5feb\u901f\u5730\u5f00\u53d1\u590d\u6742\u7684LLMs\u5e94\u7528\u3002 Milvus: \u4e00\u4e2a\u5f00\u6e90\u5411\u91cf\u6570\u636e\u5e93,\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u5411\u91cf\u6570\u636e\u7684\u5b58\u50a8\u548c\u68c0\u7d22\u3002 \u4e0a\u8ff0\u4e09\u79cd\u5de5\u5177\uff0c\u6211\u4eec\u5c06\u5206\u522b\u4ee5\u72ec\u7acb\u7684\u7ae0\u8282\u8fdb\u884c\u4ecb\u7ecd \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86\u57fa\u4e8e\u4f01\u4e1a\u79c1\u6709\u77e5\u8bc6\u642d\u5efa\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u7684\u57fa\u672c\u6d41\u7a0b\uff1b\u5e76\u5bf9\u63a5\u4e0b\u6765\u7684\u9879\u76ee\u5b9e\u73b0\u8fdb\u884c\u73af\u5883\u914d\u7f6e\u5de5\u4f5c\u3002","title":"1.1 \u9879\u76ee\u80cc\u666f\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#rag","text":"","title":"\u57fa\u4e8e\u4f01\u4e1a\u79c1\u6709\u6570\u636e\u642d\u5efaRAG\u7cfb\u7edf"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#_1","text":"\u4e86\u89e3\u9879\u76ee\u5f00\u53d1\u80cc\u666f \u638c\u63e1\u878d\u5408\u672c\u5730\u77e5\u8bc6\u7684RAG\u7cfb\u7edf\u5b9e\u73b0\u8fc7\u7a0b","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#1","text":"\u8fd1\u5e74\u6765\uff0c\u968f\u7740ChatGPT\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u57fa\u4e8e\u5927\u89c4\u6a21\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u7684\u6280\u672f\u5df2\u6210\u4e3a\u4eba\u5de5\u667a\u80fd\u9886\u57df\u7684\u7814\u7a76\u548c\u5e94\u7528\u70ed\u70b9\u3002\u5c24\u5176\u662f\u5927\u6a21\u578b\u5728\u5404\u7c7b\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4efb\u52a1\u4e2d\u7684\u6210\u529f\u5e94\u7528\uff0c\u63a8\u52a8\u4e86\u6559\u80b2\u884c\u4e1a\u7684\u667a\u80fd\u5316\u8f6c\u578b\u3002\u7136\u800c\uff0c\u5f53\u524d\u5e02\u9762\u4e0a\u5927\u591a\u6570\u5927\u8bed\u8a00\u6a21\u578b\u5b58\u5728\u4e00\u4e2a\u666e\u904d\u7684\u95ee\u9898\uff1a\u8fd9\u4e9b\u6a21\u578b\u4e3b\u8981\u4f9d\u8d56\u4e8e\u8fc7\u5f80\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u65e0\u6cd5\u52a8\u6001\u83b7\u53d6\u6700\u65b0\u7684\u77e5\u8bc6\u4ee5\u53ca\u5404\u4f01\u4e1a\u7279\u6709\u7684\u79c1\u6709\u77e5\u8bc6\u3002\u8fd9\u79cd\u5c40\u9650\u6027\u5e38\u5e38\u5bfc\u81f4\u751f\u6210\u7b54\u6848\u65f6\u51fa\u73b0\u201c\u5e7b\u89c9\u201d\u95ee\u9898\uff0c\u5373\u6a21\u578b\u63d0\u4f9b\u7684\u7b54\u6848\u4e0e\u5b9e\u9645\u60c5\u51b5\u4e0d\u7b26\u6216\u4e0d\u51c6\u786e\u3002 \u4e3a\u4e86\u6709\u6548\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff0c\u4f01\u4e1a\u666e\u904d\u91c7\u7528\u4e86\u4ee5\u4e0b\u4e24\u79cd\u4e3b\u8981\u624b\u6bb5\uff1a \u57fa\u4e8e\u4f01\u4e1a\u79c1\u6709\u77e5\u8bc6\u7684\u5782\u76f4\u9886\u57df\u5fae\u8c03 \uff1a\u901a\u8fc7\u5c06\u4f01\u4e1a\u9886\u57df\u7684\u7279\u5b9a\u77e5\u8bc6\u878d\u5408\u5230\u5927\u6a21\u578b\u4e2d\uff0c\u8fdb\u884c\u5fae\u8c03\uff0c\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u66f4\u597d\u5730\u670d\u52a1\u4e8e\u5782\u76f4\u884c\u4e1a\u7684\u4e13\u4e1a\u9700\u6c42\u3002 \u57fa\u4e8e\u4f01\u4e1a\u79c1\u6709\u77e5\u8bc6\u7684RAG\uff08Retrieval-Augmented Generation\uff09\u95ee\u7b54\u7cfb\u7edf \uff1a\u901a\u8fc7\u6784\u5efa\u57fa\u4e8e\u68c0\u7d22\u7684\u95ee\u7b54\u6846\u67b6\uff0c\u7ed3\u5408\u4f01\u4e1a\u79c1\u6709\u77e5\u8bc6\u5e93\uff0c\u5b9e\u73b0\u66f4\u4e3a\u7cbe\u51c6\u4e14\u52a8\u6001\u66f4\u65b0\u7684\u77e5\u8bc6\u95ee\u7b54\u670d\u52a1\uff0c\u4ece\u800c\u51cf\u5c11\u5e7b\u89c9\u95ee\u9898\u7684\u53d1\u751f\u3002 \u5728\u6b64\u80cc\u666f\u4e0b\uff0c\u4f20\u667a\u6559\u80b2\u901a\u8fc7\u91c7\u7528**LangChain**\u548c**Qwen\u5927\u6a21\u578b**\uff0c\u6784\u5efa\u4e86\u4e00\u5957\u667a\u80fd\u5316\u7684\u5b66\u79d1\u5728\u7ebf\u7b54\u7591\u7cfb\u7edf\u3002\u8be5\u7cfb\u7edf\u57fa\u4e8eRAG\u67b6\u6784\uff0c\u80fd\u591f\u901a\u8fc7\u5b9e\u65f6\u68c0\u7d22\u76f8\u5173\u77e5\u8bc6\u5e93\u4e2d\u7684\u4fe1\u606f\u6765\u589e\u5f3a\u5927\u6a21\u578b\u7684\u751f\u6210\u80fd\u529b\uff0c\u786e\u4fdd\u56de\u7b54\u7684\u51c6\u786e\u6027\u548c\u65f6\u6548\u6027\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7cfb\u7edf\u901a\u8fc7\u81ea\u52a8\u5316\u5904\u7406\u5b66\u751f\u7684\u7b54\u7591\u9700\u6c42\uff0c\u6781\u5927\u5730\u51cf\u8f7b\u4e86\u4eba\u5de5\u5ba2\u670d\u7684\u5de5\u4f5c\u538b\u529b\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u9ad8\u6548\u3001\u4f4e\u6210\u672c\u7684\u77e5\u8bc6\u670d\u52a1\u3002 \u672c\u8bfe\u7a0b\u5c06\u57fa\u4e8e\u6b64RAG\u67b6\u6784\uff0c\u5e26\u9886\u5b66\u5458\u6df1\u5165\u4e86\u89e3\u5982\u4f55\u4f7f\u7528LangChain\u548cQwen2.5-7B-Instruct\u5927\u6a21\u578b\u6784\u5efa\u4e00\u4e2a\u57fa\u4e8e\u672c\u5730\u77e5\u8bc6\u5e93\u7684\u95ee\u7b54\u7cfb\u7edf\uff0c\u89e3\u51b3\u4f01\u4e1a\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6311\u6218\uff0c\u5e76\u5c55\u793a\u8fd9\u4e00\u7cfb\u7edf\u5728\u6559\u80b2\u9886\u57df\u4e2d\u7684\u5e7f\u6cdb\u5e94\u7528\u6f5c\u529b\u3002","title":"1 \u80cc\u666f\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#2-rag","text":"RAG\u7684\u57fa\u672c\u539f\u7406\uff1a","title":"2 RAG\u539f\u7406"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#3","text":"\uff08AI\uff09\u5b66\u79d1\u5728\u7ebf\u7b54\u7591\u7cfb\u7edfRAG\u4e3b\u8981\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5c06\u73b0\u6709\u540e\u53f0\u641c\u96c6\u7684FQA\u6570\u636e\u96c6\u5b58\u50a8\u5230Mysql\u6570\u636e\u5e93\u4e2d \u7b2c\u4e8c\u6b65\uff1a\u57fa\u4e8equery\u5b9e\u73b0Mysql\u6570\u636e\u5e93\u68c0\u7d22\uff1a\u5c06query\u548c\u73b0\u6709\u95ee\u9898\u5339\u914d\uff08\u505a\u76f8\u4f3c\u5ea6\u8ba1\u7b97\uff09\uff0c\u5982\u679c\u9608\u503c>=0.85\uff0c\u5c31\u8ba4\u4e3a\u95ee\u9898\u6bd4\u8f83\u660e\u786e\uff0c\u76f4\u63a5\u8fd4\u56de\u5bf9\u5e94\u7684\u7b54\u6848\uff1b\u5426\u5219\uff0c\u8fdb\u5165RAG\u68c0\u7d22\u7cfb\u7edf \u7b2c\u4e09\u6b65\uff1a\u642d\u5efa\u672c\u5730\u77e5\u8bc6\u5e93\uff1a\u5bf9\u672c\u5730\u6587\u6863\u52a0\u8f7d\u8bfb\u53d6\uff1b\u8fdb\u884c\u6587\u6863\u5206\u5272\uff1b\u6587\u6863\u5411\u91cf\u5316\uff1b\u5b58\u50a8\u5411\u91cf\u6570\u636e\u5e93\uff08Milvus\uff09 \u7b2c\u56db\u6b65\uff1a\u57fa\u4e8equery\u5b9e\u73b0Milvus\u6570\u636e\u5e93\u68c0\u7d22\uff1a\u5c06query\u8fdb\u884c\u5411\u91cf\u8868\u793a\uff0c\u5e76\u4eceMilvus\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u51fa\u76f8\u4f3c\u7684top-k\u4e2a\u6587\u672c\u6bb5\u3002 \u7b2c\u4e94\u6b65\uff1a\u5c06query\u548c\u68c0\u7d22\u51fa\u7684top-k\u6587\u672c\u6bb5\u62fc\u63a5\uff0c\u9001\u5165\u5927\u6a21\u578b\uff0c\u5b9e\u73b0\u9884\u6d4b\u3002","title":"3 \u9879\u76ee\u6d41\u7a0b"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#4","text":"integrated_qa_system/ \u251c\u2500\u2500 config.ini # \u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u542b\u6240\u6709\u6a21\u5757\u7684\u914d\u7f6e \u251c\u2500\u2500 base/ \u2502 \u251c\u2500\u2500 config.py # \u914d\u7f6e\u7ba1\u7406\uff0c\u52a0\u8f7d config.ini \u2502 \u251c\u2500\u2500 logger.py # \u65e5\u5fd7\u8bbe\u7f6e \u251c\u2500\u2500 rag_qa/ \u2502 \u251c\u2500\u2500 core/ \u2502 \u2502 \u251c\u2500\u2500 prompts.py # RAG \u63d0\u793a\u6a21\u677f \u2502 \u2502 \u251c\u2500\u2500 query_classifier.py # \u67e5\u8be2\u5206\u7c7b\u5668 \u2502 \u2502 \u251c\u2500\u2500 strategy_selector.py # \u68c0\u7d22\u7b56\u7565\u9009\u62e9\u5668 \u2502 \u2502 \u251c\u2500\u2500 vector_store.py # \u5411\u91cf\u5b58\u50a8\u4e0e\u68c0\u7d22 \u2502 \u2502 \u251c\u2500\u2500 rag_system.py # RAG \u7cfb\u7edf\u6838\u5fc3\u903b\u8f91 \u2502 \u251c\u2500\u2500 main.py # RAG \u7cfb\u7edf\u72ec\u7acb\u5165\u53e3\uff0c\u652f\u6301\u5b58\u50a8\u548c\u67e5\u8be2 \u251c\u2500\u2500 mysql_qa/ \u2502 \u251c\u2500\u2500 db/ \u2502 \u2502 \u251c\u2500\u2500 mysql_client.py # MySQL \u6570\u636e\u5e93\u64cd\u4f5c \u2502 \u251c\u2500\u2500 cache/ \u2502 \u2502 \u251c\u2500\u2500 redis_client.py # Redis \u7f13\u5b58\u64cd\u4f5c \u2502 \u251c\u2500\u2500 retrieval/ \u2502 \u2502 \u251c\u2500\u2500 bm25_search.py # BM25 \u641c\u7d22 \u2502 \u251c\u2500\u2500 utils/ \u2502 \u2502 \u251c\u2500\u2500 preprocess.py # \u6587\u672c\u9884\u5904\u7406 \u2502 \u251c\u2500\u2500 main.py # MySQL \u7cfb\u7edf\u72ec\u7acb\u5165\u53e3\uff0c\u652f\u6301\u67e5\u8be2 \u251c\u2500\u2500 main.py # \u96c6\u6210\u7cfb\u7edf\u5165\u53e3\uff0c\u7ed3\u5408 RAG \u548c MySQL \u251c\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6 \u2514\u2500\u2500 logs/ \u2514\u2500\u2500 app.log # \u65e5\u5fd7\u6587\u4ef6","title":"4 \u9879\u76ee\u7ed3\u6784"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#requirementstxt","text":"# Web\u6846\u67b6 fastapi uvicorn[standard] websockets # \u6570\u636e\u5e93\u8fde\u63a5 pymysql redis # \u5411\u91cf\u68c0\u7d22 rank_bm25 numpy jieba pandas transformers torch langchain langchain_community sentence_transformers pymilvus # AI\u6a21\u578b openai # \u914d\u7f6e\u548c\u5de5\u5177 configparser locust websocket-client # \u5176\u4ed6\u4f9d\u8d56 pydantic starlette","title":"\u4f9d\u8d56\u6587\u4ef6 (requirements.txt)"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#5","text":"","title":"5 \u73af\u5883\u914d\u7f6e"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#51","text":"\u9996\u5148\uff0c\u786e\u4fdd\u4f60\u7684\u673a\u5668\u5b89\u88c5\u4e86Python3.10\u53ca\u5176\u4ee5\u4e0a\u7248\u672c # \u7ec8\u7aef\u67e5\u770bpython\u7684\u7248\u672c python -- version \u7d27\u63a5\u7740\u5b89\u88c5\u9879\u76ee\u7684\u4f9d\u8d56 # \u5b89\u88c5\u5168\u90e8\u4f9d\u8d56 pip install - r requirements . txt","title":"5.1 \u5b89\u88c5\u4f9d\u8d56"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#52","text":"Ollama: \u4e00\u4e2a\u5f00\u6e90\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\u670d\u52a1\u5de5\u5177\uff0c\u5b83\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u5728\u672c\u5730\u8fd0\u884c\u5927\u6a21\u578b\u3002 LangChain: \u4e3a\u5404\u79cdLLMs\u5b9e\u73b0\u901a\u7528\u7684\u63a5\u53e3\uff0c\u628aLLMs\u76f8\u5173\u7684\u7ec4\u4ef6\u201c\u94fe\u63a5\u201d\u5728\u4e00\u8d77\uff0c\u7b80\u5316LLMs\u5e94\u7528\u7684\u5f00\u53d1\u96be\u5ea6\uff0c\u65b9\u4fbf\u5f00\u53d1\u8005\u5feb\u901f\u5730\u5f00\u53d1\u590d\u6742\u7684LLMs\u5e94\u7528\u3002 Milvus: \u4e00\u4e2a\u5f00\u6e90\u5411\u91cf\u6570\u636e\u5e93,\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u5411\u91cf\u6570\u636e\u7684\u5b58\u50a8\u548c\u68c0\u7d22\u3002 \u4e0a\u8ff0\u4e09\u79cd\u5de5\u5177\uff0c\u6211\u4eec\u5c06\u5206\u522b\u4ee5\u72ec\u7acb\u7684\u7ae0\u8282\u8fdb\u884c\u4ecb\u7ecd","title":"5.2 \u5de5\u5177\u7684\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF/01-RAG%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html#_2","text":"\u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86\u57fa\u4e8e\u4f01\u4e1a\u79c1\u6709\u77e5\u8bc6\u642d\u5efa\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u7684\u57fa\u672c\u6d41\u7a0b\uff1b\u5e76\u5bf9\u63a5\u4e0b\u6765\u7684\u9879\u76ee\u5b9e\u73b0\u8fdb\u884c\u73af\u5883\u914d\u7f6e\u5de5\u4f5c\u3002","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html","text":"Python\u65e5\u5fd7\u8bb0\u5f55\uff08Logging\uff09\u7b80\u4ecb\u4e0e\u5e94\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3\u65e5\u5fd7\u8bb0\u5f55\u7684\u4f5c\u7528\u53ca\u5176\u5728\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u7684\u91cd\u8981\u6027\u3002 \u638c\u63e1Python logging \u6a21\u5757\u7684\u57fa\u672c\u7528\u6cd5\u3002 \u5b66\u4f1a\u901a\u8fc7\u793a\u4f8b\u914d\u7f6e\u65e5\u5fd7\u7ea7\u522b\u3001\u683c\u5f0f\uff0c\u5e76\u5c06\u65e5\u5fd7\u5b58\u50a8\u5230\u6587\u4ef6\u4e2d\u3002 \u5728\u5de5\u7a0b\u5316\u9879\u76ee\u4e2d\u5e94\u7528\u65e5\u5fd7\u8bb0\u5f55\uff0c\u8ffd\u8e2a\u7a0b\u5e8f\u8fd0\u884c\u72b6\u6001\u3002 \u65e5\u5fd7\u8bb0\u5f55\u6982\u8ff0 \u00b6 \u65e5\u5fd7\uff08Logging\uff09\u662f\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8bb0\u5f55\u5173\u952e\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f8b\u5982\u64cd\u4f5c\u6210\u529f\u3001\u9519\u8bef\u53d1\u751f\u6216\u8c03\u8bd5\u4fe1\u606f\u3002\u5b83\u5728\u5f00\u53d1\u548c\u7ef4\u62a4\u4e2d\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\uff1a \u8c03\u8bd5 \uff1a\u5e2e\u52a9\u627e\u5230\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\u3002 \u76d1\u63a7 \uff1a\u8bb0\u5f55\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u6001\u3002 \u5ba1\u8ba1 \uff1a\u8ffd\u8e2a\u7528\u6237\u6216\u7cfb\u7edf\u7684\u884c\u4e3a\u3002 Python\u7684 logging \u6a21\u5757\u662f\u4e00\u4e2a\u5185\u7f6e\u5de5\u5177\uff0c\u63d0\u4f9b\u7075\u6d3b\u7684\u65e5\u5fd7\u8bb0\u5f55\u529f\u80fd\uff0c\u6bd4\u7b80\u5355\u7684 print \u8bed\u53e5\u66f4\u5f3a\u5927\u3002 \u6838\u5fc3\u6982\u5ff5 \u00b6 \u65e5\u5fd7\u7ea7\u522b \uff1a\u8868\u793a\u65e5\u5fd7\u7684\u91cd\u8981\u6027\uff0c\u5e38\u89c1\u7ea7\u522b\u4ece\u4f4e\u5230\u9ad8\uff1a DEBUG \uff1a\u8c03\u8bd5\u4fe1\u606f\uff08\u6700\u4f4e\uff09\u3002 INFO \uff1a\u4e00\u822c\u4fe1\u606f\u3002 WARNING \uff1a\u8b66\u544a\uff0c\u53ef\u80fd\u6709\u95ee\u9898\u3002 ERROR \uff1a\u9519\u8bef\uff0c\u5df2\u5f71\u54cd\u7a0b\u5e8f\u3002 CRITICAL \uff1a\u4e25\u91cd\u9519\u8bef\uff08\u6700\u9ad8\uff09\u3002 \u65e5\u5fd7\u5904\u7406\u5668\uff08Handler\uff09 \uff1a\u51b3\u5b9a\u65e5\u5fd7\u8f93\u51fa\u5230\u54ea\u91cc\uff08\u5982\u63a7\u5236\u53f0\u6216\u6587\u4ef6\uff09\u3002 \u65e5\u5fd7\u683c\u5f0f\uff08Formatter\uff09 \uff1a\u5b9a\u4e49\u65e5\u5fd7\u7684\u663e\u793a\u6837\u5f0f\uff08\u5982\u65f6\u95f4\u3001\u7ea7\u522b\u3001\u6d88\u606f\uff09\u3002 \u793a\u4f8b1\uff1a\u57fa\u7840\u65e5\u5fd7\u8bb0\u5f55 \u00b6 \u76ee\u6807 \u00b6 \u901a\u8fc7\u7b80\u5355\u793a\u4f8b\u5c55\u793a\u5982\u4f55\u8bb0\u5f55\u65e5\u5fd7\u5230\u63a7\u5236\u53f0\u3002 \u4ee3\u7801 \u00b6 import logging # \u914d\u7f6e\u57fa\u672c\u7684\u65e5\u5fd7\u8bbe\u7f6e logging . basicConfig ( level = logging . INFO ) # \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( \"Example1\" ) # \u8bb0\u5f55\u4e0d\u540c\u7ea7\u522b\u7684\u65e5\u5fd7 logger . debug ( \"\u8fd9\u662f\u8c03\u8bd5\u4fe1\u606f\uff0c\u901a\u5e38\u7528\u4e8e\u5f00\u53d1\" ) logger . info ( \"\u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38\" ) logger . warning ( \"\u6ce8\u610f\uff0c\u53ef\u80fd\u6709\u5c0f\u95ee\u9898\" ) logger . error ( \"\u53d1\u751f\u9519\u8bef\" ) logger . critical ( \"\u4e25\u91cd\u9519\u8bef\uff0c\u7a0b\u5e8f\u53ef\u80fd\u5d29\u6e83\" ) \u8fd0\u884c\u7ed3\u679c \u00b6 2025-04-01 10:00:00,123 INFO Example1: \u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38 2025-04-01 10:00:00,124 WARNING Example1: \u6ce8\u610f\uff0c\u53ef\u80fd\u6709\u5c0f\u95ee\u9898 2025-04-01 10:00:00,125 ERROR Example1: \u53d1\u751f\u9519\u8bef 2025-04-01 10:00:00,126 CRITICAL Example1: \u4e25\u91cd\u9519\u8bef\uff0c\u7a0b\u5e8f\u53ef\u80fd\u5d29\u6e83 \u5206\u6790 \u00b6 basicConfig(level=logging.INFO) \u8bbe\u7f6e\u6700\u4f4e\u8bb0\u5f55\u7ea7\u522b\u4e3a INFO \uff0c\u56e0\u6b64 DEBUG \u4fe1\u606f\u672a\u663e\u793a\u3002 \u65e5\u5fd7\u9ed8\u8ba4\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u683c\u5f0f\u4e3a \u65f6\u95f4 \u7ea7\u522b \u540d\u79f0: \u6d88\u606f \u3002 \u793a\u4f8b2\uff1a\u81ea\u5b9a\u4e49\u65e5\u5fd7\u683c\u5f0f \u00b6 \u76ee\u6807 \u00b6 \u81ea\u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f\uff0c\u6dfb\u52a0\u65f6\u95f4\u548c\u7ea7\u522b\u3002 \u4ee3\u7801 \u00b6 import logging # \u914d\u7f6e\u65e5\u5fd7\u683c\u5f0f logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) # \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( \"Example2\" ) # \u8bb0\u5f55\u65e5\u5fd7 logger . debug ( \"\u8c03\u8bd5\u6a21\u5f0f\u5df2\u5f00\u542f\" ) logger . info ( \"\u6b63\u5728\u5904\u7406\u6570\u636e\" ) logger . error ( \"\u6570\u636e\u5904\u7406\u5931\u8d25\" ) \u8fd0\u884c\u7ed3\u679c \u00b6 2025-04-01 10:00:00,123 - DEBUG - \u8c03\u8bd5\u6a21\u5f0f\u5df2\u5f00\u542f 2025-04-01 10:00:00,124 - INFO - \u6b63\u5728\u5904\u7406\u6570\u636e 2025-04-01 10:00:00,125 - ERROR - \u6570\u636e\u5904\u7406\u5931\u8d25 \u5206\u6790 \u00b6 format \u53c2\u6570\u4f7f\u7528\u5360\u4f4d\u7b26\uff1a %(asctime)s \uff1a\u8bb0\u5f55\u65f6\u95f4\u3002 %(levelname)s \uff1a\u65e5\u5fd7\u7ea7\u522b\u3002 %(message)s \uff1a\u65e5\u5fd7\u6d88\u606f\u3002 \u7ea7\u522b\u8bbe\u4e3a DEBUG \uff0c\u6240\u6709\u65e5\u5fd7\u90fd\u663e\u793a\u3002 \u793a\u4f8b3\uff1a\u5c06\u65e5\u5fd7\u5b58\u50a8\u5230\u6587\u4ef6 \u00b6 \u76ee\u6807 \u00b6 \u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d\uff0c\u4fbf\u4e8e\u540e\u7eed\u67e5\u770b\u3002 \u4ee3\u7801 \u00b6 import logging # \u914d\u7f6e\u65e5\u5fd7\uff0c\u8f93\u51fa\u5230\u6587\u4ef6 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' , filename = 'app.log' , # \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 filemode = 'a' # 'a'\u8868\u793a\u8ffd\u52a0\uff0c'w'\u8868\u793a\u8986\u76d6 ) # \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( \"Example3\" ) # \u8bb0\u5f55\u65e5\u5fd7 logger . info ( \"\u7a0b\u5e8f\u542f\u52a8\" ) logger . warning ( \"\u5185\u5b58\u4f7f\u7528\u7387\u8f83\u9ad8\" ) logger . error ( \"\u65e0\u6cd5\u8fde\u63a5\u6570\u636e\u5e93\" ) \u8fd0\u884c\u7ed3\u679c \u00b6 \u63a7\u5236\u53f0\u65e0\u8f93\u51fa\uff0c\u65e5\u5fd7\u5199\u5165 app.log \u6587\u4ef6\uff1a 2025-04-01 10:00:00,123 - INFO - \u7a0b\u5e8f\u542f\u52a8 2025-04-01 10:00:00,124 - WARNING - \u5185\u5b58\u4f7f\u7528\u7387\u8f83\u9ad8 2025-04-01 10:00:00,125 - ERROR - \u65e0\u6cd5\u8fde\u63a5\u6570\u636e\u5e93 \u5206\u6790 \u00b6 filename \u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\u3002 filemode='a' \u786e\u4fdd\u65e5\u5fd7\u8ffd\u52a0\u5199\u5165\uff0c\u4e0d\u8986\u76d6\u4e4b\u524d\u7684\u5185\u5bb9\u3002 \u793a\u4f8b4\uff1a\u540c\u65f6\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u548c\u6587\u4ef6 \u00b6 \u76ee\u6807 \u00b6 \u5c06\u65e5\u5fd7\u540c\u65f6\u8bb0\u5f55\u5230\u63a7\u5236\u53f0\u548c\u6587\u4ef6\u4e2d\u3002 \u4ee3\u7801 \u00b6 import logging # \u521b\u5efa\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( \"Example4\" ) logger . setLevel ( logging . DEBUG ) # \u8bbe\u7f6e\u8bb0\u5f55\u5668\u7ea7\u522b # \u521b\u5efa\u63a7\u5236\u53f0\u5904\u7406\u5668 console_handler = logging . StreamHandler () console_handler . setLevel ( logging . INFO ) # \u63a7\u5236\u53f0\u663e\u793aINFO\u53ca\u4ee5\u4e0a\u7ea7\u522b # \u521b\u5efa\u6587\u4ef6\u5904\u7406\u5668 file_handler = logging . FileHandler ( 'app.log' , mode = 'a' ) file_handler . setLevel ( logging . DEBUG ) # \u6587\u4ef6\u8bb0\u5f55DEBUG\u53ca\u4ee5\u4e0a\u7ea7\u522b # \u5b9a\u4e49\u65e5\u5fd7\u683c\u5f0f formatter = logging . Formatter ( ' %(asctime)s - %(levelname)s - %(message)s ' ) # \u4e3a\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f console_handler . setFormatter ( formatter ) file_handler . setFormatter ( formatter ) # \u5c06\u5904\u7406\u5668\u6dfb\u52a0\u5230\u8bb0\u5f55\u5668 logger . addHandler ( console_handler ) logger . addHandler ( file_handler ) # \u8bb0\u5f55\u65e5\u5fd7 logger . debug ( \"\u8c03\u8bd5\u4fe1\u606f\uff0c\u4ec5\u5199\u5165\u6587\u4ef6\" ) logger . info ( \"\u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38\" ) logger . error ( \"\u53d1\u751f\u9519\u8bef\" ) \u8fd0\u884c\u7ed3\u679c \u00b6 \u63a7\u5236\u53f0\u8f93\u51fa \uff1a 2025-04-01 10:00:00,123 - INFO - \u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38 2025-04-01 10:00:00,124 - ERROR - \u53d1\u751f\u9519\u8bef app.log\u6587\u4ef6\u5185\u5bb9 \uff1a 2025-04-01 10:00:00,123 - DEBUG - \u8c03\u8bd5\u4fe1\u606f\uff0c\u4ec5\u5199\u5165\u6587\u4ef6 2025-04-01 10:00:00,124 - INFO - \u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38 2025-04-01 10:00:00,125 - ERROR - \u53d1\u751f\u9519\u8bef \u5206\u6790 \u00b6 \u4f7f\u7528 Handler \u5206\u522b\u63a7\u5236\u8f93\u51fa\u76ee\u6807\uff1a StreamHandler \uff1a\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 FileHandler \uff1a\u8f93\u51fa\u5230\u6587\u4ef6\u3002 \u4e0d\u540c\u5904\u7406\u5668\u53ef\u8bbe\u7f6e\u4e0d\u540c\u7ea7\u522b\uff0c\u7075\u6d3b\u6027\u66f4\u9ad8\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6574\u4f53\u7ed3\u6784 \u00b6 logging_lesson/ \u251c\u2500\u2500 logs/ \u2502 \u2514\u2500\u2500 app.log # \u65e5\u5fd7\u6587\u4ef6 \u251c\u2500\u2500 utils/ \u2502 \u2514\u2500\u2500 logger.py # \u65e5\u5fd7\u914d\u7f6e\u6a21\u5757 \u251c\u2500\u2500 main.py # \u4e3b\u7a0b\u5e8f\u5165\u53e3 \u2514\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6\uff08\u672c\u4f8b\u65e0\u9700\u989d\u5916\u4f9d\u8d56\uff09 \u65e5\u5fd7\u914d\u7f6e\u6a21\u5757 ( utils/logger.py ) \u00b6 import logging import os def setup_logger ( name , log_file = 'logs/app.log' ): # \u786e\u4fdd\u65e5\u5fd7\u76ee\u5f55\u5b58\u5728 os . makedirs ( os . path . dirname ( log_file ), exist_ok = True ) # \u521b\u5efa\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( name ) logger . setLevel ( logging . DEBUG ) # \u8bbe\u7f6e\u6700\u4f4e\u7ea7\u522b # \u521b\u5efa\u63a7\u5236\u53f0\u5904\u7406\u5668 console_handler = logging . StreamHandler () console_handler . setLevel ( logging . INFO ) # \u521b\u5efa\u6587\u4ef6\u5904\u7406\u5668 file_handler = logging . FileHandler ( log_file , mode = 'a' ) file_handler . setLevel ( logging . DEBUG ) # \u5b9a\u4e49\u65e5\u5fd7\u683c\u5f0f formatter = logging . Formatter ( ' %(asctime)s - %(levelname)s - %(name)s - %(message)s ' ) # \u8bbe\u7f6e\u5904\u7406\u5668\u683c\u5f0f console_handler . setFormatter ( formatter ) file_handler . setFormatter ( formatter ) # \u6dfb\u52a0\u5904\u7406\u5668\uff08\u907f\u514d\u91cd\u590d\u6dfb\u52a0\uff09 if not logger . handlers : logger . addHandler ( console_handler ) logger . addHandler ( file_handler ) return logger \u4e3b\u7a0b\u5e8f ( main.py ) \u00b6 from utils.logger import setup_logger # \u521d\u59cb\u5316\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = setup_logger ( \"MainApp\" ) def process_data ( data ): logger . debug ( f \"\u5f00\u59cb\u5904\u7406\u6570\u636e: { data } \" ) if not data : logger . error ( \"\u6570\u636e\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u5904\u7406\" ) return None logger . info ( \"\u6570\u636e\u5904\u7406\u5b8c\u6210\" ) return data . upper () def main (): logger . info ( \"\u7a0b\u5e8f\u542f\u52a8\" ) result = process_data ( \"hello\" ) if result : logger . info ( f \"\u5904\u7406\u7ed3\u679c: { result } \" ) else : logger . warning ( \"\u5904\u7406\u5931\u8d25\" ) logger . info ( \"\u7a0b\u5e8f\u7ed3\u675f\" ) if __name__ == \"__main__\" : main () \u8fd0\u884c\u7ed3\u679c \u00b6 \u63a7\u5236\u53f0\u8f93\u51fa \uff1a 2025-04-01 10:00:00,123 - INFO - MainApp - \u7a0b\u5e8f\u542f\u52a8 2025-04-01 10:00:00,124 - INFO - MainApp - \u6570\u636e\u5904\u7406\u5b8c\u6210 2025-04-01 10:00:00,125 - INFO - MainApp - \u5904\u7406\u7ed3\u679c: HELLO 2025-04-01 10:00:00,126 - INFO - MainApp - \u7a0b\u5e8f\u7ed3\u675f logs/app.log \u6587\u4ef6\u5185\u5bb9 \uff1a 2025-04-01 10:00:00,123 - INFO - MainApp - \u7a0b\u5e8f\u542f\u52a8 2025-04-01 10:00:00,124 - DEBUG - MainApp - \u5f00\u59cb\u5904\u7406\u6570\u636e: hello 2025-04-01 10:00:00,125 - INFO - MainApp - \u6570\u636e\u5904\u7406\u5b8c\u6210 2025-04-01 10:00:00,126 - INFO - MainApp - \u5904\u7406\u7ed3\u679c: HELLO 2025-04-01 10:00:00,127 - INFO - MainApp - \u7a0b\u5e8f\u7ed3\u675f \u603b\u7ed3 \u00b6 \u672c\u8bfe\u901a\u8fc7\u793a\u4f8b\u8bb2\u89e3\u4e86Python logging \u6a21\u5757\u7684\u4f7f\u7528\uff1a \u57fa\u7840 \uff1a\u4f7f\u7528 basicConfig \u5feb\u901f\u914d\u7f6e\u65e5\u5fd7\u3002 \u81ea\u5b9a\u4e49 \uff1a\u8bbe\u7f6e\u683c\u5f0f\u3001\u7ea7\u522b\u548c\u8f93\u51fa\u76ee\u6807\u3002 \u5b58\u50a8 \uff1a\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230\u6587\u4ef6\uff0c\u540c\u65f6\u652f\u6301\u63a7\u5236\u53f0\u8f93\u51fa\u3002 \u5de5\u7a0b\u5316 \uff1a\u5c01\u88c5\u65e5\u5fd7\u914d\u7f6e\u4e3a\u6a21\u5757\uff0c\u4fbf\u4e8e\u590d\u7528\u3002 \u5e94\u7528\u573a\u666f \u00b6 \u5728QA\u7cfb\u7edf\u4e2d\uff0c\u8bb0\u5f55\u6570\u636e\u5e93\u8fde\u63a5\u3001\u68c0\u7d22\u7ed3\u679c\u7b49\u72b6\u6001\u3002 \u8c03\u8bd5\u65f6\u4f7f\u7528 DEBUG \u7ea7\u522b\uff0c\u751f\u4ea7\u73af\u5883\u8c03\u6574\u4e3a INFO \u6216 ERROR \u3002","title":"3.1 Python\u65e5\u5fd7\u4ecb\u7ecd\u4e0e\u5e94\u7528"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#pythonlogging","text":"","title":"Python\u65e5\u5fd7\u8bb0\u5f55\uff08Logging\uff09\u7b80\u4ecb\u4e0e\u5e94\u7528"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_1","text":"\u7406\u89e3\u65e5\u5fd7\u8bb0\u5f55\u7684\u4f5c\u7528\u53ca\u5176\u5728\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u7684\u91cd\u8981\u6027\u3002 \u638c\u63e1Python logging \u6a21\u5757\u7684\u57fa\u672c\u7528\u6cd5\u3002 \u5b66\u4f1a\u901a\u8fc7\u793a\u4f8b\u914d\u7f6e\u65e5\u5fd7\u7ea7\u522b\u3001\u683c\u5f0f\uff0c\u5e76\u5c06\u65e5\u5fd7\u5b58\u50a8\u5230\u6587\u4ef6\u4e2d\u3002 \u5728\u5de5\u7a0b\u5316\u9879\u76ee\u4e2d\u5e94\u7528\u65e5\u5fd7\u8bb0\u5f55\uff0c\u8ffd\u8e2a\u7a0b\u5e8f\u8fd0\u884c\u72b6\u6001\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_2","text":"\u65e5\u5fd7\uff08Logging\uff09\u662f\u7a0b\u5e8f\u8fd0\u884c\u65f6\u8bb0\u5f55\u5173\u952e\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f8b\u5982\u64cd\u4f5c\u6210\u529f\u3001\u9519\u8bef\u53d1\u751f\u6216\u8c03\u8bd5\u4fe1\u606f\u3002\u5b83\u5728\u5f00\u53d1\u548c\u7ef4\u62a4\u4e2d\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\uff1a \u8c03\u8bd5 \uff1a\u5e2e\u52a9\u627e\u5230\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\u3002 \u76d1\u63a7 \uff1a\u8bb0\u5f55\u7a0b\u5e8f\u7684\u8fd0\u884c\u72b6\u6001\u3002 \u5ba1\u8ba1 \uff1a\u8ffd\u8e2a\u7528\u6237\u6216\u7cfb\u7edf\u7684\u884c\u4e3a\u3002 Python\u7684 logging \u6a21\u5757\u662f\u4e00\u4e2a\u5185\u7f6e\u5de5\u5177\uff0c\u63d0\u4f9b\u7075\u6d3b\u7684\u65e5\u5fd7\u8bb0\u5f55\u529f\u80fd\uff0c\u6bd4\u7b80\u5355\u7684 print \u8bed\u53e5\u66f4\u5f3a\u5927\u3002","title":"\u65e5\u5fd7\u8bb0\u5f55\u6982\u8ff0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_3","text":"\u65e5\u5fd7\u7ea7\u522b \uff1a\u8868\u793a\u65e5\u5fd7\u7684\u91cd\u8981\u6027\uff0c\u5e38\u89c1\u7ea7\u522b\u4ece\u4f4e\u5230\u9ad8\uff1a DEBUG \uff1a\u8c03\u8bd5\u4fe1\u606f\uff08\u6700\u4f4e\uff09\u3002 INFO \uff1a\u4e00\u822c\u4fe1\u606f\u3002 WARNING \uff1a\u8b66\u544a\uff0c\u53ef\u80fd\u6709\u95ee\u9898\u3002 ERROR \uff1a\u9519\u8bef\uff0c\u5df2\u5f71\u54cd\u7a0b\u5e8f\u3002 CRITICAL \uff1a\u4e25\u91cd\u9519\u8bef\uff08\u6700\u9ad8\uff09\u3002 \u65e5\u5fd7\u5904\u7406\u5668\uff08Handler\uff09 \uff1a\u51b3\u5b9a\u65e5\u5fd7\u8f93\u51fa\u5230\u54ea\u91cc\uff08\u5982\u63a7\u5236\u53f0\u6216\u6587\u4ef6\uff09\u3002 \u65e5\u5fd7\u683c\u5f0f\uff08Formatter\uff09 \uff1a\u5b9a\u4e49\u65e5\u5fd7\u7684\u663e\u793a\u6837\u5f0f\uff08\u5982\u65f6\u95f4\u3001\u7ea7\u522b\u3001\u6d88\u606f\uff09\u3002","title":"\u6838\u5fc3\u6982\u5ff5"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#1","text":"","title":"\u793a\u4f8b1\uff1a\u57fa\u7840\u65e5\u5fd7\u8bb0\u5f55"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_4","text":"\u901a\u8fc7\u7b80\u5355\u793a\u4f8b\u5c55\u793a\u5982\u4f55\u8bb0\u5f55\u65e5\u5fd7\u5230\u63a7\u5236\u53f0\u3002","title":"\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_5","text":"import logging # \u914d\u7f6e\u57fa\u672c\u7684\u65e5\u5fd7\u8bbe\u7f6e logging . basicConfig ( level = logging . INFO ) # \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( \"Example1\" ) # \u8bb0\u5f55\u4e0d\u540c\u7ea7\u522b\u7684\u65e5\u5fd7 logger . debug ( \"\u8fd9\u662f\u8c03\u8bd5\u4fe1\u606f\uff0c\u901a\u5e38\u7528\u4e8e\u5f00\u53d1\" ) logger . info ( \"\u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38\" ) logger . warning ( \"\u6ce8\u610f\uff0c\u53ef\u80fd\u6709\u5c0f\u95ee\u9898\" ) logger . error ( \"\u53d1\u751f\u9519\u8bef\" ) logger . critical ( \"\u4e25\u91cd\u9519\u8bef\uff0c\u7a0b\u5e8f\u53ef\u80fd\u5d29\u6e83\" )","title":"\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_6","text":"2025-04-01 10:00:00,123 INFO Example1: \u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38 2025-04-01 10:00:00,124 WARNING Example1: \u6ce8\u610f\uff0c\u53ef\u80fd\u6709\u5c0f\u95ee\u9898 2025-04-01 10:00:00,125 ERROR Example1: \u53d1\u751f\u9519\u8bef 2025-04-01 10:00:00,126 CRITICAL Example1: \u4e25\u91cd\u9519\u8bef\uff0c\u7a0b\u5e8f\u53ef\u80fd\u5d29\u6e83","title":"\u8fd0\u884c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_7","text":"basicConfig(level=logging.INFO) \u8bbe\u7f6e\u6700\u4f4e\u8bb0\u5f55\u7ea7\u522b\u4e3a INFO \uff0c\u56e0\u6b64 DEBUG \u4fe1\u606f\u672a\u663e\u793a\u3002 \u65e5\u5fd7\u9ed8\u8ba4\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u683c\u5f0f\u4e3a \u65f6\u95f4 \u7ea7\u522b \u540d\u79f0: \u6d88\u606f \u3002","title":"\u5206\u6790"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#2","text":"","title":"\u793a\u4f8b2\uff1a\u81ea\u5b9a\u4e49\u65e5\u5fd7\u683c\u5f0f"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_8","text":"\u81ea\u5b9a\u4e49\u65e5\u5fd7\u8f93\u51fa\u683c\u5f0f\uff0c\u6dfb\u52a0\u65f6\u95f4\u548c\u7ea7\u522b\u3002","title":"\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_9","text":"import logging # \u914d\u7f6e\u65e5\u5fd7\u683c\u5f0f logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) # \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( \"Example2\" ) # \u8bb0\u5f55\u65e5\u5fd7 logger . debug ( \"\u8c03\u8bd5\u6a21\u5f0f\u5df2\u5f00\u542f\" ) logger . info ( \"\u6b63\u5728\u5904\u7406\u6570\u636e\" ) logger . error ( \"\u6570\u636e\u5904\u7406\u5931\u8d25\" )","title":"\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_10","text":"2025-04-01 10:00:00,123 - DEBUG - \u8c03\u8bd5\u6a21\u5f0f\u5df2\u5f00\u542f 2025-04-01 10:00:00,124 - INFO - \u6b63\u5728\u5904\u7406\u6570\u636e 2025-04-01 10:00:00,125 - ERROR - \u6570\u636e\u5904\u7406\u5931\u8d25","title":"\u8fd0\u884c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_11","text":"format \u53c2\u6570\u4f7f\u7528\u5360\u4f4d\u7b26\uff1a %(asctime)s \uff1a\u8bb0\u5f55\u65f6\u95f4\u3002 %(levelname)s \uff1a\u65e5\u5fd7\u7ea7\u522b\u3002 %(message)s \uff1a\u65e5\u5fd7\u6d88\u606f\u3002 \u7ea7\u522b\u8bbe\u4e3a DEBUG \uff0c\u6240\u6709\u65e5\u5fd7\u90fd\u663e\u793a\u3002","title":"\u5206\u6790"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#3","text":"","title":"\u793a\u4f8b3\uff1a\u5c06\u65e5\u5fd7\u5b58\u50a8\u5230\u6587\u4ef6"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_12","text":"\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d\uff0c\u4fbf\u4e8e\u540e\u7eed\u67e5\u770b\u3002","title":"\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_13","text":"import logging # \u914d\u7f6e\u65e5\u5fd7\uff0c\u8f93\u51fa\u5230\u6587\u4ef6 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' , filename = 'app.log' , # \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 filemode = 'a' # 'a'\u8868\u793a\u8ffd\u52a0\uff0c'w'\u8868\u793a\u8986\u76d6 ) # \u83b7\u53d6\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( \"Example3\" ) # \u8bb0\u5f55\u65e5\u5fd7 logger . info ( \"\u7a0b\u5e8f\u542f\u52a8\" ) logger . warning ( \"\u5185\u5b58\u4f7f\u7528\u7387\u8f83\u9ad8\" ) logger . error ( \"\u65e0\u6cd5\u8fde\u63a5\u6570\u636e\u5e93\" )","title":"\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_14","text":"\u63a7\u5236\u53f0\u65e0\u8f93\u51fa\uff0c\u65e5\u5fd7\u5199\u5165 app.log \u6587\u4ef6\uff1a 2025-04-01 10:00:00,123 - INFO - \u7a0b\u5e8f\u542f\u52a8 2025-04-01 10:00:00,124 - WARNING - \u5185\u5b58\u4f7f\u7528\u7387\u8f83\u9ad8 2025-04-01 10:00:00,125 - ERROR - \u65e0\u6cd5\u8fde\u63a5\u6570\u636e\u5e93","title":"\u8fd0\u884c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_15","text":"filename \u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\u3002 filemode='a' \u786e\u4fdd\u65e5\u5fd7\u8ffd\u52a0\u5199\u5165\uff0c\u4e0d\u8986\u76d6\u4e4b\u524d\u7684\u5185\u5bb9\u3002","title":"\u5206\u6790"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#4","text":"","title":"\u793a\u4f8b4\uff1a\u540c\u65f6\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u548c\u6587\u4ef6"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_16","text":"\u5c06\u65e5\u5fd7\u540c\u65f6\u8bb0\u5f55\u5230\u63a7\u5236\u53f0\u548c\u6587\u4ef6\u4e2d\u3002","title":"\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_17","text":"import logging # \u521b\u5efa\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( \"Example4\" ) logger . setLevel ( logging . DEBUG ) # \u8bbe\u7f6e\u8bb0\u5f55\u5668\u7ea7\u522b # \u521b\u5efa\u63a7\u5236\u53f0\u5904\u7406\u5668 console_handler = logging . StreamHandler () console_handler . setLevel ( logging . INFO ) # \u63a7\u5236\u53f0\u663e\u793aINFO\u53ca\u4ee5\u4e0a\u7ea7\u522b # \u521b\u5efa\u6587\u4ef6\u5904\u7406\u5668 file_handler = logging . FileHandler ( 'app.log' , mode = 'a' ) file_handler . setLevel ( logging . DEBUG ) # \u6587\u4ef6\u8bb0\u5f55DEBUG\u53ca\u4ee5\u4e0a\u7ea7\u522b # \u5b9a\u4e49\u65e5\u5fd7\u683c\u5f0f formatter = logging . Formatter ( ' %(asctime)s - %(levelname)s - %(message)s ' ) # \u4e3a\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f console_handler . setFormatter ( formatter ) file_handler . setFormatter ( formatter ) # \u5c06\u5904\u7406\u5668\u6dfb\u52a0\u5230\u8bb0\u5f55\u5668 logger . addHandler ( console_handler ) logger . addHandler ( file_handler ) # \u8bb0\u5f55\u65e5\u5fd7 logger . debug ( \"\u8c03\u8bd5\u4fe1\u606f\uff0c\u4ec5\u5199\u5165\u6587\u4ef6\" ) logger . info ( \"\u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38\" ) logger . error ( \"\u53d1\u751f\u9519\u8bef\" )","title":"\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_18","text":"\u63a7\u5236\u53f0\u8f93\u51fa \uff1a 2025-04-01 10:00:00,123 - INFO - \u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38 2025-04-01 10:00:00,124 - ERROR - \u53d1\u751f\u9519\u8bef app.log\u6587\u4ef6\u5185\u5bb9 \uff1a 2025-04-01 10:00:00,123 - DEBUG - \u8c03\u8bd5\u4fe1\u606f\uff0c\u4ec5\u5199\u5165\u6587\u4ef6 2025-04-01 10:00:00,124 - INFO - \u7a0b\u5e8f\u8fd0\u884c\u6b63\u5e38 2025-04-01 10:00:00,125 - ERROR - \u53d1\u751f\u9519\u8bef","title":"\u8fd0\u884c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_19","text":"\u4f7f\u7528 Handler \u5206\u522b\u63a7\u5236\u8f93\u51fa\u76ee\u6807\uff1a StreamHandler \uff1a\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 FileHandler \uff1a\u8f93\u51fa\u5230\u6587\u4ef6\u3002 \u4e0d\u540c\u5904\u7406\u5668\u53ef\u8bbe\u7f6e\u4e0d\u540c\u7ea7\u522b\uff0c\u7075\u6d3b\u6027\u66f4\u9ad8\u3002","title":"\u5206\u6790"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_20","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_21","text":"logging_lesson/ \u251c\u2500\u2500 logs/ \u2502 \u2514\u2500\u2500 app.log # \u65e5\u5fd7\u6587\u4ef6 \u251c\u2500\u2500 utils/ \u2502 \u2514\u2500\u2500 logger.py # \u65e5\u5fd7\u914d\u7f6e\u6a21\u5757 \u251c\u2500\u2500 main.py # \u4e3b\u7a0b\u5e8f\u5165\u53e3 \u2514\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6\uff08\u672c\u4f8b\u65e0\u9700\u989d\u5916\u4f9d\u8d56\uff09","title":"\u6574\u4f53\u7ed3\u6784"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#utilsloggerpy","text":"import logging import os def setup_logger ( name , log_file = 'logs/app.log' ): # \u786e\u4fdd\u65e5\u5fd7\u76ee\u5f55\u5b58\u5728 os . makedirs ( os . path . dirname ( log_file ), exist_ok = True ) # \u521b\u5efa\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = logging . getLogger ( name ) logger . setLevel ( logging . DEBUG ) # \u8bbe\u7f6e\u6700\u4f4e\u7ea7\u522b # \u521b\u5efa\u63a7\u5236\u53f0\u5904\u7406\u5668 console_handler = logging . StreamHandler () console_handler . setLevel ( logging . INFO ) # \u521b\u5efa\u6587\u4ef6\u5904\u7406\u5668 file_handler = logging . FileHandler ( log_file , mode = 'a' ) file_handler . setLevel ( logging . DEBUG ) # \u5b9a\u4e49\u65e5\u5fd7\u683c\u5f0f formatter = logging . Formatter ( ' %(asctime)s - %(levelname)s - %(name)s - %(message)s ' ) # \u8bbe\u7f6e\u5904\u7406\u5668\u683c\u5f0f console_handler . setFormatter ( formatter ) file_handler . setFormatter ( formatter ) # \u6dfb\u52a0\u5904\u7406\u5668\uff08\u907f\u514d\u91cd\u590d\u6dfb\u52a0\uff09 if not logger . handlers : logger . addHandler ( console_handler ) logger . addHandler ( file_handler ) return logger","title":"\u65e5\u5fd7\u914d\u7f6e\u6a21\u5757 (utils/logger.py)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#mainpy","text":"from utils.logger import setup_logger # \u521d\u59cb\u5316\u65e5\u5fd7\u8bb0\u5f55\u5668 logger = setup_logger ( \"MainApp\" ) def process_data ( data ): logger . debug ( f \"\u5f00\u59cb\u5904\u7406\u6570\u636e: { data } \" ) if not data : logger . error ( \"\u6570\u636e\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u5904\u7406\" ) return None logger . info ( \"\u6570\u636e\u5904\u7406\u5b8c\u6210\" ) return data . upper () def main (): logger . info ( \"\u7a0b\u5e8f\u542f\u52a8\" ) result = process_data ( \"hello\" ) if result : logger . info ( f \"\u5904\u7406\u7ed3\u679c: { result } \" ) else : logger . warning ( \"\u5904\u7406\u5931\u8d25\" ) logger . info ( \"\u7a0b\u5e8f\u7ed3\u675f\" ) if __name__ == \"__main__\" : main ()","title":"\u4e3b\u7a0b\u5e8f (main.py)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_22","text":"\u63a7\u5236\u53f0\u8f93\u51fa \uff1a 2025-04-01 10:00:00,123 - INFO - MainApp - \u7a0b\u5e8f\u542f\u52a8 2025-04-01 10:00:00,124 - INFO - MainApp - \u6570\u636e\u5904\u7406\u5b8c\u6210 2025-04-01 10:00:00,125 - INFO - MainApp - \u5904\u7406\u7ed3\u679c: HELLO 2025-04-01 10:00:00,126 - INFO - MainApp - \u7a0b\u5e8f\u7ed3\u675f logs/app.log \u6587\u4ef6\u5185\u5bb9 \uff1a 2025-04-01 10:00:00,123 - INFO - MainApp - \u7a0b\u5e8f\u542f\u52a8 2025-04-01 10:00:00,124 - DEBUG - MainApp - \u5f00\u59cb\u5904\u7406\u6570\u636e: hello 2025-04-01 10:00:00,125 - INFO - MainApp - \u6570\u636e\u5904\u7406\u5b8c\u6210 2025-04-01 10:00:00,126 - INFO - MainApp - \u5904\u7406\u7ed3\u679c: HELLO 2025-04-01 10:00:00,127 - INFO - MainApp - \u7a0b\u5e8f\u7ed3\u675f","title":"\u8fd0\u884c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_23","text":"\u672c\u8bfe\u901a\u8fc7\u793a\u4f8b\u8bb2\u89e3\u4e86Python logging \u6a21\u5757\u7684\u4f7f\u7528\uff1a \u57fa\u7840 \uff1a\u4f7f\u7528 basicConfig \u5feb\u901f\u914d\u7f6e\u65e5\u5fd7\u3002 \u81ea\u5b9a\u4e49 \uff1a\u8bbe\u7f6e\u683c\u5f0f\u3001\u7ea7\u522b\u548c\u8f93\u51fa\u76ee\u6807\u3002 \u5b58\u50a8 \uff1a\u5c06\u65e5\u5fd7\u4fdd\u5b58\u5230\u6587\u4ef6\uff0c\u540c\u65f6\u652f\u6301\u63a7\u5236\u53f0\u8f93\u51fa\u3002 \u5de5\u7a0b\u5316 \uff1a\u5c01\u88c5\u65e5\u5fd7\u914d\u7f6e\u4e3a\u6a21\u5757\uff0c\u4fbf\u4e8e\u590d\u7528\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01.Python%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8.html#_24","text":"\u5728QA\u7cfb\u7edf\u4e2d\uff0c\u8bb0\u5f55\u6570\u636e\u5e93\u8fde\u63a5\u3001\u68c0\u7d22\u7ed3\u679c\u7b49\u72b6\u6001\u3002 \u8c03\u8bd5\u65f6\u4f7f\u7528 DEBUG \u7ea7\u522b\uff0c\u751f\u4ea7\u73af\u5883\u8c03\u6574\u4e3a INFO \u6216 ERROR \u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html","text":"BM25\u7b97\u6cd5\u7b80\u4ecb\u4e0e\u5e94\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3BM25\u7b97\u6cd5\u7684\u57fa\u672c\u539f\u7406\u53ca\u5176\u5728\u4fe1\u606f\u68c0\u7d22\u4e2d\u7684\u4f5c\u7528\u3002 \u638c\u63e1\u5982\u4f55\u4f7f\u7528BM25\u8fdb\u884c\u6587\u672c\u5339\u914d\u3002 \u5b66\u4f1a\u5c06BM25\u7b97\u6cd5\u96c6\u6210\u5230\u5de5\u7a0b\u5316\u4ee3\u7801\u4e2d\u3002 BM25\u7b97\u6cd5\u6982\u8ff0 \u00b6 BM25\uff08Best Matching 25\uff09\u662f\u4e00\u79cd\u4fe1\u606f\u68c0\u7d22\u9886\u57df\u7684\u6392\u540d\u7b97\u6cd5\uff0c\u7528\u4e8e\u8ba1\u7b97\u67e5\u8be2\uff08Query\uff09\u4e0e\u6587\u6863\uff08Document\uff09\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u5f97\u5206\u3002\u5b83\u6539\u8fdb\u4e86\u4f20\u7edf\u7684TF-IDF\u7b97\u6cd5\uff0c\u5f15\u5165\u6587\u6863\u957f\u5ea6\u5f52\u4e00\u5316\u548c\u8bcd\u9891\u9971\u548c\u673a\u5236\uff0c\u4f7f\u68c0\u7d22\u7ed3\u679c\u66f4\u51c6\u786e\u3002 \u5176\u4e2d\uff1a fi \u662f\u8bcd\u9879 qi\u5728\u6587\u6863 D\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff08TF\uff09\uff0c N\u662f\u6587\u6863\u603b\u6570\uff0c ni\u662f\u5305\u542b\u8bcd\u9879 qi\u7684\u6587\u6863\u6570\uff0c \u2223D\u2223\u662f\u6587\u6863 D\u7684\u957f\u5ea6\uff0c avgdl \u662f\u6240\u6709\u6587\u6863\u7684\u5e73\u5747\u957f\u5ea6\uff0c k1 \u548c b\u662f\u8c03\u6574\u53c2\u6570\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a k1=1.2\u548c b=0.75 \u3002 \u7b80\u5355\u793a\u4f8b \u00b6 \u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u6587\u6863\u96c6\u5408\uff1a \u6587\u68631\uff1a\"\u6211\u559c\u6b22\u7f16\u7a0b\" \u6587\u68632\uff1a\"\u7f16\u7a0b\u5f88\u6709\u8da3\" \u67e5\u8be2\uff1a\"\u4ed6\u559c\u6b22\u7f16\u7a0b\" \u6b65\u9aa4 \uff1a \u5206\u8bcd\uff1a\u5c06\u6587\u6863\u548c\u67e5\u8be2\u62c6\u5206\u4e3a\u8bcd\u3002 \u6587\u68631\uff1a[\"\u6211\", \"\u559c\u6b22\", \"\u7f16\u7a0b\"] \u6587\u68632\uff1a[\"\u7f16\u7a0b\", \"\u5f88\", \"\u6709\u8da3\"] \u67e5\u8be2\uff1a[\"\u4ed6\", \"\u559c\u6b22\", \"\u7f16\u7a0b\"] \u8ba1\u7b97BM25\u5f97\u5206\uff1a\u4f7f\u7528 rank_bm25 \u5e93\u8ba1\u7b97\u6bcf\u4e2a\u6587\u6863\u4e0e\u67e5\u8be2\u7684\u76f8\u5173\u6027\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6574\u4f53\u7ed3\u6784 \u00b6 bm25_lesson/ \u251c\u2500\u2500 retrieval/ \u2502 \u2514\u2500\u2500 bm25_search.py # BM25\u68c0\u7d22\u6a21\u5757 \u251c\u2500\u2500 main.py # \u4e3b\u7a0b\u5e8f\u5165\u53e3 \u2514\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6 \u68c0\u7d22\u6a21\u5757 ( retrieval/bm25_search.py ) \u00b6 import jieba from rank_bm25 import BM25L import logging # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) logger = logging . getLogger ( __name__ ) class BM25Search : def __init__ ( self , documents ): # \u521d\u59cb\u5316\u6587\u6863\u96c6\u5408 self . documents = documents # \u5206\u8bcd\u540e\u7684\u6587\u6863 self . tokenized_docs = [ jieba . lcut ( doc ) for doc in documents ] # \u521d\u59cb\u5316BM25\u6a21\u578b self . bm25 = BM25L ( self . tokenized_docs ) logger . info ( \"BM25\u6a21\u578b\u521d\u59cb\u5316\u5b8c\u6210\" ) def search ( self , query ): # \u5206\u8bcd\u67e5\u8be2 tokenized_query = jieba . lcut ( query ) try : # \u8ba1\u7b97\u6bcf\u4e2a\u6587\u6863\u7684BM25\u5f97\u5206 scores = self . bm25 . get_scores ( tokenized_query ) print ( f 'scores--\u300b { scores } ' ) # \u83b7\u53d6\u6700\u9ad8\u5f97\u5206\u7684\u6587\u6863\u7d22\u5f15 best_idx = scores . argmax () best_score = scores [ best_idx ] best_doc = self . documents [ best_idx ] logger . info ( f \"\u67e5\u8be2: { query } , \u6700\u4f73\u5339\u914d: { best_doc } , \u5f97\u5206: { best_score } \" ) return best_doc , best_score except Exception as e : logger . error ( f \"\u68c0\u7d22\u5931\u8d25: { e } \" ) return None , 0.0 \u4e3b\u7a0b\u5e8f ( main.py ) \u00b6 from retrieval.bm25_search import BM25Search import logging # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) logger = logging . getLogger ( __name__ ) def main (): # \u793a\u4f8b\u6587\u6863\u96c6\u5408 documents = [ \"\u6211\u559c\u6b22\u7f16\u7a0b\" , \"\u7f16\u7a0b\u5f88\u6709\u8da3\" ] # \u521d\u59cb\u5316BM25\u68c0\u7d22\u5668 bm25_search = BM25Search ( documents ) # \u793a\u4f8b\u67e5\u8be2 query = \"\u4ed6\u559c\u6b22\u7f16\u7a0b\" # \u6267\u884c\u68c0\u7d22 result , score = bm25_search . search ( query ) if result : logger . info ( f \"\u67e5\u8be2\u7ed3\u679c: { result } , \u5f97\u5206: { score } \" ) else : logger . info ( \"\u672a\u627e\u5230\u5339\u914d\u7ed3\u679c\" ) if __name__ == \"__main__\" : main () \u4f9d\u8d56\u6587\u4ef6 ( requirements.txt ) \u00b6 jieba rank_bm25 \u793a\u4f8b\u8fd0\u884c\u7ed3\u679c \u00b6 \u8fd0\u884c main.py \uff0c\u8f93\u51fa\u5982\u4e0b\uff1a 2025-04-02 19:01:27,463 - INFO - BM25\u6a21\u578b\u521d\u59cb\u5316\u5b8c\u6210 2025-04-02 19:01:27,464 - INFO - \u67e5\u8be2: \u4ed6\u559c\u6b22\u7f16\u7a0b, \u6700\u4f73\u5339\u914d: \u6211\u559c\u6b22\u7f16\u7a0b, \u5f97\u5206: 1.094 2025-04-02 19:01:27,464 - INFO - \u67e5\u8be2\u7ed3\u679c: \u6211\u559c\u6b22\u7f16\u7a0b, \u5f97\u5206: 1.094 \u5206\u6790 \u00b6 \"\u7f16\u7a0b\u5f88\u6709\u8da3\"\u5f97\u5206\u9ad8\u4e8e\"\u6211\u559c\u6b22\u7f16\u7a0b\"\uff0c\u56e0\u4e3a\u524d\u8005\u8bcd\u9891\u66f4\u9ad8\u4e14\u6587\u6863\u8f83\u77ed\u3002 BM25\u901a\u8fc7\u957f\u5ea6\u5f52\u4e00\u5316\u907f\u514d\u4e86\u957f\u6587\u6863\u7684\u8fc7\u5ea6\u4f18\u52bf\u3002 \u603b\u7ed3 \u00b6 \u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86BM25\u7b97\u6cd5\u7684\u539f\u7406\u548c\u5e94\u7528\uff1a \u539f\u7406 \uff1a\u7ed3\u5408TF\u3001IDF\u3001\u957f\u5ea6\u5f52\u4e00\u5316\u548c\u8bcd\u9891\u9971\u548c\u3002 \u5e94\u7528 \uff1a\u901a\u8fc7 rank_bm25 \u5e93\u5b9e\u73b0\u6587\u672c\u68c0\u7d22\u3002 \u4e0b\u4e00\u7ae0\u5c06\u4ecb\u7ecdRedis\u6570\u636e\u5e93\u7684\u5e94\u7528\u3002","title":"3.2 BM25\u7b97\u6cd5\u7b80\u4ecb\u4e0e\u5e94\u7528"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#bm25","text":"","title":"BM25\u7b97\u6cd5\u7b80\u4ecb\u4e0e\u5e94\u7528"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#_1","text":"\u7406\u89e3BM25\u7b97\u6cd5\u7684\u57fa\u672c\u539f\u7406\u53ca\u5176\u5728\u4fe1\u606f\u68c0\u7d22\u4e2d\u7684\u4f5c\u7528\u3002 \u638c\u63e1\u5982\u4f55\u4f7f\u7528BM25\u8fdb\u884c\u6587\u672c\u5339\u914d\u3002 \u5b66\u4f1a\u5c06BM25\u7b97\u6cd5\u96c6\u6210\u5230\u5de5\u7a0b\u5316\u4ee3\u7801\u4e2d\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#bm25_1","text":"BM25\uff08Best Matching 25\uff09\u662f\u4e00\u79cd\u4fe1\u606f\u68c0\u7d22\u9886\u57df\u7684\u6392\u540d\u7b97\u6cd5\uff0c\u7528\u4e8e\u8ba1\u7b97\u67e5\u8be2\uff08Query\uff09\u4e0e\u6587\u6863\uff08Document\uff09\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u5f97\u5206\u3002\u5b83\u6539\u8fdb\u4e86\u4f20\u7edf\u7684TF-IDF\u7b97\u6cd5\uff0c\u5f15\u5165\u6587\u6863\u957f\u5ea6\u5f52\u4e00\u5316\u548c\u8bcd\u9891\u9971\u548c\u673a\u5236\uff0c\u4f7f\u68c0\u7d22\u7ed3\u679c\u66f4\u51c6\u786e\u3002 \u5176\u4e2d\uff1a fi \u662f\u8bcd\u9879 qi\u5728\u6587\u6863 D\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff08TF\uff09\uff0c N\u662f\u6587\u6863\u603b\u6570\uff0c ni\u662f\u5305\u542b\u8bcd\u9879 qi\u7684\u6587\u6863\u6570\uff0c \u2223D\u2223\u662f\u6587\u6863 D\u7684\u957f\u5ea6\uff0c avgdl \u662f\u6240\u6709\u6587\u6863\u7684\u5e73\u5747\u957f\u5ea6\uff0c k1 \u548c b\u662f\u8c03\u6574\u53c2\u6570\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a k1=1.2\u548c b=0.75 \u3002","title":"BM25\u7b97\u6cd5\u6982\u8ff0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#_2","text":"\u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u6587\u6863\u96c6\u5408\uff1a \u6587\u68631\uff1a\"\u6211\u559c\u6b22\u7f16\u7a0b\" \u6587\u68632\uff1a\"\u7f16\u7a0b\u5f88\u6709\u8da3\" \u67e5\u8be2\uff1a\"\u4ed6\u559c\u6b22\u7f16\u7a0b\" \u6b65\u9aa4 \uff1a \u5206\u8bcd\uff1a\u5c06\u6587\u6863\u548c\u67e5\u8be2\u62c6\u5206\u4e3a\u8bcd\u3002 \u6587\u68631\uff1a[\"\u6211\", \"\u559c\u6b22\", \"\u7f16\u7a0b\"] \u6587\u68632\uff1a[\"\u7f16\u7a0b\", \"\u5f88\", \"\u6709\u8da3\"] \u67e5\u8be2\uff1a[\"\u4ed6\", \"\u559c\u6b22\", \"\u7f16\u7a0b\"] \u8ba1\u7b97BM25\u5f97\u5206\uff1a\u4f7f\u7528 rank_bm25 \u5e93\u8ba1\u7b97\u6bcf\u4e2a\u6587\u6863\u4e0e\u67e5\u8be2\u7684\u76f8\u5173\u6027\u3002","title":"\u7b80\u5355\u793a\u4f8b"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#_3","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#_4","text":"bm25_lesson/ \u251c\u2500\u2500 retrieval/ \u2502 \u2514\u2500\u2500 bm25_search.py # BM25\u68c0\u7d22\u6a21\u5757 \u251c\u2500\u2500 main.py # \u4e3b\u7a0b\u5e8f\u5165\u53e3 \u2514\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6","title":"\u6574\u4f53\u7ed3\u6784"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#retrievalbm25_searchpy","text":"import jieba from rank_bm25 import BM25L import logging # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) logger = logging . getLogger ( __name__ ) class BM25Search : def __init__ ( self , documents ): # \u521d\u59cb\u5316\u6587\u6863\u96c6\u5408 self . documents = documents # \u5206\u8bcd\u540e\u7684\u6587\u6863 self . tokenized_docs = [ jieba . lcut ( doc ) for doc in documents ] # \u521d\u59cb\u5316BM25\u6a21\u578b self . bm25 = BM25L ( self . tokenized_docs ) logger . info ( \"BM25\u6a21\u578b\u521d\u59cb\u5316\u5b8c\u6210\" ) def search ( self , query ): # \u5206\u8bcd\u67e5\u8be2 tokenized_query = jieba . lcut ( query ) try : # \u8ba1\u7b97\u6bcf\u4e2a\u6587\u6863\u7684BM25\u5f97\u5206 scores = self . bm25 . get_scores ( tokenized_query ) print ( f 'scores--\u300b { scores } ' ) # \u83b7\u53d6\u6700\u9ad8\u5f97\u5206\u7684\u6587\u6863\u7d22\u5f15 best_idx = scores . argmax () best_score = scores [ best_idx ] best_doc = self . documents [ best_idx ] logger . info ( f \"\u67e5\u8be2: { query } , \u6700\u4f73\u5339\u914d: { best_doc } , \u5f97\u5206: { best_score } \" ) return best_doc , best_score except Exception as e : logger . error ( f \"\u68c0\u7d22\u5931\u8d25: { e } \" ) return None , 0.0","title":"\u68c0\u7d22\u6a21\u5757 (retrieval/bm25_search.py)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#mainpy","text":"from retrieval.bm25_search import BM25Search import logging # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) logger = logging . getLogger ( __name__ ) def main (): # \u793a\u4f8b\u6587\u6863\u96c6\u5408 documents = [ \"\u6211\u559c\u6b22\u7f16\u7a0b\" , \"\u7f16\u7a0b\u5f88\u6709\u8da3\" ] # \u521d\u59cb\u5316BM25\u68c0\u7d22\u5668 bm25_search = BM25Search ( documents ) # \u793a\u4f8b\u67e5\u8be2 query = \"\u4ed6\u559c\u6b22\u7f16\u7a0b\" # \u6267\u884c\u68c0\u7d22 result , score = bm25_search . search ( query ) if result : logger . info ( f \"\u67e5\u8be2\u7ed3\u679c: { result } , \u5f97\u5206: { score } \" ) else : logger . info ( \"\u672a\u627e\u5230\u5339\u914d\u7ed3\u679c\" ) if __name__ == \"__main__\" : main ()","title":"\u4e3b\u7a0b\u5e8f (main.py)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#requirementstxt","text":"jieba rank_bm25","title":"\u4f9d\u8d56\u6587\u4ef6 (requirements.txt)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#_5","text":"\u8fd0\u884c main.py \uff0c\u8f93\u51fa\u5982\u4e0b\uff1a 2025-04-02 19:01:27,463 - INFO - BM25\u6a21\u578b\u521d\u59cb\u5316\u5b8c\u6210 2025-04-02 19:01:27,464 - INFO - \u67e5\u8be2: \u4ed6\u559c\u6b22\u7f16\u7a0b, \u6700\u4f73\u5339\u914d: \u6211\u559c\u6b22\u7f16\u7a0b, \u5f97\u5206: 1.094 2025-04-02 19:01:27,464 - INFO - \u67e5\u8be2\u7ed3\u679c: \u6211\u559c\u6b22\u7f16\u7a0b, \u5f97\u5206: 1.094","title":"\u793a\u4f8b\u8fd0\u884c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#_6","text":"\"\u7f16\u7a0b\u5f88\u6709\u8da3\"\u5f97\u5206\u9ad8\u4e8e\"\u6211\u559c\u6b22\u7f16\u7a0b\"\uff0c\u56e0\u4e3a\u524d\u8005\u8bcd\u9891\u66f4\u9ad8\u4e14\u6587\u6863\u8f83\u77ed\u3002 BM25\u901a\u8fc7\u957f\u5ea6\u5f52\u4e00\u5316\u907f\u514d\u4e86\u957f\u6587\u6863\u7684\u8fc7\u5ea6\u4f18\u52bf\u3002","title":"\u5206\u6790"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02.BM25%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%BA%94%E7%94%A8.html#_7","text":"\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86BM25\u7b97\u6cd5\u7684\u539f\u7406\u548c\u5e94\u7528\uff1a \u539f\u7406 \uff1a\u7ed3\u5408TF\u3001IDF\u3001\u957f\u5ea6\u5f52\u4e00\u5316\u548c\u8bcd\u9891\u9971\u548c\u3002 \u5e94\u7528 \uff1a\u901a\u8fc7 rank_bm25 \u5e93\u5b9e\u73b0\u6587\u672c\u68c0\u7d22\u3002 \u4e0b\u4e00\u7ae0\u5c06\u4ecb\u7ecdRedis\u6570\u636e\u5e93\u7684\u5e94\u7528\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html","text":"Redis\u6570\u636e\u5e93\u64cd\u4f5c\u7b80\u4ecb\u4e0e\u5e94\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3 Redis \u6570\u636e\u5e93\u7684\u57fa\u672c\u539f\u7406\u53ca\u5176\u5728\u7f13\u5b58\u548c\u6570\u636e\u5b58\u50a8\u4e2d\u7684\u4f5c\u7528\u3002 \u638c\u63e1\u5982\u4f55\u4f7f\u7528 Python \u7684 redis \u5e93\u8fdb\u884c\u6570\u636e\u5b58\u50a8\u548c\u67e5\u8be2\u3002 \u5b66\u4f1a\u5c06 Redis \u5ba2\u6237\u7aef\u96c6\u6210\u5230\u5de5\u7a0b\u5316\u4ee3\u7801\u4e2d\u3002 Redis \u6570\u636e\u5e93\u6982\u8ff0 \u00b6 Redis\uff08Remote Dictionary Server\uff09\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u952e\u503c\u5bf9\u6570\u636e\u5e93\uff0c\u5e38\u7528\u4e8e\u7f13\u5b58\u3001\u4f1a\u8bdd\u7ba1\u7406\u7b49\u573a\u666f\u3002\u5b83\u652f\u6301\u591a\u79cd\u6570\u636e\u7ed3\u6784\uff08\u5982\u5b57\u7b26\u4e32\u3001\u54c8\u5e0c\u3001\u5217\u8868\u7b49\uff09\uff0c\u5e76\u63d0\u4f9b\u5feb\u901f\u7684\u5185\u5b58\u64cd\u4f5c\u3002 Redis \u7684\u6838\u5fc3\u7279\u6027 \u00b6 \u9ad8\u6027\u80fd \uff1a\u6570\u636e\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u8bfb\u5199\u901f\u5ea6\u6781\u5feb\u3002 \u6301\u4e45\u5316 \uff1a\u652f\u6301 RDB \u548c AOF \u4e24\u79cd\u6301\u4e45\u5316\u65b9\u5f0f\u3002 \u7075\u6d3b\u6027 \uff1a\u652f\u6301\u591a\u79cd\u6570\u636e\u7c7b\u578b\u548c\u4e30\u5bcc\u547d\u4ee4\u3002 \u7b80\u5355\u6613\u7528 \uff1a\u63d0\u4f9b\u76f4\u89c2\u7684 API\uff0c\u6613\u4e8e\u96c6\u6210\u3002 \u5e94\u7528\u573a\u666f \u00b6 \u7f13\u5b58\u67e5\u8be2\u7ed3\u679c\u4ee5\u51cf\u5c11\u6570\u636e\u5e93\u538b\u529b\u3002 \u5b58\u50a8\u7528\u6237\u4f1a\u8bdd\u4fe1\u606f\u3002 \u5b9e\u73b0\u6392\u884c\u699c\u6216\u8ba1\u6570\u5668\u529f\u80fd\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6574\u4f53\u7ed3\u6784 \u00b6 redis_lesson/ \u251c\u2500\u2500 redis_client.py # Redis \u5ba2\u6237\u7aef\u6a21\u5757 \u251c\u2500\u2500 base.py # \u914d\u7f6e\u6587\u4ef6\u548c\u65e5\u5fd7\u6a21\u5757 \u251c\u2500\u2500 main.py # \u4e3b\u7a0b\u5e8f\u5165\u53e3 \u2514\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6 Redis \u5ba2\u6237\u7aef\u6a21\u5757 ( redis_client.py ) \u00b6 import redis import json from base import Config , logger class RedisClient : def __init__ ( self ): self . logger = logger try : self . client = redis . StrictRedis ( host = Config () . REDIS_HOST , port = Config () . REDIS_PORT , password = Config () . REDIS_PASSWORD , db = Config () . REDIS_DB , decode_responses = True ) self . logger . info ( \"Redis \u8fde\u63a5\u6210\u529f\" ) except redis . RedisError as e : self . logger . error ( f \"Redis \u8fde\u63a5\u5931\u8d25: { e } \" ) raise def set_data ( self , key , value ): try : self . client . set ( key , json . dumps ( value )) self . logger . info ( f \"\u5b58\u50a8\u6570\u636e\u5230 Redis: { key } \" ) except redis . RedisError as e : self . logger . error ( f \"Redis \u5b58\u50a8\u5931\u8d25: { e } \" ) def get_data ( self , key ): try : data = self . client . get ( key ) return json . loads ( data ) if data else None except redis . RedisError as e : self . logger . error ( f \"Redis \u83b7\u53d6\u5931\u8d25: { e } \" ) return None def get_answer ( self , query ): try : answer = self . client . get ( f \"answer: { query } \" ) if answer : self . logger . info ( f \"\u4ece Redis \u83b7\u53d6\u7b54\u6848: { query } \" ) return answer return None except redis . RedisError as e : self . logger . error ( f \"Redis \u67e5\u8be2\u5931\u8d25: { e } \" ) return None \u4e3b\u7a0b\u5e8f ( main.py ) \u00b6 from redis_client import RedisClient import logging # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) logger = logging . getLogger ( __name__ ) def main (): # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef redis_client = RedisClient () # \u793a\u4f8b\u6570\u636e key = \"user:1\" value = { \"name\" : \"Alice\" , \"age\" : 25 } # \u5b58\u50a8\u6570\u636e redis_client . set_data ( key , value ) # \u83b7\u53d6\u6570\u636e result = redis_client . get_data ( key ) if result : logger . info ( f \"\u67e5\u8be2\u7ed3\u679c: { result } \" ) else : logger . info ( \"\u672a\u627e\u5230\u6570\u636e\" ) # \u793a\u4f8b\u67e5\u8be2\u7f13\u5b58 query = \"test_query\" answer = redis_client . get_answer ( query ) if answer : logger . info ( f \"\u7f13\u5b58\u7b54\u6848: { answer } \" ) else : logger . info ( \"\u672a\u627e\u5230\u7f13\u5b58\u7b54\u6848\" ) if __name__ == \"__main__\" : main () \u914d\u7f6e\u6587\u4ef6 ( base.py ) \u00b6 import logging # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) logger = logging . getLogger ( __name__ ) class Config : REDIS_HOST = \"localhost\" REDIS_PORT = 6379 REDIS_PASSWORD = None REDIS_DB = 0 \u4f9d\u8d56\u6587\u4ef6 ( requirements.txt ) \u00b6 redis \u793a\u4f8b\u8fd0\u884c\u7ed3\u679c \u00b6 \u8fd0\u884c main.py \uff0c\u5047\u8bbe Redis \u670d\u52a1\u5668\u8fd0\u884c\u5728\u672c\u5730\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a 2025-05-12 10:00:01,123 - INFO - Redis \u8fde\u63a5\u6210\u529f 2025-05-12 10:00:01,124 - INFO - \u5b58\u50a8\u6570\u636e\u5230 Redis: user:1 2025-05-12 10:00:01,125 - INFO - \u67e5\u8be2\u7ed3\u679c: {'name': 'Alice', 'age': 25} 2025-05-12 10:00:01,126 - INFO - \u672a\u627e\u5230\u7f13\u5b58\u7b54\u6848 \u5206\u6790 \u00b6 \u6570\u636e\u4ee5 JSON \u683c\u5f0f\u5b58\u50a8\uff0c\u9002\u5408\u590d\u6742\u7ed3\u6784\u3002 get_answer \u65b9\u6cd5\u7528\u4e8e\u67e5\u8be2\u7f13\u5b58\uff0c\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\u3002 \u5f02\u5e38\u5904\u7406\u786e\u4fdd\u4ee3\u7801\u9c81\u68d2\u6027\uff0c\u907f\u514d Redis \u8fde\u63a5\u6216\u64cd\u4f5c\u5931\u8d25\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002 \u603b\u7ed3 \u00b6 \u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86 Redis \u6570\u636e\u5e93\u7684\u64cd\u4f5c\u539f\u7406\u548c\u5e94\u7528\uff1a \u539f\u7406 \uff1a\u9ad8\u6027\u80fd\u952e\u503c\u5bf9\u5b58\u50a8\uff0c\u9002\u5408\u7f13\u5b58\u548c\u5feb\u901f\u6570\u636e\u8bbf\u95ee\u3002 \u5e94\u7528 \uff1a\u901a\u8fc7 redis \u5e93\u5b9e\u73b0\u6570\u636e\u5b58\u50a8\u3001\u67e5\u8be2\u548c\u7f13\u5b58\u3002 \u4e0b\u4e00\u7ae0\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06 Redis \u4e0e\u5176\u4ed6\u7b97\u6cd5\uff08\u5982 BM25\uff09\u7ed3\u5408\uff0c\u63d0\u5347\u68c0\u7d22\u6548\u7387\u3002","title":"3.3 Redis\u6570\u636e\u5e93\u7b80\u4ecb\u4e0e\u4f7f\u7528"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#redis","text":"","title":"Redis\u6570\u636e\u5e93\u64cd\u4f5c\u7b80\u4ecb\u4e0e\u5e94\u7528"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#_1","text":"\u7406\u89e3 Redis \u6570\u636e\u5e93\u7684\u57fa\u672c\u539f\u7406\u53ca\u5176\u5728\u7f13\u5b58\u548c\u6570\u636e\u5b58\u50a8\u4e2d\u7684\u4f5c\u7528\u3002 \u638c\u63e1\u5982\u4f55\u4f7f\u7528 Python \u7684 redis \u5e93\u8fdb\u884c\u6570\u636e\u5b58\u50a8\u548c\u67e5\u8be2\u3002 \u5b66\u4f1a\u5c06 Redis \u5ba2\u6237\u7aef\u96c6\u6210\u5230\u5de5\u7a0b\u5316\u4ee3\u7801\u4e2d\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#redis_1","text":"Redis\uff08Remote Dictionary Server\uff09\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684\u952e\u503c\u5bf9\u6570\u636e\u5e93\uff0c\u5e38\u7528\u4e8e\u7f13\u5b58\u3001\u4f1a\u8bdd\u7ba1\u7406\u7b49\u573a\u666f\u3002\u5b83\u652f\u6301\u591a\u79cd\u6570\u636e\u7ed3\u6784\uff08\u5982\u5b57\u7b26\u4e32\u3001\u54c8\u5e0c\u3001\u5217\u8868\u7b49\uff09\uff0c\u5e76\u63d0\u4f9b\u5feb\u901f\u7684\u5185\u5b58\u64cd\u4f5c\u3002","title":"Redis \u6570\u636e\u5e93\u6982\u8ff0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#redis_2","text":"\u9ad8\u6027\u80fd \uff1a\u6570\u636e\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u8bfb\u5199\u901f\u5ea6\u6781\u5feb\u3002 \u6301\u4e45\u5316 \uff1a\u652f\u6301 RDB \u548c AOF \u4e24\u79cd\u6301\u4e45\u5316\u65b9\u5f0f\u3002 \u7075\u6d3b\u6027 \uff1a\u652f\u6301\u591a\u79cd\u6570\u636e\u7c7b\u578b\u548c\u4e30\u5bcc\u547d\u4ee4\u3002 \u7b80\u5355\u6613\u7528 \uff1a\u63d0\u4f9b\u76f4\u89c2\u7684 API\uff0c\u6613\u4e8e\u96c6\u6210\u3002","title":"Redis \u7684\u6838\u5fc3\u7279\u6027"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#_2","text":"\u7f13\u5b58\u67e5\u8be2\u7ed3\u679c\u4ee5\u51cf\u5c11\u6570\u636e\u5e93\u538b\u529b\u3002 \u5b58\u50a8\u7528\u6237\u4f1a\u8bdd\u4fe1\u606f\u3002 \u5b9e\u73b0\u6392\u884c\u699c\u6216\u8ba1\u6570\u5668\u529f\u80fd\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#_3","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#_4","text":"redis_lesson/ \u251c\u2500\u2500 redis_client.py # Redis \u5ba2\u6237\u7aef\u6a21\u5757 \u251c\u2500\u2500 base.py # \u914d\u7f6e\u6587\u4ef6\u548c\u65e5\u5fd7\u6a21\u5757 \u251c\u2500\u2500 main.py # \u4e3b\u7a0b\u5e8f\u5165\u53e3 \u2514\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6","title":"\u6574\u4f53\u7ed3\u6784"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#redis-redis_clientpy","text":"import redis import json from base import Config , logger class RedisClient : def __init__ ( self ): self . logger = logger try : self . client = redis . StrictRedis ( host = Config () . REDIS_HOST , port = Config () . REDIS_PORT , password = Config () . REDIS_PASSWORD , db = Config () . REDIS_DB , decode_responses = True ) self . logger . info ( \"Redis \u8fde\u63a5\u6210\u529f\" ) except redis . RedisError as e : self . logger . error ( f \"Redis \u8fde\u63a5\u5931\u8d25: { e } \" ) raise def set_data ( self , key , value ): try : self . client . set ( key , json . dumps ( value )) self . logger . info ( f \"\u5b58\u50a8\u6570\u636e\u5230 Redis: { key } \" ) except redis . RedisError as e : self . logger . error ( f \"Redis \u5b58\u50a8\u5931\u8d25: { e } \" ) def get_data ( self , key ): try : data = self . client . get ( key ) return json . loads ( data ) if data else None except redis . RedisError as e : self . logger . error ( f \"Redis \u83b7\u53d6\u5931\u8d25: { e } \" ) return None def get_answer ( self , query ): try : answer = self . client . get ( f \"answer: { query } \" ) if answer : self . logger . info ( f \"\u4ece Redis \u83b7\u53d6\u7b54\u6848: { query } \" ) return answer return None except redis . RedisError as e : self . logger . error ( f \"Redis \u67e5\u8be2\u5931\u8d25: { e } \" ) return None","title":"Redis \u5ba2\u6237\u7aef\u6a21\u5757 (redis_client.py)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#mainpy","text":"from redis_client import RedisClient import logging # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) logger = logging . getLogger ( __name__ ) def main (): # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef redis_client = RedisClient () # \u793a\u4f8b\u6570\u636e key = \"user:1\" value = { \"name\" : \"Alice\" , \"age\" : 25 } # \u5b58\u50a8\u6570\u636e redis_client . set_data ( key , value ) # \u83b7\u53d6\u6570\u636e result = redis_client . get_data ( key ) if result : logger . info ( f \"\u67e5\u8be2\u7ed3\u679c: { result } \" ) else : logger . info ( \"\u672a\u627e\u5230\u6570\u636e\" ) # \u793a\u4f8b\u67e5\u8be2\u7f13\u5b58 query = \"test_query\" answer = redis_client . get_answer ( query ) if answer : logger . info ( f \"\u7f13\u5b58\u7b54\u6848: { answer } \" ) else : logger . info ( \"\u672a\u627e\u5230\u7f13\u5b58\u7b54\u6848\" ) if __name__ == \"__main__\" : main ()","title":"\u4e3b\u7a0b\u5e8f (main.py)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#basepy","text":"import logging # \u914d\u7f6e\u65e5\u5fd7 logging . basicConfig ( level = logging . INFO , format = ' %(asctime)s - %(levelname)s - %(message)s ' ) logger = logging . getLogger ( __name__ ) class Config : REDIS_HOST = \"localhost\" REDIS_PORT = 6379 REDIS_PASSWORD = None REDIS_DB = 0","title":"\u914d\u7f6e\u6587\u4ef6 (base.py)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#requirementstxt","text":"redis","title":"\u4f9d\u8d56\u6587\u4ef6 (requirements.txt)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#_5","text":"\u8fd0\u884c main.py \uff0c\u5047\u8bbe Redis \u670d\u52a1\u5668\u8fd0\u884c\u5728\u672c\u5730\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a 2025-05-12 10:00:01,123 - INFO - Redis \u8fde\u63a5\u6210\u529f 2025-05-12 10:00:01,124 - INFO - \u5b58\u50a8\u6570\u636e\u5230 Redis: user:1 2025-05-12 10:00:01,125 - INFO - \u67e5\u8be2\u7ed3\u679c: {'name': 'Alice', 'age': 25} 2025-05-12 10:00:01,126 - INFO - \u672a\u627e\u5230\u7f13\u5b58\u7b54\u6848","title":"\u793a\u4f8b\u8fd0\u884c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#_6","text":"\u6570\u636e\u4ee5 JSON \u683c\u5f0f\u5b58\u50a8\uff0c\u9002\u5408\u590d\u6742\u7ed3\u6784\u3002 get_answer \u65b9\u6cd5\u7528\u4e8e\u67e5\u8be2\u7f13\u5b58\uff0c\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\u3002 \u5f02\u5e38\u5904\u7406\u786e\u4fdd\u4ee3\u7801\u9c81\u68d2\u6027\uff0c\u907f\u514d Redis \u8fde\u63a5\u6216\u64cd\u4f5c\u5931\u8d25\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002","title":"\u5206\u6790"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03.Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8.html#_7","text":"\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86 Redis \u6570\u636e\u5e93\u7684\u64cd\u4f5c\u539f\u7406\u548c\u5e94\u7528\uff1a \u539f\u7406 \uff1a\u9ad8\u6027\u80fd\u952e\u503c\u5bf9\u5b58\u50a8\uff0c\u9002\u5408\u7f13\u5b58\u548c\u5feb\u901f\u6570\u636e\u8bbf\u95ee\u3002 \u5e94\u7528 \uff1a\u901a\u8fc7 redis \u5e93\u5b9e\u73b0\u6570\u636e\u5b58\u50a8\u3001\u67e5\u8be2\u548c\u7f13\u5b58\u3002 \u4e0b\u4e00\u7ae0\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06 Redis \u4e0e\u5176\u4ed6\u7b97\u6cd5\uff08\u5982 BM25\uff09\u7ed3\u5408\uff0c\u63d0\u5347\u68c0\u7d22\u6548\u7387\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html","text":"\u57fa\u4e8eMySQL\u7684FQA\u95ee\u7b54\u7cfb\u7edf\u5b9e\u73b0 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3FQA\u95ee\u7b54\u7cfb\u7edf\u7684\u6574\u4f53\u6d41\u7a0b\u3002 \u638c\u63e1\u5982\u4f55\u6574\u5408MySQL\u3001Redis\u548cBM25\u7b97\u6cd5\u6784\u5efaQA\u95ee\u7b54\u7cfb\u7edf\u3002 1 FQA\u7cfb\u7edf\u6982\u8ff0 \u00b6 \u672c\u7cfb\u7edf\u4eceMySQL\u6570\u636e\u5e93\u68c0\u7d22\u95ee\u7b54\u5bf9\uff0c\u4f7f\u7528BM25\u7b97\u6cd5\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0c\u5e76\u901a\u8fc7Softmax\u5f52\u4e00\u5316\u5c06\u5f97\u5206\u8f6c\u6362\u4e3a\u6982\u7387\u503c\uff0c\u9608\u503c0.85\u5224\u65ad\u7b54\u6848\u53ef\u9760\u6027\u3002Redis\u4ec5\u7f13\u5b58\u9ad8\u53ef\u9760\u6027\u7ed3\u679c\uff08\u76f8\u4f3c\u5ea6>0.85\u4e14\u6709\u7b54\u6848\uff09\u3002\u82e5MySQL\u65e0\u53ef\u9760\u7b54\u6848\uff0c\u5219\u8c03\u7528RAG\u7cfb\u7edf\u68c0\u7d22\u3002 1.1 \u7cfb\u7edf\u6d41\u7a0b \u00b6 \u6570\u636e\u5b58\u50a8 \uff1aMySQL\u5b58\u50a8FQA\u9ad8\u9891\u95ee\u7b54\u5bf9\u6570\u636e\u3002 \u95ee\u9898\u68c0\u7d22 \uff1aBM25\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0cSoftmax\u5f52\u4e00\u5316\u540e\u5224\u65ad\u9608\u503c0.85\u3002 \u7f13\u5b58\u7ba1\u7406 \uff1aRedis\u4ec5\u5b58\u50a8\u76f8\u4f3c\u5ea6>0.85\u4e14\u6709\u7b54\u6848\u7684\u6570\u636e\u3002 \u7b54\u6848\u8fd4\u56de \uff1a \u82e5MySQL\u8fd4\u56de\u53ef\u9760\u7b54\u6848\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5426\u5219\uff0c\u8c03\u7528RAG\u7cfb\u7edf\u68c0\u7d22\u3002 1.2 \u9879\u76ee\u7ed3\u6784 \u00b6 integrated_qa_system/ \u251c\u2500\u2500 config.ini # \u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u542b\u6240\u6709\u6a21\u5757\u7684\u914d\u7f6e \u251c\u2500\u2500 base/ \u2502 \u251c\u2500\u2500 config.py # \u914d\u7f6e\u7ba1\u7406\uff0c\u52a0\u8f7d config.ini \u2502 \u251c\u2500\u2500 logger.py # \u65e5\u5fd7\u8bbe\u7f6e \u251c\u2500\u2500 mysql_qa/ \u2502 \u251c\u2500\u2500 data/ \u2502 \u2502 \u251c\u2500\u2500 JP\u5b66\u79d1\u77e5\u8bc6\u95ee\u7b54.csv # FQA\u6570\u636e\u96c6 \u2502 \u251c\u2500\u2500 db/ \u2502 \u2502 \u251c\u2500\u2500 mysql_client.py # MySQL \u6570\u636e\u5e93\u64cd\u4f5c \u2502 \u251c\u2500\u2500 cache/ \u2502 \u2502 \u251c\u2500\u2500 redis_client.py # Redis \u7f13\u5b58\u64cd\u4f5c \u2502 \u251c\u2500\u2500 retrieval/ \u2502 \u2502 \u251c\u2500\u2500 bm25_search.py # BM25 \u641c\u7d22 \u2502 \u251c\u2500\u2500 utils/ \u2502 \u2502 \u251c\u2500\u2500 preprocess.py # \u6587\u672c\u9884\u5904\u7406 \u2502 \u251c\u2500\u2500 main.py # MySQL \u7cfb\u7edf\u72ec\u7acb\u5165\u53e3\uff0c\u652f\u6301\u67e5\u8be2 \u251c\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6 \u2514\u2500\u2500 logs/ \u2514\u2500\u2500 app.log # \u65e5\u5fd7\u6587\u4ef6 2 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u914d\u7f6e\u6587\u4ef6 ( config.ini ) \u00b6 # MySQL \u914d\u7f6e [mysql] host = localhost user = root password = 123456 database = subjects_kg # Redis \u914d\u7f6e [redis] host = localhost port = 6379 password = 1234 db = 0 # \u65e5\u5fd7\u914d\u7f6e [logger] log_file = /path/to/your/logs/app.log 2.1 \u914d\u7f6e\u7ba1\u7406 \u00b6 \u529f\u80fd \u00b6 config.py \u6587\u4ef6\u5b9a\u4e49\u4e86 Config \u7c7b\uff0c\u7528\u4e8e\u96c6\u4e2d\u7ba1\u7406\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u914d\u7f6e\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u5305\u62ec\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u3001\u6a21\u578b\u9009\u62e9\u3001\u5206\u5757\u7b56\u7565\u3001API\u8bbe\u7f6e\u7b49\u3002\u901a\u8fc7\u96c6\u4e2d\u7ba1\u7406\u914d\u7f6e\uff0c\u7cfb\u7edf\u53ef\u4ee5\u65b9\u4fbf\u5730\u8c03\u6574\u53c2\u6570\u3001\u9002\u914d\u4e0d\u540c\u73af\u5883\uff0c\u5e76\u652f\u6301\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u7075\u6d3b\u914d\u7f6e\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # base/config.py # \u5bfc\u5165\u914d\u7f6e\u89e3\u6790\u5e93 import configparser # \u5bfc\u5165\u8def\u5f84\u64cd\u4f5c\u5e93 import os class Config : # \u521d\u59cb\u5316\u914d\u7f6e\uff0c\u52a0\u8f7d config.ini \u6587\u4ef6 def __init__ ( self , config_file = '../config.ini' ): # \u521b\u5efa\u914d\u7f6e\u89e3\u6790\u5668 self . config = configparser . ConfigParser () # \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6 self . config . read ( config_file ) # MySQL \u914d\u7f6e # MySQL \u4e3b\u673a\u5730\u5740 self . MYSQL_HOST = self . config . get ( 'mysql' , 'host' , fallback = 'localhost' ) # MySQL \u7528\u6237\u540d self . MYSQL_USER = self . config . get ( 'mysql' , 'user' , fallback = 'root' ) # MySQL \u5bc6\u7801 self . MYSQL_PASSWORD = self . config . get ( 'mysql' , 'password' , fallback = '123456' ) # MySQL \u6570\u636e\u5e93\u540d self . MYSQL_DATABASE = self . config . get ( 'mysql' , 'database' , fallback = 'subjects_kg' ) # Redis \u914d\u7f6e # Redis \u4e3b\u673a\u5730\u5740 self . REDIS_HOST = self . config . get ( 'redis' , 'host' , fallback = 'localhost' ) # Redis \u7aef\u53e3 self . REDIS_PORT = self . config . getint ( 'redis' , 'port' , fallback = 6379 ) # Redis \u5bc6\u7801 self . REDIS_PASSWORD = self . config . get ( 'redis' , 'password' , fallback = '1234' ) # Redis \u6570\u636e\u5e93\u7f16\u53f7 self . REDIS_DB = self . config . getint ( 'redis' , 'db' , fallback = 0 ) # \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 self . LOG_FILE = self . config . get ( 'logger' , 'log_file' , fallback = 'logs/app.log' ) if __name__ == '__main__' : conf = Config () print ( conf . CHILD_CHUNK_SIZE ) \u8bf4\u660e \u00b6 \u9ed8\u8ba4\u503c \uff1a\u6bcf\u4e2a\u53c2\u6570\u8bbe\u6709\u9ed8\u8ba4\u503c\uff0c\u786e\u4fdd\u672a\u914d\u7f6e\u73af\u5883\u53d8\u91cf\u65f6\u7cfb\u7edf\u4ecd\u53ef\u8fd0\u884c\u3002 \u53c2\u6570\u5206\u7c7b \uff1a\u6309\u529f\u80fd\u5206\u7c7b\uff08\u5982\u6570\u636e\u5e93\u3001\u6a21\u578b\u3001\u5206\u5757\u7b49\uff09\uff0c\u4fbf\u4e8e\u7ba1\u7406\u548c\u7ef4\u62a4\u3002 2.2 \u65e5\u5fd7\u8bb0\u5f55 \u00b6 \u529f\u80fd \u00b6 logger.py \u6587\u4ef6\u5b9a\u4e49\u4e86 setup_logging \u51fd\u6570\uff0c\u7528\u4e8e\u914d\u7f6e\u7cfb\u7edf\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002\u65e5\u5fd7\u8bb0\u5f55\u5668\u5c06\u8fd0\u884c\u4fe1\u606f\u3001\u8b66\u544a\u548c\u9519\u8bef\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u4fbf\u4e8e\u5f00\u53d1\u3001\u8c03\u8bd5\u548c\u8fd0\u7ef4\u4eba\u5458\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # base/logger.py # \u5bfc\u5165\u65e5\u5fd7\u5e93 import logging # \u5bfc\u5165\u8def\u5f84\u64cd\u4f5c\u5e93 import os # \u5bfc\u5165\u914d\u7f6e\u7c7b from config import Config def setup_logging ( log_file = Config () . LOG_FILE ): # \u521b\u5efa\u65e5\u5fd7\u76ee\u5f55 os . makedirs ( os . path . dirname ( log_file ), exist_ok = True ) # \u83b7\u53d6\u65e5\u5fd7\u5668 logger = logging . getLogger ( \"EduRAG\" ) # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b logger . setLevel ( logging . INFO ) # \u907f\u514d\u91cd\u590d\u6dfb\u52a0\u5904\u7406\u5668 if not logger . handlers : # \u521b\u5efa\u6587\u4ef6\u5904\u7406\u5668 file_handler = logging . FileHandler ( log_file , encoding = 'utf-8' ) # \u8bbe\u7f6e\u6587\u4ef6\u5904\u7406\u5668\u7ea7\u522b file_handler . setLevel ( logging . INFO ) # \u521b\u5efa\u63a7\u5236\u53f0\u5904\u7406\u5668 console_handler = logging . StreamHandler () # \u8bbe\u7f6e\u63a7\u5236\u53f0\u5904\u7406\u5668\u7ea7\u522b console_handler . setLevel ( logging . INFO ) # \u8bbe\u7f6e\u65e5\u5fd7\u683c\u5f0f formatter = logging . Formatter ( ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) # \u4e3a\u6587\u4ef6\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f file_handler . setFormatter ( formatter ) # \u4e3a\u63a7\u5236\u53f0\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f console_handler . setFormatter ( formatter ) # \u6dfb\u52a0\u6587\u4ef6\u5904\u7406\u5668 logger . addHandler ( file_handler ) # \u6dfb\u52a0\u63a7\u5236\u53f0\u5904\u7406\u5668 logger . addHandler ( console_handler ) # \u8fd4\u56de\u65e5\u5fd7\u5668 return logger # \u521d\u59cb\u5316\u65e5\u5fd7\u5668 logger = setup_logging () \u8bf4\u660e \u00b6 \u65e5\u5fd7\u7ea7\u522b \uff1a\u9ed8\u8ba4\u8bbe\u4e3a INFO \uff0c\u8bb0\u5f55\u5173\u952e\u8fd0\u884c\u4fe1\u606f\u3002 \u53cc\u91cd\u8f93\u51fa \uff1a\u540c\u65f6\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u4fbf\u4e8e\u5b9e\u65f6\u76d1\u63a7\u548c\u540e\u7eed\u5206\u6790\u3002 \u683c\u5f0f\u5316 \uff1a\u65e5\u5fd7\u5305\u542b\u65f6\u95f4\u6233\u3001\u540d\u79f0\u3001\u7ea7\u522b\u548c\u5185\u5bb9\uff0c\u4fbf\u4e8e\u95ee\u9898\u5b9a\u4f4d\u3002 2.3 MySQL\u64cd\u4f5c\u6a21\u5757 \u00b6 \u529f\u80fd \u00b6 mysql_client.py \u662f\u4e00\u4e2a\u7528\u4e8e\u4e0e MySQL \u4ea4\u4e92\u7684\u6a21\u5757\u3002\u6a21\u5757\u901a\u8fc7\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u652f\u6301\u521b\u5efa\u8868\u3001\u4ece CSV \u6587\u4ef6\u63d2\u5165\u6570\u636e\u3001\u67e5\u8be2\u95ee\u9898\u548c\u7b54\u6848\uff0c\u4ee5\u53ca\u5b89\u5168\u5173\u95ed\u8fde\u63a5\u3002\u6240\u6709\u64cd\u4f5c\u5747\u901a\u8fc7\u65e5\u5fd7\u8bb0\u5f55\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # db/mysql_client.py # \u5bfc\u5165 MySQL \u8fde\u63a5\u5e93 import pymysql # \u5bfc\u5165pandas import pandas as pd # \u5bfc\u5165\u914d\u7f6e\u548c\u65e5\u5fd7 from base import Config , logger class MySQLClient : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7 self . logger = logger try : # \u8fde\u63a5 MySQL \u6570\u636e\u5e93 self . connection = pymysql . connect ( host = Config () . MYSQL_HOST , user = Config () . MYSQL_USER , password = Config () . MYSQL_PASSWORD , database = Config () . MYSQL_DATABASE ) # \u521b\u5efa\u6e38\u6807 self . cursor = self . connection . cursor () # \u8bb0\u5f55\u8fde\u63a5\u6210\u529f self . logger . info ( \"MySQL \u8fde\u63a5\u6210\u529f\" ) except pymysql . MySQLError as e : # \u8bb0\u5f55\u8fde\u63a5\u5931\u8d25 self . logger . error ( f \"MySQL \u8fde\u63a5\u5931\u8d25: { e } \" ) raise def create_table ( self ): create_table_query = ''' CREATE TABLE IF NOT EXISTS jpkb ( id INT AUTO_INCREMENT PRIMARY KEY, subject_name VARCHAR(20), question VARCHAR(1000), answer VARCHAR(1000)) ''' try : self . cursor . execute ( create_table_query ) self . connection . commit () self . logger . info ( \"\u8868\u521b\u5efa\u6210\u529f\" ) except pymysql . MySQLError as e : self . logger . error ( f \"\u8868\u521b\u5efa\u5931\u8d25: { e } \" ) raise def insert_data ( self , csv_path ): try : data = pd . read_csv ( csv_path ) for _ , row in data . iterrows (): insert_query = \"INSERT INTO jpkb (subject_name, question, answer) VALUES ( %s , %s , %s )\" self . cursor . execute ( insert_query , ( row [ '\u5b66\u79d1\u540d\u79f0' ], row [ '\u95ee\u9898' ], row [ '\u7b54\u6848' ])) self . connection . commit () self . logger . info ( \"\u6570\u636e\u63d2\u5165\u6210\u529f\" ) except Exception as e : self . logger . error ( f \"\u6570\u636e\u63d2\u5165\u5931\u8d25: { e } \" ) self . connection . rollback () raise def fetch_questions ( self ): # \u83b7\u53d6\u6240\u6709\u95ee\u9898 try : # \u6267\u884c\u67e5\u8be2 self . cursor . execute ( \"SELECT question FROM jpkb\" ) # \u83b7\u53d6\u7ed3\u679c results = self . cursor . fetchall () # \u8bb0\u5f55\u83b7\u53d6\u6210\u529f self . logger . info ( \"\u6210\u529f\u83b7\u53d6\u95ee\u9898\" ) # \u8fd4\u56de\u7ed3\u679c return results except pymysql . MySQLError as e : # \u8bb0\u5f55\u67e5\u8be2\u5931\u8d25 self . logger . error ( f \"\u67e5\u8be2\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u7a7a\u5217\u8868 return [] def fetch_answer ( self , question ): # \u83b7\u53d6\u6307\u5b9a\u95ee\u9898\u7684\u7b54\u6848 try : # \u6267\u884c\u67e5\u8be2 self . cursor . execute ( \"SELECT answer FROM jpkb WHERE question= %s \" , ( question ,)) # \u83b7\u53d6\u7ed3\u679c result = self . cursor . fetchone () # \u8fd4\u56de\u7b54\u6848\u6216 None return result [ 0 ] if result else None except pymysql . MySQLError as e : # \u8bb0\u5f55\u7b54\u6848\u83b7\u53d6\u5931\u8d25 self . logger . error ( f \"\u7b54\u6848\u83b7\u53d6\u5931\u8d25: { e } \" ) # \u8fd4\u56de None return None def close ( self ): # \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5 try : # \u5173\u95ed\u8fde\u63a5 self . connection . close () # \u8bb0\u5f55\u5173\u95ed\u6210\u529f self . logger . info ( \"MySQL \u8fde\u63a5\u5df2\u5173\u95ed\" ) except pymysql . MySQLError as e : # \u8bb0\u5f55\u5173\u95ed\u5931\u8d25 self . logger . error ( f \"\u5173\u95ed\u8fde\u63a5\u5931\u8d25: { e } \" ) if __name__ == '__main__' : mysql_client = MySQLClient () mysql_client . create_table () mysql_client . insert_data ( '../data/JP\u5b66\u79d1\u77e5\u8bc6\u95ee\u7b54.csv' ) \u8bf4\u660e \u00b6 \u6570\u636e\u5e93\u8fde\u63a5 \uff1a\u901a\u8fc7 config.ini \u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6 MySQL \u53c2\u6570\uff0c\u4f7f\u7528 pymysql \u5efa\u7acb\u8fde\u63a5\u3002 \u8868\u7ba1\u7406 \uff1a\u521b\u5efa jpkb \u8868\uff0c\u5305\u542b\u5b57\u6bb5 id\uff08\u81ea\u589e\u4e3b\u952e\uff09\u3001subject_name\uff08\u5b66\u79d1\u540d\u79f0\uff09\u3001question\uff08\u95ee\u9898\uff09\u3001answer\uff08\u7b54\u6848\uff09\uff0c\u4f7f\u7528 IF NOT EXISTS \u907f\u514d\u91cd\u590d\u521b\u5efa\u3002 \u5f02\u5e38\u5904\u7406 \uff1a\u6bcf\u4e2a\u65b9\u6cd5\u5747\u6355\u83b7\u5f02\u5e38\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u6839\u636e\u9700\u8981\u56de\u6eda\u4e8b\u52a1\u6216\u629b\u51fa\u5f02\u5e38\u3002 2.4 Redis \u7f13\u5b58\u64cd\u4f5c\u6a21\u5757 \u00b6 \u529f\u80fd \u00b6 redis_client.py \u8be5\u6a21\u5757\u7528\u4e8e\u4e0e Redis \u6570\u636e\u5e93\u4ea4\u4e92\u3002\u6a21\u5757\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u8fde\u63a5 Redis\uff0c\u652f\u6301\u952e\u503c\u5bf9\u5b58\u50a8\u4e0e\u67e5\u8be2\uff08\u4f7f\u7528 JSON \u5e8f\u5217\u5316\uff09\u3001\u7b54\u6848\u7f13\u5b58\u67e5\u8be2\uff0c\u5e76\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # cache/redis_client.py # \u5bfc\u5165 Redis \u5ba2\u6237\u7aef import redis # \u5bfc\u5165 JSON \u5904\u7406 import json # \u5bfc\u5165\u914d\u7f6e\u548c\u65e5\u5fd7 from base import Config , logger class RedisClient : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7 self . logger = logger try : # \u8fde\u63a5 Redis self . client = redis . StrictRedis ( host = Config () . REDIS_HOST , port = Config () . REDIS_PORT , password = Config () . REDIS_PASSWORD , db = Config () . REDIS_DB , decode_responses = True ) # \u8bb0\u5f55\u8fde\u63a5\u6210\u529f self . logger . info ( \"Redis \u8fde\u63a5\u6210\u529f\" ) except redis . RedisError as e : # \u8bb0\u5f55\u8fde\u63a5\u5931\u8d25 self . logger . error ( f \"Redis \u8fde\u63a5\u5931\u8d25: { e } \" ) raise def set_data ( self , key , value ): # \u5b58\u50a8\u6570\u636e\u5230 Redis try : # \u5b58\u50a8 JSON \u6570\u636e self . client . set ( key , json . dumps ( value )) # \u8bb0\u5f55\u5b58\u50a8\u6210\u529f self . logger . info ( f \"\u5b58\u50a8\u6570\u636e\u5230 Redis: { key } \" ) except redis . RedisError as e : # \u8bb0\u5f55\u5b58\u50a8\u5931\u8d25 self . logger . error ( f \"Redis \u5b58\u50a8\u5931\u8d25: { e } \" ) def get_data ( self , key ): # \u4ece Redis \u83b7\u53d6\u6570\u636e try : # \u83b7\u53d6\u6570\u636e data = self . client . get ( key ) # \u8fd4\u56de\u89e3\u6790\u540e\u7684 JSON \u6570\u636e\u6216 None return json . loads ( data ) if data else None except redis . RedisError as e : # \u8bb0\u5f55\u83b7\u53d6\u5931\u8d25 self . logger . error ( f \"Redis \u83b7\u53d6\u5931\u8d25: { e } \" ) # \u8fd4\u56de None return None def get_answer ( self , query ): # \u83b7\u53d6\u67e5\u8be2\u7684\u7f13\u5b58\u7b54\u6848 try : # \u4ece Redis \u83b7\u53d6\u7b54\u6848 answer = self . client . get ( f \"answer: { query } \" ) if answer : # \u8bb0\u5f55\u83b7\u53d6\u6210\u529f self . logger . info ( f \"\u4ece Redis \u83b7\u53d6\u7b54\u6848: { query } \" ) # \u8fd4\u56de\u7b54\u6848 return answer # \u8fd4\u56de None return None except redis . RedisError as e : # \u8bb0\u5f55\u67e5\u8be2\u5931\u8d25 self . logger . error ( f \"Redis \u67e5\u8be2\u5931\u8d25: { e } \" ) # \u8fd4\u56de None return None if __name__ == '__main__' : redcli = RedisClient () print ( redcli ) \u8bf4\u660e \u00b6 Redis \u8fde\u63a5 \uff1a\u901a\u8fc7 config.ini \u8bfb\u53d6 Redis \u914d\u7f6e\uff0c\u4f7f\u7528 redis.StrictRedis \u5efa\u7acb\u8fde\u63a5\u3002 \u6570\u636e\u64cd\u4f5c \uff1a set_data\uff1a\u5c06\u952e\u503c\u5bf9\uff08\u503c\u5e8f\u5217\u5316\u4e3a JSON\uff09\u5b58\u50a8\u5230 Redis\u3002 get_data\uff1a\u6839\u636e\u952e\u83b7\u53d6\u503c\u5e76\u53cd\u5e8f\u5217\u5316 JSON\u3002 get_answer\uff1a\u67e5\u8be2\u4ee5 answer:{query} \u683c\u5f0f\u5b58\u50a8\u7684\u7b54\u6848\u7f13\u5b58\u3002 2.5 \u6587\u672c\u9884\u5904\u7406\u6a21\u5757 \u00b6 \u529f\u80fd \u00b6 preprocess.py \u662f\u4e00\u4e2a\u57fa\u4e8e jieba \u5206\u8bcd\u5e93\u5b9e\u73b0\u6587\u672c\u9884\u5904\u7406\u7684\u6a21\u5757\u3002\u8be5\u6a21\u5757\u5c06\u8f93\u5165\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u5e76\u8fdb\u884c\u5206\u8bcd\uff0c\u8fd4\u56de\u5206\u8bcd\u7ed3\u679c\uff0c\u652f\u6301\u65e5\u5fd7\u8bb0\u5f55\u4ee5\u76d1\u63a7\u5904\u7406\u72b6\u6001\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # utils/preprocess.py # \u5bfc\u5165\u5206\u8bcd\u5e93 import jieba # \u5bfc\u5165\u65e5\u5fd7 from base import logger def preprocess_text ( text ): # \u9884\u5904\u7406\u6587\u672c logger . info ( \"\u5f00\u59cb\u9884\u5904\u7406\u6587\u672c\" ) try : # \u5206\u8bcd\u5e76\u8f6c\u6362\u4e3a\u5c0f\u5199 return jieba . lcut ( text . lower ()) except AttributeError as e : # \u8bb0\u5f55\u9884\u5904\u7406\u5931\u8d25 logger . error ( f \"\u6587\u672c\u9884\u5904\u7406\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u7a7a\u5217\u8868 return [] \u8bf4\u660e \u00b6 \u6587\u672c\u5904\u7406 \uff1a\u4f7f\u7528 jieba.lcut \u5bf9\u8f93\u5165\u6587\u672c\u8fdb\u884c\u4e2d\u6587\u5206\u8bcd\uff0c\u5e76\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u4ee5\u89c4\u8303\u5316\u3002 2.6 BM25+Softmax\u68c0\u7d22\u6a21\u5757 \u00b6 \u529f\u80fd \u00b6 bm25_search.py \u662f\u4e00\u4e2a\u57fa\u4e8e BM25 \u7b97\u6cd5\u548c Softmax \u5f52\u4e00\u5316\u7684\u6587\u672c\u68c0\u7d22\u6a21\u5757\uff0c\u7528\u4e8e\u4ece\u95ee\u9898\u5e93\u4e2d\u68c0\u7d22\u4e0e\u67e5\u8be2\u6700\u5339\u914d\u7684\u7b54\u6848\u3002\u6a21\u5757\u7ed3\u5408 Redis \u7f13\u5b58\u548c MySQL \u6570\u636e\u5e93\uff0c\u652f\u6301\u95ee\u9898\u52a0\u8f7d\u3001\u5206\u8bcd\u3001BM25 \u8bc4\u5206\u3001Softmax \u5f52\u4e00\u5316\uff0c\u5e76\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7\u3002 # retrieval/bm25_search.py # \u5bfc\u5165 BM25 \u7b97\u6cd5 from rank_bm25 import BM25Okapi # \u5bfc\u5165\u6570\u503c\u8ba1\u7b97\u5e93 import numpy as np # \u5bfc\u5165\u6587\u672c\u9884\u5904\u7406 from utils.preprocess import preprocess_text # \u5bfc\u5165\u65e5\u5fd7 from base import logger class BM25Search : def __init__ ( self , redis_client , mysql_client ): # \u521d\u59cb\u5316\u65e5\u5fd7 self . logger = logger # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef self . redis_client = redis_client # \u521d\u59cb\u5316 MySQL \u5ba2\u6237\u7aef self . mysql_client = mysql_client # \u521d\u59cb\u5316 BM25 \u6a21\u578b self . bm25 = None # \u521d\u59cb\u5316\u95ee\u9898\u5217\u8868 self . questions = None # \u521d\u59cb\u5316\u539f\u59cb\u95ee\u9898 self . original_questions = None # \u52a0\u8f7d\u6570\u636e self . _load_data () def _load_data ( self ): # \u52a0\u8f7d\u6570\u636e original_key = \"qa_original_questions\" tokenized_key = \"qa_tokenized_questions\" # \u4ece Redis \u83b7\u53d6\u539f\u59cb\u95ee\u9898 self . original_questions = self . redis_client . get_data ( original_key ) # \u4ece Redis \u83b7\u53d6\u5206\u8bcd\u95ee\u9898 tokenized_questions = self . redis_client . get_data ( tokenized_key ) # \u5982\u679c Redis \u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u4ece MySQL \u52a0\u8f7d if not self . original_questions or not tokenized_questions : # \u4ece MySQL \u83b7\u53d6\u95ee\u9898 self . original_questions = self . mysql_client . fetch_questions () if not self . original_questions : # \u8bb0\u5f55\u65e0\u95ee\u9898\u8b66\u544a self . logger . warning ( \"\u672a\u52a0\u8f7d\u5230\u95ee\u9898\" ) return # \u5206\u8bcd\u95ee\u9898 tokenized_questions = [ preprocess_text ( q [ 0 ]) for q in self . original_questions ] # \u5b58\u50a8\u539f\u59cb\u95ee\u9898\u5230 Redis self . redis_client . set_data ( original_key , [( q [ 0 ]) for q in self . original_questions ]) # \u5b58\u50a8\u5206\u8bcd\u95ee\u9898\u5230 Redis self . redis_client . set_data ( tokenized_key , tokenized_questions ) # \u8bbe\u7f6e\u95ee\u9898\u5217\u8868 self . questions = tokenized_questions # \u521d\u59cb\u5316 BM25 \u6a21\u578b self . bm25 = BM25Okapi ( self . questions ) # \u8bb0\u5f55 BM25 \u521d\u59cb\u5316\u6210\u529f self . logger . info ( \"BM25 \u6a21\u578b\u521d\u59cb\u5316\u5b8c\u6210\" ) def _softmax ( self , scores ): # \u8ba1\u7b97 Softmax \u5206\u6570 exp_scores = np . exp ( scores - np . max ( scores )) # \u8fd4\u56de\u5f52\u4e00\u5316\u5206\u6570 return exp_scores / exp_scores . sum () def search ( self , query , threshold = 0.85 ): # \u641c\u7d22\u67e5\u8be2 if not query or not isinstance ( query , str ): # \u8bb0\u5f55\u65e0\u6548\u67e5\u8be2 self . logger . error ( \"\u65e0\u6548\u67e5\u8be2\" ) # \u8fd4\u56de None \u548c False return None , False # \u68c0\u67e5 Redis \u7f13\u5b58 cached_answer = self . redis_client . get_answer ( query ) if cached_answer : # \u8fd4\u56de\u7f13\u5b58\u7b54\u6848 return cached_answer , False try : # \u5206\u8bcd\u67e5\u8be2 query_tokens = preprocess_text ( query ) # \u8ba1\u7b97 BM25 \u5206\u6570 scores = self . bm25 . get_scores ( query_tokens ) # \u8ba1\u7b97 Softmax \u5206\u6570 softmax_scores = self . _softmax ( scores ) # \u83b7\u53d6\u6700\u9ad8\u5206\u7d22\u5f15 best_idx = softmax_scores . argmax () # \u83b7\u53d6\u6700\u9ad8\u5206 best_score = softmax_scores [ best_idx ] # \u68c0\u67e5\u662f\u5426\u8d85\u8fc7\u9608\u503c if best_score >= threshold : # \u83b7\u53d6\u539f\u59cb\u95ee\u9898 original_question = self . original_questions [ best_idx ] # \u83b7\u53d6\u7b54\u6848 answer = self . mysql_client . fetch_answer ( original_question ) if answer : # \u7f13\u5b58\u7b54\u6848 self . redis_client . set_data ( f \"answer: { query } \" , answer ) # \u8bb0\u5f55\u641c\u7d22\u6210\u529f self . logger . info ( f \"\u641c\u7d22\u6210\u529f\uff0cSoftmax \u76f8\u4f3c\u5ea6: { best_score : .3f } \" ) # \u8fd4\u56de\u7b54\u6848\u548c False return answer , False # \u8bb0\u5f55\u65e0\u53ef\u9760\u7b54\u6848 self . logger . info ( f \"\u672a\u627e\u5230\u53ef\u9760\u7b54\u6848\uff0c\u6700\u9ad8 Softmax \u76f8\u4f3c\u5ea6: { best_score : .3f } \" ) # \u8fd4\u56de None \u548c True return None , True except Exception as e : # \u8bb0\u5f55\u641c\u7d22\u5931\u8d25 self . logger . error ( f \"\u641c\u7d22\u5931\u8d25: { e } \" ) # \u8fd4\u56de None \u548c True return None , True \u8bf4\u660e \u00b6 \u6570\u636e\u52a0\u8f7d \uff1a\u4f18\u5148\u4ece Redis \u83b7\u53d6\u95ee\u9898\u548c\u5206\u8bcd\u6570\u636e\uff0c\u82e5\u65e0\u5219\u4ece MySQL \u52a0\u8f7d\u5e76\u5206\u8bcd\u540e\u7f13\u5b58\u5230 Redis\u3002 BM25 \u68c0\u7d22 \uff1a\u4f7f\u7528 BM25Okapi \u8ba1\u7b97\u67e5\u8be2\u4e0e\u95ee\u9898\u5e93\u7684\u76f8\u4f3c\u5ea6\uff0c\u7ed3\u5408 Softmax \u5f52\u4e00\u5316\u8bc4\u5206\u3002 \u7b54\u6848\u67e5\u8be2 \uff1a\u901a\u8fc7 Redis \u7f13\u5b58\u7b54\u6848\uff0c\u82e5\u65e0\u7f13\u5b58\u5219\u4ece MySQL \u83b7\u53d6\u5e76\u7f13\u5b58\uff0c\u9608\u503c\uff08\u9ed8\u8ba4 0.85\uff09\u63a7\u5236\u7b54\u6848\u53ef\u9760\u6027\u3002 3 \u4e3b\u7a0b\u5e8f ( main.py ) \u00b6 # \u5bfc\u5165 MySQL \u5ba2\u6237\u7aef from db.mysql_client import MySQLClient # \u5bfc\u5165 Redis \u5ba2\u6237\u7aef from cache.redis_client import RedisClient # \u5bfc\u5165 BM25 \u641c\u7d22 from retrieval.bm25_search import BM25Search # \u5bfc\u5165\u65e5\u5fd7 from base import logger # \u5bfc\u5165\u65f6\u95f4\u5e93 import time class MySQLQASystem : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7 self . logger = logger # \u521d\u59cb\u5316 MySQL \u5ba2\u6237\u7aef self . mysql_client = MySQLClient () # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef self . redis_client = RedisClient () # \u521d\u59cb\u5316 BM25 \u641c\u7d22 self . bm25_search = BM25Search ( self . redis_client , self . mysql_client ) def query ( self , query ): # \u67e5\u8be2 MySQL \u7cfb\u7edf start_time = time . time () # \u8bb0\u5f55\u67e5\u8be2\u4fe1\u606f self . logger . info ( f \"\u5904\u7406\u67e5\u8be2: ' { query } '\" ) # \u6267\u884c BM25 \u641c\u7d22 answer , _ = self . bm25_search . search ( query , threshold = 0.85 ) if answer : # \u8bb0\u5f55 MySQL \u7b54\u6848 self . logger . info ( f \"MySQL \u7b54\u6848: { answer } \" ) else : # \u8bb0\u5f55\u65e0\u7b54\u6848 self . logger . info ( \"SQL\u4e2d\u672a\u627e\u5230\u7b54\u6848, \u9700\u8981\u8c03\u7528RAG\u7cfb\u7edf\" ) # \u8bbe\u7f6e\u9ed8\u8ba4\u7b54\u6848 answer = \"SQL\u672a\u627e\u5230\u7b54\u6848\" # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de\u7b54\u6848 return answer def main (): # \u521d\u59cb\u5316 MySQL \u7cfb\u7edf mysql_system = MySQLQASystem () try : # \u6253\u5370\u6b22\u8fce\u4fe1\u606f print ( \" \\n \u6b22\u8fce\u4f7f\u7528 MySQL \u95ee\u7b54\u7cfb\u7edf\uff01\" ) print ( \"\u8f93\u5165\u67e5\u8be2\u8fdb\u884c\u95ee\u7b54\uff0c\u8f93\u5165 'exit' \u9000\u51fa\u3002\" ) while True : # \u83b7\u53d6\u7528\u6237\u8f93\u5165 query = input ( \" \\n \u8f93\u5165\u67e5\u8be2: \" ) . strip () if query . lower () == \"exit\" : # \u8bb0\u5f55\u9000\u51fa\u65e5\u5fd7 logger . info ( \"\u9000\u51fa MySQL \u7cfb\u7edf\" ) # \u6253\u5370\u9000\u51fa\u4fe1\u606f print ( \"\u518d\u89c1\uff01\" ) break # \u6267\u884c\u67e5\u8be2 answer = mysql_system . query ( query ) # \u6253\u5370\u7b54\u6848 print ( f \" \\n \u7b54\u6848: { answer } \" ) except Exception as e : # \u8bb0\u5f55\u7cfb\u7edf\u9519\u8bef logger . error ( f \"\u7cfb\u7edf\u9519\u8bef: { e } \" ) # \u6253\u5370\u9519\u8bef\u4fe1\u606f print ( f \"\u53d1\u751f\u9519\u8bef: { e } \" ) finally : # \u5173\u95ed MySQL \u8fde\u63a5 mysql_system . mysql_client . close () if __name__ == \"__main__\" : # \u8fd0\u884c\u4e3b\u7a0b\u5e8f main () \u793a\u4f8b\u8fd0\u884c\u7ed3\u679c \u00b6 \u5047\u8bbeMySQL\u4e2d\u6709\u6570\u636e\uff1a - \u95ee\u9898\uff1a\"\u7279\u6b8a\u7b26\u53f7\u5982\u4f55\u5207\u5272\"\uff0c\u7b54\u6848\uff1a\"\u4f7f\u7528split\u51fd\u6570\" - \u95ee\u9898\uff1a\"\u5982\u4f55\u5904\u7406\u5b57\u7b26\u4e32\"\uff0c\u7b54\u6848\uff1a\"\u4f7f\u7528\u5b57\u7b26\u4e32\u65b9\u6cd5\" \u67e5\u8be2\uff1a\"\u7279\u6b8a\u7b26\u53f7\u7684\u5207\u5272\" 2025-04-01 10:00:00,123 - INFO - MySQL\u8fde\u63a5\u6210\u529f 2025-04-01 10:00:00,125 - INFO - Redis\u8fde\u63a5\u6210\u529f 2025-04-01 10:00:00,126 - INFO - BM25\u6a21\u578b\u521d\u59cb\u5316\u5b8c\u6210 \u6b22\u8fce\u4f7f\u7528 MySQL \u95ee\u7b54\u7cfb\u7edf\uff01 \u8f93\u5165\u67e5\u8be2\u8fdb\u884c\u95ee\u7b54\uff0c\u8f93\u5165 'exit' \u9000\u51fa\u3002 2025-04-01 10:00:00,127 - INFO - \u68c0\u7d22\u6210\u529f\uff0cSoftmax\u76f8\u4f3c\u5ea6: 0.892 2025-04-01 10:00:00,128 - INFO - \u6570\u636e\u5b58\u5165Redis: answer:\u7279\u6b8a\u7b26\u53f7\u7684\u5207\u5272 2025-04-01 10:00:00,129 - INFO - MySQL\u7b54\u6848: \u4f7f\u7528split\u51fd\u6570 2025-04-01 10:00:00,130 - INFO - MySQL\u8fde\u63a5\u5df2\u5173\u95ed \u603b\u7ed3 \u00b6 \u672c\u7ae0\u6574\u5408Mysql\u548cRedis\u529f\u80fd\uff0c\u5b9e\u73b0\u4e86\u57fa\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\u95ee\u7b54\u7684QA\u7cfb\u7edf\uff1a \u6d41\u7a0b \uff1aMySQL\u5b58\u50a8\u6570\u636e\uff0cRedis\u7f13\u5b58\u4f18\u5316\uff0cTF-IDF\u548c\u4f59\u5f26\u76f8\u4f3c\u5ea6\u5339\u914d\u95ee\u9898\u3002 \u5de5\u7a0b\u5316 \uff1a\u6a21\u5757\u5316\u8bbe\u8ba1\u3001\u914d\u7f6e\u6587\u4ef6\u3001\u65e5\u5fd7\u8bb0\u5f55\u3002","title":"3.4 \u57fa\u4e8eMysql\u6570\u636e\u5e93\u5b9e\u73b0\u95ee\u7b54\u7cfb\u7edf"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#mysqlfqa","text":"","title":"\u57fa\u4e8eMySQL\u7684FQA\u95ee\u7b54\u7cfb\u7edf\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_1","text":"\u7406\u89e3FQA\u95ee\u7b54\u7cfb\u7edf\u7684\u6574\u4f53\u6d41\u7a0b\u3002 \u638c\u63e1\u5982\u4f55\u6574\u5408MySQL\u3001Redis\u548cBM25\u7b97\u6cd5\u6784\u5efaQA\u95ee\u7b54\u7cfb\u7edf\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#1-fqa","text":"\u672c\u7cfb\u7edf\u4eceMySQL\u6570\u636e\u5e93\u68c0\u7d22\u95ee\u7b54\u5bf9\uff0c\u4f7f\u7528BM25\u7b97\u6cd5\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0c\u5e76\u901a\u8fc7Softmax\u5f52\u4e00\u5316\u5c06\u5f97\u5206\u8f6c\u6362\u4e3a\u6982\u7387\u503c\uff0c\u9608\u503c0.85\u5224\u65ad\u7b54\u6848\u53ef\u9760\u6027\u3002Redis\u4ec5\u7f13\u5b58\u9ad8\u53ef\u9760\u6027\u7ed3\u679c\uff08\u76f8\u4f3c\u5ea6>0.85\u4e14\u6709\u7b54\u6848\uff09\u3002\u82e5MySQL\u65e0\u53ef\u9760\u7b54\u6848\uff0c\u5219\u8c03\u7528RAG\u7cfb\u7edf\u68c0\u7d22\u3002","title":"1 FQA\u7cfb\u7edf\u6982\u8ff0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#11","text":"\u6570\u636e\u5b58\u50a8 \uff1aMySQL\u5b58\u50a8FQA\u9ad8\u9891\u95ee\u7b54\u5bf9\u6570\u636e\u3002 \u95ee\u9898\u68c0\u7d22 \uff1aBM25\u8ba1\u7b97\u76f8\u4f3c\u5ea6\uff0cSoftmax\u5f52\u4e00\u5316\u540e\u5224\u65ad\u9608\u503c0.85\u3002 \u7f13\u5b58\u7ba1\u7406 \uff1aRedis\u4ec5\u5b58\u50a8\u76f8\u4f3c\u5ea6>0.85\u4e14\u6709\u7b54\u6848\u7684\u6570\u636e\u3002 \u7b54\u6848\u8fd4\u56de \uff1a \u82e5MySQL\u8fd4\u56de\u53ef\u9760\u7b54\u6848\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5426\u5219\uff0c\u8c03\u7528RAG\u7cfb\u7edf\u68c0\u7d22\u3002","title":"1.1 \u7cfb\u7edf\u6d41\u7a0b"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#12","text":"integrated_qa_system/ \u251c\u2500\u2500 config.ini # \u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u542b\u6240\u6709\u6a21\u5757\u7684\u914d\u7f6e \u251c\u2500\u2500 base/ \u2502 \u251c\u2500\u2500 config.py # \u914d\u7f6e\u7ba1\u7406\uff0c\u52a0\u8f7d config.ini \u2502 \u251c\u2500\u2500 logger.py # \u65e5\u5fd7\u8bbe\u7f6e \u251c\u2500\u2500 mysql_qa/ \u2502 \u251c\u2500\u2500 data/ \u2502 \u2502 \u251c\u2500\u2500 JP\u5b66\u79d1\u77e5\u8bc6\u95ee\u7b54.csv # FQA\u6570\u636e\u96c6 \u2502 \u251c\u2500\u2500 db/ \u2502 \u2502 \u251c\u2500\u2500 mysql_client.py # MySQL \u6570\u636e\u5e93\u64cd\u4f5c \u2502 \u251c\u2500\u2500 cache/ \u2502 \u2502 \u251c\u2500\u2500 redis_client.py # Redis \u7f13\u5b58\u64cd\u4f5c \u2502 \u251c\u2500\u2500 retrieval/ \u2502 \u2502 \u251c\u2500\u2500 bm25_search.py # BM25 \u641c\u7d22 \u2502 \u251c\u2500\u2500 utils/ \u2502 \u2502 \u251c\u2500\u2500 preprocess.py # \u6587\u672c\u9884\u5904\u7406 \u2502 \u251c\u2500\u2500 main.py # MySQL \u7cfb\u7edf\u72ec\u7acb\u5165\u53e3\uff0c\u652f\u6301\u67e5\u8be2 \u251c\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6 \u2514\u2500\u2500 logs/ \u2514\u2500\u2500 app.log # \u65e5\u5fd7\u6587\u4ef6","title":"1.2 \u9879\u76ee\u7ed3\u6784"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#2","text":"","title":"2 \u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#configini","text":"# MySQL \u914d\u7f6e [mysql] host = localhost user = root password = 123456 database = subjects_kg # Redis \u914d\u7f6e [redis] host = localhost port = 6379 password = 1234 db = 0 # \u65e5\u5fd7\u914d\u7f6e [logger] log_file = /path/to/your/logs/app.log","title":"\u914d\u7f6e\u6587\u4ef6 (config.ini)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#21","text":"","title":"2.1 \u914d\u7f6e\u7ba1\u7406"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_2","text":"config.py \u6587\u4ef6\u5b9a\u4e49\u4e86 Config \u7c7b\uff0c\u7528\u4e8e\u96c6\u4e2d\u7ba1\u7406\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u914d\u7f6e\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u5305\u62ec\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u3001\u6a21\u578b\u9009\u62e9\u3001\u5206\u5757\u7b56\u7565\u3001API\u8bbe\u7f6e\u7b49\u3002\u901a\u8fc7\u96c6\u4e2d\u7ba1\u7406\u914d\u7f6e\uff0c\u7cfb\u7edf\u53ef\u4ee5\u65b9\u4fbf\u5730\u8c03\u6574\u53c2\u6570\u3001\u9002\u914d\u4e0d\u540c\u73af\u5883\uff0c\u5e76\u652f\u6301\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u7075\u6d3b\u914d\u7f6e\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_3","text":"# base/config.py # \u5bfc\u5165\u914d\u7f6e\u89e3\u6790\u5e93 import configparser # \u5bfc\u5165\u8def\u5f84\u64cd\u4f5c\u5e93 import os class Config : # \u521d\u59cb\u5316\u914d\u7f6e\uff0c\u52a0\u8f7d config.ini \u6587\u4ef6 def __init__ ( self , config_file = '../config.ini' ): # \u521b\u5efa\u914d\u7f6e\u89e3\u6790\u5668 self . config = configparser . ConfigParser () # \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6 self . config . read ( config_file ) # MySQL \u914d\u7f6e # MySQL \u4e3b\u673a\u5730\u5740 self . MYSQL_HOST = self . config . get ( 'mysql' , 'host' , fallback = 'localhost' ) # MySQL \u7528\u6237\u540d self . MYSQL_USER = self . config . get ( 'mysql' , 'user' , fallback = 'root' ) # MySQL \u5bc6\u7801 self . MYSQL_PASSWORD = self . config . get ( 'mysql' , 'password' , fallback = '123456' ) # MySQL \u6570\u636e\u5e93\u540d self . MYSQL_DATABASE = self . config . get ( 'mysql' , 'database' , fallback = 'subjects_kg' ) # Redis \u914d\u7f6e # Redis \u4e3b\u673a\u5730\u5740 self . REDIS_HOST = self . config . get ( 'redis' , 'host' , fallback = 'localhost' ) # Redis \u7aef\u53e3 self . REDIS_PORT = self . config . getint ( 'redis' , 'port' , fallback = 6379 ) # Redis \u5bc6\u7801 self . REDIS_PASSWORD = self . config . get ( 'redis' , 'password' , fallback = '1234' ) # Redis \u6570\u636e\u5e93\u7f16\u53f7 self . REDIS_DB = self . config . getint ( 'redis' , 'db' , fallback = 0 ) # \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 self . LOG_FILE = self . config . get ( 'logger' , 'log_file' , fallback = 'logs/app.log' ) if __name__ == '__main__' : conf = Config () print ( conf . CHILD_CHUNK_SIZE )","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_4","text":"\u9ed8\u8ba4\u503c \uff1a\u6bcf\u4e2a\u53c2\u6570\u8bbe\u6709\u9ed8\u8ba4\u503c\uff0c\u786e\u4fdd\u672a\u914d\u7f6e\u73af\u5883\u53d8\u91cf\u65f6\u7cfb\u7edf\u4ecd\u53ef\u8fd0\u884c\u3002 \u53c2\u6570\u5206\u7c7b \uff1a\u6309\u529f\u80fd\u5206\u7c7b\uff08\u5982\u6570\u636e\u5e93\u3001\u6a21\u578b\u3001\u5206\u5757\u7b49\uff09\uff0c\u4fbf\u4e8e\u7ba1\u7406\u548c\u7ef4\u62a4\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#22","text":"","title":"2.2 \u65e5\u5fd7\u8bb0\u5f55"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_5","text":"logger.py \u6587\u4ef6\u5b9a\u4e49\u4e86 setup_logging \u51fd\u6570\uff0c\u7528\u4e8e\u914d\u7f6e\u7cfb\u7edf\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002\u65e5\u5fd7\u8bb0\u5f55\u5668\u5c06\u8fd0\u884c\u4fe1\u606f\u3001\u8b66\u544a\u548c\u9519\u8bef\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u4fbf\u4e8e\u5f00\u53d1\u3001\u8c03\u8bd5\u548c\u8fd0\u7ef4\u4eba\u5458\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_6","text":"# base/logger.py # \u5bfc\u5165\u65e5\u5fd7\u5e93 import logging # \u5bfc\u5165\u8def\u5f84\u64cd\u4f5c\u5e93 import os # \u5bfc\u5165\u914d\u7f6e\u7c7b from config import Config def setup_logging ( log_file = Config () . LOG_FILE ): # \u521b\u5efa\u65e5\u5fd7\u76ee\u5f55 os . makedirs ( os . path . dirname ( log_file ), exist_ok = True ) # \u83b7\u53d6\u65e5\u5fd7\u5668 logger = logging . getLogger ( \"EduRAG\" ) # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b logger . setLevel ( logging . INFO ) # \u907f\u514d\u91cd\u590d\u6dfb\u52a0\u5904\u7406\u5668 if not logger . handlers : # \u521b\u5efa\u6587\u4ef6\u5904\u7406\u5668 file_handler = logging . FileHandler ( log_file , encoding = 'utf-8' ) # \u8bbe\u7f6e\u6587\u4ef6\u5904\u7406\u5668\u7ea7\u522b file_handler . setLevel ( logging . INFO ) # \u521b\u5efa\u63a7\u5236\u53f0\u5904\u7406\u5668 console_handler = logging . StreamHandler () # \u8bbe\u7f6e\u63a7\u5236\u53f0\u5904\u7406\u5668\u7ea7\u522b console_handler . setLevel ( logging . INFO ) # \u8bbe\u7f6e\u65e5\u5fd7\u683c\u5f0f formatter = logging . Formatter ( ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) # \u4e3a\u6587\u4ef6\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f file_handler . setFormatter ( formatter ) # \u4e3a\u63a7\u5236\u53f0\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f console_handler . setFormatter ( formatter ) # \u6dfb\u52a0\u6587\u4ef6\u5904\u7406\u5668 logger . addHandler ( file_handler ) # \u6dfb\u52a0\u63a7\u5236\u53f0\u5904\u7406\u5668 logger . addHandler ( console_handler ) # \u8fd4\u56de\u65e5\u5fd7\u5668 return logger # \u521d\u59cb\u5316\u65e5\u5fd7\u5668 logger = setup_logging ()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_7","text":"\u65e5\u5fd7\u7ea7\u522b \uff1a\u9ed8\u8ba4\u8bbe\u4e3a INFO \uff0c\u8bb0\u5f55\u5173\u952e\u8fd0\u884c\u4fe1\u606f\u3002 \u53cc\u91cd\u8f93\u51fa \uff1a\u540c\u65f6\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u4fbf\u4e8e\u5b9e\u65f6\u76d1\u63a7\u548c\u540e\u7eed\u5206\u6790\u3002 \u683c\u5f0f\u5316 \uff1a\u65e5\u5fd7\u5305\u542b\u65f6\u95f4\u6233\u3001\u540d\u79f0\u3001\u7ea7\u522b\u548c\u5185\u5bb9\uff0c\u4fbf\u4e8e\u95ee\u9898\u5b9a\u4f4d\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#23-mysql","text":"","title":"2.3 MySQL\u64cd\u4f5c\u6a21\u5757"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_8","text":"mysql_client.py \u662f\u4e00\u4e2a\u7528\u4e8e\u4e0e MySQL \u4ea4\u4e92\u7684\u6a21\u5757\u3002\u6a21\u5757\u901a\u8fc7\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u652f\u6301\u521b\u5efa\u8868\u3001\u4ece CSV \u6587\u4ef6\u63d2\u5165\u6570\u636e\u3001\u67e5\u8be2\u95ee\u9898\u548c\u7b54\u6848\uff0c\u4ee5\u53ca\u5b89\u5168\u5173\u95ed\u8fde\u63a5\u3002\u6240\u6709\u64cd\u4f5c\u5747\u901a\u8fc7\u65e5\u5fd7\u8bb0\u5f55\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_9","text":"# db/mysql_client.py # \u5bfc\u5165 MySQL \u8fde\u63a5\u5e93 import pymysql # \u5bfc\u5165pandas import pandas as pd # \u5bfc\u5165\u914d\u7f6e\u548c\u65e5\u5fd7 from base import Config , logger class MySQLClient : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7 self . logger = logger try : # \u8fde\u63a5 MySQL \u6570\u636e\u5e93 self . connection = pymysql . connect ( host = Config () . MYSQL_HOST , user = Config () . MYSQL_USER , password = Config () . MYSQL_PASSWORD , database = Config () . MYSQL_DATABASE ) # \u521b\u5efa\u6e38\u6807 self . cursor = self . connection . cursor () # \u8bb0\u5f55\u8fde\u63a5\u6210\u529f self . logger . info ( \"MySQL \u8fde\u63a5\u6210\u529f\" ) except pymysql . MySQLError as e : # \u8bb0\u5f55\u8fde\u63a5\u5931\u8d25 self . logger . error ( f \"MySQL \u8fde\u63a5\u5931\u8d25: { e } \" ) raise def create_table ( self ): create_table_query = ''' CREATE TABLE IF NOT EXISTS jpkb ( id INT AUTO_INCREMENT PRIMARY KEY, subject_name VARCHAR(20), question VARCHAR(1000), answer VARCHAR(1000)) ''' try : self . cursor . execute ( create_table_query ) self . connection . commit () self . logger . info ( \"\u8868\u521b\u5efa\u6210\u529f\" ) except pymysql . MySQLError as e : self . logger . error ( f \"\u8868\u521b\u5efa\u5931\u8d25: { e } \" ) raise def insert_data ( self , csv_path ): try : data = pd . read_csv ( csv_path ) for _ , row in data . iterrows (): insert_query = \"INSERT INTO jpkb (subject_name, question, answer) VALUES ( %s , %s , %s )\" self . cursor . execute ( insert_query , ( row [ '\u5b66\u79d1\u540d\u79f0' ], row [ '\u95ee\u9898' ], row [ '\u7b54\u6848' ])) self . connection . commit () self . logger . info ( \"\u6570\u636e\u63d2\u5165\u6210\u529f\" ) except Exception as e : self . logger . error ( f \"\u6570\u636e\u63d2\u5165\u5931\u8d25: { e } \" ) self . connection . rollback () raise def fetch_questions ( self ): # \u83b7\u53d6\u6240\u6709\u95ee\u9898 try : # \u6267\u884c\u67e5\u8be2 self . cursor . execute ( \"SELECT question FROM jpkb\" ) # \u83b7\u53d6\u7ed3\u679c results = self . cursor . fetchall () # \u8bb0\u5f55\u83b7\u53d6\u6210\u529f self . logger . info ( \"\u6210\u529f\u83b7\u53d6\u95ee\u9898\" ) # \u8fd4\u56de\u7ed3\u679c return results except pymysql . MySQLError as e : # \u8bb0\u5f55\u67e5\u8be2\u5931\u8d25 self . logger . error ( f \"\u67e5\u8be2\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u7a7a\u5217\u8868 return [] def fetch_answer ( self , question ): # \u83b7\u53d6\u6307\u5b9a\u95ee\u9898\u7684\u7b54\u6848 try : # \u6267\u884c\u67e5\u8be2 self . cursor . execute ( \"SELECT answer FROM jpkb WHERE question= %s \" , ( question ,)) # \u83b7\u53d6\u7ed3\u679c result = self . cursor . fetchone () # \u8fd4\u56de\u7b54\u6848\u6216 None return result [ 0 ] if result else None except pymysql . MySQLError as e : # \u8bb0\u5f55\u7b54\u6848\u83b7\u53d6\u5931\u8d25 self . logger . error ( f \"\u7b54\u6848\u83b7\u53d6\u5931\u8d25: { e } \" ) # \u8fd4\u56de None return None def close ( self ): # \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5 try : # \u5173\u95ed\u8fde\u63a5 self . connection . close () # \u8bb0\u5f55\u5173\u95ed\u6210\u529f self . logger . info ( \"MySQL \u8fde\u63a5\u5df2\u5173\u95ed\" ) except pymysql . MySQLError as e : # \u8bb0\u5f55\u5173\u95ed\u5931\u8d25 self . logger . error ( f \"\u5173\u95ed\u8fde\u63a5\u5931\u8d25: { e } \" ) if __name__ == '__main__' : mysql_client = MySQLClient () mysql_client . create_table () mysql_client . insert_data ( '../data/JP\u5b66\u79d1\u77e5\u8bc6\u95ee\u7b54.csv' )","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_10","text":"\u6570\u636e\u5e93\u8fde\u63a5 \uff1a\u901a\u8fc7 config.ini \u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6 MySQL \u53c2\u6570\uff0c\u4f7f\u7528 pymysql \u5efa\u7acb\u8fde\u63a5\u3002 \u8868\u7ba1\u7406 \uff1a\u521b\u5efa jpkb \u8868\uff0c\u5305\u542b\u5b57\u6bb5 id\uff08\u81ea\u589e\u4e3b\u952e\uff09\u3001subject_name\uff08\u5b66\u79d1\u540d\u79f0\uff09\u3001question\uff08\u95ee\u9898\uff09\u3001answer\uff08\u7b54\u6848\uff09\uff0c\u4f7f\u7528 IF NOT EXISTS \u907f\u514d\u91cd\u590d\u521b\u5efa\u3002 \u5f02\u5e38\u5904\u7406 \uff1a\u6bcf\u4e2a\u65b9\u6cd5\u5747\u6355\u83b7\u5f02\u5e38\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u5e76\u6839\u636e\u9700\u8981\u56de\u6eda\u4e8b\u52a1\u6216\u629b\u51fa\u5f02\u5e38\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#24-redis","text":"","title":"2.4 Redis \u7f13\u5b58\u64cd\u4f5c\u6a21\u5757"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_11","text":"redis_client.py \u8be5\u6a21\u5757\u7528\u4e8e\u4e0e Redis \u6570\u636e\u5e93\u4ea4\u4e92\u3002\u6a21\u5757\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u8fde\u63a5 Redis\uff0c\u652f\u6301\u952e\u503c\u5bf9\u5b58\u50a8\u4e0e\u67e5\u8be2\uff08\u4f7f\u7528 JSON \u5e8f\u5217\u5316\uff09\u3001\u7b54\u6848\u7f13\u5b58\u67e5\u8be2\uff0c\u5e76\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_12","text":"# cache/redis_client.py # \u5bfc\u5165 Redis \u5ba2\u6237\u7aef import redis # \u5bfc\u5165 JSON \u5904\u7406 import json # \u5bfc\u5165\u914d\u7f6e\u548c\u65e5\u5fd7 from base import Config , logger class RedisClient : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7 self . logger = logger try : # \u8fde\u63a5 Redis self . client = redis . StrictRedis ( host = Config () . REDIS_HOST , port = Config () . REDIS_PORT , password = Config () . REDIS_PASSWORD , db = Config () . REDIS_DB , decode_responses = True ) # \u8bb0\u5f55\u8fde\u63a5\u6210\u529f self . logger . info ( \"Redis \u8fde\u63a5\u6210\u529f\" ) except redis . RedisError as e : # \u8bb0\u5f55\u8fde\u63a5\u5931\u8d25 self . logger . error ( f \"Redis \u8fde\u63a5\u5931\u8d25: { e } \" ) raise def set_data ( self , key , value ): # \u5b58\u50a8\u6570\u636e\u5230 Redis try : # \u5b58\u50a8 JSON \u6570\u636e self . client . set ( key , json . dumps ( value )) # \u8bb0\u5f55\u5b58\u50a8\u6210\u529f self . logger . info ( f \"\u5b58\u50a8\u6570\u636e\u5230 Redis: { key } \" ) except redis . RedisError as e : # \u8bb0\u5f55\u5b58\u50a8\u5931\u8d25 self . logger . error ( f \"Redis \u5b58\u50a8\u5931\u8d25: { e } \" ) def get_data ( self , key ): # \u4ece Redis \u83b7\u53d6\u6570\u636e try : # \u83b7\u53d6\u6570\u636e data = self . client . get ( key ) # \u8fd4\u56de\u89e3\u6790\u540e\u7684 JSON \u6570\u636e\u6216 None return json . loads ( data ) if data else None except redis . RedisError as e : # \u8bb0\u5f55\u83b7\u53d6\u5931\u8d25 self . logger . error ( f \"Redis \u83b7\u53d6\u5931\u8d25: { e } \" ) # \u8fd4\u56de None return None def get_answer ( self , query ): # \u83b7\u53d6\u67e5\u8be2\u7684\u7f13\u5b58\u7b54\u6848 try : # \u4ece Redis \u83b7\u53d6\u7b54\u6848 answer = self . client . get ( f \"answer: { query } \" ) if answer : # \u8bb0\u5f55\u83b7\u53d6\u6210\u529f self . logger . info ( f \"\u4ece Redis \u83b7\u53d6\u7b54\u6848: { query } \" ) # \u8fd4\u56de\u7b54\u6848 return answer # \u8fd4\u56de None return None except redis . RedisError as e : # \u8bb0\u5f55\u67e5\u8be2\u5931\u8d25 self . logger . error ( f \"Redis \u67e5\u8be2\u5931\u8d25: { e } \" ) # \u8fd4\u56de None return None if __name__ == '__main__' : redcli = RedisClient () print ( redcli )","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_13","text":"Redis \u8fde\u63a5 \uff1a\u901a\u8fc7 config.ini \u8bfb\u53d6 Redis \u914d\u7f6e\uff0c\u4f7f\u7528 redis.StrictRedis \u5efa\u7acb\u8fde\u63a5\u3002 \u6570\u636e\u64cd\u4f5c \uff1a set_data\uff1a\u5c06\u952e\u503c\u5bf9\uff08\u503c\u5e8f\u5217\u5316\u4e3a JSON\uff09\u5b58\u50a8\u5230 Redis\u3002 get_data\uff1a\u6839\u636e\u952e\u83b7\u53d6\u503c\u5e76\u53cd\u5e8f\u5217\u5316 JSON\u3002 get_answer\uff1a\u67e5\u8be2\u4ee5 answer:{query} \u683c\u5f0f\u5b58\u50a8\u7684\u7b54\u6848\u7f13\u5b58\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#25","text":"","title":"2.5 \u6587\u672c\u9884\u5904\u7406\u6a21\u5757"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_14","text":"preprocess.py \u662f\u4e00\u4e2a\u57fa\u4e8e jieba \u5206\u8bcd\u5e93\u5b9e\u73b0\u6587\u672c\u9884\u5904\u7406\u7684\u6a21\u5757\u3002\u8be5\u6a21\u5757\u5c06\u8f93\u5165\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u5e76\u8fdb\u884c\u5206\u8bcd\uff0c\u8fd4\u56de\u5206\u8bcd\u7ed3\u679c\uff0c\u652f\u6301\u65e5\u5fd7\u8bb0\u5f55\u4ee5\u76d1\u63a7\u5904\u7406\u72b6\u6001\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_15","text":"# utils/preprocess.py # \u5bfc\u5165\u5206\u8bcd\u5e93 import jieba # \u5bfc\u5165\u65e5\u5fd7 from base import logger def preprocess_text ( text ): # \u9884\u5904\u7406\u6587\u672c logger . info ( \"\u5f00\u59cb\u9884\u5904\u7406\u6587\u672c\" ) try : # \u5206\u8bcd\u5e76\u8f6c\u6362\u4e3a\u5c0f\u5199 return jieba . lcut ( text . lower ()) except AttributeError as e : # \u8bb0\u5f55\u9884\u5904\u7406\u5931\u8d25 logger . error ( f \"\u6587\u672c\u9884\u5904\u7406\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u7a7a\u5217\u8868 return []","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_16","text":"\u6587\u672c\u5904\u7406 \uff1a\u4f7f\u7528 jieba.lcut \u5bf9\u8f93\u5165\u6587\u672c\u8fdb\u884c\u4e2d\u6587\u5206\u8bcd\uff0c\u5e76\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u4ee5\u89c4\u8303\u5316\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#26-bm25softmax","text":"","title":"2.6 BM25+Softmax\u68c0\u7d22\u6a21\u5757"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_17","text":"bm25_search.py \u662f\u4e00\u4e2a\u57fa\u4e8e BM25 \u7b97\u6cd5\u548c Softmax \u5f52\u4e00\u5316\u7684\u6587\u672c\u68c0\u7d22\u6a21\u5757\uff0c\u7528\u4e8e\u4ece\u95ee\u9898\u5e93\u4e2d\u68c0\u7d22\u4e0e\u67e5\u8be2\u6700\u5339\u914d\u7684\u7b54\u6848\u3002\u6a21\u5757\u7ed3\u5408 Redis \u7f13\u5b58\u548c MySQL \u6570\u636e\u5e93\uff0c\u652f\u6301\u95ee\u9898\u52a0\u8f7d\u3001\u5206\u8bcd\u3001BM25 \u8bc4\u5206\u3001Softmax \u5f52\u4e00\u5316\uff0c\u5e76\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7\u3002 # retrieval/bm25_search.py # \u5bfc\u5165 BM25 \u7b97\u6cd5 from rank_bm25 import BM25Okapi # \u5bfc\u5165\u6570\u503c\u8ba1\u7b97\u5e93 import numpy as np # \u5bfc\u5165\u6587\u672c\u9884\u5904\u7406 from utils.preprocess import preprocess_text # \u5bfc\u5165\u65e5\u5fd7 from base import logger class BM25Search : def __init__ ( self , redis_client , mysql_client ): # \u521d\u59cb\u5316\u65e5\u5fd7 self . logger = logger # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef self . redis_client = redis_client # \u521d\u59cb\u5316 MySQL \u5ba2\u6237\u7aef self . mysql_client = mysql_client # \u521d\u59cb\u5316 BM25 \u6a21\u578b self . bm25 = None # \u521d\u59cb\u5316\u95ee\u9898\u5217\u8868 self . questions = None # \u521d\u59cb\u5316\u539f\u59cb\u95ee\u9898 self . original_questions = None # \u52a0\u8f7d\u6570\u636e self . _load_data () def _load_data ( self ): # \u52a0\u8f7d\u6570\u636e original_key = \"qa_original_questions\" tokenized_key = \"qa_tokenized_questions\" # \u4ece Redis \u83b7\u53d6\u539f\u59cb\u95ee\u9898 self . original_questions = self . redis_client . get_data ( original_key ) # \u4ece Redis \u83b7\u53d6\u5206\u8bcd\u95ee\u9898 tokenized_questions = self . redis_client . get_data ( tokenized_key ) # \u5982\u679c Redis \u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u4ece MySQL \u52a0\u8f7d if not self . original_questions or not tokenized_questions : # \u4ece MySQL \u83b7\u53d6\u95ee\u9898 self . original_questions = self . mysql_client . fetch_questions () if not self . original_questions : # \u8bb0\u5f55\u65e0\u95ee\u9898\u8b66\u544a self . logger . warning ( \"\u672a\u52a0\u8f7d\u5230\u95ee\u9898\" ) return # \u5206\u8bcd\u95ee\u9898 tokenized_questions = [ preprocess_text ( q [ 0 ]) for q in self . original_questions ] # \u5b58\u50a8\u539f\u59cb\u95ee\u9898\u5230 Redis self . redis_client . set_data ( original_key , [( q [ 0 ]) for q in self . original_questions ]) # \u5b58\u50a8\u5206\u8bcd\u95ee\u9898\u5230 Redis self . redis_client . set_data ( tokenized_key , tokenized_questions ) # \u8bbe\u7f6e\u95ee\u9898\u5217\u8868 self . questions = tokenized_questions # \u521d\u59cb\u5316 BM25 \u6a21\u578b self . bm25 = BM25Okapi ( self . questions ) # \u8bb0\u5f55 BM25 \u521d\u59cb\u5316\u6210\u529f self . logger . info ( \"BM25 \u6a21\u578b\u521d\u59cb\u5316\u5b8c\u6210\" ) def _softmax ( self , scores ): # \u8ba1\u7b97 Softmax \u5206\u6570 exp_scores = np . exp ( scores - np . max ( scores )) # \u8fd4\u56de\u5f52\u4e00\u5316\u5206\u6570 return exp_scores / exp_scores . sum () def search ( self , query , threshold = 0.85 ): # \u641c\u7d22\u67e5\u8be2 if not query or not isinstance ( query , str ): # \u8bb0\u5f55\u65e0\u6548\u67e5\u8be2 self . logger . error ( \"\u65e0\u6548\u67e5\u8be2\" ) # \u8fd4\u56de None \u548c False return None , False # \u68c0\u67e5 Redis \u7f13\u5b58 cached_answer = self . redis_client . get_answer ( query ) if cached_answer : # \u8fd4\u56de\u7f13\u5b58\u7b54\u6848 return cached_answer , False try : # \u5206\u8bcd\u67e5\u8be2 query_tokens = preprocess_text ( query ) # \u8ba1\u7b97 BM25 \u5206\u6570 scores = self . bm25 . get_scores ( query_tokens ) # \u8ba1\u7b97 Softmax \u5206\u6570 softmax_scores = self . _softmax ( scores ) # \u83b7\u53d6\u6700\u9ad8\u5206\u7d22\u5f15 best_idx = softmax_scores . argmax () # \u83b7\u53d6\u6700\u9ad8\u5206 best_score = softmax_scores [ best_idx ] # \u68c0\u67e5\u662f\u5426\u8d85\u8fc7\u9608\u503c if best_score >= threshold : # \u83b7\u53d6\u539f\u59cb\u95ee\u9898 original_question = self . original_questions [ best_idx ] # \u83b7\u53d6\u7b54\u6848 answer = self . mysql_client . fetch_answer ( original_question ) if answer : # \u7f13\u5b58\u7b54\u6848 self . redis_client . set_data ( f \"answer: { query } \" , answer ) # \u8bb0\u5f55\u641c\u7d22\u6210\u529f self . logger . info ( f \"\u641c\u7d22\u6210\u529f\uff0cSoftmax \u76f8\u4f3c\u5ea6: { best_score : .3f } \" ) # \u8fd4\u56de\u7b54\u6848\u548c False return answer , False # \u8bb0\u5f55\u65e0\u53ef\u9760\u7b54\u6848 self . logger . info ( f \"\u672a\u627e\u5230\u53ef\u9760\u7b54\u6848\uff0c\u6700\u9ad8 Softmax \u76f8\u4f3c\u5ea6: { best_score : .3f } \" ) # \u8fd4\u56de None \u548c True return None , True except Exception as e : # \u8bb0\u5f55\u641c\u7d22\u5931\u8d25 self . logger . error ( f \"\u641c\u7d22\u5931\u8d25: { e } \" ) # \u8fd4\u56de None \u548c True return None , True","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_18","text":"\u6570\u636e\u52a0\u8f7d \uff1a\u4f18\u5148\u4ece Redis \u83b7\u53d6\u95ee\u9898\u548c\u5206\u8bcd\u6570\u636e\uff0c\u82e5\u65e0\u5219\u4ece MySQL \u52a0\u8f7d\u5e76\u5206\u8bcd\u540e\u7f13\u5b58\u5230 Redis\u3002 BM25 \u68c0\u7d22 \uff1a\u4f7f\u7528 BM25Okapi \u8ba1\u7b97\u67e5\u8be2\u4e0e\u95ee\u9898\u5e93\u7684\u76f8\u4f3c\u5ea6\uff0c\u7ed3\u5408 Softmax \u5f52\u4e00\u5316\u8bc4\u5206\u3002 \u7b54\u6848\u67e5\u8be2 \uff1a\u901a\u8fc7 Redis \u7f13\u5b58\u7b54\u6848\uff0c\u82e5\u65e0\u7f13\u5b58\u5219\u4ece MySQL \u83b7\u53d6\u5e76\u7f13\u5b58\uff0c\u9608\u503c\uff08\u9ed8\u8ba4 0.85\uff09\u63a7\u5236\u7b54\u6848\u53ef\u9760\u6027\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#3-mainpy","text":"# \u5bfc\u5165 MySQL \u5ba2\u6237\u7aef from db.mysql_client import MySQLClient # \u5bfc\u5165 Redis \u5ba2\u6237\u7aef from cache.redis_client import RedisClient # \u5bfc\u5165 BM25 \u641c\u7d22 from retrieval.bm25_search import BM25Search # \u5bfc\u5165\u65e5\u5fd7 from base import logger # \u5bfc\u5165\u65f6\u95f4\u5e93 import time class MySQLQASystem : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7 self . logger = logger # \u521d\u59cb\u5316 MySQL \u5ba2\u6237\u7aef self . mysql_client = MySQLClient () # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef self . redis_client = RedisClient () # \u521d\u59cb\u5316 BM25 \u641c\u7d22 self . bm25_search = BM25Search ( self . redis_client , self . mysql_client ) def query ( self , query ): # \u67e5\u8be2 MySQL \u7cfb\u7edf start_time = time . time () # \u8bb0\u5f55\u67e5\u8be2\u4fe1\u606f self . logger . info ( f \"\u5904\u7406\u67e5\u8be2: ' { query } '\" ) # \u6267\u884c BM25 \u641c\u7d22 answer , _ = self . bm25_search . search ( query , threshold = 0.85 ) if answer : # \u8bb0\u5f55 MySQL \u7b54\u6848 self . logger . info ( f \"MySQL \u7b54\u6848: { answer } \" ) else : # \u8bb0\u5f55\u65e0\u7b54\u6848 self . logger . info ( \"SQL\u4e2d\u672a\u627e\u5230\u7b54\u6848, \u9700\u8981\u8c03\u7528RAG\u7cfb\u7edf\" ) # \u8bbe\u7f6e\u9ed8\u8ba4\u7b54\u6848 answer = \"SQL\u672a\u627e\u5230\u7b54\u6848\" # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de\u7b54\u6848 return answer def main (): # \u521d\u59cb\u5316 MySQL \u7cfb\u7edf mysql_system = MySQLQASystem () try : # \u6253\u5370\u6b22\u8fce\u4fe1\u606f print ( \" \\n \u6b22\u8fce\u4f7f\u7528 MySQL \u95ee\u7b54\u7cfb\u7edf\uff01\" ) print ( \"\u8f93\u5165\u67e5\u8be2\u8fdb\u884c\u95ee\u7b54\uff0c\u8f93\u5165 'exit' \u9000\u51fa\u3002\" ) while True : # \u83b7\u53d6\u7528\u6237\u8f93\u5165 query = input ( \" \\n \u8f93\u5165\u67e5\u8be2: \" ) . strip () if query . lower () == \"exit\" : # \u8bb0\u5f55\u9000\u51fa\u65e5\u5fd7 logger . info ( \"\u9000\u51fa MySQL \u7cfb\u7edf\" ) # \u6253\u5370\u9000\u51fa\u4fe1\u606f print ( \"\u518d\u89c1\uff01\" ) break # \u6267\u884c\u67e5\u8be2 answer = mysql_system . query ( query ) # \u6253\u5370\u7b54\u6848 print ( f \" \\n \u7b54\u6848: { answer } \" ) except Exception as e : # \u8bb0\u5f55\u7cfb\u7edf\u9519\u8bef logger . error ( f \"\u7cfb\u7edf\u9519\u8bef: { e } \" ) # \u6253\u5370\u9519\u8bef\u4fe1\u606f print ( f \"\u53d1\u751f\u9519\u8bef: { e } \" ) finally : # \u5173\u95ed MySQL \u8fde\u63a5 mysql_system . mysql_client . close () if __name__ == \"__main__\" : # \u8fd0\u884c\u4e3b\u7a0b\u5e8f main ()","title":"3 \u4e3b\u7a0b\u5e8f (main.py)"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_19","text":"\u5047\u8bbeMySQL\u4e2d\u6709\u6570\u636e\uff1a - \u95ee\u9898\uff1a\"\u7279\u6b8a\u7b26\u53f7\u5982\u4f55\u5207\u5272\"\uff0c\u7b54\u6848\uff1a\"\u4f7f\u7528split\u51fd\u6570\" - \u95ee\u9898\uff1a\"\u5982\u4f55\u5904\u7406\u5b57\u7b26\u4e32\"\uff0c\u7b54\u6848\uff1a\"\u4f7f\u7528\u5b57\u7b26\u4e32\u65b9\u6cd5\" \u67e5\u8be2\uff1a\"\u7279\u6b8a\u7b26\u53f7\u7684\u5207\u5272\" 2025-04-01 10:00:00,123 - INFO - MySQL\u8fde\u63a5\u6210\u529f 2025-04-01 10:00:00,125 - INFO - Redis\u8fde\u63a5\u6210\u529f 2025-04-01 10:00:00,126 - INFO - BM25\u6a21\u578b\u521d\u59cb\u5316\u5b8c\u6210 \u6b22\u8fce\u4f7f\u7528 MySQL \u95ee\u7b54\u7cfb\u7edf\uff01 \u8f93\u5165\u67e5\u8be2\u8fdb\u884c\u95ee\u7b54\uff0c\u8f93\u5165 'exit' \u9000\u51fa\u3002 2025-04-01 10:00:00,127 - INFO - \u68c0\u7d22\u6210\u529f\uff0cSoftmax\u76f8\u4f3c\u5ea6: 0.892 2025-04-01 10:00:00,128 - INFO - \u6570\u636e\u5b58\u5165Redis: answer:\u7279\u6b8a\u7b26\u53f7\u7684\u5207\u5272 2025-04-01 10:00:00,129 - INFO - MySQL\u7b54\u6848: \u4f7f\u7528split\u51fd\u6570 2025-04-01 10:00:00,130 - INFO - MySQL\u8fde\u63a5\u5df2\u5173\u95ed","title":"\u793a\u4f8b\u8fd0\u884c\u7ed3\u679c"},{"location":"%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04.%E5%9F%BA%E4%BA%8EMysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F.html#_20","text":"\u672c\u7ae0\u6574\u5408Mysql\u548cRedis\u529f\u80fd\uff0c\u5b9e\u73b0\u4e86\u57fa\u4e8e\u4f59\u5f26\u76f8\u4f3c\u5ea6\u95ee\u7b54\u7684QA\u7cfb\u7edf\uff1a \u6d41\u7a0b \uff1aMySQL\u5b58\u50a8\u6570\u636e\uff0cRedis\u7f13\u5b58\u4f18\u5316\uff0cTF-IDF\u548c\u4f59\u5f26\u76f8\u4f3c\u5ea6\u5339\u914d\u95ee\u9898\u3002 \u5de5\u7a0b\u5316 \uff1a\u6a21\u5757\u5316\u8bbe\u8ba1\u3001\u914d\u7f6e\u6587\u4ef6\u3001\u65e5\u5fd7\u8bb0\u5f55\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html","text":"Ollama: \u672c\u5730LLM\u7684\u9ad8\u6548\u8fd0\u884c\u5de5\u5177 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u4e86\u89e3\u9879\u76ee\u5f00\u53d1\u80cc\u666f \u638c\u63e1\u878d\u5408\u672c\u5730\u77e5\u8bc6\u7684RAG\u7cfb\u7edf\u5b9e\u73b0\u8fc7\u7a0b 1 Ollama\u7b80\u4ecb \u00b6 \u968f\u7740\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u5927\u578b\u8bed\u8a00\u6a21\u578b LLM \u5df2\u6210\u4e3aNLP\u9886\u57df\u7684\u91cd\u8981\u5de5\u5177\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u6a21\u578b\u7684\u8fd0\u884c\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u8ba1\u7b97\u8d44\u6e90\u548c\u590d\u6742\u7684\u90e8\u7f72\u6d41\u7a0b\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cOllama\u5e94\u8fd0\u800c\u751f\uff0c\u6210\u4e3a\u4e86\u4e00\u4e2a\u9ad8\u6548\u7684\u672c\u5730\u5927\u8bed\u8a00\u6a21\u578bLLM\u8fd0\u884c\u4e13\u5bb6\u3002 Ollama\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\u670d\u52a1\u5de5\u5177\uff0c\u5b83\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u5728\u672c\u5730\u8fd0\u884c\u5927\u6a21\u578b\u3002\u901a\u8fc7\u7b80\u5355\u7684\u5b89\u88c5\u6307\u4ee4\uff0c\u7528\u6237\u53ef\u4ee5\u6267\u884c\u4e00\u6761\u547d\u4ee4\u5c31\u5728\u672c\u5730\u8fd0\u884c\u5f00\u6e90\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff0c\u5982Llama 2\u3002Ollama\u6781\u5927\u5730\u7b80\u5316\u4e86\u90e8\u7f72\u548c\u7ba1\u7406LLM\u7684\u8fc7\u7a0b\uff0c\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u5feb\u901f\u5730\u5728\u672c\u5730\u8fd0\u884c\u5927\u578b\u8bed\u8a00\u6a21\u578b\u3002 2 Ollama\u7684\u5b89\u88c5 \u00b6 2.1 \u4e0b\u8f7d\u5b89\u88c5Ollama \u00b6 Ollama\u4e3b\u9875\uff1a https://ollama.com/ \uff0c\u652f\u6301macOS, Linux \u548c Windows \u7cfb\u7edf\uff0c\u5982\u679c\u662fmacOS\u3001Linux\u7cfb\u7edf\uff0c\u76f4\u63a5\u5b89\u88c5\u4f7f\u7528\u5373\u53ef\uff1b\u5982\u679c\u662fWindows\uff0c\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u6559\u7a0b\u8fdb\u884c\u5b89\u88c5\u4f7f\u7528\uff1a \u70b9\u51fb\u4e0b\u8f7d\u6309\u94ae\uff0c\u83b7\u53d6 OllamaSetup.exe \u5b89\u88c5\u7a0b\u5e8f\u3002 \u53cc\u51fb\u5b89\u88c5\u6587\u4ef6\uff0c\u70b9\u51fb\u300cInstall\u300d\u5f00\u59cb\u5b89\u88c5\u3002\u76ee\u524d\u7684Ollama\u4f1a\u9ed8\u8ba4\u5b89\u88c5\u5230C\u76d8\uff0c\u8def\u5f84\u5982\u4e0b\uff1a C:\\Users\\%username%\\AppData\\Local\\Programs\\Ollama \uff0c\u5e76\u4e0d\u4f1a\u8ba9\u7528\u6237\u81ea\u5b9a\u4e49\u9009\u62e9\u5b89\u88c5\u8def\u5f84\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f1a\u5728\u7535\u8111\u53f3\u4e0b\u89d2\u51fa\u73b0Ollama\u56fe\u6807\uff0c\u53ef\u4ee5\u4e0d\u7528\u5148\u542f\u52a8Ollama\uff0c\u5148\u9000\u51fa\u505a\u4e00\u4e9b\u5fc5\u8981\u8def\u5f84\u7684\u914d\u7f6e\uff01\u53f3\u952e\u56fe\u6807\uff0c\u4f1a\u51fa\u73b0\u9000\u51fa\u7684\u6309\u94ae\u300cQuit Ollama\u300d\uff0c\u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u9000\u51faOllama\uff0c\u5426\u5219\u4e0b\u8fb9\u7684\u73af\u5883\u914d\u7f6e\u65e0\u6cd5\u751f\u6548\uff01 2.2 \u73af\u5883\u914d\u7f6e \u00b6 \u5173\u95ed\u5f00\u673a\u81ea\u542f\u52a8\uff08\u53ef\u9009\uff09\uff1a Ollama \u9ed8\u8ba4\u4f1a\u968f Windows \u81ea\u52a8\u542f\u52a8\uff0c\u53ef\u4ee5\u5728\u300c\u6587\u4ef6\u8d44\u6e90\u7ba1\u7406\u5668\u300d\u7684\u5730\u5740\u680f\u4e2d\u8bbf\u95ee\u4ee5\u4e0b\u8def\u5f84\uff0c\u5220\u9664\u5176\u4e2d\u7684Ollama.lnk\u5feb\u6377\u65b9\u5f0f\u6587\u4ef6\uff0c\u963b\u6b62\u5b83\u81ea\u52a8\u542f\u52a8\u3002 %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup \u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff08\u5fc5\u987b\uff09\uff1a Ollama \u7684\u9ed8\u8ba4\u6a21\u578b\u5b58\u50a8\u8def\u5f84\u5982\u4e0b\uff1aC:\\Users\\%username%.ollama\\models\uff0c\u65e0\u8bba C \u76d8\u7a7a\u95f4\u5927\u5c0f\uff0c\u9700\u8981\u5b89\u88c5\u591a\u5c11\u6a21\u578b\uff0c\u90fd\u5efa\u8bae\u6362\u4e00\u4e2a\u5b58\u653e\u8def\u5f84\u5230\u5176\u5b83\u76d8\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u7535\u8111\u8fd0\u884c\u901f\u5ea6\u3002 \u6253\u5f00\u300c\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u300d\uff0c\u65b0\u5efa\u4e00\u4e2a\u7cfb\u7edf\u53d8\u91cfOLLAMA_MODELS \uff0c\u7136\u540e\u8bbe\u7f6eollama\u6a21\u578b\u7684\u5b58\u50a8\u8def\u5f84\u3002 \u53d8\u91cf\u540d\uff1aOLLAMA_MODELS \u53d8\u91cf\u503c\uff08\u8def\u5f84\uff09\uff1aD:\\Work\\ollama\\models 2.3 \u8fd0\u884cOllama \u00b6 \u5c06\u4e0a\u8ff0\u66f4\u6539\u7684\u73af\u5883\u53d8\u91cf\u4fdd\u5b58\u540e\uff0c\u5728\u300c\u5f00\u59cb\u300d\u83dc\u5355\u4e2d\u627e\u5230\u5e76\u91cd\u65b0\u542f\u52a8 Ollama\u3002\u627e\u5230ollama.exe\u7684\u6240\u5728\u4f4d\u7f6e\uff0c\u5728\u8be5\u4f4d\u7f6e\u6253\u5f00cmd \u6267\u884c\u6307\u4ee4 ollama run <\u6a21\u578b\u540d\u79f0> \uff0c\u9996\u6b21\u6267\u884c\u4f1a\u4ece\u6a21\u578b\u5e93\u4e2d\u4e0b\u8f7d\u6a21\u578b\uff0c\u6240\u9700\u65f6\u95f4\u53d6\u51b3\u4e8e\u4f60\u7684\u7f51\u901f\u548c\u6a21\u578b\u5927\u5c0f\u3002\u6a21\u578b\u5e93\u5730\u5740\uff1a https://ollama.org.cn/library \u5728Ollama\u6a21\u578b\u5e93\u4e2d\uff0c\u6bd4\u8f83\u5e38\u7528\u7684LLM\u6a21\u578b\u6709\uff1a \u8fd0\u884c7B\u81f3\u5c11\u9700\u89818GB\u663e\u5b58\uff0c\u8fd0\u884c13B\u81f3\u5c11\u9700\u898116G\u663e\u5b58\uff0c\u5982\u679c\u6ca1\u6709GPU\u9ed8\u8ba4\u52a0\u8f7dCPU\uff1b\u5982\u679c\u6709\u9ed8\u8ba4\u52a0\u8f7dGPU \u7b49\u5f85\u4e0b\u8f7d\u6a21\u578b\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a 3 \u5728 Python \u4e2d\u4f7f\u7528 Ollama API \u00b6 \u73af\u5883\u51c6\u5907 \u5728\u5f00\u59cb\u4f7f\u7528 Python \u4e0e Ollama API \u4ea4\u4e92\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u7684\u5f00\u53d1\u73af\u5883\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \u5b89\u88c5ollama\u5e93 : pip install ollama \u4ee3\u7801\u5b9e\u73b0\uff1a \u65b9\u5f0f1 import ollama # \u804a\u5929\u5f0f response = ollama . chat ( model = 'qwen2:1.5b' , messages = [{ 'role' : 'user' , 'content' : '\u4e3a\u4ec0\u4e48\u5929\u7a7a\u662f\u84dd\u8272\u7684\uff1f' , }]) print ( response ) print ( response [ 'message' ][ 'content' ]) # \u751f\u6210\u5f0f ## response = ollama.generate(model='qwen2:1.5b', prompt='\u4e3a\u4ec0\u4e48\u5929\u7a7a\u662f\u84dd\u8272\u7684\uff1f') \u65b9\u5f0f2 # \u53ef\u4ee5\u8fdc\u7a0b\u8c03\u7528ollama from ollama import Client # client = Client(host='http://192.168.1.100:11434') client = Client ( host = 'http://127.0.0.1:11434' ) response = client . chat ( model = 'qwen2:1.5b' , messages = [ { 'role' : 'user' , 'content' : '\u4e3a\u4ec0\u4e48\u5929\u7a7a\u662f\u84dd\u8272\u7684\uff1f' , }, ]) print ( response [ 'message' ][ 'content' ]) \u65b9\u5f0f3\uff08\u4e86\u89e3\uff09 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e stream=True \u542f\u7528\u54cd\u5e94\u6d41\uff0c\u4f7f\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u4e00\u4e2a Python \u751f\u6210\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u90e8\u5206\u90fd\u662f\u6d41\u4e2d\u7684\u4e00\u4e2a\u5bf9\u8c61\u3002 import ollama stream = ollama . chat ( model = 'qwen2:1.5b' , messages = [{ 'role' : 'user' , 'content' : '\u4e3a\u4ec0\u4e48\u5929\u7a7a\u662f\u84dd\u8272\u7684\uff1f' }], stream = True , ) for chunk in stream : print ( chunk [ 'message' ][ 'content' ], end = '' , flush = True ) 4 LangChain\u8c03\u7528 \u00b6 \u73af\u5883\u51c6\u5907 \u5b89\u88c5langchain\u5e93 : pip install langchain \u5b89\u88c5langchain_community\u5e93 : pip install langchain_community \u4ee3\u7801\u5b9e\u73b0 from langchain_community.llms import Ollama host = \"xxx\" port = \"xxx\" #\u9ed8\u8ba4\u7684\u7aef\u53e3\u53f7\u4e3a11434 # \u5982\u679c\u81ea\u5df1\u672c\u5730\u7cfb\u7edf\u6709ollama\u670d\u52a1\uff0c\u53ef\u4ee5\u7701\u7565base_url llm = Ollama ( base_url = f \"http:// { host } : { port } \" , model = \"qwen2:1.5b\" , temperature = 0 ) res = llm . invoke ( \"\u4f60\u662f\u8c01\" ) print ( res ) 5 requests\u8c03\u7528 \u00b6 \u73af\u5883\u51c6\u5907 \u5b89\u88c5requests\u5e93 : pip install requests \u4ee3\u7801\u5b9e\u73b0 host = \"xxx\" port = \"xxx\" url = f \"http:// { host } : { port } /api/chat\" model = \"qwen2:1.5b\" headers = { \"Content-Type\" : \"application/json\" } data = { \"model\" : model , #\u6a21\u578b\u9009\u62e9 \"options\" : { \"temperature\" : 0. #\u4e3a0\u8868\u793a\u4e0d\u8ba9\u6a21\u578b\u81ea\u7531\u53d1\u6325\uff0c\u8f93\u51fa\u7ed3\u679c\u76f8\u5bf9\u8f83\u56fa\u5b9a\uff0c>0\u7684\u8bdd\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u4f1a\u6bd4\u8f83\u653e\u98de\u81ea\u6211 }, \"stream\" : False , #\u6d41\u5f0f\u8f93\u51fa \"messages\" : [{ \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u8c01\uff1f\" }] #\u5bf9\u8bdd\u5217\u8868 } response = requests . post ( url , json = data , headers = headers , timeout = 60 ) res = response . json () print ( res ) \u672c\u8282\u5c0f\u7ed3 \u00b6 \u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5229\u7528Ollama\u5de5\u5177\u5b9e\u73b0\u672c\u5730\u5927\u6a21\u578b\u7684\u57fa\u672c\u5e94\u7528\u3002","title":"2.1 Ollama\u5927\u6a21\u578b\u7ba1\u7406\u5de5\u5177"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#ollama-llm","text":"","title":"Ollama: \u672c\u5730LLM\u7684\u9ad8\u6548\u8fd0\u884c\u5de5\u5177"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#_1","text":"\u4e86\u89e3\u9879\u76ee\u5f00\u53d1\u80cc\u666f \u638c\u63e1\u878d\u5408\u672c\u5730\u77e5\u8bc6\u7684RAG\u7cfb\u7edf\u5b9e\u73b0\u8fc7\u7a0b","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#1-ollama","text":"\u968f\u7740\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u5927\u578b\u8bed\u8a00\u6a21\u578b LLM \u5df2\u6210\u4e3aNLP\u9886\u57df\u7684\u91cd\u8981\u5de5\u5177\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u6a21\u578b\u7684\u8fd0\u884c\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u8ba1\u7b97\u8d44\u6e90\u548c\u590d\u6742\u7684\u90e8\u7f72\u6d41\u7a0b\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cOllama\u5e94\u8fd0\u800c\u751f\uff0c\u6210\u4e3a\u4e86\u4e00\u4e2a\u9ad8\u6548\u7684\u672c\u5730\u5927\u8bed\u8a00\u6a21\u578bLLM\u8fd0\u884c\u4e13\u5bb6\u3002 Ollama\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\u670d\u52a1\u5de5\u5177\uff0c\u5b83\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u5728\u672c\u5730\u8fd0\u884c\u5927\u6a21\u578b\u3002\u901a\u8fc7\u7b80\u5355\u7684\u5b89\u88c5\u6307\u4ee4\uff0c\u7528\u6237\u53ef\u4ee5\u6267\u884c\u4e00\u6761\u547d\u4ee4\u5c31\u5728\u672c\u5730\u8fd0\u884c\u5f00\u6e90\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff0c\u5982Llama 2\u3002Ollama\u6781\u5927\u5730\u7b80\u5316\u4e86\u90e8\u7f72\u548c\u7ba1\u7406LLM\u7684\u8fc7\u7a0b\uff0c\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u5feb\u901f\u5730\u5728\u672c\u5730\u8fd0\u884c\u5927\u578b\u8bed\u8a00\u6a21\u578b\u3002","title":"1 Ollama\u7b80\u4ecb"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#2-ollama","text":"","title":"2 Ollama\u7684\u5b89\u88c5"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#21-ollama","text":"Ollama\u4e3b\u9875\uff1a https://ollama.com/ \uff0c\u652f\u6301macOS, Linux \u548c Windows \u7cfb\u7edf\uff0c\u5982\u679c\u662fmacOS\u3001Linux\u7cfb\u7edf\uff0c\u76f4\u63a5\u5b89\u88c5\u4f7f\u7528\u5373\u53ef\uff1b\u5982\u679c\u662fWindows\uff0c\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u6559\u7a0b\u8fdb\u884c\u5b89\u88c5\u4f7f\u7528\uff1a \u70b9\u51fb\u4e0b\u8f7d\u6309\u94ae\uff0c\u83b7\u53d6 OllamaSetup.exe \u5b89\u88c5\u7a0b\u5e8f\u3002 \u53cc\u51fb\u5b89\u88c5\u6587\u4ef6\uff0c\u70b9\u51fb\u300cInstall\u300d\u5f00\u59cb\u5b89\u88c5\u3002\u76ee\u524d\u7684Ollama\u4f1a\u9ed8\u8ba4\u5b89\u88c5\u5230C\u76d8\uff0c\u8def\u5f84\u5982\u4e0b\uff1a C:\\Users\\%username%\\AppData\\Local\\Programs\\Ollama \uff0c\u5e76\u4e0d\u4f1a\u8ba9\u7528\u6237\u81ea\u5b9a\u4e49\u9009\u62e9\u5b89\u88c5\u8def\u5f84\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f1a\u5728\u7535\u8111\u53f3\u4e0b\u89d2\u51fa\u73b0Ollama\u56fe\u6807\uff0c\u53ef\u4ee5\u4e0d\u7528\u5148\u542f\u52a8Ollama\uff0c\u5148\u9000\u51fa\u505a\u4e00\u4e9b\u5fc5\u8981\u8def\u5f84\u7684\u914d\u7f6e\uff01\u53f3\u952e\u56fe\u6807\uff0c\u4f1a\u51fa\u73b0\u9000\u51fa\u7684\u6309\u94ae\u300cQuit Ollama\u300d\uff0c\u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u9000\u51faOllama\uff0c\u5426\u5219\u4e0b\u8fb9\u7684\u73af\u5883\u914d\u7f6e\u65e0\u6cd5\u751f\u6548\uff01","title":"2.1 \u4e0b\u8f7d\u5b89\u88c5Ollama"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#22","text":"\u5173\u95ed\u5f00\u673a\u81ea\u542f\u52a8\uff08\u53ef\u9009\uff09\uff1a Ollama \u9ed8\u8ba4\u4f1a\u968f Windows \u81ea\u52a8\u542f\u52a8\uff0c\u53ef\u4ee5\u5728\u300c\u6587\u4ef6\u8d44\u6e90\u7ba1\u7406\u5668\u300d\u7684\u5730\u5740\u680f\u4e2d\u8bbf\u95ee\u4ee5\u4e0b\u8def\u5f84\uff0c\u5220\u9664\u5176\u4e2d\u7684Ollama.lnk\u5feb\u6377\u65b9\u5f0f\u6587\u4ef6\uff0c\u963b\u6b62\u5b83\u81ea\u52a8\u542f\u52a8\u3002 %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup \u914d\u7f6e\u73af\u5883\u53d8\u91cf\uff08\u5fc5\u987b\uff09\uff1a Ollama \u7684\u9ed8\u8ba4\u6a21\u578b\u5b58\u50a8\u8def\u5f84\u5982\u4e0b\uff1aC:\\Users\\%username%.ollama\\models\uff0c\u65e0\u8bba C \u76d8\u7a7a\u95f4\u5927\u5c0f\uff0c\u9700\u8981\u5b89\u88c5\u591a\u5c11\u6a21\u578b\uff0c\u90fd\u5efa\u8bae\u6362\u4e00\u4e2a\u5b58\u653e\u8def\u5f84\u5230\u5176\u5b83\u76d8\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u7535\u8111\u8fd0\u884c\u901f\u5ea6\u3002 \u6253\u5f00\u300c\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u300d\uff0c\u65b0\u5efa\u4e00\u4e2a\u7cfb\u7edf\u53d8\u91cfOLLAMA_MODELS \uff0c\u7136\u540e\u8bbe\u7f6eollama\u6a21\u578b\u7684\u5b58\u50a8\u8def\u5f84\u3002 \u53d8\u91cf\u540d\uff1aOLLAMA_MODELS \u53d8\u91cf\u503c\uff08\u8def\u5f84\uff09\uff1aD:\\Work\\ollama\\models","title":"2.2 \u73af\u5883\u914d\u7f6e"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#23-ollama","text":"\u5c06\u4e0a\u8ff0\u66f4\u6539\u7684\u73af\u5883\u53d8\u91cf\u4fdd\u5b58\u540e\uff0c\u5728\u300c\u5f00\u59cb\u300d\u83dc\u5355\u4e2d\u627e\u5230\u5e76\u91cd\u65b0\u542f\u52a8 Ollama\u3002\u627e\u5230ollama.exe\u7684\u6240\u5728\u4f4d\u7f6e\uff0c\u5728\u8be5\u4f4d\u7f6e\u6253\u5f00cmd \u6267\u884c\u6307\u4ee4 ollama run <\u6a21\u578b\u540d\u79f0> \uff0c\u9996\u6b21\u6267\u884c\u4f1a\u4ece\u6a21\u578b\u5e93\u4e2d\u4e0b\u8f7d\u6a21\u578b\uff0c\u6240\u9700\u65f6\u95f4\u53d6\u51b3\u4e8e\u4f60\u7684\u7f51\u901f\u548c\u6a21\u578b\u5927\u5c0f\u3002\u6a21\u578b\u5e93\u5730\u5740\uff1a https://ollama.org.cn/library \u5728Ollama\u6a21\u578b\u5e93\u4e2d\uff0c\u6bd4\u8f83\u5e38\u7528\u7684LLM\u6a21\u578b\u6709\uff1a \u8fd0\u884c7B\u81f3\u5c11\u9700\u89818GB\u663e\u5b58\uff0c\u8fd0\u884c13B\u81f3\u5c11\u9700\u898116G\u663e\u5b58\uff0c\u5982\u679c\u6ca1\u6709GPU\u9ed8\u8ba4\u52a0\u8f7dCPU\uff1b\u5982\u679c\u6709\u9ed8\u8ba4\u52a0\u8f7dGPU \u7b49\u5f85\u4e0b\u8f7d\u6a21\u578b\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff1a","title":"2.3 \u8fd0\u884cOllama"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#3-python-ollama-api","text":"\u73af\u5883\u51c6\u5907 \u5728\u5f00\u59cb\u4f7f\u7528 Python \u4e0e Ollama API \u4ea4\u4e92\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u7684\u5f00\u53d1\u73af\u5883\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \u5b89\u88c5ollama\u5e93 : pip install ollama \u4ee3\u7801\u5b9e\u73b0\uff1a \u65b9\u5f0f1 import ollama # \u804a\u5929\u5f0f response = ollama . chat ( model = 'qwen2:1.5b' , messages = [{ 'role' : 'user' , 'content' : '\u4e3a\u4ec0\u4e48\u5929\u7a7a\u662f\u84dd\u8272\u7684\uff1f' , }]) print ( response ) print ( response [ 'message' ][ 'content' ]) # \u751f\u6210\u5f0f ## response = ollama.generate(model='qwen2:1.5b', prompt='\u4e3a\u4ec0\u4e48\u5929\u7a7a\u662f\u84dd\u8272\u7684\uff1f') \u65b9\u5f0f2 # \u53ef\u4ee5\u8fdc\u7a0b\u8c03\u7528ollama from ollama import Client # client = Client(host='http://192.168.1.100:11434') client = Client ( host = 'http://127.0.0.1:11434' ) response = client . chat ( model = 'qwen2:1.5b' , messages = [ { 'role' : 'user' , 'content' : '\u4e3a\u4ec0\u4e48\u5929\u7a7a\u662f\u84dd\u8272\u7684\uff1f' , }, ]) print ( response [ 'message' ][ 'content' ]) \u65b9\u5f0f3\uff08\u4e86\u89e3\uff09 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e stream=True \u542f\u7528\u54cd\u5e94\u6d41\uff0c\u4f7f\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u4e00\u4e2a Python \u751f\u6210\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u90e8\u5206\u90fd\u662f\u6d41\u4e2d\u7684\u4e00\u4e2a\u5bf9\u8c61\u3002 import ollama stream = ollama . chat ( model = 'qwen2:1.5b' , messages = [{ 'role' : 'user' , 'content' : '\u4e3a\u4ec0\u4e48\u5929\u7a7a\u662f\u84dd\u8272\u7684\uff1f' }], stream = True , ) for chunk in stream : print ( chunk [ 'message' ][ 'content' ], end = '' , flush = True )","title":"3 \u5728 Python \u4e2d\u4f7f\u7528 Ollama API"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#4-langchain","text":"\u73af\u5883\u51c6\u5907 \u5b89\u88c5langchain\u5e93 : pip install langchain \u5b89\u88c5langchain_community\u5e93 : pip install langchain_community \u4ee3\u7801\u5b9e\u73b0 from langchain_community.llms import Ollama host = \"xxx\" port = \"xxx\" #\u9ed8\u8ba4\u7684\u7aef\u53e3\u53f7\u4e3a11434 # \u5982\u679c\u81ea\u5df1\u672c\u5730\u7cfb\u7edf\u6709ollama\u670d\u52a1\uff0c\u53ef\u4ee5\u7701\u7565base_url llm = Ollama ( base_url = f \"http:// { host } : { port } \" , model = \"qwen2:1.5b\" , temperature = 0 ) res = llm . invoke ( \"\u4f60\u662f\u8c01\" ) print ( res )","title":"4 LangChain\u8c03\u7528"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#5-requests","text":"\u73af\u5883\u51c6\u5907 \u5b89\u88c5requests\u5e93 : pip install requests \u4ee3\u7801\u5b9e\u73b0 host = \"xxx\" port = \"xxx\" url = f \"http:// { host } : { port } /api/chat\" model = \"qwen2:1.5b\" headers = { \"Content-Type\" : \"application/json\" } data = { \"model\" : model , #\u6a21\u578b\u9009\u62e9 \"options\" : { \"temperature\" : 0. #\u4e3a0\u8868\u793a\u4e0d\u8ba9\u6a21\u578b\u81ea\u7531\u53d1\u6325\uff0c\u8f93\u51fa\u7ed3\u679c\u76f8\u5bf9\u8f83\u56fa\u5b9a\uff0c>0\u7684\u8bdd\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u4f1a\u6bd4\u8f83\u653e\u98de\u81ea\u6211 }, \"stream\" : False , #\u6d41\u5f0f\u8f93\u51fa \"messages\" : [{ \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u8c01\uff1f\" }] #\u5bf9\u8bdd\u5217\u8868 } response = requests . post ( url , json = data , headers = headers , timeout = 60 ) res = response . json () print ( res )","title":"5 requests\u8c03\u7528"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/01-Ollama%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html#_2","text":"\u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5229\u7528Ollama\u5de5\u5177\u5b9e\u73b0\u672c\u5730\u5927\u6a21\u578b\u7684\u57fa\u672c\u5e94\u7528\u3002","title":"\u672c\u8282\u5c0f\u7ed3"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","text":"LangChain\u7684\u4ecb\u7ecd\u548c\u5165\u95e8 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3\u4ec0\u4e48\u662fLangChain \u660e\u786eLangChain\u4e3b\u8981\u7ec4\u4ef6\u7684\u4f5c\u7528 \u4e86\u89e3LangChain\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f 1 \u4ec0\u4e48\u662fLangChain \u00b6 LangChain\u7531 Harrison Chase \u521b\u5efa\u4e8e2022\u5e7410\u6708\uff0c\u5b83\u662f\u56f4\u7ed5LLMs\uff08\u5927\u8bed\u8a00\u6a21\u578b\uff09\u5efa\u7acb\u7684\u4e00\u4e2a\u6846\u67b6\uff0cLLMs\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u548c\u6d77\u91cf\u6570\u636e\u6765\u5206\u6790\u548c\u7406\u89e3\u81ea\u7136\u8bed\u8a00\uff0cGPT3.5\u3001GPT4\u662fLLMs\u6700\u5148\u8fdb\u7684\u4ee3\u8868\uff0c\u56fd\u5185\u767e\u5ea6\u7684\u6587\u5fc3\u4e00\u8a00\u3001\u963f\u91cc\u7684\u901a\u4e49\u5343\u95ee\u4e5f\u5c5e\u4e8eLLMs\u3002LangChain\u81ea\u8eab\u5e76\u4e0d\u5f00\u53d1LLMs\uff0c\u5b83\u7684\u6838\u5fc3\u7406\u5ff5\u662f\u4e3a\u5404\u79cdLLMs\u5b9e\u73b0\u901a\u7528\u7684\u63a5\u53e3\uff0c\u628aLLMs\u76f8\u5173\u7684\u7ec4\u4ef6\u201c\u94fe\u63a5\u201d\u5728\u4e00\u8d77\uff0c\u7b80\u5316LLMs\u5e94\u7528\u7684\u5f00\u53d1\u96be\u5ea6\uff0c\u65b9\u4fbf\u5f00\u53d1\u8005\u5feb\u901f\u5730\u5f00\u53d1\u590d\u6742\u7684LLMs\u5e94\u7528\u3002LangChain\u76ee\u524d\u6709\u4e24\u4e2a\u8bed\u8a00\u7684\u5b9e\u73b0\uff1apython\u3001nodejs\u3002 \u672c\u7ae0\u8282\u5c06\u4f1a\u4ece\u4e24\u4e2a\u65b9\u9762\u5168\u9762\u4ecb\u7ecdLangChain\uff1a\u4e00\u4e2a\u662fLangChain\u7ec4\u4ef6\u7684\u57fa\u672c\u6982\u5ff5\u548c\u5e94\u7528\uff1b\u53e6\u4e00\u4e2a\u662fLangChain\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u3002 \u53c2\u8003\u5b98\u7f51\u4ecb\u7ecd\uff1a https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub 2 LangChain\u4e3b\u8981\u7ec4\u4ef6 \u00b6 \u4e00\u4e2aLangChain\u7684\u5e94\u7528\u662f\u9700\u8981\u591a\u4e2a\u7ec4\u4ef6\u5171\u540c\u5b9e\u73b0\u7684\uff0cLangChain\u4e3b\u8981\u652f\u63016\u79cd\u7ec4\u4ef6\uff1a Models\uff1a\u6a21\u578b\uff0c\u5404\u79cd\u7c7b\u578b\u7684\u6a21\u578b\u548c\u6a21\u578b\u96c6\u6210\uff0c\u6bd4\u5982GPT-4 Prompts\uff1a\u63d0\u793a\uff0c\u5305\u62ec\u63d0\u793a\u7ba1\u7406\u3001\u63d0\u793a\u4f18\u5316\u548c\u63d0\u793a\u5e8f\u5217\u5316 Memory\uff1a\u8bb0\u5fc6\uff0c\u7528\u6765\u4fdd\u5b58\u548c\u6a21\u578b\u4ea4\u4e92\u65f6\u7684\u4e0a\u4e0b\u6587\u72b6\u6001 Indexes\uff1a\u7d22\u5f15\uff0c\u7528\u6765\u7ed3\u6784\u5316\u6587\u6863\uff0c\u4ee5\u4fbf\u548c\u6a21\u578b\u4ea4\u4e92 Chains\uff1a\u94fe\uff0c\u4e00\u7cfb\u5217\u5bf9\u5404\u79cd\u7ec4\u4ef6\u7684\u8c03\u7528 Agents\uff1a\u4ee3\u7406\uff0c\u51b3\u5b9a\u6a21\u578b\u91c7\u53d6\u54ea\u4e9b\u884c\u52a8\uff0c\u6267\u884c\u5e76\u4e14\u89c2\u5bdf\u6d41\u7a0b\uff0c\u76f4\u5230\u5b8c\u6210\u4e3a\u6b62 2.1 Models \u00b6 \u73b0\u5728\u5e02\u9762\u4e0a\u7684\u6a21\u578b\u591a\u5982\u725b\u6bdb\uff0c\u5404\u79cd\u5404\u6837\u7684\u6a21\u578b\u4e0d\u65ad\u51fa\u73b0\uff0cLangChain\u6a21\u578b\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u4e0e\u5404\u79cd\u6a21\u578b\u7684\u96c6\u6210\uff0c\u5e76\u4e3a\u6240\u6709\u6a21\u578b\u63d0\u4f9b\u4e00\u4e2a\u7cbe\u7b80\u7684\u7edf\u4e00\u63a5\u53e3\u3002 LangChain\u76ee\u524d\u652f\u6301\u4e09\u79cd\u7c7b\u578b\u7684\u6a21\u578b\uff1aLLMs\u3001Chat Models(\u804a\u5929\u6a21\u578b)\u3001Embeddings Models(\u5d4c\u5165\u6a21\u578b\uff09. LLMs: \u5927\u8bed\u8a00\u6a21\u578b\u63a5\u6536\u6587\u672c\u5b57\u7b26\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u7684\u4e5f\u662f\u6587\u672c\u5b57\u7b26. \u804a\u5929\u6a21\u578b: \u57fa\u4e8eLLMs, \u4e0d\u540c\u7684\u662f\u5b83\u63a5\u6536\u804a\u5929\u6d88\u606f(\u4e00\u79cd\u7279\u5b9a\u683c\u5f0f\u7684\u6570\u636e)\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u7684\u4e5f\u662f\u804a\u5929\u6d88\u606f. \u6587\u672c\u5d4c\u5165\u6a21\u578b: \u6587\u672c\u5d4c\u5165\u6a21\u578b\u63a5\u6536\u6587\u672c\u4f5c\u4e3a\u8f93\u5165, \u8fd4\u56de\u7684\u662f\u6d6e\u70b9\u6570\u5217\u8868. LangChain\u652f\u6301\u7684\u4e09\u7c7b\u6a21\u578b\uff0c\u5b83\u4eec\u7684\u4f7f\u7528\u573a\u666f\u4e0d\u540c\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u4e0d\u540c\uff0c\u5f00\u53d1\u8005\u9700\u8981\u6839\u636e\u9879\u76ee\u9700\u8981\u9009\u62e9\u76f8\u5e94\u3002 2.1.1 LLMs (\u5927\u8bed\u8a00\u6a21\u578b) \u00b6 LLMs\u4f7f\u7528\u573a\u666f\u6700\u591a\uff0c\u5e38\u7528\u5927\u6a21\u578b\u7684\u4e0b\u8f7d\u5e93\uff1a https://huggingface.co/models \uff1a \u63a5\u4e0b\u6765\u6211\u4eec\u501f\u52a9Ollama\u5de5\u5177\u8fdb\u884c\u6a21\u578b\u7684\u4f7f\u7528\uff1a \u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u5b89\u88c5langchain\u5e93 : pip install langchain \u5b89\u88c5langchain_community\u5e93 : pip install langchain_community \u7b2c\u4e8c\u6b65\uff1a\u4ee3\u7801\u5b9e\u73b0 from langchain_community.llms import Ollama model = Ollama ( model = \"qwen2:1.5b\" , temperature = 0 ) result = model . invoke ( \"\u8bf7\u7ed9\u6211\u8bb2\u4e2a\u9b3c\u6545\u4e8b\" ) print ( result ) ##\u6253\u5370\u7ed3\u679c\uff1a \u597d\u7684 \uff0c \u6211\u6765\u7ed9\u60a8\u8bb2\u4e00\u4e2a\u9b3c\u6545\u4e8b \u3002 \u5f88\u4e45\u4ee5\u524d \uff0c \u5728\u4e00\u5ea7\u53e4\u8001\u7684\u57ce\u5821\u91cc \uff0c \u4f4f\u7740\u4e00\u4f4d\u5e74\u8f7b\u7684\u516c\u4e3b\u548c\u5979\u7684\u5bb6\u4eba \u3002 \u4e00\u5929\u665a\u4e0a \uff0c \u5f53\u4ed6\u4eec\u51c6\u5907\u7761\u89c9\u65f6 \uff0c \u7a81\u7136\u542c\u5230\u4e86\u4e00\u9635\u5947\u602a\u7684\u58f0\u97f3 \u3002 \u58f0\u97f3\u8d8a\u6765\u8d8a\u8fd1 \uff0c \u6700\u540e\u505c\u5728\u4e86\u516c\u4e3b\u7684\u623f\u95f4\u95e8\u53e3 \u3002 \u516c\u4e3b\u611f\u5230\u975e\u5e38\u5bb3\u6015 \uff0c \u4f46\u8fd8\u662f\u51b3\u5b9a\u53bb\u770b\u770b \u3002 \u5979\u6253\u5f00\u95e8 \uff0c \u53d1\u73b0\u4e00\u4e2a\u7a7f\u7740\u7834\u65e7\u8863\u670d \u3001 \u957f\u53d1\u62ab\u6563\u7684\u5973\u5b69\u7ad9\u5728\u90a3\u91cc \u3002 \u5973\u5b69\u770b\u8d77\u6765\u5f88\u865a\u5f31 \uff0c \u4f3c\u4e4e\u5df2\u7ecf\u597d\u51e0\u5929\u6ca1\u6709\u8fdb\u98df \u3002 \u516c\u4e3b\u95ee\u5979\u4e3a\u4ec0\u4e48\u5728\u8fd9\u91cc \uff0c \u5973\u5b69\u56de\u7b54\u8bf4\u5979\u8ff7\u8def\u4e86 \uff0c \u627e\u4e0d\u5230\u56de\u5bb6\u7684\u8def \u3002 \u516c\u4e3b\u540c\u60c5\u8fd9\u4e2a\u53ef\u601c\u7684\u5973\u5b69 \uff0c \u5e76\u9080\u8bf7\u5979\u8fdb\u6765\u4f11\u606f \u3002 \u5973\u5b69\u5728\u516c\u4e3b\u7684\u5e8a\u4e0a\u8eba\u4e0b\u540e \uff0c \u5f00\u59cb\u8bb2\u8ff0\u5979\u7684\u6545\u4e8b \u3002 \u539f\u6765 \uff0c \u57ce\u5821\u7684\u4e3b\u4eba\u662f\u4e00\u4e2a\u6b8b\u5fcd\u7684\u7edf\u6cbb\u8005 \uff0c \u4ed6\u7ecf\u5e38\u8650\u5f85\u4ed6\u7684\u81e3\u6c11 \u3002 \u6709\u4e00\u5929 \uff0c \u4ed6\u53d1\u73b0\u4e86\u4e00\u4e2a\u7f8e\u4e3d\u7684\u5e74\u8f7b\u5973\u5b50 \uff0c \u4fbf\u51b3\u5b9a\u5c06\u5979\u4f5c\u4e3a\u81ea\u5df1\u7684\u59bb\u5b50 \u3002 \u7136\u800c \uff0c \u5f53\u5973\u5b50\u8bd5\u56fe\u53cd\u6297\u65f6 \uff0c \u5979\u88ab\u56da\u7981\u5728\u4e00\u4e2a\u5730\u4e0b\u5ba4\u91cc \u3002 \u5973\u5b69\u8bf4 \uff0c \u5979\u4e00\u76f4\u5728\u5bfb\u627e\u56de\u5bb6\u7684\u8def \uff0c \u76f4\u5230\u5979\u9047\u5230\u4e86\u516c\u4e3b \u3002 \u5979\u8bf7\u6c42\u516c\u4e3b\u5e2e\u52a9\u5979\u627e\u5230\u51fa\u8def \uff0c \u56de\u5230\u5979\u7684\u5bb6 \u3002 \u516c\u4e3b\u7b54\u5e94\u4e86 \uff0c \u5e76\u5f00\u59cb\u4e3a\u5979\u7948\u7977 \u3002 \u6700\u540e \uff0c \u5947\u8ff9\u53d1\u751f\u4e86 \uff0c \u57ce\u5821\u7684\u4e3b\u4eba\u88ab\u6124\u6012\u7684\u4eba\u6c11\u6740\u6b7b \uff0c \u800c\u5973\u5b69\u4e5f\u7ec8\u4e8e\u56de\u5230\u4e86\u81ea\u5df1\u7684\u5bb6\u4e2d \u3002 \u8fd9\u4e2a\u6545\u4e8b\u544a\u8bc9\u6211\u4eec \uff0c \u5373\u4f7f\u662f\u6700\u5f3a\u5927\u7684\u7edf\u6cbb\u8005\u4e5f\u65e0\u6cd5\u5ffd\u89c6\u5584\u826f\u548c\u540c\u60c5\u5fc3\u7684\u529b\u91cf \u3002 2.1.2 Chat Models (\u804a\u5929\u6a21\u578b) \u00b6 \u804a\u5929\u6d88\u606f\u5305\u542b\u4e0b\u9762\u51e0\u79cd\u7c7b\u578b\uff0c\u4f7f\u7528\u65f6\u9700\u8981\u6309\u7167\u7ea6\u5b9a\u4f20\u5165\u5408\u9002\u7684\u503c\uff1a AIMessage: \u5c31\u662f AI \u8f93\u51fa\u7684\u6d88\u606f\uff0c\u53ef\u4ee5\u662f\u9488\u5bf9\u95ee\u9898\u7684\u56de\u7b54. HumanMessage: \u4eba\u7c7b\u6d88\u606f\u5c31\u662f\u7528\u6237\u4fe1\u606f\uff0c\u7531\u4eba\u7ed9\u51fa\u7684\u4fe1\u606f\u53d1\u9001\u7ed9LLMs\u7684\u63d0\u793a\u4fe1\u606f\uff0c\u6bd4\u5982\u201c\u5b9e\u73b0\u4e00\u4e2a\u5feb\u901f\u6392\u5e8f\u65b9\u6cd5\u201d. SystemMessage: \u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u6a21\u578b\u5177\u4f53\u6240\u5904\u7684\u73af\u5883\u548c\u80cc\u666f\uff0c\u5982\u89d2\u8272\u626e\u6f14\u7b49\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u7ed9\u51fa\u5177\u4f53\u7684\u6307\u793a\uff0c\u6bd4\u5982\u201c\u4f5c\u4e3a\u4e00\u4e2a\u4ee3\u7801\u4e13\u5bb6\u201d\uff0c\u6216\u8005\u201c\u8fd4\u56dejson\u683c\u5f0f\u201d. ChatMessage: Chat \u6d88\u606f\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u89d2\u8272\u7684\u53c2\u6570\uff0c\u4f46\u662f\u5728\u5927\u591a\u6570\u65f6\u95f4\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u4e0a\u9762\u7684\u4e09\u79cd\u7c7b\u578b. LangChain\u652f\u6301\u7684\u5e38\u89c1\u804a\u5929\u6a21\u578b\u6709\uff1a \u6a21\u578b \u63cf\u8ff0 ChatOpenAI OpenAI\u804a\u5929\u6a21\u578b AzureChatOpenAI Azure\u63d0\u4f9b\u7684OpenAI\u804a\u5929\u6a21\u578b PromptLayerChatOpenAI \u57fa\u4e8eOpenAI\u7684\u63d0\u793a\u6a21\u7248\u5e73\u53f0 \u4e3e\u4f8b\u8bf4\u660e\uff1a from langchain_core.messages import HumanMessage , SystemMessage from langchain_community.chat_models import ChatOllama model = ChatOllama ( model = \"qwen2.5:7b\" , temperature = 0 ) messages = [ SystemMessage ( content = \"\u73b0\u5728\u4f60\u662f\u4e00\u4e2a\u8457\u540d\u7684\u6b4c\u624b\" ), HumanMessage ( content = \"\u7ed9\u6211\u5199\u4e00\u9996\u6b4c\u8bcd\" ) ] res = model ( messages ) print ( res ) print ( res . content ) # \u6253\u5370\u7ed3\u679c\uff1a ''' \u597d\u7684\uff0c\u4ee5\u4e0b\u662f\u4e00\u9996\u7b80\u77ed\u7684\u6b4c\u8bcd\uff1a \u5728\u6bcf\u4e00\u4e2a\u9ece\u660e\u524d\u9192\u6765\uff0c \u5fc3\u4e2d\u5145\u6ee1\u5e0c\u671b\u548c\u68a6\u60f3\u3002 \u6bcf\u4e00\u6b21\u5fc3\u8df3\u90fd\u5e26\u7740\u529b\u91cf\uff0c \u4e3a\u4e86\u5fc3\u4e2d\u7684\u76ee\u6807\uff0c\u6211\u6c38\u4e0d\u653e\u5f03\u3002 \u5728\u8fd9\u6761\u6f2b\u957f\u7684\u8def\u4e0a\uff0c \u6211\u5b66\u4f1a\u4e86\u575a\u5f3a\u548c\u52c7\u6562\u3002 \u65e0\u8bba\u524d\u65b9\u6709\u591a\u5c11\u56f0\u96be\uff0c \u6211\u90fd\u4f1a\u575a\u6301\u5230\u5e95\uff0c\u76f4\u5230\u80dc\u5229\u3002 \u56e0\u4e3a\u6211\u77e5\u9053\uff0c \u6211\u7684\u68a6\u60f3\u4e0d\u4f1a\u88ab\u6253\u8d25\uff0c \u56e0\u4e3a\u6211\u6709\u52c7\u6c14\u53bb\u8ffd\u6c42\uff0c \u56e0\u4e3a\u6211\u76f8\u4fe1\u81ea\u5df1\u80fd\u591f\u6210\u529f\u3002 ''' 2.1.3 \u63d0\u793a\u6a21\u677f \u00b6 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6a21\u578b\u9ed8\u8ba4\u662f\u8fd4\u56de\u7eaf\u6587\u672c\u7ed3\u679c\u7684\uff0c\u5982\u679c\u60f3\u8ba9\u6a21\u578b\u8fd4\u56de\u60f3\u8981\u7684\u6570\u636e\u683c\u5f0f\uff08\u6bd4\u5982json\u683c\u5f0f\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u63d0\u793a\u6a21\u7248\u3002 \u63d0\u793a\u6a21\u677f\u5c31\u662f\u628a\u4e00\u4e9b\u5e38\u89c1\u7684\u63d0\u793a\u6574\u7406\u6210\u6a21\u677f\uff0c\u7528\u6237\u53ea\u9700\u8981\u4fee\u6539\u6a21\u677f\u4e2d\u7279\u5b9a\u7684\u8bcd\u8bed\uff0c\u5c31\u80fd\u5feb\u901f\u51c6\u786e\u5730\u544a\u8bc9\u6a21\u578b\u81ea\u5df1\u7684\u9700\u6c42\u3002\u6211\u4eec\u770b\u4e2a\u4f8b\u5b50\uff1a from langchain_community.chat_models import ChatOllama from langchain.prompts import ChatPromptTemplate # \u521b\u5efa\u539f\u59cb\u6a21\u677f template_str = \"\"\"\u60a8\u662f\u4e00\u4f4d\u4e13\u4e1a\u7684\u9c9c\u82b1\u5e97\u6587\u6848\u64b0\u5199\u5458\u3002 \\n \u5bf9\u4e8e\u552e\u4ef7\u4e3a {price} \u5143\u7684 {flower_name} \uff0c\u60a8\u80fd\u63d0\u4f9b\u4e00\u4e2a\u5438\u5f15\u4eba\u7684\u7b80\u77ed\u63cf\u8ff0\u5417\uff1f # \"\"\" # \u6839\u636e\u539f\u59cb\u6a21\u677f\u521b\u5efaLangChain\u63d0\u793a\u6a21\u677f promp_emplate = ChatPromptTemplate . from_template ( template_str ) prompt = promp_emplate . format_messages ( price = '50' , flower_name = [ \"\u73ab\u7470\" ], ) print ( 'prompt-->' , prompt ) # prompt--> [HumanMessage(content=\"\u60a8\u662f\u4e00\u4f4d\u4e13\u4e1a\u7684\u9c9c\u82b1\u5e97\u6587\u6848\u64b0\u5199\u5458\u3002\\n\\n\u5bf9\u4e8e\u552e\u4ef7\u4e3a 50 \u5143\u7684 ['\u73ab\u7470'] \uff0c\u60a8\u80fd\u63d0\u4f9b\u4e00\u4e2a\u5438\u5f15\u4eba\u7684\u7b80\u77ed\u63cf\u8ff0\u5417\uff1f\\n# \", additional_kwargs={}, response_metadata={})] # \u5b9e\u4f8b\u5316\u6a21\u578b model = ChatOllama ( model = \"qwen2.5:7b\" , temperature = 0 ) # \u6253\u5370\u7ed3\u679c result = model . invoke ( prompt ) print ( result . content ) #\u5f53\u7136\u53ef\u4ee5\uff01\"\u73ab\u7470\uff0c\u552e\u4ef7 50 \u5143\uff0c\u662f\u7231\u60c5\u4e0e\u6d6a\u6f2b\u7684\u8c61\u5f81\u3002\u6bcf\u4e00\u6735\u90fd\u662f\u7cbe\u5fc3\u6311\u9009\u548c\u5305\u88c5\uff0c\u786e\u4fdd\u5176\u5b8c\u7f8e\u65e0\u7455\u3002\u65e0\u8bba\u662f\u5728\u5e86\u795d\u7279\u522b\u7684\u65e5\u5b50\u8fd8\u662f\u7b80\u5355\u7684\u65e5\u5e38\u95ee\u5019\u4e2d\uff0c\u8fd9\u675f\u73ab\u7470\u90fd\u80fd\u4f20\u8fbe\u4f60\u7684\u7231\u610f\u3002\u73b0\u5728\u5c31\u4e3a\u4f60\u7684\u7231\u4eba\u6216\u81ea\u5df1\u9009\u62e9\u4e00\u4efd\u7279\u522b\u7684\u793c\u7269\u5427\uff01\" 2.1.4 Embeddings Models(\u5d4c\u5165\u6a21\u578b) \u00b6 Embeddings Models\u7279\u70b9\uff1a\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u4e00\u4e2a\u6d6e\u52a8\u6570\u7684\u5217\u8868\u3002\u5728NLP\u4e2d\uff0cEmbedding\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u6570\u636e\u8fdb\u884c\u6587\u672c\u5411\u91cf\u5316\u3002 Embeddings Models\u53ef\u4ee5\u4e3a\u6587\u672c\u521b\u5efa\u5411\u91cf\u6620\u5c04\uff0c\u8fd9\u6837\u5c31\u80fd\u5728\u5411\u91cf\u7a7a\u95f4\u91cc\u53bb\u8003\u8651\u6587\u672c\uff0c\u6267\u884c\u8bf8\u5982\u8bed\u4e49\u641c\u7d22\u4e4b\u7c7b\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u5bfb\u627e\u76f8\u4f3c\u7684\u6587\u672c\u7247\u6bb5\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4ee5\u4e00\u4e2aqwen\u6587\u672c\u5d4c\u5165\u6a21\u578b\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff1a from langchain_community.embeddings import OllamaEmbeddings model = OllamaEmbeddings ( model = \"mxbai-embed-large\" , temperature = 0 ) res1 = model . embed_query ( '\u8fd9\u662f\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u6587\u6863' ) print ( res1 ) res2 = model . embed_documents ([ '\u8fd9\u662f\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u6587\u6863' , '\u8fd9\u662f\u7b2c\u4e8c\u4e2a\u6d4b\u8bd5\u6587\u6863' ]) print ( res2 ) \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5206\u522b\u4f7f\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\u6765\u8fdb\u884c\u6587\u672c\u7684\u5411\u91cf\u8868\u793a\uff0c\u4ed6\u4eec\u6700\u5927\u4e0d\u540c\u5728\u4e8e\uff1aembed_query()\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8f93\u5165\uff0c\u800cembed_documents\u53ef\u4ee5\u63a5\u6536\u4e00\u7ec4\u5b57\u7b26\u4e32\u3002 LangChain\u96c6\u6210\u7684\u6587\u672c\u5d4c\u5165\u6a21\u578b\u6709\uff1a AzureOpenAI\u3001Baidu Qianfan\u3001Hugging Face Hub\u3001OpenAI\u3001Llama-cpp\u3001SentenceTransformers 2.2 Prompts \u00b6 Prompt\u662f\u6307\u5f53\u7528\u6237\u8f93\u5165\u4fe1\u606f\u7ed9\u6a21\u578b\u65f6\u52a0\u5165\u7684\u63d0\u793a\uff0c\u8fd9\u4e2a\u63d0\u793a\u7684\u5f62\u5f0f\u53ef\u4ee5\u662fzero-shot\u6216\u8005few-shot\u7b49\u65b9\u5f0f\uff0c\u76ee\u7684\u662f\u8ba9\u6a21\u578b\u7406\u89e3\u66f4\u4e3a\u590d\u6742\u7684\u4e1a\u52a1\u573a\u666f\u4ee5\u4fbf\u66f4\u597d\u7684\u89e3\u51b3\u95ee\u9898\u3002 \u63d0\u793a\u6a21\u677f\uff1a\u5982\u679c\u4f60\u6709\u4e86\u4e00\u4e2a\u8d77\u4f5c\u7528\u7684\u63d0\u793a\uff0c\u4f60\u53ef\u80fd\u60f3\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u6a21\u677f\u7528\u4e8e\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\uff0cLangChain\u5c31\u63d0\u4f9b\u4e86PromptTemplates\u7ec4\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f60\u66f4\u65b9\u4fbf\u7684\u6784\u5efa\u63d0\u793a\u3002 zero-shot\u63d0\u793a\u65b9\u5f0f\uff1a from langchain import PromptTemplate from langchain_community.llms import Ollama model = Ollama ( model = \"qwen2.5:7b\" ) # \u5b9a\u4e49\u6a21\u677f template = \"\u6211\u7684\u90bb\u5c45\u59d3 {lastname} \uff0c\u4ed6\u751f\u4e86\u4e2a\u513f\u5b50\uff0c\u7ed9\u4ed6\u513f\u5b50\u8d77\u4e2a\u540d\u5b57\" prompt = PromptTemplate ( input_variables = [ \"lastname\" ], template = template , ) prompt_text = prompt . format ( lastname = \"\u738b\" ) print ( prompt_text ) # result: \u6211\u7684\u90bb\u5c45\u59d3\u738b\uff0c\u4ed6\u751f\u4e86\u4e2a\u513f\u5b50\uff0c\u7ed9\u4ed6\u513f\u5b50\u8d77\u4e2a\u540d\u5b57 result = model ( prompt_text ) print ( result ) ''' \u5982\u679c\u60a8\u7684\u90bb\u5c45\u60f3\u8981\u7ed9\u4ed6\u7684\u513f\u5b50\u8d77\u4e00\u4e2a\u540d\u5b57\uff0c\u53ef\u4ee5\u8003\u8651\u4ee5\u4e0b\u5efa\u8bae\uff1a 1. **\u4e2a\u6027\u5316\u9009\u62e9**\uff1a\u6839\u636e\u5b69\u5b50\u7684\u6027\u522b\u3001\u5e74\u9f84\u6216\u8005\u5176\u4ed6\u4e2a\u4eba\u559c\u597d\u6765\u547d\u540d\u3002 2. **\u4f20\u7edf\u6216\u6d41\u884c\u7684\u540d\u5b57**\uff1a\u53ef\u4ee5\u4ece\u4f20\u7edf\u6587\u5316\u4e2d\u5bfb\u627e\u7075\u611f\uff0c\u6216\u8005\u53c2\u8003\u5f53\u524d\u6bd4\u8f83\u6d41\u884c\u7684\u7537\u5b69\u540d\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5b69\u5b50\u662f\u7537\u5b69\uff0c\u53ef\u4ee5\u9009\u62e9\u201c\u5b87\u822a\u201d\u3001\u201c\u6d69\u7136\u201d\u3001\u201c\u542f\u660e\u201d\u7b49\u5bcc\u6709\u5bd3\u610f\u7684\u6c49\u5b57\u4f5c\u4e3a\u540d\u5b57\u3002 3. **\u7ed3\u5408\u5bb6\u65cf\u80cc\u666f\u548c\u59d3\u6c0f**\uff1a\u5982\u679c\u60a8\u60f3\u4fdd\u6301\u4e0e\u90bb\u5c45\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4ed6\u7684\u59d3\u6c0f\u4f5c\u4e3a\u5b69\u5b50\u7684\u540d\u5b57\u7684\u4e00\u90e8\u5206\uff0c\u5982\u201c\u738b\u5b87\u822a\u201d\u3001\u201c\u738b\u6d69\u7136\u201d\u3002 4. **\u7b80\u5355\u6613\u8bfb\u7684\u540d\u5b57**\uff1a\u907f\u514d\u8fc7\u4e8e\u590d\u6742\u7684\u6216\u62d7\u53e3\u7684\u540d\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u5b69\u5b50\u6210\u957f\u8fc7\u7a0b\u4e2d\u7684\u53d1\u97f3\u3002 \u8bf7\u8bb0\u4f4f\uff0c\u65e0\u8bba\u9009\u62e9\u54ea\u79cd\u65b9\u5f0f\u547d\u540d\uff0c\u91cd\u8981\u7684\u662f\u8981\u8003\u8651\u5230\u5b69\u5b50\u7684\u6027\u683c\u7279\u70b9\u548c\u672a\u6765\u53d1\u5c55\u3002 ''' few-shot\u63d0\u793a\u65b9\u5f0f\uff1a from langchain import PromptTemplate , FewShotPromptTemplate from langchain_community.llms import Ollama model = Ollama ( model = \"qwen2.5:7b\" ) examples = [ { \"word\" : \"\u5f00\u5fc3\" , \"antonym\" : \"\u96be\u8fc7\" }, { \"word\" : \"\u9ad8\" , \"antonym\" : \"\u77ee\" }, ] example_template = \"\"\" \u5355\u8bcd: {word} \u53cd\u4e49\u8bcd: {antonym} \\\\ n \"\"\" example_prompt = PromptTemplate ( input_variables = [ \"word\" , \"antonym\" ], template = example_template , ) few_shot_prompt = FewShotPromptTemplate ( examples = examples , example_prompt = example_prompt , prefix = \"\u7ed9\u51fa\u6bcf\u4e2a\u5355\u8bcd\u7684\u53cd\u4e49\u8bcd\" , suffix = \"\u5355\u8bcd: {input} \\\\ n\u53cd\u4e49\u8bcd:\" , input_variables = [ \"input\" ], example_separator = \" \\\\ n\" , ) prompt_text = few_shot_prompt . format ( input = \"\u7c97\" ) print ( prompt_text ) print ( '*' * 80 ) # \u7ed9\u51fa\u6bcf\u4e2a\u5355\u8bcd\u7684\u53cd\u4e49\u8bcd # \u5355\u8bcd: \u5f00\u5fc3 # \u53cd\u4e49\u8bcd: \u96be\u8fc7 # \u5355\u8bcd: \u9ad8 # \u53cd\u4e49\u8bcd: \u77ee # \u5355\u8bcd: \u7c97 # \u53cd\u4e49\u8bcd: # \u8c03\u7528\u6a21\u578b print ( model ( prompt_text )) # \u7ec6 2.3 Chains(\u94fe) \u00b6 \u5728LangChain\u4e2d\uff0cChains\u63cf\u8ff0\u4e86\u5c06LLM\u4e0e\u5176\u4ed6\u7ec4\u4ef6\u7ed3\u5408\u8d77\u6765\u5b8c\u6210\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u8fc7\u7a0b. \u9488\u5bf9\u4e0a\u4e00\u5c0f\u8282\u7684\u63d0\u793a\u6a21\u7248\u4f8b\u5b50\uff0czero-shot\u91cc\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u94fe\u6765\u8fde\u63a5\u63d0\u793a\u6a21\u7248\u7ec4\u4ef6\u548c\u6a21\u578b\uff0c\u8fdb\u800c\u53ef\u4ee5\u5b9e\u73b0\u4ee3\u7801\u7684\u66f4\u6539\uff1a from langchain import PromptTemplate from langchain_community.llms import Ollama from langchain.chains import LLMChain # \u5b9a\u4e49\u6a21\u677f template = \"\u6211\u7684\u90bb\u5c45\u59d3 {lastname} \uff0c\u4ed6\u751f\u4e86\u4e2a\u513f\u5b50\uff0c\u7ed9\u4ed6\u513f\u5b50\u8d77\u4e2a\u540d\u5b57\" prompt = PromptTemplate ( input_variables = [ \"lastname\" ], template = template , ) llm = Ollama ( model = \"qwen2.5:7b\" ) chain = LLMChain ( llm = llm , prompt = prompt ) # \u6267\u884c\u94fe print ( chain . run ( \"\u738b\" )) \u5982\u679c\u4f60\u60f3\u5c06\u7b2c\u4e00\u4e2a\u6a21\u578b\u8f93\u51fa\u7684\u7ed3\u679c\uff0c\u76f4\u63a5\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u6a21\u578b\u7684\u8f93\u5165\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528LangChain\u7684SimpleSequentialChain, \u4ee3\u7801\u5982\u4e0b\uff1a from langchain import PromptTemplate from langchain_community.llms import Ollama from langchain.chains import LLMChain , SimpleSequentialChain # \u521b\u5efa\u7b2c\u4e00\u6761\u94fe template = \"\u6211\u7684\u90bb\u5c45\u59d3 {lastname} \uff0c\u4ed6\u751f\u4e86\u4e2a\u513f\u5b50\uff0c\u7ed9\u4ed6\u513f\u5b50\u8d77\u4e2a\u540d\u5b57\" first_prompt = PromptTemplate ( input_variables = [ \"lastname\" ], template = template , ) llm = Ollama ( model = \"qwen2.5:7b\" ) first_chain = LLMChain ( llm = llm , prompt = first_prompt ) # \u521b\u5efa\u7b2c\u4e8c\u6761\u94fe second_prompt = PromptTemplate ( input_variables = [ \"child_name\" ], template = \"\u90bb\u5c45\u7684\u513f\u5b50\u540d\u5b57\u53eb {child_name} \uff0c\u7ed9\u4ed6\u8d77\u4e00\u4e2a\u5c0f\u540d\" , ) second_chain = LLMChain ( llm = llm , prompt = second_prompt ) # \u94fe\u63a5\u4e24\u6761\u94fe overall_chain = SimpleSequentialChain ( chains = [ first_chain , second_chain ], verbose = True ) print ( overall_chain ) print ( '*' * 80 ) # \u6267\u884c\u94fe\uff0c\u53ea\u9700\u8981\u4f20\u5165\u7b2c\u4e00\u4e2a\u53c2\u6570 catchphrase = overall_chain . run ( \"\u738b\" ) print ( catchphrase ) 2.4 Agents (\u4ee3\u7406) \u00b6 Agents \u4e5f\u5c31\u662f\u4ee3\u7406\uff0c\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5229\u7528\u4e00\u4e2a\u8bed\u8a00\u6a21\u578b\u6765\u9009\u62e9\u4e00\u7cfb\u5217\u8981\u6267\u884c\u7684\u52a8\u4f5c\u3002 \u5728 LangChain \u4e2d Agents \u7684\u4f5c\u7528\u5c31\u662f\u6839\u636e\u7528\u6237\u7684\u9700\u6c42\uff0c\u6765\u8bbf\u95ee\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5de5\u5177(\u6bd4\u5982\uff1a\u641c\u7d22\u5f15\u64ce\u6216\u8005\u6570\u636e\u5e93)\uff0c\u8fdb\u800c\u6765\u89e3\u51b3\u76f8\u5173\u9700\u6c42\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u501f\u52a9\u7b2c\u4e09\u65b9\u5e93\uff1f \u56e0\u4e3a\u5927\u6a21\u578b\u867d\u7136\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u662f\u4e5f\u5177\u5907\u4e00\u5b9a\u7684\u5c40\u9650\u6027\uff0c\u6bd4\u5982\u4e0d\u80fd\u56de\u7b54\u5b9e\u65f6\u4fe1\u606f\u3001\u5904\u7406\u6570\u5b66\u903b\u8f91\u95ee\u9898\u4ecd\u7136\u975e\u5e38\u7684\u521d\u7ea7\u7b49\u7b49\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u501f\u52a9\u7b2c\u4e09\u65b9\u5de5\u5177\u6765\u8f85\u52a9\u5927\u6a21\u578b\u7684\u5e94\u7528\u3002 \u51e0\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\uff1a Agent\u4ee3\u7406\uff1a \u5236\u5b9a\u8ba1\u5212\u548c\u601d\u8003\u4e0b\u4e00\u6b65\u9700\u8981\u91c7\u53d6\u7684\u884c\u52a8\u3002 \u8d1f\u8d23\u63a7\u5236\u6574\u6bb5\u4ee3\u7801\u7684\u903b\u8f91\u548c\u6267\u884c\uff0c\u4ee3\u7406\u66b4\u9732\u4e86\u4e00\u4e2a\u63a5\u53e3\uff0c\u7528\u6765\u63a5\u6536\u7528\u6237\u8f93\u5165\u3002 LangChain \u63d0\u4f9b\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u4ee3\u7406\uff08\u4ee5\u5176\u4e2d\u4e09\u79cd\u4e3e\u4f8b\uff09: zero-shot-react-description: \u5229\u7528 ReAct \u6846\u67b6\u6839\u636e\u5de5\u5177\u7684\u63cf\u8ff0\u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u5de5\u5177\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u5de5\u5177\uff0c\u4f46\u9700\u8981\u4e3a\u6bcf\u4e2a\u5de5\u5177\u63d0\u4f9b\u63cf\u8ff0\u4fe1\u606f\u3002\u5de5\u5177\u7684\u9009\u62e9\u5355\u7eaf\u4f9d\u9760\u5de5\u5177\u7684\u63cf\u8ff0\u4fe1\u606f\u3002 structured-chat-zero-shot-react-description\uff1a\u76f8\u8f83\u4e8e\u5355\u4e00\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\u7684\u4ee3\u7406\uff0c\u8be5\u7c7b\u578b\u7684\u4ee3\u7406\u53ef\u4ee5\u901a\u8fc7\u5de5\u5177\u7684\u53c2\u6570schema\u521b\u5efa\u7ed3\u6784\u5316\u7684\u52a8\u4f5c\u8f93\u5165\u3002 conversational-react-description\uff1a\u8fd9\u7c7b\u4ee3\u7406\u4e13\u4e3a\u5bf9\u8bdd\u573a\u666f\u8bbe\u8ba1\uff0c\u4f7f\u7528\u5177\u6709\u5bf9\u8bdd\u6027\u7684\u63d0\u793a\u8bcd\uff0c\u5229\u7528 ReAct \u6846\u67b6\u9009\u62e9\u5de5\u5177\uff0c\u5e76\u5229\u7528\u8bb0\u5fc6\u529f\u80fd\u6765\u4fdd\u5b58\u5bf9\u8bdd\u5386\u53f2\u3002 Tool\u5de5\u5177\uff1a \u89e3\u51b3\u95ee\u9898\u7684\u5de5\u5177 \u7b2c\u4e09\u65b9\u670d\u52a1\u7684\u96c6\u6210\uff0c\u4f8b\u5982\u8ba1\u7b97\u3001\u7f51\u7edc(\u8c37\u6b4c\u3001bing)\u3001\u4ee3\u7801\u6267\u884c\u7b49\u7b49 \u73b0\u5728\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u4f7f\u7528\u4ee3\u7406\u7684\u4f8b\u5b50\uff1a\u5047\u8bbe\u6211\u4eec\u60f3 \"\"\"\u89e3\u4ee5\u4e0b\u65b9\u7a0b\uff1a3x + 4(x + 2) - 84 = y; \u5176\u4e2dx\u4e3a3\uff0c\u8bf7\u95eey\u662f\u591a\u5c11\uff1f\"\"\"\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee3\u7406\u5de5\u5177\uff0c\u8ba9Agents\u9009\u62e9\u6267\u884c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a import os from langchain.agents import load_tools from langchain.agents import initialize_agent from langchain.agents import AgentType from langchain_community.llms import Ollama # \u5b9e\u4f8b\u5316\u5927\u6a21\u578b llm = Ollama ( model = \"qwen2.5:7b\" ) # \u8bbe\u7f6e\u5de5\u5177 # \"serpapi\"\u5b9e\u65f6\u8054\u7f51\u641c\u7d20\u5de5\u5177\u3001\"math\": \u6570\u5b66\u8ba1\u7b97\u7684\u5de5\u5177 # tools = load_tools([\"serpapi\", \"llm-math\"], llm=llm) tools = load_tools ([ \"llm-math\" ], llm = llm ) # \u5b9e\u4f8b\u5316\u4ee3\u7406Agent:\u8fd4\u56de AgentExecutor \u7c7b\u578b\u7684\u5b9e\u4f8b agent = initialize_agent ( tools , llm , agent = AgentType . ZERO_SHOT_REACT_DESCRIPTION , verbose = True ) print ( 'agent' , agent ) # \u51c6\u5907\u63d0\u793a\u8bcd from langchain_core.prompts import PromptTemplate prompt_template = \"\"\"\u89e3\u4ee5\u4e0b\u65b9\u7a0b\uff1a3x + 4(x + 2) - 84 = y; \u5176\u4e2dx\u4e3a3\uff0c\u8bf7\u95eey\u662f\u591a\u5c11\uff1f\"\"\" prompt = PromptTemplate . from_template ( prompt_template ) print ( 'prompt-->' , prompt ) # \u4ee3\u7406Agent\u5de5\u4f5c result = agent . run ( prompt ) print ( result ) \u6ce8\u610f\uff0c\u5982\u679c\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\u4f60\u8981\u4f7f\u7528serpapi\uff0c \u9700\u8981\u7533\u8bf7 serpapi token\uff0c\u5e76\u4e14\u8bbe\u7f6e\u5230\u73af\u5883\u53d8\u91cf SERPAPI_API_KEY \uff0c\u7136\u540e\u5b89\u88c5\u4f9d\u8d56\u5305 google-search-results \u67e5\u8be2\u6240\u6709\u5de5\u5177\u7684\u540d\u79f0 from langchain.agents import get_all_tool_names results = get_all_tool_names () print ( results ) # ['python_repl', 'requests', 'requests_get', 'requests_post', 'requests_patch', 'requests_put', 'requests_delete', 'terminal', 'sleep', 'wolfram-alpha', 'google-search', 'google-search-results-json', 'searx-search-results-json', 'bing-search', 'metaphor-search', 'ddg-search', 'google-serper', 'google-scholar', 'google-serper-results-json', 'searchapi', 'searchapi-results-json', 'serpapi', 'dalle-image-generator', 'twilio', 'searx-search', 'wikipedia', 'arxiv', 'golden-query', 'pubmed', 'human', 'awslambda', 'sceneXplain', 'graphql', 'openweathermap-api', 'dataforseo-api-search', 'dataforseo-api-search-json', 'eleven_labs_text2speech', 'google_cloud_texttospeech', 'news-api', 'tmdb-api', 'podcast-api', 'memorize', 'llm-math', 'open-meteo-api'] LangChain\u652f\u6301\u7684\u5de5\u5177\u5982\u4e0b\uff1a \u5de5\u5177 \u63cf\u8ff0 Bing Search Bing\u641c\u7d22 Google Search Google\u641c\u7d22 Google Serper API \u4e00\u4e2a\u4ecegoogle\u641c\u7d22\u63d0\u53d6\u6570\u636e\u7684API Python REPL \u6267\u884cpython\u4ee3\u7801 Requests \u6267\u884cpython\u4ee3\u7801 2.5 Memory \u00b6 \u5927\u6a21\u578b\u672c\u8eab\u4e0d\u5177\u5907\u4e0a\u4e0b\u6587\u7684\u6982\u5ff5\uff0c\u5b83\u5e76\u4e0d\u4fdd\u5b58\u4e0a\u6b21\u4ea4\u4e92\u7684\u5185\u5bb9\uff0cChatGPT\u4e4b\u6240\u4ee5\u80fd\u591f\u548c\u4eba\u6b63\u5e38\u6c9f\u901a\u5bf9\u8bdd\uff0c\u56e0\u4e3a\u5b83\u8fdb\u884c\u4e86\u4e00\u5c42\u5c01\u88c5\uff0c\u5c06\u5386\u53f2\u8bb0\u5f55\u56de\u4f20\u7ed9\u4e86\u6a21\u578b\u3002 \u56e0\u6b64 LangChain \u4e5f\u63d0\u4f9b\u4e86Memory\u7ec4\u4ef6, Memory\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff1a\u77ed\u671f\u8bb0\u5fc6\u548c\u957f\u671f\u8bb0\u5fc6\u3002\u77ed\u671f\u8bb0\u5fc6\u4e00\u822c\u6307\u5355\u4e00\u4f1a\u8bdd\u65f6\u4f20\u9012\u6570\u636e\uff0c\u957f\u671f\u8bb0\u5fc6\u5219\u662f\u5904\u7406\u591a\u4e2a\u4f1a\u8bdd\u65f6\u83b7\u53d6\u548c\u66f4\u65b0\u4fe1\u606f\u3002 \u76ee\u524d\u7684Memory\u7ec4\u4ef6\u53ea\u9700\u8981\u8003\u8651ChatMessageHistory\u3002\u4e3e\u4f8b\u5206\u6790\uff1a from langchain.memory import ChatMessageHistory history = ChatMessageHistory () history . add_user_message ( \"\u5728\u5417\uff1f\" ) history . add_ai_message ( \"\u6709\u4ec0\u4e48\u4e8b?\" ) print ( history . messages ) #\u6253\u5370\u7ed3\u679c\uff1a ''' [HumanMessage(content='\u5728\u5417\uff1f'), AIMessage(content='\u6709\u4ec0\u4e48\u4e8b?')] ''' \u548c Qianfan\u7ed3\u5408\uff0c\u76f4\u63a5\u4f7f\u7528 ConversationChain \uff1a from langchain import ConversationChain from langchain_community.llms import Ollama # \u5b9e\u4f8b\u5316\u5927\u6a21\u578b llm = Ollama ( model = \"qwen2.5:7b\" ) conversation = ConversationChain ( llm = llm ) resut1 = conversation . predict ( input = \"\u5c0f\u660e\u67091\u53ea\u732b\" ) print ( resut1 ) print ( '*' * 80 ) resut2 = conversation . predict ( input = \"\u5c0f\u521a\u67092\u53ea\u72d7\" ) print ( resut2 ) print ( '*' * 80 ) resut3 = conversation . predict ( input = \"\u5c0f\u660e\u548c\u5c0f\u521a\u4e00\u5171\u6709\u51e0\u53ea\u5ba0\u7269?\" ) print ( resut3 ) print ( '*' * 80 ) # \u6253\u5370\u7ed3\u679c\uff1a ''' \u5c0f\u660e\u6709\u4e00\u53ea\u732b\uff0c\u90a3\u8fd9\u53ea\u732b\u53eb\u4ec0\u4e48\u540d\u5b57\u5462\uff1f\u6216\u8005\u4f60\u60f3\u8981\u544a\u8bc9\u6211\u4e00\u4e9b\u5173\u4e8e\u5c0f\u660e\u548c\u4ed6\u732b\u54aa\u7684\u6545\u4e8b\u5417\uff1f ******************************************************************************** \u5c0f\u521a\u5bb6\u6709\u4e24\u53ea\u72d7\uff0c\u90a3\u8fd9\u4e24\u4f4d\u5fe0\u8bda\u7684\u5c0f\u4f19\u4f34\u53eb\u4ec0\u4e48\u5462\uff1f\u8fd8\u662f\u8bf4\u4f60\u53ef\u4ee5\u5206\u4eab\u4e00\u4e0b\u5c0f\u521a\u548c\u4ed6\u7684\u72d7\u72d7\u4eec\u7684\u8da3\u4e8b\u5417\uff1f\u6bd4\u5982\u4ed6\u4eec\u4e00\u8d77\u505a\u4e86\u4e9b\u4ec0\u4e48\u6709\u8da3\u7684\u4e8b\u60c5\u5462\uff1f ******************************************************************************** \u5c0f\u660e\u548c\u5c0f\u521a\u603b\u5171\u67093\u53ea\u5ba0\u7269\u3002\u5c0f\u660e\u67091\u53ea\u732b\uff0c\u5c0f\u521a\u67092\u53ea\u72d7\u3002\u5982\u679c\u4f60\u613f\u610f\u5206\u4eab\u66f4\u591a\u5173\u4e8e\u4ed6\u4eec\u7684\u6545\u4e8b\u6216\u60f3\u77e5\u9053\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\uff0c\u8bf7\u968f\u65f6\u544a\u8bc9\u6211\uff01 ******************************************************************************** ''' \u5982\u679c\u8981\u50cfchatGPT\u4e00\u6837\uff0c\u957f\u671f\u4fdd\u5b58\u5386\u53f2\u6d88\u606f\uff0c\uff0c\u53ef\u4ee5\u4f7f\u7528 messages_to_dict \u65b9\u6cd5 from langchain.memory import ChatMessageHistory from langchain.schema import messages_from_dict , messages_to_dict history = ChatMessageHistory () history . add_user_message ( \"hi!\" ) history . add_ai_message ( \"whats up?\" ) dicts = messages_to_dict ( history . messages ) print ( dicts ) ''' [{'type': 'human', 'data': {'content': 'hi!', 'additional_kwargs': {}, 'type': 'human', 'example': False}}, {'type': 'ai', 'data': {'content': 'whats up?', 'additional_kwargs': {}, 'type': 'ai', 'example': False}}] ''' # \u8bfb\u53d6\u5386\u53f2\u6d88\u606f new_messages = messages_from_dict ( dicts ) print ( new_messages ) #[HumanMessage(content='hi!'), AIMessage(content='whats up?')] 2.6 Indexes (\u7d22\u5f15) \u00b6 Indexes\u7ec4\u4ef6\u7684\u76ee\u7684\u662f\u8ba9LangChain\u5177\u5907\u5904\u7406\u6587\u6863\u5904\u7406\u7684\u80fd\u529b\uff0c\u5305\u62ec\uff1a\u6587\u6863\u52a0\u8f7d\u3001\u68c0\u7d22\u7b49\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u6587\u6863\u4e0d\u5c40\u9650\u4e8etxt\u3001pdf\u7b49\u6587\u672c\u7c7b\u5185\u5bb9\uff0c\u8fd8\u6db5\u76d6email\u3001\u533a\u5757\u94fe\u3001\u89c6\u9891\u7b49\u5185\u5bb9\u3002 Indexes\u7ec4\u4ef6\u4e3b\u8981\u5305\u542b\u7c7b\u578b\uff1a \u6587\u6863\u52a0\u8f7d\u5668 \u6587\u672c\u5206\u5272\u5668 VectorStores \u68c0\u7d22\u5668 2.6.1 \u6587\u6863\u52a0\u8f7d\u5668 \u00b6 \u6587\u6863\u52a0\u8f7d\u5668\u4e3b\u8981\u57fa\u4e8e Unstructured \u5305\uff0c Unstructured \u662f\u4e00\u4e2apython\u5305\uff0c\u53ef\u4ee5\u628a\u5404\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\u8f6c\u6362\u6210\u6587\u672c\u3002 \u6587\u6863\u52a0\u8f7d\u5668\u4f7f\u7528\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5f15\u5165\u76f8\u5e94\u7684loader\u5de5\u5177\uff1a from langchain_community.document_loaders import UnstructuredFileLoader loader = UnstructuredFileLoader ( '\u8863\u670d\u5c5e\u6027.txt' , encoding = 'utf8' ) docs = loader . load () print ( docs ) print ( len ( docs )) first_01 = docs [ 0 ] . page_content [: 4 ] print ( first_01 ) print ( '*' * 80 ) from langchain_community.document_loaders import TextLoader loader = TextLoader ( '\u8863\u670d\u5c5e\u6027.txt' , encoding = 'utf8' ) docs = loader . load () print ( docs ) print ( len ( docs )) first_01 = docs [ 0 ] . page_content [: 4 ] print ( first_01 ) # \u6253\u5370\u7ed3\u679c\uff1a ''' [Document(page_content='\u8eab\u9ad8\uff1a160-170cm\uff0c \u4f53\u91cd\uff1a90-115\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801M\u3002\\n\u8eab\u9ad8\uff1a165-175cm\uff0c \u4f53\u91cd\uff1a115-135\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801L\u3002\\n\u8eab\u9ad8\uff1a170-178cm\uff0c \u4f53\u91cd\uff1a130-150\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801XL\u3002\\n\u8eab\u9ad8\uff1a175-182cm\uff0c \u4f53\u91cd\uff1a145-165\u65a4\uff0c\u5efa\u8bae\u5c3a\u78012XL\u3002\\n\u8eab\u9ad8\uff1a178-185cm\uff0c \u4f53\u91cd\uff1a160-180\u65a4\uff0c\u5efa\u8bae\u5c3a\u78013XL\u3002\\n\u8eab\u9ad8\uff1a180-190cm\uff0c \u4f53\u91cd\uff1a180-210\u65a4\uff0c\u5efa\u8bae\u5c3a\u78014XL\u3002\\n\u9762\u6599\u5206\u7c7b\uff1a\u5176\u4ed6\\n\u56fe\u6848\uff1a\u7eaf\u8272\\n\u9886\u578b\uff1a\u7ffb\u9886\\n\u8863\u95e8\u895f\uff1a\u5355\u6392\u6263\\n\u989c\u8272\uff1a\u9ed1\u8272 \u5361\u5176\u8272 \u7c89\u8272 \u674f\u8272\\n\u8896\u578b\uff1a\u6536\u53e3\u8896\\n\u9002\u7528\u5b63\u8282\uff1a\u51ac\u5b63\\n\u8896\u957f\uff1a\u957f\u8896\\n\u539a\u8584\uff1a\u539a\u6b3e\\n\u9002\u7528\u573a\u666f\uff1a\u5176\u4ed6\u4f11\u95f2\\n\u8863\u957f\uff1a\u5e38\u89c4\u6b3e\\n\u7248\u578b\uff1a\u5bbd\u677e\u578b\\n\u6b3e\u5f0f\u7ec6\u8282\uff1a\u5047\u4e24\u4ef6\\n\u5de5\u827a\u5904\u7406\uff1a\u514d\u70eb\u5904\u7406\\n\u9002\u7528\u5bf9\u8c61\uff1a\u9752\u5e74\\n\u9762\u6599\u529f\u80fd\uff1a\u4fdd\u6696\\n\u7a7f\u642d\u65b9\u5f0f\uff1a\u5916\u7a7f\\n\u9500\u552e\u6e20\u9053\u7c7b\u578b\uff1a\u7eaf\u7535\u5546(\u53ea\u5728\u7ebf\u4e0a\u9500\u552e)\\n\u6750\u8d28\u6210\u5206\uff1a\u68c9100%', metadata={'source': '\u8863\u670d\u5c5e\u6027.txt'})] 1 \u8eab\u9ad8\uff1a1 ******************************************************************************** [Document(page_content='\u8eab\u9ad8\uff1a160-170cm\uff0c \u4f53\u91cd\uff1a90-115\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801M\u3002\\n\\n\u8eab\u9ad8\uff1a165-175cm\uff0c \u4f53\u91cd\uff1a115-135\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801L\u3002\\n\\n\u8eab\u9ad8\uff1a170-178cm\uff0c \u4f53\u91cd\uff1a130-150\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801XL\u3002\\n\\n\u8eab\u9ad8\uff1a175-182cm\uff0c \u4f53\u91cd\uff1a145-165\u65a4\uff0c\u5efa\u8bae\u5c3a\u78012XL\u3002\\n\\n\u8eab\u9ad8\uff1a178-185cm\uff0c \u4f53\u91cd\uff1a160-180\u65a4\uff0c\u5efa\u8bae\u5c3a\u78013XL\u3002\\n\\n\u8eab\u9ad8\uff1a180-190cm\uff0c \u4f53\u91cd\uff1a180-210\u65a4\uff0c\u5efa\u8bae\u5c3a\u78014XL\u3002\\n\\n\u9762\u6599\u5206\u7c7b\uff1a\u5176\u4ed6\\n\\n\u56fe\u6848\uff1a\u7eaf\u8272\\n\\n\u9886\u578b\uff1a\u7ffb\u9886\\n\\n\u8863\u95e8\u895f\uff1a\u5355\u6392\u6263\\n\\n\u989c\u8272\uff1a\u9ed1\u8272 \u5361\u5176\u8272 \u7c89\u8272 \u674f\u8272\\n\\n\u8896\u578b\uff1a\u6536\u53e3\u8896\\n\\n\u9002\u7528\u5b63\u8282\uff1a\u51ac\u5b63\\n\\n\u8896\u957f\uff1a\u957f\u8896\\n\\n\u539a\u8584\uff1a\u539a\u6b3e\\n\\n\u9002\u7528\u573a\u666f\uff1a\u5176\u4ed6\u4f11\u95f2\\n\\n\u8863\u957f\uff1a\u5e38\u89c4\u6b3e\\n\\n\u7248\u578b\uff1a\u5bbd\u677e\u578b\\n\\n\u6b3e\u5f0f\u7ec6\u8282\uff1a\u5047\u4e24\u4ef6\\n\\n\u5de5\u827a\u5904\u7406\uff1a\u514d\u70eb\u5904\u7406\\n\\n\u9002\u7528\u5bf9\u8c61\uff1a\u9752\u5e74\\n\\n\u9762\u6599\u529f\u80fd\uff1a\u4fdd\u6696\\n\\n\u7a7f\u642d\u65b9\u5f0f\uff1a\u5916\u7a7f\\n\\n\u9500\u552e\u6e20\u9053\u7c7b\u578b\uff1a\u7eaf\u7535\u5546(\u53ea\u5728\u7ebf\u4e0a\u9500\u552e)\\n\\n\u6750\u8d28\u6210\u5206\uff1a\u68c9100%', metadata={'source': '\u8863\u670d\u5c5e\u6027.txt'})] 1 \u8eab\u9ad8\uff1a1 ''' LangChain\u652f\u6301\u7684\u6587\u6863\u52a0\u8f7d\u5668 (\u90e8\u5206)\uff1a \u6587\u6863\u52a0\u8f7d\u5668 \u63cf\u8ff0 CSV CSV\u95ee\u4ef7 JSON Files \u52a0\u8f7dJSON\u6587\u4ef6 Jupyter Notebook \u52a0\u8f7dnotebook\u6587\u4ef6 Markdown \u52a0\u8f7dmarkdown\u6587\u4ef6 Microsoft PowerPoint \u52a0\u8f7dppt\u6587\u4ef6 PDF \u52a0\u8f7dpdf\u6587\u4ef6 Images \u52a0\u8f7d\u56fe\u7247 File Directory \u52a0\u8f7d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6 HTML \u7f51\u9875 2.6.2 \u6587\u6863\u5206\u5272\u5668 \u00b6 \u7531\u4e8e\u6a21\u578b\u5bf9\u8f93\u5165\u7684\u5b57\u7b26\u957f\u5ea6\u6709\u9650\u5236\uff0c\u6211\u4eec\u5728\u78b0\u5230\u5f88\u957f\u7684\u6587\u672c\u65f6\uff0c\u9700\u8981\u628a\u6587\u672c\u5206\u5272\u6210\u591a\u4e2a\u5c0f\u7684\u6587\u672c\u7247\u6bb5\u3002 \u6587\u672c\u5206\u5272\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u6309\u7167\u5b57\u7b26\u957f\u5ea6\u8fdb\u884c\u5206\u5272\uff0c\u4f46\u662f\u8fd9\u4f1a\u5e26\u6765\u5f88\u591a\u95ee\u9898\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u6587\u672c\u662f\u4e00\u6bb5\u4ee3\u7801\uff0c\u4e00\u4e2a\u51fd\u6570\u88ab\u5206\u5272\u5230\u4e24\u6bb5\u4e4b\u540e\u5c31\u6210\u4e86\u6ca1\u6709\u610f\u4e49\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u6574\u4f53\u7684\u539f\u5219\u662f\u628a\u8bed\u4e49\u76f8\u5173\u7684\u6587\u672c\u7247\u6bb5\u653e\u5728\u4e00\u8d77\u3002 LangChain\u4e2d\u6700\u57fa\u672c\u7684\u6587\u672c\u5206\u5272\u5668\u662f CharacterTextSplitter \uff0c\u5b83\u6309\u7167\u6307\u5b9a\u7684\u5206\u9694\u7b26\uff08\u9ed8\u8ba4\u201c\\n\\n\u201d\uff09\u8fdb\u884c\u5206\u5272\uff0c\u5e76\u4e14\u8003\u8651\u6587\u672c\u7247\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u3002\u6211\u4eec\u770b\u4e2a\u4f8b\u5b50\uff1a from langchain.text_splitter import CharacterTextSplitter text_splitter = CharacterTextSplitter ( separator = \" \" , # \u7a7a\u683c\u5206\u5272\uff0c\u4f46\u662f\u7a7a\u683c\u4e5f\u5c5e\u4e8e\u5b57\u7b26 chunk_size = 5 , chunk_overlap = 0 , ) # \u4e00\u53e5\u5206\u5272 a = text_splitter . split_text ( \"a b c d e f\" ) print ( a ) # ['a b c', 'd e f'] # \u591a\u53e5\u8bdd\u5206\u5272\uff08\u6587\u6863\u5206\u5272\uff09 texts = text_splitter . create_documents ([ \"a b c d e f\" , \"e f g h\" ], ) print ( texts ) # [Document(page_content='a b c'), Document(page_content='d e f'), Document(page_content='e f g'), Document(page_content='h')] \u9664\u4e86CharacterTextSplitter\u5206\u5272\u5668\uff0cLangChain\u8fd8\u652f\u6301\u5176\u4ed6\u6587\u6863\u5206\u5272\u5668 (\u90e8\u5206)\uff1a \u6587\u6863\u52a0\u8f7d\u5668 \u63cf\u8ff0 LatexTextSplitter \u6cbf\u7740Latex\u6807\u9898\u3001\u6807\u9898\u3001\u679a\u4e3e\u7b49\u5206\u5272\u6587\u672c\u3002 MarkdownTextSplitter \u6cbf\u7740Markdown\u7684\u6807\u9898\u3001\u4ee3\u7801\u5757\u6216\u6c34\u5e73\u89c4\u5219\u6765\u5206\u5272\u6587\u672c\u3002 TokenTextSplitter \u6839\u636eopenAI\u7684token\u6570\u8fdb\u884c\u5206\u5272 PythonCodeTextSplitter \u6cbf\u7740Python\u7c7b\u548c\u65b9\u6cd5\u7684\u5b9a\u4e49\u5206\u5272\u6587\u672c\u3002 2.6.3 VectorStores \u00b6 VectorStores\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u5b58\u50a8\u7531\u5d4c\u5165\u521b\u5efa\u7684\u5411\u91cf\uff0c\u63d0\u4f9b\u76f8\u4f3c\u67e5\u8be2\u7b49\u529f\u80fd\u3002\u6211\u4eec\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a Chroma \u7ec4\u4ef6 pip install chromadb \u4f5c\u4e3a\u4f8b\u5b50\uff1a from langchain_community.embeddings import OllamaEmbeddings from langchain.text_splitter import CharacterTextSplitter from langchain_community.vectorstores import Chroma # pku.txt\u5185\u5bb9\uff1a<https://www.pku.edu.cn/about.html> with open ( './pku.txt' ) as f : state_of_the_union = f . read () text_splitter = CharacterTextSplitter ( chunk_size = 100 , chunk_overlap = 0 ) texts = text_splitter . split_text ( state_of_the_union ) print ( texts ) embeddings = OllamaEmbeddings ( model = \"mxbai-embed-large\" ) docsearch = Chroma . from_texts ( texts , embeddings ) query = \"1937\u5e74\u5317\u4eac\u5927\u5b66\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\" docs = docsearch . similarity_search ( query ) print ( docs ) ''' [Document(metadata={}, page_content='1937\u5e74\u5362\u6c9f\u6865\u4e8b\u53d8\u540e\uff0c\u5317\u4eac\u5927\u5b66\u4e0e\u6e05\u534e\u5927\u5b66\u3001\u5357\u5f00\u5927\u5b66\u5357\u8fc1\u957f\u6c99\uff0c\u5171\u540c\u7ec4\u6210\u56fd\u7acb\u957f\u6c99\u4e34\u65f6\u5927\u5b66\u30021938\u5e74\uff0c\u4e34\u65f6\u5927\u5b66\u53c8\u897f\u8fc1\u6606\u660e\uff0c\u66f4\u540d\u4e3a\u56fd\u7acb\u897f\u5357\u8054\u5408\u5927\u5b66\u3002\u6297\u65e5\u6218\u4e89\u80dc\u5229\u540e\uff0c\u5317\u4eac\u5927\u5b66\u4e8e1946\u5e7410\u6708\u5728\u5317\u5e73\u590d\u5458\u3002'), Document(metadata={}, page_content='1917\u5e74\uff0c\u8457\u540d\u6559\u80b2\u5bb6\u8521\u5143\u57f9\u5c31\u4efb\u5317\u4eac\u5927\u5b66\u6821\u957f\uff0c\u4ed6\u201c\u5faa\u601d\u60f3\u81ea\u7531\u539f\u5219\uff0c\u53d6\u517c\u5bb9\u5e76\u5305\u4e3b\u4e49\u201d\uff0c\u5bf9\u5317\u4eac\u5927\u5b66\u8fdb\u884c\u4e86\u5353\u6709\u6210\u6548\u7684\u6539\u9769\uff0c\u4fc3\u8fdb\u4e86\u601d\u60f3\u89e3\u653e\u548c\u5b66\u672f\u7e41\u8363\u3002\u9648\u72ec\u79c0\u3001\u674e\u5927\u948a\u3001\u6bdb\u6cfd\u4e1c\u4ee5\u53ca\u9c81\u8fc5\u3001\u80e1\u9002\u3001\u674e\u56db\u5149\u7b49\u4e00\u6279\u6770\u51fa\u4eba\u58eb\u90fd\u66fe\u5728\u5317\u4eac\u5927\u5b66\u4efb\u6559\u6216\u4efb\u804c\u3002'), Document(metadata={}, page_content='\u5317\u4eac\u5927\u5b66\u521b\u529e\u4e8e1898\u5e74\uff0c\u662f\u620a\u620c\u53d8\u6cd5\u7684\u4ea7\u7269\uff0c\u4e5f\u662f\u4e2d\u534e\u6c11\u65cf\u6551\u4ea1\u56fe\u5b58\u3001\u5174\u5b66\u56fe\u5f3a\u7684\u7ed3\u679c\uff0c\u521d\u540d\u4eac\u5e08\u5927\u5b66\u5802\uff0c\u662f\u4e2d\u56fd\u8fd1\u73b0\u4ee3\u7b2c\u4e00\u6240\u56fd\u7acb\u7efc\u5408\u6027\u5927\u5b66\uff0c\u8f9b\u4ea5\u9769\u547d\u540e\uff0c\u4e8e1912\u5e74\u6539\u4e3a\u73b0\u540d\u3002'), Document(metadata={}, page_content='\u5728\u60a0\u4e45\u7684\u6587\u660e\u5386\u7a0b\u4e2d\uff0c\u53e4\u4ee3\u4e2d\u56fd\u66fe\u521b\u7acb\u592a\u5b66\u3001\u56fd\u5b50\u5b66\u3001\u56fd\u5b50\u76d1\u7b49\u56fd\u5bb6\u6700\u9ad8\u5b66\u5e9c\uff0c\u5728\u4e2d\u56fd\u548c\u4e16\u754c\u6559\u80b2\u53f2\u4e0a\u5177\u6709\u91cd\u8981\u5f71\u54cd\u3002\u5317\u4eac\u5927\u5b66\u201c\u4e0a\u627f\u592a\u5b66\u6b63\u7edf\uff0c\u4e0b\u7acb\u5927\u5b66\u7956\u5ead\u201d\uff0c\u65e2\u662f\u4e2d\u534e\u6587\u8109\u548c\u6559\u80b2\u4f20\u7edf\u7684\u4f20\u627f\u8005\uff0c\u4e5f\u6807\u5fd7\u7740\u4e2d\u56fd\u73b0\u4ee3\u9ad8\u7b49\u6559\u80b2\u7684\u5f00\u7aef\u3002\u5176\u521b\u529e\u4e4b\u521d\u4e5f\u662f\u56fd\u5bb6\u6700\u9ad8\u6559\u80b2\u884c\u653f\u673a\u5173\uff0c\u5bf9\u5efa\u7acb\u4e2d\u56fd\u73b0\u4ee3\u5b66\u5236\u4f5c\u51fa\u91cd\u8981\u5386\u53f2\u8d21\u732e\u3002')] ''' LangChain\u652f\u6301\u7684VectorStore\u5982\u4e0b\uff1a VectorStore \u63cf\u8ff0 Chroma \u4e00\u4e2a\u5f00\u6e90\u5d4c\u5165\u5f0f\u6570\u636e\u5e93 ElasticSearch ElasticSearch Milvus \u7528\u4e8e\u5b58\u50a8\u3001\u7d22\u5f15\u548c\u7ba1\u7406\u7531\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u548c\u5176\u4ed6\u673a\u5668\u5b66\u4e60\uff08ML\uff09\u6a21\u578b\u4ea7\u751f\u7684\u5927\u91cf\u5d4c\u5165\u5411\u91cf\u7684\u6570\u636e\u5e93 Redis \u57fa\u4e8eredis\u7684\u68c0\u7d22\u5668 FAISS Facebook AI\u76f8\u4f3c\u6027\u641c\u7d22\u670d\u52a1 Pinecone \u4e00\u4e2a\u5177\u6709\u5e7f\u6cdb\u529f\u80fd\u7684\u5411\u91cf\u6570\u636e\u5e93 2.6.4 \u68c0\u7d22\u5668 \u00b6 \u68c0\u7d22\u5668\u662f\u4e00\u79cd\u4fbf\u4e8e\u6a21\u578b\u67e5\u8be2\u7684\u5b58\u50a8\u6570\u636e\u7684\u65b9\u5f0f\uff0cLangChain\u7ea6\u5b9a\u68c0\u7d22\u5668\u7ec4\u4ef6\u81f3\u5c11\u6709\u4e00\u4e2a\u65b9\u6cd5 get_relevant_texts \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u63a5\u6536\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e00\u7ec4\u6587\u6863\u3002 from langchain.document_loaders import TextLoader from langchain.text_splitter import CharacterTextSplitter from langchain_community.vectorstores import FAISS from langchain_community.embeddings import OllamaEmbeddings loader = TextLoader ( './pku.txt' ) documents = loader . load () text_splitter = CharacterTextSplitter ( chunk_size = 100 , chunk_overlap = 0 ) texts = text_splitter . split_documents ( documents ) embeddings = OllamaEmbeddings ( model = \"mxbai-embed-large\" ) db = FAISS . from_documents ( texts , embeddings ) retriever = db . as_retriever ( search_kwargs = { 'k' : 1 }) docs = retriever . get_relevant_documents ( \"\u5317\u4eac\u5927\u5b66\u4ec0\u4e48\u65f6\u5019\u6210\u7acb\u7684\" ) print ( docs ) #\u6253\u5370\u7ed3\u679c\uff1a ''' [Document(metadata={'source': './pku.txt'}, page_content='\u5317\u4eac\u5927\u5b66\u521b\u529e\u4e8e1898\u5e74\uff0c\u662f\u620a\u620c\u53d8\u6cd5\u7684\u4ea7\u7269\uff0c\u4e5f\u662f\u4e2d\u534e\u6c11\u65cf\u6551\u4ea1\u56fe\u5b58\u3001\u5174\u5b66\u56fe\u5f3a\u7684\u7ed3\u679c\uff0c\u521d\u540d\u4eac\u5e08\u5927\u5b66\u5802\uff0c\u662f\u4e2d\u56fd\u8fd1\u73b0\u4ee3\u7b2c\u4e00\u6240\u56fd\u7acb\u7efc\u5408\u6027\u5927\u5b66\uff0c\u8f9b\u4ea5\u9769\u547d\u540e\uff0c\u4e8e1912\u5e74\u6539\u4e3a\u73b0\u540d\u3002')] ''' LangChain\u652f\u6301\u7684\u68c0\u7d22\u5668\u7ec4\u4ef6\u5982\u4e0b\uff1a \u68c0\u7d22\u5668 \u4ecb\u7ecd Azure Cognitive Search Retriever Amazon ACS\u68c0\u7d22\u670d\u52a1 ChatGPT Plugin Retriever ChatGPT\u68c0\u7d22\u63d2\u4ef6 Databerry Databerry\u68c0\u7d22 ElasticSearch BM25 ElasticSearch\u68c0\u7d22\u5668 Metal Metal\u68c0\u7d22\u5668 Pinecone Hybrid Search Pinecone\u68c0\u7d22\u670d\u52a1 SVM Retriever SVM\u68c0\u7d22\u5668 TF-IDF Retriever TF-IDF\u68c0\u7d22\u5668 VectorStore Retriever VectorStore\u68c0\u7d22\u5668 Vespa retriever \u4e00\u4e2a\u652f\u6301\u7ed3\u6784\u5316\u6587\u672c\u548c\u5411\u91cf\u641c\u7d22\u7684\u5e73\u53f0 Weaviate Hybrid Search \u4e00\u4e2a\u5f00\u6e90\u7684\u5411\u91cf\u641c\u7d22\u5f15\u64ce Wikipedia \u652f\u6301wikipedia\u5185\u5bb9\u68c0\u7d22 3 LangChain\u4f7f\u7528\u573a\u666f \u00b6 \u4e2a\u4eba\u52a9\u624b \u57fa\u4e8e\u6587\u6863\u7684\u95ee\u7b54\u7cfb\u7edf \u804a\u5929\u673a\u5668\u4eba Tabular\u6570\u636e\u67e5\u8be2 API\u4ea4\u4e92 \u4fe1\u606f\u63d0\u53d6 \u6587\u6863\u603b\u7ed3 4 \u672c\u7ae0\u5c0f\u7ed3 \u00b6 \u672c\u7ae0\u8282\u4e3b\u8981\u5bf9LangChain\u6846\u67b6\u57fa\u7840\u77e5\u8bc6\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff0c\u8ba9\u6211\u4eec\u5bf9LangChain\u6709\u4e86\u4e00\u4e2a\u521d\u6b65\u8ba4\u8bc6\uff0c\u4e86\u89e3\u4e86LangChain\u7684\u4f7f\u7528\u573a\u666f\u3002","title":"2.2 LangChain\u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#langchain","text":"","title":"LangChain\u7684\u4ecb\u7ecd\u548c\u5165\u95e8"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#_1","text":"\u7406\u89e3\u4ec0\u4e48\u662fLangChain \u660e\u786eLangChain\u4e3b\u8981\u7ec4\u4ef6\u7684\u4f5c\u7528 \u4e86\u89e3LangChain\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#1-langchain","text":"LangChain\u7531 Harrison Chase \u521b\u5efa\u4e8e2022\u5e7410\u6708\uff0c\u5b83\u662f\u56f4\u7ed5LLMs\uff08\u5927\u8bed\u8a00\u6a21\u578b\uff09\u5efa\u7acb\u7684\u4e00\u4e2a\u6846\u67b6\uff0cLLMs\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u548c\u6d77\u91cf\u6570\u636e\u6765\u5206\u6790\u548c\u7406\u89e3\u81ea\u7136\u8bed\u8a00\uff0cGPT3.5\u3001GPT4\u662fLLMs\u6700\u5148\u8fdb\u7684\u4ee3\u8868\uff0c\u56fd\u5185\u767e\u5ea6\u7684\u6587\u5fc3\u4e00\u8a00\u3001\u963f\u91cc\u7684\u901a\u4e49\u5343\u95ee\u4e5f\u5c5e\u4e8eLLMs\u3002LangChain\u81ea\u8eab\u5e76\u4e0d\u5f00\u53d1LLMs\uff0c\u5b83\u7684\u6838\u5fc3\u7406\u5ff5\u662f\u4e3a\u5404\u79cdLLMs\u5b9e\u73b0\u901a\u7528\u7684\u63a5\u53e3\uff0c\u628aLLMs\u76f8\u5173\u7684\u7ec4\u4ef6\u201c\u94fe\u63a5\u201d\u5728\u4e00\u8d77\uff0c\u7b80\u5316LLMs\u5e94\u7528\u7684\u5f00\u53d1\u96be\u5ea6\uff0c\u65b9\u4fbf\u5f00\u53d1\u8005\u5feb\u901f\u5730\u5f00\u53d1\u590d\u6742\u7684LLMs\u5e94\u7528\u3002LangChain\u76ee\u524d\u6709\u4e24\u4e2a\u8bed\u8a00\u7684\u5b9e\u73b0\uff1apython\u3001nodejs\u3002 \u672c\u7ae0\u8282\u5c06\u4f1a\u4ece\u4e24\u4e2a\u65b9\u9762\u5168\u9762\u4ecb\u7ecdLangChain\uff1a\u4e00\u4e2a\u662fLangChain\u7ec4\u4ef6\u7684\u57fa\u672c\u6982\u5ff5\u548c\u5e94\u7528\uff1b\u53e6\u4e00\u4e2a\u662fLangChain\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u3002 \u53c2\u8003\u5b98\u7f51\u4ecb\u7ecd\uff1a https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub","title":"1 \u4ec0\u4e48\u662fLangChain"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#2-langchain","text":"\u4e00\u4e2aLangChain\u7684\u5e94\u7528\u662f\u9700\u8981\u591a\u4e2a\u7ec4\u4ef6\u5171\u540c\u5b9e\u73b0\u7684\uff0cLangChain\u4e3b\u8981\u652f\u63016\u79cd\u7ec4\u4ef6\uff1a Models\uff1a\u6a21\u578b\uff0c\u5404\u79cd\u7c7b\u578b\u7684\u6a21\u578b\u548c\u6a21\u578b\u96c6\u6210\uff0c\u6bd4\u5982GPT-4 Prompts\uff1a\u63d0\u793a\uff0c\u5305\u62ec\u63d0\u793a\u7ba1\u7406\u3001\u63d0\u793a\u4f18\u5316\u548c\u63d0\u793a\u5e8f\u5217\u5316 Memory\uff1a\u8bb0\u5fc6\uff0c\u7528\u6765\u4fdd\u5b58\u548c\u6a21\u578b\u4ea4\u4e92\u65f6\u7684\u4e0a\u4e0b\u6587\u72b6\u6001 Indexes\uff1a\u7d22\u5f15\uff0c\u7528\u6765\u7ed3\u6784\u5316\u6587\u6863\uff0c\u4ee5\u4fbf\u548c\u6a21\u578b\u4ea4\u4e92 Chains\uff1a\u94fe\uff0c\u4e00\u7cfb\u5217\u5bf9\u5404\u79cd\u7ec4\u4ef6\u7684\u8c03\u7528 Agents\uff1a\u4ee3\u7406\uff0c\u51b3\u5b9a\u6a21\u578b\u91c7\u53d6\u54ea\u4e9b\u884c\u52a8\uff0c\u6267\u884c\u5e76\u4e14\u89c2\u5bdf\u6d41\u7a0b\uff0c\u76f4\u5230\u5b8c\u6210\u4e3a\u6b62","title":"2 LangChain\u4e3b\u8981\u7ec4\u4ef6"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#21-models","text":"\u73b0\u5728\u5e02\u9762\u4e0a\u7684\u6a21\u578b\u591a\u5982\u725b\u6bdb\uff0c\u5404\u79cd\u5404\u6837\u7684\u6a21\u578b\u4e0d\u65ad\u51fa\u73b0\uff0cLangChain\u6a21\u578b\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u4e0e\u5404\u79cd\u6a21\u578b\u7684\u96c6\u6210\uff0c\u5e76\u4e3a\u6240\u6709\u6a21\u578b\u63d0\u4f9b\u4e00\u4e2a\u7cbe\u7b80\u7684\u7edf\u4e00\u63a5\u53e3\u3002 LangChain\u76ee\u524d\u652f\u6301\u4e09\u79cd\u7c7b\u578b\u7684\u6a21\u578b\uff1aLLMs\u3001Chat Models(\u804a\u5929\u6a21\u578b)\u3001Embeddings Models(\u5d4c\u5165\u6a21\u578b\uff09. LLMs: \u5927\u8bed\u8a00\u6a21\u578b\u63a5\u6536\u6587\u672c\u5b57\u7b26\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u7684\u4e5f\u662f\u6587\u672c\u5b57\u7b26. \u804a\u5929\u6a21\u578b: \u57fa\u4e8eLLMs, \u4e0d\u540c\u7684\u662f\u5b83\u63a5\u6536\u804a\u5929\u6d88\u606f(\u4e00\u79cd\u7279\u5b9a\u683c\u5f0f\u7684\u6570\u636e)\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u7684\u4e5f\u662f\u804a\u5929\u6d88\u606f. \u6587\u672c\u5d4c\u5165\u6a21\u578b: \u6587\u672c\u5d4c\u5165\u6a21\u578b\u63a5\u6536\u6587\u672c\u4f5c\u4e3a\u8f93\u5165, \u8fd4\u56de\u7684\u662f\u6d6e\u70b9\u6570\u5217\u8868. LangChain\u652f\u6301\u7684\u4e09\u7c7b\u6a21\u578b\uff0c\u5b83\u4eec\u7684\u4f7f\u7528\u573a\u666f\u4e0d\u540c\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u4e0d\u540c\uff0c\u5f00\u53d1\u8005\u9700\u8981\u6839\u636e\u9879\u76ee\u9700\u8981\u9009\u62e9\u76f8\u5e94\u3002","title":"2.1 Models"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#211-llms","text":"LLMs\u4f7f\u7528\u573a\u666f\u6700\u591a\uff0c\u5e38\u7528\u5927\u6a21\u578b\u7684\u4e0b\u8f7d\u5e93\uff1a https://huggingface.co/models \uff1a \u63a5\u4e0b\u6765\u6211\u4eec\u501f\u52a9Ollama\u5de5\u5177\u8fdb\u884c\u6a21\u578b\u7684\u4f7f\u7528\uff1a \u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u5b89\u88c5langchain\u5e93 : pip install langchain \u5b89\u88c5langchain_community\u5e93 : pip install langchain_community \u7b2c\u4e8c\u6b65\uff1a\u4ee3\u7801\u5b9e\u73b0 from langchain_community.llms import Ollama model = Ollama ( model = \"qwen2:1.5b\" , temperature = 0 ) result = model . invoke ( \"\u8bf7\u7ed9\u6211\u8bb2\u4e2a\u9b3c\u6545\u4e8b\" ) print ( result ) ##\u6253\u5370\u7ed3\u679c\uff1a \u597d\u7684 \uff0c \u6211\u6765\u7ed9\u60a8\u8bb2\u4e00\u4e2a\u9b3c\u6545\u4e8b \u3002 \u5f88\u4e45\u4ee5\u524d \uff0c \u5728\u4e00\u5ea7\u53e4\u8001\u7684\u57ce\u5821\u91cc \uff0c \u4f4f\u7740\u4e00\u4f4d\u5e74\u8f7b\u7684\u516c\u4e3b\u548c\u5979\u7684\u5bb6\u4eba \u3002 \u4e00\u5929\u665a\u4e0a \uff0c \u5f53\u4ed6\u4eec\u51c6\u5907\u7761\u89c9\u65f6 \uff0c \u7a81\u7136\u542c\u5230\u4e86\u4e00\u9635\u5947\u602a\u7684\u58f0\u97f3 \u3002 \u58f0\u97f3\u8d8a\u6765\u8d8a\u8fd1 \uff0c \u6700\u540e\u505c\u5728\u4e86\u516c\u4e3b\u7684\u623f\u95f4\u95e8\u53e3 \u3002 \u516c\u4e3b\u611f\u5230\u975e\u5e38\u5bb3\u6015 \uff0c \u4f46\u8fd8\u662f\u51b3\u5b9a\u53bb\u770b\u770b \u3002 \u5979\u6253\u5f00\u95e8 \uff0c \u53d1\u73b0\u4e00\u4e2a\u7a7f\u7740\u7834\u65e7\u8863\u670d \u3001 \u957f\u53d1\u62ab\u6563\u7684\u5973\u5b69\u7ad9\u5728\u90a3\u91cc \u3002 \u5973\u5b69\u770b\u8d77\u6765\u5f88\u865a\u5f31 \uff0c \u4f3c\u4e4e\u5df2\u7ecf\u597d\u51e0\u5929\u6ca1\u6709\u8fdb\u98df \u3002 \u516c\u4e3b\u95ee\u5979\u4e3a\u4ec0\u4e48\u5728\u8fd9\u91cc \uff0c \u5973\u5b69\u56de\u7b54\u8bf4\u5979\u8ff7\u8def\u4e86 \uff0c \u627e\u4e0d\u5230\u56de\u5bb6\u7684\u8def \u3002 \u516c\u4e3b\u540c\u60c5\u8fd9\u4e2a\u53ef\u601c\u7684\u5973\u5b69 \uff0c \u5e76\u9080\u8bf7\u5979\u8fdb\u6765\u4f11\u606f \u3002 \u5973\u5b69\u5728\u516c\u4e3b\u7684\u5e8a\u4e0a\u8eba\u4e0b\u540e \uff0c \u5f00\u59cb\u8bb2\u8ff0\u5979\u7684\u6545\u4e8b \u3002 \u539f\u6765 \uff0c \u57ce\u5821\u7684\u4e3b\u4eba\u662f\u4e00\u4e2a\u6b8b\u5fcd\u7684\u7edf\u6cbb\u8005 \uff0c \u4ed6\u7ecf\u5e38\u8650\u5f85\u4ed6\u7684\u81e3\u6c11 \u3002 \u6709\u4e00\u5929 \uff0c \u4ed6\u53d1\u73b0\u4e86\u4e00\u4e2a\u7f8e\u4e3d\u7684\u5e74\u8f7b\u5973\u5b50 \uff0c \u4fbf\u51b3\u5b9a\u5c06\u5979\u4f5c\u4e3a\u81ea\u5df1\u7684\u59bb\u5b50 \u3002 \u7136\u800c \uff0c \u5f53\u5973\u5b50\u8bd5\u56fe\u53cd\u6297\u65f6 \uff0c \u5979\u88ab\u56da\u7981\u5728\u4e00\u4e2a\u5730\u4e0b\u5ba4\u91cc \u3002 \u5973\u5b69\u8bf4 \uff0c \u5979\u4e00\u76f4\u5728\u5bfb\u627e\u56de\u5bb6\u7684\u8def \uff0c \u76f4\u5230\u5979\u9047\u5230\u4e86\u516c\u4e3b \u3002 \u5979\u8bf7\u6c42\u516c\u4e3b\u5e2e\u52a9\u5979\u627e\u5230\u51fa\u8def \uff0c \u56de\u5230\u5979\u7684\u5bb6 \u3002 \u516c\u4e3b\u7b54\u5e94\u4e86 \uff0c \u5e76\u5f00\u59cb\u4e3a\u5979\u7948\u7977 \u3002 \u6700\u540e \uff0c \u5947\u8ff9\u53d1\u751f\u4e86 \uff0c \u57ce\u5821\u7684\u4e3b\u4eba\u88ab\u6124\u6012\u7684\u4eba\u6c11\u6740\u6b7b \uff0c \u800c\u5973\u5b69\u4e5f\u7ec8\u4e8e\u56de\u5230\u4e86\u81ea\u5df1\u7684\u5bb6\u4e2d \u3002 \u8fd9\u4e2a\u6545\u4e8b\u544a\u8bc9\u6211\u4eec \uff0c \u5373\u4f7f\u662f\u6700\u5f3a\u5927\u7684\u7edf\u6cbb\u8005\u4e5f\u65e0\u6cd5\u5ffd\u89c6\u5584\u826f\u548c\u540c\u60c5\u5fc3\u7684\u529b\u91cf \u3002","title":"2.1.1 LLMs (\u5927\u8bed\u8a00\u6a21\u578b)"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#212-chat-models","text":"\u804a\u5929\u6d88\u606f\u5305\u542b\u4e0b\u9762\u51e0\u79cd\u7c7b\u578b\uff0c\u4f7f\u7528\u65f6\u9700\u8981\u6309\u7167\u7ea6\u5b9a\u4f20\u5165\u5408\u9002\u7684\u503c\uff1a AIMessage: \u5c31\u662f AI \u8f93\u51fa\u7684\u6d88\u606f\uff0c\u53ef\u4ee5\u662f\u9488\u5bf9\u95ee\u9898\u7684\u56de\u7b54. HumanMessage: \u4eba\u7c7b\u6d88\u606f\u5c31\u662f\u7528\u6237\u4fe1\u606f\uff0c\u7531\u4eba\u7ed9\u51fa\u7684\u4fe1\u606f\u53d1\u9001\u7ed9LLMs\u7684\u63d0\u793a\u4fe1\u606f\uff0c\u6bd4\u5982\u201c\u5b9e\u73b0\u4e00\u4e2a\u5feb\u901f\u6392\u5e8f\u65b9\u6cd5\u201d. SystemMessage: \u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u6a21\u578b\u5177\u4f53\u6240\u5904\u7684\u73af\u5883\u548c\u80cc\u666f\uff0c\u5982\u89d2\u8272\u626e\u6f14\u7b49\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u7ed9\u51fa\u5177\u4f53\u7684\u6307\u793a\uff0c\u6bd4\u5982\u201c\u4f5c\u4e3a\u4e00\u4e2a\u4ee3\u7801\u4e13\u5bb6\u201d\uff0c\u6216\u8005\u201c\u8fd4\u56dejson\u683c\u5f0f\u201d. ChatMessage: Chat \u6d88\u606f\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u89d2\u8272\u7684\u53c2\u6570\uff0c\u4f46\u662f\u5728\u5927\u591a\u6570\u65f6\u95f4\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u4e0a\u9762\u7684\u4e09\u79cd\u7c7b\u578b. LangChain\u652f\u6301\u7684\u5e38\u89c1\u804a\u5929\u6a21\u578b\u6709\uff1a \u6a21\u578b \u63cf\u8ff0 ChatOpenAI OpenAI\u804a\u5929\u6a21\u578b AzureChatOpenAI Azure\u63d0\u4f9b\u7684OpenAI\u804a\u5929\u6a21\u578b PromptLayerChatOpenAI \u57fa\u4e8eOpenAI\u7684\u63d0\u793a\u6a21\u7248\u5e73\u53f0 \u4e3e\u4f8b\u8bf4\u660e\uff1a from langchain_core.messages import HumanMessage , SystemMessage from langchain_community.chat_models import ChatOllama model = ChatOllama ( model = \"qwen2.5:7b\" , temperature = 0 ) messages = [ SystemMessage ( content = \"\u73b0\u5728\u4f60\u662f\u4e00\u4e2a\u8457\u540d\u7684\u6b4c\u624b\" ), HumanMessage ( content = \"\u7ed9\u6211\u5199\u4e00\u9996\u6b4c\u8bcd\" ) ] res = model ( messages ) print ( res ) print ( res . content ) # \u6253\u5370\u7ed3\u679c\uff1a ''' \u597d\u7684\uff0c\u4ee5\u4e0b\u662f\u4e00\u9996\u7b80\u77ed\u7684\u6b4c\u8bcd\uff1a \u5728\u6bcf\u4e00\u4e2a\u9ece\u660e\u524d\u9192\u6765\uff0c \u5fc3\u4e2d\u5145\u6ee1\u5e0c\u671b\u548c\u68a6\u60f3\u3002 \u6bcf\u4e00\u6b21\u5fc3\u8df3\u90fd\u5e26\u7740\u529b\u91cf\uff0c \u4e3a\u4e86\u5fc3\u4e2d\u7684\u76ee\u6807\uff0c\u6211\u6c38\u4e0d\u653e\u5f03\u3002 \u5728\u8fd9\u6761\u6f2b\u957f\u7684\u8def\u4e0a\uff0c \u6211\u5b66\u4f1a\u4e86\u575a\u5f3a\u548c\u52c7\u6562\u3002 \u65e0\u8bba\u524d\u65b9\u6709\u591a\u5c11\u56f0\u96be\uff0c \u6211\u90fd\u4f1a\u575a\u6301\u5230\u5e95\uff0c\u76f4\u5230\u80dc\u5229\u3002 \u56e0\u4e3a\u6211\u77e5\u9053\uff0c \u6211\u7684\u68a6\u60f3\u4e0d\u4f1a\u88ab\u6253\u8d25\uff0c \u56e0\u4e3a\u6211\u6709\u52c7\u6c14\u53bb\u8ffd\u6c42\uff0c \u56e0\u4e3a\u6211\u76f8\u4fe1\u81ea\u5df1\u80fd\u591f\u6210\u529f\u3002 '''","title":"2.1.2 Chat Models (\u804a\u5929\u6a21\u578b)"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#213","text":"\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6a21\u578b\u9ed8\u8ba4\u662f\u8fd4\u56de\u7eaf\u6587\u672c\u7ed3\u679c\u7684\uff0c\u5982\u679c\u60f3\u8ba9\u6a21\u578b\u8fd4\u56de\u60f3\u8981\u7684\u6570\u636e\u683c\u5f0f\uff08\u6bd4\u5982json\u683c\u5f0f\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u63d0\u793a\u6a21\u7248\u3002 \u63d0\u793a\u6a21\u677f\u5c31\u662f\u628a\u4e00\u4e9b\u5e38\u89c1\u7684\u63d0\u793a\u6574\u7406\u6210\u6a21\u677f\uff0c\u7528\u6237\u53ea\u9700\u8981\u4fee\u6539\u6a21\u677f\u4e2d\u7279\u5b9a\u7684\u8bcd\u8bed\uff0c\u5c31\u80fd\u5feb\u901f\u51c6\u786e\u5730\u544a\u8bc9\u6a21\u578b\u81ea\u5df1\u7684\u9700\u6c42\u3002\u6211\u4eec\u770b\u4e2a\u4f8b\u5b50\uff1a from langchain_community.chat_models import ChatOllama from langchain.prompts import ChatPromptTemplate # \u521b\u5efa\u539f\u59cb\u6a21\u677f template_str = \"\"\"\u60a8\u662f\u4e00\u4f4d\u4e13\u4e1a\u7684\u9c9c\u82b1\u5e97\u6587\u6848\u64b0\u5199\u5458\u3002 \\n \u5bf9\u4e8e\u552e\u4ef7\u4e3a {price} \u5143\u7684 {flower_name} \uff0c\u60a8\u80fd\u63d0\u4f9b\u4e00\u4e2a\u5438\u5f15\u4eba\u7684\u7b80\u77ed\u63cf\u8ff0\u5417\uff1f # \"\"\" # \u6839\u636e\u539f\u59cb\u6a21\u677f\u521b\u5efaLangChain\u63d0\u793a\u6a21\u677f promp_emplate = ChatPromptTemplate . from_template ( template_str ) prompt = promp_emplate . format_messages ( price = '50' , flower_name = [ \"\u73ab\u7470\" ], ) print ( 'prompt-->' , prompt ) # prompt--> [HumanMessage(content=\"\u60a8\u662f\u4e00\u4f4d\u4e13\u4e1a\u7684\u9c9c\u82b1\u5e97\u6587\u6848\u64b0\u5199\u5458\u3002\\n\\n\u5bf9\u4e8e\u552e\u4ef7\u4e3a 50 \u5143\u7684 ['\u73ab\u7470'] \uff0c\u60a8\u80fd\u63d0\u4f9b\u4e00\u4e2a\u5438\u5f15\u4eba\u7684\u7b80\u77ed\u63cf\u8ff0\u5417\uff1f\\n# \", additional_kwargs={}, response_metadata={})] # \u5b9e\u4f8b\u5316\u6a21\u578b model = ChatOllama ( model = \"qwen2.5:7b\" , temperature = 0 ) # \u6253\u5370\u7ed3\u679c result = model . invoke ( prompt ) print ( result . content ) #\u5f53\u7136\u53ef\u4ee5\uff01\"\u73ab\u7470\uff0c\u552e\u4ef7 50 \u5143\uff0c\u662f\u7231\u60c5\u4e0e\u6d6a\u6f2b\u7684\u8c61\u5f81\u3002\u6bcf\u4e00\u6735\u90fd\u662f\u7cbe\u5fc3\u6311\u9009\u548c\u5305\u88c5\uff0c\u786e\u4fdd\u5176\u5b8c\u7f8e\u65e0\u7455\u3002\u65e0\u8bba\u662f\u5728\u5e86\u795d\u7279\u522b\u7684\u65e5\u5b50\u8fd8\u662f\u7b80\u5355\u7684\u65e5\u5e38\u95ee\u5019\u4e2d\uff0c\u8fd9\u675f\u73ab\u7470\u90fd\u80fd\u4f20\u8fbe\u4f60\u7684\u7231\u610f\u3002\u73b0\u5728\u5c31\u4e3a\u4f60\u7684\u7231\u4eba\u6216\u81ea\u5df1\u9009\u62e9\u4e00\u4efd\u7279\u522b\u7684\u793c\u7269\u5427\uff01\"","title":"2.1.3 \u63d0\u793a\u6a21\u677f"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#214-embeddings-models","text":"Embeddings Models\u7279\u70b9\uff1a\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u4e00\u4e2a\u6d6e\u52a8\u6570\u7684\u5217\u8868\u3002\u5728NLP\u4e2d\uff0cEmbedding\u7684\u4f5c\u7528\u5c31\u662f\u5c06\u6570\u636e\u8fdb\u884c\u6587\u672c\u5411\u91cf\u5316\u3002 Embeddings Models\u53ef\u4ee5\u4e3a\u6587\u672c\u521b\u5efa\u5411\u91cf\u6620\u5c04\uff0c\u8fd9\u6837\u5c31\u80fd\u5728\u5411\u91cf\u7a7a\u95f4\u91cc\u53bb\u8003\u8651\u6587\u672c\uff0c\u6267\u884c\u8bf8\u5982\u8bed\u4e49\u641c\u7d22\u4e4b\u7c7b\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u5bfb\u627e\u76f8\u4f3c\u7684\u6587\u672c\u7247\u6bb5\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4ee5\u4e00\u4e2aqwen\u6587\u672c\u5d4c\u5165\u6a21\u578b\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff1a from langchain_community.embeddings import OllamaEmbeddings model = OllamaEmbeddings ( model = \"mxbai-embed-large\" , temperature = 0 ) res1 = model . embed_query ( '\u8fd9\u662f\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u6587\u6863' ) print ( res1 ) res2 = model . embed_documents ([ '\u8fd9\u662f\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u6587\u6863' , '\u8fd9\u662f\u7b2c\u4e8c\u4e2a\u6d4b\u8bd5\u6587\u6863' ]) print ( res2 ) \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5206\u522b\u4f7f\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\u6765\u8fdb\u884c\u6587\u672c\u7684\u5411\u91cf\u8868\u793a\uff0c\u4ed6\u4eec\u6700\u5927\u4e0d\u540c\u5728\u4e8e\uff1aembed_query()\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8f93\u5165\uff0c\u800cembed_documents\u53ef\u4ee5\u63a5\u6536\u4e00\u7ec4\u5b57\u7b26\u4e32\u3002 LangChain\u96c6\u6210\u7684\u6587\u672c\u5d4c\u5165\u6a21\u578b\u6709\uff1a AzureOpenAI\u3001Baidu Qianfan\u3001Hugging Face Hub\u3001OpenAI\u3001Llama-cpp\u3001SentenceTransformers","title":"2.1.4 Embeddings Models(\u5d4c\u5165\u6a21\u578b)"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#22-prompts","text":"Prompt\u662f\u6307\u5f53\u7528\u6237\u8f93\u5165\u4fe1\u606f\u7ed9\u6a21\u578b\u65f6\u52a0\u5165\u7684\u63d0\u793a\uff0c\u8fd9\u4e2a\u63d0\u793a\u7684\u5f62\u5f0f\u53ef\u4ee5\u662fzero-shot\u6216\u8005few-shot\u7b49\u65b9\u5f0f\uff0c\u76ee\u7684\u662f\u8ba9\u6a21\u578b\u7406\u89e3\u66f4\u4e3a\u590d\u6742\u7684\u4e1a\u52a1\u573a\u666f\u4ee5\u4fbf\u66f4\u597d\u7684\u89e3\u51b3\u95ee\u9898\u3002 \u63d0\u793a\u6a21\u677f\uff1a\u5982\u679c\u4f60\u6709\u4e86\u4e00\u4e2a\u8d77\u4f5c\u7528\u7684\u63d0\u793a\uff0c\u4f60\u53ef\u80fd\u60f3\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u6a21\u677f\u7528\u4e8e\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\uff0cLangChain\u5c31\u63d0\u4f9b\u4e86PromptTemplates\u7ec4\u4ef6\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f60\u66f4\u65b9\u4fbf\u7684\u6784\u5efa\u63d0\u793a\u3002 zero-shot\u63d0\u793a\u65b9\u5f0f\uff1a from langchain import PromptTemplate from langchain_community.llms import Ollama model = Ollama ( model = \"qwen2.5:7b\" ) # \u5b9a\u4e49\u6a21\u677f template = \"\u6211\u7684\u90bb\u5c45\u59d3 {lastname} \uff0c\u4ed6\u751f\u4e86\u4e2a\u513f\u5b50\uff0c\u7ed9\u4ed6\u513f\u5b50\u8d77\u4e2a\u540d\u5b57\" prompt = PromptTemplate ( input_variables = [ \"lastname\" ], template = template , ) prompt_text = prompt . format ( lastname = \"\u738b\" ) print ( prompt_text ) # result: \u6211\u7684\u90bb\u5c45\u59d3\u738b\uff0c\u4ed6\u751f\u4e86\u4e2a\u513f\u5b50\uff0c\u7ed9\u4ed6\u513f\u5b50\u8d77\u4e2a\u540d\u5b57 result = model ( prompt_text ) print ( result ) ''' \u5982\u679c\u60a8\u7684\u90bb\u5c45\u60f3\u8981\u7ed9\u4ed6\u7684\u513f\u5b50\u8d77\u4e00\u4e2a\u540d\u5b57\uff0c\u53ef\u4ee5\u8003\u8651\u4ee5\u4e0b\u5efa\u8bae\uff1a 1. **\u4e2a\u6027\u5316\u9009\u62e9**\uff1a\u6839\u636e\u5b69\u5b50\u7684\u6027\u522b\u3001\u5e74\u9f84\u6216\u8005\u5176\u4ed6\u4e2a\u4eba\u559c\u597d\u6765\u547d\u540d\u3002 2. **\u4f20\u7edf\u6216\u6d41\u884c\u7684\u540d\u5b57**\uff1a\u53ef\u4ee5\u4ece\u4f20\u7edf\u6587\u5316\u4e2d\u5bfb\u627e\u7075\u611f\uff0c\u6216\u8005\u53c2\u8003\u5f53\u524d\u6bd4\u8f83\u6d41\u884c\u7684\u7537\u5b69\u540d\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5b69\u5b50\u662f\u7537\u5b69\uff0c\u53ef\u4ee5\u9009\u62e9\u201c\u5b87\u822a\u201d\u3001\u201c\u6d69\u7136\u201d\u3001\u201c\u542f\u660e\u201d\u7b49\u5bcc\u6709\u5bd3\u610f\u7684\u6c49\u5b57\u4f5c\u4e3a\u540d\u5b57\u3002 3. **\u7ed3\u5408\u5bb6\u65cf\u80cc\u666f\u548c\u59d3\u6c0f**\uff1a\u5982\u679c\u60a8\u60f3\u4fdd\u6301\u4e0e\u90bb\u5c45\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4ed6\u7684\u59d3\u6c0f\u4f5c\u4e3a\u5b69\u5b50\u7684\u540d\u5b57\u7684\u4e00\u90e8\u5206\uff0c\u5982\u201c\u738b\u5b87\u822a\u201d\u3001\u201c\u738b\u6d69\u7136\u201d\u3002 4. **\u7b80\u5355\u6613\u8bfb\u7684\u540d\u5b57**\uff1a\u907f\u514d\u8fc7\u4e8e\u590d\u6742\u7684\u6216\u62d7\u53e3\u7684\u540d\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u5b69\u5b50\u6210\u957f\u8fc7\u7a0b\u4e2d\u7684\u53d1\u97f3\u3002 \u8bf7\u8bb0\u4f4f\uff0c\u65e0\u8bba\u9009\u62e9\u54ea\u79cd\u65b9\u5f0f\u547d\u540d\uff0c\u91cd\u8981\u7684\u662f\u8981\u8003\u8651\u5230\u5b69\u5b50\u7684\u6027\u683c\u7279\u70b9\u548c\u672a\u6765\u53d1\u5c55\u3002 ''' few-shot\u63d0\u793a\u65b9\u5f0f\uff1a from langchain import PromptTemplate , FewShotPromptTemplate from langchain_community.llms import Ollama model = Ollama ( model = \"qwen2.5:7b\" ) examples = [ { \"word\" : \"\u5f00\u5fc3\" , \"antonym\" : \"\u96be\u8fc7\" }, { \"word\" : \"\u9ad8\" , \"antonym\" : \"\u77ee\" }, ] example_template = \"\"\" \u5355\u8bcd: {word} \u53cd\u4e49\u8bcd: {antonym} \\\\ n \"\"\" example_prompt = PromptTemplate ( input_variables = [ \"word\" , \"antonym\" ], template = example_template , ) few_shot_prompt = FewShotPromptTemplate ( examples = examples , example_prompt = example_prompt , prefix = \"\u7ed9\u51fa\u6bcf\u4e2a\u5355\u8bcd\u7684\u53cd\u4e49\u8bcd\" , suffix = \"\u5355\u8bcd: {input} \\\\ n\u53cd\u4e49\u8bcd:\" , input_variables = [ \"input\" ], example_separator = \" \\\\ n\" , ) prompt_text = few_shot_prompt . format ( input = \"\u7c97\" ) print ( prompt_text ) print ( '*' * 80 ) # \u7ed9\u51fa\u6bcf\u4e2a\u5355\u8bcd\u7684\u53cd\u4e49\u8bcd # \u5355\u8bcd: \u5f00\u5fc3 # \u53cd\u4e49\u8bcd: \u96be\u8fc7 # \u5355\u8bcd: \u9ad8 # \u53cd\u4e49\u8bcd: \u77ee # \u5355\u8bcd: \u7c97 # \u53cd\u4e49\u8bcd: # \u8c03\u7528\u6a21\u578b print ( model ( prompt_text )) # \u7ec6","title":"2.2 Prompts"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#23-chains","text":"\u5728LangChain\u4e2d\uff0cChains\u63cf\u8ff0\u4e86\u5c06LLM\u4e0e\u5176\u4ed6\u7ec4\u4ef6\u7ed3\u5408\u8d77\u6765\u5b8c\u6210\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u8fc7\u7a0b. \u9488\u5bf9\u4e0a\u4e00\u5c0f\u8282\u7684\u63d0\u793a\u6a21\u7248\u4f8b\u5b50\uff0czero-shot\u91cc\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u94fe\u6765\u8fde\u63a5\u63d0\u793a\u6a21\u7248\u7ec4\u4ef6\u548c\u6a21\u578b\uff0c\u8fdb\u800c\u53ef\u4ee5\u5b9e\u73b0\u4ee3\u7801\u7684\u66f4\u6539\uff1a from langchain import PromptTemplate from langchain_community.llms import Ollama from langchain.chains import LLMChain # \u5b9a\u4e49\u6a21\u677f template = \"\u6211\u7684\u90bb\u5c45\u59d3 {lastname} \uff0c\u4ed6\u751f\u4e86\u4e2a\u513f\u5b50\uff0c\u7ed9\u4ed6\u513f\u5b50\u8d77\u4e2a\u540d\u5b57\" prompt = PromptTemplate ( input_variables = [ \"lastname\" ], template = template , ) llm = Ollama ( model = \"qwen2.5:7b\" ) chain = LLMChain ( llm = llm , prompt = prompt ) # \u6267\u884c\u94fe print ( chain . run ( \"\u738b\" )) \u5982\u679c\u4f60\u60f3\u5c06\u7b2c\u4e00\u4e2a\u6a21\u578b\u8f93\u51fa\u7684\u7ed3\u679c\uff0c\u76f4\u63a5\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u6a21\u578b\u7684\u8f93\u5165\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528LangChain\u7684SimpleSequentialChain, \u4ee3\u7801\u5982\u4e0b\uff1a from langchain import PromptTemplate from langchain_community.llms import Ollama from langchain.chains import LLMChain , SimpleSequentialChain # \u521b\u5efa\u7b2c\u4e00\u6761\u94fe template = \"\u6211\u7684\u90bb\u5c45\u59d3 {lastname} \uff0c\u4ed6\u751f\u4e86\u4e2a\u513f\u5b50\uff0c\u7ed9\u4ed6\u513f\u5b50\u8d77\u4e2a\u540d\u5b57\" first_prompt = PromptTemplate ( input_variables = [ \"lastname\" ], template = template , ) llm = Ollama ( model = \"qwen2.5:7b\" ) first_chain = LLMChain ( llm = llm , prompt = first_prompt ) # \u521b\u5efa\u7b2c\u4e8c\u6761\u94fe second_prompt = PromptTemplate ( input_variables = [ \"child_name\" ], template = \"\u90bb\u5c45\u7684\u513f\u5b50\u540d\u5b57\u53eb {child_name} \uff0c\u7ed9\u4ed6\u8d77\u4e00\u4e2a\u5c0f\u540d\" , ) second_chain = LLMChain ( llm = llm , prompt = second_prompt ) # \u94fe\u63a5\u4e24\u6761\u94fe overall_chain = SimpleSequentialChain ( chains = [ first_chain , second_chain ], verbose = True ) print ( overall_chain ) print ( '*' * 80 ) # \u6267\u884c\u94fe\uff0c\u53ea\u9700\u8981\u4f20\u5165\u7b2c\u4e00\u4e2a\u53c2\u6570 catchphrase = overall_chain . run ( \"\u738b\" ) print ( catchphrase )","title":"2.3 Chains(\u94fe)"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#24-agents","text":"Agents \u4e5f\u5c31\u662f\u4ee3\u7406\uff0c\u5b83\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5229\u7528\u4e00\u4e2a\u8bed\u8a00\u6a21\u578b\u6765\u9009\u62e9\u4e00\u7cfb\u5217\u8981\u6267\u884c\u7684\u52a8\u4f5c\u3002 \u5728 LangChain \u4e2d Agents \u7684\u4f5c\u7528\u5c31\u662f\u6839\u636e\u7528\u6237\u7684\u9700\u6c42\uff0c\u6765\u8bbf\u95ee\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5de5\u5177(\u6bd4\u5982\uff1a\u641c\u7d22\u5f15\u64ce\u6216\u8005\u6570\u636e\u5e93)\uff0c\u8fdb\u800c\u6765\u89e3\u51b3\u76f8\u5173\u9700\u6c42\u95ee\u9898\u3002 \u4e3a\u4ec0\u4e48\u8981\u501f\u52a9\u7b2c\u4e09\u65b9\u5e93\uff1f \u56e0\u4e3a\u5927\u6a21\u578b\u867d\u7136\u975e\u5e38\u5f3a\u5927\uff0c\u4f46\u662f\u4e5f\u5177\u5907\u4e00\u5b9a\u7684\u5c40\u9650\u6027\uff0c\u6bd4\u5982\u4e0d\u80fd\u56de\u7b54\u5b9e\u65f6\u4fe1\u606f\u3001\u5904\u7406\u6570\u5b66\u903b\u8f91\u95ee\u9898\u4ecd\u7136\u975e\u5e38\u7684\u521d\u7ea7\u7b49\u7b49\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u501f\u52a9\u7b2c\u4e09\u65b9\u5de5\u5177\u6765\u8f85\u52a9\u5927\u6a21\u578b\u7684\u5e94\u7528\u3002 \u51e0\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\uff1a Agent\u4ee3\u7406\uff1a \u5236\u5b9a\u8ba1\u5212\u548c\u601d\u8003\u4e0b\u4e00\u6b65\u9700\u8981\u91c7\u53d6\u7684\u884c\u52a8\u3002 \u8d1f\u8d23\u63a7\u5236\u6574\u6bb5\u4ee3\u7801\u7684\u903b\u8f91\u548c\u6267\u884c\uff0c\u4ee3\u7406\u66b4\u9732\u4e86\u4e00\u4e2a\u63a5\u53e3\uff0c\u7528\u6765\u63a5\u6536\u7528\u6237\u8f93\u5165\u3002 LangChain \u63d0\u4f9b\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u4ee3\u7406\uff08\u4ee5\u5176\u4e2d\u4e09\u79cd\u4e3e\u4f8b\uff09: zero-shot-react-description: \u5229\u7528 ReAct \u6846\u67b6\u6839\u636e\u5de5\u5177\u7684\u63cf\u8ff0\u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u5de5\u5177\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u5de5\u5177\uff0c\u4f46\u9700\u8981\u4e3a\u6bcf\u4e2a\u5de5\u5177\u63d0\u4f9b\u63cf\u8ff0\u4fe1\u606f\u3002\u5de5\u5177\u7684\u9009\u62e9\u5355\u7eaf\u4f9d\u9760\u5de5\u5177\u7684\u63cf\u8ff0\u4fe1\u606f\u3002 structured-chat-zero-shot-react-description\uff1a\u76f8\u8f83\u4e8e\u5355\u4e00\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\u7684\u4ee3\u7406\uff0c\u8be5\u7c7b\u578b\u7684\u4ee3\u7406\u53ef\u4ee5\u901a\u8fc7\u5de5\u5177\u7684\u53c2\u6570schema\u521b\u5efa\u7ed3\u6784\u5316\u7684\u52a8\u4f5c\u8f93\u5165\u3002 conversational-react-description\uff1a\u8fd9\u7c7b\u4ee3\u7406\u4e13\u4e3a\u5bf9\u8bdd\u573a\u666f\u8bbe\u8ba1\uff0c\u4f7f\u7528\u5177\u6709\u5bf9\u8bdd\u6027\u7684\u63d0\u793a\u8bcd\uff0c\u5229\u7528 ReAct \u6846\u67b6\u9009\u62e9\u5de5\u5177\uff0c\u5e76\u5229\u7528\u8bb0\u5fc6\u529f\u80fd\u6765\u4fdd\u5b58\u5bf9\u8bdd\u5386\u53f2\u3002 Tool\u5de5\u5177\uff1a \u89e3\u51b3\u95ee\u9898\u7684\u5de5\u5177 \u7b2c\u4e09\u65b9\u670d\u52a1\u7684\u96c6\u6210\uff0c\u4f8b\u5982\u8ba1\u7b97\u3001\u7f51\u7edc(\u8c37\u6b4c\u3001bing)\u3001\u4ee3\u7801\u6267\u884c\u7b49\u7b49 \u73b0\u5728\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u4f7f\u7528\u4ee3\u7406\u7684\u4f8b\u5b50\uff1a\u5047\u8bbe\u6211\u4eec\u60f3 \"\"\"\u89e3\u4ee5\u4e0b\u65b9\u7a0b\uff1a3x + 4(x + 2) - 84 = y; \u5176\u4e2dx\u4e3a3\uff0c\u8bf7\u95eey\u662f\u591a\u5c11\uff1f\"\"\"\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee3\u7406\u5de5\u5177\uff0c\u8ba9Agents\u9009\u62e9\u6267\u884c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a import os from langchain.agents import load_tools from langchain.agents import initialize_agent from langchain.agents import AgentType from langchain_community.llms import Ollama # \u5b9e\u4f8b\u5316\u5927\u6a21\u578b llm = Ollama ( model = \"qwen2.5:7b\" ) # \u8bbe\u7f6e\u5de5\u5177 # \"serpapi\"\u5b9e\u65f6\u8054\u7f51\u641c\u7d20\u5de5\u5177\u3001\"math\": \u6570\u5b66\u8ba1\u7b97\u7684\u5de5\u5177 # tools = load_tools([\"serpapi\", \"llm-math\"], llm=llm) tools = load_tools ([ \"llm-math\" ], llm = llm ) # \u5b9e\u4f8b\u5316\u4ee3\u7406Agent:\u8fd4\u56de AgentExecutor \u7c7b\u578b\u7684\u5b9e\u4f8b agent = initialize_agent ( tools , llm , agent = AgentType . ZERO_SHOT_REACT_DESCRIPTION , verbose = True ) print ( 'agent' , agent ) # \u51c6\u5907\u63d0\u793a\u8bcd from langchain_core.prompts import PromptTemplate prompt_template = \"\"\"\u89e3\u4ee5\u4e0b\u65b9\u7a0b\uff1a3x + 4(x + 2) - 84 = y; \u5176\u4e2dx\u4e3a3\uff0c\u8bf7\u95eey\u662f\u591a\u5c11\uff1f\"\"\" prompt = PromptTemplate . from_template ( prompt_template ) print ( 'prompt-->' , prompt ) # \u4ee3\u7406Agent\u5de5\u4f5c result = agent . run ( prompt ) print ( result ) \u6ce8\u610f\uff0c\u5982\u679c\u8fd0\u884c\u8fd9\u4e2a\u793a\u4f8b\u4f60\u8981\u4f7f\u7528serpapi\uff0c \u9700\u8981\u7533\u8bf7 serpapi token\uff0c\u5e76\u4e14\u8bbe\u7f6e\u5230\u73af\u5883\u53d8\u91cf SERPAPI_API_KEY \uff0c\u7136\u540e\u5b89\u88c5\u4f9d\u8d56\u5305 google-search-results \u67e5\u8be2\u6240\u6709\u5de5\u5177\u7684\u540d\u79f0 from langchain.agents import get_all_tool_names results = get_all_tool_names () print ( results ) # ['python_repl', 'requests', 'requests_get', 'requests_post', 'requests_patch', 'requests_put', 'requests_delete', 'terminal', 'sleep', 'wolfram-alpha', 'google-search', 'google-search-results-json', 'searx-search-results-json', 'bing-search', 'metaphor-search', 'ddg-search', 'google-serper', 'google-scholar', 'google-serper-results-json', 'searchapi', 'searchapi-results-json', 'serpapi', 'dalle-image-generator', 'twilio', 'searx-search', 'wikipedia', 'arxiv', 'golden-query', 'pubmed', 'human', 'awslambda', 'sceneXplain', 'graphql', 'openweathermap-api', 'dataforseo-api-search', 'dataforseo-api-search-json', 'eleven_labs_text2speech', 'google_cloud_texttospeech', 'news-api', 'tmdb-api', 'podcast-api', 'memorize', 'llm-math', 'open-meteo-api'] LangChain\u652f\u6301\u7684\u5de5\u5177\u5982\u4e0b\uff1a \u5de5\u5177 \u63cf\u8ff0 Bing Search Bing\u641c\u7d22 Google Search Google\u641c\u7d22 Google Serper API \u4e00\u4e2a\u4ecegoogle\u641c\u7d22\u63d0\u53d6\u6570\u636e\u7684API Python REPL \u6267\u884cpython\u4ee3\u7801 Requests \u6267\u884cpython\u4ee3\u7801","title":"2.4 Agents (\u4ee3\u7406)"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#25-memory","text":"\u5927\u6a21\u578b\u672c\u8eab\u4e0d\u5177\u5907\u4e0a\u4e0b\u6587\u7684\u6982\u5ff5\uff0c\u5b83\u5e76\u4e0d\u4fdd\u5b58\u4e0a\u6b21\u4ea4\u4e92\u7684\u5185\u5bb9\uff0cChatGPT\u4e4b\u6240\u4ee5\u80fd\u591f\u548c\u4eba\u6b63\u5e38\u6c9f\u901a\u5bf9\u8bdd\uff0c\u56e0\u4e3a\u5b83\u8fdb\u884c\u4e86\u4e00\u5c42\u5c01\u88c5\uff0c\u5c06\u5386\u53f2\u8bb0\u5f55\u56de\u4f20\u7ed9\u4e86\u6a21\u578b\u3002 \u56e0\u6b64 LangChain \u4e5f\u63d0\u4f9b\u4e86Memory\u7ec4\u4ef6, Memory\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff1a\u77ed\u671f\u8bb0\u5fc6\u548c\u957f\u671f\u8bb0\u5fc6\u3002\u77ed\u671f\u8bb0\u5fc6\u4e00\u822c\u6307\u5355\u4e00\u4f1a\u8bdd\u65f6\u4f20\u9012\u6570\u636e\uff0c\u957f\u671f\u8bb0\u5fc6\u5219\u662f\u5904\u7406\u591a\u4e2a\u4f1a\u8bdd\u65f6\u83b7\u53d6\u548c\u66f4\u65b0\u4fe1\u606f\u3002 \u76ee\u524d\u7684Memory\u7ec4\u4ef6\u53ea\u9700\u8981\u8003\u8651ChatMessageHistory\u3002\u4e3e\u4f8b\u5206\u6790\uff1a from langchain.memory import ChatMessageHistory history = ChatMessageHistory () history . add_user_message ( \"\u5728\u5417\uff1f\" ) history . add_ai_message ( \"\u6709\u4ec0\u4e48\u4e8b?\" ) print ( history . messages ) #\u6253\u5370\u7ed3\u679c\uff1a ''' [HumanMessage(content='\u5728\u5417\uff1f'), AIMessage(content='\u6709\u4ec0\u4e48\u4e8b?')] ''' \u548c Qianfan\u7ed3\u5408\uff0c\u76f4\u63a5\u4f7f\u7528 ConversationChain \uff1a from langchain import ConversationChain from langchain_community.llms import Ollama # \u5b9e\u4f8b\u5316\u5927\u6a21\u578b llm = Ollama ( model = \"qwen2.5:7b\" ) conversation = ConversationChain ( llm = llm ) resut1 = conversation . predict ( input = \"\u5c0f\u660e\u67091\u53ea\u732b\" ) print ( resut1 ) print ( '*' * 80 ) resut2 = conversation . predict ( input = \"\u5c0f\u521a\u67092\u53ea\u72d7\" ) print ( resut2 ) print ( '*' * 80 ) resut3 = conversation . predict ( input = \"\u5c0f\u660e\u548c\u5c0f\u521a\u4e00\u5171\u6709\u51e0\u53ea\u5ba0\u7269?\" ) print ( resut3 ) print ( '*' * 80 ) # \u6253\u5370\u7ed3\u679c\uff1a ''' \u5c0f\u660e\u6709\u4e00\u53ea\u732b\uff0c\u90a3\u8fd9\u53ea\u732b\u53eb\u4ec0\u4e48\u540d\u5b57\u5462\uff1f\u6216\u8005\u4f60\u60f3\u8981\u544a\u8bc9\u6211\u4e00\u4e9b\u5173\u4e8e\u5c0f\u660e\u548c\u4ed6\u732b\u54aa\u7684\u6545\u4e8b\u5417\uff1f ******************************************************************************** \u5c0f\u521a\u5bb6\u6709\u4e24\u53ea\u72d7\uff0c\u90a3\u8fd9\u4e24\u4f4d\u5fe0\u8bda\u7684\u5c0f\u4f19\u4f34\u53eb\u4ec0\u4e48\u5462\uff1f\u8fd8\u662f\u8bf4\u4f60\u53ef\u4ee5\u5206\u4eab\u4e00\u4e0b\u5c0f\u521a\u548c\u4ed6\u7684\u72d7\u72d7\u4eec\u7684\u8da3\u4e8b\u5417\uff1f\u6bd4\u5982\u4ed6\u4eec\u4e00\u8d77\u505a\u4e86\u4e9b\u4ec0\u4e48\u6709\u8da3\u7684\u4e8b\u60c5\u5462\uff1f ******************************************************************************** \u5c0f\u660e\u548c\u5c0f\u521a\u603b\u5171\u67093\u53ea\u5ba0\u7269\u3002\u5c0f\u660e\u67091\u53ea\u732b\uff0c\u5c0f\u521a\u67092\u53ea\u72d7\u3002\u5982\u679c\u4f60\u613f\u610f\u5206\u4eab\u66f4\u591a\u5173\u4e8e\u4ed6\u4eec\u7684\u6545\u4e8b\u6216\u60f3\u77e5\u9053\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\uff0c\u8bf7\u968f\u65f6\u544a\u8bc9\u6211\uff01 ******************************************************************************** ''' \u5982\u679c\u8981\u50cfchatGPT\u4e00\u6837\uff0c\u957f\u671f\u4fdd\u5b58\u5386\u53f2\u6d88\u606f\uff0c\uff0c\u53ef\u4ee5\u4f7f\u7528 messages_to_dict \u65b9\u6cd5 from langchain.memory import ChatMessageHistory from langchain.schema import messages_from_dict , messages_to_dict history = ChatMessageHistory () history . add_user_message ( \"hi!\" ) history . add_ai_message ( \"whats up?\" ) dicts = messages_to_dict ( history . messages ) print ( dicts ) ''' [{'type': 'human', 'data': {'content': 'hi!', 'additional_kwargs': {}, 'type': 'human', 'example': False}}, {'type': 'ai', 'data': {'content': 'whats up?', 'additional_kwargs': {}, 'type': 'ai', 'example': False}}] ''' # \u8bfb\u53d6\u5386\u53f2\u6d88\u606f new_messages = messages_from_dict ( dicts ) print ( new_messages ) #[HumanMessage(content='hi!'), AIMessage(content='whats up?')]","title":"2.5 Memory"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#26-indexes","text":"Indexes\u7ec4\u4ef6\u7684\u76ee\u7684\u662f\u8ba9LangChain\u5177\u5907\u5904\u7406\u6587\u6863\u5904\u7406\u7684\u80fd\u529b\uff0c\u5305\u62ec\uff1a\u6587\u6863\u52a0\u8f7d\u3001\u68c0\u7d22\u7b49\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u6587\u6863\u4e0d\u5c40\u9650\u4e8etxt\u3001pdf\u7b49\u6587\u672c\u7c7b\u5185\u5bb9\uff0c\u8fd8\u6db5\u76d6email\u3001\u533a\u5757\u94fe\u3001\u89c6\u9891\u7b49\u5185\u5bb9\u3002 Indexes\u7ec4\u4ef6\u4e3b\u8981\u5305\u542b\u7c7b\u578b\uff1a \u6587\u6863\u52a0\u8f7d\u5668 \u6587\u672c\u5206\u5272\u5668 VectorStores \u68c0\u7d22\u5668","title":"2.6 Indexes (\u7d22\u5f15)"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#261","text":"\u6587\u6863\u52a0\u8f7d\u5668\u4e3b\u8981\u57fa\u4e8e Unstructured \u5305\uff0c Unstructured \u662f\u4e00\u4e2apython\u5305\uff0c\u53ef\u4ee5\u628a\u5404\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\u8f6c\u6362\u6210\u6587\u672c\u3002 \u6587\u6863\u52a0\u8f7d\u5668\u4f7f\u7528\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5f15\u5165\u76f8\u5e94\u7684loader\u5de5\u5177\uff1a from langchain_community.document_loaders import UnstructuredFileLoader loader = UnstructuredFileLoader ( '\u8863\u670d\u5c5e\u6027.txt' , encoding = 'utf8' ) docs = loader . load () print ( docs ) print ( len ( docs )) first_01 = docs [ 0 ] . page_content [: 4 ] print ( first_01 ) print ( '*' * 80 ) from langchain_community.document_loaders import TextLoader loader = TextLoader ( '\u8863\u670d\u5c5e\u6027.txt' , encoding = 'utf8' ) docs = loader . load () print ( docs ) print ( len ( docs )) first_01 = docs [ 0 ] . page_content [: 4 ] print ( first_01 ) # \u6253\u5370\u7ed3\u679c\uff1a ''' [Document(page_content='\u8eab\u9ad8\uff1a160-170cm\uff0c \u4f53\u91cd\uff1a90-115\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801M\u3002\\n\u8eab\u9ad8\uff1a165-175cm\uff0c \u4f53\u91cd\uff1a115-135\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801L\u3002\\n\u8eab\u9ad8\uff1a170-178cm\uff0c \u4f53\u91cd\uff1a130-150\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801XL\u3002\\n\u8eab\u9ad8\uff1a175-182cm\uff0c \u4f53\u91cd\uff1a145-165\u65a4\uff0c\u5efa\u8bae\u5c3a\u78012XL\u3002\\n\u8eab\u9ad8\uff1a178-185cm\uff0c \u4f53\u91cd\uff1a160-180\u65a4\uff0c\u5efa\u8bae\u5c3a\u78013XL\u3002\\n\u8eab\u9ad8\uff1a180-190cm\uff0c \u4f53\u91cd\uff1a180-210\u65a4\uff0c\u5efa\u8bae\u5c3a\u78014XL\u3002\\n\u9762\u6599\u5206\u7c7b\uff1a\u5176\u4ed6\\n\u56fe\u6848\uff1a\u7eaf\u8272\\n\u9886\u578b\uff1a\u7ffb\u9886\\n\u8863\u95e8\u895f\uff1a\u5355\u6392\u6263\\n\u989c\u8272\uff1a\u9ed1\u8272 \u5361\u5176\u8272 \u7c89\u8272 \u674f\u8272\\n\u8896\u578b\uff1a\u6536\u53e3\u8896\\n\u9002\u7528\u5b63\u8282\uff1a\u51ac\u5b63\\n\u8896\u957f\uff1a\u957f\u8896\\n\u539a\u8584\uff1a\u539a\u6b3e\\n\u9002\u7528\u573a\u666f\uff1a\u5176\u4ed6\u4f11\u95f2\\n\u8863\u957f\uff1a\u5e38\u89c4\u6b3e\\n\u7248\u578b\uff1a\u5bbd\u677e\u578b\\n\u6b3e\u5f0f\u7ec6\u8282\uff1a\u5047\u4e24\u4ef6\\n\u5de5\u827a\u5904\u7406\uff1a\u514d\u70eb\u5904\u7406\\n\u9002\u7528\u5bf9\u8c61\uff1a\u9752\u5e74\\n\u9762\u6599\u529f\u80fd\uff1a\u4fdd\u6696\\n\u7a7f\u642d\u65b9\u5f0f\uff1a\u5916\u7a7f\\n\u9500\u552e\u6e20\u9053\u7c7b\u578b\uff1a\u7eaf\u7535\u5546(\u53ea\u5728\u7ebf\u4e0a\u9500\u552e)\\n\u6750\u8d28\u6210\u5206\uff1a\u68c9100%', metadata={'source': '\u8863\u670d\u5c5e\u6027.txt'})] 1 \u8eab\u9ad8\uff1a1 ******************************************************************************** [Document(page_content='\u8eab\u9ad8\uff1a160-170cm\uff0c \u4f53\u91cd\uff1a90-115\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801M\u3002\\n\\n\u8eab\u9ad8\uff1a165-175cm\uff0c \u4f53\u91cd\uff1a115-135\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801L\u3002\\n\\n\u8eab\u9ad8\uff1a170-178cm\uff0c \u4f53\u91cd\uff1a130-150\u65a4\uff0c\u5efa\u8bae\u5c3a\u7801XL\u3002\\n\\n\u8eab\u9ad8\uff1a175-182cm\uff0c \u4f53\u91cd\uff1a145-165\u65a4\uff0c\u5efa\u8bae\u5c3a\u78012XL\u3002\\n\\n\u8eab\u9ad8\uff1a178-185cm\uff0c \u4f53\u91cd\uff1a160-180\u65a4\uff0c\u5efa\u8bae\u5c3a\u78013XL\u3002\\n\\n\u8eab\u9ad8\uff1a180-190cm\uff0c \u4f53\u91cd\uff1a180-210\u65a4\uff0c\u5efa\u8bae\u5c3a\u78014XL\u3002\\n\\n\u9762\u6599\u5206\u7c7b\uff1a\u5176\u4ed6\\n\\n\u56fe\u6848\uff1a\u7eaf\u8272\\n\\n\u9886\u578b\uff1a\u7ffb\u9886\\n\\n\u8863\u95e8\u895f\uff1a\u5355\u6392\u6263\\n\\n\u989c\u8272\uff1a\u9ed1\u8272 \u5361\u5176\u8272 \u7c89\u8272 \u674f\u8272\\n\\n\u8896\u578b\uff1a\u6536\u53e3\u8896\\n\\n\u9002\u7528\u5b63\u8282\uff1a\u51ac\u5b63\\n\\n\u8896\u957f\uff1a\u957f\u8896\\n\\n\u539a\u8584\uff1a\u539a\u6b3e\\n\\n\u9002\u7528\u573a\u666f\uff1a\u5176\u4ed6\u4f11\u95f2\\n\\n\u8863\u957f\uff1a\u5e38\u89c4\u6b3e\\n\\n\u7248\u578b\uff1a\u5bbd\u677e\u578b\\n\\n\u6b3e\u5f0f\u7ec6\u8282\uff1a\u5047\u4e24\u4ef6\\n\\n\u5de5\u827a\u5904\u7406\uff1a\u514d\u70eb\u5904\u7406\\n\\n\u9002\u7528\u5bf9\u8c61\uff1a\u9752\u5e74\\n\\n\u9762\u6599\u529f\u80fd\uff1a\u4fdd\u6696\\n\\n\u7a7f\u642d\u65b9\u5f0f\uff1a\u5916\u7a7f\\n\\n\u9500\u552e\u6e20\u9053\u7c7b\u578b\uff1a\u7eaf\u7535\u5546(\u53ea\u5728\u7ebf\u4e0a\u9500\u552e)\\n\\n\u6750\u8d28\u6210\u5206\uff1a\u68c9100%', metadata={'source': '\u8863\u670d\u5c5e\u6027.txt'})] 1 \u8eab\u9ad8\uff1a1 ''' LangChain\u652f\u6301\u7684\u6587\u6863\u52a0\u8f7d\u5668 (\u90e8\u5206)\uff1a \u6587\u6863\u52a0\u8f7d\u5668 \u63cf\u8ff0 CSV CSV\u95ee\u4ef7 JSON Files \u52a0\u8f7dJSON\u6587\u4ef6 Jupyter Notebook \u52a0\u8f7dnotebook\u6587\u4ef6 Markdown \u52a0\u8f7dmarkdown\u6587\u4ef6 Microsoft PowerPoint \u52a0\u8f7dppt\u6587\u4ef6 PDF \u52a0\u8f7dpdf\u6587\u4ef6 Images \u52a0\u8f7d\u56fe\u7247 File Directory \u52a0\u8f7d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6 HTML \u7f51\u9875","title":"2.6.1 \u6587\u6863\u52a0\u8f7d\u5668"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#262","text":"\u7531\u4e8e\u6a21\u578b\u5bf9\u8f93\u5165\u7684\u5b57\u7b26\u957f\u5ea6\u6709\u9650\u5236\uff0c\u6211\u4eec\u5728\u78b0\u5230\u5f88\u957f\u7684\u6587\u672c\u65f6\uff0c\u9700\u8981\u628a\u6587\u672c\u5206\u5272\u6210\u591a\u4e2a\u5c0f\u7684\u6587\u672c\u7247\u6bb5\u3002 \u6587\u672c\u5206\u5272\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u6309\u7167\u5b57\u7b26\u957f\u5ea6\u8fdb\u884c\u5206\u5272\uff0c\u4f46\u662f\u8fd9\u4f1a\u5e26\u6765\u5f88\u591a\u95ee\u9898\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u6587\u672c\u662f\u4e00\u6bb5\u4ee3\u7801\uff0c\u4e00\u4e2a\u51fd\u6570\u88ab\u5206\u5272\u5230\u4e24\u6bb5\u4e4b\u540e\u5c31\u6210\u4e86\u6ca1\u6709\u610f\u4e49\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u6574\u4f53\u7684\u539f\u5219\u662f\u628a\u8bed\u4e49\u76f8\u5173\u7684\u6587\u672c\u7247\u6bb5\u653e\u5728\u4e00\u8d77\u3002 LangChain\u4e2d\u6700\u57fa\u672c\u7684\u6587\u672c\u5206\u5272\u5668\u662f CharacterTextSplitter \uff0c\u5b83\u6309\u7167\u6307\u5b9a\u7684\u5206\u9694\u7b26\uff08\u9ed8\u8ba4\u201c\\n\\n\u201d\uff09\u8fdb\u884c\u5206\u5272\uff0c\u5e76\u4e14\u8003\u8651\u6587\u672c\u7247\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u3002\u6211\u4eec\u770b\u4e2a\u4f8b\u5b50\uff1a from langchain.text_splitter import CharacterTextSplitter text_splitter = CharacterTextSplitter ( separator = \" \" , # \u7a7a\u683c\u5206\u5272\uff0c\u4f46\u662f\u7a7a\u683c\u4e5f\u5c5e\u4e8e\u5b57\u7b26 chunk_size = 5 , chunk_overlap = 0 , ) # \u4e00\u53e5\u5206\u5272 a = text_splitter . split_text ( \"a b c d e f\" ) print ( a ) # ['a b c', 'd e f'] # \u591a\u53e5\u8bdd\u5206\u5272\uff08\u6587\u6863\u5206\u5272\uff09 texts = text_splitter . create_documents ([ \"a b c d e f\" , \"e f g h\" ], ) print ( texts ) # [Document(page_content='a b c'), Document(page_content='d e f'), Document(page_content='e f g'), Document(page_content='h')] \u9664\u4e86CharacterTextSplitter\u5206\u5272\u5668\uff0cLangChain\u8fd8\u652f\u6301\u5176\u4ed6\u6587\u6863\u5206\u5272\u5668 (\u90e8\u5206)\uff1a \u6587\u6863\u52a0\u8f7d\u5668 \u63cf\u8ff0 LatexTextSplitter \u6cbf\u7740Latex\u6807\u9898\u3001\u6807\u9898\u3001\u679a\u4e3e\u7b49\u5206\u5272\u6587\u672c\u3002 MarkdownTextSplitter \u6cbf\u7740Markdown\u7684\u6807\u9898\u3001\u4ee3\u7801\u5757\u6216\u6c34\u5e73\u89c4\u5219\u6765\u5206\u5272\u6587\u672c\u3002 TokenTextSplitter \u6839\u636eopenAI\u7684token\u6570\u8fdb\u884c\u5206\u5272 PythonCodeTextSplitter \u6cbf\u7740Python\u7c7b\u548c\u65b9\u6cd5\u7684\u5b9a\u4e49\u5206\u5272\u6587\u672c\u3002","title":"2.6.2 \u6587\u6863\u5206\u5272\u5668"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#263-vectorstores","text":"VectorStores\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u6570\u636e\u5e93\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u5b58\u50a8\u7531\u5d4c\u5165\u521b\u5efa\u7684\u5411\u91cf\uff0c\u63d0\u4f9b\u76f8\u4f3c\u67e5\u8be2\u7b49\u529f\u80fd\u3002\u6211\u4eec\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a Chroma \u7ec4\u4ef6 pip install chromadb \u4f5c\u4e3a\u4f8b\u5b50\uff1a from langchain_community.embeddings import OllamaEmbeddings from langchain.text_splitter import CharacterTextSplitter from langchain_community.vectorstores import Chroma # pku.txt\u5185\u5bb9\uff1a<https://www.pku.edu.cn/about.html> with open ( './pku.txt' ) as f : state_of_the_union = f . read () text_splitter = CharacterTextSplitter ( chunk_size = 100 , chunk_overlap = 0 ) texts = text_splitter . split_text ( state_of_the_union ) print ( texts ) embeddings = OllamaEmbeddings ( model = \"mxbai-embed-large\" ) docsearch = Chroma . from_texts ( texts , embeddings ) query = \"1937\u5e74\u5317\u4eac\u5927\u5b66\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\" docs = docsearch . similarity_search ( query ) print ( docs ) ''' [Document(metadata={}, page_content='1937\u5e74\u5362\u6c9f\u6865\u4e8b\u53d8\u540e\uff0c\u5317\u4eac\u5927\u5b66\u4e0e\u6e05\u534e\u5927\u5b66\u3001\u5357\u5f00\u5927\u5b66\u5357\u8fc1\u957f\u6c99\uff0c\u5171\u540c\u7ec4\u6210\u56fd\u7acb\u957f\u6c99\u4e34\u65f6\u5927\u5b66\u30021938\u5e74\uff0c\u4e34\u65f6\u5927\u5b66\u53c8\u897f\u8fc1\u6606\u660e\uff0c\u66f4\u540d\u4e3a\u56fd\u7acb\u897f\u5357\u8054\u5408\u5927\u5b66\u3002\u6297\u65e5\u6218\u4e89\u80dc\u5229\u540e\uff0c\u5317\u4eac\u5927\u5b66\u4e8e1946\u5e7410\u6708\u5728\u5317\u5e73\u590d\u5458\u3002'), Document(metadata={}, page_content='1917\u5e74\uff0c\u8457\u540d\u6559\u80b2\u5bb6\u8521\u5143\u57f9\u5c31\u4efb\u5317\u4eac\u5927\u5b66\u6821\u957f\uff0c\u4ed6\u201c\u5faa\u601d\u60f3\u81ea\u7531\u539f\u5219\uff0c\u53d6\u517c\u5bb9\u5e76\u5305\u4e3b\u4e49\u201d\uff0c\u5bf9\u5317\u4eac\u5927\u5b66\u8fdb\u884c\u4e86\u5353\u6709\u6210\u6548\u7684\u6539\u9769\uff0c\u4fc3\u8fdb\u4e86\u601d\u60f3\u89e3\u653e\u548c\u5b66\u672f\u7e41\u8363\u3002\u9648\u72ec\u79c0\u3001\u674e\u5927\u948a\u3001\u6bdb\u6cfd\u4e1c\u4ee5\u53ca\u9c81\u8fc5\u3001\u80e1\u9002\u3001\u674e\u56db\u5149\u7b49\u4e00\u6279\u6770\u51fa\u4eba\u58eb\u90fd\u66fe\u5728\u5317\u4eac\u5927\u5b66\u4efb\u6559\u6216\u4efb\u804c\u3002'), Document(metadata={}, page_content='\u5317\u4eac\u5927\u5b66\u521b\u529e\u4e8e1898\u5e74\uff0c\u662f\u620a\u620c\u53d8\u6cd5\u7684\u4ea7\u7269\uff0c\u4e5f\u662f\u4e2d\u534e\u6c11\u65cf\u6551\u4ea1\u56fe\u5b58\u3001\u5174\u5b66\u56fe\u5f3a\u7684\u7ed3\u679c\uff0c\u521d\u540d\u4eac\u5e08\u5927\u5b66\u5802\uff0c\u662f\u4e2d\u56fd\u8fd1\u73b0\u4ee3\u7b2c\u4e00\u6240\u56fd\u7acb\u7efc\u5408\u6027\u5927\u5b66\uff0c\u8f9b\u4ea5\u9769\u547d\u540e\uff0c\u4e8e1912\u5e74\u6539\u4e3a\u73b0\u540d\u3002'), Document(metadata={}, page_content='\u5728\u60a0\u4e45\u7684\u6587\u660e\u5386\u7a0b\u4e2d\uff0c\u53e4\u4ee3\u4e2d\u56fd\u66fe\u521b\u7acb\u592a\u5b66\u3001\u56fd\u5b50\u5b66\u3001\u56fd\u5b50\u76d1\u7b49\u56fd\u5bb6\u6700\u9ad8\u5b66\u5e9c\uff0c\u5728\u4e2d\u56fd\u548c\u4e16\u754c\u6559\u80b2\u53f2\u4e0a\u5177\u6709\u91cd\u8981\u5f71\u54cd\u3002\u5317\u4eac\u5927\u5b66\u201c\u4e0a\u627f\u592a\u5b66\u6b63\u7edf\uff0c\u4e0b\u7acb\u5927\u5b66\u7956\u5ead\u201d\uff0c\u65e2\u662f\u4e2d\u534e\u6587\u8109\u548c\u6559\u80b2\u4f20\u7edf\u7684\u4f20\u627f\u8005\uff0c\u4e5f\u6807\u5fd7\u7740\u4e2d\u56fd\u73b0\u4ee3\u9ad8\u7b49\u6559\u80b2\u7684\u5f00\u7aef\u3002\u5176\u521b\u529e\u4e4b\u521d\u4e5f\u662f\u56fd\u5bb6\u6700\u9ad8\u6559\u80b2\u884c\u653f\u673a\u5173\uff0c\u5bf9\u5efa\u7acb\u4e2d\u56fd\u73b0\u4ee3\u5b66\u5236\u4f5c\u51fa\u91cd\u8981\u5386\u53f2\u8d21\u732e\u3002')] ''' LangChain\u652f\u6301\u7684VectorStore\u5982\u4e0b\uff1a VectorStore \u63cf\u8ff0 Chroma \u4e00\u4e2a\u5f00\u6e90\u5d4c\u5165\u5f0f\u6570\u636e\u5e93 ElasticSearch ElasticSearch Milvus \u7528\u4e8e\u5b58\u50a8\u3001\u7d22\u5f15\u548c\u7ba1\u7406\u7531\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u548c\u5176\u4ed6\u673a\u5668\u5b66\u4e60\uff08ML\uff09\u6a21\u578b\u4ea7\u751f\u7684\u5927\u91cf\u5d4c\u5165\u5411\u91cf\u7684\u6570\u636e\u5e93 Redis \u57fa\u4e8eredis\u7684\u68c0\u7d22\u5668 FAISS Facebook AI\u76f8\u4f3c\u6027\u641c\u7d22\u670d\u52a1 Pinecone \u4e00\u4e2a\u5177\u6709\u5e7f\u6cdb\u529f\u80fd\u7684\u5411\u91cf\u6570\u636e\u5e93","title":"2.6.3 VectorStores"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#264","text":"\u68c0\u7d22\u5668\u662f\u4e00\u79cd\u4fbf\u4e8e\u6a21\u578b\u67e5\u8be2\u7684\u5b58\u50a8\u6570\u636e\u7684\u65b9\u5f0f\uff0cLangChain\u7ea6\u5b9a\u68c0\u7d22\u5668\u7ec4\u4ef6\u81f3\u5c11\u6709\u4e00\u4e2a\u65b9\u6cd5 get_relevant_texts \uff0c\u8fd9\u4e2a\u65b9\u6cd5\u63a5\u6536\u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e00\u7ec4\u6587\u6863\u3002 from langchain.document_loaders import TextLoader from langchain.text_splitter import CharacterTextSplitter from langchain_community.vectorstores import FAISS from langchain_community.embeddings import OllamaEmbeddings loader = TextLoader ( './pku.txt' ) documents = loader . load () text_splitter = CharacterTextSplitter ( chunk_size = 100 , chunk_overlap = 0 ) texts = text_splitter . split_documents ( documents ) embeddings = OllamaEmbeddings ( model = \"mxbai-embed-large\" ) db = FAISS . from_documents ( texts , embeddings ) retriever = db . as_retriever ( search_kwargs = { 'k' : 1 }) docs = retriever . get_relevant_documents ( \"\u5317\u4eac\u5927\u5b66\u4ec0\u4e48\u65f6\u5019\u6210\u7acb\u7684\" ) print ( docs ) #\u6253\u5370\u7ed3\u679c\uff1a ''' [Document(metadata={'source': './pku.txt'}, page_content='\u5317\u4eac\u5927\u5b66\u521b\u529e\u4e8e1898\u5e74\uff0c\u662f\u620a\u620c\u53d8\u6cd5\u7684\u4ea7\u7269\uff0c\u4e5f\u662f\u4e2d\u534e\u6c11\u65cf\u6551\u4ea1\u56fe\u5b58\u3001\u5174\u5b66\u56fe\u5f3a\u7684\u7ed3\u679c\uff0c\u521d\u540d\u4eac\u5e08\u5927\u5b66\u5802\uff0c\u662f\u4e2d\u56fd\u8fd1\u73b0\u4ee3\u7b2c\u4e00\u6240\u56fd\u7acb\u7efc\u5408\u6027\u5927\u5b66\uff0c\u8f9b\u4ea5\u9769\u547d\u540e\uff0c\u4e8e1912\u5e74\u6539\u4e3a\u73b0\u540d\u3002')] ''' LangChain\u652f\u6301\u7684\u68c0\u7d22\u5668\u7ec4\u4ef6\u5982\u4e0b\uff1a \u68c0\u7d22\u5668 \u4ecb\u7ecd Azure Cognitive Search Retriever Amazon ACS\u68c0\u7d22\u670d\u52a1 ChatGPT Plugin Retriever ChatGPT\u68c0\u7d22\u63d2\u4ef6 Databerry Databerry\u68c0\u7d22 ElasticSearch BM25 ElasticSearch\u68c0\u7d22\u5668 Metal Metal\u68c0\u7d22\u5668 Pinecone Hybrid Search Pinecone\u68c0\u7d22\u670d\u52a1 SVM Retriever SVM\u68c0\u7d22\u5668 TF-IDF Retriever TF-IDF\u68c0\u7d22\u5668 VectorStore Retriever VectorStore\u68c0\u7d22\u5668 Vespa retriever \u4e00\u4e2a\u652f\u6301\u7ed3\u6784\u5316\u6587\u672c\u548c\u5411\u91cf\u641c\u7d22\u7684\u5e73\u53f0 Weaviate Hybrid Search \u4e00\u4e2a\u5f00\u6e90\u7684\u5411\u91cf\u641c\u7d22\u5f15\u64ce Wikipedia \u652f\u6301wikipedia\u5185\u5bb9\u68c0\u7d22","title":"2.6.4 \u68c0\u7d22\u5668"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#3-langchain","text":"\u4e2a\u4eba\u52a9\u624b \u57fa\u4e8e\u6587\u6863\u7684\u95ee\u7b54\u7cfb\u7edf \u804a\u5929\u673a\u5668\u4eba Tabular\u6570\u636e\u67e5\u8be2 API\u4ea4\u4e92 \u4fe1\u606f\u63d0\u53d6 \u6587\u6863\u603b\u7ed3","title":"3 LangChain\u4f7f\u7528\u573a\u666f"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/02-LangChain%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html#4","text":"\u672c\u7ae0\u8282\u4e3b\u8981\u5bf9LangChain\u6846\u67b6\u57fa\u7840\u77e5\u8bc6\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff0c\u8ba9\u6211\u4eec\u5bf9LangChain\u6709\u4e86\u4e00\u4e2a\u521d\u6b65\u8ba4\u8bc6\uff0c\u4e86\u89e3\u4e86LangChain\u7684\u4f7f\u7528\u573a\u666f\u3002","title":"4 \u672c\u7ae0\u5c0f\u7ed3"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html","text":"Milvus\u5411\u91cf\u6570\u636e\u5e93 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3\u4ec0\u4e48\u662f\u5411\u91cf\u6570\u636e\u5e93 \u7406\u89e3Milvus\u548cMysql\u7684\u533a\u522b\u548c\u8054\u7cfb \u638c\u63e1Milvus\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5 1 \u4ec0\u4e48\u662f Milvus \u5411\u91cf\u6570\u636e\u5e93\uff1f \u00b6 Milvus \u662f\u4e00\u6b3e\u5f00\u6e90\u7684\u5411\u91cf\u6570\u636e\u5e93\uff082019\u5e74\u63d0\u51fa\uff09\uff0c\u5176\u552f\u4e00\u76ee\u6807\u662f\u5b58\u50a8\u3001\u7d22\u5f15\u548c\u7ba1\u7406\u7531\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u548c\u5176\u4ed6\u673a\u5668\u5b66\u4e60\uff08ML\uff09\u6a21\u578b\u751f\u6210\u7684\u5927\u89c4\u6a21 \u5d4c\u5165\u5411\u91cf \u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4e13\u95e8\u8bbe\u8ba1\u7528\u4e8e\u5904\u7406\u8f93\u5165\u5411\u91cf\u67e5\u8be2\u7684\u6570\u636e\u5e93\uff0c\u5b83\u80fd\u591f\u5904\u7406\u4e07\u4ebf\u7ea7\u522b\u7684\u5411\u91cf\u7d22\u5f15\u3002\u4e0e\u73b0\u6709\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e3b\u8981\u5904\u7406\u9075\u5faa\u9884\u5b9a\u4e49\u6a21\u5f0f\u7684\u7ed3\u6784\u5316\u6570\u636e\u4e0d\u540c\uff0cMilvus \u4ece\u5e95\u5c42\u8bbe\u8ba1\u7528\u4e8e\u5904\u7406\u4ece\u975e\u7ed3\u6784\u5316\u6570\u636e\u8f6c\u6362\u800c\u6765\u7684\u5d4c\u5165\u5411\u91cf\u3002 \u968f\u7740\u4e92\u8054\u7f51\u7684\u53d1\u5c55\u548c\u6f14\u53d8\uff0c\u975e\u7ed3\u6784\u5316\u6570\u636e\u53d8\u5f97\u8d8a\u6765\u8d8a\u5e38\u89c1\uff0c\u5305\u62ec\u7535\u5b50\u90ae\u4ef6\u3001\u8bba\u6587\u3001\u7269\u8054\u7f51\u4f20\u611f\u5668\u6570\u636e\u3001Facebook \u7167\u7247\u3001\u86cb\u767d\u8d28\u7ed3\u6784\u7b49\u7b49\u3002\u4e3a\u4e86\u4f7f\u8ba1\u7b97\u673a\u80fd\u591f\u7406\u89e3\u548c\u5904\u7406\u975e\u7ed3\u6784\u5316\u6570\u636e\uff0c\u4f7f\u7528\u5d4c\u5165\u6280\u672f\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u5411\u91cf\u3002Milvus \u5b58\u50a8\u548c\u7d22\u5f15\u8fd9\u4e9b\u5411\u91cf\u3002Milvus \u80fd\u591f\u901a\u8fc7\u8ba1\u7b97\u5b83\u4eec\u7684\u76f8\u4f3c\u8ddd\u79bb\u6765\u5206\u6790\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u5982\u679c\u4e24\u4e2a\u5d4c\u5165\u5411\u91cf\u975e\u5e38\u76f8\u4f3c\uff0c\u5219\u610f\u5473\u7740\u539f\u59cb\u6570\u636e\u6e90\u4e5f\u5f88\u76f8\u4f3c\u3002 2 \u5173\u952e\u6982\u5ff5 \u00b6 2.1 \u975e\u7ed3\u6784\u5316\u6570\u636e \u00b6 \u975e\u7ed3\u6784\u5316\u6570\u636e\u5305\u62ec\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u548c\u81ea\u7136\u8bed\u8a00\u7b49\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4e0d\u9075\u5faa\u9884\u5b9a\u4e49\u7684\u6a21\u578b\u6216\u7ec4\u7ec7\u65b9\u5f0f\u3002\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u5360\u636e\u4e86\u4e16\u754c\u6570\u636e\u7684\u7ea6 80%\uff0c\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u4eba\u5de5\u667a\u80fd\uff08AI\uff09\u548c\u673a\u5668\u5b66\u4e60\uff08ML\uff09\u6a21\u578b\u5c06\u5176\u8f6c\u6362\u4e3a\u5411\u91cf\u3002 2.2 \u5d4c\u5165\u5411\u91cf \u00b6 \u5d4c\u5165\u5411\u91cf\u662f\u5bf9\u975e\u7ed3\u6784\u5316\u6570\u636e\uff08\u5982\u7535\u5b50\u90ae\u4ef6\u3001\u7269\u8054\u7f51\u4f20\u611f\u5668\u6570\u636e\u3001Instagram \u7167\u7247\u3001\u86cb\u767d\u8d28\u7ed3\u6784\u7b49\uff09\u7684\u7279\u5f81\u62bd\u8c61\u3002\u6570\u5b66\u4e0a\uff0c\u5d4c\u5165\u5411\u91cf\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u6216\u4e8c\u8fdb\u5236\u6570\u7684\u6570\u7ec4\u3002\u73b0\u4ee3\u7684\u5d4c\u5165\u6280\u672f\u88ab\u7528\u4e8e\u5c06\u975e\u7ed3\u6784\u5316\u6570\u636e\u8f6c\u6362\u4e3a\u5d4c\u5165\u5411\u91cf\u3002 2.3 \u5411\u91cf\u76f8\u4f3c\u5ea6\u641c\u7d22 \u00b6 \u5411\u91cf\u76f8\u4f3c\u5ea6\u641c\u7d22\u662f\u5c06\u5411\u91cf\u4e0e\u6570\u636e\u5e93\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u627e\u5230\u4e0e\u67e5\u8be2\u5411\u91cf\u6700\u76f8\u4f3c\u7684\u5411\u91cf\u7684\u8fc7\u7a0b\u3002\u4f7f\u7528\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\u7b97\u6cd5\u52a0\u901f\u641c\u7d22\u8fc7\u7a0b\u3002\u5982\u679c\u4e24\u4e2a\u5d4c\u5165\u5411\u91cf\u975e\u5e38\u76f8\u4f3c\uff0c\u90a3\u4e48\u539f\u59cb\u6570\u636e\u6e90\u4e5f\u662f\u76f8\u4f3c\u7684\u3002 2.4 Collection \u548c Field \u00b6 \u4e0e\u4f20\u7edf\u6570\u636e\u5e93\u5f15\u64ce\u7c7b\u4f3c\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728 Milvus \u4e2d\u521b\u5efa\u6570\u636e\u5e93\uff0c\u5e76\u4e3a\u67d0\u4e9b\u7528\u6237\u5206\u914d\u6743\u9650\u6765\u7ba1\u7406\u5b83\u4eec\u3002\u90a3\u4e48\u8fd9\u4e9b\u7528\u6237\u5c31\u6709\u6743\u7ba1\u7406\u6570\u636e\u5e93\u4e2d\u7684\u96c6\u5408\u3002\u4e00\u4e2a Milvus \u96c6\u7fa4\u6700\u591a\u652f\u6301 64 \u4e2a\u6570\u636e\u5e93. \u5728\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\uff0c\u8868\u548c\u5b57\u6bb5\u7684\u7ed3\u6784\u53ef\u4ee5\u4e0eMilvus\u4e2d\u7684Collection\u548cField\u8fdb\u884c\u5bf9\u5e94\uff1a Milvus \u5173\u7cfb\u6570\u636e\u5e93 \u63cf\u8ff0 Collection \u8868 \u96c6\u5408\u76f8\u5f53\u4e8e\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u7528\u4e8e\u7ec4\u7ec7\u6570\u636e Field \u5b57\u6bb5 \u5b57\u6bb5Schema\u76f8\u5f53\u4e8e\u8868\u4e2d\u7684\u5217 is_primary \u4e3b\u952e \u5728Field Schema\u4e2d\u6807\u8bb0\u4e3a\u4e3b\u952e\u5bf9\u5e94\u8be5\u5217\u7684\u4e3b\u952e dtype \u6570\u636e\u7c7b\u578b \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982INT, VARCHAR\u7b49 max_length \u6700\u5927\u957f\u5ea6 \u5bf9\u5e94VARCHAR\u7c7b\u578b\u5b57\u6bb5\u7684\u6700\u5927\u5b57\u7b26\u6570 dim - \u5411\u91cf\u5b57\u6bb5\u7684\u7ef4\u5ea6\u6ca1\u6709\u76f4\u63a5\u5bf9\u5e94\uff0c\u4f46\u53ef\u4ee5\u89c6\u4e3a\u7279\u6b8a\u6570\u636e\u5904\u7406 \u6ce8\u610f\uff1a1\u4e2acollection\u6700\u591a\u652f\u63014\u4e2a\u5411\u91cfField 2.4.1 Field schema \u00b6 Field schema \u662f\u5b57\u6bb5\u7684\u903b\u8f91\u5b9a\u4e49\u3002\u6211\u4eec\u5728\u5b9a\u4e49\u96c6\u5408\u67b6\u6784\u548c\u7ba1\u7406\u96c6\u5408\u4e4b\u524d\u9700\u8981\u5b9a\u4e49\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u5b9a\u4e49 Field schema \u3002 Milvus \u96c6\u5408\u4e2d\u4ec5\u652f\u6301\u4e00\u4e2a\u4e3b\u952e\u5b57\u6bb5\u3002 \u5c5e\u6027 \u63cf\u8ff0 \u5907\u6ce8 name \u8981\u521b\u5efa\u7684\u96c6\u5408\u4e2d\u7684\u5b57\u6bb5\u540d\u79f0 String\uff0c\u5fc5\u586b dtype \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b \u5fc5\u586b description \u5b57\u6bb5\u63cf\u8ff0 String\uff0c\u9009\u586b is_primary \u662f\u5426\u8bbe\u7f6e\u8be5\u5b57\u6bb5\u4e3a\u4e3b\u952e\u5b57\u6bb5 Boolean ( true or false ) \u4e3b\u952e\u5b57\u6bb5\u5fc5\u586b auto_id \uff08\u4e3b\u952e\u5b57\u6bb5\u5fc5\u586b\uff09 \u5207\u6362\u4ee5\u542f\u7528\u6216\u7981\u7528\u81ea\u52a8 ID\uff08\u4e3b\u952e\uff09\u5206\u914d True \u6216 False max_length \uff08VARCHAR \u5b57\u6bb5\u5fc5\u9700\uff09 \u5141\u8bb8\u63d2\u5165\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6\u3002 [1, 65,535] dim \u5411\u91cf\u7684\u7ef4\u6570 \u2208[1, 32768] is_partition_key \u8be5\u5b57\u6bb5\u662f\u5426\u662f\u5206\u533a\u952e\u5b57\u6bb5 \u5e03\u5c14\u503c\uff08 true \u6216 false \uff09 2.4.2 collection schema \u00b6 collection schema \u662f collection \u7684\u903b\u8f91\u5b9a\u4e49\u3002\u6211\u4eec\u9700\u8981\u5728\u5b9a\u4e49 collection schema \u4e4b\u524d\u5b9a\u4e49 field schema \u3002 \u5c5e\u6027 \u63cf\u8ff0 \u5907\u6ce8 field \u96c6\u5408\u4e2d\u8981\u521b\u5efa\u7684\u5b57\u6bb5 \u5fc5\u586b description \u96c6\u5408\u63cf\u8ff0 String,\u9009\u586b partition_key_field \u8bbe\u8ba1\u7528\u4f5c\u5206\u533a\u952e\u7684\u5b57\u6bb5\u7684\u540d\u79f0\u3002 String\uff0c \u9009\u586b enable_dynamic_field \u662f\u5426\u542f\u7528\u52a8\u6001\u6a21\u5f0f Boolean ( true or false ) 3 \u4e3a\u4ec0\u4e48\u9009\u62e9 Milvus\uff1f \u00b6 \u5728\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u96c6\u7684\u5411\u91cf\u641c\u7d22\u65f6\u5177\u6709\u9ad8\u6027\u80fd\u3002 \u5f00\u53d1\u8005\u4f18\u5148\u7684\u793e\u533a\uff0c\u63d0\u4f9b\u591a\u8bed\u8a00\u652f\u6301\u548c\u5de5\u5177\u94fe\u3002 \u4e91\u6269\u5c55\u6027\u548c\u9ad8\u53ef\u9760\u6027\uff0c\u5373\u4f7f\u51fa\u73b0\u6545\u969c\u4e5f\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u901a\u8fc7\u5c06\u6807\u91cf\u8fc7\u6ee4\u4e0e\u5411\u91cf\u76f8\u4f3c\u5ea6\u641c\u7d22\u914d\u5bf9\uff0c\u5b9e\u73b0\u6df7\u5408\u641c\u7d22\u3002 4 \u652f\u6301\u54ea\u4e9b\u7d22\u5f15\u548c\u5ea6\u91cf\uff1f \u00b6 \u7d22\u5f15\u662f\u6570\u636e\u7684\u7ec4\u7ec7\u5355\u4f4d\u3002\u5728\u641c\u7d22\u6216\u67e5\u8be2\u63d2\u5165\u7684\u5b9e\u4f53\u4e4b\u524d\uff0c\u5fc5\u987b\u58f0\u660e\u7d22\u5f15\u7c7b\u578b\u548c\u76f8\u4f3c\u5ea6\u5ea6\u91cf\u3002 \u5982\u679c\u60a8\u672a\u6307\u5b9a\u7d22\u5f15\u7c7b\u578b\uff0c\u5219 Milvus \u5c06\u9ed8\u8ba4\u4f7f\u7528\u66b4\u529b\u641c\u7d22\u3002 4.1 \u7d22\u5f15\u7c7b\u578b \u00b6 \u5927\u591a\u6570\u7531 Milvus \u652f\u6301\u7684\u5411\u91cf\u7d22\u5f15\u7c7b\u578b\u4f7f\u7528\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\uff08ANNS\uff09\uff0c\u5305\u62ec\uff1a FLAT\uff1aFLAT\u6700\u9002\u5408\u5728\u5c0f\u578b\u3001\u767e\u4e07\u7ea7\u6570\u636e\u96c6\u4e0a\u5bfb\u6c42\u5b8c\u5168\u51c6\u786e\u548c\u7cbe\u786e\u641c\u7d22\u7ed3\u679c\u7684\u573a\u666f\u3002 \u8fd9\u662f\u6700\u7b80\u5355\u7684\u7d22\u5f15\u65b9\u5f0f\uff0c\u8fdb\u884c\u66b4\u529b\u641c\u7d22\uff08brute-force\uff09\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u7cbe\u786e\u5ea6\uff0c\u4f46\u6548\u7387\u4f4e\uff0c\u5c24\u5176\u5728\u6570\u636e\u91cf\u5927\u65f6\u3002\u9002\u5408\u573a\u666f\uff1a\u5728\u5c0f\u578b\u3001\u767e\u4e07\u7ea7\u6570\u636e\u96c6\u4e0a\u5bfb\u6c42\u5b8c\u5168\u7cbe\u786e\u7684\u641c\u7d22\u7ed3\u679c\u3002 IVF_FLAT\uff1a \u662f\u4e00\u79cd\u57fa\u4e8e\u5012\u6392\u7684\u7d22\u5f15\u65b9\u6cd5\uff0c\u5e7f\u6cdb\u7528\u4e8e\u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u5b9e\u73b0\u9ad8\u6548\u7684\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\u3002\u5b83\u9002\u7528\u4e8e\u5728\u7cbe\u5ea6\u548c\u67e5\u8be2\u901f\u5ea6\u4e4b\u95f4\u5bfb\u6c42\u5e73\u8861\u7684\u573a\u666f\u3002 1. \u805a\u7c7b \uff1aIVF_FLAT\u901a\u8fc7\u805a\u7c7b\u7b97\u6cd5\uff08\u5982k-means\uff09\u5c06\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5411\u91cf\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u7a7a\u95f4\uff08\u7c07\uff09\u3002\u6bcf\u4e2a\u7c07\u5305\u542b\u4e00\u7ec4\u76f8\u4f3c\u7684\u5411\u91cf\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7c07\u4f1a\u6709\u4e00\u4e2a\u4ee3\u8868\u5411\u91cf\uff0c\u901a\u5e38\u662f\u7c07\u7684\u4e2d\u5fc3\u70b9\u3002 2. \u5012\u6392\u7d22\u5f15 \uff1a\u4e3a\u6bcf\u4e2a\u7c07\u521b\u5efa\u5012\u6392\u7d22\u5f15\u3002\u6bcf\u4e2a\u5411\u91cf\u4f1a\u88ab\u6620\u5c04\u5230\u5b83\u6240\u5c5e\u7684\u7c07\uff0c\u8fd9\u6837\u5728\u67e5\u8be2\u65f6\uff0c\u7cfb\u7edf\u53ea\u9700\u5173\u6ce8\u4e0e\u67e5\u8be2\u5411\u91cf\u76f8\u4f3c\u7684\u7c07\uff0c\u800c\u4e0d\u9700\u8981\u641c\u7d22\u6574\u4e2a\u9ad8\u7ef4\u7a7a\u95f4\uff0c\u4ece\u800c\u663e\u8457\u964d\u4f4e\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 3. \u67e5\u8be2\u5904\u7406 \uff1a \u67e5\u8be2\u65f6\uff0cIVF_FLAT\u9996\u5148\u5c06\u67e5\u8be2\u5411\u91cf\u5206\u914d\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u7c07\u4e2d\u5fc3\uff08\u5373\u5b50\u7a7a\u95f4\uff09\u3002 \u7136\u540e\u5728\u8be5\u7c07\u5185\u6267\u884c\u7cbe\u786e\u7684\u7ebf\u6027\u641c\u7d22\uff0c\u4ece\u800c\u67e5\u627e\u4e0e\u67e5\u8be2\u5411\u91cf\u76f8\u4f3c\u7684\u5411\u91cf\u3002 \u4e3a\u4e86\u4f18\u5316\u67e5\u8be2\uff0cIVF_FLAT\u4f7f\u7528\u4e00\u4e2a\u53c2\u6570 nprobe \u6765\u63a7\u5236\u641c\u7d22\u7684\u7c07\u6570\u3002 nprobe \u63a7\u5236\u641c\u7d22\u65f6\u8003\u8651\u7684\u7c07\u7684\u6570\u91cf\uff0c\u4ece\u800c\u5e73\u8861\u67e5\u8be2\u7cbe\u5ea6\u548c\u67e5\u8be2\u901f\u5ea6\uff1a \u589e\u5927 nprobe \u53ef\u4ee5\u641c\u7d22\u66f4\u591a\u7c07\uff0c\u8fd4\u56de\u66f4\u591a\u5019\u9009\u5411\u91cf\uff0c\u63d0\u9ad8\u7ed3\u679c\u7684\u7cbe\u786e\u5ea6\uff0c\u4f46\u67e5\u8be2\u65f6\u95f4\u4e5f\u4f1a\u589e\u52a0\u3002\u51cf\u5c11 nprobe \u53ef\u4ee5\u7f29\u5c0f\u641c\u7d22\u8303\u56f4\uff0c\u964d\u4f4e\u8ba1\u7b97\u65f6\u95f4\uff0c\u67e5\u8be2\u901f\u5ea6\u66f4\u5feb\uff0c\u4f46\u53ef\u80fd\u4f1a\u727a\u7272\u4e00\u4e9b\u7cbe\u5ea6 IVF_SQ8\uff1a\u662f\u5728 IVF_FLAT \u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u91cf\u5316\u6b65\u9aa4\u7684\u4e00\u79cd\u7d22\u5f15\u65b9\u6cd5\uff0c\u5176\u6838\u5fc3\u601d\u60f3\u4e0e IVF_FLAT \u7c7b\u4f3c\uff1bIVF_SQ8\u901a\u8fc7 \u6807\u91cf\u91cf\u5316 \uff08Scalar Quantization\uff09\u5c06\u6bcf\u4e2a\u7ef4\u5ea6\u7684 4 \u5b57\u8282\u6d6e\u70b9\u6570\u8868\u793a\u538b\u7f29\u4e3a 1 \u5b57\u8282\u6574\u6570\u8868\u793a\u3002 IVF_PQ\uff1a\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u5411\u91cf\u7d22\u5f15\u65b9\u5f0f\uff0c\u7ed3\u5408\u4e86\u5012\u6392\u6587\u4ef6\u7d22\u5f15\u548c\u4e58\u79ef\u91cf\u5316\uff08Product Quantization\uff09\u6280\u672f\uff0c\u65e8\u5728\u52a0\u901f\u5927\u89c4\u6a21\u9ad8\u7ef4\u6570\u636e\u96c6\u7684\u68c0\u7d22\u3002 \u5012\u6392\u6587\u4ef6\u7d22\u5f15 \uff1aIVF_PQ\u9996\u5148\u5c06\u6570\u636e\u96c6\u5212\u5206\u4e3a\u591a\u4e2a\u7c07\uff0c\u6bcf\u4e2a\u7c07\u7531\u4e00\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u8868\u793a\u3002\u67e5\u8be2\u65f6\uff0c\u7cfb\u7edf\u9996\u5148\u8ba1\u7b97\u67e5\u8be2\u5411\u91cf\u4e0e\u8fd9\u4e9b\u805a\u7c7b\u4e2d\u5fc3\u7684\u8ddd\u79bb\uff0c\u9009\u62e9\u6700\u63a5\u8fd1\u7684\u51e0\u4e2a\u7c07\u8fdb\u884c\u8be6\u7ec6\u641c\u7d22\uff0c\u4ece\u800c\u51cf\u5c11\u8ba1\u7b97\u91cf\u3002 \u4e58\u79ef\u91cf\u5316 \uff1a\u5728\u6bcf\u4e2a\u7c07\u5185\uff0c\u5411\u91cf\u88ab\u8fdb\u4e00\u6b65\u91cf\u5316\u4e3a\u591a\u4e2a\u5b50\u5411\u91cf\uff0c\u8fd9\u4e9b\u5b50\u5411\u91cf\u901a\u8fc7\u72ec\u7acb\u7684\u91cf\u5316\u8fc7\u7a0b\u8fdb\u884c\u7f16\u7801\u3002\u8fd9\u6837\u53ef\u4ee5\u663e\u8457\u964d\u4f4e\u5b58\u50a8\u9700\u6c42\uff0c\u5e76\u52a0\u5feb\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u3002 \u5b58\u50a8\u4e0e\u901f\u5ea6 \uff1aIVF_PQ\u901a\u8fc7\u51cf\u5c11\u5b58\u50a8\u7a7a\u95f4\u7684\u5360\u7528\uff0c\u540c\u65f6\u4fdd\u6301\u8f83\u9ad8\u7684\u67e5\u8be2\u901f\u5ea6\u548c\u51c6\u786e\u6027\uff0c\u9002\u7528\u4e8e\u5904\u7406\u5927\u89c4\u6a21\u9ad8\u7ef4\u5411\u91cf\u6570\u636e\u3002 HNSW\uff1aHNSW\u662f\u57fa\u4e8e\u56fe\u7684\u7d22\u5f15\uff0c\u6700\u9002\u5408\u5bf9\u641c\u7d22\u6548\u7387\u6709\u9ad8\u8981\u6c42\u7684\u573a\u666f\u3002 \u8bf7\u53c2\u9605 \u5411\u91cf\u7d22\u5f15 \u4ee5\u4e86\u89e3\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002 4.2 \u76f8\u4f3c\u5ea6\u5ea6\u91cf \u00b6 \u5728 Milvus \u4e2d\uff0c\u76f8\u4f3c\u5ea6\u5ea6\u91cf\u7528\u4e8e\u8861\u91cf\u5411\u91cf\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\u3002\u9009\u62e9\u4e00\u4e2a\u597d\u7684\u8ddd\u79bb\u5ea6\u91cf\u65b9\u6cd5\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u5206\u7c7b\u548c\u805a\u7c7b\u7684\u6027\u80fd\u3002\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u5f62\u5f0f\uff0c\u9009\u62e9\u7279\u5b9a\u7684\u76f8\u4f3c\u5ea6\u5ea6\u91cf\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u6700\u4f18\u7684\u6027\u80fd\u3002 \u5bf9\u4e8e\u6d6e\u70b9\u5d4c\u5165\uff0c\u901a\u5e38\u4f7f\u7528\u4ee5\u4e0b\u6307\u6807\uff1a \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff08L2\uff09 \u5185\u79ef\uff08IP\uff09 \u4f59\u5f26\u76f8\u4f3c\u5ea6 (COSINE) 5 Milvus\u6570\u636e\u5e93\u64cd\u4f5c \u00b6 \u5728\u6b21\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Milvus Lite\uff0c\u5b83\u662f pymilvus \u4e2d\u5305\u542b\u7684\u4e00\u4e2a python \u5e93\uff0c\u53ef\u4ee5\u5d4c\u5165\u5230\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002Milvus \u8fd8\u652f\u6301\u5728 Docker \u548c Kubernetes \u4e0a\u90e8\u7f72\uff0c\u9002\u7528\u4e8e\u751f\u4ea7\u7528\u4f8b\u3002 \u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u672c\u5730\u73af\u5883\u4e2d\u6709 Python 3.8+ \u53ef\u7528\u3002\u5b89\u88c5 pymilvus \uff0c\u5176\u4e2d\u5305\u542b python \u5ba2\u6237\u7aef\u5e93\u548c Milvus Lite\uff1a pip install pymilvus 5.1 \u8bbe\u7f6e\u5411\u91cf\u6570\u636e\u5e93 \u00b6 \u8981\u521b\u5efa\u672c\u5730\u7684 Milvus \u5411\u91cf\u6570\u636e\u5e93\uff0c\u53ea\u9700\u5b9e\u4f8b\u5316\u4e00\u4e2a MilvusClient \uff0c\u6307\u5b9a\u4e00\u4e2a\u5b58\u50a8\u6240\u6709\u6570\u636e\u7684\u6587\u4ef6\u540d\uff0c\u5982 \"milvus_demo.db\"\u3002 # 1 \u6570\u636e\u5e93\u7684\u64cd\u4f5c def operate_db (): # \u5982\u679curi\u4e3a\u6570\u636e\u5e93\u540d\u79f0\u8def\u5f84\uff0c\u4ee3\u8868\u672c\u5730\u64cd\u4f5c\u6570\u636e\u5e93 client = MilvusClient ( uri = \"milvus_demo.db\" ) # \u5982\u679curi\u4e3a\u94fe\u63a5\u5730\u5740\uff0c\u4ee3\u8868Milvus\u5c5e\u4e8e\u5355\u673a\u670d\u52a1\uff0c\u9700\u8981\u5f00\u542fMilvus\u540e\u53f0\u670d\u52a1\u64cd\u4f5c # client = MilvusClient(uri=\"http://localhost:19530\") # # # \u521b\u5efa\u540d\u79f0\u4e3amilvus_demo\u7684\u6570\u636e\u5e93 # # # databases = client.list_databases() # if \"milvus_demo\" not in databases: # client.create_database(db_name=\"milvus_demo\") # else: # client.using_database(db_name=\"milvus_demo\") return client 5.2 Collections\u64cd\u4f5c \u00b6 \u5728 Milvus \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a Collections \u6765\u5b58\u50a8\u5411\u91cf\u53ca\u5176\u76f8\u5173\u5143\u6570\u636e\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u4f20\u7edf SQL \u6570\u636e\u5e93\u4e2d\u7684\u8868\u683c\u3002\u521b\u5efa Collections \u65f6\uff0c\u53ef\u4ee5\u5b9a\u4e49 Schema \u548c\u7d22\u5f15\u53c2\u6570\u6765\u914d\u7f6e\u5411\u91cf\u89c4\u683c\uff0c\u5982\u7ef4\u5ea6\u3001\u7d22\u5f15\u7c7b\u578b\u548c\u8fdc\u8ddd\u79bb\u5ea6\u91cf\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u590d\u6742\u7684\u6982\u5ff5\u6765\u4f18\u5316\u7d22\u5f15\u4ee5\u63d0\u9ad8\u5411\u91cf\u641c\u7d22\u6027\u80fd\u3002 # 2 collection\u96c6\u5408\u7684\u64cd\u4f5c def operate_table (): # \u5b9a\u4e49schema ## \u6ce8\u610f\uff1a\u5728\u5b9a\u4e49\u96c6\u5408 Schema \u65f6\uff0cenable_dynamic_field=True \u4f7f\u5f97\u60a8\u53ef\u4ee5\u63d2\u5165\u672a\u5b9a\u4e49\u7684\u5b57\u6bb5\u3002\u4e00\u822c\u52a8\u6001\u5b57\u6bb5\u4ee5 JSON \u683c\u5f0f\u5b58\u50a8\uff0c\u901a\u5e38\u547d\u540d\u4e3a $meta\u3002\u5728\u63d2\u5165\u6570\u636e\u65f6\uff0c\u6240\u6709\u672a\u5b9a\u4e49\u7684\u5b57\u6bb5\u53ca\u5176\u503c\u5c06\u88ab\u4fdd\u5b58\u4e3a\u952e\u503c\u5bf9\u3002 ## \u5728\u5b9a\u4e49\u96c6\u5408 Schema \u65f6\uff0cauto_id=True \u53ef\u4ee5\u5bf9\u4e3b\u952e\u81ea\u52a8\u589e\u957fid\u3002 schema = client . create_schema ( auto_id = False , enable_dynamic_field = True ) # # schema\u6dfb\u52a0\u5b57\u6bb5id, vector schema . add_field ( field_name = 'id' , datatype = DataType . INT64 , is_primary = True ) schema . add_field ( field_name = 'vector' , datatype = DataType . FLOAT_VECTOR , dim = 5 ) schema . add_field ( field_name = 'scalar1' , datatype = DataType . VARCHAR , max_length = 256 , description = '\u6807\u91cf\u5b57\u6bb5' ) # # \u521b\u5efa\u96c6\u5408 client . create_collection ( collection_name = 'demo_v1' , schema = schema ) # # \u8bbe\u7f6e\u7d22\u5f15 index_params = client . prepare_index_params () # # \u5728\u5411\u91cf\u5b57\u6bb5vector\u4e0a\u9762\u6dfb\u52a0\u4e00\u4e2a\u7d22\u5f15\uff1b # index_type='', # \u7559\u7a7a\u4ee5\u4f7f\u7528\u81ea\u52a8\u7d22\u5f15 # \u5bf9\u4e8e\u5411\u91cf\u5b57\u6bb5\uff0c\u5e38\u89c1\u7684\u9ed8\u8ba4\u7d22\u5f15\u7c7b\u578b\u5305\u62ecIVF_FLAT\u6216HNSW\u7b49\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u7279\u6027\u548c\u67e5\u8be2\u9700\u6c42\u3002 # \u5bf9\u4e8e\u6807\u91cf\u5b57\u6bb5\uff0c\u5e38\u89c1\u7684\u9ed8\u8ba4\u7d22\u5f15\u53ef\u80fd\u662fINVERTED\u7b49\u3002 index_params . add_index ( field_name = 'vector' , metric_type = \"COSINE\" , index_type = '' , index_name = \"vector_index\" ) client . create_index ( collection_name = 'demo_v1' , index_params = index_params ) # # # \u67e5\u770b\u7d22\u5f15\u4fe1\u606f res = client . list_indexes ( collection_name = 'demo_v1' ) print ( f '\u7d22\u5f15\u4fe1\u606f--\u300b { res } ' ) res = client . describe_index ( collection_name = 'demo_v1' , index_name = 'vector_index' ) print ( f '\u6307\u5b9a\u7d22\u5f15\u8be6\u7ec6\u4fe1\u606f--> { res } ' ) # \u67e5\u770b\u7d22\u5f15\u72b6\u6001 # client.load_collection(collection_name='demo_v1') # print(client.get_load_state(collection_name='demo_v1')) # \u5982\u679c\u4e0d\u9700\u8981\u7d22\u5f15\uff0c\u53ef\u4ee5\u5220\u9664\u76f8\u5173\u7d22\u5f15 # client.release_collection(collection_name='demo_v1') # client.drop_index(collection_name='demo_v1', index_name='vector_index') # # \u68c0\u7d22\u6807\u91cf\u5b57\u6bb5 index_params1 = client . prepare_index_params () index_params1 . add_index ( field_name = 'scalar1' , index_type = '' , index_name = 'default_index' ) client . create_index ( collection_name = 'demo_v1' , index_params = index_params1 ) # # # # # \u67e5\u770b\u7d22\u5f15\u4fe1\u606f res = client . list_indexes ( collection_name = 'demo_v1' ) print ( f '\u7d22\u5f15\u4fe1\u606f--\u300b { res } ' ) # res = client . describe_index ( collection_name = 'demo_v1' , index_name = 'vector_index' ) print ( f '\u6307\u5b9a\u7d22\u5f15\u8be6\u7ec6\u4fe1\u606f--> { res } ' ) 5.3 Entity\u5b9e\u4f53\u6570\u636e\u64cd\u4f5c \u00b6 \u5728 Milvus \u4e2d\uff0c \u5b9e\u4f53**\u6307\u7684\u662f**Collections**\u4e2d\u5171\u4eab\u76f8\u540c**Schema \u7684\u6570\u636e\u8bb0\u5f55\uff0c\u884c\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u6570\u636e\u6784\u6210\u4e00\u4e2a\u5b9e\u4f53\u3002\u56e0\u6b64\uff0c\u540c\u4e00 Collections \u4e2d\u7684\u5b9e\u4f53\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\uff08\u5982\u5b57\u6bb5\u540d\u79f0\u3001\u6570\u636e\u7c7b\u578b\u548c\u5176\u4ed6\u7ea6\u675f\uff09\u3002 5.3.1\u6570\u636e\u7684\u589e\u3001\u5220\u3001\u6539 \u00b6 def operate_entity (): # # todo:1. \u521b\u5efa\u96c6\u5408collection # \u8fd9\u79cd\u65b9\u5f0f: collection \u53ea\u5305\u62ec\u4e24\u4e2a\u5b57\u6bb5. id \u4f5c\u4e3a\u4e3b\u952e\uff0c vector \u4f5c\u4e3a\u5411\u91cf\u5b57\u6bb5\uff0c\u4ee5\u53ca\u81ea\u52a8\u8bbe\u7f6e auto_id\u3001enable_dynamic_field \u4e3a True # auto_id \u542f\u7528\u6b64\u8bbe\u7f6e\u53ef\u786e\u4fdd\u4e3b\u952e\u81ea\u52a8\u9012\u589e\u3002\u5728\u6570\u636e\u63d2\u5165\u671f\u95f4\u65e0\u9700\u624b\u52a8\u63d0\u4f9b\u4e3b\u952e\u3002 # enable_dynamic_field \u542f\u7528\u540e\uff0c\u8981\u63d2\u5165\u7684\u6570\u636e\u4e2d\u9664 id \u548c vector \u4e4b\u5916\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u5c06\u88ab\u89c6\u4e3a\u52a8\u6001\u5b57\u6bb5\u3002 # # \u8fd9\u4e9b\u9644\u52a0\u5b57\u6bb5\u4f5c\u4e3a\u952e\u503c\u5bf9\u4fdd\u5b58\u5728\u540d\u4e3a $meta \u7684\u7279\u6b8a\u5b57\u6bb5\u4e2d\u3002\u6b64\u529f\u80fd\u5141\u8bb8\u5728\u6570\u636e\u63d2\u5165\u671f\u95f4\u5305\u542b\u989d\u5916\u7684\u5b57\u6bb5\u3002 # client.create_collection(collection_name='demo_v2', dimension=5, metric_type='IP') # # # todo:2. \u63d2\u5165\u6570\u636e\uff08\u4e5f\u53eb\u5b9e\u4f53\uff09 data = [ { \"id\" : 0 , \"vector\" : [ 0.3580376395471989 , - 0.6023495712049978 , 0.18414012509913835 , - 0.26286205330961354 , 0.9029438446296592 ], \"color\" : \"pink_8682\" }, { \"id\" : 1 , \"vector\" : [ 0.19886812562848388 , 0.06023560599112088 , 0.6976963061752597 , 0.2614474506242501 , 0.838729485096104 ], \"color\" : \"red_7025\" }, { \"id\" : 2 , \"vector\" : [ 0.43742130801983836 , - 0.5597502546264526 , 0.6457887650909682 , 0.7894058910881185 , 0.20785793220625592 ], \"color\" : \"orange_6781\" }, { \"id\" : 3 , \"vector\" : [ 0.3172005263489739 , 0.9719044792798428 , - 0.36981146090600725 , - 0.4860894583077995 , 0.95791889146345 ], \"color\" : \"pink_9298\" }, { \"id\" : 4 , \"vector\" : [ 0.4452349528804562 , - 0.8757026943054742 , 0.8220779437047674 , 0.46406290649483184 , 0.30337481143159106 ], \"color\" : \"red_4794\" }, { \"id\" : 5 , \"vector\" : [ 0.985825131989184 , - 0.8144651566660419 , 0.6299267002202009 , 0.1206906911183383 , - 0.1446277761879955 ], \"color\" : \"yellow_4222\" }, { \"id\" : 6 , \"vector\" : [ 0.8371977790571115 , - 0.015764369584852833 , - 0.31062937026679327 , - 0.562666951622192 , - 0.8984947637863987 ], \"color\" : \"red_9392\" }, { \"id\" : 7 , \"vector\" : [ - 0.33445148015177995 , - 0.2567135004164067 , 0.8987539745369246 , 0.9402995886420709 , 0.5378064918413052 ], \"color\" : \"grey_8510\" }, { \"id\" : 8 , \"vector\" : [ 0.39524717779832685 , 0.4000257286739164 , - 0.5890507376891594 , - 0.8650502298996872 , - 0.6140360785406336 ], \"color\" : \"white_9381\" }, { \"id\" : 9 , \"vector\" : [ 0.5718280481994695 , 0.24070317428066512 , - 0.3737913482606834 , - 0.06726932177492717 , - 0.6980531615588608 ], \"color\" : \"purple_4976\" } ] res = client . insert ( collection_name = 'demo_v2' , data = data ) # print(res) ## todo:2.1 \u5c06\u6570\u636e\u63d2\u5165\u5230\u7279\u5b9a\u5206\u533a\uff0c\u53ef\u4ee5\u5728\u63d2\u5165\u8bf7\u6c42\u4e2d\u6307\u5b9a\u5206\u533a\u540d\u79f0\uff0c\u5982\u4e0b\u6240\u793a\uff1a data = [ { \"id\" : 10 , \"vector\" : [ - 0.5570353903748935 , - 0.8997887893201304 , - 0.7123782431855732 , - 0.6298990746450119 , 0.6699215060604258 ], \"color\" : \"red_1202\" }, { \"id\" : 11 , \"vector\" : [ 0.6319019033373907 , 0.6821488267878275 , 0.8552303045704168 , 0.36929791364943054 , - 0.14152860714878068 ], \"color\" : \"blue_4150\" }, { \"id\" : 12 , \"vector\" : [ 0.9483947484855766 , - 0.32294203351925344 , 0.9759290319978025 , 0.8262982148666174 , - 0.8351194181285713 ], \"color\" : \"orange_4590\" }, { \"id\" : 13 , \"vector\" : [ - 0.5449109892498731 , 0.043511240563786524 , - 0.25105249484790804 , - 0.012030655265886425 , - 0.0010987671273892108 ], \"color\" : \"pink_9619\" }, { \"id\" : 14 , \"vector\" : [ 0.6603339372951424 , - 0.10866551787442225 , - 0.9435597754324891 , 0.8230244263466688 , - 0.7986720938400362 ], \"color\" : \"orange_4863\" }, { \"id\" : 15 , \"vector\" : [ - 0.8825129181091456 , - 0.9204557711667729 , - 0.935350065513425 , 0.5484069690287079 , 0.24448151140671204 ], \"color\" : \"orange_7984\" }, { \"id\" : 16 , \"vector\" : [ 0.6285586391568163 , 0.5389064528263487 , - 0.3163366239905099 , 0.22036279378888013 , 0.15077052220816167 ], \"color\" : \"blue_9010\" }, { \"id\" : 17 , \"vector\" : [ - 0.20151825016059233 , - 0.905239387635804 , 0.6749305353372479 , - 0.7324272081377843 , - 0.33007998971889263 ], \"color\" : \"blue_4521\" }, { \"id\" : 18 , \"vector\" : [ 0.2432286610792349 , 0.01785636564206139 , - 0.651356982731391 , - 0.35848148851027895 , - 0.7387383128324057 ], \"color\" : \"orange_2529\" }, { \"id\" : 19 , \"vector\" : [ 0.055512329053363674 , 0.7100266349039421 , 0.4956956543575197 , 0.24541352586717702 , 0.4209030729923515 ], \"color\" : \"red_9437\" } ] # ## todo:3. \u521b\u5efa\u5206\u533a client . create_partition ( collection_name = 'demo_v2' , partition_name = 'partitionA' ) # # # # # todo: 3.1 \u5206\u533a\u4e2d\u63d2\u5165\u6570\u636e res = client . insert ( collection_name = 'demo_v2' , data = data , partition_name = 'partitionA' ) # print(res) ## todo:4. \u66f4\u65b0\u63d2\u5165\u6570\u636e # \u5728 Milvus \u4e2d\uff0cupsert \u64cd\u4f5c\u6267\u884c\u6570\u636e\u7ea7\u64cd\u4f5c\uff0c\u6839\u636e\u96c6\u5408\u4e2d\u662f\u5426\u5df2\u5b58\u5728\u4e3b\u952e\u6765\u63d2\u5165\u6216\u66f4\u65b0\u5b9e\u4f53\u3002\u5177\u4f53\u6765\u8bf4\uff1a # \u5982\u679c\u96c6\u5408\u4e2d\u5df2\u5b58\u5728\u8be5\u5b9e\u4f53\u7684\u4e3b\u952e\uff0c\u5219\u73b0\u6709\u5b9e\u4f53\u5c06\u88ab\u8986\u76d6\u3002 # \u5982\u679c\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728\u4e3b\u952e\uff0c\u5219\u5c06\u63d2\u5165\u4e00\u4e2a\u65b0\u5b9e\u4f53\u3002 data = [ { \"id\" : 0 , \"vector\" : [ - 0.619954382375778 , 0.4479436794798608 , - 0.17493894838751745 , - 0.4248030059917294 , - 0.8648452746018911 ], \"color\" : \"black_9898\" }, { \"id\" : 1 , \"vector\" : [ 0.4762662251462588 , - 0.6942502138717026 , - 0.4490002642657902 , - 0.628696575798281 , 0.9660395877041965 ], \"color\" : \"red_7319\" }, { \"id\" : 2 , \"vector\" : [ - 0.8864122635045097 , 0.9260170474445351 , 0.801326976181461 , 0.6383943392381306 , 0.7563037341572827 ], \"color\" : \"white_6465\" }, { \"id\" : 3 , \"vector\" : [ 0.14594326235891586 , - 0.3775407299900644 , - 0.3765479013078812 , 0.20612075380355122 , 0.4902678929632145 ], \"color\" : \"orange_7580\" }, { \"id\" : 4 , \"vector\" : [ 0.4548498669607359 , - 0.887610217681605 , 0.5655081329910452 , 0.19220509387904117 , 0.016513983433433577 ], \"color\" : \"red_3314\" }, { \"id\" : 5 , \"vector\" : [ 0.11755001847051827 , - 0.7295149788999611 , 0.2608115847524266 , - 0.1719167007897875 , 0.7417611743754855 ], \"color\" : \"black_9955\" }, { \"id\" : 6 , \"vector\" : [ 0.9363032158314308 , 0.030699901477745373 , 0.8365910312319647 , 0.7823840208444011 , 0.2625222076909237 ], \"color\" : \"yellow_2461\" }, { \"id\" : 7 , \"vector\" : [ 0.0754823906014721 , - 0.6390658668265143 , 0.5610517334334937 , - 0.8986261118798251 , 0.9372056764266794 ], \"color\" : \"white_5015\" }, { \"id\" : 8 , \"vector\" : [ - 0.3038434006935904 , 0.1279149203380523 , 0.503958664270957 , - 0.2622661156746988 , 0.7407627307791929 ], \"color\" : \"purple_6414\" }, { \"id\" : 9 , \"vector\" : [ - 0.7125086947677588 , - 0.8050968321012257 , - 0.32608864121785786 , 0.3255654958645424 , 0.26227968923834233 ], \"color\" : \"brown_7231\" } ] res = client . upsert ( collection_name = 'demo_v2' , data = data ) # print(res) # \u6ce8\u610f\u5982\u679c\u5206\u533a\u4e2d\u4e0d\u5b58\u5728\u66f4\u65b0\u6570\u636e\u7684id\uff0c\u5c31\u4e0d\u4f1a\u53d7\u5f71\u54cd\uff0c\u4f46\u662f\u4f1a\u5f71\u54cd\u96c6\u5408\u91cc\u5df2\u7ecf\u5b58\u5728\u7684\u76f8\u540cid\u7684\u5b9e\u4f53 # res = client.upsert(collection_name='demo_v2', data=data, partition_name=\"partitionA\") # todo:5. \u5220\u9664\u5b9e\u4f53\uff08\u6570\u636e\uff09 # \u6309\u7167\u8fc7\u6ee4\u5668\u5220\u9664\uff1b\u5982\u679c\u4e0d\u6307\u5b9a\u5206\u533a\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5728\u6574\u4e2a\u96c6\u5408\u4e2d\u8fdb\u884c\u5220\u9664 res = client . delete ( collection_name = 'demo_v2' , filter = 'id in [12, 5, 6]' ) print ( res ) # \u6309\u7167id\u8fdb\u884c\u5220\u9664\uff1b\u6307\u5b9a\u5206\u533a\u5220\u9664\u6570\u636e # res = client.delete(collection_name='demo_v2', ids=[1, 2, 3, 4], partition_name='partitionA') print ( res ) 5.3.2 \u6570\u636e\u7684\u67e5\u8be2 \u00b6 \u7b80\u5355\u67e5\u8be2\uff1a # entity\u5b9e\u4f53\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u67e5\u8be2 def query_operation (): # # todo: 1. \u5355\u5411\u91cf\u641c\u7d22 res = client . search ( collection_name = 'demo_v2' , data = [[ 0.19886812562848388 , 0.06023560599112088 , 0.6976963061752597 , 0.2614474506242501 , 0.838729485096104 ]], limit = 2 , search_params = { \"metric_type\" : \"IP\" }, output_fields = [ \"id\" , 'vector' ]) # search_params\u662f\u5728\u67e5\u8be2\u65f6\u6267\u884c\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\uff0c\u5982\u679c\u5b9a\u4e49\u7d22\u5f15\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u5236\u5b9a\u4e86\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u5199 print ( res ) # todo: 2. \u6279\u91cf\u5411\u91cf\u641c\u7d22 res = client . search ( collection_name = 'demo_v2' , data = [[ 0.19886812562848388 , 0.06023560599112088 , 0.6976963061752597 , 0.2614474506242501 , 0.838729485096104 ], [ 0.3172005263489739 , 0.9719044792798428 , - 0.36981146090600725 , - 0.4860894583077995 , 0.95791889146345 ]], limit = 2 , search_params = { \"metric_type\" : \"IP\" }, output_fields = [ \"id\" , 'vector' ]) # search_params\u662f\u5728\u67e5\u8be2\u65f6\u6267\u884c\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\uff0c\u5982\u679c\u5b9a\u4e49\u7d22\u5f15\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u5236\u5b9a\u4e86\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u5199 print ( res ) # todo: 3. \u5206\u533a\u641c\u7d22 # \u8981\u8fdb\u884c\u5206\u533a\u641c\u7d22\uff0c\u53ea\u9700\u5728\u641c\u7d22\u8bf7\u6c42\u7684 partition_names \u4e2d\u5305\u542b\u76ee\u6807\u5206\u533a\u7684\u540d\u79f0\u5373\u53ef\u3002\u8fd9\u6307\u5b9asearch\u64cd\u4f5c\u4ec5\u8003\u8651\u6307\u5b9a\u5206\u533a\u5185\u7684\u5411\u91cf\u3002 res = client . search ( collection_name = \"demo_v2\" , data = [[ 0.02174828545444263 , 0.058611125483182924 , 0.6168633415965343 , - 0.7944160935612321 , 0.5554828317581426 ]], limit = 5 , search_params = { \"metric_type\" : \"IP\" , \"params\" : {}}, partition_names = [ \"partitionA\" ] # \u8fd9\u91cc\u6307\u5b9a\u641c\u7d22\u7684\u5206\u533a ) print ( res ) # todo: 4.\u4f7f\u7528\u8f93\u51fa\u5b57\u6bb5\u8fdb\u884c\u641c\u7d22 # \u4f7f\u7528\u8f93\u51fa\u5b57\u6bb5\u8fdb\u884c\u641c\u7d22\u5141\u8bb8\u60a8\u6307\u5b9a\u641c\u7d22\u7ed3\u679c\u4e2d\u5e94\u5305\u542b\u5339\u914d\u5411\u91cf\u7684\u54ea\u4e9b\u5c5e\u6027\u6216\u5b57\u6bb5\u3002 res = client . search ( collection_name = \"demo_v2\" , data = [[ 0.3580376395471989 , - 0.6023495712049978 , 0.18414012509913835 , - 0.26286205330961354 , 0.9029438446296592 ]], limit = 5 , search_params = { \"metric_type\" : \"IP\" , \"params\" : {}}, output_fields = [ 'vector' , \"color\" ] # \u8fd4\u56de\u5b9a\u4e49\u7684\u5b57\u6bb5 ) print ( res ) # todo: 5.\u8fc7\u6ee4\u641c\u7d22 # \u8fc7\u6ee4\u5668\u641c\u7d22\uff1a\u7b5b\u9009\u641c\u7d22\u5c06\u6807\u91cf\u7b5b\u9009\u5668\u5e94\u7528\u4e8e\u77e2\u91cf\u641c\u7d22\uff0c\u5141\u8bb8\u6211\u4eec\u6839\u636e\u7279\u5b9a\u6761\u4ef6\u4f18\u5316\u641c\u7d22\u7ed3\u679c\u3002 # \u4f8b\u5982\uff0c\u8981\u6839\u636e\u5b57\u7b26\u4e32\u6a21\u5f0f\u4f18\u5316\u641c\u7d22\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 like \u8fd0\u7b97\u7b26\u3002\u6b64\u8fd0\u7b97\u7b26\u901a\u8fc7\u8003\u8651\u524d\u7f00\u3001\u4e2d\u7f00\u548c\u540e\u7f00\u6765\u542f\u7528\u5b57\u7b26\u4e32\u5339\u914d\uff1a # \u7b5b\u9009\u989c\u8272\u4ee5\u7ea2\u8272\u4e3a\u524d\u7f00\u7684\u7ed3\u679c\uff1a res = client . search ( collection_name = \"demo_v2\" , data = [[ 0.3580376395471989 , - 0.6023495712049978 , 0.18414012509913835 , - 0.26286205330961354 , 0.9029438446296592 ]], limit = 5 , search_params = { \"metric_type\" : \"IP\" , \"params\" : {}}, output_fields = [ \"color\" ], filter = 'color like \"red%\"' ) print ( res ) # todo: 6.\u8303\u56f4\u641c\u7d22 # \u8303\u56f4\u641c\u7d22\u5141\u8bb8\u67e5\u627e\u8ddd\u67e5\u8be2\u5411\u91cf\u6307\u5b9a\u8ddd\u79bb\u8303\u56f4\u5185\u7684\u5411\u91cf\u3002 # \u8303\u56f4\u641c\u7d22:radius\uff1a\u5b9a\u4e49\u641c\u7d22\u7a7a\u95f4\u7684\u5916\u8fb9\u754c\u3002\u53ea\u6709\u8ddd\u67e5\u8be2\u5411\u91cf\u5728\u6b64\u8ddd\u79bb\u5185\u7684\u5411\u91cf\u624d\u88ab\u89c6\u4e3a\u6f5c\u5728\u5339\u914d\u3002 # range_filter\uff1a\u867d\u7136radius\u8bbe\u7f6e\u641c\u7d22\u7684\u5916\u90e8\u9650\u5236\uff0c\u4f46\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528range_filter\u6765\u5b9a\u4e49\u5185\u90e8\u8fb9\u754c\uff0c\u521b\u5efa\u4e00\u4e2a\u8ddd\u79bb\u8303\u56f4\uff0c\u5728\u8be5\u8303\u56f4\u5185\u5411\u91cf\u5fc5\u987b\u843d\u4e0b\u624d\u88ab\u89c6\u4e3a\u5339\u914d\u3002 search_params = { \"metric_type\" : \"IP\" , \"params\" : { \"radius\" : 0.8 , # \u641c\u7d22\u5706\u7684\u534a\u5f84 \"range_filter\" : 1 # \u8303\u56f4\u8fc7\u6ee4\u5668\uff0c\u7528\u4e8e\u8fc7\u6ee4\u51fa\u4e0d\u5728\u641c\u7d22\u5706\u5185\u7684\u5411\u91cf\u3002 } } res = client . search ( collection_name = \"demo_v2\" , data = [[ 0.3580376395471989 , - 0.6023495712049978 , 0.18414012509913835 , - 0.26286205330961354 , 0.9029438446296592 ]], limit = 3 , # \u8fd4\u56de\u7684\u641c\u7d22\u7ed3\u679c\u6700\u5927\u6570\u91cf search_params = search_params , output_fields = [ \"color\" ], ) # # print ( res ) result = json . dumps ( res , indent = 4 ) print ( result ) \u590d\u6742\u67e5\u8be2 \u6df7\u5408\u68c0\u7d22\uff1a\u8981\u5bf9\u4e24\u7ec4 ANN \u641c\u7d22\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\u548c\u91cd\u65b0\u6392\u5e8f\uff0c\u6709\u5fc5\u8981\u9009\u62e9\u9002\u5f53\u7684\u91cd\u65b0\u6392\u5e8f\u7b56\u7565\u3002\u652f\u6301\u4e24\u79cd\u91cd\u6392\u7b56\u7565\uff1a \u52a0\u6743\u6392\u540d\u7b56\u7565\uff08WeightedRanker \uff09\u548c**\u91cd\u6392\u5e8f\u7b56\u7565**\uff08 RRFRanker \uff09\u3002\u5728\u9009\u62e9\u91cd\u6392\u7b56\u7565\u65f6\uff0c\u9700\u8981\u8003\u8651\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5728\u5411\u91cf\u573a\u4e2d\u662f\u5426\u9700\u8981\u5f3a\u8c03\u4e00\u4e2a\u6216\u591a\u4e2a\u57fa\u672c ANN \u641c\u7d22\u3002 \u52a0\u6743\u6392\u540d \uff1a\u5982\u679c\u60a8\u8981\u6c42\u7ed3\u679c\u5f3a\u8c03\u7279\u5b9a\u7684\u5411\u91cf\u573a\uff0c\u5efa\u8bae\u4f7f\u7528\u8be5\u7b56\u7565\u3002\u901a\u8fc7 WeightedRanker\uff0c\u60a8\u53ef\u4ee5\u4e3a\u67d0\u4e9b\u5411\u91cf\u573a\u5206\u914d\u66f4\u9ad8\u7684\u6743\u91cd\uff0c\u4ece\u800c\u66f4\u52a0\u5f3a\u8c03\u8fd9\u4e9b\u5411\u91cf\u573a\u3002\u4f8b\u5982\uff0c\u5728\u591a\u6a21\u6001\u641c\u7d22\u4e2d\uff0c\u56fe\u7247\u7684\u6587\u5b57\u63cf\u8ff0\u53ef\u80fd\u6bd4\u56fe\u7247\u7684\u989c\u8272\u66f4\u91cd\u8981\u3002 \u4f7f\u7528 WeightedRanker \u7b56\u7565\u65f6\uff0c\u9700\u8981\u5728 WeightedRanker \u51fd\u6570\u4e2d\u8f93\u5165\u6743\u91cd\u503c\u3002\u6df7\u5408\u641c\u7d22\u4e2d\u7684\u57fa\u672c ANN \u641c\u7d22\u6b21\u6570\u4e0e\u9700\u8981\u8f93\u5165\u7684\u503c\u7684\u6b21\u6570\u76f8\u5bf9\u5e94\u3002\u8f93\u5165\u503c\u7684\u8303\u56f4\u5e94\u4e3a [0,1]\uff0c\u6570\u503c\u8d8a\u63a5\u8fd1 1 \u8868\u793a\u91cd\u8981\u6027\u8d8a\u9ad8\u3002 from pymilvus import WeightedRanker rerank = WeightedRanker ( 0.8 , 0.3 ) RRFRanker\uff08\u5012\u6570\u6392\u5e8f\u878d\u5408\uff09 \uff1a\u5728\u6ca1\u6709\u7279\u5b9a\u91cd\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u91c7\u7528\u8fd9\u79cd\u7b56\u7565\u3002RRF \u53ef\u4ee5\u6709\u6548\u5e73\u8861\u6bcf\u4e2a\u5411\u91cf\u573a\u7684\u91cd\u8981\u6027\u3002 RRFRanker\u7684\u6838\u5fc3\u601d\u60f3\u662f\u6839\u636e\u6bcf\u4e2a\u7ed3\u679c\u5728\u5176\u68c0\u7d22\u5217\u8868\u4e2d\u7684\u6392\u540d\u4f4d\u7f6e\u6765\u8ba1\u7b97\u5206\u6570\u3002\u5177\u4f53\u800c\u8a00\uff0c\u7b97\u6cd5\u4f7f\u7528\u4ee5\u4e0b\u516c\u5f0f\u4e3a\u6bcf\u4e2a\u7ed3\u679c\u5206\u914d\u5206\u6570\uff1a d\uff1a\u8868\u793a\u6587\u6863\u3002 N\uff1a\u8868\u793a\u4e0d\u540c\u68c0\u7d22\u8def\u5f84\u7684\u6570\u91cf\u3002 ranki(d)\uff1a\u8868\u793a\u6587\u6863 d \u5728\u7b2c i \u4e2a\u68c0\u7d22\u5668\u4e2d\u7684\u6392\u540d\u4f4d\u7f6e\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570\u3002 k\uff1a\u662f\u4e00\u4e2a\u5e73\u6ed1\u53c2\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u968f\u7740\u6392\u540d\u589e\u52a0\u5206\u6570\u7684\u964d\u4f4e\u901f\u5ea6\u3002\u9ed8\u8ba4\u503c\u901a\u5e38\u8bbe\u7f6e\u4e3a60\u3002 \u4f7f\u7528 RRFRanker \u7b56\u7565\u65f6\uff0c\u9700\u8981\u5c06\u53c2\u6570\u503c k \u8f93\u5165 RRFRanker\u3002 k \u7684\u9ed8\u8ba4\u503c\u4e3a 60\u3002\u8be5\u53c2\u6570\u6709\u52a9\u4e8e\u786e\u5b9a\u5982\u4f55\u7ec4\u5408\u6765\u81ea\u4e0d\u540c ANN \u641c\u7d22\u7684\u6392\u540d\uff0c\u76ee\u7684\u662f\u5e73\u8861\u548c\u6df7\u5408\u6240\u6709\u641c\u7d22\u7684\u91cd\u8981\u6027\u3002 from pymilvus import RRFRanker ranker = RRFRanker ( 100 ) \u4ee3\u7801\u5b9e\u73b0\uff1a def complex_query (): # # \u5b9a\u4e49schema schema = client . create_schema ( enable_dynamic_field = False ) schema . add_field ( field_name = 'film_id' , datatype = DataType . INT64 , is_primary = True ) schema . add_field ( field_name = 'filmVector' , datatype = DataType . FLOAT_VECTOR , dim = 5 ) # \u5411\u91cf\u5b57\u6bb5 schema . add_field ( field_name = \"posterVector\" , datatype = DataType . FLOAT_VECTOR , dim = 5 ) # \u5411\u91cf\u5b57\u6bb5 # # # \u5b9a\u4e49\u7d22\u5f15 index_params = client . prepare_index_params () index_params . add_index ( field_name = 'filmVector' , index_type = \"IVF_FLAT\" , metric_type = \"L2\" , params = { \"nlist\" : 128 }) index_params . add_index ( field_name = 'posterVector' , index_type = \"\" , metric_type = \"COSINE\" ) # \u521b\u5efa\u96c6\u5408 client . create_collection ( collection_name = 'demo_v3' , schema = schema , index_params = index_params ) # \u5411\u91cf\u5e93\u4e2d\u63d2\u5165\u5b9e\u4f53 entities = [] for _ in range ( 1000 ): # \u6784\u9020\u5b9e\u4f53 film_id = random . randint ( 1 , 10000 ) film_vector = [ random . random () for _ in range ( 5 )] poster_vector = [ random . random () for _ in range ( 5 )] entity = { \"film_id\" : film_id , \"filmVector\" : film_vector , \"posterVector\" : poster_vector } entities . append ( entity ) client . insert ( collection_name = 'demo_v3' , data = entities ) # \u591a\u5411\u91cf\u67e5\u8be2\uff08\u6ce8\u610f\u548c\u6279\u91cf\u5411\u91cf\u67e5\u8be2\u4e0d\u540c\uff09 # \u591a\u5411\u91cf\u641c\u7d22\u4f7f\u7528 hybrid_search() API \u5728\u4e00\u6b21\u8c03\u7528\u4e2d\u6267\u884c\u591a\u4e2a ANN \u641c\u7d22\u8bf7\u6c42\u3002\u6bcf\u4e2a AnnSearchRequest \u4ee3\u8868\u7279\u5b9a\u77e2\u91cf\u573a\u4e0a\u7684\u5355\u4e2a\u641c\u7d22\u8bf7\u6c42\u3002 # \u793a\u4f8b\u521b\u5efa\u4e24\u4e2a AnnSearchRequest \u5b9e\u4f8b\u4ee5\u5bf9\u4e24\u4e2a\u5411\u91cf\u5b57\u6bb5\u6267\u884c\u5355\u72ec\u7684\u76f8\u4f3c\u6027\u641c\u7d22\u3002 # \u521b\u5efa\u591a\u641c\u7d22\u8bf7\u6c42 filmVector query_filmVector = [[ 0.8896863042430693 , 0.370613100114602 , 0.23779315077113428 , 0.38227915951132996 , 0.5997064603128835 ]] dense_search_params = { \"data\" : query_filmVector , \"anns_field\" : \"filmVector\" , # \u8be5\u53c2\u6570\u503c\u5fc5\u987b\u4e0e\u96c6\u5408\u6a21\u5f0f\u4e2d\u4f7f\u7528\u7684\u503c\u76f8\u540c\u3002 \"param\" : { \"metric_type\" : \"L2\" , \"nprobe\" : 10 }, # nprobe\u4ee3\u8868\u8bbf\u95ee\u7c07\u7684\u6570\u91cf \"limit\" : 2 } request_1 = AnnSearchRequest ( ** dense_search_params ) # \u521b\u5efa\u591a\u641c\u7d22\u8bf7\u6c42 posterVector query_posterVector = [[ 0.02550758562349764 , 0.006085637357292062 , 0.5325251250159071 , 0.7676432650114147 , 0.5521074424751443 ]] sparse_search_params = { \"data\" : query_posterVector , \"anns_field\" : \"posterVector\" , # \u8be5\u53c2\u6570\u503c\u5fc5\u987b\u4e0e\u96c6\u5408\u6a21\u5f0f\u4e2d\u4f7f\u7528\u7684\u503c\u76f8\u540c\u3002 \"param\" : { \"metric_type\" : \"COSINE\" }, \"limit\" : 2 } request_2 = AnnSearchRequest ( ** sparse_search_params ) reqs = [ request_1 , request_2 ] ranker = RRFRanker ( 100 ) res = client . hybrid_search ( collection_name = \"demo_v3\" , reqs = reqs , ranker = ranker , limit = 2 ) for hits in res : print ( \"TopK results:\" ) for hit in hits : print ( hit ) 5.4 \u52a0\u8f7d\u73b0\u6709\u6570\u636e \u00b6 \u7531\u4e8e Milvus Lite \u7684\u6240\u6709\u6570\u636e\u90fd\u5b58\u50a8\u5728\u672c\u5730\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u5373\u4f7f\u5728\u7a0b\u5e8f\u7ec8\u6b62\u540e\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u73b0\u6709\u6587\u4ef6\u7684 MilvusClient \uff0c\u5c06\u6240\u6709\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u4f8b\u5982\uff0c\u8fd9\u5c06\u6062\u590d \"milvus_demo.db \"\u6587\u4ef6\u4e2d\u7684 Collections\uff0c\u5e76\u7ee7\u7eed\u5411\u5176\u4e2d\u5199\u5165\u6570\u636e\u3002 from pymilvus import MilvusClient client = MilvusClient ( \"milvus_demo.db\" ) 5.5 \u5220\u9664 Collections \u00b6 \u5982\u679c\u60f3\u5220\u9664\u67d0\u4e2a Collections \u4e2d\u7684\u6240\u6709\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u4e22\u5f03\u8be5 Collections # Drop collection client . drop_collection ( collection_name = \"demo_collection\" ) \u672c\u8282\u5c0f\u7ed3 \u00b6 \u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4ec0\u4e48\u662fMilvus\u5411\u91cf\u6570\u636e\u5e93\uff0c\u5e76\u5bf9\u8be5\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5\u7b49\u64cd\u4f5c\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u8bb2\u89e3","title":"2.3 Mirvus\u5411\u91cf\u6570\u636e\u5e93"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#milvus","text":"","title":"Milvus\u5411\u91cf\u6570\u636e\u5e93"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#_1","text":"\u7406\u89e3\u4ec0\u4e48\u662f\u5411\u91cf\u6570\u636e\u5e93 \u7406\u89e3Milvus\u548cMysql\u7684\u533a\u522b\u548c\u8054\u7cfb \u638c\u63e1Milvus\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#1-milvus","text":"Milvus \u662f\u4e00\u6b3e\u5f00\u6e90\u7684\u5411\u91cf\u6570\u636e\u5e93\uff082019\u5e74\u63d0\u51fa\uff09\uff0c\u5176\u552f\u4e00\u76ee\u6807\u662f\u5b58\u50a8\u3001\u7d22\u5f15\u548c\u7ba1\u7406\u7531\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u548c\u5176\u4ed6\u673a\u5668\u5b66\u4e60\uff08ML\uff09\u6a21\u578b\u751f\u6210\u7684\u5927\u89c4\u6a21 \u5d4c\u5165\u5411\u91cf \u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4e13\u95e8\u8bbe\u8ba1\u7528\u4e8e\u5904\u7406\u8f93\u5165\u5411\u91cf\u67e5\u8be2\u7684\u6570\u636e\u5e93\uff0c\u5b83\u80fd\u591f\u5904\u7406\u4e07\u4ebf\u7ea7\u522b\u7684\u5411\u91cf\u7d22\u5f15\u3002\u4e0e\u73b0\u6709\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e3b\u8981\u5904\u7406\u9075\u5faa\u9884\u5b9a\u4e49\u6a21\u5f0f\u7684\u7ed3\u6784\u5316\u6570\u636e\u4e0d\u540c\uff0cMilvus \u4ece\u5e95\u5c42\u8bbe\u8ba1\u7528\u4e8e\u5904\u7406\u4ece\u975e\u7ed3\u6784\u5316\u6570\u636e\u8f6c\u6362\u800c\u6765\u7684\u5d4c\u5165\u5411\u91cf\u3002 \u968f\u7740\u4e92\u8054\u7f51\u7684\u53d1\u5c55\u548c\u6f14\u53d8\uff0c\u975e\u7ed3\u6784\u5316\u6570\u636e\u53d8\u5f97\u8d8a\u6765\u8d8a\u5e38\u89c1\uff0c\u5305\u62ec\u7535\u5b50\u90ae\u4ef6\u3001\u8bba\u6587\u3001\u7269\u8054\u7f51\u4f20\u611f\u5668\u6570\u636e\u3001Facebook \u7167\u7247\u3001\u86cb\u767d\u8d28\u7ed3\u6784\u7b49\u7b49\u3002\u4e3a\u4e86\u4f7f\u8ba1\u7b97\u673a\u80fd\u591f\u7406\u89e3\u548c\u5904\u7406\u975e\u7ed3\u6784\u5316\u6570\u636e\uff0c\u4f7f\u7528\u5d4c\u5165\u6280\u672f\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u5411\u91cf\u3002Milvus \u5b58\u50a8\u548c\u7d22\u5f15\u8fd9\u4e9b\u5411\u91cf\u3002Milvus \u80fd\u591f\u901a\u8fc7\u8ba1\u7b97\u5b83\u4eec\u7684\u76f8\u4f3c\u8ddd\u79bb\u6765\u5206\u6790\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u5982\u679c\u4e24\u4e2a\u5d4c\u5165\u5411\u91cf\u975e\u5e38\u76f8\u4f3c\uff0c\u5219\u610f\u5473\u7740\u539f\u59cb\u6570\u636e\u6e90\u4e5f\u5f88\u76f8\u4f3c\u3002","title":"1 \u4ec0\u4e48\u662f Milvus \u5411\u91cf\u6570\u636e\u5e93\uff1f"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#2","text":"","title":"2 \u5173\u952e\u6982\u5ff5"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#21","text":"\u975e\u7ed3\u6784\u5316\u6570\u636e\u5305\u62ec\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u548c\u81ea\u7136\u8bed\u8a00\u7b49\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4e0d\u9075\u5faa\u9884\u5b9a\u4e49\u7684\u6a21\u578b\u6216\u7ec4\u7ec7\u65b9\u5f0f\u3002\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u5360\u636e\u4e86\u4e16\u754c\u6570\u636e\u7684\u7ea6 80%\uff0c\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u4eba\u5de5\u667a\u80fd\uff08AI\uff09\u548c\u673a\u5668\u5b66\u4e60\uff08ML\uff09\u6a21\u578b\u5c06\u5176\u8f6c\u6362\u4e3a\u5411\u91cf\u3002","title":"2.1 \u975e\u7ed3\u6784\u5316\u6570\u636e"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#22","text":"\u5d4c\u5165\u5411\u91cf\u662f\u5bf9\u975e\u7ed3\u6784\u5316\u6570\u636e\uff08\u5982\u7535\u5b50\u90ae\u4ef6\u3001\u7269\u8054\u7f51\u4f20\u611f\u5668\u6570\u636e\u3001Instagram \u7167\u7247\u3001\u86cb\u767d\u8d28\u7ed3\u6784\u7b49\uff09\u7684\u7279\u5f81\u62bd\u8c61\u3002\u6570\u5b66\u4e0a\uff0c\u5d4c\u5165\u5411\u91cf\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\u6216\u4e8c\u8fdb\u5236\u6570\u7684\u6570\u7ec4\u3002\u73b0\u4ee3\u7684\u5d4c\u5165\u6280\u672f\u88ab\u7528\u4e8e\u5c06\u975e\u7ed3\u6784\u5316\u6570\u636e\u8f6c\u6362\u4e3a\u5d4c\u5165\u5411\u91cf\u3002","title":"2.2 \u5d4c\u5165\u5411\u91cf"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#23","text":"\u5411\u91cf\u76f8\u4f3c\u5ea6\u641c\u7d22\u662f\u5c06\u5411\u91cf\u4e0e\u6570\u636e\u5e93\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u627e\u5230\u4e0e\u67e5\u8be2\u5411\u91cf\u6700\u76f8\u4f3c\u7684\u5411\u91cf\u7684\u8fc7\u7a0b\u3002\u4f7f\u7528\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\u7b97\u6cd5\u52a0\u901f\u641c\u7d22\u8fc7\u7a0b\u3002\u5982\u679c\u4e24\u4e2a\u5d4c\u5165\u5411\u91cf\u975e\u5e38\u76f8\u4f3c\uff0c\u90a3\u4e48\u539f\u59cb\u6570\u636e\u6e90\u4e5f\u662f\u76f8\u4f3c\u7684\u3002","title":"2.3 \u5411\u91cf\u76f8\u4f3c\u5ea6\u641c\u7d22"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#24-collection-field","text":"\u4e0e\u4f20\u7edf\u6570\u636e\u5e93\u5f15\u64ce\u7c7b\u4f3c\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728 Milvus \u4e2d\u521b\u5efa\u6570\u636e\u5e93\uff0c\u5e76\u4e3a\u67d0\u4e9b\u7528\u6237\u5206\u914d\u6743\u9650\u6765\u7ba1\u7406\u5b83\u4eec\u3002\u90a3\u4e48\u8fd9\u4e9b\u7528\u6237\u5c31\u6709\u6743\u7ba1\u7406\u6570\u636e\u5e93\u4e2d\u7684\u96c6\u5408\u3002\u4e00\u4e2a Milvus \u96c6\u7fa4\u6700\u591a\u652f\u6301 64 \u4e2a\u6570\u636e\u5e93. \u5728\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\uff0c\u8868\u548c\u5b57\u6bb5\u7684\u7ed3\u6784\u53ef\u4ee5\u4e0eMilvus\u4e2d\u7684Collection\u548cField\u8fdb\u884c\u5bf9\u5e94\uff1a Milvus \u5173\u7cfb\u6570\u636e\u5e93 \u63cf\u8ff0 Collection \u8868 \u96c6\u5408\u76f8\u5f53\u4e8e\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u7528\u4e8e\u7ec4\u7ec7\u6570\u636e Field \u5b57\u6bb5 \u5b57\u6bb5Schema\u76f8\u5f53\u4e8e\u8868\u4e2d\u7684\u5217 is_primary \u4e3b\u952e \u5728Field Schema\u4e2d\u6807\u8bb0\u4e3a\u4e3b\u952e\u5bf9\u5e94\u8be5\u5217\u7684\u4e3b\u952e dtype \u6570\u636e\u7c7b\u578b \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982INT, VARCHAR\u7b49 max_length \u6700\u5927\u957f\u5ea6 \u5bf9\u5e94VARCHAR\u7c7b\u578b\u5b57\u6bb5\u7684\u6700\u5927\u5b57\u7b26\u6570 dim - \u5411\u91cf\u5b57\u6bb5\u7684\u7ef4\u5ea6\u6ca1\u6709\u76f4\u63a5\u5bf9\u5e94\uff0c\u4f46\u53ef\u4ee5\u89c6\u4e3a\u7279\u6b8a\u6570\u636e\u5904\u7406 \u6ce8\u610f\uff1a1\u4e2acollection\u6700\u591a\u652f\u63014\u4e2a\u5411\u91cfField","title":"2.4 Collection \u548c Field"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#241-field-schema","text":"Field schema \u662f\u5b57\u6bb5\u7684\u903b\u8f91\u5b9a\u4e49\u3002\u6211\u4eec\u5728\u5b9a\u4e49\u96c6\u5408\u67b6\u6784\u548c\u7ba1\u7406\u96c6\u5408\u4e4b\u524d\u9700\u8981\u5b9a\u4e49\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u5b9a\u4e49 Field schema \u3002 Milvus \u96c6\u5408\u4e2d\u4ec5\u652f\u6301\u4e00\u4e2a\u4e3b\u952e\u5b57\u6bb5\u3002 \u5c5e\u6027 \u63cf\u8ff0 \u5907\u6ce8 name \u8981\u521b\u5efa\u7684\u96c6\u5408\u4e2d\u7684\u5b57\u6bb5\u540d\u79f0 String\uff0c\u5fc5\u586b dtype \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b \u5fc5\u586b description \u5b57\u6bb5\u63cf\u8ff0 String\uff0c\u9009\u586b is_primary \u662f\u5426\u8bbe\u7f6e\u8be5\u5b57\u6bb5\u4e3a\u4e3b\u952e\u5b57\u6bb5 Boolean ( true or false ) \u4e3b\u952e\u5b57\u6bb5\u5fc5\u586b auto_id \uff08\u4e3b\u952e\u5b57\u6bb5\u5fc5\u586b\uff09 \u5207\u6362\u4ee5\u542f\u7528\u6216\u7981\u7528\u81ea\u52a8 ID\uff08\u4e3b\u952e\uff09\u5206\u914d True \u6216 False max_length \uff08VARCHAR \u5b57\u6bb5\u5fc5\u9700\uff09 \u5141\u8bb8\u63d2\u5165\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6\u3002 [1, 65,535] dim \u5411\u91cf\u7684\u7ef4\u6570 \u2208[1, 32768] is_partition_key \u8be5\u5b57\u6bb5\u662f\u5426\u662f\u5206\u533a\u952e\u5b57\u6bb5 \u5e03\u5c14\u503c\uff08 true \u6216 false \uff09","title":"2.4.1 Field schema"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#242-collection-schema","text":"collection schema \u662f collection \u7684\u903b\u8f91\u5b9a\u4e49\u3002\u6211\u4eec\u9700\u8981\u5728\u5b9a\u4e49 collection schema \u4e4b\u524d\u5b9a\u4e49 field schema \u3002 \u5c5e\u6027 \u63cf\u8ff0 \u5907\u6ce8 field \u96c6\u5408\u4e2d\u8981\u521b\u5efa\u7684\u5b57\u6bb5 \u5fc5\u586b description \u96c6\u5408\u63cf\u8ff0 String,\u9009\u586b partition_key_field \u8bbe\u8ba1\u7528\u4f5c\u5206\u533a\u952e\u7684\u5b57\u6bb5\u7684\u540d\u79f0\u3002 String\uff0c \u9009\u586b enable_dynamic_field \u662f\u5426\u542f\u7528\u52a8\u6001\u6a21\u5f0f Boolean ( true or false )","title":"2.4.2 collection schema"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#3-milvus","text":"\u5728\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u96c6\u7684\u5411\u91cf\u641c\u7d22\u65f6\u5177\u6709\u9ad8\u6027\u80fd\u3002 \u5f00\u53d1\u8005\u4f18\u5148\u7684\u793e\u533a\uff0c\u63d0\u4f9b\u591a\u8bed\u8a00\u652f\u6301\u548c\u5de5\u5177\u94fe\u3002 \u4e91\u6269\u5c55\u6027\u548c\u9ad8\u53ef\u9760\u6027\uff0c\u5373\u4f7f\u51fa\u73b0\u6545\u969c\u4e5f\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u901a\u8fc7\u5c06\u6807\u91cf\u8fc7\u6ee4\u4e0e\u5411\u91cf\u76f8\u4f3c\u5ea6\u641c\u7d22\u914d\u5bf9\uff0c\u5b9e\u73b0\u6df7\u5408\u641c\u7d22\u3002","title":"3 \u4e3a\u4ec0\u4e48\u9009\u62e9 Milvus\uff1f"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#4","text":"\u7d22\u5f15\u662f\u6570\u636e\u7684\u7ec4\u7ec7\u5355\u4f4d\u3002\u5728\u641c\u7d22\u6216\u67e5\u8be2\u63d2\u5165\u7684\u5b9e\u4f53\u4e4b\u524d\uff0c\u5fc5\u987b\u58f0\u660e\u7d22\u5f15\u7c7b\u578b\u548c\u76f8\u4f3c\u5ea6\u5ea6\u91cf\u3002 \u5982\u679c\u60a8\u672a\u6307\u5b9a\u7d22\u5f15\u7c7b\u578b\uff0c\u5219 Milvus \u5c06\u9ed8\u8ba4\u4f7f\u7528\u66b4\u529b\u641c\u7d22\u3002","title":"4 \u652f\u6301\u54ea\u4e9b\u7d22\u5f15\u548c\u5ea6\u91cf\uff1f"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#41","text":"\u5927\u591a\u6570\u7531 Milvus \u652f\u6301\u7684\u5411\u91cf\u7d22\u5f15\u7c7b\u578b\u4f7f\u7528\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\uff08ANNS\uff09\uff0c\u5305\u62ec\uff1a FLAT\uff1aFLAT\u6700\u9002\u5408\u5728\u5c0f\u578b\u3001\u767e\u4e07\u7ea7\u6570\u636e\u96c6\u4e0a\u5bfb\u6c42\u5b8c\u5168\u51c6\u786e\u548c\u7cbe\u786e\u641c\u7d22\u7ed3\u679c\u7684\u573a\u666f\u3002 \u8fd9\u662f\u6700\u7b80\u5355\u7684\u7d22\u5f15\u65b9\u5f0f\uff0c\u8fdb\u884c\u66b4\u529b\u641c\u7d22\uff08brute-force\uff09\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u7cbe\u786e\u5ea6\uff0c\u4f46\u6548\u7387\u4f4e\uff0c\u5c24\u5176\u5728\u6570\u636e\u91cf\u5927\u65f6\u3002\u9002\u5408\u573a\u666f\uff1a\u5728\u5c0f\u578b\u3001\u767e\u4e07\u7ea7\u6570\u636e\u96c6\u4e0a\u5bfb\u6c42\u5b8c\u5168\u7cbe\u786e\u7684\u641c\u7d22\u7ed3\u679c\u3002 IVF_FLAT\uff1a \u662f\u4e00\u79cd\u57fa\u4e8e\u5012\u6392\u7684\u7d22\u5f15\u65b9\u6cd5\uff0c\u5e7f\u6cdb\u7528\u4e8e\u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u5b9e\u73b0\u9ad8\u6548\u7684\u8fd1\u4f3c\u6700\u8fd1\u90bb\u641c\u7d22\u3002\u5b83\u9002\u7528\u4e8e\u5728\u7cbe\u5ea6\u548c\u67e5\u8be2\u901f\u5ea6\u4e4b\u95f4\u5bfb\u6c42\u5e73\u8861\u7684\u573a\u666f\u3002 1. \u805a\u7c7b \uff1aIVF_FLAT\u901a\u8fc7\u805a\u7c7b\u7b97\u6cd5\uff08\u5982k-means\uff09\u5c06\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5411\u91cf\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u7a7a\u95f4\uff08\u7c07\uff09\u3002\u6bcf\u4e2a\u7c07\u5305\u542b\u4e00\u7ec4\u76f8\u4f3c\u7684\u5411\u91cf\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7c07\u4f1a\u6709\u4e00\u4e2a\u4ee3\u8868\u5411\u91cf\uff0c\u901a\u5e38\u662f\u7c07\u7684\u4e2d\u5fc3\u70b9\u3002 2. \u5012\u6392\u7d22\u5f15 \uff1a\u4e3a\u6bcf\u4e2a\u7c07\u521b\u5efa\u5012\u6392\u7d22\u5f15\u3002\u6bcf\u4e2a\u5411\u91cf\u4f1a\u88ab\u6620\u5c04\u5230\u5b83\u6240\u5c5e\u7684\u7c07\uff0c\u8fd9\u6837\u5728\u67e5\u8be2\u65f6\uff0c\u7cfb\u7edf\u53ea\u9700\u5173\u6ce8\u4e0e\u67e5\u8be2\u5411\u91cf\u76f8\u4f3c\u7684\u7c07\uff0c\u800c\u4e0d\u9700\u8981\u641c\u7d22\u6574\u4e2a\u9ad8\u7ef4\u7a7a\u95f4\uff0c\u4ece\u800c\u663e\u8457\u964d\u4f4e\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 3. \u67e5\u8be2\u5904\u7406 \uff1a \u67e5\u8be2\u65f6\uff0cIVF_FLAT\u9996\u5148\u5c06\u67e5\u8be2\u5411\u91cf\u5206\u914d\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u7c07\u4e2d\u5fc3\uff08\u5373\u5b50\u7a7a\u95f4\uff09\u3002 \u7136\u540e\u5728\u8be5\u7c07\u5185\u6267\u884c\u7cbe\u786e\u7684\u7ebf\u6027\u641c\u7d22\uff0c\u4ece\u800c\u67e5\u627e\u4e0e\u67e5\u8be2\u5411\u91cf\u76f8\u4f3c\u7684\u5411\u91cf\u3002 \u4e3a\u4e86\u4f18\u5316\u67e5\u8be2\uff0cIVF_FLAT\u4f7f\u7528\u4e00\u4e2a\u53c2\u6570 nprobe \u6765\u63a7\u5236\u641c\u7d22\u7684\u7c07\u6570\u3002 nprobe \u63a7\u5236\u641c\u7d22\u65f6\u8003\u8651\u7684\u7c07\u7684\u6570\u91cf\uff0c\u4ece\u800c\u5e73\u8861\u67e5\u8be2\u7cbe\u5ea6\u548c\u67e5\u8be2\u901f\u5ea6\uff1a \u589e\u5927 nprobe \u53ef\u4ee5\u641c\u7d22\u66f4\u591a\u7c07\uff0c\u8fd4\u56de\u66f4\u591a\u5019\u9009\u5411\u91cf\uff0c\u63d0\u9ad8\u7ed3\u679c\u7684\u7cbe\u786e\u5ea6\uff0c\u4f46\u67e5\u8be2\u65f6\u95f4\u4e5f\u4f1a\u589e\u52a0\u3002\u51cf\u5c11 nprobe \u53ef\u4ee5\u7f29\u5c0f\u641c\u7d22\u8303\u56f4\uff0c\u964d\u4f4e\u8ba1\u7b97\u65f6\u95f4\uff0c\u67e5\u8be2\u901f\u5ea6\u66f4\u5feb\uff0c\u4f46\u53ef\u80fd\u4f1a\u727a\u7272\u4e00\u4e9b\u7cbe\u5ea6 IVF_SQ8\uff1a\u662f\u5728 IVF_FLAT \u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u91cf\u5316\u6b65\u9aa4\u7684\u4e00\u79cd\u7d22\u5f15\u65b9\u6cd5\uff0c\u5176\u6838\u5fc3\u601d\u60f3\u4e0e IVF_FLAT \u7c7b\u4f3c\uff1bIVF_SQ8\u901a\u8fc7 \u6807\u91cf\u91cf\u5316 \uff08Scalar Quantization\uff09\u5c06\u6bcf\u4e2a\u7ef4\u5ea6\u7684 4 \u5b57\u8282\u6d6e\u70b9\u6570\u8868\u793a\u538b\u7f29\u4e3a 1 \u5b57\u8282\u6574\u6570\u8868\u793a\u3002 IVF_PQ\uff1a\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u5411\u91cf\u7d22\u5f15\u65b9\u5f0f\uff0c\u7ed3\u5408\u4e86\u5012\u6392\u6587\u4ef6\u7d22\u5f15\u548c\u4e58\u79ef\u91cf\u5316\uff08Product Quantization\uff09\u6280\u672f\uff0c\u65e8\u5728\u52a0\u901f\u5927\u89c4\u6a21\u9ad8\u7ef4\u6570\u636e\u96c6\u7684\u68c0\u7d22\u3002 \u5012\u6392\u6587\u4ef6\u7d22\u5f15 \uff1aIVF_PQ\u9996\u5148\u5c06\u6570\u636e\u96c6\u5212\u5206\u4e3a\u591a\u4e2a\u7c07\uff0c\u6bcf\u4e2a\u7c07\u7531\u4e00\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u8868\u793a\u3002\u67e5\u8be2\u65f6\uff0c\u7cfb\u7edf\u9996\u5148\u8ba1\u7b97\u67e5\u8be2\u5411\u91cf\u4e0e\u8fd9\u4e9b\u805a\u7c7b\u4e2d\u5fc3\u7684\u8ddd\u79bb\uff0c\u9009\u62e9\u6700\u63a5\u8fd1\u7684\u51e0\u4e2a\u7c07\u8fdb\u884c\u8be6\u7ec6\u641c\u7d22\uff0c\u4ece\u800c\u51cf\u5c11\u8ba1\u7b97\u91cf\u3002 \u4e58\u79ef\u91cf\u5316 \uff1a\u5728\u6bcf\u4e2a\u7c07\u5185\uff0c\u5411\u91cf\u88ab\u8fdb\u4e00\u6b65\u91cf\u5316\u4e3a\u591a\u4e2a\u5b50\u5411\u91cf\uff0c\u8fd9\u4e9b\u5b50\u5411\u91cf\u901a\u8fc7\u72ec\u7acb\u7684\u91cf\u5316\u8fc7\u7a0b\u8fdb\u884c\u7f16\u7801\u3002\u8fd9\u6837\u53ef\u4ee5\u663e\u8457\u964d\u4f4e\u5b58\u50a8\u9700\u6c42\uff0c\u5e76\u52a0\u5feb\u76f8\u4f3c\u5ea6\u8ba1\u7b97\u3002 \u5b58\u50a8\u4e0e\u901f\u5ea6 \uff1aIVF_PQ\u901a\u8fc7\u51cf\u5c11\u5b58\u50a8\u7a7a\u95f4\u7684\u5360\u7528\uff0c\u540c\u65f6\u4fdd\u6301\u8f83\u9ad8\u7684\u67e5\u8be2\u901f\u5ea6\u548c\u51c6\u786e\u6027\uff0c\u9002\u7528\u4e8e\u5904\u7406\u5927\u89c4\u6a21\u9ad8\u7ef4\u5411\u91cf\u6570\u636e\u3002 HNSW\uff1aHNSW\u662f\u57fa\u4e8e\u56fe\u7684\u7d22\u5f15\uff0c\u6700\u9002\u5408\u5bf9\u641c\u7d22\u6548\u7387\u6709\u9ad8\u8981\u6c42\u7684\u573a\u666f\u3002 \u8bf7\u53c2\u9605 \u5411\u91cf\u7d22\u5f15 \u4ee5\u4e86\u89e3\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002","title":"4.1 \u7d22\u5f15\u7c7b\u578b"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#42","text":"\u5728 Milvus \u4e2d\uff0c\u76f8\u4f3c\u5ea6\u5ea6\u91cf\u7528\u4e8e\u8861\u91cf\u5411\u91cf\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\u3002\u9009\u62e9\u4e00\u4e2a\u597d\u7684\u8ddd\u79bb\u5ea6\u91cf\u65b9\u6cd5\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u5206\u7c7b\u548c\u805a\u7c7b\u7684\u6027\u80fd\u3002\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u5f62\u5f0f\uff0c\u9009\u62e9\u7279\u5b9a\u7684\u76f8\u4f3c\u5ea6\u5ea6\u91cf\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u6700\u4f18\u7684\u6027\u80fd\u3002 \u5bf9\u4e8e\u6d6e\u70b9\u5d4c\u5165\uff0c\u901a\u5e38\u4f7f\u7528\u4ee5\u4e0b\u6307\u6807\uff1a \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff08L2\uff09 \u5185\u79ef\uff08IP\uff09 \u4f59\u5f26\u76f8\u4f3c\u5ea6 (COSINE)","title":"4.2 \u76f8\u4f3c\u5ea6\u5ea6\u91cf"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#5-milvus","text":"\u5728\u6b21\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Milvus Lite\uff0c\u5b83\u662f pymilvus \u4e2d\u5305\u542b\u7684\u4e00\u4e2a python \u5e93\uff0c\u53ef\u4ee5\u5d4c\u5165\u5230\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002Milvus \u8fd8\u652f\u6301\u5728 Docker \u548c Kubernetes \u4e0a\u90e8\u7f72\uff0c\u9002\u7528\u4e8e\u751f\u4ea7\u7528\u4f8b\u3002 \u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u672c\u5730\u73af\u5883\u4e2d\u6709 Python 3.8+ \u53ef\u7528\u3002\u5b89\u88c5 pymilvus \uff0c\u5176\u4e2d\u5305\u542b python \u5ba2\u6237\u7aef\u5e93\u548c Milvus Lite\uff1a pip install pymilvus","title":"5 Milvus\u6570\u636e\u5e93\u64cd\u4f5c"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#51","text":"\u8981\u521b\u5efa\u672c\u5730\u7684 Milvus \u5411\u91cf\u6570\u636e\u5e93\uff0c\u53ea\u9700\u5b9e\u4f8b\u5316\u4e00\u4e2a MilvusClient \uff0c\u6307\u5b9a\u4e00\u4e2a\u5b58\u50a8\u6240\u6709\u6570\u636e\u7684\u6587\u4ef6\u540d\uff0c\u5982 \"milvus_demo.db\"\u3002 # 1 \u6570\u636e\u5e93\u7684\u64cd\u4f5c def operate_db (): # \u5982\u679curi\u4e3a\u6570\u636e\u5e93\u540d\u79f0\u8def\u5f84\uff0c\u4ee3\u8868\u672c\u5730\u64cd\u4f5c\u6570\u636e\u5e93 client = MilvusClient ( uri = \"milvus_demo.db\" ) # \u5982\u679curi\u4e3a\u94fe\u63a5\u5730\u5740\uff0c\u4ee3\u8868Milvus\u5c5e\u4e8e\u5355\u673a\u670d\u52a1\uff0c\u9700\u8981\u5f00\u542fMilvus\u540e\u53f0\u670d\u52a1\u64cd\u4f5c # client = MilvusClient(uri=\"http://localhost:19530\") # # # \u521b\u5efa\u540d\u79f0\u4e3amilvus_demo\u7684\u6570\u636e\u5e93 # # # databases = client.list_databases() # if \"milvus_demo\" not in databases: # client.create_database(db_name=\"milvus_demo\") # else: # client.using_database(db_name=\"milvus_demo\") return client","title":"5.1 \u8bbe\u7f6e\u5411\u91cf\u6570\u636e\u5e93"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#52-collections","text":"\u5728 Milvus \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a Collections \u6765\u5b58\u50a8\u5411\u91cf\u53ca\u5176\u76f8\u5173\u5143\u6570\u636e\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210\u4f20\u7edf SQL \u6570\u636e\u5e93\u4e2d\u7684\u8868\u683c\u3002\u521b\u5efa Collections \u65f6\uff0c\u53ef\u4ee5\u5b9a\u4e49 Schema \u548c\u7d22\u5f15\u53c2\u6570\u6765\u914d\u7f6e\u5411\u91cf\u89c4\u683c\uff0c\u5982\u7ef4\u5ea6\u3001\u7d22\u5f15\u7c7b\u578b\u548c\u8fdc\u8ddd\u79bb\u5ea6\u91cf\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u590d\u6742\u7684\u6982\u5ff5\u6765\u4f18\u5316\u7d22\u5f15\u4ee5\u63d0\u9ad8\u5411\u91cf\u641c\u7d22\u6027\u80fd\u3002 # 2 collection\u96c6\u5408\u7684\u64cd\u4f5c def operate_table (): # \u5b9a\u4e49schema ## \u6ce8\u610f\uff1a\u5728\u5b9a\u4e49\u96c6\u5408 Schema \u65f6\uff0cenable_dynamic_field=True \u4f7f\u5f97\u60a8\u53ef\u4ee5\u63d2\u5165\u672a\u5b9a\u4e49\u7684\u5b57\u6bb5\u3002\u4e00\u822c\u52a8\u6001\u5b57\u6bb5\u4ee5 JSON \u683c\u5f0f\u5b58\u50a8\uff0c\u901a\u5e38\u547d\u540d\u4e3a $meta\u3002\u5728\u63d2\u5165\u6570\u636e\u65f6\uff0c\u6240\u6709\u672a\u5b9a\u4e49\u7684\u5b57\u6bb5\u53ca\u5176\u503c\u5c06\u88ab\u4fdd\u5b58\u4e3a\u952e\u503c\u5bf9\u3002 ## \u5728\u5b9a\u4e49\u96c6\u5408 Schema \u65f6\uff0cauto_id=True \u53ef\u4ee5\u5bf9\u4e3b\u952e\u81ea\u52a8\u589e\u957fid\u3002 schema = client . create_schema ( auto_id = False , enable_dynamic_field = True ) # # schema\u6dfb\u52a0\u5b57\u6bb5id, vector schema . add_field ( field_name = 'id' , datatype = DataType . INT64 , is_primary = True ) schema . add_field ( field_name = 'vector' , datatype = DataType . FLOAT_VECTOR , dim = 5 ) schema . add_field ( field_name = 'scalar1' , datatype = DataType . VARCHAR , max_length = 256 , description = '\u6807\u91cf\u5b57\u6bb5' ) # # \u521b\u5efa\u96c6\u5408 client . create_collection ( collection_name = 'demo_v1' , schema = schema ) # # \u8bbe\u7f6e\u7d22\u5f15 index_params = client . prepare_index_params () # # \u5728\u5411\u91cf\u5b57\u6bb5vector\u4e0a\u9762\u6dfb\u52a0\u4e00\u4e2a\u7d22\u5f15\uff1b # index_type='', # \u7559\u7a7a\u4ee5\u4f7f\u7528\u81ea\u52a8\u7d22\u5f15 # \u5bf9\u4e8e\u5411\u91cf\u5b57\u6bb5\uff0c\u5e38\u89c1\u7684\u9ed8\u8ba4\u7d22\u5f15\u7c7b\u578b\u5305\u62ecIVF_FLAT\u6216HNSW\u7b49\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u7279\u6027\u548c\u67e5\u8be2\u9700\u6c42\u3002 # \u5bf9\u4e8e\u6807\u91cf\u5b57\u6bb5\uff0c\u5e38\u89c1\u7684\u9ed8\u8ba4\u7d22\u5f15\u53ef\u80fd\u662fINVERTED\u7b49\u3002 index_params . add_index ( field_name = 'vector' , metric_type = \"COSINE\" , index_type = '' , index_name = \"vector_index\" ) client . create_index ( collection_name = 'demo_v1' , index_params = index_params ) # # # \u67e5\u770b\u7d22\u5f15\u4fe1\u606f res = client . list_indexes ( collection_name = 'demo_v1' ) print ( f '\u7d22\u5f15\u4fe1\u606f--\u300b { res } ' ) res = client . describe_index ( collection_name = 'demo_v1' , index_name = 'vector_index' ) print ( f '\u6307\u5b9a\u7d22\u5f15\u8be6\u7ec6\u4fe1\u606f--> { res } ' ) # \u67e5\u770b\u7d22\u5f15\u72b6\u6001 # client.load_collection(collection_name='demo_v1') # print(client.get_load_state(collection_name='demo_v1')) # \u5982\u679c\u4e0d\u9700\u8981\u7d22\u5f15\uff0c\u53ef\u4ee5\u5220\u9664\u76f8\u5173\u7d22\u5f15 # client.release_collection(collection_name='demo_v1') # client.drop_index(collection_name='demo_v1', index_name='vector_index') # # \u68c0\u7d22\u6807\u91cf\u5b57\u6bb5 index_params1 = client . prepare_index_params () index_params1 . add_index ( field_name = 'scalar1' , index_type = '' , index_name = 'default_index' ) client . create_index ( collection_name = 'demo_v1' , index_params = index_params1 ) # # # # # \u67e5\u770b\u7d22\u5f15\u4fe1\u606f res = client . list_indexes ( collection_name = 'demo_v1' ) print ( f '\u7d22\u5f15\u4fe1\u606f--\u300b { res } ' ) # res = client . describe_index ( collection_name = 'demo_v1' , index_name = 'vector_index' ) print ( f '\u6307\u5b9a\u7d22\u5f15\u8be6\u7ec6\u4fe1\u606f--> { res } ' )","title":"5.2 Collections\u64cd\u4f5c"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#53-entity","text":"\u5728 Milvus \u4e2d\uff0c \u5b9e\u4f53**\u6307\u7684\u662f**Collections**\u4e2d\u5171\u4eab\u76f8\u540c**Schema \u7684\u6570\u636e\u8bb0\u5f55\uff0c\u884c\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u6570\u636e\u6784\u6210\u4e00\u4e2a\u5b9e\u4f53\u3002\u56e0\u6b64\uff0c\u540c\u4e00 Collections \u4e2d\u7684\u5b9e\u4f53\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\uff08\u5982\u5b57\u6bb5\u540d\u79f0\u3001\u6570\u636e\u7c7b\u578b\u548c\u5176\u4ed6\u7ea6\u675f\uff09\u3002","title":"5.3 Entity\u5b9e\u4f53\u6570\u636e\u64cd\u4f5c"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#531","text":"def operate_entity (): # # todo:1. \u521b\u5efa\u96c6\u5408collection # \u8fd9\u79cd\u65b9\u5f0f: collection \u53ea\u5305\u62ec\u4e24\u4e2a\u5b57\u6bb5. id \u4f5c\u4e3a\u4e3b\u952e\uff0c vector \u4f5c\u4e3a\u5411\u91cf\u5b57\u6bb5\uff0c\u4ee5\u53ca\u81ea\u52a8\u8bbe\u7f6e auto_id\u3001enable_dynamic_field \u4e3a True # auto_id \u542f\u7528\u6b64\u8bbe\u7f6e\u53ef\u786e\u4fdd\u4e3b\u952e\u81ea\u52a8\u9012\u589e\u3002\u5728\u6570\u636e\u63d2\u5165\u671f\u95f4\u65e0\u9700\u624b\u52a8\u63d0\u4f9b\u4e3b\u952e\u3002 # enable_dynamic_field \u542f\u7528\u540e\uff0c\u8981\u63d2\u5165\u7684\u6570\u636e\u4e2d\u9664 id \u548c vector \u4e4b\u5916\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u5c06\u88ab\u89c6\u4e3a\u52a8\u6001\u5b57\u6bb5\u3002 # # \u8fd9\u4e9b\u9644\u52a0\u5b57\u6bb5\u4f5c\u4e3a\u952e\u503c\u5bf9\u4fdd\u5b58\u5728\u540d\u4e3a $meta \u7684\u7279\u6b8a\u5b57\u6bb5\u4e2d\u3002\u6b64\u529f\u80fd\u5141\u8bb8\u5728\u6570\u636e\u63d2\u5165\u671f\u95f4\u5305\u542b\u989d\u5916\u7684\u5b57\u6bb5\u3002 # client.create_collection(collection_name='demo_v2', dimension=5, metric_type='IP') # # # todo:2. \u63d2\u5165\u6570\u636e\uff08\u4e5f\u53eb\u5b9e\u4f53\uff09 data = [ { \"id\" : 0 , \"vector\" : [ 0.3580376395471989 , - 0.6023495712049978 , 0.18414012509913835 , - 0.26286205330961354 , 0.9029438446296592 ], \"color\" : \"pink_8682\" }, { \"id\" : 1 , \"vector\" : [ 0.19886812562848388 , 0.06023560599112088 , 0.6976963061752597 , 0.2614474506242501 , 0.838729485096104 ], \"color\" : \"red_7025\" }, { \"id\" : 2 , \"vector\" : [ 0.43742130801983836 , - 0.5597502546264526 , 0.6457887650909682 , 0.7894058910881185 , 0.20785793220625592 ], \"color\" : \"orange_6781\" }, { \"id\" : 3 , \"vector\" : [ 0.3172005263489739 , 0.9719044792798428 , - 0.36981146090600725 , - 0.4860894583077995 , 0.95791889146345 ], \"color\" : \"pink_9298\" }, { \"id\" : 4 , \"vector\" : [ 0.4452349528804562 , - 0.8757026943054742 , 0.8220779437047674 , 0.46406290649483184 , 0.30337481143159106 ], \"color\" : \"red_4794\" }, { \"id\" : 5 , \"vector\" : [ 0.985825131989184 , - 0.8144651566660419 , 0.6299267002202009 , 0.1206906911183383 , - 0.1446277761879955 ], \"color\" : \"yellow_4222\" }, { \"id\" : 6 , \"vector\" : [ 0.8371977790571115 , - 0.015764369584852833 , - 0.31062937026679327 , - 0.562666951622192 , - 0.8984947637863987 ], \"color\" : \"red_9392\" }, { \"id\" : 7 , \"vector\" : [ - 0.33445148015177995 , - 0.2567135004164067 , 0.8987539745369246 , 0.9402995886420709 , 0.5378064918413052 ], \"color\" : \"grey_8510\" }, { \"id\" : 8 , \"vector\" : [ 0.39524717779832685 , 0.4000257286739164 , - 0.5890507376891594 , - 0.8650502298996872 , - 0.6140360785406336 ], \"color\" : \"white_9381\" }, { \"id\" : 9 , \"vector\" : [ 0.5718280481994695 , 0.24070317428066512 , - 0.3737913482606834 , - 0.06726932177492717 , - 0.6980531615588608 ], \"color\" : \"purple_4976\" } ] res = client . insert ( collection_name = 'demo_v2' , data = data ) # print(res) ## todo:2.1 \u5c06\u6570\u636e\u63d2\u5165\u5230\u7279\u5b9a\u5206\u533a\uff0c\u53ef\u4ee5\u5728\u63d2\u5165\u8bf7\u6c42\u4e2d\u6307\u5b9a\u5206\u533a\u540d\u79f0\uff0c\u5982\u4e0b\u6240\u793a\uff1a data = [ { \"id\" : 10 , \"vector\" : [ - 0.5570353903748935 , - 0.8997887893201304 , - 0.7123782431855732 , - 0.6298990746450119 , 0.6699215060604258 ], \"color\" : \"red_1202\" }, { \"id\" : 11 , \"vector\" : [ 0.6319019033373907 , 0.6821488267878275 , 0.8552303045704168 , 0.36929791364943054 , - 0.14152860714878068 ], \"color\" : \"blue_4150\" }, { \"id\" : 12 , \"vector\" : [ 0.9483947484855766 , - 0.32294203351925344 , 0.9759290319978025 , 0.8262982148666174 , - 0.8351194181285713 ], \"color\" : \"orange_4590\" }, { \"id\" : 13 , \"vector\" : [ - 0.5449109892498731 , 0.043511240563786524 , - 0.25105249484790804 , - 0.012030655265886425 , - 0.0010987671273892108 ], \"color\" : \"pink_9619\" }, { \"id\" : 14 , \"vector\" : [ 0.6603339372951424 , - 0.10866551787442225 , - 0.9435597754324891 , 0.8230244263466688 , - 0.7986720938400362 ], \"color\" : \"orange_4863\" }, { \"id\" : 15 , \"vector\" : [ - 0.8825129181091456 , - 0.9204557711667729 , - 0.935350065513425 , 0.5484069690287079 , 0.24448151140671204 ], \"color\" : \"orange_7984\" }, { \"id\" : 16 , \"vector\" : [ 0.6285586391568163 , 0.5389064528263487 , - 0.3163366239905099 , 0.22036279378888013 , 0.15077052220816167 ], \"color\" : \"blue_9010\" }, { \"id\" : 17 , \"vector\" : [ - 0.20151825016059233 , - 0.905239387635804 , 0.6749305353372479 , - 0.7324272081377843 , - 0.33007998971889263 ], \"color\" : \"blue_4521\" }, { \"id\" : 18 , \"vector\" : [ 0.2432286610792349 , 0.01785636564206139 , - 0.651356982731391 , - 0.35848148851027895 , - 0.7387383128324057 ], \"color\" : \"orange_2529\" }, { \"id\" : 19 , \"vector\" : [ 0.055512329053363674 , 0.7100266349039421 , 0.4956956543575197 , 0.24541352586717702 , 0.4209030729923515 ], \"color\" : \"red_9437\" } ] # ## todo:3. \u521b\u5efa\u5206\u533a client . create_partition ( collection_name = 'demo_v2' , partition_name = 'partitionA' ) # # # # # todo: 3.1 \u5206\u533a\u4e2d\u63d2\u5165\u6570\u636e res = client . insert ( collection_name = 'demo_v2' , data = data , partition_name = 'partitionA' ) # print(res) ## todo:4. \u66f4\u65b0\u63d2\u5165\u6570\u636e # \u5728 Milvus \u4e2d\uff0cupsert \u64cd\u4f5c\u6267\u884c\u6570\u636e\u7ea7\u64cd\u4f5c\uff0c\u6839\u636e\u96c6\u5408\u4e2d\u662f\u5426\u5df2\u5b58\u5728\u4e3b\u952e\u6765\u63d2\u5165\u6216\u66f4\u65b0\u5b9e\u4f53\u3002\u5177\u4f53\u6765\u8bf4\uff1a # \u5982\u679c\u96c6\u5408\u4e2d\u5df2\u5b58\u5728\u8be5\u5b9e\u4f53\u7684\u4e3b\u952e\uff0c\u5219\u73b0\u6709\u5b9e\u4f53\u5c06\u88ab\u8986\u76d6\u3002 # \u5982\u679c\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728\u4e3b\u952e\uff0c\u5219\u5c06\u63d2\u5165\u4e00\u4e2a\u65b0\u5b9e\u4f53\u3002 data = [ { \"id\" : 0 , \"vector\" : [ - 0.619954382375778 , 0.4479436794798608 , - 0.17493894838751745 , - 0.4248030059917294 , - 0.8648452746018911 ], \"color\" : \"black_9898\" }, { \"id\" : 1 , \"vector\" : [ 0.4762662251462588 , - 0.6942502138717026 , - 0.4490002642657902 , - 0.628696575798281 , 0.9660395877041965 ], \"color\" : \"red_7319\" }, { \"id\" : 2 , \"vector\" : [ - 0.8864122635045097 , 0.9260170474445351 , 0.801326976181461 , 0.6383943392381306 , 0.7563037341572827 ], \"color\" : \"white_6465\" }, { \"id\" : 3 , \"vector\" : [ 0.14594326235891586 , - 0.3775407299900644 , - 0.3765479013078812 , 0.20612075380355122 , 0.4902678929632145 ], \"color\" : \"orange_7580\" }, { \"id\" : 4 , \"vector\" : [ 0.4548498669607359 , - 0.887610217681605 , 0.5655081329910452 , 0.19220509387904117 , 0.016513983433433577 ], \"color\" : \"red_3314\" }, { \"id\" : 5 , \"vector\" : [ 0.11755001847051827 , - 0.7295149788999611 , 0.2608115847524266 , - 0.1719167007897875 , 0.7417611743754855 ], \"color\" : \"black_9955\" }, { \"id\" : 6 , \"vector\" : [ 0.9363032158314308 , 0.030699901477745373 , 0.8365910312319647 , 0.7823840208444011 , 0.2625222076909237 ], \"color\" : \"yellow_2461\" }, { \"id\" : 7 , \"vector\" : [ 0.0754823906014721 , - 0.6390658668265143 , 0.5610517334334937 , - 0.8986261118798251 , 0.9372056764266794 ], \"color\" : \"white_5015\" }, { \"id\" : 8 , \"vector\" : [ - 0.3038434006935904 , 0.1279149203380523 , 0.503958664270957 , - 0.2622661156746988 , 0.7407627307791929 ], \"color\" : \"purple_6414\" }, { \"id\" : 9 , \"vector\" : [ - 0.7125086947677588 , - 0.8050968321012257 , - 0.32608864121785786 , 0.3255654958645424 , 0.26227968923834233 ], \"color\" : \"brown_7231\" } ] res = client . upsert ( collection_name = 'demo_v2' , data = data ) # print(res) # \u6ce8\u610f\u5982\u679c\u5206\u533a\u4e2d\u4e0d\u5b58\u5728\u66f4\u65b0\u6570\u636e\u7684id\uff0c\u5c31\u4e0d\u4f1a\u53d7\u5f71\u54cd\uff0c\u4f46\u662f\u4f1a\u5f71\u54cd\u96c6\u5408\u91cc\u5df2\u7ecf\u5b58\u5728\u7684\u76f8\u540cid\u7684\u5b9e\u4f53 # res = client.upsert(collection_name='demo_v2', data=data, partition_name=\"partitionA\") # todo:5. \u5220\u9664\u5b9e\u4f53\uff08\u6570\u636e\uff09 # \u6309\u7167\u8fc7\u6ee4\u5668\u5220\u9664\uff1b\u5982\u679c\u4e0d\u6307\u5b9a\u5206\u533a\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5728\u6574\u4e2a\u96c6\u5408\u4e2d\u8fdb\u884c\u5220\u9664 res = client . delete ( collection_name = 'demo_v2' , filter = 'id in [12, 5, 6]' ) print ( res ) # \u6309\u7167id\u8fdb\u884c\u5220\u9664\uff1b\u6307\u5b9a\u5206\u533a\u5220\u9664\u6570\u636e # res = client.delete(collection_name='demo_v2', ids=[1, 2, 3, 4], partition_name='partitionA') print ( res )","title":"5.3.1\u6570\u636e\u7684\u589e\u3001\u5220\u3001\u6539"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#532","text":"\u7b80\u5355\u67e5\u8be2\uff1a # entity\u5b9e\u4f53\u6570\u636e\u7684\u64cd\u4f5c\uff1a\u67e5\u8be2 def query_operation (): # # todo: 1. \u5355\u5411\u91cf\u641c\u7d22 res = client . search ( collection_name = 'demo_v2' , data = [[ 0.19886812562848388 , 0.06023560599112088 , 0.6976963061752597 , 0.2614474506242501 , 0.838729485096104 ]], limit = 2 , search_params = { \"metric_type\" : \"IP\" }, output_fields = [ \"id\" , 'vector' ]) # search_params\u662f\u5728\u67e5\u8be2\u65f6\u6267\u884c\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\uff0c\u5982\u679c\u5b9a\u4e49\u7d22\u5f15\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u5236\u5b9a\u4e86\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u5199 print ( res ) # todo: 2. \u6279\u91cf\u5411\u91cf\u641c\u7d22 res = client . search ( collection_name = 'demo_v2' , data = [[ 0.19886812562848388 , 0.06023560599112088 , 0.6976963061752597 , 0.2614474506242501 , 0.838729485096104 ], [ 0.3172005263489739 , 0.9719044792798428 , - 0.36981146090600725 , - 0.4860894583077995 , 0.95791889146345 ]], limit = 2 , search_params = { \"metric_type\" : \"IP\" }, output_fields = [ \"id\" , 'vector' ]) # search_params\u662f\u5728\u67e5\u8be2\u65f6\u6267\u884c\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\uff0c\u5982\u679c\u5b9a\u4e49\u7d22\u5f15\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u5236\u5b9a\u4e86\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u5199 print ( res ) # todo: 3. \u5206\u533a\u641c\u7d22 # \u8981\u8fdb\u884c\u5206\u533a\u641c\u7d22\uff0c\u53ea\u9700\u5728\u641c\u7d22\u8bf7\u6c42\u7684 partition_names \u4e2d\u5305\u542b\u76ee\u6807\u5206\u533a\u7684\u540d\u79f0\u5373\u53ef\u3002\u8fd9\u6307\u5b9asearch\u64cd\u4f5c\u4ec5\u8003\u8651\u6307\u5b9a\u5206\u533a\u5185\u7684\u5411\u91cf\u3002 res = client . search ( collection_name = \"demo_v2\" , data = [[ 0.02174828545444263 , 0.058611125483182924 , 0.6168633415965343 , - 0.7944160935612321 , 0.5554828317581426 ]], limit = 5 , search_params = { \"metric_type\" : \"IP\" , \"params\" : {}}, partition_names = [ \"partitionA\" ] # \u8fd9\u91cc\u6307\u5b9a\u641c\u7d22\u7684\u5206\u533a ) print ( res ) # todo: 4.\u4f7f\u7528\u8f93\u51fa\u5b57\u6bb5\u8fdb\u884c\u641c\u7d22 # \u4f7f\u7528\u8f93\u51fa\u5b57\u6bb5\u8fdb\u884c\u641c\u7d22\u5141\u8bb8\u60a8\u6307\u5b9a\u641c\u7d22\u7ed3\u679c\u4e2d\u5e94\u5305\u542b\u5339\u914d\u5411\u91cf\u7684\u54ea\u4e9b\u5c5e\u6027\u6216\u5b57\u6bb5\u3002 res = client . search ( collection_name = \"demo_v2\" , data = [[ 0.3580376395471989 , - 0.6023495712049978 , 0.18414012509913835 , - 0.26286205330961354 , 0.9029438446296592 ]], limit = 5 , search_params = { \"metric_type\" : \"IP\" , \"params\" : {}}, output_fields = [ 'vector' , \"color\" ] # \u8fd4\u56de\u5b9a\u4e49\u7684\u5b57\u6bb5 ) print ( res ) # todo: 5.\u8fc7\u6ee4\u641c\u7d22 # \u8fc7\u6ee4\u5668\u641c\u7d22\uff1a\u7b5b\u9009\u641c\u7d22\u5c06\u6807\u91cf\u7b5b\u9009\u5668\u5e94\u7528\u4e8e\u77e2\u91cf\u641c\u7d22\uff0c\u5141\u8bb8\u6211\u4eec\u6839\u636e\u7279\u5b9a\u6761\u4ef6\u4f18\u5316\u641c\u7d22\u7ed3\u679c\u3002 # \u4f8b\u5982\uff0c\u8981\u6839\u636e\u5b57\u7b26\u4e32\u6a21\u5f0f\u4f18\u5316\u641c\u7d22\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 like \u8fd0\u7b97\u7b26\u3002\u6b64\u8fd0\u7b97\u7b26\u901a\u8fc7\u8003\u8651\u524d\u7f00\u3001\u4e2d\u7f00\u548c\u540e\u7f00\u6765\u542f\u7528\u5b57\u7b26\u4e32\u5339\u914d\uff1a # \u7b5b\u9009\u989c\u8272\u4ee5\u7ea2\u8272\u4e3a\u524d\u7f00\u7684\u7ed3\u679c\uff1a res = client . search ( collection_name = \"demo_v2\" , data = [[ 0.3580376395471989 , - 0.6023495712049978 , 0.18414012509913835 , - 0.26286205330961354 , 0.9029438446296592 ]], limit = 5 , search_params = { \"metric_type\" : \"IP\" , \"params\" : {}}, output_fields = [ \"color\" ], filter = 'color like \"red%\"' ) print ( res ) # todo: 6.\u8303\u56f4\u641c\u7d22 # \u8303\u56f4\u641c\u7d22\u5141\u8bb8\u67e5\u627e\u8ddd\u67e5\u8be2\u5411\u91cf\u6307\u5b9a\u8ddd\u79bb\u8303\u56f4\u5185\u7684\u5411\u91cf\u3002 # \u8303\u56f4\u641c\u7d22:radius\uff1a\u5b9a\u4e49\u641c\u7d22\u7a7a\u95f4\u7684\u5916\u8fb9\u754c\u3002\u53ea\u6709\u8ddd\u67e5\u8be2\u5411\u91cf\u5728\u6b64\u8ddd\u79bb\u5185\u7684\u5411\u91cf\u624d\u88ab\u89c6\u4e3a\u6f5c\u5728\u5339\u914d\u3002 # range_filter\uff1a\u867d\u7136radius\u8bbe\u7f6e\u641c\u7d22\u7684\u5916\u90e8\u9650\u5236\uff0c\u4f46\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528range_filter\u6765\u5b9a\u4e49\u5185\u90e8\u8fb9\u754c\uff0c\u521b\u5efa\u4e00\u4e2a\u8ddd\u79bb\u8303\u56f4\uff0c\u5728\u8be5\u8303\u56f4\u5185\u5411\u91cf\u5fc5\u987b\u843d\u4e0b\u624d\u88ab\u89c6\u4e3a\u5339\u914d\u3002 search_params = { \"metric_type\" : \"IP\" , \"params\" : { \"radius\" : 0.8 , # \u641c\u7d22\u5706\u7684\u534a\u5f84 \"range_filter\" : 1 # \u8303\u56f4\u8fc7\u6ee4\u5668\uff0c\u7528\u4e8e\u8fc7\u6ee4\u51fa\u4e0d\u5728\u641c\u7d22\u5706\u5185\u7684\u5411\u91cf\u3002 } } res = client . search ( collection_name = \"demo_v2\" , data = [[ 0.3580376395471989 , - 0.6023495712049978 , 0.18414012509913835 , - 0.26286205330961354 , 0.9029438446296592 ]], limit = 3 , # \u8fd4\u56de\u7684\u641c\u7d22\u7ed3\u679c\u6700\u5927\u6570\u91cf search_params = search_params , output_fields = [ \"color\" ], ) # # print ( res ) result = json . dumps ( res , indent = 4 ) print ( result ) \u590d\u6742\u67e5\u8be2 \u6df7\u5408\u68c0\u7d22\uff1a\u8981\u5bf9\u4e24\u7ec4 ANN \u641c\u7d22\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\u548c\u91cd\u65b0\u6392\u5e8f\uff0c\u6709\u5fc5\u8981\u9009\u62e9\u9002\u5f53\u7684\u91cd\u65b0\u6392\u5e8f\u7b56\u7565\u3002\u652f\u6301\u4e24\u79cd\u91cd\u6392\u7b56\u7565\uff1a \u52a0\u6743\u6392\u540d\u7b56\u7565\uff08WeightedRanker \uff09\u548c**\u91cd\u6392\u5e8f\u7b56\u7565**\uff08 RRFRanker \uff09\u3002\u5728\u9009\u62e9\u91cd\u6392\u7b56\u7565\u65f6\uff0c\u9700\u8981\u8003\u8651\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5728\u5411\u91cf\u573a\u4e2d\u662f\u5426\u9700\u8981\u5f3a\u8c03\u4e00\u4e2a\u6216\u591a\u4e2a\u57fa\u672c ANN \u641c\u7d22\u3002 \u52a0\u6743\u6392\u540d \uff1a\u5982\u679c\u60a8\u8981\u6c42\u7ed3\u679c\u5f3a\u8c03\u7279\u5b9a\u7684\u5411\u91cf\u573a\uff0c\u5efa\u8bae\u4f7f\u7528\u8be5\u7b56\u7565\u3002\u901a\u8fc7 WeightedRanker\uff0c\u60a8\u53ef\u4ee5\u4e3a\u67d0\u4e9b\u5411\u91cf\u573a\u5206\u914d\u66f4\u9ad8\u7684\u6743\u91cd\uff0c\u4ece\u800c\u66f4\u52a0\u5f3a\u8c03\u8fd9\u4e9b\u5411\u91cf\u573a\u3002\u4f8b\u5982\uff0c\u5728\u591a\u6a21\u6001\u641c\u7d22\u4e2d\uff0c\u56fe\u7247\u7684\u6587\u5b57\u63cf\u8ff0\u53ef\u80fd\u6bd4\u56fe\u7247\u7684\u989c\u8272\u66f4\u91cd\u8981\u3002 \u4f7f\u7528 WeightedRanker \u7b56\u7565\u65f6\uff0c\u9700\u8981\u5728 WeightedRanker \u51fd\u6570\u4e2d\u8f93\u5165\u6743\u91cd\u503c\u3002\u6df7\u5408\u641c\u7d22\u4e2d\u7684\u57fa\u672c ANN \u641c\u7d22\u6b21\u6570\u4e0e\u9700\u8981\u8f93\u5165\u7684\u503c\u7684\u6b21\u6570\u76f8\u5bf9\u5e94\u3002\u8f93\u5165\u503c\u7684\u8303\u56f4\u5e94\u4e3a [0,1]\uff0c\u6570\u503c\u8d8a\u63a5\u8fd1 1 \u8868\u793a\u91cd\u8981\u6027\u8d8a\u9ad8\u3002 from pymilvus import WeightedRanker rerank = WeightedRanker ( 0.8 , 0.3 ) RRFRanker\uff08\u5012\u6570\u6392\u5e8f\u878d\u5408\uff09 \uff1a\u5728\u6ca1\u6709\u7279\u5b9a\u91cd\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u91c7\u7528\u8fd9\u79cd\u7b56\u7565\u3002RRF \u53ef\u4ee5\u6709\u6548\u5e73\u8861\u6bcf\u4e2a\u5411\u91cf\u573a\u7684\u91cd\u8981\u6027\u3002 RRFRanker\u7684\u6838\u5fc3\u601d\u60f3\u662f\u6839\u636e\u6bcf\u4e2a\u7ed3\u679c\u5728\u5176\u68c0\u7d22\u5217\u8868\u4e2d\u7684\u6392\u540d\u4f4d\u7f6e\u6765\u8ba1\u7b97\u5206\u6570\u3002\u5177\u4f53\u800c\u8a00\uff0c\u7b97\u6cd5\u4f7f\u7528\u4ee5\u4e0b\u516c\u5f0f\u4e3a\u6bcf\u4e2a\u7ed3\u679c\u5206\u914d\u5206\u6570\uff1a d\uff1a\u8868\u793a\u6587\u6863\u3002 N\uff1a\u8868\u793a\u4e0d\u540c\u68c0\u7d22\u8def\u5f84\u7684\u6570\u91cf\u3002 ranki(d)\uff1a\u8868\u793a\u6587\u6863 d \u5728\u7b2c i \u4e2a\u68c0\u7d22\u5668\u4e2d\u7684\u6392\u540d\u4f4d\u7f6e\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570\u3002 k\uff1a\u662f\u4e00\u4e2a\u5e73\u6ed1\u53c2\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u968f\u7740\u6392\u540d\u589e\u52a0\u5206\u6570\u7684\u964d\u4f4e\u901f\u5ea6\u3002\u9ed8\u8ba4\u503c\u901a\u5e38\u8bbe\u7f6e\u4e3a60\u3002 \u4f7f\u7528 RRFRanker \u7b56\u7565\u65f6\uff0c\u9700\u8981\u5c06\u53c2\u6570\u503c k \u8f93\u5165 RRFRanker\u3002 k \u7684\u9ed8\u8ba4\u503c\u4e3a 60\u3002\u8be5\u53c2\u6570\u6709\u52a9\u4e8e\u786e\u5b9a\u5982\u4f55\u7ec4\u5408\u6765\u81ea\u4e0d\u540c ANN \u641c\u7d22\u7684\u6392\u540d\uff0c\u76ee\u7684\u662f\u5e73\u8861\u548c\u6df7\u5408\u6240\u6709\u641c\u7d22\u7684\u91cd\u8981\u6027\u3002 from pymilvus import RRFRanker ranker = RRFRanker ( 100 ) \u4ee3\u7801\u5b9e\u73b0\uff1a def complex_query (): # # \u5b9a\u4e49schema schema = client . create_schema ( enable_dynamic_field = False ) schema . add_field ( field_name = 'film_id' , datatype = DataType . INT64 , is_primary = True ) schema . add_field ( field_name = 'filmVector' , datatype = DataType . FLOAT_VECTOR , dim = 5 ) # \u5411\u91cf\u5b57\u6bb5 schema . add_field ( field_name = \"posterVector\" , datatype = DataType . FLOAT_VECTOR , dim = 5 ) # \u5411\u91cf\u5b57\u6bb5 # # # \u5b9a\u4e49\u7d22\u5f15 index_params = client . prepare_index_params () index_params . add_index ( field_name = 'filmVector' , index_type = \"IVF_FLAT\" , metric_type = \"L2\" , params = { \"nlist\" : 128 }) index_params . add_index ( field_name = 'posterVector' , index_type = \"\" , metric_type = \"COSINE\" ) # \u521b\u5efa\u96c6\u5408 client . create_collection ( collection_name = 'demo_v3' , schema = schema , index_params = index_params ) # \u5411\u91cf\u5e93\u4e2d\u63d2\u5165\u5b9e\u4f53 entities = [] for _ in range ( 1000 ): # \u6784\u9020\u5b9e\u4f53 film_id = random . randint ( 1 , 10000 ) film_vector = [ random . random () for _ in range ( 5 )] poster_vector = [ random . random () for _ in range ( 5 )] entity = { \"film_id\" : film_id , \"filmVector\" : film_vector , \"posterVector\" : poster_vector } entities . append ( entity ) client . insert ( collection_name = 'demo_v3' , data = entities ) # \u591a\u5411\u91cf\u67e5\u8be2\uff08\u6ce8\u610f\u548c\u6279\u91cf\u5411\u91cf\u67e5\u8be2\u4e0d\u540c\uff09 # \u591a\u5411\u91cf\u641c\u7d22\u4f7f\u7528 hybrid_search() API \u5728\u4e00\u6b21\u8c03\u7528\u4e2d\u6267\u884c\u591a\u4e2a ANN \u641c\u7d22\u8bf7\u6c42\u3002\u6bcf\u4e2a AnnSearchRequest \u4ee3\u8868\u7279\u5b9a\u77e2\u91cf\u573a\u4e0a\u7684\u5355\u4e2a\u641c\u7d22\u8bf7\u6c42\u3002 # \u793a\u4f8b\u521b\u5efa\u4e24\u4e2a AnnSearchRequest \u5b9e\u4f8b\u4ee5\u5bf9\u4e24\u4e2a\u5411\u91cf\u5b57\u6bb5\u6267\u884c\u5355\u72ec\u7684\u76f8\u4f3c\u6027\u641c\u7d22\u3002 # \u521b\u5efa\u591a\u641c\u7d22\u8bf7\u6c42 filmVector query_filmVector = [[ 0.8896863042430693 , 0.370613100114602 , 0.23779315077113428 , 0.38227915951132996 , 0.5997064603128835 ]] dense_search_params = { \"data\" : query_filmVector , \"anns_field\" : \"filmVector\" , # \u8be5\u53c2\u6570\u503c\u5fc5\u987b\u4e0e\u96c6\u5408\u6a21\u5f0f\u4e2d\u4f7f\u7528\u7684\u503c\u76f8\u540c\u3002 \"param\" : { \"metric_type\" : \"L2\" , \"nprobe\" : 10 }, # nprobe\u4ee3\u8868\u8bbf\u95ee\u7c07\u7684\u6570\u91cf \"limit\" : 2 } request_1 = AnnSearchRequest ( ** dense_search_params ) # \u521b\u5efa\u591a\u641c\u7d22\u8bf7\u6c42 posterVector query_posterVector = [[ 0.02550758562349764 , 0.006085637357292062 , 0.5325251250159071 , 0.7676432650114147 , 0.5521074424751443 ]] sparse_search_params = { \"data\" : query_posterVector , \"anns_field\" : \"posterVector\" , # \u8be5\u53c2\u6570\u503c\u5fc5\u987b\u4e0e\u96c6\u5408\u6a21\u5f0f\u4e2d\u4f7f\u7528\u7684\u503c\u76f8\u540c\u3002 \"param\" : { \"metric_type\" : \"COSINE\" }, \"limit\" : 2 } request_2 = AnnSearchRequest ( ** sparse_search_params ) reqs = [ request_1 , request_2 ] ranker = RRFRanker ( 100 ) res = client . hybrid_search ( collection_name = \"demo_v3\" , reqs = reqs , ranker = ranker , limit = 2 ) for hits in res : print ( \"TopK results:\" ) for hit in hits : print ( hit )","title":"5.3.2 \u6570\u636e\u7684\u67e5\u8be2"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#54","text":"\u7531\u4e8e Milvus Lite \u7684\u6240\u6709\u6570\u636e\u90fd\u5b58\u50a8\u5728\u672c\u5730\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u5373\u4f7f\u5728\u7a0b\u5e8f\u7ec8\u6b62\u540e\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u73b0\u6709\u6587\u4ef6\u7684 MilvusClient \uff0c\u5c06\u6240\u6709\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u4f8b\u5982\uff0c\u8fd9\u5c06\u6062\u590d \"milvus_demo.db \"\u6587\u4ef6\u4e2d\u7684 Collections\uff0c\u5e76\u7ee7\u7eed\u5411\u5176\u4e2d\u5199\u5165\u6570\u636e\u3002 from pymilvus import MilvusClient client = MilvusClient ( \"milvus_demo.db\" )","title":"5.4 \u52a0\u8f7d\u73b0\u6709\u6570\u636e"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#55-collections","text":"\u5982\u679c\u60f3\u5220\u9664\u67d0\u4e2a Collections \u4e2d\u7684\u6240\u6709\u6570\u636e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u4e22\u5f03\u8be5 Collections # Drop collection client . drop_collection ( collection_name = \"demo_collection\" )","title":"5.5 \u5220\u9664 Collections"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/03-Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93.html#_2","text":"\u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4ec0\u4e48\u662fMilvus\u5411\u91cf\u6570\u636e\u5e93\uff0c\u5e76\u5bf9\u8be5\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5\u7b49\u64cd\u4f5c\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u8bb2\u89e3","title":"\u672c\u8282\u5c0f\u7ed3"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html","text":"\u57fa\u4e8e Docker \u90e8\u7f72\u5355\u673a\u7248 Milvus \u548c Redis \u6559\u7a0b \u00b6 \u672c\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u5728 Windows 11 \u548c M1 \u82af\u7247\u7684 macOS \u7cfb\u7edf\u4e0a\u4f7f\u7528 Docker \u540c\u65f6\u90e8\u7f72\u548c\u8fd0\u884c\u5355\u673a\u7248 Milvus\uff08\u5411\u91cf\u6570\u636e\u5e93\uff09\u548c Redis\uff08\u952e\u503c\u5b58\u50a8\u6570\u636e\u5e93\uff09\u3002\u6559\u7a0b\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5206\u522b\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u8be6\u7ec6\u6b65\u9aa4\u3002 \u524d\u7f6e\u6761\u4ef6 \u00b6 \u786c\u4ef6\u8981\u6c42 \u81f3\u5c11 8GB \u5185\u5b58\uff08\u5efa\u8bae 16GB \u6216\u66f4\u9ad8\uff09\u3002 \u81f3\u5c11 20GB \u53ef\u7528\u78c1\u76d8\u7a7a\u95f4\uff08Milvus \u548c Redis \u6570\u636e\u5b58\u50a8\uff09\u3002 \u8f6f\u4ef6\u8981\u6c42 \u5df2\u5b89\u88c5 Docker Desktop\uff08Windows 11 \u6216 macOS\uff09\u3002 \u786e\u4fdd Docker Compose \u5df2\u5305\u542b\u5728 Docker Desktop \u4e2d\uff08\u901a\u5e38\u9ed8\u8ba4\u5b89\u88c5\uff09\u3002 \u7f51\u7edc\u8981\u6c42 \u7a33\u5b9a\u7684\u4e92\u8054\u7f51\u8fde\u63a5\uff0c\u7528\u4e8e\u62c9\u53d6 Docker \u955c\u50cf\u3002 \u8f6f\u4ef6\u7248\u672c Milvus\uff1a2.4.4\uff08\u6700\u65b0\u7a33\u5b9a\u7248\uff09\u3002 Redis\uff1a7.2\uff08\u6700\u65b0\u7a33\u5b9a\u7248\uff09\u3002 \u7aef\u53e3\u8981\u6c42 Milvus\uff1a 19530 \uff08gRPC\uff09\u3001 9091 \uff08RESTful API\uff09\u3002 Redis\uff1a 6379 \uff08\u9ed8\u8ba4\u7aef\u53e3\uff09\u3002 \u786e\u4fdd\u4ee5\u4e0a\u7aef\u53e3\u672a\u88ab\u5360\u7528\u3002 \u4e00\u3001Windows 11 \u7cfb\u7edf\u90e8\u7f72 Milvus \u548c Redis \u00b6 1. \u5b89\u88c5 Docker Desktop \u00b6 \u4e0b\u8f7d Docker Desktop \u8bbf\u95ee Docker \u5b98\u65b9\u7f51\u7ad9 \uff0c\u4e0b\u8f7d\u9002\u7528\u4e8e Windows \u7684 Docker Desktop \u5b89\u88c5\u5305\u3002 \u5b89\u88c5 Docker Desktop \u53cc\u51fb\u4e0b\u8f7d\u7684\u5b89\u88c5\u6587\u4ef6\uff0c\u6309\u7167\u63d0\u793a\u5b8c\u6210\u5b89\u88c5\u3002 \u542f\u7528 WSL 2\uff08Windows Subsystem for Linux 2\uff09\u652f\u6301\uff1a \u6253\u5f00 PowerShell\uff08\u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\uff09\uff0c\u8fd0\u884c\uff1a wsl --install \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u91cd\u542f\u8ba1\u7b97\u673a\u3002 \u9a8c\u8bc1 Docker \u5b89\u88c5 \u6253\u5f00 PowerShell \u6216\u547d\u4ee4\u63d0\u793a\u7b26\uff0c\u8fd0\u884c\uff1a docker --version docker compose version \u786e\u4fdd\u8f93\u51fa\u7248\u672c\u4fe1\u606f\uff0c\u4f8b\u5982 Docker version 27.x.x \u548c Docker Compose version v2.x.x \u3002 2. \u914d\u7f6e Docker Compose \u6587\u4ef6 \u00b6 \u521b\u5efa\u9879\u76ee\u76ee\u5f55 \u5728\u672c\u5730\u78c1\u76d8\uff08\u4f8b\u5982 C\u76d8\uff09\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7528\u4e8e\u5b58\u653e Milvus \u548c Redis \u7684\u914d\u7f6e\u6587\u4ef6\u548c\u6570\u636e\uff1a mkdir C: \\m ilvus_redis cd C: \\m ilvus_redis \u521b\u5efa Docker Compose \u6587\u4ef6 \u5728 C:\\milvus_redis \u76ee\u5f55\u4e0b\u521b\u5efa\u6587\u4ef6 docker-compose.yml \u5185\u5bb9\u5982\u4e0b\uff1a version : '3.5' # Windows/x86_64 Version # Redis Password set to: 1234 services : etcd : container_name : milvus-etcd image : quay.io/coreos/etcd:v3.5.5 environment : - ETCD_AUTO_COMPACTION_MODE=revision - ETCD_AUTO_COMPACTION_RETENTION=1000 - ETCD_QUOTA_BACKEND_BYTES=4294967296 - ETCD_ENABLE_V2=true volumes : - ./volumes/etcd:/etcd/data command : etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd/data minio : container_name : milvus-minio image : minio/minio:RELEASE.2023-03-20T20-16-18Z environment : MINIO_ACCESS_KEY : minioadmin MINIO_SECRET_KEY : minioadmin volumes : - ./volumes/minio:/minio/data command : minio server /minio/data healthcheck : test : [ \"CMD\" , \"curl\" , \"-f\" , \"http://localhost:9000/minio/health/live\" ] interval : 30s timeout : 20s retries : 3 standalone : container_name : milvus-standalone # \u4f7f\u7528\u591a\u67b6\u6784\u955c\u50cf\uff0cDocker on Windows \u4f1a\u81ea\u52a8\u62c9\u53d6 x86_64 \u7248\u672c image : milvusdb/milvus:v2.4.4 command : [ \"milvus\" , \"run\" , \"standalone\" ] environment : - ETCD_ENDPOINTS=etcd:2379 - MINIO_ADDRESS=minio:9000 volumes : - ./volumes/milvus:/var/lib/milvus ports : - \"19530:19530\" - \"9091:9091\" depends_on : - \"etcd\" - \"minio\" redis : container_name : milvus-redis image : redis:latest restart : always ports : - \"6379:6379\" volumes : - ./volumes/redis:/data # \u8bbe\u7f6e Redis \u5bc6\u7801\u4e3a 1234 command : redis-server --requirepass 1234 networks : default : name : milvus-network \u8bf4\u660e Milvus \u670d\u52a1 image : \u4f7f\u7528 Milvus \u5b98\u65b9\u955c\u50cf milvusdb/milvus:v2.4.10 \u3002 ports : \u6620\u5c04 gRPC\uff0819530\uff09\u548c RESTful API\uff089091\uff09\u7aef\u53e3\u3002 volumes : \u6570\u636e\u6301\u4e45\u5316\u5b58\u50a8\u5230\u672c\u5730 ./volumes/milvus \u76ee\u5f55\u3002 environment : \u914d\u7f6e\u65e5\u5fd7\u7ea7\u522b\u548c Etcd \u53c2\u6570\u3002 command : \u542f\u52a8 Milvus \u5355\u673a\u6a21\u5f0f\u3002 Redis \u670d\u52a1 image : \u4f7f\u7528 Redis \u5b98\u65b9\u955c\u50cf redis:7.2 \u3002 ports : \u6620\u5c04\u9ed8\u8ba4\u7aef\u53e3 6379 \u3002 volumes : \u6570\u636e\u6301\u4e45\u5316\u5b58\u50a8\u5230\u672c\u5730 ./volumes/redis \u76ee\u5f55\u3002 command : \u542f\u7528 AOF\uff08Append Only File\uff09\u6301\u4e45\u5316\u6a21\u5f0f\u3002 volumes : \u5b9a\u4e49\u6301\u4e45\u5316\u5b58\u50a8\u5377\u3002 3. \u542f\u52a8 Milvus \u548c Redis \u00b6 \u62c9\u53d6\u955c\u50cf\u5e76\u542f\u52a8\u5bb9\u5668 \u5728 C:\\milvus_redis \u76ee\u5f55\u4e0b\uff0c\u6253\u5f00 PowerShell\uff0c\u8fd0\u884c\uff1a docker compose up -d -d \u8868\u793a\u540e\u53f0\u8fd0\u884c\u5bb9\u5668\u3002 \u9a8c\u8bc1\u5bb9\u5668\u72b6\u6001 \u68c0\u67e5\u5bb9\u5668\u662f\u5426\u6b63\u5e38\u8fd0\u884c\uff1a docker ps \u786e\u8ba4 milvus_standalone \u548c redis \u5bb9\u5668\u5747\u5904\u4e8e Up \u72b6\u6001\u3002 4. \u9a8c\u8bc1 Milvus \u670d\u52a1 \u00b6 \u5b89\u88c5 Milvus Python SDK \u786e\u4fdd\u5df2\u5b89\u88c5 Python 3.8 \u6216\u4ee5\u4e0a\u7248\u672c\u3002 \u5728 PowerShell \u4e2d\u5b89\u88c5\uff1a pip install pymilvus \u6d4b\u8bd5 Milvus \u8fde\u63a5 \u521b\u5efa Python \u811a\u672c\uff08\u4f8b\u5982 test_milvus.py \uff09\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a from pymilvus import connections , utility # \u8fde\u63a5\u5230 Milvus connections . connect ( host = \"localhost\" , port = \"19530\" ) # \u68c0\u67e5\u7248\u672c print ( f \"Milvus version: { utility . get_server_version () } \" ) \u8fd0\u884c\u811a\u672c\uff1a python test_milvus.py \u8f93\u51fa\u7c7b\u4f3c Milvus version: 2.4.10 \u8868\u793a Milvus \u90e8\u7f72\u6210\u529f\u3002 5. \u9a8c\u8bc1 Redis \u670d\u52a1 \u00b6 \u5b89\u88c5 Redis Python \u5ba2\u6237\u7aef \u5728 PowerShell \u4e2d\u5b89\u88c5\uff1a pip install redis \u6d4b\u8bd5 Redis \u8fde\u63a5 \u521b\u5efa Python \u811a\u672c\uff08\u4f8b\u5982 test_redis.py \uff09\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a import redis # \u8fde\u63a5\u5230 Redis client = redis . Redis ( host = \"localhost\" , port = 6379 , decode_responses = True ) # \u6d4b\u8bd5\u8bfb\u5199 client . set ( \"test_key\" , \"Hello, Redis!\" ) value = client . get ( \"test_key\" ) print ( f \"Redis value: { value } \" ) \u8fd0\u884c\u811a\u672c\uff1a python test_redis.py \u8f93\u51fa\u7c7b\u4f3c Redis value: Hello, Redis! \u8868\u793a Redis \u90e8\u7f72\u6210\u529f\u3002 6. \u505c\u6b62\u548c\u6e05\u7406 \u00b6 \u505c\u6b62\u670d\u52a1 docker compose down \u4e8c\u3001M1 \u82af\u7247 macOS \u7cfb\u7edf\u90e8\u7f72 Milvus \u548c Redis \u00b6 M1 \u82af\u7247\uff08ARM64 \u67b6\u6784\uff09\u8fd0\u884c Docker \u65f6\u9700\u786e\u4fdd\u955c\u50cf\u517c\u5bb9\u6027\u3002Milvus \u548c Redis \u5b98\u65b9\u955c\u50cf\u5747\u652f\u6301 ARM64\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u4f46\u9700\u6b63\u786e\u914d\u7f6e Docker Desktop\u3002 1. \u5b89\u88c5 Docker Desktop \u00b6 \u4e0b\u8f7d Docker Desktop \u8bbf\u95ee Docker \u5b98\u65b9\u7f51\u7ad9 \uff0c\u4e0b\u8f7d\u9002\u7528\u4e8e macOS\uff08Apple Silicon\uff09\u7684 Docker Desktop \u5b89\u88c5\u5305\u3002 \u5b89\u88c5 Docker Desktop \u53cc\u51fb\u4e0b\u8f7d\u7684 .dmg \u6587\u4ef6\uff0c\u6309\u7167\u63d0\u793a\u62d6\u52a8\u5b89\u88c5\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u542f\u52a8 Docker Desktop\uff0c\u5e76\u786e\u4fdd\u5176\u5728\u83dc\u5355\u680f\u8fd0\u884c\u3002 \u9a8c\u8bc1 Docker \u5b89\u88c5 \u6253\u5f00\u7ec8\u7aef\uff0c\u8fd0\u884c\uff1a docker --version docker compose version \u786e\u4fdd\u8f93\u51fa\u7248\u672c\u4fe1\u606f\uff0c\u4f8b\u5982 Docker version 27.x.x \u548c Docker Compose version v2.x.x \u3002 \u542f\u7528 Rosetta\uff08\u53ef\u9009\uff09 \u5982\u679c\u9047\u5230\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u53ef\u5728 Docker Desktop \u8bbe\u7f6e\u4e2d\u542f\u7528 Rosetta \u6a21\u62df\uff1a \u6253\u5f00 Docker Desktop -> Settings -> Features in Development -> \u52fe\u9009 \u201cUse Rosetta for x86/AMD64 emulation on Apple Silicon\u201d\u3002 2. \u914d\u7f6e Docker Compose \u6587\u4ef6 \u00b6 \u521b\u5efa\u9879\u76ee\u76ee\u5f55 \u5728\u7ec8\u7aef\u4e2d\u521b\u5efa\u5e76\u8fdb\u5165\u76ee\u5f55\uff1a mkdir ~/milvus_redis cd ~/milvus_redis \u521b\u5efa Docker Compose \u6587\u4ef6 \u521b\u5efa\u6587\u4ef6 docker-compose.yml version : '3.5' # M1/ARM64 Mac Version # Redis Password set to: 1234 services : etcd : container_name : milvus-etcd image : quay.io/coreos/etcd:v3.5.5 environment : - ETCD_AUTO_COMPACTION_MODE=revision - ETCD_AUTO_COMPACTION_RETENTION=1000 - ETCD_QUOTA_BACKEND_BYTES=4294967296 - ETCD_ENABLE_V2=true volumes : - ./volumes/etcd:/etcd/data command : etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd/data minio : container_name : milvus-minio image : minio/minio:RELEASE.2023-03-20T20-16-18Z environment : MINIO_ACCESS_KEY : minioadmin MINIO_SECRET_KEY : minioadmin volumes : - ./volumes/minio:/minio/data command : minio server /minio/data healthcheck : test : [ \"CMD\" , \"curl\" , \"-f\" , \"http://localhost:9000/minio/health/live\" ] interval : 30s timeout : 20s retries : 3 standalone : container_name : milvus-standalone # \u4f7f\u7528\u591a\u67b6\u6784\u955c\u50cf\uff0cDocker on M1 \u4f1a\u81ea\u52a8\u62c9\u53d6 ARM64 \u7248\u672c image : milvusdb/milvus:v2.4.4 command : [ \"milvus\" , \"run\" , \"standalone\" ] environment : - ETCD_ENDPOINTS=etcd:2379 - MINIO_ADDRESS=minio:9000 volumes : - ./volumes/milvus:/var/lib/milvus ports : - \"19530:19530\" - \"9091:9091\" depends_on : - \"etcd\" - \"minio\" redis : container_name : milvus-redis image : redis:latest # Redis \u5b98\u65b9\u955c\u50cf\u540c\u6837\u652f\u6301\u591a\u67b6\u6784 restart : always ports : - \"6379:6379\" volumes : - ./volumes/redis:/data # \u8bbe\u7f6e Redis \u5bc6\u7801\u4e3a 1234 command : redis-server --requirepass 1234 networks : default : name : milvus-network \u6ce8\u610f \uff1aMilvus \u548c Redis \u955c\u50cf\u5747\u652f\u6301 ARM64\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\u3002 3. \u542f\u52a8 Milvus \u548c Redis \u00b6 \u62c9\u53d6\u955c\u50cf\u5e76\u542f\u52a8\u5bb9\u5668 \u5728 ~/milvus_redis \u76ee\u5f55\u4e0b\uff0c\u8fd0\u884c\uff1a docker compose up -d \u9a8c\u8bc1\u5bb9\u5668\u72b6\u6001 \u68c0\u67e5\u5bb9\u5668\u662f\u5426\u8fd0\u884c\uff1a docker ps \u786e\u8ba4 milvus_standalone \u548c redis \u5bb9\u5668\u5747\u5904\u4e8e Up \u72b6\u6001\u3002 4. \u9a8c\u8bc1 Milvus \u670d\u52a1 \u00b6 \u5b89\u88c5 Milvus Python SDK \u786e\u4fdd\u5df2\u5b89\u88c5 Python 3.8 \u6216\u4ee5\u4e0a\u7248\u672c\u3002 \u5728\u7ec8\u7aef\u4e2d\u5b89\u88c5\uff1a pip install pymilvus \u6d4b\u8bd5 Milvus \u8fde\u63a5 \u521b\u5efa Python \u811a\u672c\uff08\u4f8b\u5982 test_milvus.py \uff09\uff0c\u5185\u5bb9\u4e0e Windows \u90e8\u5206\u76f8\u540c\uff1a from pymilvus import connections , utility # \u8fde\u63a5\u5230 Milvus connections . connect ( host = \"localhost\" , port = \"19530\" ) # \u68c0\u67e5\u7248\u672c print ( f \"Milvus version: { utility . get_server_version () } \" ) \u8fd0\u884c\u811a\u672c\uff1a python test_milvus.py 5. \u9a8c\u8bc1 Redis \u670d\u52a1 \u00b6 \u5b89\u88c5 Redis Python \u5ba2\u6237\u7aef \u5728\u7ec8\u7aef\u4e2d\u5b89\u88c5\uff1a pip install redis \u6d4b\u8bd5 Redis \u8fde\u63a5 \u521b\u5efa Python \u811a\u672c\uff08\u4f8b\u5982 test_redis.py \uff09\uff0c\u5185\u5bb9\u4e0e Windows \u90e8\u5206\u76f8\u540c\uff1a import redis # \u8fde\u63a5\u5230 Redis client = redis . Redis ( host = \"localhost\" , port = 6379 , decode_responses = True ) # \u6d4b\u8bd5\u8bfb\u5199 client . set ( \"test_key\" , \"Hello, Redis!\" ) value = client . get ( \"test_key\" ) print ( f \"Redis value: { value } \" ) \u8fd0\u884c\u811a\u672c\uff1a python test_redis.py 6. \u505c\u6b62\u548c\u6e05\u7406 \u00b6 \u505c\u6b62\u670d\u52a1 docker compose down \u6e05\u7406\u6570\u636e \uff08\u53ef\u9009\uff09\uff1a \u5220\u9664 milvus \u548c redis \u76ee\u5f55\uff1a rm -rf ~/milvus_redis/volumes/milvus rm -rf ~//milvus_redis/volumes/redis \u5e38\u89c1\u95ee\u9898\u4e0e\u89e3\u51b3\u65b9\u6cd5 \u00b6 \u7aef\u53e3\u51b2\u7a81 \u5982\u679c 19530 \u3001 9091 \u6216 6379 \u7aef\u53e3\u88ab\u5360\u7528\uff0c\u4fee\u6539 docker-compose.yml \u4e2d\u7684\u7aef\u53e3\u6620\u5c04\uff08\u4f8b\u5982 19531:19530 \uff09\uff0c\u5e76\u5728\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\u4f7f\u7528\u65b0\u7aef\u53e3\u3002 \u955c\u50cf\u62c9\u53d6\u5931\u8d25 \u786e\u4fdd\u7f51\u7edc\u8fde\u63a5\u6b63\u5e38\uff0c\u6216\u5c1d\u8bd5\u624b\u52a8\u62c9\u53d6\u955c\u50cf\uff1a docker pull milvusdb/milvus:v2.4.10 docker pull redis:7.2 M1 \u82af\u7247\u517c\u5bb9\u6027\u95ee\u9898 \u5982\u679c\u955c\u50cf\u8fd0\u884c\u5931\u8d25\uff0c\u68c0\u67e5 Docker Desktop \u662f\u5426\u542f\u7528\u4e86 Rosetta \u6a21\u62df\u3002 \u8fde\u63a5\u5931\u8d25 \u786e\u4fdd\u5bb9\u5668\u8fd0\u884c\u6b63\u5e38\uff0c\u68c0\u67e5\u9632\u706b\u5899\uff08Windows\uff09\u6216\u7f51\u7edc\u8bbe\u7f6e\uff08macOS\uff09\u662f\u5426\u963b\u6b62\u4e86\u7aef\u53e3\u3002 Redis \u6570\u636e\u672a\u6301\u4e45\u5316 \u786e\u4fdd docker-compose.yml \u4e2d\u542f\u7528\u4e86 --appendonly yes \uff0c\u4e14 ./redis_data \u76ee\u5f55\u6709\u5199\u6743\u9650\u3002 \u53c2\u8003\u8d44\u6e90 \u00b6 Milvus \u5b98\u65b9\u6587\u6863 Redis \u5b98\u65b9\u6587\u6863 Docker Desktop \u6587\u6863 Milvus Docker \u955c\u50cf Redis Docker \u955c\u50cf","title":"2.3 Milvus\u548cRedis\u7684\u5b89\u88c5(\u6269\u5c55\u8d44\u6599)"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#docker-milvus-redis","text":"\u672c\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u5728 Windows 11 \u548c M1 \u82af\u7247\u7684 macOS \u7cfb\u7edf\u4e0a\u4f7f\u7528 Docker \u540c\u65f6\u90e8\u7f72\u548c\u8fd0\u884c\u5355\u673a\u7248 Milvus\uff08\u5411\u91cf\u6570\u636e\u5e93\uff09\u548c Redis\uff08\u952e\u503c\u5b58\u50a8\u6570\u636e\u5e93\uff09\u3002\u6559\u7a0b\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5206\u522b\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u8be6\u7ec6\u6b65\u9aa4\u3002","title":"\u57fa\u4e8e Docker \u90e8\u7f72\u5355\u673a\u7248 Milvus \u548c Redis \u6559\u7a0b"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_1","text":"\u786c\u4ef6\u8981\u6c42 \u81f3\u5c11 8GB \u5185\u5b58\uff08\u5efa\u8bae 16GB \u6216\u66f4\u9ad8\uff09\u3002 \u81f3\u5c11 20GB \u53ef\u7528\u78c1\u76d8\u7a7a\u95f4\uff08Milvus \u548c Redis \u6570\u636e\u5b58\u50a8\uff09\u3002 \u8f6f\u4ef6\u8981\u6c42 \u5df2\u5b89\u88c5 Docker Desktop\uff08Windows 11 \u6216 macOS\uff09\u3002 \u786e\u4fdd Docker Compose \u5df2\u5305\u542b\u5728 Docker Desktop \u4e2d\uff08\u901a\u5e38\u9ed8\u8ba4\u5b89\u88c5\uff09\u3002 \u7f51\u7edc\u8981\u6c42 \u7a33\u5b9a\u7684\u4e92\u8054\u7f51\u8fde\u63a5\uff0c\u7528\u4e8e\u62c9\u53d6 Docker \u955c\u50cf\u3002 \u8f6f\u4ef6\u7248\u672c Milvus\uff1a2.4.4\uff08\u6700\u65b0\u7a33\u5b9a\u7248\uff09\u3002 Redis\uff1a7.2\uff08\u6700\u65b0\u7a33\u5b9a\u7248\uff09\u3002 \u7aef\u53e3\u8981\u6c42 Milvus\uff1a 19530 \uff08gRPC\uff09\u3001 9091 \uff08RESTful API\uff09\u3002 Redis\uff1a 6379 \uff08\u9ed8\u8ba4\u7aef\u53e3\uff09\u3002 \u786e\u4fdd\u4ee5\u4e0a\u7aef\u53e3\u672a\u88ab\u5360\u7528\u3002","title":"\u524d\u7f6e\u6761\u4ef6"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#windows-11-milvus-redis","text":"","title":"\u4e00\u3001Windows 11 \u7cfb\u7edf\u90e8\u7f72 Milvus \u548c Redis"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#1-docker-desktop","text":"\u4e0b\u8f7d Docker Desktop \u8bbf\u95ee Docker \u5b98\u65b9\u7f51\u7ad9 \uff0c\u4e0b\u8f7d\u9002\u7528\u4e8e Windows \u7684 Docker Desktop \u5b89\u88c5\u5305\u3002 \u5b89\u88c5 Docker Desktop \u53cc\u51fb\u4e0b\u8f7d\u7684\u5b89\u88c5\u6587\u4ef6\uff0c\u6309\u7167\u63d0\u793a\u5b8c\u6210\u5b89\u88c5\u3002 \u542f\u7528 WSL 2\uff08Windows Subsystem for Linux 2\uff09\u652f\u6301\uff1a \u6253\u5f00 PowerShell\uff08\u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\uff09\uff0c\u8fd0\u884c\uff1a wsl --install \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u91cd\u542f\u8ba1\u7b97\u673a\u3002 \u9a8c\u8bc1 Docker \u5b89\u88c5 \u6253\u5f00 PowerShell \u6216\u547d\u4ee4\u63d0\u793a\u7b26\uff0c\u8fd0\u884c\uff1a docker --version docker compose version \u786e\u4fdd\u8f93\u51fa\u7248\u672c\u4fe1\u606f\uff0c\u4f8b\u5982 Docker version 27.x.x \u548c Docker Compose version v2.x.x \u3002","title":"1. \u5b89\u88c5 Docker Desktop"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#2-docker-compose","text":"\u521b\u5efa\u9879\u76ee\u76ee\u5f55 \u5728\u672c\u5730\u78c1\u76d8\uff08\u4f8b\u5982 C\u76d8\uff09\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7528\u4e8e\u5b58\u653e Milvus \u548c Redis \u7684\u914d\u7f6e\u6587\u4ef6\u548c\u6570\u636e\uff1a mkdir C: \\m ilvus_redis cd C: \\m ilvus_redis \u521b\u5efa Docker Compose \u6587\u4ef6 \u5728 C:\\milvus_redis \u76ee\u5f55\u4e0b\u521b\u5efa\u6587\u4ef6 docker-compose.yml \u5185\u5bb9\u5982\u4e0b\uff1a version : '3.5' # Windows/x86_64 Version # Redis Password set to: 1234 services : etcd : container_name : milvus-etcd image : quay.io/coreos/etcd:v3.5.5 environment : - ETCD_AUTO_COMPACTION_MODE=revision - ETCD_AUTO_COMPACTION_RETENTION=1000 - ETCD_QUOTA_BACKEND_BYTES=4294967296 - ETCD_ENABLE_V2=true volumes : - ./volumes/etcd:/etcd/data command : etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd/data minio : container_name : milvus-minio image : minio/minio:RELEASE.2023-03-20T20-16-18Z environment : MINIO_ACCESS_KEY : minioadmin MINIO_SECRET_KEY : minioadmin volumes : - ./volumes/minio:/minio/data command : minio server /minio/data healthcheck : test : [ \"CMD\" , \"curl\" , \"-f\" , \"http://localhost:9000/minio/health/live\" ] interval : 30s timeout : 20s retries : 3 standalone : container_name : milvus-standalone # \u4f7f\u7528\u591a\u67b6\u6784\u955c\u50cf\uff0cDocker on Windows \u4f1a\u81ea\u52a8\u62c9\u53d6 x86_64 \u7248\u672c image : milvusdb/milvus:v2.4.4 command : [ \"milvus\" , \"run\" , \"standalone\" ] environment : - ETCD_ENDPOINTS=etcd:2379 - MINIO_ADDRESS=minio:9000 volumes : - ./volumes/milvus:/var/lib/milvus ports : - \"19530:19530\" - \"9091:9091\" depends_on : - \"etcd\" - \"minio\" redis : container_name : milvus-redis image : redis:latest restart : always ports : - \"6379:6379\" volumes : - ./volumes/redis:/data # \u8bbe\u7f6e Redis \u5bc6\u7801\u4e3a 1234 command : redis-server --requirepass 1234 networks : default : name : milvus-network \u8bf4\u660e Milvus \u670d\u52a1 image : \u4f7f\u7528 Milvus \u5b98\u65b9\u955c\u50cf milvusdb/milvus:v2.4.10 \u3002 ports : \u6620\u5c04 gRPC\uff0819530\uff09\u548c RESTful API\uff089091\uff09\u7aef\u53e3\u3002 volumes : \u6570\u636e\u6301\u4e45\u5316\u5b58\u50a8\u5230\u672c\u5730 ./volumes/milvus \u76ee\u5f55\u3002 environment : \u914d\u7f6e\u65e5\u5fd7\u7ea7\u522b\u548c Etcd \u53c2\u6570\u3002 command : \u542f\u52a8 Milvus \u5355\u673a\u6a21\u5f0f\u3002 Redis \u670d\u52a1 image : \u4f7f\u7528 Redis \u5b98\u65b9\u955c\u50cf redis:7.2 \u3002 ports : \u6620\u5c04\u9ed8\u8ba4\u7aef\u53e3 6379 \u3002 volumes : \u6570\u636e\u6301\u4e45\u5316\u5b58\u50a8\u5230\u672c\u5730 ./volumes/redis \u76ee\u5f55\u3002 command : \u542f\u7528 AOF\uff08Append Only File\uff09\u6301\u4e45\u5316\u6a21\u5f0f\u3002 volumes : \u5b9a\u4e49\u6301\u4e45\u5316\u5b58\u50a8\u5377\u3002","title":"2. \u914d\u7f6e Docker Compose \u6587\u4ef6"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#3-milvus-redis","text":"\u62c9\u53d6\u955c\u50cf\u5e76\u542f\u52a8\u5bb9\u5668 \u5728 C:\\milvus_redis \u76ee\u5f55\u4e0b\uff0c\u6253\u5f00 PowerShell\uff0c\u8fd0\u884c\uff1a docker compose up -d -d \u8868\u793a\u540e\u53f0\u8fd0\u884c\u5bb9\u5668\u3002 \u9a8c\u8bc1\u5bb9\u5668\u72b6\u6001 \u68c0\u67e5\u5bb9\u5668\u662f\u5426\u6b63\u5e38\u8fd0\u884c\uff1a docker ps \u786e\u8ba4 milvus_standalone \u548c redis \u5bb9\u5668\u5747\u5904\u4e8e Up \u72b6\u6001\u3002","title":"3. \u542f\u52a8 Milvus \u548c Redis"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#4-milvus","text":"\u5b89\u88c5 Milvus Python SDK \u786e\u4fdd\u5df2\u5b89\u88c5 Python 3.8 \u6216\u4ee5\u4e0a\u7248\u672c\u3002 \u5728 PowerShell \u4e2d\u5b89\u88c5\uff1a pip install pymilvus \u6d4b\u8bd5 Milvus \u8fde\u63a5 \u521b\u5efa Python \u811a\u672c\uff08\u4f8b\u5982 test_milvus.py \uff09\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a from pymilvus import connections , utility # \u8fde\u63a5\u5230 Milvus connections . connect ( host = \"localhost\" , port = \"19530\" ) # \u68c0\u67e5\u7248\u672c print ( f \"Milvus version: { utility . get_server_version () } \" ) \u8fd0\u884c\u811a\u672c\uff1a python test_milvus.py \u8f93\u51fa\u7c7b\u4f3c Milvus version: 2.4.10 \u8868\u793a Milvus \u90e8\u7f72\u6210\u529f\u3002","title":"4. \u9a8c\u8bc1 Milvus \u670d\u52a1"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#5-redis","text":"\u5b89\u88c5 Redis Python \u5ba2\u6237\u7aef \u5728 PowerShell \u4e2d\u5b89\u88c5\uff1a pip install redis \u6d4b\u8bd5 Redis \u8fde\u63a5 \u521b\u5efa Python \u811a\u672c\uff08\u4f8b\u5982 test_redis.py \uff09\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a import redis # \u8fde\u63a5\u5230 Redis client = redis . Redis ( host = \"localhost\" , port = 6379 , decode_responses = True ) # \u6d4b\u8bd5\u8bfb\u5199 client . set ( \"test_key\" , \"Hello, Redis!\" ) value = client . get ( \"test_key\" ) print ( f \"Redis value: { value } \" ) \u8fd0\u884c\u811a\u672c\uff1a python test_redis.py \u8f93\u51fa\u7c7b\u4f3c Redis value: Hello, Redis! \u8868\u793a Redis \u90e8\u7f72\u6210\u529f\u3002","title":"5. \u9a8c\u8bc1 Redis \u670d\u52a1"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#6","text":"\u505c\u6b62\u670d\u52a1 docker compose down","title":"6. \u505c\u6b62\u548c\u6e05\u7406"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#m1-macos-milvus-redis","text":"M1 \u82af\u7247\uff08ARM64 \u67b6\u6784\uff09\u8fd0\u884c Docker \u65f6\u9700\u786e\u4fdd\u955c\u50cf\u517c\u5bb9\u6027\u3002Milvus \u548c Redis \u5b98\u65b9\u955c\u50cf\u5747\u652f\u6301 ARM64\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\uff0c\u4f46\u9700\u6b63\u786e\u914d\u7f6e Docker Desktop\u3002","title":"\u4e8c\u3001M1 \u82af\u7247 macOS \u7cfb\u7edf\u90e8\u7f72 Milvus \u548c Redis"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#1-docker-desktop_1","text":"\u4e0b\u8f7d Docker Desktop \u8bbf\u95ee Docker \u5b98\u65b9\u7f51\u7ad9 \uff0c\u4e0b\u8f7d\u9002\u7528\u4e8e macOS\uff08Apple Silicon\uff09\u7684 Docker Desktop \u5b89\u88c5\u5305\u3002 \u5b89\u88c5 Docker Desktop \u53cc\u51fb\u4e0b\u8f7d\u7684 .dmg \u6587\u4ef6\uff0c\u6309\u7167\u63d0\u793a\u62d6\u52a8\u5b89\u88c5\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u542f\u52a8 Docker Desktop\uff0c\u5e76\u786e\u4fdd\u5176\u5728\u83dc\u5355\u680f\u8fd0\u884c\u3002 \u9a8c\u8bc1 Docker \u5b89\u88c5 \u6253\u5f00\u7ec8\u7aef\uff0c\u8fd0\u884c\uff1a docker --version docker compose version \u786e\u4fdd\u8f93\u51fa\u7248\u672c\u4fe1\u606f\uff0c\u4f8b\u5982 Docker version 27.x.x \u548c Docker Compose version v2.x.x \u3002 \u542f\u7528 Rosetta\uff08\u53ef\u9009\uff09 \u5982\u679c\u9047\u5230\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u53ef\u5728 Docker Desktop \u8bbe\u7f6e\u4e2d\u542f\u7528 Rosetta \u6a21\u62df\uff1a \u6253\u5f00 Docker Desktop -> Settings -> Features in Development -> \u52fe\u9009 \u201cUse Rosetta for x86/AMD64 emulation on Apple Silicon\u201d\u3002","title":"1. \u5b89\u88c5 Docker Desktop"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#2-docker-compose_1","text":"\u521b\u5efa\u9879\u76ee\u76ee\u5f55 \u5728\u7ec8\u7aef\u4e2d\u521b\u5efa\u5e76\u8fdb\u5165\u76ee\u5f55\uff1a mkdir ~/milvus_redis cd ~/milvus_redis \u521b\u5efa Docker Compose \u6587\u4ef6 \u521b\u5efa\u6587\u4ef6 docker-compose.yml version : '3.5' # M1/ARM64 Mac Version # Redis Password set to: 1234 services : etcd : container_name : milvus-etcd image : quay.io/coreos/etcd:v3.5.5 environment : - ETCD_AUTO_COMPACTION_MODE=revision - ETCD_AUTO_COMPACTION_RETENTION=1000 - ETCD_QUOTA_BACKEND_BYTES=4294967296 - ETCD_ENABLE_V2=true volumes : - ./volumes/etcd:/etcd/data command : etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd/data minio : container_name : milvus-minio image : minio/minio:RELEASE.2023-03-20T20-16-18Z environment : MINIO_ACCESS_KEY : minioadmin MINIO_SECRET_KEY : minioadmin volumes : - ./volumes/minio:/minio/data command : minio server /minio/data healthcheck : test : [ \"CMD\" , \"curl\" , \"-f\" , \"http://localhost:9000/minio/health/live\" ] interval : 30s timeout : 20s retries : 3 standalone : container_name : milvus-standalone # \u4f7f\u7528\u591a\u67b6\u6784\u955c\u50cf\uff0cDocker on M1 \u4f1a\u81ea\u52a8\u62c9\u53d6 ARM64 \u7248\u672c image : milvusdb/milvus:v2.4.4 command : [ \"milvus\" , \"run\" , \"standalone\" ] environment : - ETCD_ENDPOINTS=etcd:2379 - MINIO_ADDRESS=minio:9000 volumes : - ./volumes/milvus:/var/lib/milvus ports : - \"19530:19530\" - \"9091:9091\" depends_on : - \"etcd\" - \"minio\" redis : container_name : milvus-redis image : redis:latest # Redis \u5b98\u65b9\u955c\u50cf\u540c\u6837\u652f\u6301\u591a\u67b6\u6784 restart : always ports : - \"6379:6379\" volumes : - ./volumes/redis:/data # \u8bbe\u7f6e Redis \u5bc6\u7801\u4e3a 1234 command : redis-server --requirepass 1234 networks : default : name : milvus-network \u6ce8\u610f \uff1aMilvus \u548c Redis \u955c\u50cf\u5747\u652f\u6301 ARM64\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\u3002","title":"2. \u914d\u7f6e Docker Compose \u6587\u4ef6"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#3-milvus-redis_1","text":"\u62c9\u53d6\u955c\u50cf\u5e76\u542f\u52a8\u5bb9\u5668 \u5728 ~/milvus_redis \u76ee\u5f55\u4e0b\uff0c\u8fd0\u884c\uff1a docker compose up -d \u9a8c\u8bc1\u5bb9\u5668\u72b6\u6001 \u68c0\u67e5\u5bb9\u5668\u662f\u5426\u8fd0\u884c\uff1a docker ps \u786e\u8ba4 milvus_standalone \u548c redis \u5bb9\u5668\u5747\u5904\u4e8e Up \u72b6\u6001\u3002","title":"3. \u542f\u52a8 Milvus \u548c Redis"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#4-milvus_1","text":"\u5b89\u88c5 Milvus Python SDK \u786e\u4fdd\u5df2\u5b89\u88c5 Python 3.8 \u6216\u4ee5\u4e0a\u7248\u672c\u3002 \u5728\u7ec8\u7aef\u4e2d\u5b89\u88c5\uff1a pip install pymilvus \u6d4b\u8bd5 Milvus \u8fde\u63a5 \u521b\u5efa Python \u811a\u672c\uff08\u4f8b\u5982 test_milvus.py \uff09\uff0c\u5185\u5bb9\u4e0e Windows \u90e8\u5206\u76f8\u540c\uff1a from pymilvus import connections , utility # \u8fde\u63a5\u5230 Milvus connections . connect ( host = \"localhost\" , port = \"19530\" ) # \u68c0\u67e5\u7248\u672c print ( f \"Milvus version: { utility . get_server_version () } \" ) \u8fd0\u884c\u811a\u672c\uff1a python test_milvus.py","title":"4. \u9a8c\u8bc1 Milvus \u670d\u52a1"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#5-redis_1","text":"\u5b89\u88c5 Redis Python \u5ba2\u6237\u7aef \u5728\u7ec8\u7aef\u4e2d\u5b89\u88c5\uff1a pip install redis \u6d4b\u8bd5 Redis \u8fde\u63a5 \u521b\u5efa Python \u811a\u672c\uff08\u4f8b\u5982 test_redis.py \uff09\uff0c\u5185\u5bb9\u4e0e Windows \u90e8\u5206\u76f8\u540c\uff1a import redis # \u8fde\u63a5\u5230 Redis client = redis . Redis ( host = \"localhost\" , port = 6379 , decode_responses = True ) # \u6d4b\u8bd5\u8bfb\u5199 client . set ( \"test_key\" , \"Hello, Redis!\" ) value = client . get ( \"test_key\" ) print ( f \"Redis value: { value } \" ) \u8fd0\u884c\u811a\u672c\uff1a python test_redis.py","title":"5. \u9a8c\u8bc1 Redis \u670d\u52a1"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#6_1","text":"\u505c\u6b62\u670d\u52a1 docker compose down \u6e05\u7406\u6570\u636e \uff08\u53ef\u9009\uff09\uff1a \u5220\u9664 milvus \u548c redis \u76ee\u5f55\uff1a rm -rf ~/milvus_redis/volumes/milvus rm -rf ~//milvus_redis/volumes/redis","title":"6. \u505c\u6b62\u548c\u6e05\u7406"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_2","text":"\u7aef\u53e3\u51b2\u7a81 \u5982\u679c 19530 \u3001 9091 \u6216 6379 \u7aef\u53e3\u88ab\u5360\u7528\uff0c\u4fee\u6539 docker-compose.yml \u4e2d\u7684\u7aef\u53e3\u6620\u5c04\uff08\u4f8b\u5982 19531:19530 \uff09\uff0c\u5e76\u5728\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\u4f7f\u7528\u65b0\u7aef\u53e3\u3002 \u955c\u50cf\u62c9\u53d6\u5931\u8d25 \u786e\u4fdd\u7f51\u7edc\u8fde\u63a5\u6b63\u5e38\uff0c\u6216\u5c1d\u8bd5\u624b\u52a8\u62c9\u53d6\u955c\u50cf\uff1a docker pull milvusdb/milvus:v2.4.10 docker pull redis:7.2 M1 \u82af\u7247\u517c\u5bb9\u6027\u95ee\u9898 \u5982\u679c\u955c\u50cf\u8fd0\u884c\u5931\u8d25\uff0c\u68c0\u67e5 Docker Desktop \u662f\u5426\u542f\u7528\u4e86 Rosetta \u6a21\u62df\u3002 \u8fde\u63a5\u5931\u8d25 \u786e\u4fdd\u5bb9\u5668\u8fd0\u884c\u6b63\u5e38\uff0c\u68c0\u67e5\u9632\u706b\u5899\uff08Windows\uff09\u6216\u7f51\u7edc\u8bbe\u7f6e\uff08macOS\uff09\u662f\u5426\u963b\u6b62\u4e86\u7aef\u53e3\u3002 Redis \u6570\u636e\u672a\u6301\u4e45\u5316 \u786e\u4fdd docker-compose.yml \u4e2d\u542f\u7528\u4e86 --appendonly yes \uff0c\u4e14 ./redis_data \u76ee\u5f55\u6709\u5199\u6743\u9650\u3002","title":"\u5e38\u89c1\u95ee\u9898\u4e0e\u89e3\u51b3\u65b9\u6cd5"},{"location":"%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%B7%A5%E5%85%B7/Milvus%E5%92%8CRedis%E7%9A%84%E5%AE%89%E8%A3%85%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_3","text":"Milvus \u5b98\u65b9\u6587\u6863 Redis \u5b98\u65b9\u6587\u6863 Docker Desktop \u6587\u6863 Milvus Docker \u955c\u50cf Redis Docker \u955c\u50cf","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html","text":"RAG\u7cfb\u7edf\u8bc4\u4f30 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u4e86\u89e3RAG\u7cfb\u7edf\u8bc4\u4f30\u7684\u6307\u6807 \u638c\u63e1RAGAS\u6846\u67b6\u7684\u539f\u7406\u548c\u4f7f\u7528\u65b9\u5f0f 1 \u6982\u8ff0 \u00b6 \u5f53\u6211\u4eec\u4e3a\u67d0\u4e2a\u771f\u5b9e\u7ebf\u4e0a\u7cfb\u7edf\u5f00\u53d1\u4e86\u68c0\u7d22\u589e\u5f3a\u751f\u6210 (RAG) \u5e94\u7528\uff0c\u90a3\u4e48\u5728\u6b64\u5e94\u7528\u6b63\u5f0f\u4e0a\u7ebf\u63d0\u4f9b\u670d\u52a1\u524d\uff0c\u6211\u4eec\u9700\u8981\u8bc4\u4f30 RAG \u7684\u8868\u73b0\u5230\u5e95\u662f\u600e\u6837\u7684\u3002\u5982\u679c\u53d1\u73b0\u73b0\u6709\u7684 RAG \u6548\u679c\u4e0d\u591f\u7406\u60f3\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65b0\u7684 RAG \u7b97\u6cd5\u6d41\u7a0b\u6765\u6539\u8fdb\u3002\u5728\u8fd9\u4e4b\u524d\uff0c\u5c31\u9700\u8981\u5bf9 RAG \u6d41\u7a0b\u8fdb\u884c\u8bc4\u4f30\uff0c\u5f97\u5230\u8bc4\u4f30\u6307\u6807\uff0c\u7136\u540e\u624d\u80fd\u8fdb\u884c\u81ea\u52a8\u5316\u5bf9\u6bd4\uff0c\u89c2\u5bdf\u6539\u8fdb\u7684\u6d41\u7a0b\u662f\u5426\u771f\u7684\u6709\u6548\u3002 2 RAGAS\u8bc4\u4f30\u6846\u67b6 \u00b6 RAGAS (Retrieval Augmented Generation Assessment) \u6211\u4eec\u4e00\u822c\u79f0\u4e3a Automated Evaluation of Retrieval Augmented Generation\uff0c\u5373\u68c0\u7d22\u589e\u5f3a\u751f\u6210\u7684\u81ea\u52a8\u8bc4\u4f30\u3002Ragas\u662f\u4e00\u4e2a\u5927\u6a21\u578b\u8bc4\u6d4b\u6846\u67b6\uff0c\u53ef\u4ee5\u8bc4\u4f30\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff08RAG\uff09\u7684\u6548\u679c\uff0c\u5e2e\u52a9\u5206\u6790\u6a21\u578b\u7684\u8f93\u51fa\uff0c\u4e86\u89e3\u6a21\u578b\u5728\u7ed9\u5b9a\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u3002Github\u5730\u5740: https://github.com/explodinggradients/ragas RAGAS\u7684\u8bc4\u4f30\u4e3b\u8981\u57fa\u4e8e\u4e24\u4e2a\u65b9\u5411\uff1a\u68c0\u7d22\u90e8\u5206\u548c\u751f\u6210\u90e8\u5206\uff0c\u90a3\u4e48\u9488\u5bf9\u4e0d\u540c\u7684\u90e8\u5206\u8bc4\u4f30\u7684\u6307\u6807\u4e5f\u4f1a\u6709\u6240\u533a\u5206\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5206\u522b\u4ecb\u7ecdRAGAS\u8bc4\u4f30\u6846\u67b6\u6240\u9700\u7684\u6570\u636e\uff0c\u8bc4\u4f30\u6307\u6807\uff0c\u5b9e\u9645\u7528\u4f8b\u7b49\u3002 2.1 \u6570\u636e\u8bf4\u660e \u00b6 \u6700\u5f00\u59cb\u7684 RAGAs \u5728\u8bc4\u4f30\u6570\u636e\u96c6\u65f6\uff0c\u4e0d\u5fc5\u4f9d\u8d56\u4eba\u5de5\u6807\u6ce8\u7684\u6807\u51c6\u7b54\u6848\uff0c\u800c\u662f\u901a\u8fc7\u5e95\u5c42\u7684\u5927\u8bed\u8a00\u6a21\u578b (LLM) \u6765\u8fdb\u884c\u8bc4\u4f30\u3002\u6240\u4ee5\u53ea\u9700\u8981\u4e00\u4e2a\u5e26\u6709\u95ee\u9898-\u7b54\u6848\u5bf9\u7684\u8bc4\u4f30\u6570\u636e\u96c6\uff08QA \u5bf9\uff09\uff0c\u5982\uff1a https://huggingface.co/datasets/m-ric/huggingface_doc \u5177\u4f53\u5b57\u6bb5\uff1a question\uff1a\u4f5c\u4e3a RAG \u7ba1\u9053\u8f93\u5165\u7684\u7528\u6237\u67e5\u8be2\uff0c\u8f93\u5165\u3002 answer\uff1a\u4ece RAG \u7ba1\u9053\u751f\u6210\u7684\u7b54\u6848\uff0c\u8f93\u51fa\u3002 contexts\uff1a\u4ece\u7528\u4e8e\u56de\u7b54question\u5916\u90e8\u77e5\u8bc6\u6e90\u4e2d\u68c0\u7d22\u7684\u4e0a\u4e0b\u6587\u3002 ground_truths\uff1aquestion\u7684\u57fa\u672c\u4e8b\u5b9e\u7b54\u6848\u3002\u8fd9\u662f\u552f\u4e00\u4eba\u5de5\u6ce8\u91ca\u7684\u4fe1\u606f\u3002 2.2 \u8bc4\u4f30\u6307\u6807 \u00b6 **\u8bc4\u4f30\u68c0\u7d22\uff08context\uff09**\u7684\u6307\u6807\uff1a\u63d0\u4f9b\u4e86\u4e0a\u4e0b\u6587\u76f8\u5173\u6027\uff08context_relevancy\uff09\u548c\u4e0a\u4e0b\u6587\u53ec\u56de\u7387\uff08context_recall\uff09\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u8861\u91cf\u4f60\u7684\u68c0\u7d22\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u5373\u68c0\u7d22\u7684\u6bb5\u843d\u662f\u5426\u76f8\u5173\u3002 **\u8bc4\u4f30\u751f\u6210\uff08answer\uff09**\u7684\u6307\u6807\uff1a\u63d0\u4f9b\u4e86\u5fe0\u5b9e\u5ea6\uff08faithfulness\uff09\uff0c\u7528\u4ee5\u8861\u91cf\u751f\u6210\u7684\u4fe1\u606f\u662f\u5426\u51c6\u786e\u65e0\u8bef\uff1b\u4ee5\u53ca\u7b54\u6848\u76f8\u5173\u6027\uff08answer_relevancy\uff09\uff0c\u7528\u4ee5\u8861\u91cf\u7b54\u6848\u5bf9\u95ee\u9898\u7684\u5207\u9898\u7a0b\u5ea6\uff0c\u5373\u6a21\u578b\u751f\u6210\u7684\u7b54\u6848\u662f\u5426\u6070\u5f53\u3002 2.2. 1 \u4e0a\u4e0b\u6587\u76f8\u5173\u6027 (context relevance) \u00b6 \u4f5c\u7528\uff1a\u6307\u7684\u662f\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u5e94\u8be5\u53ea\u5305\u542b\u56de\u7b54\u95ee\u9898\u6240\u9700\u7684\u4fe1\u606f\uff0c\u8fd9\u4e2a\u6307\u6807\u65e8\u5728\u60e9\u7f5a\u5305\u542b\u5197\u4f59\u4fe1\u606f\u7684\u60c5\u51b5\u3002 \u6bd4\u7387\u8d8a\u9ad8\uff0c\u8868\u793a\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u4e0e\u95ee\u9898\u7684\u76f8\u5173\u6027\u8d8a\u5f3a\u3002 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e3a\u4e86\u4f30\u7b97\u4e0a\u4e0b\u6587\u7684\u76f8\u5173\u6027\uff0c\u6211\u4eec\u7528 LLM \u4ece\u4e0a\u4e0b\u6587 C(q) \u4e2d\u62bd\u53d6\u5bf9\u56de\u7b54\u95ee\u9898 q \u81f3\u5173\u91cd\u8981\u7684\u53e5\u5b50 S\u3002\u63d0\u53d6\u7684prompt\u5982\u4e0b\uff1a \u8bf7\u4ece\u63d0\u4f9b\u7684{\u4e0a\u4e0b\u6587}\u4e2d\u63d0\u53d6\u53ef\u80fd\u6709\u52a9\u4e8e\u56de\u7b54\u4ee5\u4e0b{\u95ee\u9898}\u7684\u76f8\u5173\u53e5\u5b50\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\u76f8\u5173\u53e5\u5b50\uff0c\u6216\u8005\u4f60\u8ba4\u4e3a\u95ee\u9898\u65e0\u6cd5\u4ece\u7ed9\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u5f97\u5230\u56de\u7b54\uff0c \u5219\u8fd4\u56de\u77ed\u8bed\u201c\u4fe1\u606f\u4e0d\u8db3\u201d\u3002 \u5728\u63d0\u53d6\u5019\u9009\u53e5\u5b50\u65f6\uff0c\u4f60\u4e0d\u5f97\u66f4\u6539\u7ed9\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u7684\u53e5\u5b50\u3002 \u7136\u540e\uff0c\u5728RAGAS\u4e2d\uff0c\u901a\u8fc7\u4e0b\u9762\u7684\u516c\u5f0f\u8ba1\u7b97\u76f8\u5173\u6027\uff1a 2.2.2 \u4e0a\u4e0b\u6587\u53ec\u56de\u7387 (context recall) \u00b6 \u4f5c\u7528\uff1a\u8861\u91cf\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587(contexts)\u4e0e\u771f\u5b9e\u7b54\u6848\uff08ground_truths\uff09\u7684\u5339\u914d\u7a0b\u5ea6\u3002 \u8be5\u6307\u6807\u901a\u8fc7\u95ee\u9898\u3001\u6807\u6ce8\u7b54\u6848\u548c\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u8ba1\u7b97\uff0c\u5206\u6570\u8303\u56f4\u57280\u52301\u4e4b\u95f4\uff0c\u5f97\u5206\u8d8a\u9ad8\u8868\u793a\u6027\u80fd\u66f4\u597d\u3002 \u8981\u4ece\u771f\u5b9e\u7b54\u6848\u4e2d\u4f30\u8ba1\u4e0a\u4e0b\u6587\u53ec\u56de\u7387\uff0c\u9700\u8981\u5206\u6790\u771f\u5b9e\u7b54\u6848\u4e2d\u7684\u6bcf\u4e2a\u58f0\u660e\uff08claim\uff09\uff0c\u4ee5\u786e\u5b9a\u5b83\u662f\u5426\u53ef\u4ee5\u5f52\u56e0\u4e8e\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u771f\u5b9e\u7b54\u6848\u4e2d\u7684\u6240\u6709\u58f0\u660e\u90fd\u5e94\u53ef\u5f52\u56e0\u4e8e\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u3002 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u5047\u8bbe\u771f\u5b9e\u7b54\u6848\uff08Reference Answer\uff09\u4e3a\uff1a \u771f\u5b9e\u7b54\u6848\uff1a \u201c2010\u5e74\u4e16\u754c\u676f\u7684\u51a0\u519b\u662f\u897f\u73ed\u7259\u3002\u201d \u201c\u897f\u73ed\u7259\u5728\u51b3\u8d5b\u4e2d\u4ee51-0\u51fb\u8d25\u4e86\u8377\u5170\u3002\u201d RAG\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\uff08Retrieved Context\uff09\u4e3a\uff1a \u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\uff1a \u201c\u897f\u73ed\u7259\u57282010\u5e74\u4e16\u754c\u676f\u7684\u51b3\u8d5b\u4e2d\u51fb\u8d25\u4e86\u8377\u5170\u3002\u201d \u201c2010\u5e74\u4e16\u754c\u676f\u7684\u51a0\u519b\u662f\u897f\u73ed\u7259\uff0c\u897f\u73ed\u7259\u961f\u9996\u6b21\u8d62\u5f97\u4e16\u754c\u676f\u3002\u201d \u6b65\u9aa4\u5177\u4f53\u5b9e\u65bd\uff1a \u58f0\u660e1\uff1a \"2010\u5e74\u4e16\u754c\u676f\u7684\u51a0\u519b\u662f\u897f\u73ed\u7259\u3002\" \u8f93\u5165\u7ed9GPT-3.5\uff1a\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587 + \u58f0\u660e1\u3002 GPT-3.5\u68c0\u67e5\u4e0a\u4e0b\u6587\u662f\u5426\u5305\u542b\u201c2010\u5e74\u4e16\u754c\u676f\u7684\u51a0\u519b\u662f\u897f\u73ed\u7259\u201d\u3002 \u7ed3\u679c\uff1aGPT-3.5\u53d1\u73b0\u4e0a\u4e0b\u6587\u5305\u542b\u8be5\u4fe1\u606f\uff0c\u56e0\u6b64\u8be5\u58f0\u660e\u201c\u53ec\u56de\u201d\u3002 \u58f0\u660e2\uff1a \"\u897f\u73ed\u7259\u5728\u51b3\u8d5b\u4e2d\u4ee51-0\u51fb\u8d25\u4e86\u8377\u5170\u3002\" \u8f93\u5165\u7ed9GPT-3.5\uff1a\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587 + \u58f0\u660e2\u3002 GPT-3.5\u68c0\u67e5\u4e0a\u4e0b\u6587\u662f\u5426\u5305\u542b\u201c\u897f\u73ed\u7259\u5728\u51b3\u8d5b\u4e2d\u4ee51-0\u51fb\u8d25\u4e86\u8377\u5170\u201d\u3002 \u7ed3\u679c\uff1aGPT-3.5\u786e\u8ba4\u4e0a\u4e0b\u6587\u4e2d\u63d0\u5230\u897f\u73ed\u7259\u51fb\u8d25\u4e86\u8377\u5170\uff0c\u4f46\u672a\u63d0\u5230\u5177\u4f53\u7684\u6bd4\u52061-0\uff0c\u56e0\u6b64\u8be5\u58f0\u660e\u201c\u672a\u53ec\u56de\u201d\u3002 \u8ba1\u7b97\u53ec\u56de\u7387\uff1a \u603b\u58f0\u660e\u6570\uff1a2\uff08\u58f0\u660e1\u548c\u58f0\u660e2\uff09\u3002 \u88ab\u53ec\u56de\u7684\u58f0\u660e\u6570\uff1a1\uff08\u58f0\u660e1\u88ab\u53ec\u56de\uff0c\u58f0\u660e2\u672a\u53ec\u56de\uff09\u3002 Context Recall = 0.5 \u516c\u5f0f\uff1a \u5206\u5b50\uff1aGT claims that can be attributed to context\uff0c\u8868\u793a\u5728\u771f\u5b9e\u7b54\u6848\uff08GT\uff09\u4e2d\u7684\u8bba\u65ad\u4e2d\uff0c\u6709\u591a\u5c11\u662f\u53ef\u4ee5\u5f52\u56e0\u4e8e\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e9b\u8bba\u65ad\u5728\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u4e2d\u627e\u5230\u4e86\u652f\u6301\u6216\u4f9d\u636e\u3002 \u5206\u6bcd\uff1aNumber of claims in GT \u8868\u793a\u771f\u5b9e\u7b54\u6848\u4e2d\u8bba\u65ad\u7684\u603b\u6570\u91cf\u3002 2.2.3 \u5fe0\u5b9e\u5ea6\uff08faithfulness\uff09 \u00b6 \u4f5c\u7528\uff1a\u6307\u7b54\u6848\u786e\u5b9e\u662f\u6839\u636e\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\u5f97\u5230\u7684\u3002\u8fd9\u5bf9\u4e8e\u907f\u514d\u9519\u89c9\u5e76\u786e\u4fdd\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u53ef\u4ee5\u7528\u4f5c\u751f\u6210\u7b54\u6848\u7684\u4f9d\u636e\u975e\u5e38\u91cd\u8981\u3002 \u5982\u679c\u5206\u6570\u4f4e\uff0c\u5b83\u8868\u660e LLM \u7684\u56de\u5e94\u6ca1\u6709\u9075\u5faa\u68c0\u7d22\u5230\u7684\u77e5\u8bc6\uff0c\u63d0\u4f9b\u5e7b\u89c9\u5f0f\u7b54\u6848\u7684\u53ef\u80fd\u6027\u589e\u52a0\u3002 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e3a\u4e86\u4f30\u8ba1\u5fe0\u5b9e\u5ea6\uff0c\u6211\u4eec\u9996\u5148\u4f7f\u7528 LLM \u63d0\u53d6\u4e00\u7ec4\u9648\u8ff0\uff0cS(a(q))\u3002\u65b9\u6cd5\u662f\u4f7f\u7528\u4ee5\u4e0b\u63d0\u793a\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u95ee\u9898\u548c\u7b54\u6848\uff0c\u4ece\u7ed9\u5b9a\u7b54\u6848\u7684\u6bcf\u4e2a\u53e5\u5b50\u4e2d\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u9648\u8ff0\u3002 \u95ee\u9898\uff1a[\u95ee\u9898] \u7b54\u6848\uff1a[\u7b54\u6848] \u751f\u6210 S(a(q)) \u540e\uff0cLLM \u5224\u65ad\u6bcf\u4e2a\u9648\u8ff0 si \u662f\u5426\u53ef\u4ee5\u4ece c(q) \u4e2d\u63a8\u65ad\u51fa\u6765\u3002\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u4f7f\u7528\u4ee5\u4e0b\u63d0\u793a\u8fdb\u884c\uff1a \u8003\u8651\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\u548c\u4ee5\u4e0b\u9648\u8ff0\uff0c\u7136\u540e\u786e\u5b9a\u5b83\u4eec\u662f\u5426\u7531\u4e0a\u4e0b\u6587\u4e2d\u7684\u4fe1\u606f\u652f\u6301\u3002\u5728\u5f97\u51fa\u7ed3\u8bba\uff08\u662f/\u5426\uff09\u4e4b\u524d\uff0c\u4e3a\u6bcf\u4e2a\u9648\u8ff0\u63d0\u4f9b\u7b80\u8981\u89e3\u91ca\u3002\u5728\u6700\u540e\u4ee5\u7ed9\u5b9a\u683c\u5f0f\u4e3a\u6bcf\u4e2a\u9648\u8ff0\u63d0\u4f9b\u6700\u7ec8\u7ed3\u8bba\u3002\u4e0d\u8981\u504f\u79bb\u6307\u5b9a\u7684\u683c\u5f0f\u3002 \u9648\u8ff0\uff1a[\u9648\u8ff0 1] ... \u9648\u8ff0\uff1a[\u9648\u8ff0 n] \u6700\u7ec8\u7684\u5fe0\u5b9e\u5ea6\u5206\u6570\uff0cF\uff0c\u8ba1\u7b97\u4e3a F=|V|/|S|\uff0c\u5176\u4e2d |V| \u8868\u793a LLM \u652f\u6301\u7684\u9648\u8ff0\u6570\u91cf\uff0c|S| \u8868\u793a\u9648\u8ff0\u7684\u603b\u6570\u3002 2.2.4 \u7b54\u6848\u76f8\u5173\u6027\uff08answer relevancy\uff09 \u00b6 \u4f5c\u7528\uff1a\u751f\u6210\u7684\u7b54\u6848\u4e0e\u67e5\u8be2\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u5206\u6570\u8d8a\u9ad8\uff0c\u76f8\u5173\u6027\u8d8a\u597d\u3002 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e3a\u4e86\u4f30\u8ba1\u7b54\u6848\u7684\u76f8\u5173\u6027\uff0c\u6211\u4eec\u63d0\u793a LLM \u6839\u636e\u7ed9\u5b9a\u7684\u7b54\u6848\u751f\u6210 n \u4e2a\u6f5c\u5728\u95ee\u9898 qi\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u4e3a\u7ed9\u5b9a\u7b54\u6848\u751f\u6210\u4e00\u4e2a\u95ee\u9898\u3002 \u7b54\u6848\uff1a[\u7b54\u6848] \u5177\u4f53\u6b65\u9aa4\uff1a \u5bf9\u7ed9\u5b9a\u7b54\u6848\uff0c\u63d0\u793a\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u751f\u6210\u57fa\u4e8e\u8be5\u7b54\u6848\u53ef\u80fd\u7684 n\u4e2a\u95ee\u9898 qi\u3002 \u4f7f\u7528embedding\u6a21\u578b\u83b7\u53d6\u6240\u6709\u95ee\u9898\u7684\u5d4c\u5165\u8868\u793a\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u751f\u6210\u7684\u95ee\u9898 qi \uff0c\u8ba1\u7b97\u5b83\u4e0e\u539f\u59cb\u95ee\u9898 q \u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6 sim(q,qi)\u3002\u8fd9\u91cc\u7684\u76f8\u4f3c\u5ea6\u662f\u901a\u8fc7\u8ba1\u7b97\u5bf9\u5e94\u5d4c\u5165\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6765\u5f97\u5230\u7684\u3002 \u7b54\u6848\u76f8\u5173\u6027\u5f97\u5206\uff08\u5e73\u5747\u76f8\u4f3c\u5ea6\uff09 A*R* \u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a \u7528\u516c\u5f0f\u8868\u8fbe\u5982\u4e0b: 3 \u672c\u8282\u5c0f\u7ed3 \u00b6 \u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86RAG\u7cfb\u7edf\u5982\u4f55\u5b9e\u73b0\u8bc4\u4f30\u7684\u65b9\u5f0f\uff0c\u91cd\u70b9\u5206\u6790\u4e86RAGAS\u7cfb\u7edf\u4e2d\uff1a\u4e0a\u4e0b\u6587\u76f8\u5173\u6027\u3001\u4e0a\u4e0b\u6587\u53ec\u56de\u7387\u3001\u5fe0\u5b9e\u5ea6\u4ee5\u53ca\u7b54\u6848\u76f8\u5173\u6027\u7684\u76f8\u5173\u6307\u6807\u3002","title":"5.1 RAG\u7cfb\u7edf\u8bc4\u4f30\u5de5\u5177"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#rag","text":"","title":"RAG\u7cfb\u7edf\u8bc4\u4f30"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#_1","text":"\u4e86\u89e3RAG\u7cfb\u7edf\u8bc4\u4f30\u7684\u6307\u6807 \u638c\u63e1RAGAS\u6846\u67b6\u7684\u539f\u7406\u548c\u4f7f\u7528\u65b9\u5f0f","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#1","text":"\u5f53\u6211\u4eec\u4e3a\u67d0\u4e2a\u771f\u5b9e\u7ebf\u4e0a\u7cfb\u7edf\u5f00\u53d1\u4e86\u68c0\u7d22\u589e\u5f3a\u751f\u6210 (RAG) \u5e94\u7528\uff0c\u90a3\u4e48\u5728\u6b64\u5e94\u7528\u6b63\u5f0f\u4e0a\u7ebf\u63d0\u4f9b\u670d\u52a1\u524d\uff0c\u6211\u4eec\u9700\u8981\u8bc4\u4f30 RAG \u7684\u8868\u73b0\u5230\u5e95\u662f\u600e\u6837\u7684\u3002\u5982\u679c\u53d1\u73b0\u73b0\u6709\u7684 RAG \u6548\u679c\u4e0d\u591f\u7406\u60f3\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65b0\u7684 RAG \u7b97\u6cd5\u6d41\u7a0b\u6765\u6539\u8fdb\u3002\u5728\u8fd9\u4e4b\u524d\uff0c\u5c31\u9700\u8981\u5bf9 RAG \u6d41\u7a0b\u8fdb\u884c\u8bc4\u4f30\uff0c\u5f97\u5230\u8bc4\u4f30\u6307\u6807\uff0c\u7136\u540e\u624d\u80fd\u8fdb\u884c\u81ea\u52a8\u5316\u5bf9\u6bd4\uff0c\u89c2\u5bdf\u6539\u8fdb\u7684\u6d41\u7a0b\u662f\u5426\u771f\u7684\u6709\u6548\u3002","title":"1 \u6982\u8ff0"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#2-ragas","text":"RAGAS (Retrieval Augmented Generation Assessment) \u6211\u4eec\u4e00\u822c\u79f0\u4e3a Automated Evaluation of Retrieval Augmented Generation\uff0c\u5373\u68c0\u7d22\u589e\u5f3a\u751f\u6210\u7684\u81ea\u52a8\u8bc4\u4f30\u3002Ragas\u662f\u4e00\u4e2a\u5927\u6a21\u578b\u8bc4\u6d4b\u6846\u67b6\uff0c\u53ef\u4ee5\u8bc4\u4f30\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff08RAG\uff09\u7684\u6548\u679c\uff0c\u5e2e\u52a9\u5206\u6790\u6a21\u578b\u7684\u8f93\u51fa\uff0c\u4e86\u89e3\u6a21\u578b\u5728\u7ed9\u5b9a\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u3002Github\u5730\u5740: https://github.com/explodinggradients/ragas RAGAS\u7684\u8bc4\u4f30\u4e3b\u8981\u57fa\u4e8e\u4e24\u4e2a\u65b9\u5411\uff1a\u68c0\u7d22\u90e8\u5206\u548c\u751f\u6210\u90e8\u5206\uff0c\u90a3\u4e48\u9488\u5bf9\u4e0d\u540c\u7684\u90e8\u5206\u8bc4\u4f30\u7684\u6307\u6807\u4e5f\u4f1a\u6709\u6240\u533a\u5206\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5206\u522b\u4ecb\u7ecdRAGAS\u8bc4\u4f30\u6846\u67b6\u6240\u9700\u7684\u6570\u636e\uff0c\u8bc4\u4f30\u6307\u6807\uff0c\u5b9e\u9645\u7528\u4f8b\u7b49\u3002","title":"2 RAGAS\u8bc4\u4f30\u6846\u67b6"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#21","text":"\u6700\u5f00\u59cb\u7684 RAGAs \u5728\u8bc4\u4f30\u6570\u636e\u96c6\u65f6\uff0c\u4e0d\u5fc5\u4f9d\u8d56\u4eba\u5de5\u6807\u6ce8\u7684\u6807\u51c6\u7b54\u6848\uff0c\u800c\u662f\u901a\u8fc7\u5e95\u5c42\u7684\u5927\u8bed\u8a00\u6a21\u578b (LLM) \u6765\u8fdb\u884c\u8bc4\u4f30\u3002\u6240\u4ee5\u53ea\u9700\u8981\u4e00\u4e2a\u5e26\u6709\u95ee\u9898-\u7b54\u6848\u5bf9\u7684\u8bc4\u4f30\u6570\u636e\u96c6\uff08QA \u5bf9\uff09\uff0c\u5982\uff1a https://huggingface.co/datasets/m-ric/huggingface_doc \u5177\u4f53\u5b57\u6bb5\uff1a question\uff1a\u4f5c\u4e3a RAG \u7ba1\u9053\u8f93\u5165\u7684\u7528\u6237\u67e5\u8be2\uff0c\u8f93\u5165\u3002 answer\uff1a\u4ece RAG \u7ba1\u9053\u751f\u6210\u7684\u7b54\u6848\uff0c\u8f93\u51fa\u3002 contexts\uff1a\u4ece\u7528\u4e8e\u56de\u7b54question\u5916\u90e8\u77e5\u8bc6\u6e90\u4e2d\u68c0\u7d22\u7684\u4e0a\u4e0b\u6587\u3002 ground_truths\uff1aquestion\u7684\u57fa\u672c\u4e8b\u5b9e\u7b54\u6848\u3002\u8fd9\u662f\u552f\u4e00\u4eba\u5de5\u6ce8\u91ca\u7684\u4fe1\u606f\u3002","title":"2.1 \u6570\u636e\u8bf4\u660e"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#22","text":"**\u8bc4\u4f30\u68c0\u7d22\uff08context\uff09**\u7684\u6307\u6807\uff1a\u63d0\u4f9b\u4e86\u4e0a\u4e0b\u6587\u76f8\u5173\u6027\uff08context_relevancy\uff09\u548c\u4e0a\u4e0b\u6587\u53ec\u56de\u7387\uff08context_recall\uff09\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u8861\u91cf\u4f60\u7684\u68c0\u7d22\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u5373\u68c0\u7d22\u7684\u6bb5\u843d\u662f\u5426\u76f8\u5173\u3002 **\u8bc4\u4f30\u751f\u6210\uff08answer\uff09**\u7684\u6307\u6807\uff1a\u63d0\u4f9b\u4e86\u5fe0\u5b9e\u5ea6\uff08faithfulness\uff09\uff0c\u7528\u4ee5\u8861\u91cf\u751f\u6210\u7684\u4fe1\u606f\u662f\u5426\u51c6\u786e\u65e0\u8bef\uff1b\u4ee5\u53ca\u7b54\u6848\u76f8\u5173\u6027\uff08answer_relevancy\uff09\uff0c\u7528\u4ee5\u8861\u91cf\u7b54\u6848\u5bf9\u95ee\u9898\u7684\u5207\u9898\u7a0b\u5ea6\uff0c\u5373\u6a21\u578b\u751f\u6210\u7684\u7b54\u6848\u662f\u5426\u6070\u5f53\u3002","title":"2.2 \u8bc4\u4f30\u6307\u6807"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#22-1-context-relevance","text":"\u4f5c\u7528\uff1a\u6307\u7684\u662f\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u5e94\u8be5\u53ea\u5305\u542b\u56de\u7b54\u95ee\u9898\u6240\u9700\u7684\u4fe1\u606f\uff0c\u8fd9\u4e2a\u6307\u6807\u65e8\u5728\u60e9\u7f5a\u5305\u542b\u5197\u4f59\u4fe1\u606f\u7684\u60c5\u51b5\u3002 \u6bd4\u7387\u8d8a\u9ad8\uff0c\u8868\u793a\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u4e0e\u95ee\u9898\u7684\u76f8\u5173\u6027\u8d8a\u5f3a\u3002 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e3a\u4e86\u4f30\u7b97\u4e0a\u4e0b\u6587\u7684\u76f8\u5173\u6027\uff0c\u6211\u4eec\u7528 LLM \u4ece\u4e0a\u4e0b\u6587 C(q) \u4e2d\u62bd\u53d6\u5bf9\u56de\u7b54\u95ee\u9898 q \u81f3\u5173\u91cd\u8981\u7684\u53e5\u5b50 S\u3002\u63d0\u53d6\u7684prompt\u5982\u4e0b\uff1a \u8bf7\u4ece\u63d0\u4f9b\u7684{\u4e0a\u4e0b\u6587}\u4e2d\u63d0\u53d6\u53ef\u80fd\u6709\u52a9\u4e8e\u56de\u7b54\u4ee5\u4e0b{\u95ee\u9898}\u7684\u76f8\u5173\u53e5\u5b50\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\u76f8\u5173\u53e5\u5b50\uff0c\u6216\u8005\u4f60\u8ba4\u4e3a\u95ee\u9898\u65e0\u6cd5\u4ece\u7ed9\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u5f97\u5230\u56de\u7b54\uff0c \u5219\u8fd4\u56de\u77ed\u8bed\u201c\u4fe1\u606f\u4e0d\u8db3\u201d\u3002 \u5728\u63d0\u53d6\u5019\u9009\u53e5\u5b50\u65f6\uff0c\u4f60\u4e0d\u5f97\u66f4\u6539\u7ed9\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u7684\u53e5\u5b50\u3002 \u7136\u540e\uff0c\u5728RAGAS\u4e2d\uff0c\u901a\u8fc7\u4e0b\u9762\u7684\u516c\u5f0f\u8ba1\u7b97\u76f8\u5173\u6027\uff1a","title":"2.2. 1 \u4e0a\u4e0b\u6587\u76f8\u5173\u6027 (context relevance)"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#222-context-recall","text":"\u4f5c\u7528\uff1a\u8861\u91cf\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587(contexts)\u4e0e\u771f\u5b9e\u7b54\u6848\uff08ground_truths\uff09\u7684\u5339\u914d\u7a0b\u5ea6\u3002 \u8be5\u6307\u6807\u901a\u8fc7\u95ee\u9898\u3001\u6807\u6ce8\u7b54\u6848\u548c\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u8ba1\u7b97\uff0c\u5206\u6570\u8303\u56f4\u57280\u52301\u4e4b\u95f4\uff0c\u5f97\u5206\u8d8a\u9ad8\u8868\u793a\u6027\u80fd\u66f4\u597d\u3002 \u8981\u4ece\u771f\u5b9e\u7b54\u6848\u4e2d\u4f30\u8ba1\u4e0a\u4e0b\u6587\u53ec\u56de\u7387\uff0c\u9700\u8981\u5206\u6790\u771f\u5b9e\u7b54\u6848\u4e2d\u7684\u6bcf\u4e2a\u58f0\u660e\uff08claim\uff09\uff0c\u4ee5\u786e\u5b9a\u5b83\u662f\u5426\u53ef\u4ee5\u5f52\u56e0\u4e8e\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u771f\u5b9e\u7b54\u6848\u4e2d\u7684\u6240\u6709\u58f0\u660e\u90fd\u5e94\u53ef\u5f52\u56e0\u4e8e\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u3002 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u5047\u8bbe\u771f\u5b9e\u7b54\u6848\uff08Reference Answer\uff09\u4e3a\uff1a \u771f\u5b9e\u7b54\u6848\uff1a \u201c2010\u5e74\u4e16\u754c\u676f\u7684\u51a0\u519b\u662f\u897f\u73ed\u7259\u3002\u201d \u201c\u897f\u73ed\u7259\u5728\u51b3\u8d5b\u4e2d\u4ee51-0\u51fb\u8d25\u4e86\u8377\u5170\u3002\u201d RAG\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\uff08Retrieved Context\uff09\u4e3a\uff1a \u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\uff1a \u201c\u897f\u73ed\u7259\u57282010\u5e74\u4e16\u754c\u676f\u7684\u51b3\u8d5b\u4e2d\u51fb\u8d25\u4e86\u8377\u5170\u3002\u201d \u201c2010\u5e74\u4e16\u754c\u676f\u7684\u51a0\u519b\u662f\u897f\u73ed\u7259\uff0c\u897f\u73ed\u7259\u961f\u9996\u6b21\u8d62\u5f97\u4e16\u754c\u676f\u3002\u201d \u6b65\u9aa4\u5177\u4f53\u5b9e\u65bd\uff1a \u58f0\u660e1\uff1a \"2010\u5e74\u4e16\u754c\u676f\u7684\u51a0\u519b\u662f\u897f\u73ed\u7259\u3002\" \u8f93\u5165\u7ed9GPT-3.5\uff1a\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587 + \u58f0\u660e1\u3002 GPT-3.5\u68c0\u67e5\u4e0a\u4e0b\u6587\u662f\u5426\u5305\u542b\u201c2010\u5e74\u4e16\u754c\u676f\u7684\u51a0\u519b\u662f\u897f\u73ed\u7259\u201d\u3002 \u7ed3\u679c\uff1aGPT-3.5\u53d1\u73b0\u4e0a\u4e0b\u6587\u5305\u542b\u8be5\u4fe1\u606f\uff0c\u56e0\u6b64\u8be5\u58f0\u660e\u201c\u53ec\u56de\u201d\u3002 \u58f0\u660e2\uff1a \"\u897f\u73ed\u7259\u5728\u51b3\u8d5b\u4e2d\u4ee51-0\u51fb\u8d25\u4e86\u8377\u5170\u3002\" \u8f93\u5165\u7ed9GPT-3.5\uff1a\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587 + \u58f0\u660e2\u3002 GPT-3.5\u68c0\u67e5\u4e0a\u4e0b\u6587\u662f\u5426\u5305\u542b\u201c\u897f\u73ed\u7259\u5728\u51b3\u8d5b\u4e2d\u4ee51-0\u51fb\u8d25\u4e86\u8377\u5170\u201d\u3002 \u7ed3\u679c\uff1aGPT-3.5\u786e\u8ba4\u4e0a\u4e0b\u6587\u4e2d\u63d0\u5230\u897f\u73ed\u7259\u51fb\u8d25\u4e86\u8377\u5170\uff0c\u4f46\u672a\u63d0\u5230\u5177\u4f53\u7684\u6bd4\u52061-0\uff0c\u56e0\u6b64\u8be5\u58f0\u660e\u201c\u672a\u53ec\u56de\u201d\u3002 \u8ba1\u7b97\u53ec\u56de\u7387\uff1a \u603b\u58f0\u660e\u6570\uff1a2\uff08\u58f0\u660e1\u548c\u58f0\u660e2\uff09\u3002 \u88ab\u53ec\u56de\u7684\u58f0\u660e\u6570\uff1a1\uff08\u58f0\u660e1\u88ab\u53ec\u56de\uff0c\u58f0\u660e2\u672a\u53ec\u56de\uff09\u3002 Context Recall = 0.5 \u516c\u5f0f\uff1a \u5206\u5b50\uff1aGT claims that can be attributed to context\uff0c\u8868\u793a\u5728\u771f\u5b9e\u7b54\u6848\uff08GT\uff09\u4e2d\u7684\u8bba\u65ad\u4e2d\uff0c\u6709\u591a\u5c11\u662f\u53ef\u4ee5\u5f52\u56e0\u4e8e\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e9b\u8bba\u65ad\u5728\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u4e2d\u627e\u5230\u4e86\u652f\u6301\u6216\u4f9d\u636e\u3002 \u5206\u6bcd\uff1aNumber of claims in GT \u8868\u793a\u771f\u5b9e\u7b54\u6848\u4e2d\u8bba\u65ad\u7684\u603b\u6570\u91cf\u3002","title":"2.2.2 \u4e0a\u4e0b\u6587\u53ec\u56de\u7387 (context recall)"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#223-faithfulness","text":"\u4f5c\u7528\uff1a\u6307\u7b54\u6848\u786e\u5b9e\u662f\u6839\u636e\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\u5f97\u5230\u7684\u3002\u8fd9\u5bf9\u4e8e\u907f\u514d\u9519\u89c9\u5e76\u786e\u4fdd\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u53ef\u4ee5\u7528\u4f5c\u751f\u6210\u7b54\u6848\u7684\u4f9d\u636e\u975e\u5e38\u91cd\u8981\u3002 \u5982\u679c\u5206\u6570\u4f4e\uff0c\u5b83\u8868\u660e LLM \u7684\u56de\u5e94\u6ca1\u6709\u9075\u5faa\u68c0\u7d22\u5230\u7684\u77e5\u8bc6\uff0c\u63d0\u4f9b\u5e7b\u89c9\u5f0f\u7b54\u6848\u7684\u53ef\u80fd\u6027\u589e\u52a0\u3002 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e3a\u4e86\u4f30\u8ba1\u5fe0\u5b9e\u5ea6\uff0c\u6211\u4eec\u9996\u5148\u4f7f\u7528 LLM \u63d0\u53d6\u4e00\u7ec4\u9648\u8ff0\uff0cS(a(q))\u3002\u65b9\u6cd5\u662f\u4f7f\u7528\u4ee5\u4e0b\u63d0\u793a\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u95ee\u9898\u548c\u7b54\u6848\uff0c\u4ece\u7ed9\u5b9a\u7b54\u6848\u7684\u6bcf\u4e2a\u53e5\u5b50\u4e2d\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u9648\u8ff0\u3002 \u95ee\u9898\uff1a[\u95ee\u9898] \u7b54\u6848\uff1a[\u7b54\u6848] \u751f\u6210 S(a(q)) \u540e\uff0cLLM \u5224\u65ad\u6bcf\u4e2a\u9648\u8ff0 si \u662f\u5426\u53ef\u4ee5\u4ece c(q) \u4e2d\u63a8\u65ad\u51fa\u6765\u3002\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u4f7f\u7528\u4ee5\u4e0b\u63d0\u793a\u8fdb\u884c\uff1a \u8003\u8651\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\u548c\u4ee5\u4e0b\u9648\u8ff0\uff0c\u7136\u540e\u786e\u5b9a\u5b83\u4eec\u662f\u5426\u7531\u4e0a\u4e0b\u6587\u4e2d\u7684\u4fe1\u606f\u652f\u6301\u3002\u5728\u5f97\u51fa\u7ed3\u8bba\uff08\u662f/\u5426\uff09\u4e4b\u524d\uff0c\u4e3a\u6bcf\u4e2a\u9648\u8ff0\u63d0\u4f9b\u7b80\u8981\u89e3\u91ca\u3002\u5728\u6700\u540e\u4ee5\u7ed9\u5b9a\u683c\u5f0f\u4e3a\u6bcf\u4e2a\u9648\u8ff0\u63d0\u4f9b\u6700\u7ec8\u7ed3\u8bba\u3002\u4e0d\u8981\u504f\u79bb\u6307\u5b9a\u7684\u683c\u5f0f\u3002 \u9648\u8ff0\uff1a[\u9648\u8ff0 1] ... \u9648\u8ff0\uff1a[\u9648\u8ff0 n] \u6700\u7ec8\u7684\u5fe0\u5b9e\u5ea6\u5206\u6570\uff0cF\uff0c\u8ba1\u7b97\u4e3a F=|V|/|S|\uff0c\u5176\u4e2d |V| \u8868\u793a LLM \u652f\u6301\u7684\u9648\u8ff0\u6570\u91cf\uff0c|S| \u8868\u793a\u9648\u8ff0\u7684\u603b\u6570\u3002","title":"2.2.3 \u5fe0\u5b9e\u5ea6\uff08faithfulness\uff09"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#224-answer-relevancy","text":"\u4f5c\u7528\uff1a\u751f\u6210\u7684\u7b54\u6848\u4e0e\u67e5\u8be2\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u5206\u6570\u8d8a\u9ad8\uff0c\u76f8\u5173\u6027\u8d8a\u597d\u3002 \u5b9e\u73b0\u65b9\u5f0f\uff1a \u4e3a\u4e86\u4f30\u8ba1\u7b54\u6848\u7684\u76f8\u5173\u6027\uff0c\u6211\u4eec\u63d0\u793a LLM \u6839\u636e\u7ed9\u5b9a\u7684\u7b54\u6848\u751f\u6210 n \u4e2a\u6f5c\u5728\u95ee\u9898 qi\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u4e3a\u7ed9\u5b9a\u7b54\u6848\u751f\u6210\u4e00\u4e2a\u95ee\u9898\u3002 \u7b54\u6848\uff1a[\u7b54\u6848] \u5177\u4f53\u6b65\u9aa4\uff1a \u5bf9\u7ed9\u5b9a\u7b54\u6848\uff0c\u63d0\u793a\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u751f\u6210\u57fa\u4e8e\u8be5\u7b54\u6848\u53ef\u80fd\u7684 n\u4e2a\u95ee\u9898 qi\u3002 \u4f7f\u7528embedding\u6a21\u578b\u83b7\u53d6\u6240\u6709\u95ee\u9898\u7684\u5d4c\u5165\u8868\u793a\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u751f\u6210\u7684\u95ee\u9898 qi \uff0c\u8ba1\u7b97\u5b83\u4e0e\u539f\u59cb\u95ee\u9898 q \u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6 sim(q,qi)\u3002\u8fd9\u91cc\u7684\u76f8\u4f3c\u5ea6\u662f\u901a\u8fc7\u8ba1\u7b97\u5bf9\u5e94\u5d4c\u5165\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6765\u5f97\u5230\u7684\u3002 \u7b54\u6848\u76f8\u5173\u6027\u5f97\u5206\uff08\u5e73\u5747\u76f8\u4f3c\u5ea6\uff09 A*R* \u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a \u7528\u516c\u5f0f\u8868\u8fbe\u5982\u4e0b:","title":"2.2.4 \u7b54\u6848\u76f8\u5173\u6027\uff08answer relevancy\uff09"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/01-RAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0%E5%B7%A5%E5%85%B7.html#3","text":"\u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u4e86RAG\u7cfb\u7edf\u5982\u4f55\u5b9e\u73b0\u8bc4\u4f30\u7684\u65b9\u5f0f\uff0c\u91cd\u70b9\u5206\u6790\u4e86RAGAS\u7cfb\u7edf\u4e2d\uff1a\u4e0a\u4e0b\u6587\u76f8\u5173\u6027\u3001\u4e0a\u4e0b\u6587\u53ec\u56de\u7387\u3001\u5fe0\u5b9e\u5ea6\u4ee5\u53ca\u7b54\u6848\u76f8\u5173\u6027\u7684\u76f8\u5173\u6307\u6807\u3002","title":"3 \u672c\u8282\u5c0f\u7ed3"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/02-%E5%AE%9E%E7%8E%B0EduRAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%84%E4%BC%B0.html","text":"\u57fa\u4e8e RAGAS \u8bc4\u4f30 RAG \u7cfb\u7edf \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3RAGAS\u5e93\u5728RAG\uff08\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09\u7cfb\u7edf\u8bc4\u4f30\u4e2d\u7684\u4f5c\u7528\u3002 \u638c\u63e1\u5982\u4f55\u4f7f\u7528RAGAS\u8bc4\u4f30RAG\u7cfb\u7edf\u7684\u6838\u5fc3\u6307\u6807\u3002 RAGAS \u8bc4\u4f30\u811a\u672c \u00b6 \u529f\u80fd\u63cf\u8ff0 \u00b6 ragas_evaluate.py \u811a\u672c\u7528\u4e8e\u8bc4\u4f30RAG\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u5177\u4f53\u529f\u80fd\u5305\u62ec\uff1a \u6570\u636e\u96c6\u52a0\u8f7d \uff1a\u4eceJSON\u6587\u4ef6\u52a0\u8f7d\u5305\u542b\u95ee\u9898\u3001\u7b54\u6848\u3001\u4e0a\u4e0b\u6587\u548c\u771f\u5b9e\u7b54\u6848\u7684\u8bc4\u4f30\u6570\u636e\u96c6\u3002 \u6570\u636e\u683c\u5f0f\u8f6c\u6362 \uff1a\u5c06JSON\u6570\u636e\u8f6c\u6362\u4e3aRAGAS\u8981\u6c42\u7684 Dataset \u683c\u5f0f\u3002 \u73af\u5883\u914d\u7f6e \uff1a\u4f7f\u7528LangChain\u7684OpenAI\u6a21\u578b\u548c\u5d4c\u5165\u6a21\u578b\u521d\u59cb\u5316RAGAS\u8bc4\u4f30\u73af\u5883\u3002 \u8bc4\u4f30\u6267\u884c \uff1a\u8ba1\u7b97\u56db\u4e2a\u6838\u5fc3\u6307\u6807\uff1a Faithfulness\uff08\u5fe0\u5b9e\u5ea6\uff09 \uff1a\u7b54\u6848\u662f\u5426\u5fe0\u4e8e\u4e0a\u4e0b\u6587\u3002 Answer Relevancy\uff08\u7b54\u6848\u76f8\u5173\u6027\uff09 \uff1a\u7b54\u6848\u4e0e\u95ee\u9898\u7684\u5339\u914d\u7a0b\u5ea6\u3002 Context Relevancy\uff08\u4e0a\u4e0b\u6587\u76f8\u5173\u6027\uff09 \uff1a\u4e0a\u4e0b\u6587\u662f\u5426\u4e0e\u95ee\u9898\u76f8\u5173\u3002 Context Recall\uff08\u4e0a\u4e0b\u6587\u53ec\u56de\u7387\uff09 \uff1a\u4e0a\u4e0b\u6587\u662f\u5426\u5305\u542b\u6240\u6709\u5fc5\u8981\u4fe1\u606f\u3002 \u7ed3\u679c\u8f93\u51fa\u4e0e\u4fdd\u5b58 \uff1a\u6253\u5370\u8bc4\u4f30\u7ed3\u679c\u5e76\u4fdd\u5b58\u4e3aCSV\u6587\u4ef6\uff0c\u4fbf\u4e8e\u540e\u7eed\u5206\u6790\u3002 \u5b8c\u6574\u4ee3\u7801 \u00b6 # \u5bfc\u5165pandas\u5e93\uff0c\u7528\u4e8e\u6570\u636e\u5904\u7406\u548c\u4fdd\u5b58CSV\u6587\u4ef6 import pandas as pd # \u5bfc\u5165ragas\u5e93\u7684evaluate\u51fd\u6570\uff0c\u7528\u4e8e\u6267\u884cRAG\u8bc4\u4f30 from ragas import evaluate # \u5bfc\u5165ragas\u7684\u8bc4\u4f30\u6307\u6807\uff0c\u5305\u62ec\u5fe0\u5b9e\u5ea6\u3001\u7b54\u6848\u76f8\u5173\u6027\u3001\u4e0a\u4e0b\u6587\u76f8\u5173\u6027\u548c\u4e0a\u4e0b\u6587\u53ec\u56de\u7387 from ragas.metrics import ( faithfulness , answer_relevancy , context_relevancy , context_recall ) # \u5bfc\u5165datasets\u5e93\u7684Dataset\u7c7b\uff0c\u7528\u4e8e\u6784\u5efaRAGAS\u6240\u9700\u7684\u6570\u636e\u683c\u5f0f from datasets import Dataset # \u5bfc\u5165langchain_openai\u7684\u5d4c\u5165\u6a21\u578b\u548c\u804a\u5929\u6a21\u578b\uff0c\u7528\u4e8e\u8bc4\u4f30\u65f6\u7684\u8bed\u4e49\u8ba1\u7b97\u548c\u63a8\u7406 from langchain_openai import OpenAIEmbeddings , ChatOpenAI # \u5bfc\u5165json\u5e93\uff0c\u7528\u4e8e\u52a0\u8f7dJSON\u683c\u5f0f\u7684\u8bc4\u4f30\u6570\u636e\u96c6 import json # 1. \u52a0\u8f7d\u751f\u6210\u7684\u6570\u636e\u96c6 # \u4f7f\u7528with\u8bed\u53e5\u6253\u5f00JSON\u6587\u4ef6\uff0c\u786e\u4fdd\u6587\u4ef6\u6b63\u786e\u5173\u95ed\uff0c\u6307\u5b9a\u7f16\u7801\u4e3autf-8 with open ( \"rag_evaluation_dataset.json\" , \"r\" , encoding = \"utf-8\" ) as f : # \u5c06JSON\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230data\u53d8\u91cf\u4e2d\uff0cdata\u4e3a\u5305\u542b\u591a\u4e2a\u6570\u636e\u6761\u76ee\u7684\u5217\u8868 data = json . load ( f ) # 2. \u8f6c\u6362\u4e3aRAGAS\u683c\u5f0f # \u521b\u5efa\u5b57\u5178eval_data\uff0c\u5c06JSON\u6570\u636e\u8f6c\u6362\u4e3aRAGAS\u8981\u6c42\u7684\u5b57\u6bb5\u683c\u5f0f eval_data = { # \u63d0\u53d6\u6bcf\u4e2a\u6570\u636e\u6761\u76ee\u7684question\u5b57\u6bb5\uff0c\u7ec4\u6210\u95ee\u9898\u5217\u8868 \"question\" : [ item [ \"question\" ] for item in data ], # \u63d0\u53d6\u6bcf\u4e2a\u6570\u636e\u6761\u76ee\u7684answer\u5b57\u6bb5\uff0c\u7ec4\u6210\u7b54\u6848\u5217\u8868 \"answer\" : [ item [ \"answer\" ] for item in data ], # \u63d0\u53d6\u6bcf\u4e2a\u6570\u636e\u6761\u76ee\u7684context\u5b57\u6bb5\uff0c\u7ec4\u6210\u4e0a\u4e0b\u6587\u5217\u8868\uff08\u6bcf\u4e2acontext\u4e3a\u5217\u8868\uff09 \"contexts\" : [ item [ \"context\" ] for item in data ], # \u63d0\u53d6\u6bcf\u4e2a\u6570\u636e\u6761\u76ee\u7684ground_truth\u5b57\u6bb5\uff0c\u7ec4\u6210\u771f\u5b9e\u7b54\u6848\u5217\u8868 \"ground_truth\" : [ item [ \"ground_truth\" ] for item in data ] } # \u4f7f\u7528Dataset.from_dict\u5c06\u5b57\u5178\u8f6c\u6362\u4e3aRAGAS\u6240\u9700\u7684Dataset\u5bf9\u8c61 dataset = Dataset . from_dict ( eval_data ) # 3. \u914d\u7f6eRAGAS\u8bc4\u4f30\u73af\u5883 # \u521d\u59cb\u5316ChatOpenAI\u6a21\u578b\uff0c\u6307\u5b9a\u4f7f\u7528gpt-4\u6a21\u578b\uff0c\u5e76\u8bbe\u7f6eOpenAI API\u5bc6\u94a5 llm = ChatOpenAI ( model = \"gpt-4\" , openai_api_key = \"your_openai_api_key\" ) # \u521d\u59cb\u5316OpenAI\u5d4c\u5165\u6a21\u578b\uff0c\u7528\u4e8e\u8ba1\u7b97\u8bed\u4e49\u76f8\u4f3c\u5ea6\uff0c\u8bbe\u7f6eAPI\u5bc6\u94a5 embeddings = OpenAIEmbeddings ( openai_api_key = \"your_openai_api_key\" ) # 4. \u6267\u884c\u8bc4\u4f30 # \u8c03\u7528evaluate\u51fd\u6570\uff0c\u4f20\u5165\u6570\u636e\u96c6\u3001\u8bc4\u4f30\u6307\u6807\u3001LLM\u6a21\u578b\u548c\u5d4c\u5165\u6a21\u578b result = evaluate ( # \u4f20\u5165\u8f6c\u6362\u597d\u7684Dataset\u5bf9\u8c61 dataset = dataset , # \u6307\u5b9a\u4f7f\u7528\u7684\u8bc4\u4f30\u6307\u6807\u5217\u8868 metrics = [ faithfulness , # \u5fe0\u5b9e\u5ea6\uff1a\u7b54\u6848\u662f\u5426\u57fa\u4e8e\u4e0a\u4e0b\u6587 answer_relevancy , # \u7b54\u6848\u76f8\u5173\u6027\uff1a\u7b54\u6848\u4e0e\u95ee\u9898\u7684\u5339\u914d\u5ea6 context_relevancy , # \u4e0a\u4e0b\u6587\u76f8\u5173\u6027\uff1a\u4e0a\u4e0b\u6587\u662f\u5426\u4ec5\u5305\u542b\u76f8\u5173\u4fe1\u606f context_recall # \u4e0a\u4e0b\u6587\u53ec\u56de\u7387\uff1a\u4e0a\u4e0b\u6587\u662f\u5426\u5305\u542b\u6240\u6709\u5fc5\u8981\u4fe1\u606f ], # \u4f20\u5165\u914d\u7f6e\u597d\u7684LLM\u6a21\u578b llm = llm , # \u4f20\u5165\u914d\u7f6e\u597d\u7684\u5d4c\u5165\u6a21\u578b embeddings = embeddings ) # 5. \u8f93\u51fa\u5e76\u4fdd\u5b58\u7ed3\u679c # \u6253\u5370\u8bc4\u4f30\u7ed3\u679c\u6807\u9898 print ( \"RAGAS\u8bc4\u4f30\u7ed3\u679c\uff1a\" ) # \u6253\u5370\u8bc4\u4f30\u7ed3\u679c\uff0c\u5305\u542b\u5404\u6307\u6807\u7684\u5206\u6570 print ( result ) # \u5c06\u8bc4\u4f30\u7ed3\u679c\u8f6c\u6362\u4e3apandas DataFrame\uff0c\u4fbf\u4e8e\u4fdd\u5b58 result_df = pd . DataFrame ([ result ]) # \u5c06DataFrame\u4fdd\u5b58\u4e3aCSV\u6587\u4ef6\uff0c\u6587\u4ef6\u540d\u4e3aragas_evaluation_results.csv\uff0c\u4e0d\u4fdd\u5b58\u7d22\u5f15 result_df . to_csv ( \"ragas_evaluation_results.csv\" , index = False ) \u8bf4\u660e \u00b6 \u6570\u636e\u96c6\u683c\u5f0f \uff1a RAGAS\u8981\u6c42\u6570\u636e\u96c6\u5305\u542b question \u3001 answer \u3001 contexts \uff08\u5217\u8868\u683c\u5f0f\uff09\u548c ground_truth \u56db\u4e2a\u5b57\u6bb5\u3002 contexts \u5fc5\u987b\u662f\u5217\u8868\uff0c\u5373\u4f7f\u6bcf\u4e2a\u95ee\u9898\u53ea\u5bf9\u5e94\u4e00\u4e2a\u4e0a\u4e0b\u6587\uff08\u5982 [\"context text\"] \uff09\u3002 \u8bc4\u4f30\u6307\u6807 \uff1a Faithfulness \uff1a\u4f9d\u8d56LLM\uff08\u5982gpt-4\uff09\u5224\u65ad\u7b54\u6848\u662f\u5426\u57fa\u4e8e\u4e0a\u4e0b\u6587\uff0c\u907f\u514d\u751f\u6210\u65e0\u5173\u5185\u5bb9\u3002 Answer Relevancy \uff1a\u4f7f\u7528\u5d4c\u5165\u6a21\u578b\uff08OpenAIEmbeddings\uff09\u8ba1\u7b97\u7b54\u6848\u4e0e\u95ee\u9898\u7684\u8bed\u4e49\u76f8\u4f3c\u5ea6\u3002 Context Relevancy \uff1a\u8bc4\u4f30\u4e0a\u4e0b\u6587\u662f\u5426\u4ec5\u5305\u542b\u4e0e\u95ee\u9898\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u51cf\u5c11\u5197\u4f59\u3002 Context Recall \uff1a\u68c0\u67e5\u4e0a\u4e0b\u6587\u662f\u5426\u8986\u76d6\u6240\u6709\u5fc5\u8981\u4fe1\u606f\uff0c\u9700\u9ad8\u8d28\u91cf\u7684 ground_truth \u652f\u6301\u3002 \u73af\u5883\u914d\u7f6e \uff1a ChatOpenAI \u7528\u4e8e\u751f\u6210\u8bc4\u4f30\u6240\u9700\u7684\u63a8\u7406\uff08\u5982\u5224\u65ad\u5fe0\u5b9e\u5ea6\uff09\uff0c\u9700\u6307\u5b9a\u6a21\u578b\uff08\u5982gpt-4\uff09\u548cAPI\u5bc6\u94a5\u3002 OpenAIEmbeddings \u7528\u4e8e\u8ba1\u7b97\u8bed\u4e49\u76f8\u4f3c\u5ea6\uff08\u5982\u7b54\u6848\u76f8\u5173\u6027\uff09\uff0c\u9700\u786e\u4fddAPI\u5bc6\u94a5\u6709\u6548\u3002 \u53ef\u66ff\u6362\u4e3a\u5176\u4ed6LLM\uff08\u5982\u901a\u4e49\u5343\u95ee\uff09\uff0c\u9700\u9002\u914dLangChain\u7684\u6a21\u578b\u63a5\u53e3\u3002 \u7ed3\u679c\u5206\u6790 \uff1a \u8bc4\u4f30\u7ed3\u679c\u4e3a\u5b57\u5178\uff0c\u5305\u542b\u5404\u6307\u6807\u7684\u5206\u6570\uff080-1\uff0c1\u4e3a\u6700\u4f73\uff09\uff0c\u5982\uff1a { 'faithfulness' : 0.95 , 'answer_relevancy' : 0.92 , 'context_relevancy' : 0.90 , 'context_recall' : 0.93 } \u7ed3\u679c\u4fdd\u5b58\u4e3aCSV\u6587\u4ef6\uff08 ragas_evaluation_results.csv \uff09\uff0c\u4fbf\u4e8e\u7edf\u8ba1\u5206\u6790\u548c\u591a\u6b21\u8fd0\u884c\u6bd4\u8f83\u3002 \u8fc1\u79fb\u6027 \uff1a \u4ee3\u7801\u7ed3\u6784\u901a\u7528\uff0c\u53ef\u7528\u4e8e\u4efb\u4f55RAG\u7cfb\u7edf\u8bc4\u4f30\uff0c\u53ea\u9700\u66ff\u6362\u6570\u636e\u96c6\u548cLLM\u914d\u7f6e\u3002 \u53ef\u6269\u5c55\u6307\u6807\uff08\u5982 answer_correctness \uff09\u6216\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6570\u636e\u5904\u7406\u903b\u8f91\uff08\u5982\u8fc7\u6ee4\u4f4e\u8d28\u91cf\u6570\u636e\uff09\u3002 \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u8bfe\u4ef6\u901a\u8fc7 ragas_evaluate.py \u4ee3\u7801\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4f7f\u7528RAGAS\u8bc4\u4f30RAG\u7cfb\u7edf\u7684\u5b8c\u6574\u6d41\u7a0b\u3002","title":"5.2 \u5b9e\u73b0EduRAG\u7cfb\u7edf\u7684\u8bc4\u4f30"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/02-%E5%AE%9E%E7%8E%B0EduRAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%84%E4%BC%B0.html#ragas-rag","text":"","title":"\u57fa\u4e8e RAGAS \u8bc4\u4f30 RAG \u7cfb\u7edf"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/02-%E5%AE%9E%E7%8E%B0EduRAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%84%E4%BC%B0.html#_1","text":"\u7406\u89e3RAGAS\u5e93\u5728RAG\uff08\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09\u7cfb\u7edf\u8bc4\u4f30\u4e2d\u7684\u4f5c\u7528\u3002 \u638c\u63e1\u5982\u4f55\u4f7f\u7528RAGAS\u8bc4\u4f30RAG\u7cfb\u7edf\u7684\u6838\u5fc3\u6307\u6807\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/02-%E5%AE%9E%E7%8E%B0EduRAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%84%E4%BC%B0.html#ragas","text":"","title":"RAGAS \u8bc4\u4f30\u811a\u672c"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/02-%E5%AE%9E%E7%8E%B0EduRAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%84%E4%BC%B0.html#_2","text":"ragas_evaluate.py \u811a\u672c\u7528\u4e8e\u8bc4\u4f30RAG\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u5177\u4f53\u529f\u80fd\u5305\u62ec\uff1a \u6570\u636e\u96c6\u52a0\u8f7d \uff1a\u4eceJSON\u6587\u4ef6\u52a0\u8f7d\u5305\u542b\u95ee\u9898\u3001\u7b54\u6848\u3001\u4e0a\u4e0b\u6587\u548c\u771f\u5b9e\u7b54\u6848\u7684\u8bc4\u4f30\u6570\u636e\u96c6\u3002 \u6570\u636e\u683c\u5f0f\u8f6c\u6362 \uff1a\u5c06JSON\u6570\u636e\u8f6c\u6362\u4e3aRAGAS\u8981\u6c42\u7684 Dataset \u683c\u5f0f\u3002 \u73af\u5883\u914d\u7f6e \uff1a\u4f7f\u7528LangChain\u7684OpenAI\u6a21\u578b\u548c\u5d4c\u5165\u6a21\u578b\u521d\u59cb\u5316RAGAS\u8bc4\u4f30\u73af\u5883\u3002 \u8bc4\u4f30\u6267\u884c \uff1a\u8ba1\u7b97\u56db\u4e2a\u6838\u5fc3\u6307\u6807\uff1a Faithfulness\uff08\u5fe0\u5b9e\u5ea6\uff09 \uff1a\u7b54\u6848\u662f\u5426\u5fe0\u4e8e\u4e0a\u4e0b\u6587\u3002 Answer Relevancy\uff08\u7b54\u6848\u76f8\u5173\u6027\uff09 \uff1a\u7b54\u6848\u4e0e\u95ee\u9898\u7684\u5339\u914d\u7a0b\u5ea6\u3002 Context Relevancy\uff08\u4e0a\u4e0b\u6587\u76f8\u5173\u6027\uff09 \uff1a\u4e0a\u4e0b\u6587\u662f\u5426\u4e0e\u95ee\u9898\u76f8\u5173\u3002 Context Recall\uff08\u4e0a\u4e0b\u6587\u53ec\u56de\u7387\uff09 \uff1a\u4e0a\u4e0b\u6587\u662f\u5426\u5305\u542b\u6240\u6709\u5fc5\u8981\u4fe1\u606f\u3002 \u7ed3\u679c\u8f93\u51fa\u4e0e\u4fdd\u5b58 \uff1a\u6253\u5370\u8bc4\u4f30\u7ed3\u679c\u5e76\u4fdd\u5b58\u4e3aCSV\u6587\u4ef6\uff0c\u4fbf\u4e8e\u540e\u7eed\u5206\u6790\u3002","title":"\u529f\u80fd\u63cf\u8ff0"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/02-%E5%AE%9E%E7%8E%B0EduRAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%84%E4%BC%B0.html#_3","text":"# \u5bfc\u5165pandas\u5e93\uff0c\u7528\u4e8e\u6570\u636e\u5904\u7406\u548c\u4fdd\u5b58CSV\u6587\u4ef6 import pandas as pd # \u5bfc\u5165ragas\u5e93\u7684evaluate\u51fd\u6570\uff0c\u7528\u4e8e\u6267\u884cRAG\u8bc4\u4f30 from ragas import evaluate # \u5bfc\u5165ragas\u7684\u8bc4\u4f30\u6307\u6807\uff0c\u5305\u62ec\u5fe0\u5b9e\u5ea6\u3001\u7b54\u6848\u76f8\u5173\u6027\u3001\u4e0a\u4e0b\u6587\u76f8\u5173\u6027\u548c\u4e0a\u4e0b\u6587\u53ec\u56de\u7387 from ragas.metrics import ( faithfulness , answer_relevancy , context_relevancy , context_recall ) # \u5bfc\u5165datasets\u5e93\u7684Dataset\u7c7b\uff0c\u7528\u4e8e\u6784\u5efaRAGAS\u6240\u9700\u7684\u6570\u636e\u683c\u5f0f from datasets import Dataset # \u5bfc\u5165langchain_openai\u7684\u5d4c\u5165\u6a21\u578b\u548c\u804a\u5929\u6a21\u578b\uff0c\u7528\u4e8e\u8bc4\u4f30\u65f6\u7684\u8bed\u4e49\u8ba1\u7b97\u548c\u63a8\u7406 from langchain_openai import OpenAIEmbeddings , ChatOpenAI # \u5bfc\u5165json\u5e93\uff0c\u7528\u4e8e\u52a0\u8f7dJSON\u683c\u5f0f\u7684\u8bc4\u4f30\u6570\u636e\u96c6 import json # 1. \u52a0\u8f7d\u751f\u6210\u7684\u6570\u636e\u96c6 # \u4f7f\u7528with\u8bed\u53e5\u6253\u5f00JSON\u6587\u4ef6\uff0c\u786e\u4fdd\u6587\u4ef6\u6b63\u786e\u5173\u95ed\uff0c\u6307\u5b9a\u7f16\u7801\u4e3autf-8 with open ( \"rag_evaluation_dataset.json\" , \"r\" , encoding = \"utf-8\" ) as f : # \u5c06JSON\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230data\u53d8\u91cf\u4e2d\uff0cdata\u4e3a\u5305\u542b\u591a\u4e2a\u6570\u636e\u6761\u76ee\u7684\u5217\u8868 data = json . load ( f ) # 2. \u8f6c\u6362\u4e3aRAGAS\u683c\u5f0f # \u521b\u5efa\u5b57\u5178eval_data\uff0c\u5c06JSON\u6570\u636e\u8f6c\u6362\u4e3aRAGAS\u8981\u6c42\u7684\u5b57\u6bb5\u683c\u5f0f eval_data = { # \u63d0\u53d6\u6bcf\u4e2a\u6570\u636e\u6761\u76ee\u7684question\u5b57\u6bb5\uff0c\u7ec4\u6210\u95ee\u9898\u5217\u8868 \"question\" : [ item [ \"question\" ] for item in data ], # \u63d0\u53d6\u6bcf\u4e2a\u6570\u636e\u6761\u76ee\u7684answer\u5b57\u6bb5\uff0c\u7ec4\u6210\u7b54\u6848\u5217\u8868 \"answer\" : [ item [ \"answer\" ] for item in data ], # \u63d0\u53d6\u6bcf\u4e2a\u6570\u636e\u6761\u76ee\u7684context\u5b57\u6bb5\uff0c\u7ec4\u6210\u4e0a\u4e0b\u6587\u5217\u8868\uff08\u6bcf\u4e2acontext\u4e3a\u5217\u8868\uff09 \"contexts\" : [ item [ \"context\" ] for item in data ], # \u63d0\u53d6\u6bcf\u4e2a\u6570\u636e\u6761\u76ee\u7684ground_truth\u5b57\u6bb5\uff0c\u7ec4\u6210\u771f\u5b9e\u7b54\u6848\u5217\u8868 \"ground_truth\" : [ item [ \"ground_truth\" ] for item in data ] } # \u4f7f\u7528Dataset.from_dict\u5c06\u5b57\u5178\u8f6c\u6362\u4e3aRAGAS\u6240\u9700\u7684Dataset\u5bf9\u8c61 dataset = Dataset . from_dict ( eval_data ) # 3. \u914d\u7f6eRAGAS\u8bc4\u4f30\u73af\u5883 # \u521d\u59cb\u5316ChatOpenAI\u6a21\u578b\uff0c\u6307\u5b9a\u4f7f\u7528gpt-4\u6a21\u578b\uff0c\u5e76\u8bbe\u7f6eOpenAI API\u5bc6\u94a5 llm = ChatOpenAI ( model = \"gpt-4\" , openai_api_key = \"your_openai_api_key\" ) # \u521d\u59cb\u5316OpenAI\u5d4c\u5165\u6a21\u578b\uff0c\u7528\u4e8e\u8ba1\u7b97\u8bed\u4e49\u76f8\u4f3c\u5ea6\uff0c\u8bbe\u7f6eAPI\u5bc6\u94a5 embeddings = OpenAIEmbeddings ( openai_api_key = \"your_openai_api_key\" ) # 4. \u6267\u884c\u8bc4\u4f30 # \u8c03\u7528evaluate\u51fd\u6570\uff0c\u4f20\u5165\u6570\u636e\u96c6\u3001\u8bc4\u4f30\u6307\u6807\u3001LLM\u6a21\u578b\u548c\u5d4c\u5165\u6a21\u578b result = evaluate ( # \u4f20\u5165\u8f6c\u6362\u597d\u7684Dataset\u5bf9\u8c61 dataset = dataset , # \u6307\u5b9a\u4f7f\u7528\u7684\u8bc4\u4f30\u6307\u6807\u5217\u8868 metrics = [ faithfulness , # \u5fe0\u5b9e\u5ea6\uff1a\u7b54\u6848\u662f\u5426\u57fa\u4e8e\u4e0a\u4e0b\u6587 answer_relevancy , # \u7b54\u6848\u76f8\u5173\u6027\uff1a\u7b54\u6848\u4e0e\u95ee\u9898\u7684\u5339\u914d\u5ea6 context_relevancy , # \u4e0a\u4e0b\u6587\u76f8\u5173\u6027\uff1a\u4e0a\u4e0b\u6587\u662f\u5426\u4ec5\u5305\u542b\u76f8\u5173\u4fe1\u606f context_recall # \u4e0a\u4e0b\u6587\u53ec\u56de\u7387\uff1a\u4e0a\u4e0b\u6587\u662f\u5426\u5305\u542b\u6240\u6709\u5fc5\u8981\u4fe1\u606f ], # \u4f20\u5165\u914d\u7f6e\u597d\u7684LLM\u6a21\u578b llm = llm , # \u4f20\u5165\u914d\u7f6e\u597d\u7684\u5d4c\u5165\u6a21\u578b embeddings = embeddings ) # 5. \u8f93\u51fa\u5e76\u4fdd\u5b58\u7ed3\u679c # \u6253\u5370\u8bc4\u4f30\u7ed3\u679c\u6807\u9898 print ( \"RAGAS\u8bc4\u4f30\u7ed3\u679c\uff1a\" ) # \u6253\u5370\u8bc4\u4f30\u7ed3\u679c\uff0c\u5305\u542b\u5404\u6307\u6807\u7684\u5206\u6570 print ( result ) # \u5c06\u8bc4\u4f30\u7ed3\u679c\u8f6c\u6362\u4e3apandas DataFrame\uff0c\u4fbf\u4e8e\u4fdd\u5b58 result_df = pd . DataFrame ([ result ]) # \u5c06DataFrame\u4fdd\u5b58\u4e3aCSV\u6587\u4ef6\uff0c\u6587\u4ef6\u540d\u4e3aragas_evaluation_results.csv\uff0c\u4e0d\u4fdd\u5b58\u7d22\u5f15 result_df . to_csv ( \"ragas_evaluation_results.csv\" , index = False )","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/02-%E5%AE%9E%E7%8E%B0EduRAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%84%E4%BC%B0.html#_4","text":"\u6570\u636e\u96c6\u683c\u5f0f \uff1a RAGAS\u8981\u6c42\u6570\u636e\u96c6\u5305\u542b question \u3001 answer \u3001 contexts \uff08\u5217\u8868\u683c\u5f0f\uff09\u548c ground_truth \u56db\u4e2a\u5b57\u6bb5\u3002 contexts \u5fc5\u987b\u662f\u5217\u8868\uff0c\u5373\u4f7f\u6bcf\u4e2a\u95ee\u9898\u53ea\u5bf9\u5e94\u4e00\u4e2a\u4e0a\u4e0b\u6587\uff08\u5982 [\"context text\"] \uff09\u3002 \u8bc4\u4f30\u6307\u6807 \uff1a Faithfulness \uff1a\u4f9d\u8d56LLM\uff08\u5982gpt-4\uff09\u5224\u65ad\u7b54\u6848\u662f\u5426\u57fa\u4e8e\u4e0a\u4e0b\u6587\uff0c\u907f\u514d\u751f\u6210\u65e0\u5173\u5185\u5bb9\u3002 Answer Relevancy \uff1a\u4f7f\u7528\u5d4c\u5165\u6a21\u578b\uff08OpenAIEmbeddings\uff09\u8ba1\u7b97\u7b54\u6848\u4e0e\u95ee\u9898\u7684\u8bed\u4e49\u76f8\u4f3c\u5ea6\u3002 Context Relevancy \uff1a\u8bc4\u4f30\u4e0a\u4e0b\u6587\u662f\u5426\u4ec5\u5305\u542b\u4e0e\u95ee\u9898\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u51cf\u5c11\u5197\u4f59\u3002 Context Recall \uff1a\u68c0\u67e5\u4e0a\u4e0b\u6587\u662f\u5426\u8986\u76d6\u6240\u6709\u5fc5\u8981\u4fe1\u606f\uff0c\u9700\u9ad8\u8d28\u91cf\u7684 ground_truth \u652f\u6301\u3002 \u73af\u5883\u914d\u7f6e \uff1a ChatOpenAI \u7528\u4e8e\u751f\u6210\u8bc4\u4f30\u6240\u9700\u7684\u63a8\u7406\uff08\u5982\u5224\u65ad\u5fe0\u5b9e\u5ea6\uff09\uff0c\u9700\u6307\u5b9a\u6a21\u578b\uff08\u5982gpt-4\uff09\u548cAPI\u5bc6\u94a5\u3002 OpenAIEmbeddings \u7528\u4e8e\u8ba1\u7b97\u8bed\u4e49\u76f8\u4f3c\u5ea6\uff08\u5982\u7b54\u6848\u76f8\u5173\u6027\uff09\uff0c\u9700\u786e\u4fddAPI\u5bc6\u94a5\u6709\u6548\u3002 \u53ef\u66ff\u6362\u4e3a\u5176\u4ed6LLM\uff08\u5982\u901a\u4e49\u5343\u95ee\uff09\uff0c\u9700\u9002\u914dLangChain\u7684\u6a21\u578b\u63a5\u53e3\u3002 \u7ed3\u679c\u5206\u6790 \uff1a \u8bc4\u4f30\u7ed3\u679c\u4e3a\u5b57\u5178\uff0c\u5305\u542b\u5404\u6307\u6807\u7684\u5206\u6570\uff080-1\uff0c1\u4e3a\u6700\u4f73\uff09\uff0c\u5982\uff1a { 'faithfulness' : 0.95 , 'answer_relevancy' : 0.92 , 'context_relevancy' : 0.90 , 'context_recall' : 0.93 } \u7ed3\u679c\u4fdd\u5b58\u4e3aCSV\u6587\u4ef6\uff08 ragas_evaluation_results.csv \uff09\uff0c\u4fbf\u4e8e\u7edf\u8ba1\u5206\u6790\u548c\u591a\u6b21\u8fd0\u884c\u6bd4\u8f83\u3002 \u8fc1\u79fb\u6027 \uff1a \u4ee3\u7801\u7ed3\u6784\u901a\u7528\uff0c\u53ef\u7528\u4e8e\u4efb\u4f55RAG\u7cfb\u7edf\u8bc4\u4f30\uff0c\u53ea\u9700\u66ff\u6362\u6570\u636e\u96c6\u548cLLM\u914d\u7f6e\u3002 \u53ef\u6269\u5c55\u6307\u6807\uff08\u5982 answer_correctness \uff09\u6216\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6570\u636e\u5904\u7406\u903b\u8f91\uff08\u5982\u8fc7\u6ee4\u4f4e\u8d28\u91cf\u6570\u636e\uff09\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/02-%E5%AE%9E%E7%8E%B0EduRAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%84%E4%BC%B0.html#_5","text":"\u672c\u8bfe\u4ef6\u901a\u8fc7 ragas_evaluate.py \u4ee3\u7801\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4f7f\u7528RAGAS\u8bc4\u4f30RAG\u7cfb\u7edf\u7684\u5b8c\u6574\u6d41\u7a0b\u3002","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html","text":"\u6784\u9020 RAG \u8bc4\u4f30\u6570\u636e\u96c6 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u638c\u63e1RAG\u6027\u80fd\u8bc4\u4f30\u7684\u6307\u6807 \u5b9e\u73b0RAG\u8bc4\u4f30\u6570\u636e\u96c6\u7684\u6784\u9020 1 \u5f15\u8a00 \u00b6 \u4f18\u5316 RAG \u4e0d\u662f\u201c\u70bc\u4e39\u201d\uff0c\u9700\u8981\u7cfb\u7edf\u7684\u65b9\u6cd5\u3002\u5f53\u6d89\u53ca\u5230\u5982\u4f55\u4f18\u5316 RAG\uff08Retrieval-Augmented Generation\uff09\u6027\u80fd\u65f6\uff0c\u8bb8\u591a\u4eba\u5f80\u5f80\u91c7\u53d6\u201c\u8bd5\u9519\u201d\u7684\u65b9\u6cd5\uff1a\u201c\u6211\u5c1d\u8bd5\u4e86\u4e00\u4e2a\u65b0\u6a21\u5757\uff0c\u95ee\u4e86\u51e0\u4e2a\u95ee\u9898\uff0c\u7b54\u6848\u770b\u8d77\u6765\u8fd8\u884c\u2026\u201d\u3002\u8fd9\u6837\u7684\u5b9a\u6027\u8bc4\u4f30\u65b9\u5f0f\u867d\u7136\u76f4\u89c2\uff0c\u4f46\u5f88\u96be\u5f97\u51fa\u53ef\u9760\u7684\u6539\u8fdb\u7ed3\u8bba\u3002 \u4f18\u5316 RAG \u6027\u80fd\u9700\u8981\u91c7\u7528\u79d1\u5b66\u5b9e\u9a8c\u7684\u65b9\u5f0f\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u8bbe\u8ba1\u91cf\u5316\u7684\u8bc4\u4f30\u6307\u6807\uff0c\u5e76\u51c6\u5907\u9ad8\u8d28\u91cf\u7684\u8bc4\u4f30\u6570\u636e\u96c6\u3002\u901a\u8fc7\u7ed3\u6784\u5316\u7684\u5b9e\u9a8c\u548c\u8bc4\u4f30\u65b9\u6cd5\uff0c\u6211\u4eec\u624d\u80fd\u660e\u786e\u4ec0\u4e48\u6837\u7684\u8c03\u6574\u4f1a\u771f\u6b63\u63d0\u5347\u6027\u80fd\u3002 2 \u7ed3\u6784\u5316\u8bc4\u4f30 RAG \u7684\u6027\u80fd \u00b6 RAG \u7cfb\u7edf\u7684\u6027\u80fd\u8bc4\u4f30\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u4e3b\u8981\u65b9\u9762\u8fdb\u884c\uff1a \u68c0\u7d22\u8bc4\u4f30\uff08Retrieval Evaluation\uff09\uff1a \u68c0\u7d22\u7684\u6bb5\u843d\u662f\u5426\u76f8\u5173\uff1f \u751f\u6210\u8bc4\u4f30\uff08Generation Evaluation\uff09\uff1a \u6a21\u578b\u751f\u6210\u7684\u7b54\u6848\u662f\u5426\u6070\u5f53\uff1f \u5bf9\u4e8e\u7aef\u5230\u7aef\u7684\u8bc4\u4f30\uff0c\u6211\u4eec\u901a\u5e38\u5173\u6ce8\u4ee5\u4e0b\u56db\u7c7b\u6307\u6807\uff1a Groundedness\uff08\u53ef\u9760\u6027\uff09\uff1a \u68c0\u7d22\u8bc4\u4f30\u4e2d\u7684\u5173\u952e\u6307\u6807\uff0c\u8bc4\u4f30\u68c0\u7d22\u7684\u6bb5\u843d\u662f\u5426\u4e3a\u751f\u6210\u7684\u7b54\u6848\u63d0\u4f9b\u4e86\u53ef\u9760\u652f\u6301\uff0c\u907f\u514d\u5e7b\u89c9\uff08hallucinations\uff09\u6216\u65e0\u5173\u4fe1\u606f\u3002\u8fd9\u662f\u751f\u6210\u8bc4\u4f30\u7684\u57fa\u7840\u3002 Completeness\uff08\u5b8c\u6574\u6027\uff09\uff1a \u751f\u6210\u8bc4\u4f30\u7684\u6838\u5fc3\u6307\u6807\uff0c\u7528\u4e8e\u8bc4\u4f30\u6a21\u578b\u7684\u56de\u7b54\u662f\u5426\u5168\u9762\u8986\u76d6\u4e86\u7528\u6237\u95ee\u9898\u7684\u6240\u6709\u65b9\u9762\uff0c\u540c\u65f6\u95f4\u63a5\u53cd\u6620\u4e86\u68c0\u7d22\u9636\u6bb5\u7684\u4fe1\u606f\u5145\u5206\u6027\u3002 Utilization\uff08\u5229\u7528\u7387\uff09\uff1a \u8fde\u63a5\u68c0\u7d22\u548c\u751f\u6210\u7684\u6865\u6881\u6307\u6807\uff0c\u7528\u6765\u8bc4\u4f30\u68c0\u7d22\u5230\u7684\u4fe1\u606f\u662f\u5426\u88ab\u6709\u6548\u5229\u7528\u3002\u5982\u679c\u5229\u7528\u7387\u4f4e\uff0c\u53ef\u80fd\u610f\u5473\u7740\u68c0\u7d22\u5230\u7684\u6bb5\u843d\u4e0e\u95ee\u9898\u65e0\u5173\uff0c\u6216\u8005\u6a21\u578b\u672a\u5145\u5206\u4f7f\u7528\u8fd9\u4e9b\u6bb5\u843d\u3002 Relevance\uff08\u76f8\u5173\u6027\uff09\uff1a \u68c0\u7d22\u8bc4\u4f30\u7684\u76f4\u63a5\u53cd\u6620\uff0c\u8861\u91cf\u68c0\u7d22\u5230\u7684\u6bb5\u843d\u4e0e\u7528\u6237\u95ee\u9898\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff0c\u540c\u65f6\u4e5f\u4f1a\u5f71\u54cd\u751f\u6210\u8bc4\u4f30\u7684\u6574\u4f53\u8868\u73b0\u3002 \u8fd9\u4e9b\u6307\u6807\u9700\u8981\u57fa\u4e8e\u9ad8\u8d28\u91cf\u7684\u6d4b\u8bd5\u6837\u672c\u548c\u4e25\u683c\u7684\u8bc4\u4f30\u6d41\u7a0b\u3002 3 \u4f7f\u7528 Agents \u5b8c\u6210 RAG \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5 \u00b6 \u5728\u5f00\u59cb\u5177\u4f53\u6d41\u7a0b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e09\u4e2a\u4ee3\u7406\uff08Agents\uff09\u7684\u534f\u4f5c\u5173\u7cfb\uff1a \u6d4b\u8bd5\u6837\u672c\u4ee3\u7406\uff08Test Sample Agent\uff09\uff1a \u7528\u4e8e\u751f\u6210\u548c\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u6784\u6210\u4e86\u8bc4\u4f30\u7cfb\u7edf\u7684\u57fa\u7840\u3002 \u6837\u672c\u8d28\u91cf\u8bc4\u4ef7\u4ee3\u7406\uff08Critique Agent\uff09\uff1a \u5bf9\u6d4b\u8bd5\u6837\u672c\u8fdb\u884c\u8d28\u91cf\u5ba1\u6838\uff0c\u786e\u4fdd\u6700\u7ec8\u7528\u4e8e\u8bc4\u4f30\u7684\u6570\u636e\u5177\u5907\u9ad8\u51c6\u786e\u6027\u548c\u6e05\u6670\u6027\u3002 \u8bc4\u4f30\u4ee3\u7406\uff08Evaluation Agent\uff09\uff1a \u8d1f\u8d23\u6839\u636e\u8bbe\u8ba1\u7684\u6307\u6807\u5bf9\u7cfb\u7edf\u6027\u80fd\u8fdb\u884c\u91cf\u5316\u8bc4\u4f30\u3002\u8fd9\u4e9b\u8bc4\u4f30\u6307\u6807\u8986\u76d6\u4e86\u68c0\u7d22\u548c\u751f\u6210\u7684\u591a\u4e2a\u5c42\u9762\u3002 \u901a\u8fc7\u8fd9\u4e09\u79cd\u4ee3\u7406\u7684\u534f\u4f5c\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\u5316\u7684\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\u6d41\u7a0b\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u6df1\u5165\u7406\u89e3\u548c\u4f18\u5316 RAG \u7cfb\u7edf\u3002 3.1 \u751f\u6210\u6d4b\u8bd5\u6837\u672c \u00b6 \u4e3a\u4e86\u8bc4\u4f30 RAG \u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u9996\u5148\u9700\u8981\u4f7f\u7528\u6d4b\u8bd5\u6837\u672c\u4ee3\u7406\uff08Test Sample Agent\uff09 \u751f\u6210\u6d4b\u8bd5\u6837\u672c\u3002\u8fd9\u4e9b\u4ee3\u7406\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u4e00\u7ec4\u9ad8\u8d28\u91cf\u7684 QA \u6837\u672c\uff08\u95ee\u9898\u4e0e\u7b54\u6848\u5bf9\uff09\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u5148\u751f\u6210 10 \u4e2a\u6837\u672c\u7528\u4e8e\u5feb\u901f\u6d4b\u8bd5\uff0c\u7136\u540e\u4ece\u516c\u5171\u8d44\u6e90\u5e93\u52a0\u8f7d\u66f4\u591a\u6837\u672c\uff0c\u6216\u8005\u751f\u6210\u66f4\u5927\u89c4\u6a21\u7684\u6570\u636e\u96c6\u4ee5\u4f9b\u5168\u9762\u8bc4\u4f30\u3002 \u4f46\u5982\u679c\u9488\u5bf9\u7279\u5b9a\u7684\u77e5\u8bc6\u5e93\uff0c\u5efa\u8bae\u751f\u6210\u81f3\u5c11 200 \u4e2a\u6837\u672c\uff0c\u56e0\u4e3a\u540e\u7eed\u901a\u8fc7\u8bc4\u4ef7\u4ee3\u7406\u8fc7\u6ee4\u6389\u4f4e\u8d28\u91cf\u95ee\u9898\u540e\uff0c\u6700\u7ec8\u80fd\u4fdd\u7559\u7684\u6709\u6548\u6837\u672c\u7ea6\u4e3a\u4e00\u534a\u3002 \u4ee5\u4e0b\u662f\u751f\u6210QA\u6837\u672c\u7684\u63d0\u793a\u8bcd\uff1a QA_generation_prompt = \"\"\" \u4f60\u7684\u4efb\u52a1\u662f\uff1a\u6839\u636e\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\uff0c\u7f16\u5199\u4e00\u4e2a\u4e8b\u5b9e\u578b\u95ee\u9898\u53ca\u5176\u7b54\u6848\u3002 \u4f60\u63d0\u51fa\u7684\u4e8b\u5b9e\u578b\u95ee\u9898\u5e94\u80fd\u901a\u8fc7\u4e0a\u4e0b\u6587\u4e2d\u7684\u5177\u4f53\u3001\u7b80\u660e\u7684\u4e8b\u5b9e\u4fe1\u606f\u6765\u56de\u7b54\u3002 \u4f60\u7684\u95ee\u9898\u98ce\u683c\u5e94\u4e0e\u7528\u6237\u5728\u641c\u7d22\u5f15\u64ce\u4e2d\u63d0\u51fa\u7684\u95ee\u9898\u7c7b\u4f3c\u3002 \u8fd9\u610f\u5473\u7740\u4f60\u63d0\u51fa\u7684\u95ee\u9898**\u4e0d\u80fd**\u5305\u542b\u201c\u6839\u636e\u6bb5\u843d\u201d\u6216\u201c\u6839\u636e\u4e0a\u4e0b\u6587\u201d\u7b49\u63aa\u8f9e\u3002 \u8bf7\u6309\u4ee5\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4f60\u7684\u8f93\u51fa\uff1a \u8f93\u51fa : :: \u4e8b\u5b9e\u578b\u95ee\u9898\uff1a\uff08\u4f60\u7684\u95ee\u9898\uff09 \u7b54\u6848\uff1a\uff08\u4f60\u5bf9\u8be5\u95ee\u9898\u7684\u56de\u7b54\uff09 \u4ee5\u4e0b\u662f\u4e0a\u4e0b\u6587\u5185\u5bb9\uff1a \u4e0a\u4e0b\u6587\uff1a{context}\\n \u8f93\u51fa : ::\"\"\" 3.2 \u68c0\u67e5\u6837\u672c\u8d28\u91cf \u00b6 \u81ea\u52a8\u751f\u6210\u7684\u6837\u672c\u53ef\u80fd\u5b58\u5728\u8d28\u91cf\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u5f15\u5165\u6837\u672c\u8d28\u91cf\u8bc4\u4ef7\u4ee3\u7406\uff08Critique Agents\uff09 \u6765\u5bf9\u95ee\u9898\u8fdb\u884c\u8d28\u91cf\u5ba1\u67e5\u3002\u8fd9\u4e9b\u4ee3\u7406\u4f1a\u6839\u636e\u591a\u79cd\u6807\u51c6\u5bf9\u6bcf\u4e2a\u95ee\u9898\u8bc4\u5206\uff0c\u6bd4\u5982\uff1a \u95ee\u9898\u662f\u5426\u6e05\u6670\u3001\u65e0\u4e8c\u4e49\u6027\uff1f \u95ee\u9898\u662f\u5426\u9002\u5408\u7279\u5b9a\u77e5\u8bc6\u9886\u57df\uff1f \u6211\u4eec\u901a\u8fc7\u8fd9\u4e9b\u4ee3\u7406\u5bf9\u95ee\u9898\u8fdb\u884c\u7cfb\u7edf\u8bc4\u5206\u3002\u5f53\u4efb\u610f\u4e00\u4e2a\u4ee3\u7406\u7684\u8bc4\u5206\u8fc7\u4f4e\u65f6\uff0c\u76f4\u63a5\u5254\u9664\u8be5\u95ee\u9898\u3002 \u63d0\u793a\uff1a \u5f53\u8ba9\u4ee3\u7406\u751f\u6210\u5206\u6570\u65f6\uff0c\u5148\u8981\u6c42\u5176\u8f93\u51fa\u7406\u7531\uff0c\u518d\u7ed9\u51fa\u6700\u7ec8\u8bc4\u5206\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4ec5\u80fd\u5e2e\u52a9\u6211\u4eec\u9a8c\u8bc1\u8bc4\u5206\u7ed3\u679c\uff0c\u8fd8\u80fd\u4fc3\u4f7f\u4ee3\u7406\u5728\u56de\u7b54\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u66f4\u6df1\u5165\u7684\u601d\u8003\uff0c\u4ece\u800c\u63d0\u9ad8\u8bc4\u5206\u7684\u51c6\u786e\u6027\u3002 \u4ee5\u4e0b\u662f\u8bc4\u4f30\u6837\u672c\u8d28\u91cf\u7684\u63d0\u793a\u8bcd\uff1a question_groundedness_critique_prompt = \"\"\" \u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a\u4e0a\u4e0b\u6587\u548c\u4e00\u4e2a\u95ee\u9898\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u7ed9\u51fa\u4e00\u4e2a\u201c\u603b\u8bc4\u5206\u201d\uff0c\u8bc4\u4f30\u8be5\u95ee\u9898\u662f\u5426\u80fd\u591f\u901a\u8fc7\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\u660e\u786e\u65e0\u6b67\u4e49\u5730\u56de\u7b54\u3002 \u8bf7\u57281\u52305\u5206\u4e4b\u95f4\u8fdb\u884c\u8bc4\u5206\uff0c\u5176\u4e2d1\u8868\u793a\u5b8c\u5168\u65e0\u6cd5\u6839\u636e\u4e0a\u4e0b\u6587\u56de\u7b54\u8be5\u95ee\u9898\uff0c5\u8868\u793a\u80fd\u591f\u6e05\u6670\u4e14\u65e0\u6b67\u4e49\u5730\u6839\u636e\u4e0a\u4e0b\u6587\u56de\u7b54\u8be5\u95ee\u9898\u3002 \u8bf7\u6309\u4ee5\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4f60\u7684\u56de\u7b54\uff1a \u56de\u7b54 : :: \u8bc4\u4ef7\uff1a\uff08\u4f60\u5bf9\u8bc4\u5206\u7684\u7406\u7531\uff0c\u6587\u672c\u5f62\u5f0f\uff09 \u603b\u8bc4\u5206\uff1a\uff08\u4f60\u7ed9\u51fa\u7684\u8bc4\u5206\uff0c\u8303\u56f4\u4e3a1\u52305\u7684\u6570\u5b57\uff09 \u4f60\u7684\u56de\u7b54**\u5fc5\u987b\u5305\u542b**\u201c\u8bc4\u4ef7\u201d\u548c\u201c\u603b\u8bc4\u5206\u201d\u7684\u5185\u5bb9\u3002 \u73b0\u5728\u662f\u95ee\u9898\u548c\u4e0a\u4e0b\u6587\u5185\u5bb9\uff1a \u95ee\u9898\uff1a{question}\\n \u4e0a\u4e0b\u6587\uff1a{context}\\n \u56de\u7b54 : :: \"\"\" question_relevance_critique_prompt = \"\"\" \u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a\u95ee\u9898\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u7ed9\u51fa\u4e00\u4e2a\u201c\u603b\u8bc4\u5206\u201d\uff0c\u8868\u793a\u8be5\u95ee\u9898\u5bf9\u4e8e\u6b63\u5728\u4f7f\u7528 Hugging Face \u751f\u6001\u6784\u5efa\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5e94\u7528\u7684\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u8005\u6765\u8bf4\u6709\u591a\u6709\u7528\u3002 \u8bf7\u57281\u52305\u5206\u4e4b\u95f4\u8fdb\u884c\u8bc4\u5206\uff0c\u5176\u4e2d1\u8868\u793a\u5b8c\u5168\u6ca1\u6709\u7528\uff0c5\u8868\u793a\u975e\u5e38\u6709\u7528\u3002 \u8bf7\u6309\u4ee5\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4f60\u7684\u56de\u7b54\uff1a \u56de\u7b54 : :: \u8bc4\u4ef7\uff1a\uff08\u4f60\u5bf9\u8bc4\u5206\u7684\u7406\u7531\uff0c\u6587\u672c\u5f62\u5f0f\uff09 \u603b\u8bc4\u5206\uff1a\uff08\u4f60\u7ed9\u51fa\u7684\u8bc4\u5206\uff0c\u8303\u56f4\u4e3a1\u52305\u7684\u6570\u5b57\uff09 \u4f60\u7684\u56de\u7b54**\u5fc5\u987b\u5305\u542b**\u201c\u8bc4\u4ef7\u201d\u548c\u201c\u603b\u8bc4\u5206\u201d\u7684\u5185\u5bb9\u3002 \u73b0\u5728\u662f\u8be5\u95ee\u9898\uff1a \u95ee\u9898\uff1a{question}\\n \u56de\u7b54 : :: \"\"\" question_standalone_critique_prompt = \"\"\" \u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a\u95ee\u9898\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u7ed9\u51fa\u4e00\u4e2a\u201c\u603b\u8bc4\u5206\u201d\uff0c\u8bc4\u4f30\u8be5\u95ee\u9898\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u662f\u72ec\u7acb\u4e8e\u4e0a\u4e0b\u6587\u7684\u3002 \u8bf7\u57281\u52305\u5206\u4e4b\u95f4\u8fdb\u884c\u8bc4\u5206\uff0c\u5176\u4e2d1\u8868\u793a\u8be5\u95ee\u9898\u9700\u8981\u989d\u5916\u4fe1\u606f\u624d\u80fd\u7406\u89e3\uff0c5\u8868\u793a\u8be5\u95ee\u9898\u672c\u8eab\u5c31\u53ef\u4ee5\u88ab\u7406\u89e3\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u95ee\u9898\u63d0\u5230\u4e86\u201c\u5728\u8be5\u6587\u6863\u4e2d\u201d\u6216\u201c\u5728\u8be5\u4e0a\u4e0b\u6587\u4e2d\u201d\u7b49\u5b57\u6837\uff0c\u90a3\u4e48\u8bc4\u5206\u5fc5\u987b\u4e3a1\u3002 \u5373\u4f7f\u95ee\u9898\u5305\u542b\u4e13\u4e1a\u672f\u8bed\u6216\u7f29\u5199\uff08\u5982 Gradio\u3001Hub\u3001Hugging Face \u6216 Space\uff09\uff0c\u53ea\u8981\u64cd\u4f5c\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u6587\u6863\u7406\u89e3\u5176\u542b\u4e49\uff0c\u8bc4\u5206\u4e5f\u53ef\u4ee5\u662f5\u3002 \u4f8b\u5982\uff0c\u201cViT \u6a21\u578b\u662f\u4ece\u54ea\u4e2a\u68c0\u67e5\u70b9\u5bfc\u5165\u7684\uff1f\u201d \u5e94\u8be5\u5f97\u5206\u4e3a 1\uff0c\u56e0\u4e3a\u5b83\u9690\u542b\u4e86\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56\uff0c\u56e0\u6b64\u4e0d\u5177\u6709\u72ec\u7acb\u6027\u3002 \u8bf7\u6309\u4ee5\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4f60\u7684\u56de\u7b54\uff1a \u56de\u7b54 : :: \u8bc4\u4ef7\uff1a\uff08\u4f60\u5bf9\u8bc4\u5206\u7684\u7406\u7531\uff0c\u6587\u672c\u5f62\u5f0f\uff09 \u603b\u8bc4\u5206\uff1a\uff08\u4f60\u7ed9\u51fa\u7684\u8bc4\u5206\uff0c\u8303\u56f4\u4e3a1\u52305\u7684\u6570\u5b57\uff09 \u4f60\u7684\u56de\u7b54**\u5fc5\u987b\u5305\u542b**\u201c\u8bc4\u4ef7\u201d\u548c\u201c\u603b\u8bc4\u5206\u201d\u7684\u5185\u5bb9\u3002 \u73b0\u5728\u662f\u8be5\u95ee\u9898\uff1a \u95ee\u9898\uff1a{question}\\n \u56de\u7b54 : :: \"\"\" 3.3 \u8bbe\u7f6e\u8bc4\u4f30\u4ee3\u7406 \u00b6 \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u8bc4\u4f30 RAG \u7cfb\u7edf\u5728\u6d4b\u8bd5\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b8c\u6210\uff1a \u9009\u62e9\u8bc4\u4f30\u6307\u6807\uff1a \u6211\u4eec\u91cd\u70b9\u5173\u6ce8faithfulness\uff08\u53ef\u9760\u6027\uff09 \u4f5c\u4e3a\u4e3b\u8981\u6307\u6807\uff0c\u56e0\u4e3a\u5b83\u80fd\u5168\u9762\u53cd\u6620\u7cfb\u7edf\u7684\u7aef\u5230\u7aef\u6027\u80fd\u3002 \u9009\u62e9\u8bc4\u4f30\u6a21\u578b\uff1a \u4f7f\u7528 GPT-4 \u4f5c\u4e3a\u8bc4\u4f30\u4ee3\u7406\uff0c\u6216\u8005\u5c1d\u8bd5\u5176\u4ed6\u6027\u80fd\u826f\u597d\u7684\u6a21\u578b\uff0c\u5982 kaist-ai/prometheus-13b-v1.0 \u6216 BAAI/JudgeLM-33B-v1.0\u3002 \u8bbe\u8ba1\u8bc4\u4f30\u63d0\u793a\u8bcd\uff1a \u63d0\u793a\u8bcd\u9700\u8981\u8be6\u7ec6\u63cf\u8ff0\u6bcf\u4e2a\u6307\u6807\u7684\u8bc4\u5206\u6807\u51c6\uff08\u4f8b\u5982 1-5 \u5206\uff09\uff0c\u5e76\u8981\u6c42\u6a21\u578b\u5728\u8bc4\u5206\u524d\u5148\u8f93\u51fa\u8bc4\u5206\u4f9d\u636e\u3002 \u63d0\u793a\uff1a \u63d0\u4f9b\u8be6\u7ec6\u7684\u8bc4\u5206\u6807\u51c6\u6709\u52a9\u4e8e\u8bc4\u4f30\u4ee3\u7406\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u907f\u514d\u56e0\u6a21\u7cca\u6807\u51c6\u5bfc\u81f4\u8bc4\u5206\u7ed3\u679c\u7684\u6ce2\u52a8\u3002 \u4ee5\u4e0b\u662f RAG \u8bc4\u4f30\u6a21\u578b\u7684\u63d0\u793a\u8bcd\uff1a EVALUATION_PROMPT = \"\"\"### \u4efb\u52a1\u63cf\u8ff0\uff1a \u63d0\u4f9b\u4e86\u4e00\u6761\u6307\u4ee4\uff08\u53ef\u80fd\u5305\u542b\u8f93\u5165\uff09\u3001\u5f85\u8bc4\u4f30\u7684\u56de\u7b54\u3001\u5f97\u5206\u4e3a 5 \u7684\u53c2\u8003\u7b54\u6848\uff0c\u4ee5\u53ca\u8868\u793a\u8bc4\u4f30\u6807\u51c6\u7684\u8bc4\u5206\u7ec6\u5219\u3002 1. \u6839\u636e\u7ed9\u5b9a\u7684\u8bc4\u5206\u7ec6\u5219\uff0c\u4e25\u683c\u8bc4\u4f30\u56de\u7b54\u7684\u8d28\u91cf\uff0c\u64b0\u5199\u8be6\u7ec6\u7684\u53cd\u9988\uff0c\u4e0d\u8fdb\u884c\u4e00\u822c\u6027\u8bc4\u4ef7\u3002 2. \u5728\u64b0\u5199\u53cd\u9988\u540e\uff0c\u7ed9\u51fa\u4e00\u4e2a 1 \u5230 5 \u7684\u6574\u6570\u5206\u6570\uff0c\u9700\u53c2\u8003\u8bc4\u5206\u7ec6\u5219\u3002 3. \u8f93\u51fa\u683c\u5f0f\u5e94\u5982\u4e0b\uff1a\u201cFeedback: {{\u9488\u5bf9\u6807\u51c6\u7684\u53cd\u9988}} [RESULT] {{1 \u5230 5 \u7684\u6574\u6570}}\u201d 4. \u8bf7\u52ff\u751f\u6210\u5176\u4ed6\u5f00\u573a\u3001\u7ed3\u5c3e\u6216\u89e3\u91ca\u5185\u5bb9\u3002\u786e\u4fdd\u8f93\u51fa\u5305\u542b [RESULT]\u3002 ### \u5f85\u8bc4\u4f30\u7684\u6307\u4ee4\uff1a {instruction} ### \u5f85\u8bc4\u4f30\u7684\u56de\u7b54\uff1a {response} ### \u53c2\u8003\u7b54\u6848\uff08\u5f97\u5206 5\uff09\uff1a {reference_answer} ### \u8bc4\u5206\u7ec6\u5219\uff1a [\u56de\u7b54\u662f\u5426\u57fa\u4e8e\u53c2\u8003\u7b54\u6848\u6b63\u786e\u3001\u51c6\u786e\u4e14\u7b26\u5408\u4e8b\u5b9e\uff1f] \u5f97\u5206 1\uff1a\u56de\u7b54\u5b8c\u5168\u4e0d\u6b63\u786e\u3001\u4e0d\u51c6\u786e\u548c/\u6216\u4e0d\u7b26\u5408\u4e8b\u5b9e\u3002 \u5f97\u5206 2\uff1a\u56de\u7b54\u5927\u90e8\u5206\u4e0d\u6b63\u786e\u3001\u4e0d\u51c6\u786e\u548c/\u6216\u4e0d\u7b26\u5408\u4e8b\u5b9e\u3002 \u5f97\u5206 3\uff1a\u56de\u7b54\u90e8\u5206\u6b63\u786e\u3001\u51c6\u786e\u548c/\u6216\u7b26\u5408\u4e8b\u5b9e\u3002 \u5f97\u5206 4\uff1a\u56de\u7b54\u5927\u90e8\u5206\u6b63\u786e\u3001\u51c6\u786e\u4e14\u7b26\u5408\u4e8b\u5b9e\u3002 \u5f97\u5206 5\uff1a\u56de\u7b54\u5b8c\u5168\u6b63\u786e\u3001\u51c6\u786e\u4e14\u7b26\u5408\u4e8b\u5b9e\u3002 ### \u53cd\u9988\uff1a\"\"\" from langchain.prompts.chat import ( ChatPromptTemplate , HumanMessagePromptTemplate , ) from langchain.schema import SystemMessage evaluation_prompt_template = ChatPromptTemplate . from_messages ( [ SystemMessage ( content = \"You are a fair evaluator language model.\" ), HumanMessagePromptTemplate . from_template ( EVALUATION_PROMPT ), ] ) 4 \u672c\u8282\u5c0f\u7ed3 \u00b6 \u51c6\u5907\u9ad8\u8d28\u91cf\u7684\u8bc4\u4f30\u6570\u636e\u96c6\u662f\u4f18\u5316 RAG \u6027\u80fd\u7684\u57fa\u7840\u3002\u901a\u8fc7\u5f15\u5165\u751f\u6210\u4ee3\u7406\u548c\u8bc4\u4ef7\u4ee3\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\u5316\u7684\u8bc4\u4f30\u6d41\u7a0b\uff0c\u786e\u4fdd\u6bcf\u4e2a\u8c03\u6574\u90fd\u6709\u91cf\u5316\u4f9d\u636e\u3002\u8fd9\u79cd\u57fa\u4e8e\u6570\u636e\u9a71\u52a8\u7684\u65b9\u6cd5\u4e0d\u4ec5\u80fd\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u8fed\u4ee3 RAG \u7cfb\u7edf\uff0c\u8fd8\u80fd\u907f\u514d\u65e0\u6548\u5c1d\u8bd5\u5bfc\u81f4\u7684\u65f6\u95f4\u6d6a\u8d39\u3002","title":"5.3 RAG\u8bc4\u4f30\u6570\u636e\u96c6\u7684\u6784\u9020(\u6269\u5c55)"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#rag","text":"","title":"\u6784\u9020 RAG \u8bc4\u4f30\u6570\u636e\u96c6"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#_1","text":"\u638c\u63e1RAG\u6027\u80fd\u8bc4\u4f30\u7684\u6307\u6807 \u5b9e\u73b0RAG\u8bc4\u4f30\u6570\u636e\u96c6\u7684\u6784\u9020","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#1","text":"\u4f18\u5316 RAG \u4e0d\u662f\u201c\u70bc\u4e39\u201d\uff0c\u9700\u8981\u7cfb\u7edf\u7684\u65b9\u6cd5\u3002\u5f53\u6d89\u53ca\u5230\u5982\u4f55\u4f18\u5316 RAG\uff08Retrieval-Augmented Generation\uff09\u6027\u80fd\u65f6\uff0c\u8bb8\u591a\u4eba\u5f80\u5f80\u91c7\u53d6\u201c\u8bd5\u9519\u201d\u7684\u65b9\u6cd5\uff1a\u201c\u6211\u5c1d\u8bd5\u4e86\u4e00\u4e2a\u65b0\u6a21\u5757\uff0c\u95ee\u4e86\u51e0\u4e2a\u95ee\u9898\uff0c\u7b54\u6848\u770b\u8d77\u6765\u8fd8\u884c\u2026\u201d\u3002\u8fd9\u6837\u7684\u5b9a\u6027\u8bc4\u4f30\u65b9\u5f0f\u867d\u7136\u76f4\u89c2\uff0c\u4f46\u5f88\u96be\u5f97\u51fa\u53ef\u9760\u7684\u6539\u8fdb\u7ed3\u8bba\u3002 \u4f18\u5316 RAG \u6027\u80fd\u9700\u8981\u91c7\u7528\u79d1\u5b66\u5b9e\u9a8c\u7684\u65b9\u5f0f\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u8bbe\u8ba1\u91cf\u5316\u7684\u8bc4\u4f30\u6307\u6807\uff0c\u5e76\u51c6\u5907\u9ad8\u8d28\u91cf\u7684\u8bc4\u4f30\u6570\u636e\u96c6\u3002\u901a\u8fc7\u7ed3\u6784\u5316\u7684\u5b9e\u9a8c\u548c\u8bc4\u4f30\u65b9\u6cd5\uff0c\u6211\u4eec\u624d\u80fd\u660e\u786e\u4ec0\u4e48\u6837\u7684\u8c03\u6574\u4f1a\u771f\u6b63\u63d0\u5347\u6027\u80fd\u3002","title":"1 \u5f15\u8a00"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#2-rag","text":"RAG \u7cfb\u7edf\u7684\u6027\u80fd\u8bc4\u4f30\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u4e3b\u8981\u65b9\u9762\u8fdb\u884c\uff1a \u68c0\u7d22\u8bc4\u4f30\uff08Retrieval Evaluation\uff09\uff1a \u68c0\u7d22\u7684\u6bb5\u843d\u662f\u5426\u76f8\u5173\uff1f \u751f\u6210\u8bc4\u4f30\uff08Generation Evaluation\uff09\uff1a \u6a21\u578b\u751f\u6210\u7684\u7b54\u6848\u662f\u5426\u6070\u5f53\uff1f \u5bf9\u4e8e\u7aef\u5230\u7aef\u7684\u8bc4\u4f30\uff0c\u6211\u4eec\u901a\u5e38\u5173\u6ce8\u4ee5\u4e0b\u56db\u7c7b\u6307\u6807\uff1a Groundedness\uff08\u53ef\u9760\u6027\uff09\uff1a \u68c0\u7d22\u8bc4\u4f30\u4e2d\u7684\u5173\u952e\u6307\u6807\uff0c\u8bc4\u4f30\u68c0\u7d22\u7684\u6bb5\u843d\u662f\u5426\u4e3a\u751f\u6210\u7684\u7b54\u6848\u63d0\u4f9b\u4e86\u53ef\u9760\u652f\u6301\uff0c\u907f\u514d\u5e7b\u89c9\uff08hallucinations\uff09\u6216\u65e0\u5173\u4fe1\u606f\u3002\u8fd9\u662f\u751f\u6210\u8bc4\u4f30\u7684\u57fa\u7840\u3002 Completeness\uff08\u5b8c\u6574\u6027\uff09\uff1a \u751f\u6210\u8bc4\u4f30\u7684\u6838\u5fc3\u6307\u6807\uff0c\u7528\u4e8e\u8bc4\u4f30\u6a21\u578b\u7684\u56de\u7b54\u662f\u5426\u5168\u9762\u8986\u76d6\u4e86\u7528\u6237\u95ee\u9898\u7684\u6240\u6709\u65b9\u9762\uff0c\u540c\u65f6\u95f4\u63a5\u53cd\u6620\u4e86\u68c0\u7d22\u9636\u6bb5\u7684\u4fe1\u606f\u5145\u5206\u6027\u3002 Utilization\uff08\u5229\u7528\u7387\uff09\uff1a \u8fde\u63a5\u68c0\u7d22\u548c\u751f\u6210\u7684\u6865\u6881\u6307\u6807\uff0c\u7528\u6765\u8bc4\u4f30\u68c0\u7d22\u5230\u7684\u4fe1\u606f\u662f\u5426\u88ab\u6709\u6548\u5229\u7528\u3002\u5982\u679c\u5229\u7528\u7387\u4f4e\uff0c\u53ef\u80fd\u610f\u5473\u7740\u68c0\u7d22\u5230\u7684\u6bb5\u843d\u4e0e\u95ee\u9898\u65e0\u5173\uff0c\u6216\u8005\u6a21\u578b\u672a\u5145\u5206\u4f7f\u7528\u8fd9\u4e9b\u6bb5\u843d\u3002 Relevance\uff08\u76f8\u5173\u6027\uff09\uff1a \u68c0\u7d22\u8bc4\u4f30\u7684\u76f4\u63a5\u53cd\u6620\uff0c\u8861\u91cf\u68c0\u7d22\u5230\u7684\u6bb5\u843d\u4e0e\u7528\u6237\u95ee\u9898\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff0c\u540c\u65f6\u4e5f\u4f1a\u5f71\u54cd\u751f\u6210\u8bc4\u4f30\u7684\u6574\u4f53\u8868\u73b0\u3002 \u8fd9\u4e9b\u6307\u6807\u9700\u8981\u57fa\u4e8e\u9ad8\u8d28\u91cf\u7684\u6d4b\u8bd5\u6837\u672c\u548c\u4e25\u683c\u7684\u8bc4\u4f30\u6d41\u7a0b\u3002","title":"2 \u7ed3\u6784\u5316\u8bc4\u4f30 RAG \u7684\u6027\u80fd"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#3-agents-rag","text":"\u5728\u5f00\u59cb\u5177\u4f53\u6d41\u7a0b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e09\u4e2a\u4ee3\u7406\uff08Agents\uff09\u7684\u534f\u4f5c\u5173\u7cfb\uff1a \u6d4b\u8bd5\u6837\u672c\u4ee3\u7406\uff08Test Sample Agent\uff09\uff1a \u7528\u4e8e\u751f\u6210\u548c\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u6784\u6210\u4e86\u8bc4\u4f30\u7cfb\u7edf\u7684\u57fa\u7840\u3002 \u6837\u672c\u8d28\u91cf\u8bc4\u4ef7\u4ee3\u7406\uff08Critique Agent\uff09\uff1a \u5bf9\u6d4b\u8bd5\u6837\u672c\u8fdb\u884c\u8d28\u91cf\u5ba1\u6838\uff0c\u786e\u4fdd\u6700\u7ec8\u7528\u4e8e\u8bc4\u4f30\u7684\u6570\u636e\u5177\u5907\u9ad8\u51c6\u786e\u6027\u548c\u6e05\u6670\u6027\u3002 \u8bc4\u4f30\u4ee3\u7406\uff08Evaluation Agent\uff09\uff1a \u8d1f\u8d23\u6839\u636e\u8bbe\u8ba1\u7684\u6307\u6807\u5bf9\u7cfb\u7edf\u6027\u80fd\u8fdb\u884c\u91cf\u5316\u8bc4\u4f30\u3002\u8fd9\u4e9b\u8bc4\u4f30\u6307\u6807\u8986\u76d6\u4e86\u68c0\u7d22\u548c\u751f\u6210\u7684\u591a\u4e2a\u5c42\u9762\u3002 \u901a\u8fc7\u8fd9\u4e09\u79cd\u4ee3\u7406\u7684\u534f\u4f5c\uff0c\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\u5316\u7684\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\u6d41\u7a0b\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u6df1\u5165\u7406\u89e3\u548c\u4f18\u5316 RAG \u7cfb\u7edf\u3002","title":"3 \u4f7f\u7528 Agents \u5b8c\u6210 RAG \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#31","text":"\u4e3a\u4e86\u8bc4\u4f30 RAG \u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u9996\u5148\u9700\u8981\u4f7f\u7528\u6d4b\u8bd5\u6837\u672c\u4ee3\u7406\uff08Test Sample Agent\uff09 \u751f\u6210\u6d4b\u8bd5\u6837\u672c\u3002\u8fd9\u4e9b\u4ee3\u7406\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u4e00\u7ec4\u9ad8\u8d28\u91cf\u7684 QA \u6837\u672c\uff08\u95ee\u9898\u4e0e\u7b54\u6848\u5bf9\uff09\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u5148\u751f\u6210 10 \u4e2a\u6837\u672c\u7528\u4e8e\u5feb\u901f\u6d4b\u8bd5\uff0c\u7136\u540e\u4ece\u516c\u5171\u8d44\u6e90\u5e93\u52a0\u8f7d\u66f4\u591a\u6837\u672c\uff0c\u6216\u8005\u751f\u6210\u66f4\u5927\u89c4\u6a21\u7684\u6570\u636e\u96c6\u4ee5\u4f9b\u5168\u9762\u8bc4\u4f30\u3002 \u4f46\u5982\u679c\u9488\u5bf9\u7279\u5b9a\u7684\u77e5\u8bc6\u5e93\uff0c\u5efa\u8bae\u751f\u6210\u81f3\u5c11 200 \u4e2a\u6837\u672c\uff0c\u56e0\u4e3a\u540e\u7eed\u901a\u8fc7\u8bc4\u4ef7\u4ee3\u7406\u8fc7\u6ee4\u6389\u4f4e\u8d28\u91cf\u95ee\u9898\u540e\uff0c\u6700\u7ec8\u80fd\u4fdd\u7559\u7684\u6709\u6548\u6837\u672c\u7ea6\u4e3a\u4e00\u534a\u3002 \u4ee5\u4e0b\u662f\u751f\u6210QA\u6837\u672c\u7684\u63d0\u793a\u8bcd\uff1a QA_generation_prompt = \"\"\" \u4f60\u7684\u4efb\u52a1\u662f\uff1a\u6839\u636e\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\uff0c\u7f16\u5199\u4e00\u4e2a\u4e8b\u5b9e\u578b\u95ee\u9898\u53ca\u5176\u7b54\u6848\u3002 \u4f60\u63d0\u51fa\u7684\u4e8b\u5b9e\u578b\u95ee\u9898\u5e94\u80fd\u901a\u8fc7\u4e0a\u4e0b\u6587\u4e2d\u7684\u5177\u4f53\u3001\u7b80\u660e\u7684\u4e8b\u5b9e\u4fe1\u606f\u6765\u56de\u7b54\u3002 \u4f60\u7684\u95ee\u9898\u98ce\u683c\u5e94\u4e0e\u7528\u6237\u5728\u641c\u7d22\u5f15\u64ce\u4e2d\u63d0\u51fa\u7684\u95ee\u9898\u7c7b\u4f3c\u3002 \u8fd9\u610f\u5473\u7740\u4f60\u63d0\u51fa\u7684\u95ee\u9898**\u4e0d\u80fd**\u5305\u542b\u201c\u6839\u636e\u6bb5\u843d\u201d\u6216\u201c\u6839\u636e\u4e0a\u4e0b\u6587\u201d\u7b49\u63aa\u8f9e\u3002 \u8bf7\u6309\u4ee5\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4f60\u7684\u8f93\u51fa\uff1a \u8f93\u51fa : :: \u4e8b\u5b9e\u578b\u95ee\u9898\uff1a\uff08\u4f60\u7684\u95ee\u9898\uff09 \u7b54\u6848\uff1a\uff08\u4f60\u5bf9\u8be5\u95ee\u9898\u7684\u56de\u7b54\uff09 \u4ee5\u4e0b\u662f\u4e0a\u4e0b\u6587\u5185\u5bb9\uff1a \u4e0a\u4e0b\u6587\uff1a{context}\\n \u8f93\u51fa : ::\"\"\"","title":"3.1 \u751f\u6210\u6d4b\u8bd5\u6837\u672c"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#32","text":"\u81ea\u52a8\u751f\u6210\u7684\u6837\u672c\u53ef\u80fd\u5b58\u5728\u8d28\u91cf\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u5f15\u5165\u6837\u672c\u8d28\u91cf\u8bc4\u4ef7\u4ee3\u7406\uff08Critique Agents\uff09 \u6765\u5bf9\u95ee\u9898\u8fdb\u884c\u8d28\u91cf\u5ba1\u67e5\u3002\u8fd9\u4e9b\u4ee3\u7406\u4f1a\u6839\u636e\u591a\u79cd\u6807\u51c6\u5bf9\u6bcf\u4e2a\u95ee\u9898\u8bc4\u5206\uff0c\u6bd4\u5982\uff1a \u95ee\u9898\u662f\u5426\u6e05\u6670\u3001\u65e0\u4e8c\u4e49\u6027\uff1f \u95ee\u9898\u662f\u5426\u9002\u5408\u7279\u5b9a\u77e5\u8bc6\u9886\u57df\uff1f \u6211\u4eec\u901a\u8fc7\u8fd9\u4e9b\u4ee3\u7406\u5bf9\u95ee\u9898\u8fdb\u884c\u7cfb\u7edf\u8bc4\u5206\u3002\u5f53\u4efb\u610f\u4e00\u4e2a\u4ee3\u7406\u7684\u8bc4\u5206\u8fc7\u4f4e\u65f6\uff0c\u76f4\u63a5\u5254\u9664\u8be5\u95ee\u9898\u3002 \u63d0\u793a\uff1a \u5f53\u8ba9\u4ee3\u7406\u751f\u6210\u5206\u6570\u65f6\uff0c\u5148\u8981\u6c42\u5176\u8f93\u51fa\u7406\u7531\uff0c\u518d\u7ed9\u51fa\u6700\u7ec8\u8bc4\u5206\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4ec5\u80fd\u5e2e\u52a9\u6211\u4eec\u9a8c\u8bc1\u8bc4\u5206\u7ed3\u679c\uff0c\u8fd8\u80fd\u4fc3\u4f7f\u4ee3\u7406\u5728\u56de\u7b54\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u66f4\u6df1\u5165\u7684\u601d\u8003\uff0c\u4ece\u800c\u63d0\u9ad8\u8bc4\u5206\u7684\u51c6\u786e\u6027\u3002 \u4ee5\u4e0b\u662f\u8bc4\u4f30\u6837\u672c\u8d28\u91cf\u7684\u63d0\u793a\u8bcd\uff1a question_groundedness_critique_prompt = \"\"\" \u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a\u4e0a\u4e0b\u6587\u548c\u4e00\u4e2a\u95ee\u9898\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u7ed9\u51fa\u4e00\u4e2a\u201c\u603b\u8bc4\u5206\u201d\uff0c\u8bc4\u4f30\u8be5\u95ee\u9898\u662f\u5426\u80fd\u591f\u901a\u8fc7\u7ed9\u5b9a\u7684\u4e0a\u4e0b\u6587\u660e\u786e\u65e0\u6b67\u4e49\u5730\u56de\u7b54\u3002 \u8bf7\u57281\u52305\u5206\u4e4b\u95f4\u8fdb\u884c\u8bc4\u5206\uff0c\u5176\u4e2d1\u8868\u793a\u5b8c\u5168\u65e0\u6cd5\u6839\u636e\u4e0a\u4e0b\u6587\u56de\u7b54\u8be5\u95ee\u9898\uff0c5\u8868\u793a\u80fd\u591f\u6e05\u6670\u4e14\u65e0\u6b67\u4e49\u5730\u6839\u636e\u4e0a\u4e0b\u6587\u56de\u7b54\u8be5\u95ee\u9898\u3002 \u8bf7\u6309\u4ee5\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4f60\u7684\u56de\u7b54\uff1a \u56de\u7b54 : :: \u8bc4\u4ef7\uff1a\uff08\u4f60\u5bf9\u8bc4\u5206\u7684\u7406\u7531\uff0c\u6587\u672c\u5f62\u5f0f\uff09 \u603b\u8bc4\u5206\uff1a\uff08\u4f60\u7ed9\u51fa\u7684\u8bc4\u5206\uff0c\u8303\u56f4\u4e3a1\u52305\u7684\u6570\u5b57\uff09 \u4f60\u7684\u56de\u7b54**\u5fc5\u987b\u5305\u542b**\u201c\u8bc4\u4ef7\u201d\u548c\u201c\u603b\u8bc4\u5206\u201d\u7684\u5185\u5bb9\u3002 \u73b0\u5728\u662f\u95ee\u9898\u548c\u4e0a\u4e0b\u6587\u5185\u5bb9\uff1a \u95ee\u9898\uff1a{question}\\n \u4e0a\u4e0b\u6587\uff1a{context}\\n \u56de\u7b54 : :: \"\"\" question_relevance_critique_prompt = \"\"\" \u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a\u95ee\u9898\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u7ed9\u51fa\u4e00\u4e2a\u201c\u603b\u8bc4\u5206\u201d\uff0c\u8868\u793a\u8be5\u95ee\u9898\u5bf9\u4e8e\u6b63\u5728\u4f7f\u7528 Hugging Face \u751f\u6001\u6784\u5efa\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5e94\u7528\u7684\u673a\u5668\u5b66\u4e60\u5f00\u53d1\u8005\u6765\u8bf4\u6709\u591a\u6709\u7528\u3002 \u8bf7\u57281\u52305\u5206\u4e4b\u95f4\u8fdb\u884c\u8bc4\u5206\uff0c\u5176\u4e2d1\u8868\u793a\u5b8c\u5168\u6ca1\u6709\u7528\uff0c5\u8868\u793a\u975e\u5e38\u6709\u7528\u3002 \u8bf7\u6309\u4ee5\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4f60\u7684\u56de\u7b54\uff1a \u56de\u7b54 : :: \u8bc4\u4ef7\uff1a\uff08\u4f60\u5bf9\u8bc4\u5206\u7684\u7406\u7531\uff0c\u6587\u672c\u5f62\u5f0f\uff09 \u603b\u8bc4\u5206\uff1a\uff08\u4f60\u7ed9\u51fa\u7684\u8bc4\u5206\uff0c\u8303\u56f4\u4e3a1\u52305\u7684\u6570\u5b57\uff09 \u4f60\u7684\u56de\u7b54**\u5fc5\u987b\u5305\u542b**\u201c\u8bc4\u4ef7\u201d\u548c\u201c\u603b\u8bc4\u5206\u201d\u7684\u5185\u5bb9\u3002 \u73b0\u5728\u662f\u8be5\u95ee\u9898\uff1a \u95ee\u9898\uff1a{question}\\n \u56de\u7b54 : :: \"\"\" question_standalone_critique_prompt = \"\"\" \u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a\u95ee\u9898\u3002 \u4f60\u7684\u4efb\u52a1\u662f\u7ed9\u51fa\u4e00\u4e2a\u201c\u603b\u8bc4\u5206\u201d\uff0c\u8bc4\u4f30\u8be5\u95ee\u9898\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u662f\u72ec\u7acb\u4e8e\u4e0a\u4e0b\u6587\u7684\u3002 \u8bf7\u57281\u52305\u5206\u4e4b\u95f4\u8fdb\u884c\u8bc4\u5206\uff0c\u5176\u4e2d1\u8868\u793a\u8be5\u95ee\u9898\u9700\u8981\u989d\u5916\u4fe1\u606f\u624d\u80fd\u7406\u89e3\uff0c5\u8868\u793a\u8be5\u95ee\u9898\u672c\u8eab\u5c31\u53ef\u4ee5\u88ab\u7406\u89e3\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u95ee\u9898\u63d0\u5230\u4e86\u201c\u5728\u8be5\u6587\u6863\u4e2d\u201d\u6216\u201c\u5728\u8be5\u4e0a\u4e0b\u6587\u4e2d\u201d\u7b49\u5b57\u6837\uff0c\u90a3\u4e48\u8bc4\u5206\u5fc5\u987b\u4e3a1\u3002 \u5373\u4f7f\u95ee\u9898\u5305\u542b\u4e13\u4e1a\u672f\u8bed\u6216\u7f29\u5199\uff08\u5982 Gradio\u3001Hub\u3001Hugging Face \u6216 Space\uff09\uff0c\u53ea\u8981\u64cd\u4f5c\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u6587\u6863\u7406\u89e3\u5176\u542b\u4e49\uff0c\u8bc4\u5206\u4e5f\u53ef\u4ee5\u662f5\u3002 \u4f8b\u5982\uff0c\u201cViT \u6a21\u578b\u662f\u4ece\u54ea\u4e2a\u68c0\u67e5\u70b9\u5bfc\u5165\u7684\uff1f\u201d \u5e94\u8be5\u5f97\u5206\u4e3a 1\uff0c\u56e0\u4e3a\u5b83\u9690\u542b\u4e86\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56\uff0c\u56e0\u6b64\u4e0d\u5177\u6709\u72ec\u7acb\u6027\u3002 \u8bf7\u6309\u4ee5\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4f60\u7684\u56de\u7b54\uff1a \u56de\u7b54 : :: \u8bc4\u4ef7\uff1a\uff08\u4f60\u5bf9\u8bc4\u5206\u7684\u7406\u7531\uff0c\u6587\u672c\u5f62\u5f0f\uff09 \u603b\u8bc4\u5206\uff1a\uff08\u4f60\u7ed9\u51fa\u7684\u8bc4\u5206\uff0c\u8303\u56f4\u4e3a1\u52305\u7684\u6570\u5b57\uff09 \u4f60\u7684\u56de\u7b54**\u5fc5\u987b\u5305\u542b**\u201c\u8bc4\u4ef7\u201d\u548c\u201c\u603b\u8bc4\u5206\u201d\u7684\u5185\u5bb9\u3002 \u73b0\u5728\u662f\u8be5\u95ee\u9898\uff1a \u95ee\u9898\uff1a{question}\\n \u56de\u7b54 : :: \"\"\"","title":"3.2 \u68c0\u67e5\u6837\u672c\u8d28\u91cf"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#33","text":"\u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u8bc4\u4f30 RAG \u7cfb\u7edf\u5728\u6d4b\u8bd5\u6570\u636e\u96c6\u4e0a\u7684\u8868\u73b0\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5b8c\u6210\uff1a \u9009\u62e9\u8bc4\u4f30\u6307\u6807\uff1a \u6211\u4eec\u91cd\u70b9\u5173\u6ce8faithfulness\uff08\u53ef\u9760\u6027\uff09 \u4f5c\u4e3a\u4e3b\u8981\u6307\u6807\uff0c\u56e0\u4e3a\u5b83\u80fd\u5168\u9762\u53cd\u6620\u7cfb\u7edf\u7684\u7aef\u5230\u7aef\u6027\u80fd\u3002 \u9009\u62e9\u8bc4\u4f30\u6a21\u578b\uff1a \u4f7f\u7528 GPT-4 \u4f5c\u4e3a\u8bc4\u4f30\u4ee3\u7406\uff0c\u6216\u8005\u5c1d\u8bd5\u5176\u4ed6\u6027\u80fd\u826f\u597d\u7684\u6a21\u578b\uff0c\u5982 kaist-ai/prometheus-13b-v1.0 \u6216 BAAI/JudgeLM-33B-v1.0\u3002 \u8bbe\u8ba1\u8bc4\u4f30\u63d0\u793a\u8bcd\uff1a \u63d0\u793a\u8bcd\u9700\u8981\u8be6\u7ec6\u63cf\u8ff0\u6bcf\u4e2a\u6307\u6807\u7684\u8bc4\u5206\u6807\u51c6\uff08\u4f8b\u5982 1-5 \u5206\uff09\uff0c\u5e76\u8981\u6c42\u6a21\u578b\u5728\u8bc4\u5206\u524d\u5148\u8f93\u51fa\u8bc4\u5206\u4f9d\u636e\u3002 \u63d0\u793a\uff1a \u63d0\u4f9b\u8be6\u7ec6\u7684\u8bc4\u5206\u6807\u51c6\u6709\u52a9\u4e8e\u8bc4\u4f30\u4ee3\u7406\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u907f\u514d\u56e0\u6a21\u7cca\u6807\u51c6\u5bfc\u81f4\u8bc4\u5206\u7ed3\u679c\u7684\u6ce2\u52a8\u3002 \u4ee5\u4e0b\u662f RAG \u8bc4\u4f30\u6a21\u578b\u7684\u63d0\u793a\u8bcd\uff1a EVALUATION_PROMPT = \"\"\"### \u4efb\u52a1\u63cf\u8ff0\uff1a \u63d0\u4f9b\u4e86\u4e00\u6761\u6307\u4ee4\uff08\u53ef\u80fd\u5305\u542b\u8f93\u5165\uff09\u3001\u5f85\u8bc4\u4f30\u7684\u56de\u7b54\u3001\u5f97\u5206\u4e3a 5 \u7684\u53c2\u8003\u7b54\u6848\uff0c\u4ee5\u53ca\u8868\u793a\u8bc4\u4f30\u6807\u51c6\u7684\u8bc4\u5206\u7ec6\u5219\u3002 1. \u6839\u636e\u7ed9\u5b9a\u7684\u8bc4\u5206\u7ec6\u5219\uff0c\u4e25\u683c\u8bc4\u4f30\u56de\u7b54\u7684\u8d28\u91cf\uff0c\u64b0\u5199\u8be6\u7ec6\u7684\u53cd\u9988\uff0c\u4e0d\u8fdb\u884c\u4e00\u822c\u6027\u8bc4\u4ef7\u3002 2. \u5728\u64b0\u5199\u53cd\u9988\u540e\uff0c\u7ed9\u51fa\u4e00\u4e2a 1 \u5230 5 \u7684\u6574\u6570\u5206\u6570\uff0c\u9700\u53c2\u8003\u8bc4\u5206\u7ec6\u5219\u3002 3. \u8f93\u51fa\u683c\u5f0f\u5e94\u5982\u4e0b\uff1a\u201cFeedback: {{\u9488\u5bf9\u6807\u51c6\u7684\u53cd\u9988}} [RESULT] {{1 \u5230 5 \u7684\u6574\u6570}}\u201d 4. \u8bf7\u52ff\u751f\u6210\u5176\u4ed6\u5f00\u573a\u3001\u7ed3\u5c3e\u6216\u89e3\u91ca\u5185\u5bb9\u3002\u786e\u4fdd\u8f93\u51fa\u5305\u542b [RESULT]\u3002 ### \u5f85\u8bc4\u4f30\u7684\u6307\u4ee4\uff1a {instruction} ### \u5f85\u8bc4\u4f30\u7684\u56de\u7b54\uff1a {response} ### \u53c2\u8003\u7b54\u6848\uff08\u5f97\u5206 5\uff09\uff1a {reference_answer} ### \u8bc4\u5206\u7ec6\u5219\uff1a [\u56de\u7b54\u662f\u5426\u57fa\u4e8e\u53c2\u8003\u7b54\u6848\u6b63\u786e\u3001\u51c6\u786e\u4e14\u7b26\u5408\u4e8b\u5b9e\uff1f] \u5f97\u5206 1\uff1a\u56de\u7b54\u5b8c\u5168\u4e0d\u6b63\u786e\u3001\u4e0d\u51c6\u786e\u548c/\u6216\u4e0d\u7b26\u5408\u4e8b\u5b9e\u3002 \u5f97\u5206 2\uff1a\u56de\u7b54\u5927\u90e8\u5206\u4e0d\u6b63\u786e\u3001\u4e0d\u51c6\u786e\u548c/\u6216\u4e0d\u7b26\u5408\u4e8b\u5b9e\u3002 \u5f97\u5206 3\uff1a\u56de\u7b54\u90e8\u5206\u6b63\u786e\u3001\u51c6\u786e\u548c/\u6216\u7b26\u5408\u4e8b\u5b9e\u3002 \u5f97\u5206 4\uff1a\u56de\u7b54\u5927\u90e8\u5206\u6b63\u786e\u3001\u51c6\u786e\u4e14\u7b26\u5408\u4e8b\u5b9e\u3002 \u5f97\u5206 5\uff1a\u56de\u7b54\u5b8c\u5168\u6b63\u786e\u3001\u51c6\u786e\u4e14\u7b26\u5408\u4e8b\u5b9e\u3002 ### \u53cd\u9988\uff1a\"\"\" from langchain.prompts.chat import ( ChatPromptTemplate , HumanMessagePromptTemplate , ) from langchain.schema import SystemMessage evaluation_prompt_template = ChatPromptTemplate . from_messages ( [ SystemMessage ( content = \"You are a fair evaluator language model.\" ), HumanMessagePromptTemplate . from_template ( EVALUATION_PROMPT ), ] )","title":"3.3 \u8bbe\u7f6e\u8bc4\u4f30\u4ee3\u7406"},{"location":"%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9ARAG%E7%B3%BB%E7%BB%9F%E8%AF%84%E4%BC%B0/03-RAG%E8%AF%84%E4%BC%B0%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E6%9E%84%E9%80%A0%28%E6%89%A9%E5%B1%95%29.html#4","text":"\u51c6\u5907\u9ad8\u8d28\u91cf\u7684\u8bc4\u4f30\u6570\u636e\u96c6\u662f\u4f18\u5316 RAG \u6027\u80fd\u7684\u57fa\u7840\u3002\u901a\u8fc7\u5f15\u5165\u751f\u6210\u4ee3\u7406\u548c\u8bc4\u4ef7\u4ee3\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u7cfb\u7edf\u5316\u7684\u8bc4\u4f30\u6d41\u7a0b\uff0c\u786e\u4fdd\u6bcf\u4e2a\u8c03\u6574\u90fd\u6709\u91cf\u5316\u4f9d\u636e\u3002\u8fd9\u79cd\u57fa\u4e8e\u6570\u636e\u9a71\u52a8\u7684\u65b9\u6cd5\u4e0d\u4ec5\u80fd\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u8fed\u4ee3 RAG \u7cfb\u7edf\uff0c\u8fd8\u80fd\u907f\u514d\u65e0\u6548\u5c1d\u8bd5\u5bfc\u81f4\u7684\u65f6\u95f4\u6d6a\u8d39\u3002","title":"4 \u672c\u8282\u5c0f\u7ed3"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html","text":"\u878d\u5408 FAQ \u548c\u77e5\u8bc6\u5e93\u67e5\u8be2 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u00b6 \u7406\u89e3\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u7684\u7aef\u5230\u7aef\u5de5\u4f5c\u6d41\u7a0b\u3002 \u638c\u63e1 MySQL FAQ \u548c RAG \u7cfb\u7edf\u7684\u96c6\u6210\u4e0e\u534f\u8c03\u3002 \u5b66\u4e60\u5982\u4f55\u901a\u8fc7\u65e5\u5fd7\u8bb0\u5f55\u548c\u9519\u8bef\u5904\u7406\u63d0\u5347\u7cfb\u7edf\u5065\u58ee\u6027\u3002 old_main.py \u662f\u4e00\u4e2a\u878d\u5408 MySQL FAQ \u548c RAG \u7cfb\u7edf\u7684\u4ea4\u4e92\u5f0f\u95ee\u7b54\u7a0b\u5e8f\uff0c\u4e13\u6ce8\u4e8e\u5feb\u901f\u3001\u7cbe\u51c6\u7684\u7b54\u6848\u751f\u6210\u3002\u5b83\u901a\u8fc7 MySQL \u63d0\u4f9b\u7ed3\u6784\u5316\u6570\u636e\u7684\u9ad8\u6548\u67e5\u8be2\uff0c\u901a\u8fc7 RAG \u7cfb\u7edf\u5904\u7406\u590d\u6742\u95ee\u9898\uff0c\u540c\u65f6\u914d\u5907\u65e5\u5fd7\u8bb0\u5f55\u548c\u7528\u6237\u53cb\u597d\u7684\u547d\u4ee4\u884c\u754c\u9762\uff0c\u9002\u5408\u6559\u80b2\u573a\u666f\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42\u3002 1 \u67e5\u8be2\u6d41\u7a0b\u56fe \u00b6 \u4ee5\u4e0b\u662f\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u7684\u67e5\u8be2\u6d41\u7a0b\u56fe\uff0c\u5c55\u793a\u4ece\u7528\u6237\u8f93\u5165\u5230\u7b54\u6848\u8f93\u51fa\u7684\u5b8c\u6574\u903b\u8f91\u3002 2 \u6d41\u7a0b\u8bf4\u660e \u00b6 \u8f93\u5165\u5904\u7406 \uff1a\u7528\u6237\u63d0\u4f9b\u67e5\u8be2 ( query ) \u548c\u53ef\u9009\u7684\u5b66\u79d1\u8fc7\u6ee4 ( source_filter )\u3002 BM25 \u641c\u7d22 \uff1a\u4f7f\u7528 BM25 \u7b97\u6cd5\u5728 MySQL \u77e5\u8bc6\u5e93\u4e2d\u641c\u7d22\uff0c\u8bbe\u7f6e\u76f8\u4f3c\u5ea6\u9608\u503c 0.85\u3002 \u7b54\u6848\u5224\u65ad \uff1a \u82e5\u627e\u5230\u53ef\u9760\u7b54\u6848\uff08\u76f8\u4f3c\u5ea6 > 0.85\uff09\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u82e5\u65e0\u53ef\u9760\u7b54\u6848\u4e14\u9700\u8981 RAG\uff0c\u8c03\u7528 RAG \u7cfb\u7edf\u751f\u6210\u7b54\u6848\u3002 \u82e5\u65e0\u9700 RAG\uff0c\u8fd4\u56de\u201c\u672a\u627e\u5230\u7b54\u6848\u201d\u3002 \u65e5\u5fd7\u8bb0\u5f55 \uff1a\u8bb0\u5f55\u67e5\u8be2\u5185\u5bb9\u3001\u7b54\u6848\u548c\u5904\u7406\u65f6\u95f4\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u6027\u80fd\u5206\u6790\u3002 \u8f93\u51fa \uff1a\u5c06\u7b54\u6848\u8fd4\u56de\u7ed9\u7528\u6237\u3002 3 \u4ee3\u7801\u4ecb\u7ecd \u00b6 \u4ee5\u4e0b\u662f old_main.py \u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u5305\u542b\u8be6\u7ec6\u6ce8\u91ca\uff0c\u9010\u884c\u89e3\u6790\u529f\u80fd\u4e0e\u5b9e\u73b0\u903b\u8f91\u3002 3.1 \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u00b6 # \u5bfc\u5165 MySQL \u7cfb\u7edf\u7ec4\u4ef6\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u64cd\u4f5c\u548c\u641c\u7d22 from mysql_qa import MySQLClient , RedisClient , BM25Search # \u5bfc\u5165 RAG \u7cfb\u7edf\u7ec4\u4ef6\uff0c\u7528\u4e8e\u77e5\u8bc6\u5e93\u68c0\u7d22\u548c\u7b54\u6848\u751f\u6210 from rag_qa import VectorStore , RAGSystem # \u5bfc\u5165\u914d\u7f6e\u548c\u65e5\u5fd7\u5de5\u5177\uff0c\u7528\u4e8e\u7cfb\u7edf\u914d\u7f6e\u548c\u65e5\u5fd7\u8bb0\u5f55 from base import logger , Config # \u5bfc\u5165 OpenAI \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u8c03\u7528 DashScope API from openai import OpenAI # \u5bfc\u5165\u65f6\u95f4\u5e93\uff0c\u7528\u4e8e\u8bb0\u5f55\u5904\u7406\u65f6\u95f4 import time 3.2 \u7cfb\u7edf\u521d\u59cb\u5316 \u00b6 ( __init__ ) \u521d\u59cb\u5316\u65b9\u6cd5 \u529f\u80fd \uff1a\u521d\u59cb\u5316\u65e5\u5fd7\u3001\u914d\u7f6e\u3001\u6570\u636e\u5e93\u5ba2\u6237\u7aef\u3001\u641c\u7d22\u6a21\u5757\u3001\u5411\u91cf\u5b58\u50a8\u548c RAG \u7cfb\u7edf\u3002 \u5173\u952e\u70b9 \uff1a\u901a\u8fc7 Config \u7ba1\u7406 API \u5bc6\u94a5\u548c\u6a21\u578b\u53c2\u6570\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd OpenAI \u5ba2\u6237\u7aef\u521d\u59cb\u5316\u6210\u529f\u3002 class IntegratedQASystem : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7\u5de5\u5177\uff0c\u7528\u4e8e\u8bb0\u5f55\u7cfb\u7edf\u8fd0\u884c\u4fe1\u606f self . logger = logger # \u521d\u59cb\u5316\u914d\u7f6e\u5bf9\u8c61\uff0c\u52a0\u8f7d\u7cfb\u7edf\u53c2\u6570 self . config = Config () # \u521d\u59cb\u5316 MySQL \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u64cd\u4f5c self . mysql_client = MySQLClient () # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u7f13\u5b58\u7ba1\u7406 self . redis_client = RedisClient () # \u521d\u59cb\u5316 BM25 \u641c\u7d22\u6a21\u5757\uff0c\u7ed3\u5408 MySQL \u548c Redis self . bm25_search = BM25Search ( self . redis_client , self . mysql_client ) try : # \u521d\u59cb\u5316 OpenAI \u5ba2\u6237\u7aef\uff0c\u8fde\u63a5 DashScope API self . client = OpenAI ( api_key = self . config . DASHSCOPE_API_KEY , base_url = self . config . DASHSCOPE_BASE_URL ) except Exception as e : # \u8bb0\u5f55 OpenAI \u521d\u59cb\u5316\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"OpenAI \u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25: { e } \" ) # \u629b\u51fa\u5f02\u5e38\uff0c\u7ec8\u6b62\u521d\u59cb\u5316 raise # \u521d\u59cb\u5316\u5411\u91cf\u5b58\u50a8\uff0c\u7528\u4e8e RAG \u7cfb\u7edf\u7684\u77e5\u8bc6\u5e93\u7ba1\u7406 self . vector_store = VectorStore () # \u521d\u59cb\u5316 RAG \u7cfb\u7edf\uff0c\u4f20\u5165\u5411\u91cf\u5b58\u50a8\u548c DashScope API \u8c03\u7528\u51fd\u6570 self . rag_system = RAGSystem ( self . vector_store , self . call_dashscope ) 3.3 \u8c03\u7528 DashScope API \u00b6 ( call_dashscope ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u901a\u8fc7 OpenAI \u5ba2\u6237\u7aef\u8c03\u7528 DashScope API\uff0c\u57fa\u4e8e\u7528\u6237\u63d0\u793a\u751f\u6210\u7b54\u6848\u3002 \u5173\u952e\u70b9 \uff1a\u8bbe\u7f6e\u7cfb\u7edf\u63d0\u793a\u4e3a\u201c\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\u201d\uff0c\u5f02\u5e38\u5904\u7406\u6355\u83b7 API \u8c03\u7528\u5931\u8d25\uff0c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u3002 def call_dashscope ( self , prompt ): # \u5b9a\u4e49\u8c03\u7528 DashScope API \u7684\u65b9\u6cd5\uff0c\u751f\u6210\u81ea\u7136\u8bed\u8a00\u7b54\u6848 try : # \u521b\u5efa\u804a\u5929\u5b8c\u6210\u8bf7\u6c42\uff0c\u8c03\u7528 DashScope API completion = self . client . chat . completions . create ( model = self . config . LLM_MODEL , # \u4f7f\u7528\u914d\u7f6e\u4e2d\u7684\u8bed\u8a00\u6a21\u578b messages = [ { \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\u3002\" }, # \u7cfb\u7edf\u63d0\u793a { \"role\" : \"user\" , \"content\" : prompt }, # \u7528\u6237\u8f93\u5165\u7684\u63d0\u793a ] ) # \u68c0\u67e5\u54cd\u5e94\u662f\u5426\u6709\u6548\uff0c\u8fd4\u56de\u7b54\u6848\u5185\u5bb9 return completion . choices [ 0 ] . message . content if completion . choices else \"\u9519\u8bef\uff1a\u65e0\u6548\u7684 LLM \u54cd\u5e94\" except Exception as e : # \u8bb0\u5f55 API \u8c03\u7528\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"LLM \u8c03\u7528\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u4fbf\u4e8e\u8c03\u8bd5 return f \"\u9519\u8bef\uff1aLLM \u8c03\u7528\u5931\u8d25 - { e } \" 3.4 \u67e5\u8be2\u5904\u7406 \u00b6 ( query ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5904\u7406\u7528\u6237\u67e5\u8be2\uff0c\u4f18\u5148\u901a\u8fc7 BM25 \u641c\u7d22 MySQL\uff0c\u82e5\u65e0\u53ef\u9760\u7b54\u6848\u5219\u56de\u9000\u5230 RAG \u7cfb\u7edf\u3002 \u5173\u952e\u70b9 \uff1a\u8bbe\u7f6e BM25 \u76f8\u4f3c\u5ea6\u9608\u503c 0.85\uff0c\u8bb0\u5f55\u67e5\u8be2\u548c\u5904\u7406\u65f6\u95f4\uff0c\u652f\u6301\u5b66\u79d1\u8fc7\u6ee4\u3002 def query ( self , query , source_filter = None ): # \u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5\uff0c\u5904\u7406\u7528\u6237\u8f93\u5165\u7684\u67e5\u8be2 start_time = time . time () # \u8bb0\u5f55\u67e5\u8be2\u5f00\u59cb\u65f6\u95f4 # \u8bb0\u5f55\u67e5\u8be2\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( f \"\u5904\u7406\u67e5\u8be2: ' { query } '\" ) # \u6267\u884c BM25 \u641c\u7d22\uff0c\u83b7\u53d6\u7b54\u6848\u548c\u662f\u5426\u9700\u8981 RAG \u7684\u6807\u5fd7 answer , need_rag = self . bm25_search . search ( query , threshold = 0.85 ) if answer : # \u5982\u679c\u627e\u5230\u53ef\u9760\u7b54\u6848\uff0c\u8bb0\u5f55\u7b54\u6848\u5230\u65e5\u5fd7 self . logger . info ( f \"MySQL \u7b54\u6848: { answer } \" ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de MySQL \u7b54\u6848 return answer elif need_rag : # \u5982\u679c\u9700\u8981 RAG\uff0c\u8bb0\u5f55\u56de\u9000\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( \"\u65e0\u53ef\u9760 MySQL \u7b54\u6848\uff0c\u56de\u9000\u5230 RAG\" ) # \u8c03\u7528 RAG \u7cfb\u7edf\u751f\u6210\u7b54\u6848\uff0c\u652f\u6301\u5b66\u79d1\u8fc7\u6ee4 answer = self . rag_system . generate_answer ( query , source_filter = source_filter ) # \u8bb0\u5f55 RAG \u7b54\u6848\u5230\u65e5\u5fd7 self . logger . info ( f \"RAG \u7b54\u6848: { answer } \" ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de RAG \u7b54\u6848 return answer else : # \u5982\u679c\u65e0\u7b54\u6848\uff0c\u8bb0\u5f55\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( \"\u672a\u627e\u5230\u7b54\u6848\" ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de\u9ed8\u8ba4\u7b54\u6848 return \"\u672a\u627e\u5230\u7b54\u6848\" 3.5 \u547d\u4ee4\u884c\u4ea4\u4e92 \u00b6 ( main ) \u51fd\u6570 \u529f\u80fd \uff1a\u63d0\u4f9b\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u754c\u9762\uff0c\u63a5\u53d7\u7528\u6237\u67e5\u8be2\u548c\u5b66\u79d1\u8fc7\u6ee4\uff0c\u663e\u793a\u7b54\u6848\u3002 \u5173\u952e\u70b9 \uff1a\u9a8c\u8bc1\u5b66\u79d1\u8fc7\u6ee4\u7684\u6709\u6548\u6027\uff0c\u5f02\u5e38\u5904\u7406\u548c\u8d44\u6e90\u6e05\u7406\u786e\u4fdd\u7cfb\u7edf\u5065\u58ee\u3002 def main (): # \u5b9a\u4e49\u4e3b\u51fd\u6570\uff0c\u63d0\u4f9b\u547d\u4ee4\u884c\u4ea4\u4e92\u754c\u9762 qa_system = IntegratedQASystem () # \u521d\u59cb\u5316\u95ee\u7b54\u7cfb\u7edf try : # \u6253\u5370\u6b22\u8fce\u4fe1\u606f print ( \" \\n \u6b22\u8fce\u4f7f\u7528\u96c6\u6210\u95ee\u7b54\u7cfb\u7edf\uff01\" ) # \u6253\u5370\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b print ( f \"\u652f\u6301\u7684\u6765\u6e90: { qa_system . config . VALID_SOURCES } \" ) # \u63d0\u793a\u7528\u6237\u8f93\u5165\u67e5\u8be2\u6216\u9000\u51fa print ( \"\u8f93\u5165\u67e5\u8be2\u8fdb\u884c\u95ee\u7b54\uff0c\u8f93\u5165 'exit' \u9000\u51fa\u3002\" ) while True : # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u67e5\u8be2 query = input ( \" \\n \u8f93\u5165\u67e5\u8be2: \" ) . strip () if query . lower () == \"exit\" : # \u5982\u679c\u7528\u6237\u8f93\u5165 exit\uff0c\u8bb0\u5f55\u9000\u51fa\u65e5\u5fd7 logger . info ( \"\u9000\u51fa\u7cfb\u7edf\" ) # \u6253\u5370\u9000\u51fa\u4fe1\u606f print ( \"\u518d\u89c1\uff01\" ) # \u9000\u51fa\u5faa\u73af break # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b66\u79d1\u8fc7\u6ee4 source_filter = input ( f \"\u8f93\u5165\u6765\u6e90\u8fc7\u6ee4 ( { '/' . join ( qa_system . config . VALID_SOURCES ) } ) (\u6309 Enter \u8df3\u8fc7): \" ) . strip () if source_filter and source_filter not in qa_system . config . VALID_SOURCES : # \u5982\u679c\u5b66\u79d1\u8fc7\u6ee4\u65e0\u6548\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7 logger . warning ( f \"\u65e0\u6548\u6765\u6e90 ' { source_filter } '\uff0c\u5ffd\u7565\u8fc7\u6ee4\" ) # \u6253\u5370\u65e0\u6548\u4fe1\u606f\uff0c\u5ffd\u7565\u8fc7\u6ee4 print ( f \"\u65e0\u6548\u6765\u6e90 ' { source_filter } '\uff0c\u7ee7\u7eed\u65e0\u8fc7\u6ee4\u3002\" ) source_filter = None # \u6267\u884c\u67e5\u8be2\uff0c\u83b7\u53d6\u7b54\u6848 answer = qa_system . query ( query , source_filter ) # \u6253\u5370\u7b54\u6848 print ( f \" \\n \u7b54\u6848: { answer } \" ) except Exception as e : # \u8bb0\u5f55\u7cfb\u7edf\u9519\u8bef\u65e5\u5fd7 logger . error ( f \"\u7cfb\u7edf\u9519\u8bef: { e } \" ) # \u6253\u5370\u9519\u8bef\u4fe1\u606f print ( f \"\u53d1\u751f\u9519\u8bef: { e } \" ) finally : # \u65e0\u8bba\u662f\u5426\u53d1\u751f\u9519\u8bef\uff0c\u5173\u95ed MySQL \u8fde\u63a5 qa_system . mysql_client . close () if __name__ == \"__main__\" : # \u5982\u679c\u811a\u672c\u4f5c\u4e3a\u4e3b\u7a0b\u5e8f\u8fd0\u884c\uff0c\u8c03\u7528 main \u51fd\u6570 main () \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u7ae0\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7 old_main.py \u6784\u5efa\u4e00\u4e2a\u878d\u5408 MySQL FAQ \u548c RAG \u7684\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u3002\u7cfb\u7edf\u5229\u7528 BM25 \u7b97\u6cd5\u5feb\u901f\u5339\u914d\u7ed3\u6784\u5316\u6570\u636e\uff0cRAG \u7cfb\u7edf\u5904\u7406\u590d\u6742\u67e5\u8be2\uff0c\u914d\u5907\u65e5\u5fd7\u8bb0\u5f55\u548c\u9519\u8bef\u5904\u7406\uff0c\u9002\u5408\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42\u3002","title":"6.1 \u878d\u5408FQA\u548c\u77e5\u8bc6\u5e93\u67e5\u8be2"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#faq","text":"","title":"\u878d\u5408 FAQ \u548c\u77e5\u8bc6\u5e93\u67e5\u8be2"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#_1","text":"\u7406\u89e3\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u7684\u7aef\u5230\u7aef\u5de5\u4f5c\u6d41\u7a0b\u3002 \u638c\u63e1 MySQL FAQ \u548c RAG \u7cfb\u7edf\u7684\u96c6\u6210\u4e0e\u534f\u8c03\u3002 \u5b66\u4e60\u5982\u4f55\u901a\u8fc7\u65e5\u5fd7\u8bb0\u5f55\u548c\u9519\u8bef\u5904\u7406\u63d0\u5347\u7cfb\u7edf\u5065\u58ee\u6027\u3002 old_main.py \u662f\u4e00\u4e2a\u878d\u5408 MySQL FAQ \u548c RAG \u7cfb\u7edf\u7684\u4ea4\u4e92\u5f0f\u95ee\u7b54\u7a0b\u5e8f\uff0c\u4e13\u6ce8\u4e8e\u5feb\u901f\u3001\u7cbe\u51c6\u7684\u7b54\u6848\u751f\u6210\u3002\u5b83\u901a\u8fc7 MySQL \u63d0\u4f9b\u7ed3\u6784\u5316\u6570\u636e\u7684\u9ad8\u6548\u67e5\u8be2\uff0c\u901a\u8fc7 RAG \u7cfb\u7edf\u5904\u7406\u590d\u6742\u95ee\u9898\uff0c\u540c\u65f6\u914d\u5907\u65e5\u5fd7\u8bb0\u5f55\u548c\u7528\u6237\u53cb\u597d\u7684\u547d\u4ee4\u884c\u754c\u9762\uff0c\u9002\u5408\u6559\u80b2\u573a\u666f\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42\u3002","title":"\u5b66\u4e60\u76ee\u6807\uff1a"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#1","text":"\u4ee5\u4e0b\u662f\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u7684\u67e5\u8be2\u6d41\u7a0b\u56fe\uff0c\u5c55\u793a\u4ece\u7528\u6237\u8f93\u5165\u5230\u7b54\u6848\u8f93\u51fa\u7684\u5b8c\u6574\u903b\u8f91\u3002","title":"1 \u67e5\u8be2\u6d41\u7a0b\u56fe"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#2","text":"\u8f93\u5165\u5904\u7406 \uff1a\u7528\u6237\u63d0\u4f9b\u67e5\u8be2 ( query ) \u548c\u53ef\u9009\u7684\u5b66\u79d1\u8fc7\u6ee4 ( source_filter )\u3002 BM25 \u641c\u7d22 \uff1a\u4f7f\u7528 BM25 \u7b97\u6cd5\u5728 MySQL \u77e5\u8bc6\u5e93\u4e2d\u641c\u7d22\uff0c\u8bbe\u7f6e\u76f8\u4f3c\u5ea6\u9608\u503c 0.85\u3002 \u7b54\u6848\u5224\u65ad \uff1a \u82e5\u627e\u5230\u53ef\u9760\u7b54\u6848\uff08\u76f8\u4f3c\u5ea6 > 0.85\uff09\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u82e5\u65e0\u53ef\u9760\u7b54\u6848\u4e14\u9700\u8981 RAG\uff0c\u8c03\u7528 RAG \u7cfb\u7edf\u751f\u6210\u7b54\u6848\u3002 \u82e5\u65e0\u9700 RAG\uff0c\u8fd4\u56de\u201c\u672a\u627e\u5230\u7b54\u6848\u201d\u3002 \u65e5\u5fd7\u8bb0\u5f55 \uff1a\u8bb0\u5f55\u67e5\u8be2\u5185\u5bb9\u3001\u7b54\u6848\u548c\u5904\u7406\u65f6\u95f4\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u6027\u80fd\u5206\u6790\u3002 \u8f93\u51fa \uff1a\u5c06\u7b54\u6848\u8fd4\u56de\u7ed9\u7528\u6237\u3002","title":"2 \u6d41\u7a0b\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#3","text":"\u4ee5\u4e0b\u662f old_main.py \u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u5305\u542b\u8be6\u7ec6\u6ce8\u91ca\uff0c\u9010\u884c\u89e3\u6790\u529f\u80fd\u4e0e\u5b9e\u73b0\u903b\u8f91\u3002","title":"3 \u4ee3\u7801\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#31","text":"# \u5bfc\u5165 MySQL \u7cfb\u7edf\u7ec4\u4ef6\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u64cd\u4f5c\u548c\u641c\u7d22 from mysql_qa import MySQLClient , RedisClient , BM25Search # \u5bfc\u5165 RAG \u7cfb\u7edf\u7ec4\u4ef6\uff0c\u7528\u4e8e\u77e5\u8bc6\u5e93\u68c0\u7d22\u548c\u7b54\u6848\u751f\u6210 from rag_qa import VectorStore , RAGSystem # \u5bfc\u5165\u914d\u7f6e\u548c\u65e5\u5fd7\u5de5\u5177\uff0c\u7528\u4e8e\u7cfb\u7edf\u914d\u7f6e\u548c\u65e5\u5fd7\u8bb0\u5f55 from base import logger , Config # \u5bfc\u5165 OpenAI \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u8c03\u7528 DashScope API from openai import OpenAI # \u5bfc\u5165\u65f6\u95f4\u5e93\uff0c\u7528\u4e8e\u8bb0\u5f55\u5904\u7406\u65f6\u95f4 import time","title":"3.1 \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#32","text":"( __init__ ) \u521d\u59cb\u5316\u65b9\u6cd5 \u529f\u80fd \uff1a\u521d\u59cb\u5316\u65e5\u5fd7\u3001\u914d\u7f6e\u3001\u6570\u636e\u5e93\u5ba2\u6237\u7aef\u3001\u641c\u7d22\u6a21\u5757\u3001\u5411\u91cf\u5b58\u50a8\u548c RAG \u7cfb\u7edf\u3002 \u5173\u952e\u70b9 \uff1a\u901a\u8fc7 Config \u7ba1\u7406 API \u5bc6\u94a5\u548c\u6a21\u578b\u53c2\u6570\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd OpenAI \u5ba2\u6237\u7aef\u521d\u59cb\u5316\u6210\u529f\u3002 class IntegratedQASystem : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7\u5de5\u5177\uff0c\u7528\u4e8e\u8bb0\u5f55\u7cfb\u7edf\u8fd0\u884c\u4fe1\u606f self . logger = logger # \u521d\u59cb\u5316\u914d\u7f6e\u5bf9\u8c61\uff0c\u52a0\u8f7d\u7cfb\u7edf\u53c2\u6570 self . config = Config () # \u521d\u59cb\u5316 MySQL \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u64cd\u4f5c self . mysql_client = MySQLClient () # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u7f13\u5b58\u7ba1\u7406 self . redis_client = RedisClient () # \u521d\u59cb\u5316 BM25 \u641c\u7d22\u6a21\u5757\uff0c\u7ed3\u5408 MySQL \u548c Redis self . bm25_search = BM25Search ( self . redis_client , self . mysql_client ) try : # \u521d\u59cb\u5316 OpenAI \u5ba2\u6237\u7aef\uff0c\u8fde\u63a5 DashScope API self . client = OpenAI ( api_key = self . config . DASHSCOPE_API_KEY , base_url = self . config . DASHSCOPE_BASE_URL ) except Exception as e : # \u8bb0\u5f55 OpenAI \u521d\u59cb\u5316\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"OpenAI \u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25: { e } \" ) # \u629b\u51fa\u5f02\u5e38\uff0c\u7ec8\u6b62\u521d\u59cb\u5316 raise # \u521d\u59cb\u5316\u5411\u91cf\u5b58\u50a8\uff0c\u7528\u4e8e RAG \u7cfb\u7edf\u7684\u77e5\u8bc6\u5e93\u7ba1\u7406 self . vector_store = VectorStore () # \u521d\u59cb\u5316 RAG \u7cfb\u7edf\uff0c\u4f20\u5165\u5411\u91cf\u5b58\u50a8\u548c DashScope API \u8c03\u7528\u51fd\u6570 self . rag_system = RAGSystem ( self . vector_store , self . call_dashscope )","title":"3.2 \u7cfb\u7edf\u521d\u59cb\u5316"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#33-dashscope-api","text":"( call_dashscope ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u901a\u8fc7 OpenAI \u5ba2\u6237\u7aef\u8c03\u7528 DashScope API\uff0c\u57fa\u4e8e\u7528\u6237\u63d0\u793a\u751f\u6210\u7b54\u6848\u3002 \u5173\u952e\u70b9 \uff1a\u8bbe\u7f6e\u7cfb\u7edf\u63d0\u793a\u4e3a\u201c\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\u201d\uff0c\u5f02\u5e38\u5904\u7406\u6355\u83b7 API \u8c03\u7528\u5931\u8d25\uff0c\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u3002 def call_dashscope ( self , prompt ): # \u5b9a\u4e49\u8c03\u7528 DashScope API \u7684\u65b9\u6cd5\uff0c\u751f\u6210\u81ea\u7136\u8bed\u8a00\u7b54\u6848 try : # \u521b\u5efa\u804a\u5929\u5b8c\u6210\u8bf7\u6c42\uff0c\u8c03\u7528 DashScope API completion = self . client . chat . completions . create ( model = self . config . LLM_MODEL , # \u4f7f\u7528\u914d\u7f6e\u4e2d\u7684\u8bed\u8a00\u6a21\u578b messages = [ { \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\u3002\" }, # \u7cfb\u7edf\u63d0\u793a { \"role\" : \"user\" , \"content\" : prompt }, # \u7528\u6237\u8f93\u5165\u7684\u63d0\u793a ] ) # \u68c0\u67e5\u54cd\u5e94\u662f\u5426\u6709\u6548\uff0c\u8fd4\u56de\u7b54\u6848\u5185\u5bb9 return completion . choices [ 0 ] . message . content if completion . choices else \"\u9519\u8bef\uff1a\u65e0\u6548\u7684 LLM \u54cd\u5e94\" except Exception as e : # \u8bb0\u5f55 API \u8c03\u7528\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"LLM \u8c03\u7528\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u4fbf\u4e8e\u8c03\u8bd5 return f \"\u9519\u8bef\uff1aLLM \u8c03\u7528\u5931\u8d25 - { e } \"","title":"3.3 \u8c03\u7528 DashScope API"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#34","text":"( query ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5904\u7406\u7528\u6237\u67e5\u8be2\uff0c\u4f18\u5148\u901a\u8fc7 BM25 \u641c\u7d22 MySQL\uff0c\u82e5\u65e0\u53ef\u9760\u7b54\u6848\u5219\u56de\u9000\u5230 RAG \u7cfb\u7edf\u3002 \u5173\u952e\u70b9 \uff1a\u8bbe\u7f6e BM25 \u76f8\u4f3c\u5ea6\u9608\u503c 0.85\uff0c\u8bb0\u5f55\u67e5\u8be2\u548c\u5904\u7406\u65f6\u95f4\uff0c\u652f\u6301\u5b66\u79d1\u8fc7\u6ee4\u3002 def query ( self , query , source_filter = None ): # \u5b9a\u4e49\u67e5\u8be2\u65b9\u6cd5\uff0c\u5904\u7406\u7528\u6237\u8f93\u5165\u7684\u67e5\u8be2 start_time = time . time () # \u8bb0\u5f55\u67e5\u8be2\u5f00\u59cb\u65f6\u95f4 # \u8bb0\u5f55\u67e5\u8be2\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( f \"\u5904\u7406\u67e5\u8be2: ' { query } '\" ) # \u6267\u884c BM25 \u641c\u7d22\uff0c\u83b7\u53d6\u7b54\u6848\u548c\u662f\u5426\u9700\u8981 RAG \u7684\u6807\u5fd7 answer , need_rag = self . bm25_search . search ( query , threshold = 0.85 ) if answer : # \u5982\u679c\u627e\u5230\u53ef\u9760\u7b54\u6848\uff0c\u8bb0\u5f55\u7b54\u6848\u5230\u65e5\u5fd7 self . logger . info ( f \"MySQL \u7b54\u6848: { answer } \" ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de MySQL \u7b54\u6848 return answer elif need_rag : # \u5982\u679c\u9700\u8981 RAG\uff0c\u8bb0\u5f55\u56de\u9000\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( \"\u65e0\u53ef\u9760 MySQL \u7b54\u6848\uff0c\u56de\u9000\u5230 RAG\" ) # \u8c03\u7528 RAG \u7cfb\u7edf\u751f\u6210\u7b54\u6848\uff0c\u652f\u6301\u5b66\u79d1\u8fc7\u6ee4 answer = self . rag_system . generate_answer ( query , source_filter = source_filter ) # \u8bb0\u5f55 RAG \u7b54\u6848\u5230\u65e5\u5fd7 self . logger . info ( f \"RAG \u7b54\u6848: { answer } \" ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de RAG \u7b54\u6848 return answer else : # \u5982\u679c\u65e0\u7b54\u6848\uff0c\u8bb0\u5f55\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( \"\u672a\u627e\u5230\u7b54\u6848\" ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de\u9ed8\u8ba4\u7b54\u6848 return \"\u672a\u627e\u5230\u7b54\u6848\"","title":"3.4 \u67e5\u8be2\u5904\u7406"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#35","text":"( main ) \u51fd\u6570 \u529f\u80fd \uff1a\u63d0\u4f9b\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u754c\u9762\uff0c\u63a5\u53d7\u7528\u6237\u67e5\u8be2\u548c\u5b66\u79d1\u8fc7\u6ee4\uff0c\u663e\u793a\u7b54\u6848\u3002 \u5173\u952e\u70b9 \uff1a\u9a8c\u8bc1\u5b66\u79d1\u8fc7\u6ee4\u7684\u6709\u6548\u6027\uff0c\u5f02\u5e38\u5904\u7406\u548c\u8d44\u6e90\u6e05\u7406\u786e\u4fdd\u7cfb\u7edf\u5065\u58ee\u3002 def main (): # \u5b9a\u4e49\u4e3b\u51fd\u6570\uff0c\u63d0\u4f9b\u547d\u4ee4\u884c\u4ea4\u4e92\u754c\u9762 qa_system = IntegratedQASystem () # \u521d\u59cb\u5316\u95ee\u7b54\u7cfb\u7edf try : # \u6253\u5370\u6b22\u8fce\u4fe1\u606f print ( \" \\n \u6b22\u8fce\u4f7f\u7528\u96c6\u6210\u95ee\u7b54\u7cfb\u7edf\uff01\" ) # \u6253\u5370\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b print ( f \"\u652f\u6301\u7684\u6765\u6e90: { qa_system . config . VALID_SOURCES } \" ) # \u63d0\u793a\u7528\u6237\u8f93\u5165\u67e5\u8be2\u6216\u9000\u51fa print ( \"\u8f93\u5165\u67e5\u8be2\u8fdb\u884c\u95ee\u7b54\uff0c\u8f93\u5165 'exit' \u9000\u51fa\u3002\" ) while True : # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u67e5\u8be2 query = input ( \" \\n \u8f93\u5165\u67e5\u8be2: \" ) . strip () if query . lower () == \"exit\" : # \u5982\u679c\u7528\u6237\u8f93\u5165 exit\uff0c\u8bb0\u5f55\u9000\u51fa\u65e5\u5fd7 logger . info ( \"\u9000\u51fa\u7cfb\u7edf\" ) # \u6253\u5370\u9000\u51fa\u4fe1\u606f print ( \"\u518d\u89c1\uff01\" ) # \u9000\u51fa\u5faa\u73af break # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b66\u79d1\u8fc7\u6ee4 source_filter = input ( f \"\u8f93\u5165\u6765\u6e90\u8fc7\u6ee4 ( { '/' . join ( qa_system . config . VALID_SOURCES ) } ) (\u6309 Enter \u8df3\u8fc7): \" ) . strip () if source_filter and source_filter not in qa_system . config . VALID_SOURCES : # \u5982\u679c\u5b66\u79d1\u8fc7\u6ee4\u65e0\u6548\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7 logger . warning ( f \"\u65e0\u6548\u6765\u6e90 ' { source_filter } '\uff0c\u5ffd\u7565\u8fc7\u6ee4\" ) # \u6253\u5370\u65e0\u6548\u4fe1\u606f\uff0c\u5ffd\u7565\u8fc7\u6ee4 print ( f \"\u65e0\u6548\u6765\u6e90 ' { source_filter } '\uff0c\u7ee7\u7eed\u65e0\u8fc7\u6ee4\u3002\" ) source_filter = None # \u6267\u884c\u67e5\u8be2\uff0c\u83b7\u53d6\u7b54\u6848 answer = qa_system . query ( query , source_filter ) # \u6253\u5370\u7b54\u6848 print ( f \" \\n \u7b54\u6848: { answer } \" ) except Exception as e : # \u8bb0\u5f55\u7cfb\u7edf\u9519\u8bef\u65e5\u5fd7 logger . error ( f \"\u7cfb\u7edf\u9519\u8bef: { e } \" ) # \u6253\u5370\u9519\u8bef\u4fe1\u606f print ( f \"\u53d1\u751f\u9519\u8bef: { e } \" ) finally : # \u65e0\u8bba\u662f\u5426\u53d1\u751f\u9519\u8bef\uff0c\u5173\u95ed MySQL \u8fde\u63a5 qa_system . mysql_client . close () if __name__ == \"__main__\" : # \u5982\u679c\u811a\u672c\u4f5c\u4e3a\u4e3b\u7a0b\u5e8f\u8fd0\u884c\uff0c\u8c03\u7528 main \u51fd\u6570 main ()","title":"3.5 \u547d\u4ee4\u884c\u4ea4\u4e92"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/01-%E8%9E%8D%E5%90%88FQA%E5%92%8C%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9F%A5%E8%AF%A2.html#_2","text":"\u672c\u7ae0\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7 old_main.py \u6784\u5efa\u4e00\u4e2a\u878d\u5408 MySQL FAQ \u548c RAG \u7684\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u3002\u7cfb\u7edf\u5229\u7528 BM25 \u7b97\u6cd5\u5feb\u901f\u5339\u914d\u7ed3\u6784\u5316\u6570\u636e\uff0cRAG \u7cfb\u7edf\u5904\u7406\u590d\u6742\u67e5\u8be2\uff0c\u914d\u5907\u65e5\u5fd7\u8bb0\u5f55\u548c\u9519\u8bef\u5904\u7406\uff0c\u9002\u5408\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42\u3002","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html","text":"\u878d\u5408 FAQ \u548c\u77e5\u8bc6\u5e93\u67e5\u8be2\uff08\u4f18\u5316\u7248\uff09 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u00b6 \u6df1\u5165\u7406\u89e3\u4f18\u5316\u540e\u7684\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\uff0c\u638c\u63e1\u7aef\u5230\u7aef\u5de5\u4f5c\u6d41\u7a0b\u3002 \u5b66\u4e60\u5982\u4f55\u901a\u8fc7\u5bf9\u8bdd\u5386\u53f2\u548c\u6d41\u5f0f\u8f93\u51fa\u63d0\u5347\u7528\u6237\u4ea4\u4e92\u4f53\u9a8c\u3002 \u638c\u63e1 MySQL FAQ \u548c RAG \u7cfb\u7edf\u7684\u96c6\u6210\uff0c\u4ee5\u53ca\u5065\u58ee\u7684\u9519\u8bef\u5904\u7406\u548c\u65e5\u5fd7\u8bb0\u5f55\u3002 new_main.py \u662f\u5bf9 old_main.py \u7684\u4f18\u5316\u7248\u672c\uff0c\u65b0\u589e\u4e86\u5bf9\u8bdd\u5386\u53f2\u7ba1\u7406\u548c\u6d41\u5f0f\u8f93\u51fa\u529f\u80fd\uff0c\u589e\u5f3a\u4e86\u4ea4\u4e92\u6027\u548c\u5b9e\u65f6\u6027\u3002\u7cfb\u7edf\u6574\u5408\u4e86 MySQL \u7684 FAQ \u7cbe\u786e\u5339\u914d\u3001RAG \u7684\u77e5\u8bc6\u5e93\u68c0\u7d22\u3001MySQL \u5bf9\u8bdd\u5386\u53f2\u5b58\u50a8\uff0c\u4ee5\u53ca\u6d41\u5f0f\u7b54\u6848\u751f\u6210\uff0c\u9002\u7528\u4e8e\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42\u3002 1 \u67e5\u8be2\u6d41\u7a0b\u56fe \u00b6 \u4ee5\u4e0b\u662f\u4f18\u5316\u540e\u7684\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u67e5\u8be2\u6d41\u7a0b\u56fe\uff0c\u5c55\u793a\u7528\u6237\u8f93\u5165\u5230\u7b54\u6848\u8f93\u51fa\u7684\u5904\u7406\u903b\u8f91\uff0c\u5305\u62ec\u5bf9\u8bdd\u5386\u53f2\u548c\u6d41\u5f0f\u8f93\u51fa\u3002 2 \u6d41\u7a0b\u8bf4\u660e \u00b6 \u8f93\u5165\u5904\u7406 \uff1a\u7528\u6237\u63d0\u4f9b\u67e5\u8be2 ( query )\u3001\u4f1a\u8bdd ID ( session_id ) \u548c\u53ef\u9009\u7684\u5b66\u79d1\u8fc7\u6ee4 ( source_filter )\u3002 \u4f1a\u8bdd\u7ba1\u7406 \uff1a\u82e5\u63d0\u4f9b session_id \uff0c\u4ece MySQL \u83b7\u53d6\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\u5386\u53f2\uff1b\u5426\u5219\u751f\u6210\u65b0\u7684 UUID\u3002 BM25 \u641c\u7d22 \uff1a\u4f7f\u7528 BM25 \u7b97\u6cd5\u641c\u7d22 MySQL \u77e5\u8bc6\u5e93\uff0c\u8bbe\u7f6e\u76f8\u4f3c\u5ea6\u9608\u503c 0.85\u3002 \u7b54\u6848\u5224\u65ad \uff1a \u82e5\u627e\u5230\u53ef\u9760\u7b54\u6848\uff08\u76f8\u4f3c\u5ea6 > 0.85\uff09\uff0c\u4e00\u6b21\u6027\u8fd4\u56de\u3002 \u82e5\u65e0\u53ef\u9760\u7b54\u6848\u4e14\u9700\u8981 RAG\uff0c\u8c03\u7528 RAG \u7cfb\u7edf\u4ee5\u6d41\u5f0f\u65b9\u5f0f\u751f\u6210\u7b54\u6848\u3002 \u82e5\u65e0\u9700 RAG\uff0c\u8fd4\u56de\u201c\u672a\u627e\u5230\u7b54\u6848\u201d\u3002 \u5386\u53f2\u66f4\u65b0 \uff1a\u5c06\u67e5\u8be2\u548c\u7b54\u6848\u5b58\u5165 MySQL \u7684 conversations \u8868\uff0c\u4fdd\u7559\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\u3002 \u8f93\u51fa \uff1a\u901a\u8fc7\u6d41\u5f0f\u8f93\u51fa\uff08RAG\uff09\u6216\u4e00\u6b21\u6027\u8f93\u51fa\uff08MySQL\uff09\u8fd4\u56de\u7b54\u6848\uff0c\u5e76\u5c55\u793a\u5bf9\u8bdd\u5386\u53f2\u3002 3 \u4ee3\u7801\u4ecb\u7ecd \u00b6 \u4ee5\u4e0b\u662f new_main.py \u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u5305\u542b\u9010\u884c\u6ce8\u91ca\uff0c\u8be6\u7ec6\u89e3\u6790\u529f\u80fd\u4e0e\u5b9e\u73b0\u903b\u8f91\u3002 3.1 \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u00b6 # \u5bfc\u5165 MySQL \u548c Redis \u5ba2\u6237\u7aef\uff0c\u7ba1\u7406\u6570\u636e\u5e93\u548c\u7f13\u5b58 from mysql_qa import MySQLClient , RedisClient , BM25Search # \u5bfc\u5165 RAG \u7cfb\u7edf\u7ec4\u4ef6\uff0c\u7528\u4e8e\u77e5\u8bc6\u5e93\u68c0\u7d22\u548c\u7b54\u6848\u751f\u6210 from rag_qa import VectorStore , RAGSystem # \u5bfc\u5165\u914d\u7f6e\u548c\u65e5\u5fd7\u5de5\u5177\uff0c\u7528\u4e8e\u7cfb\u7edf\u914d\u7f6e\u548c\u65e5\u5fd7\u8bb0\u5f55 from base import logger , Config # \u5bfc\u5165 OpenAI \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u8c03\u7528 DashScope API from openai import OpenAI # \u5bfc\u5165\u65f6\u95f4\u5e93\uff0c\u7528\u4e8e\u8bb0\u5f55\u5904\u7406\u65f6\u95f4 import time # \u5bfc\u5165 UUID \u5e93\uff0c\u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID import uuid # \u5bfc\u5165 pymysql \u9519\u8bef\u5904\u7406\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u5f02\u5e38\u6355\u83b7 import pymysql 3.2 \u7cfb\u7edf\u521d\u59cb\u5316 \u00b6 ( __init__ ) \u521d\u59cb\u5316\u65b9\u6cd5 \u529f\u80fd \uff1a\u521d\u59cb\u5316\u65e5\u5fd7\u3001\u914d\u7f6e\u3001\u6570\u636e\u5e93\u5ba2\u6237\u7aef\u3001\u641c\u7d22\u6a21\u5757\u3001\u5411\u91cf\u5b58\u50a8\u3001RAG \u7cfb\u7edf\u548c\u5bf9\u8bdd\u5386\u53f2\u8868\u3002 \u5173\u952e\u70b9 \uff1a\u901a\u8fc7 Config \u7ba1\u7406 API \u5bc6\u94a5\u548c\u6a21\u578b\u53c2\u6570\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd OpenAI \u5ba2\u6237\u7aef\u521d\u59cb\u5316\u6210\u529f\u3002 class IntegratedQASystem : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7\u5de5\u5177\uff0c\u7528\u4e8e\u8bb0\u5f55\u7cfb\u7edf\u8fd0\u884c\u4fe1\u606f self . logger = logger # \u521d\u59cb\u5316\u914d\u7f6e\u5bf9\u8c61\uff0c\u52a0\u8f7d\u7cfb\u7edf\u53c2\u6570 self . config = Config () # \u521d\u59cb\u5316 MySQL \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u64cd\u4f5c self . mysql_client = MySQLClient () # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u7f13\u5b58\u7ba1\u7406 self . redis_client = RedisClient () # \u521d\u59cb\u5316 BM25 \u641c\u7d22\u6a21\u5757\uff0c\u7ed3\u5408 MySQL \u548c Redis self . bm25_search = BM25Search ( self . redis_client , self . mysql_client ) try : # \u521d\u59cb\u5316 OpenAI \u5ba2\u6237\u7aef\uff0c\u8fde\u63a5 DashScope API self . client = OpenAI ( api_key = self . config . DASHSCOPE_API_KEY , base_url = self . config . DASHSCOPE_BASE_URL ) except Exception as e : # \u8bb0\u5f55 OpenAI \u521d\u59cb\u5316\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"OpenAI \u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25: { e } \" ) # \u629b\u51fa\u5f02\u5e38\uff0c\u7ec8\u6b62\u521d\u59cb\u5316 raise # \u521d\u59cb\u5316\u5411\u91cf\u5b58\u50a8\uff0c\u7528\u4e8e RAG \u7cfb\u7edf\u7684\u77e5\u8bc6\u5e93\u7ba1\u7406 self . vector_store = VectorStore () # \u521d\u59cb\u5316 RAG \u7cfb\u7edf\uff0c\u4f20\u5165\u5411\u91cf\u5b58\u50a8\u548c DashScope API \u8c03\u7528\u51fd\u6570 self . rag_system = RAGSystem ( self . vector_store , self . call_dashscope ) # \u521d\u59cb\u5316\u5bf9\u8bdd\u5386\u53f2\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u4f1a\u8bdd\u8bb0\u5f55 self . init_conversation_table () 3.3 \u5bf9\u8bdd\u5386\u53f2\u8868\u521d\u59cb\u5316 \u00b6 ( init_conversation_table ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5728 MySQL \u4e2d\u521b\u5efa conversations \u8868\uff0c\u5b58\u50a8\u4f1a\u8bdd ID\u3001\u95ee\u9898\u3001\u7b54\u6848\u548c\u65f6\u95f4\u6233\uff0c\u6dfb\u52a0\u7d22\u5f15\u4f18\u5316\u67e5\u8be2\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528 IF NOT EXISTS \u907f\u514d\u91cd\u590d\u521b\u5efa\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd\u5065\u58ee\u6027\u3002 def init_conversation_table ( self ): \"\"\"\u521d\u59cb\u5316MySQL\u4e2d\u7684conversations\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u5bf9\u8bdd\u5386\u53f2\"\"\" try : # \u521b\u5efa conversations \u8868\uff0c\u5305\u542b\u4f1a\u8bdd ID\u3001\u95ee\u9898\u3001\u7b54\u6848\u548c\u65f6\u95f4\u6233 self . mysql_client . cursor . execute ( \"\"\" CREATE TABLE IF NOT EXISTS conversations ( id INT AUTO_INCREMENT PRIMARY KEY, session_id VARCHAR(36) NOT NULL, question TEXT NOT NULL, answer TEXT NOT NULL, timestamp DATETIME NOT NULL, INDEX idx_session_id (session_id) ) \"\"\" ) # \u63d0\u4ea4\u6570\u636e\u5e93\u4e8b\u52a1 self . mysql_client . connection . commit () # \u8bb0\u5f55\u8868\u521d\u59cb\u5316\u6210\u529f\u7684\u65e5\u5fd7 self . logger . info ( \"\u5bf9\u8bdd\u5386\u53f2\u8868\u521d\u59cb\u5316\u6210\u529f\" ) except pymysql . MySQLError as e : # \u8bb0\u5f55\u8868\u521d\u59cb\u5316\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"\u521d\u59cb\u5316\u5bf9\u8bdd\u5386\u53f2\u8868\u5931\u8d25: { e } \" ) # \u629b\u51fa\u5f02\u5e38\uff0c\u7ec8\u6b62\u521d\u59cb\u5316 raise 3.4 \u8c03\u7528 DashScope API \u00b6 ( call_dashscope ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u901a\u8fc7 OpenAI \u5ba2\u6237\u7aef\u8c03\u7528 DashScope API\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\uff0c\u9010 token \u8fd4\u56de\u7b54\u6848\u3002 \u5173\u952e\u70b9 \uff1a\u542f\u7528 stream=True \u5b9e\u73b0\u6d41\u5f0f\u8f93\u51fa\uff0c\u5f02\u5e38\u5904\u7406\u6355\u83b7 API \u8c03\u7528\u5931\u8d25\uff0c\u652f\u6301\u524d\u7aef\u5b9e\u65f6\u663e\u793a\u3002 def call_dashscope ( self , prompt ): \"\"\"\u8c03\u7528DashScope API\u751f\u6210\u7b54\u6848\uff08\u6d41\u5f0f\u8f93\u51fa\uff09\"\"\" try : # \u521b\u5efa\u804a\u5929\u5b8c\u6210\u8bf7\u6c42\uff0c\u542f\u7528\u6d41\u5f0f\u8f93\u51fa completion = self . client . chat . completions . create ( model = self . config . LLM_MODEL , # \u4f7f\u7528\u914d\u7f6e\u4e2d\u7684\u8bed\u8a00\u6a21\u578b messages = [ { \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\u3002\" }, # \u7cfb\u7edf\u63d0\u793a { \"role\" : \"user\" , \"content\" : prompt }, # \u7528\u6237\u8f93\u5165\u7684\u63d0\u793a ], timeout = 30 , # \u8bbe\u7f6e 30 \u79d2\u8d85\u65f6 stream = True # \u542f\u7528\u6d41\u5f0f\u8f93\u51fa ) # \u521d\u59cb\u5316\u6536\u96c6\u6d41\u5f0f\u8f93\u51fa\u7684\u5b57\u7b26\u4e32 collected_content = \"\" # \u904d\u5386\u6d41\u5f0f\u8f93\u51fa\u7684\u6bcf\u4e2a chunk for chunk in completion : if chunk . choices and chunk . choices [ 0 ] . delta . content : # \u83b7\u53d6\u5f53\u524d chunk \u7684\u5185\u5bb9 content = chunk . choices [ 0 ] . delta . content # \u7d2f\u79ef\u5185\u5bb9 collected_content += content # \u9010 token \u8fd4\u56de\uff0c\u4f9b\u524d\u7aef\u5b9e\u65f6\u663e\u793a yield content # \u8fd4\u56de\u5b8c\u6574\u7b54\u6848 return collected_content except Exception as e : # \u8bb0\u5f55 API \u8c03\u7528\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"LLM\u8c03\u7528\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u9519\u8bef\u4fe1\u606f return f \"\u9519\u8bef\uff1aLLM\u8c03\u7528\u5931\u8d25 - { e } \" 3.5 \u83b7\u53d6\u6700\u8fd1\u5bf9\u8bdd\u5386\u53f2 \u00b6 ( _fetch_recent_history ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u4ece MySQL \u7684 conversations \u8868\u83b7\u53d6\u6307\u5b9a session_id \u7684\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\u5386\u53f2\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\u9632\u6b62 SQL \u6ce8\u5165\uff0c\u8fd4\u56de\u7ed3\u679c\u6309\u65f6\u95f4\u6b63\u5e8f\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd\u5065\u58ee\u6027\u3002 def _fetch_recent_history ( self , session_id : str ) -> list : \"\"\"\u83b7\u53d6\u6700\u8fd15\u8f6e\u5bf9\u8bdd\u5386\u53f2\"\"\" try : # \u6267\u884c SQL \u67e5\u8be2\uff0c\u83b7\u53d6\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd self . mysql_client . cursor . execute ( \"\"\" SELECT question, answer FROM conversations WHERE session_id = %s ORDER BY timestamp DESC LIMIT %s \"\"\" , ( session_id , 5 )) # \u5c06\u67e5\u8be2\u7ed3\u679c\u8f6c\u6362\u4e3a\u5b57\u5178\u5217\u8868 history = [{ \"question\" : row [ 0 ], \"answer\" : row [ 1 ]} for row in self . mysql_client . cursor . fetchall ()] # \u53cd\u8f6c\u7ed3\u679c\uff0c\u6309\u65f6\u95f4\u6b63\u5e8f\u8fd4\u56de return history [:: - 1 ] except pymysql . MySQLError as e : # \u8bb0\u5f55\u67e5\u8be2\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"\u83b7\u53d6\u5bf9\u8bdd\u5386\u53f2\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u7a7a\u5217\u8868 return [] 3.6 \u66f4\u65b0\u4f1a\u8bdd\u5386\u53f2 \u00b6 ( update_session_history ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5c06\u65b0\u95ee\u9898\u548c\u7b54\u6848\u63d2\u5165 conversations \u8868\uff0c\u4fdd\u7559\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\uff0c\u5220\u9664\u65e7\u8bb0\u5f55\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528\u4e8b\u52a1\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\uff0c\u5b50\u67e5\u8be2\u5220\u9664\u8d85\u51fa\u9650\u5236\u7684\u8bb0\u5f55\uff0c\u65e5\u5fd7\u8bb0\u5f55\u64cd\u4f5c\u7ed3\u679c\u3002 def update_session_history ( self , session_id : str , question : str , answer : str ) -> list : \"\"\"\u66f4\u65b0\u4f1a\u8bdd\u5386\u53f2\u5230MySQL\uff0c\u4fdd\u7559\u6700\u8fd15\u8f6e\u5bf9\u8bdd\"\"\" try : # \u63d2\u5165\u65b0\u7684\u5bf9\u8bdd\u8bb0\u5f55 self . mysql_client . cursor . execute ( \"\"\" INSERT INTO conversations (session_id, question, answer, timestamp) VALUES ( %s , %s , %s , NOW()) \"\"\" , ( session_id , question , answer )) # \u83b7\u53d6\u66f4\u65b0\u540e\u7684\u5bf9\u8bdd\u5386\u53f2 history = self . _fetch_recent_history ( session_id ) # \u5220\u9664\u8d85\u51fa 5 \u8f6e\u7684\u65e7\u8bb0\u5f55 self . mysql_client . cursor . execute ( \"\"\" DELETE FROM conversations WHERE session_id = %s AND id NOT IN ( SELECT id FROM ( SELECT id FROM conversations WHERE session_id = %s ORDER BY timestamp DESC LIMIT %s ) AS sub ) \"\"\" , ( session_id , session_id , 5 )) # \u63d0\u4ea4\u4e8b\u52a1 self . mysql_client . connection . commit () # \u8bb0\u5f55\u66f4\u65b0\u6210\u529f\u7684\u65e5\u5fd7 self . logger . info ( f \"\u4f1a\u8bdd { session_id } \u5386\u53f2\u66f4\u65b0\u6210\u529f\" ) # \u8fd4\u56de\u66f4\u65b0\u540e\u7684\u5386\u53f2 return history except pymysql . MySQLError as e : # \u8bb0\u5f55\u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"\u66f4\u65b0\u4f1a\u8bdd\u5386\u53f2\u5931\u8d25: { e } \" ) # \u56de\u6eda\u4e8b\u52a1 self . mysql_client . connection . rollback () # \u629b\u51fa\u5f02\u5e38 raise except Exception as e : # \u8bb0\u5f55\u610f\u5916\u9519\u8bef\u7684\u65e5\u5fd7 self . logger . error ( f \"\u66f4\u65b0\u4f1a\u8bdd\u5386\u53f2\u610f\u5916\u9519\u8bef: { e } \" ) # \u56de\u6eda\u4e8b\u52a1 self . mysql_client . connection . rollback () # \u629b\u51fa\u5f02\u5e38 raise 3.7 \u83b7\u53d6\u4f1a\u8bdd\u5386\u53f2 \u00b6 ( get_session_history ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u4ece MySQL \u83b7\u53d6\u6307\u5b9a session_id \u7684\u5bf9\u8bdd\u5386\u53f2\uff0c\u590d\u7528 _fetch_recent_history \u3002 \u5173\u952e\u70b9 \uff1a\u4fdd\u6301\u4ee3\u7801\u7b80\u6d01\uff0c\u9002\u5408\u5916\u90e8\u8c03\u7528\uff08\u5982 API \u6216\u754c\u9762\u5c55\u793a\uff09\u3002 def get_session_history ( self , session_id : str ) -> list : \"\"\"\u4eceMySQL\u83b7\u53d6\u4f1a\u8bdd\u5386\u53f2\"\"\" # \u8c03\u7528 _fetch_recent_history \u83b7\u53d6\u5bf9\u8bdd\u5386\u53f2 return self . _fetch_recent_history ( session_id ) 3.8 \u6e05\u9664\u4f1a\u8bdd\u5386\u53f2 \u00b6 ( clear_session_history ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5220\u9664\u6307\u5b9a session_id \u7684\u6240\u6709\u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\u9632\u6b62 SQL \u6ce8\u5165\uff0c\u4e8b\u52a1\u7ba1\u7406\u786e\u4fdd\u64cd\u4f5c\u539f\u5b50\u6027\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u8868\u793a\u6210\u529f\u6216\u5931\u8d25\u3002 def clear_session_history ( self , session_id : str ) -> bool : \"\"\"\u6e05\u9664\u6307\u5b9a\u4f1a\u8bdd\u5386\u53f2\"\"\" try : # \u5220\u9664\u6307\u5b9a session_id \u7684\u6240\u6709\u5bf9\u8bdd\u8bb0\u5f55 self . mysql_client . cursor . execute ( \"\"\" DELETE FROM conversations WHERE session_id = %s \"\"\" , ( session_id ,)) # \u63d0\u4ea4\u4e8b\u52a1 self . mysql_client . connection . commit () # \u8bb0\u5f55\u6e05\u9664\u6210\u529f\u7684\u65e5\u5fd7 self . logger . info ( f \"\u4f1a\u8bdd { session_id } \u5386\u53f2\u5df2\u6e05\u9664\" ) # \u8fd4\u56de True \u8868\u793a\u6210\u529f return True except pymysql . MySQLError as e : # \u8bb0\u5f55\u6e05\u9664\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"\u6e05\u9664\u4f1a\u8bdd\u5386\u53f2\u5931\u8d25: { e } \" ) # \u56de\u6eda\u4e8b\u52a1 self . mysql_client . connection . rollback () # \u8fd4\u56de False \u8868\u793a\u5931\u8d25 return False 3.9 \u67e5\u8be2\u5904\u7406 \u00b6 ( query ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5904\u7406\u7528\u6237\u67e5\u8be2\uff0c\u4f18\u5148\u4f7f\u7528 BM25 \u641c\u7d22 MySQL\uff0c\u82e5\u65e0\u53ef\u9760\u7b54\u6848\u5219\u56de\u9000\u5230 RAG\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u548c\u5bf9\u8bdd\u5386\u53f2\u3002 \u5173\u952e\u70b9 \uff1a\u901a\u8fc7\u751f\u6210\u5668\u9010 token \u8fd4\u56de RAG \u7b54\u6848\uff0c\u8bb0\u5f55\u5904\u7406\u65f6\u95f4\uff0c\u652f\u6301\u5b66\u79d1\u8fc7\u6ee4\u3002 \u6ce8\u610f\uff1a1.\u4fee\u6539generate_answer\u65b9\u6cd5\u6dfb\u52a0history\u53c2\u6570\uff0c2.\u4fee\u6539rag_prompt\u65b9\u6cd5\u7684\u63d0\u793a\u8bcd def query ( self , query , source_filter = None , session_id = None ): \"\"\"\u67e5\u8be2\u96c6\u6210\u7cfb\u7edf\uff0c\u652f\u6301\u5bf9\u8bdd\u5386\u53f2\u548c\u6d41\u5f0f\u8f93\u51fa\"\"\" start_time = time . time () # \u8bb0\u5f55\u67e5\u8be2\u5f00\u59cb\u65f6\u95f4 # \u8bb0\u5f55\u67e5\u8be2\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( f \"\u5904\u7406\u67e5\u8be2: ' { query } ' (\u4f1a\u8bddID: { session_id } )\" ) # \u83b7\u53d6\u5bf9\u8bdd\u5386\u53f2\uff0c\u82e5\u65e0 session_id \u5219\u8fd4\u56de\u7a7a\u5217\u8868 history = self . get_session_history ( session_id ) if session_id else [] # \u6267\u884c BM25 \u641c\u7d22\uff0c\u83b7\u53d6\u7b54\u6848\u548c\u662f\u5426\u9700\u8981 RAG \u7684\u6807\u5fd7 answer , need_rag = self . bm25_search . search ( query , threshold = 0.85 ) if answer : # \u5982\u679c\u627e\u5230\u53ef\u9760\u7b54\u6848\uff0c\u8bb0\u5f55\u7b54\u6848\u5230\u65e5\u5fd7 self . logger . info ( f \"MySQL\u7b54\u6848: { answer } \" ) if session_id : # \u66f4\u65b0\u5bf9\u8bdd\u5386\u53f2 self . update_session_history ( session_id , query , answer ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u4e00\u6b21\u6027\u8fd4\u56de\u7b54\u6848\uff0c\u6807\u8bb0\u4e3a\u5b8c\u6574 yield answer , True elif need_rag : # \u5982\u679c\u9700\u8981 RAG\uff0c\u8bb0\u5f55\u56de\u9000\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( \"\u65e0\u53ef\u9760MySQL\u7b54\u6848\uff0c\u56de\u9000\u5230RAG\" ) # \u521d\u59cb\u5316\u6536\u96c6\u5b8c\u6574\u7b54\u6848\u7684\u5b57\u7b26\u4e32 collected_answer = \"\" # \u4ece RAG \u7cfb\u7edf\u83b7\u53d6\u6d41\u5f0f\u8f93\u51fa for token in self . rag_system . generate_answer ( query , source_filter = source_filter , history = history ): # \u7d2f\u79ef\u7b54\u6848 collected_answer += token # \u9010 token \u8fd4\u56de\uff0c\u6807\u8bb0\u4e3a\u90e8\u5206\u7b54\u6848 yield token , False if session_id : # \u66f4\u65b0\u5bf9\u8bdd\u5386\u53f2\uff0c\u5b58\u50a8\u5b8c\u6574\u7b54\u6848 self . update_session_history ( session_id , query , collected_answer ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u6807\u8bb0\u6d41\u7ed3\u675f yield \"\" , True else : # \u5982\u679c\u65e0\u7b54\u6848\uff0c\u8bb0\u5f55\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( \"\u672a\u627e\u5230\u7b54\u6848\" ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u4e00\u6b21\u6027\u8fd4\u56de\u9ed8\u8ba4\u7b54\u6848\uff0c\u6807\u8bb0\u4e3a\u5b8c\u6574 yield \"\u672a\u627e\u5230\u7b54\u6848\" , True 3.10 \u547d\u4ee4\u884c\u4ea4\u4e92 \u00b6 ( main ) \u51fd\u6570 \u529f\u80fd \uff1a\u63d0\u4f9b\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u754c\u9762\uff0c\u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID\uff0c\u63a5\u53d7\u7528\u6237\u67e5\u8be2\u548c\u5b66\u79d1\u8fc7\u6ee4\uff0c\u6d41\u5f0f\u663e\u793a\u7b54\u6848\u5e76\u5c55\u793a\u5bf9\u8bdd\u5386\u53f2\u3002 \u5173\u952e\u70b9 \uff1a\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\uff0c\u9a8c\u8bc1\u5b66\u79d1\u8fc7\u6ee4\u6709\u6548\u6027\uff0c\u5f02\u5e38\u5904\u7406\u548c\u8d44\u6e90\u6e05\u7406\u786e\u4fdd\u7cfb\u7edf\u5065\u58ee\u3002 def main (): # \u5b9a\u4e49\u4e3b\u51fd\u6570\uff0c\u63d0\u4f9b\u547d\u4ee4\u884c\u4ea4\u4e92\u754c\u9762 qa_system = IntegratedQASystem () # \u521d\u59cb\u5316\u95ee\u7b54\u7cfb\u7edf # \u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID session_id = str ( uuid . uuid4 ()) # \u6253\u5370\u6b22\u8fce\u4fe1\u606f print ( \" \\n \u6b22\u8fce\u4f7f\u7528\u96c6\u6210\u95ee\u7b54\u7cfb\u7edf\uff01\" ) # \u6253\u5370\u4f1a\u8bdd ID print ( f \"\u4f1a\u8bddID: { session_id } \" ) # \u6253\u5370\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b print ( f \"\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\uff1a { qa_system . config . VALID_SOURCES } \" ) # \u63d0\u793a\u7528\u6237\u8f93\u5165\u67e5\u8be2\u6216\u9000\u51fa print ( \"\u8f93\u5165\u67e5\u8be2\u8fdb\u884c\u95ee\u7b54\uff0c\u8f93\u5165 'exit' \u9000\u51fa\u3002\" ) try : while True : # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u67e5\u8be2 query = input ( \" \\n \u8f93\u5165\u67e5\u8be2: \" ) . strip () if query . lower () == \"exit\" : # \u5982\u679c\u7528\u6237\u8f93\u5165 exit\uff0c\u8bb0\u5f55\u9000\u51fa\u65e5\u5fd7 logger . info ( \"\u9000\u51fa\u7cfb\u7edf\" ) # \u6253\u5370\u9000\u51fa\u4fe1\u606f print ( \"\u518d\u89c1\uff01\" ) # \u9000\u51fa\u5faa\u73af break # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b66\u79d1\u8fc7\u6ee4 source_filter = input ( f \"\u8bf7\u8f93\u5165\u5b66\u79d1\u7c7b\u522b ( { '/' . join ( qa_system . config . VALID_SOURCES ) } ) (\u76f4\u63a5\u56de\u8f66\u9ed8\u8ba4\u4e0d\u8fc7\u6ee4): \" ) . strip () if source_filter and source_filter not in qa_system . config . VALID_SOURCES : # \u5982\u679c\u5b66\u79d1\u8fc7\u6ee4\u65e0\u6548\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7 logger . warning ( f \"\u65e0\u6548\u7684\u5b66\u79d1\u7c7b\u522b ' { source_filter } '\uff0c\u5c06\u4e0d\u8fc7\u6ee4\" ) # \u8bbe\u7f6e\u4e3a\u7a7a\uff0c\u5ffd\u7565\u8fc7\u6ee4 source_filter = None # \u6253\u5370\u7b54\u6848\u63d0\u793a print ( \" \\n \u7b54\u6848: \" , end = \"\" , flush = True ) # \u521d\u59cb\u5316\u7d2f\u79ef\u7b54\u6848\u7684\u5b57\u7b26\u4e32 answer = \"\" # \u8fed\u4ee3 query \u65b9\u6cd5\u7684\u751f\u6210\u5668 for token , is_complete in qa_system . query ( query , source_filter = source_filter , session_id = session_id ): if token : # \u4ec5\u5f53 token \u975e\u7a7a\u65f6\u6253\u5370 print ( token , end = \"\" , flush = True ) # \u7d2f\u79ef\u7b54\u6848 answer += token if is_complete : # \u5982\u679c\u662f\u5b8c\u6574\u7b54\u6848\u6216\u6d41\u7ed3\u675f\uff0c\u6362\u884c\u5e76\u9000\u51fa\u5faa\u73af print () break # \u6253\u5370\u5bf9\u8bdd\u5386\u53f2 history = qa_system . get_session_history ( session_id ) print ( \" \\n \u6700\u8fd1\u5bf9\u8bdd\u5386\u53f2:\" ) for idx , entry in enumerate ( history , 1 ): # \u6309\u987a\u5e8f\u6253\u5370\u5386\u53f2\u8bb0\u5f55 print ( f \" { idx } . \u95ee: { entry [ 'question' ] } \\n \u7b54: { entry [ 'answer' ] } \" ) except Exception as e : # \u8bb0\u5f55\u7cfb\u7edf\u9519\u8bef\u65e5\u5fd7 logger . error ( f \"\u7cfb\u7edf\u9519\u8bef: { e } \" ) # \u6253\u5370\u9519\u8bef\u4fe1\u606f print ( f \"\u53d1\u751f\u9519\u8bef: { e } \" ) finally : # \u5173\u95ed MySQL \u8fde\u63a5 qa_system . mysql_client . close () if __name__ == \"__main__\" : # \u5982\u679c\u811a\u672c\u4f5c\u4e3a\u4e3b\u7a0b\u5e8f\u8fd0\u884c\uff0c\u8c03\u7528 main \u51fd\u6570 main () \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u7ae0\u5c55\u793a\u4e86\u4f18\u5316\u540e\u7684 new_main.py \uff0c\u901a\u8fc7\u65b0\u589e\u5bf9\u8bdd\u5386\u53f2\u7ba1\u7406\u548c\u6d41\u5f0f\u8f93\u51fa\u529f\u80fd\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4ea4\u4e92\u6027\u548c\u5b9e\u65f6\u6027\u3002\u7cfb\u7edf\u7ed3\u5408 MySQL FAQ \u7684\u5feb\u901f\u5339\u914d\u3001RAG \u7cfb\u7edf\u7684\u590d\u6742\u67e5\u8be2\u5904\u7406\u3001MySQL \u7684\u5386\u53f2\u5b58\u50a8\uff0c\u4ee5\u53ca\u6d41\u5f0f\u7b54\u6848\u751f\u6210\uff0c\u914d\u5907\u5065\u58ee\u7684\u65e5\u5fd7\u8bb0\u5f55\u548c\u9519\u8bef\u5904\u7406\uff0c\u9002\u5408\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42","title":"6.2 \u589e\u5f3a\u578bFAQ\u4e0e\u77e5\u8bc6\u5e93\u878d\u5408\u67e5\u8be2"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#faq","text":"","title":"\u878d\u5408 FAQ \u548c\u77e5\u8bc6\u5e93\u67e5\u8be2\uff08\u4f18\u5316\u7248\uff09"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#_1","text":"\u6df1\u5165\u7406\u89e3\u4f18\u5316\u540e\u7684\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\uff0c\u638c\u63e1\u7aef\u5230\u7aef\u5de5\u4f5c\u6d41\u7a0b\u3002 \u5b66\u4e60\u5982\u4f55\u901a\u8fc7\u5bf9\u8bdd\u5386\u53f2\u548c\u6d41\u5f0f\u8f93\u51fa\u63d0\u5347\u7528\u6237\u4ea4\u4e92\u4f53\u9a8c\u3002 \u638c\u63e1 MySQL FAQ \u548c RAG \u7cfb\u7edf\u7684\u96c6\u6210\uff0c\u4ee5\u53ca\u5065\u58ee\u7684\u9519\u8bef\u5904\u7406\u548c\u65e5\u5fd7\u8bb0\u5f55\u3002 new_main.py \u662f\u5bf9 old_main.py \u7684\u4f18\u5316\u7248\u672c\uff0c\u65b0\u589e\u4e86\u5bf9\u8bdd\u5386\u53f2\u7ba1\u7406\u548c\u6d41\u5f0f\u8f93\u51fa\u529f\u80fd\uff0c\u589e\u5f3a\u4e86\u4ea4\u4e92\u6027\u548c\u5b9e\u65f6\u6027\u3002\u7cfb\u7edf\u6574\u5408\u4e86 MySQL \u7684 FAQ \u7cbe\u786e\u5339\u914d\u3001RAG \u7684\u77e5\u8bc6\u5e93\u68c0\u7d22\u3001MySQL \u5bf9\u8bdd\u5386\u53f2\u5b58\u50a8\uff0c\u4ee5\u53ca\u6d41\u5f0f\u7b54\u6848\u751f\u6210\uff0c\u9002\u7528\u4e8e\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42\u3002","title":"\u5b66\u4e60\u76ee\u6807\uff1a"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#1","text":"\u4ee5\u4e0b\u662f\u4f18\u5316\u540e\u7684\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\u67e5\u8be2\u6d41\u7a0b\u56fe\uff0c\u5c55\u793a\u7528\u6237\u8f93\u5165\u5230\u7b54\u6848\u8f93\u51fa\u7684\u5904\u7406\u903b\u8f91\uff0c\u5305\u62ec\u5bf9\u8bdd\u5386\u53f2\u548c\u6d41\u5f0f\u8f93\u51fa\u3002","title":"1 \u67e5\u8be2\u6d41\u7a0b\u56fe"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#2","text":"\u8f93\u5165\u5904\u7406 \uff1a\u7528\u6237\u63d0\u4f9b\u67e5\u8be2 ( query )\u3001\u4f1a\u8bdd ID ( session_id ) \u548c\u53ef\u9009\u7684\u5b66\u79d1\u8fc7\u6ee4 ( source_filter )\u3002 \u4f1a\u8bdd\u7ba1\u7406 \uff1a\u82e5\u63d0\u4f9b session_id \uff0c\u4ece MySQL \u83b7\u53d6\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\u5386\u53f2\uff1b\u5426\u5219\u751f\u6210\u65b0\u7684 UUID\u3002 BM25 \u641c\u7d22 \uff1a\u4f7f\u7528 BM25 \u7b97\u6cd5\u641c\u7d22 MySQL \u77e5\u8bc6\u5e93\uff0c\u8bbe\u7f6e\u76f8\u4f3c\u5ea6\u9608\u503c 0.85\u3002 \u7b54\u6848\u5224\u65ad \uff1a \u82e5\u627e\u5230\u53ef\u9760\u7b54\u6848\uff08\u76f8\u4f3c\u5ea6 > 0.85\uff09\uff0c\u4e00\u6b21\u6027\u8fd4\u56de\u3002 \u82e5\u65e0\u53ef\u9760\u7b54\u6848\u4e14\u9700\u8981 RAG\uff0c\u8c03\u7528 RAG \u7cfb\u7edf\u4ee5\u6d41\u5f0f\u65b9\u5f0f\u751f\u6210\u7b54\u6848\u3002 \u82e5\u65e0\u9700 RAG\uff0c\u8fd4\u56de\u201c\u672a\u627e\u5230\u7b54\u6848\u201d\u3002 \u5386\u53f2\u66f4\u65b0 \uff1a\u5c06\u67e5\u8be2\u548c\u7b54\u6848\u5b58\u5165 MySQL \u7684 conversations \u8868\uff0c\u4fdd\u7559\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\u3002 \u8f93\u51fa \uff1a\u901a\u8fc7\u6d41\u5f0f\u8f93\u51fa\uff08RAG\uff09\u6216\u4e00\u6b21\u6027\u8f93\u51fa\uff08MySQL\uff09\u8fd4\u56de\u7b54\u6848\uff0c\u5e76\u5c55\u793a\u5bf9\u8bdd\u5386\u53f2\u3002","title":"2 \u6d41\u7a0b\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#3","text":"\u4ee5\u4e0b\u662f new_main.py \u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u5305\u542b\u9010\u884c\u6ce8\u91ca\uff0c\u8be6\u7ec6\u89e3\u6790\u529f\u80fd\u4e0e\u5b9e\u73b0\u903b\u8f91\u3002","title":"3 \u4ee3\u7801\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#31","text":"# \u5bfc\u5165 MySQL \u548c Redis \u5ba2\u6237\u7aef\uff0c\u7ba1\u7406\u6570\u636e\u5e93\u548c\u7f13\u5b58 from mysql_qa import MySQLClient , RedisClient , BM25Search # \u5bfc\u5165 RAG \u7cfb\u7edf\u7ec4\u4ef6\uff0c\u7528\u4e8e\u77e5\u8bc6\u5e93\u68c0\u7d22\u548c\u7b54\u6848\u751f\u6210 from rag_qa import VectorStore , RAGSystem # \u5bfc\u5165\u914d\u7f6e\u548c\u65e5\u5fd7\u5de5\u5177\uff0c\u7528\u4e8e\u7cfb\u7edf\u914d\u7f6e\u548c\u65e5\u5fd7\u8bb0\u5f55 from base import logger , Config # \u5bfc\u5165 OpenAI \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u8c03\u7528 DashScope API from openai import OpenAI # \u5bfc\u5165\u65f6\u95f4\u5e93\uff0c\u7528\u4e8e\u8bb0\u5f55\u5904\u7406\u65f6\u95f4 import time # \u5bfc\u5165 UUID \u5e93\uff0c\u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID import uuid # \u5bfc\u5165 pymysql \u9519\u8bef\u5904\u7406\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u5f02\u5e38\u6355\u83b7 import pymysql","title":"3.1 \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#32","text":"( __init__ ) \u521d\u59cb\u5316\u65b9\u6cd5 \u529f\u80fd \uff1a\u521d\u59cb\u5316\u65e5\u5fd7\u3001\u914d\u7f6e\u3001\u6570\u636e\u5e93\u5ba2\u6237\u7aef\u3001\u641c\u7d22\u6a21\u5757\u3001\u5411\u91cf\u5b58\u50a8\u3001RAG \u7cfb\u7edf\u548c\u5bf9\u8bdd\u5386\u53f2\u8868\u3002 \u5173\u952e\u70b9 \uff1a\u901a\u8fc7 Config \u7ba1\u7406 API \u5bc6\u94a5\u548c\u6a21\u578b\u53c2\u6570\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd OpenAI \u5ba2\u6237\u7aef\u521d\u59cb\u5316\u6210\u529f\u3002 class IntegratedQASystem : def __init__ ( self ): # \u521d\u59cb\u5316\u65e5\u5fd7\u5de5\u5177\uff0c\u7528\u4e8e\u8bb0\u5f55\u7cfb\u7edf\u8fd0\u884c\u4fe1\u606f self . logger = logger # \u521d\u59cb\u5316\u914d\u7f6e\u5bf9\u8c61\uff0c\u52a0\u8f7d\u7cfb\u7edf\u53c2\u6570 self . config = Config () # \u521d\u59cb\u5316 MySQL \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u6570\u636e\u5e93\u64cd\u4f5c self . mysql_client = MySQLClient () # \u521d\u59cb\u5316 Redis \u5ba2\u6237\u7aef\uff0c\u7528\u4e8e\u7f13\u5b58\u7ba1\u7406 self . redis_client = RedisClient () # \u521d\u59cb\u5316 BM25 \u641c\u7d22\u6a21\u5757\uff0c\u7ed3\u5408 MySQL \u548c Redis self . bm25_search = BM25Search ( self . redis_client , self . mysql_client ) try : # \u521d\u59cb\u5316 OpenAI \u5ba2\u6237\u7aef\uff0c\u8fde\u63a5 DashScope API self . client = OpenAI ( api_key = self . config . DASHSCOPE_API_KEY , base_url = self . config . DASHSCOPE_BASE_URL ) except Exception as e : # \u8bb0\u5f55 OpenAI \u521d\u59cb\u5316\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"OpenAI \u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25: { e } \" ) # \u629b\u51fa\u5f02\u5e38\uff0c\u7ec8\u6b62\u521d\u59cb\u5316 raise # \u521d\u59cb\u5316\u5411\u91cf\u5b58\u50a8\uff0c\u7528\u4e8e RAG \u7cfb\u7edf\u7684\u77e5\u8bc6\u5e93\u7ba1\u7406 self . vector_store = VectorStore () # \u521d\u59cb\u5316 RAG \u7cfb\u7edf\uff0c\u4f20\u5165\u5411\u91cf\u5b58\u50a8\u548c DashScope API \u8c03\u7528\u51fd\u6570 self . rag_system = RAGSystem ( self . vector_store , self . call_dashscope ) # \u521d\u59cb\u5316\u5bf9\u8bdd\u5386\u53f2\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u4f1a\u8bdd\u8bb0\u5f55 self . init_conversation_table ()","title":"3.2 \u7cfb\u7edf\u521d\u59cb\u5316"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#33","text":"( init_conversation_table ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5728 MySQL \u4e2d\u521b\u5efa conversations \u8868\uff0c\u5b58\u50a8\u4f1a\u8bdd ID\u3001\u95ee\u9898\u3001\u7b54\u6848\u548c\u65f6\u95f4\u6233\uff0c\u6dfb\u52a0\u7d22\u5f15\u4f18\u5316\u67e5\u8be2\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528 IF NOT EXISTS \u907f\u514d\u91cd\u590d\u521b\u5efa\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd\u5065\u58ee\u6027\u3002 def init_conversation_table ( self ): \"\"\"\u521d\u59cb\u5316MySQL\u4e2d\u7684conversations\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u5bf9\u8bdd\u5386\u53f2\"\"\" try : # \u521b\u5efa conversations \u8868\uff0c\u5305\u542b\u4f1a\u8bdd ID\u3001\u95ee\u9898\u3001\u7b54\u6848\u548c\u65f6\u95f4\u6233 self . mysql_client . cursor . execute ( \"\"\" CREATE TABLE IF NOT EXISTS conversations ( id INT AUTO_INCREMENT PRIMARY KEY, session_id VARCHAR(36) NOT NULL, question TEXT NOT NULL, answer TEXT NOT NULL, timestamp DATETIME NOT NULL, INDEX idx_session_id (session_id) ) \"\"\" ) # \u63d0\u4ea4\u6570\u636e\u5e93\u4e8b\u52a1 self . mysql_client . connection . commit () # \u8bb0\u5f55\u8868\u521d\u59cb\u5316\u6210\u529f\u7684\u65e5\u5fd7 self . logger . info ( \"\u5bf9\u8bdd\u5386\u53f2\u8868\u521d\u59cb\u5316\u6210\u529f\" ) except pymysql . MySQLError as e : # \u8bb0\u5f55\u8868\u521d\u59cb\u5316\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"\u521d\u59cb\u5316\u5bf9\u8bdd\u5386\u53f2\u8868\u5931\u8d25: { e } \" ) # \u629b\u51fa\u5f02\u5e38\uff0c\u7ec8\u6b62\u521d\u59cb\u5316 raise","title":"3.3 \u5bf9\u8bdd\u5386\u53f2\u8868\u521d\u59cb\u5316"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#34-dashscope-api","text":"( call_dashscope ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u901a\u8fc7 OpenAI \u5ba2\u6237\u7aef\u8c03\u7528 DashScope API\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\uff0c\u9010 token \u8fd4\u56de\u7b54\u6848\u3002 \u5173\u952e\u70b9 \uff1a\u542f\u7528 stream=True \u5b9e\u73b0\u6d41\u5f0f\u8f93\u51fa\uff0c\u5f02\u5e38\u5904\u7406\u6355\u83b7 API \u8c03\u7528\u5931\u8d25\uff0c\u652f\u6301\u524d\u7aef\u5b9e\u65f6\u663e\u793a\u3002 def call_dashscope ( self , prompt ): \"\"\"\u8c03\u7528DashScope API\u751f\u6210\u7b54\u6848\uff08\u6d41\u5f0f\u8f93\u51fa\uff09\"\"\" try : # \u521b\u5efa\u804a\u5929\u5b8c\u6210\u8bf7\u6c42\uff0c\u542f\u7528\u6d41\u5f0f\u8f93\u51fa completion = self . client . chat . completions . create ( model = self . config . LLM_MODEL , # \u4f7f\u7528\u914d\u7f6e\u4e2d\u7684\u8bed\u8a00\u6a21\u578b messages = [ { \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\u3002\" }, # \u7cfb\u7edf\u63d0\u793a { \"role\" : \"user\" , \"content\" : prompt }, # \u7528\u6237\u8f93\u5165\u7684\u63d0\u793a ], timeout = 30 , # \u8bbe\u7f6e 30 \u79d2\u8d85\u65f6 stream = True # \u542f\u7528\u6d41\u5f0f\u8f93\u51fa ) # \u521d\u59cb\u5316\u6536\u96c6\u6d41\u5f0f\u8f93\u51fa\u7684\u5b57\u7b26\u4e32 collected_content = \"\" # \u904d\u5386\u6d41\u5f0f\u8f93\u51fa\u7684\u6bcf\u4e2a chunk for chunk in completion : if chunk . choices and chunk . choices [ 0 ] . delta . content : # \u83b7\u53d6\u5f53\u524d chunk \u7684\u5185\u5bb9 content = chunk . choices [ 0 ] . delta . content # \u7d2f\u79ef\u5185\u5bb9 collected_content += content # \u9010 token \u8fd4\u56de\uff0c\u4f9b\u524d\u7aef\u5b9e\u65f6\u663e\u793a yield content # \u8fd4\u56de\u5b8c\u6574\u7b54\u6848 return collected_content except Exception as e : # \u8bb0\u5f55 API \u8c03\u7528\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"LLM\u8c03\u7528\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u9519\u8bef\u4fe1\u606f return f \"\u9519\u8bef\uff1aLLM\u8c03\u7528\u5931\u8d25 - { e } \"","title":"3.4 \u8c03\u7528 DashScope API"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#35","text":"( _fetch_recent_history ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u4ece MySQL \u7684 conversations \u8868\u83b7\u53d6\u6307\u5b9a session_id \u7684\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\u5386\u53f2\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\u9632\u6b62 SQL \u6ce8\u5165\uff0c\u8fd4\u56de\u7ed3\u679c\u6309\u65f6\u95f4\u6b63\u5e8f\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd\u5065\u58ee\u6027\u3002 def _fetch_recent_history ( self , session_id : str ) -> list : \"\"\"\u83b7\u53d6\u6700\u8fd15\u8f6e\u5bf9\u8bdd\u5386\u53f2\"\"\" try : # \u6267\u884c SQL \u67e5\u8be2\uff0c\u83b7\u53d6\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd self . mysql_client . cursor . execute ( \"\"\" SELECT question, answer FROM conversations WHERE session_id = %s ORDER BY timestamp DESC LIMIT %s \"\"\" , ( session_id , 5 )) # \u5c06\u67e5\u8be2\u7ed3\u679c\u8f6c\u6362\u4e3a\u5b57\u5178\u5217\u8868 history = [{ \"question\" : row [ 0 ], \"answer\" : row [ 1 ]} for row in self . mysql_client . cursor . fetchall ()] # \u53cd\u8f6c\u7ed3\u679c\uff0c\u6309\u65f6\u95f4\u6b63\u5e8f\u8fd4\u56de return history [:: - 1 ] except pymysql . MySQLError as e : # \u8bb0\u5f55\u67e5\u8be2\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"\u83b7\u53d6\u5bf9\u8bdd\u5386\u53f2\u5931\u8d25: { e } \" ) # \u8fd4\u56de\u7a7a\u5217\u8868 return []","title":"3.5 \u83b7\u53d6\u6700\u8fd1\u5bf9\u8bdd\u5386\u53f2"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#36","text":"( update_session_history ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5c06\u65b0\u95ee\u9898\u548c\u7b54\u6848\u63d2\u5165 conversations \u8868\uff0c\u4fdd\u7559\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\uff0c\u5220\u9664\u65e7\u8bb0\u5f55\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528\u4e8b\u52a1\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\uff0c\u5b50\u67e5\u8be2\u5220\u9664\u8d85\u51fa\u9650\u5236\u7684\u8bb0\u5f55\uff0c\u65e5\u5fd7\u8bb0\u5f55\u64cd\u4f5c\u7ed3\u679c\u3002 def update_session_history ( self , session_id : str , question : str , answer : str ) -> list : \"\"\"\u66f4\u65b0\u4f1a\u8bdd\u5386\u53f2\u5230MySQL\uff0c\u4fdd\u7559\u6700\u8fd15\u8f6e\u5bf9\u8bdd\"\"\" try : # \u63d2\u5165\u65b0\u7684\u5bf9\u8bdd\u8bb0\u5f55 self . mysql_client . cursor . execute ( \"\"\" INSERT INTO conversations (session_id, question, answer, timestamp) VALUES ( %s , %s , %s , NOW()) \"\"\" , ( session_id , question , answer )) # \u83b7\u53d6\u66f4\u65b0\u540e\u7684\u5bf9\u8bdd\u5386\u53f2 history = self . _fetch_recent_history ( session_id ) # \u5220\u9664\u8d85\u51fa 5 \u8f6e\u7684\u65e7\u8bb0\u5f55 self . mysql_client . cursor . execute ( \"\"\" DELETE FROM conversations WHERE session_id = %s AND id NOT IN ( SELECT id FROM ( SELECT id FROM conversations WHERE session_id = %s ORDER BY timestamp DESC LIMIT %s ) AS sub ) \"\"\" , ( session_id , session_id , 5 )) # \u63d0\u4ea4\u4e8b\u52a1 self . mysql_client . connection . commit () # \u8bb0\u5f55\u66f4\u65b0\u6210\u529f\u7684\u65e5\u5fd7 self . logger . info ( f \"\u4f1a\u8bdd { session_id } \u5386\u53f2\u66f4\u65b0\u6210\u529f\" ) # \u8fd4\u56de\u66f4\u65b0\u540e\u7684\u5386\u53f2 return history except pymysql . MySQLError as e : # \u8bb0\u5f55\u6570\u636e\u5e93\u64cd\u4f5c\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"\u66f4\u65b0\u4f1a\u8bdd\u5386\u53f2\u5931\u8d25: { e } \" ) # \u56de\u6eda\u4e8b\u52a1 self . mysql_client . connection . rollback () # \u629b\u51fa\u5f02\u5e38 raise except Exception as e : # \u8bb0\u5f55\u610f\u5916\u9519\u8bef\u7684\u65e5\u5fd7 self . logger . error ( f \"\u66f4\u65b0\u4f1a\u8bdd\u5386\u53f2\u610f\u5916\u9519\u8bef: { e } \" ) # \u56de\u6eda\u4e8b\u52a1 self . mysql_client . connection . rollback () # \u629b\u51fa\u5f02\u5e38 raise","title":"3.6 \u66f4\u65b0\u4f1a\u8bdd\u5386\u53f2"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#37","text":"( get_session_history ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u4ece MySQL \u83b7\u53d6\u6307\u5b9a session_id \u7684\u5bf9\u8bdd\u5386\u53f2\uff0c\u590d\u7528 _fetch_recent_history \u3002 \u5173\u952e\u70b9 \uff1a\u4fdd\u6301\u4ee3\u7801\u7b80\u6d01\uff0c\u9002\u5408\u5916\u90e8\u8c03\u7528\uff08\u5982 API \u6216\u754c\u9762\u5c55\u793a\uff09\u3002 def get_session_history ( self , session_id : str ) -> list : \"\"\"\u4eceMySQL\u83b7\u53d6\u4f1a\u8bdd\u5386\u53f2\"\"\" # \u8c03\u7528 _fetch_recent_history \u83b7\u53d6\u5bf9\u8bdd\u5386\u53f2 return self . _fetch_recent_history ( session_id )","title":"3.7 \u83b7\u53d6\u4f1a\u8bdd\u5386\u53f2"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#38","text":"( clear_session_history ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5220\u9664\u6307\u5b9a session_id \u7684\u6240\u6709\u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\u9632\u6b62 SQL \u6ce8\u5165\uff0c\u4e8b\u52a1\u7ba1\u7406\u786e\u4fdd\u64cd\u4f5c\u539f\u5b50\u6027\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u8868\u793a\u6210\u529f\u6216\u5931\u8d25\u3002 def clear_session_history ( self , session_id : str ) -> bool : \"\"\"\u6e05\u9664\u6307\u5b9a\u4f1a\u8bdd\u5386\u53f2\"\"\" try : # \u5220\u9664\u6307\u5b9a session_id \u7684\u6240\u6709\u5bf9\u8bdd\u8bb0\u5f55 self . mysql_client . cursor . execute ( \"\"\" DELETE FROM conversations WHERE session_id = %s \"\"\" , ( session_id ,)) # \u63d0\u4ea4\u4e8b\u52a1 self . mysql_client . connection . commit () # \u8bb0\u5f55\u6e05\u9664\u6210\u529f\u7684\u65e5\u5fd7 self . logger . info ( f \"\u4f1a\u8bdd { session_id } \u5386\u53f2\u5df2\u6e05\u9664\" ) # \u8fd4\u56de True \u8868\u793a\u6210\u529f return True except pymysql . MySQLError as e : # \u8bb0\u5f55\u6e05\u9664\u5931\u8d25\u7684\u9519\u8bef\u65e5\u5fd7 self . logger . error ( f \"\u6e05\u9664\u4f1a\u8bdd\u5386\u53f2\u5931\u8d25: { e } \" ) # \u56de\u6eda\u4e8b\u52a1 self . mysql_client . connection . rollback () # \u8fd4\u56de False \u8868\u793a\u5931\u8d25 return False","title":"3.8 \u6e05\u9664\u4f1a\u8bdd\u5386\u53f2"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#39","text":"( query ) \u65b9\u6cd5 \u529f\u80fd \uff1a\u5904\u7406\u7528\u6237\u67e5\u8be2\uff0c\u4f18\u5148\u4f7f\u7528 BM25 \u641c\u7d22 MySQL\uff0c\u82e5\u65e0\u53ef\u9760\u7b54\u6848\u5219\u56de\u9000\u5230 RAG\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u548c\u5bf9\u8bdd\u5386\u53f2\u3002 \u5173\u952e\u70b9 \uff1a\u901a\u8fc7\u751f\u6210\u5668\u9010 token \u8fd4\u56de RAG \u7b54\u6848\uff0c\u8bb0\u5f55\u5904\u7406\u65f6\u95f4\uff0c\u652f\u6301\u5b66\u79d1\u8fc7\u6ee4\u3002 \u6ce8\u610f\uff1a1.\u4fee\u6539generate_answer\u65b9\u6cd5\u6dfb\u52a0history\u53c2\u6570\uff0c2.\u4fee\u6539rag_prompt\u65b9\u6cd5\u7684\u63d0\u793a\u8bcd def query ( self , query , source_filter = None , session_id = None ): \"\"\"\u67e5\u8be2\u96c6\u6210\u7cfb\u7edf\uff0c\u652f\u6301\u5bf9\u8bdd\u5386\u53f2\u548c\u6d41\u5f0f\u8f93\u51fa\"\"\" start_time = time . time () # \u8bb0\u5f55\u67e5\u8be2\u5f00\u59cb\u65f6\u95f4 # \u8bb0\u5f55\u67e5\u8be2\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( f \"\u5904\u7406\u67e5\u8be2: ' { query } ' (\u4f1a\u8bddID: { session_id } )\" ) # \u83b7\u53d6\u5bf9\u8bdd\u5386\u53f2\uff0c\u82e5\u65e0 session_id \u5219\u8fd4\u56de\u7a7a\u5217\u8868 history = self . get_session_history ( session_id ) if session_id else [] # \u6267\u884c BM25 \u641c\u7d22\uff0c\u83b7\u53d6\u7b54\u6848\u548c\u662f\u5426\u9700\u8981 RAG \u7684\u6807\u5fd7 answer , need_rag = self . bm25_search . search ( query , threshold = 0.85 ) if answer : # \u5982\u679c\u627e\u5230\u53ef\u9760\u7b54\u6848\uff0c\u8bb0\u5f55\u7b54\u6848\u5230\u65e5\u5fd7 self . logger . info ( f \"MySQL\u7b54\u6848: { answer } \" ) if session_id : # \u66f4\u65b0\u5bf9\u8bdd\u5386\u53f2 self . update_session_history ( session_id , query , answer ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u4e00\u6b21\u6027\u8fd4\u56de\u7b54\u6848\uff0c\u6807\u8bb0\u4e3a\u5b8c\u6574 yield answer , True elif need_rag : # \u5982\u679c\u9700\u8981 RAG\uff0c\u8bb0\u5f55\u56de\u9000\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( \"\u65e0\u53ef\u9760MySQL\u7b54\u6848\uff0c\u56de\u9000\u5230RAG\" ) # \u521d\u59cb\u5316\u6536\u96c6\u5b8c\u6574\u7b54\u6848\u7684\u5b57\u7b26\u4e32 collected_answer = \"\" # \u4ece RAG \u7cfb\u7edf\u83b7\u53d6\u6d41\u5f0f\u8f93\u51fa for token in self . rag_system . generate_answer ( query , source_filter = source_filter , history = history ): # \u7d2f\u79ef\u7b54\u6848 collected_answer += token # \u9010 token \u8fd4\u56de\uff0c\u6807\u8bb0\u4e3a\u90e8\u5206\u7b54\u6848 yield token , False if session_id : # \u66f4\u65b0\u5bf9\u8bdd\u5386\u53f2\uff0c\u5b58\u50a8\u5b8c\u6574\u7b54\u6848 self . update_session_history ( session_id , query , collected_answer ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u6807\u8bb0\u6d41\u7ed3\u675f yield \"\" , True else : # \u5982\u679c\u65e0\u7b54\u6848\uff0c\u8bb0\u5f55\u4fe1\u606f\u5230\u65e5\u5fd7 self . logger . info ( \"\u672a\u627e\u5230\u7b54\u6848\" ) # \u8ba1\u7b97\u5904\u7406\u65f6\u95f4 processing_time = time . time () - start_time # \u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u5230\u65e5\u5fd7 self . logger . info ( f \"\u67e5\u8be2\u5904\u7406\u8017\u65f6 { processing_time : .2f } \u79d2\" ) # \u4e00\u6b21\u6027\u8fd4\u56de\u9ed8\u8ba4\u7b54\u6848\uff0c\u6807\u8bb0\u4e3a\u5b8c\u6574 yield \"\u672a\u627e\u5230\u7b54\u6848\" , True","title":"3.9 \u67e5\u8be2\u5904\u7406"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#310","text":"( main ) \u51fd\u6570 \u529f\u80fd \uff1a\u63d0\u4f9b\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u754c\u9762\uff0c\u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID\uff0c\u63a5\u53d7\u7528\u6237\u67e5\u8be2\u548c\u5b66\u79d1\u8fc7\u6ee4\uff0c\u6d41\u5f0f\u663e\u793a\u7b54\u6848\u5e76\u5c55\u793a\u5bf9\u8bdd\u5386\u53f2\u3002 \u5173\u952e\u70b9 \uff1a\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\uff0c\u9a8c\u8bc1\u5b66\u79d1\u8fc7\u6ee4\u6709\u6548\u6027\uff0c\u5f02\u5e38\u5904\u7406\u548c\u8d44\u6e90\u6e05\u7406\u786e\u4fdd\u7cfb\u7edf\u5065\u58ee\u3002 def main (): # \u5b9a\u4e49\u4e3b\u51fd\u6570\uff0c\u63d0\u4f9b\u547d\u4ee4\u884c\u4ea4\u4e92\u754c\u9762 qa_system = IntegratedQASystem () # \u521d\u59cb\u5316\u95ee\u7b54\u7cfb\u7edf # \u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID session_id = str ( uuid . uuid4 ()) # \u6253\u5370\u6b22\u8fce\u4fe1\u606f print ( \" \\n \u6b22\u8fce\u4f7f\u7528\u96c6\u6210\u95ee\u7b54\u7cfb\u7edf\uff01\" ) # \u6253\u5370\u4f1a\u8bdd ID print ( f \"\u4f1a\u8bddID: { session_id } \" ) # \u6253\u5370\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b print ( f \"\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\uff1a { qa_system . config . VALID_SOURCES } \" ) # \u63d0\u793a\u7528\u6237\u8f93\u5165\u67e5\u8be2\u6216\u9000\u51fa print ( \"\u8f93\u5165\u67e5\u8be2\u8fdb\u884c\u95ee\u7b54\uff0c\u8f93\u5165 'exit' \u9000\u51fa\u3002\" ) try : while True : # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u67e5\u8be2 query = input ( \" \\n \u8f93\u5165\u67e5\u8be2: \" ) . strip () if query . lower () == \"exit\" : # \u5982\u679c\u7528\u6237\u8f93\u5165 exit\uff0c\u8bb0\u5f55\u9000\u51fa\u65e5\u5fd7 logger . info ( \"\u9000\u51fa\u7cfb\u7edf\" ) # \u6253\u5370\u9000\u51fa\u4fe1\u606f print ( \"\u518d\u89c1\uff01\" ) # \u9000\u51fa\u5faa\u73af break # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b66\u79d1\u8fc7\u6ee4 source_filter = input ( f \"\u8bf7\u8f93\u5165\u5b66\u79d1\u7c7b\u522b ( { '/' . join ( qa_system . config . VALID_SOURCES ) } ) (\u76f4\u63a5\u56de\u8f66\u9ed8\u8ba4\u4e0d\u8fc7\u6ee4): \" ) . strip () if source_filter and source_filter not in qa_system . config . VALID_SOURCES : # \u5982\u679c\u5b66\u79d1\u8fc7\u6ee4\u65e0\u6548\uff0c\u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7 logger . warning ( f \"\u65e0\u6548\u7684\u5b66\u79d1\u7c7b\u522b ' { source_filter } '\uff0c\u5c06\u4e0d\u8fc7\u6ee4\" ) # \u8bbe\u7f6e\u4e3a\u7a7a\uff0c\u5ffd\u7565\u8fc7\u6ee4 source_filter = None # \u6253\u5370\u7b54\u6848\u63d0\u793a print ( \" \\n \u7b54\u6848: \" , end = \"\" , flush = True ) # \u521d\u59cb\u5316\u7d2f\u79ef\u7b54\u6848\u7684\u5b57\u7b26\u4e32 answer = \"\" # \u8fed\u4ee3 query \u65b9\u6cd5\u7684\u751f\u6210\u5668 for token , is_complete in qa_system . query ( query , source_filter = source_filter , session_id = session_id ): if token : # \u4ec5\u5f53 token \u975e\u7a7a\u65f6\u6253\u5370 print ( token , end = \"\" , flush = True ) # \u7d2f\u79ef\u7b54\u6848 answer += token if is_complete : # \u5982\u679c\u662f\u5b8c\u6574\u7b54\u6848\u6216\u6d41\u7ed3\u675f\uff0c\u6362\u884c\u5e76\u9000\u51fa\u5faa\u73af print () break # \u6253\u5370\u5bf9\u8bdd\u5386\u53f2 history = qa_system . get_session_history ( session_id ) print ( \" \\n \u6700\u8fd1\u5bf9\u8bdd\u5386\u53f2:\" ) for idx , entry in enumerate ( history , 1 ): # \u6309\u987a\u5e8f\u6253\u5370\u5386\u53f2\u8bb0\u5f55 print ( f \" { idx } . \u95ee: { entry [ 'question' ] } \\n \u7b54: { entry [ 'answer' ] } \" ) except Exception as e : # \u8bb0\u5f55\u7cfb\u7edf\u9519\u8bef\u65e5\u5fd7 logger . error ( f \"\u7cfb\u7edf\u9519\u8bef: { e } \" ) # \u6253\u5370\u9519\u8bef\u4fe1\u606f print ( f \"\u53d1\u751f\u9519\u8bef: { e } \" ) finally : # \u5173\u95ed MySQL \u8fde\u63a5 qa_system . mysql_client . close () if __name__ == \"__main__\" : # \u5982\u679c\u811a\u672c\u4f5c\u4e3a\u4e3b\u7a0b\u5e8f\u8fd0\u884c\uff0c\u8c03\u7528 main \u51fd\u6570 main ()","title":"3.10 \u547d\u4ee4\u884c\u4ea4\u4e92"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/02-%E5%A2%9E%E5%BC%BA%E5%9E%8BFAQ%E4%B8%8E%E7%9F%A5%E8%AF%86%E5%BA%93%E8%9E%8D%E5%90%88%E6%9F%A5%E8%AF%A2.html#_2","text":"\u672c\u7ae0\u5c55\u793a\u4e86\u4f18\u5316\u540e\u7684 new_main.py \uff0c\u901a\u8fc7\u65b0\u589e\u5bf9\u8bdd\u5386\u53f2\u7ba1\u7406\u548c\u6d41\u5f0f\u8f93\u51fa\u529f\u80fd\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4ea4\u4e92\u6027\u548c\u5b9e\u65f6\u6027\u3002\u7cfb\u7edf\u7ed3\u5408 MySQL FAQ \u7684\u5feb\u901f\u5339\u914d\u3001RAG \u7cfb\u7edf\u7684\u590d\u6742\u67e5\u8be2\u5904\u7406\u3001MySQL \u7684\u5386\u53f2\u5b58\u50a8\uff0c\u4ee5\u53ca\u6d41\u5f0f\u7b54\u6848\u751f\u6210\uff0c\u914d\u5907\u5065\u58ee\u7684\u65e5\u5fd7\u8bb0\u5f55\u548c\u9519\u8bef\u5904\u7406\uff0c\u9002\u5408\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html","text":"\u57fa\u4e8e FastAPI \u7684 FAQ \u4e0e\u77e5\u8bc6\u5e93\u67e5\u8be2\u63a5\u53e3 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u00b6 \u7406\u89e3\u5982\u4f55\u57fa\u4e8e FastAPI \u6784\u5efa\u9ad8\u6548\u7684\u95ee\u7b54\u7cfb\u7edf API \u63a5\u53e3\u3002 \u638c\u63e1 WebSocket \u6d41\u5f0f\u8f93\u51fa\u548c HTTP \u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u4f18\u5316\u7528\u6237\u4ea4\u4e92\u4f53\u9a8c\u3002 \u5b66\u4e60\u524d\u540e\u7aef\u4ea4\u4e92\u3001\u524d\u7aef\u9759\u6001\u6587\u4ef6\u670d\u52a1\u4ee5\u53ca\u65e5\u5e38\u95ee\u5019\u5904\u7406\u7684\u96c6\u6210\u3002 app.py \u662f\u5bf9 new_main.py \u7684\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u57fa\u4e8e FastAPI \u6846\u67b6\u6784\u5efa\u4e86 RESTful API \u548c WebSocket \u63a5\u53e3\uff0c\u96c6\u6210\u4e86 MySQL FAQ \u548c RAG \u7cfb\u7edf\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u3001\u5bf9\u8bdd\u5386\u53f2\u7ba1\u7406\u548c\u65e5\u5e38\u95ee\u5019\u5904\u7406\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u9759\u6001\u6587\u4ef6\u670d\u52a1\u652f\u6301\u524d\u7aef\u9875\u9762\u4ea4\u4e92\uff0c\u9002\u7528\u4e8e\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u7cfb\u7edf\u3002 1 \u67e5\u8be2\u6d41\u7a0b\u56fe \u00b6 \u4ee5\u4e0b\u662f\u57fa\u4e8e FastAPI \u7684\u95ee\u7b54\u7cfb\u7edf\u67e5\u8be2\u6d41\u7a0b\u56fe\uff0c\u5c55\u793a\u4ece\u524d\u7aef\u8bf7\u6c42\u5230\u540e\u7aef\u54cd\u5e94\u7684\u5904\u7406\u903b\u8f91\u3002 2 \u6d41\u7a0b\u8bf4\u660e \u00b6 \u8bf7\u6c42\u63a5\u6536 \uff1a\u524d\u7aef\u901a\u8fc7 HTTP POST ( /api/query ) \u6216 WebSocket ( /api/stream ) \u53d1\u9001\u67e5\u8be2\u8bf7\u6c42\uff0c\u5305\u542b\u67e5\u8be2\u5185\u5bb9 ( query )\u3001\u5b66\u79d1\u8fc7\u6ee4 ( source_filter ) \u548c\u4f1a\u8bdd ID ( session_id )\u3002 \u65e5\u5e38\u95ee\u5019\u5904\u7406 \uff1a\u68c0\u67e5\u67e5\u8be2\u662f\u5426\u4e3a\u65e5\u5e38\u95ee\u5019\uff08\u5982\u201c\u4f60\u597d\u201d\uff09\uff0c\u82e5\u5339\u914d\u5219\u8fd4\u56de\u6a21\u677f\u5316\u56de\u590d\u3002 BM25 \u641c\u7d22 \uff1a\u4f7f\u7528 BM25 \u7b97\u6cd5\u641c\u7d22 MySQL \u77e5\u8bc6\u5e93\uff0c\u8bbe\u7f6e\u76f8\u4f3c\u5ea6\u9608\u503c 0.85\u3002 \u7b54\u6848\u5224\u65ad : \u82e5\u627e\u5230\u53ef\u9760\u7b54\u6848\uff08\u76f8\u4f3c\u5ea6 > 0.85\uff09\uff0c\u901a\u8fc7 HTTP \u4e00\u6b21\u6027\u8fd4\u56de\u6216 WebSocket \u6d41\u5f0f\u8fd4\u56de\u3002 \u82e5\u65e0\u53ef\u9760\u7b54\u6848\u4e14\u9700\u8981 RAG\uff0cHTTP \u63a5\u53e3\u63d0\u793a\u4f7f\u7528 WebSocket\uff0cWebSocket \u63a5\u53e3\u6d41\u5f0f\u8fd4\u56de RAG \u7b54\u6848\u3002 \u82e5\u65e0\u9700 RAG\uff0c\u8fd4\u56de\u201c\u672a\u627e\u5230\u7b54\u6848\u201d\u3002 \u5386\u53f2\u66f4\u65b0 \uff1a\u5c06\u67e5\u8be2\u548c\u7b54\u6848\u5b58\u5165 MySQL \u7684 conversations \u8868\uff0c\u4fdd\u7559\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\u3002 \u54cd\u5e94\u8f93\u51fa \uff1aHTTP \u8fd4\u56de JSON \u683c\u5f0f\u54cd\u5e94\uff0cWebSocket \u6d41\u5f0f\u53d1\u9001 JSON \u6570\u636e\uff08\u5305\u542b start \u3001 token \u3001 end \u6216 error \u7c7b\u578b\uff09\u3002 3 \u4ee3\u7801\u4ecb\u7ecd \u00b6 \u4ee5\u4e0b\u662f app.py \u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u5305\u542b\u9010\u884c\u6ce8\u91ca\uff0c\u8be6\u7ec6\u89e3\u6790\u529f\u80fd\u4e0e\u5b9e\u73b0\u903b\u8f91\u3002 3.1 \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u00b6 # \u5bfc\u5165 FastAPI \u76f8\u5173\u6a21\u5757\uff0c\u7528\u4e8e\u6784\u5efa API \u548c WebSocket from fastapi import FastAPI , WebSocket , HTTPException , Query , Depends # \u5bfc\u5165 FastAPI \u54cd\u5e94\u7c7b\u578b\uff0c\u7528\u4e8e\u6d41\u5f0f\u54cd\u5e94\u548c\u6587\u4ef6\u670d\u52a1 from fastapi.responses import StreamingResponse , FileResponse # \u5bfc\u5165 CORS \u4e2d\u95f4\u4ef6\uff0c\u652f\u6301\u8de8\u57df\u8bf7\u6c42 from fastapi.middleware.cors import CORSMiddleware # \u5bfc\u5165\u9759\u6001\u6587\u4ef6\u670d\u52a1\u6a21\u5757 from fastapi.staticfiles import StaticFiles # \u5bfc\u5165 WebSocket \u65ad\u5f00\u5f02\u5e38 from starlette.websockets import WebSocketDisconnect # \u5bfc\u5165\u7cfb\u7edf\u64cd\u4f5c\u6a21\u5757\uff0c\u7528\u4e8e\u6587\u4ef6\u76ee\u5f55\u7ba1\u7406 import os # \u5bfc\u5165 Pydantic \u6a21\u578b\uff0c\u7528\u4e8e\u8bf7\u6c42\u9a8c\u8bc1 from pydantic import BaseModel # \u5bfc\u5165\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\u6a21\u5757 import asyncio # \u5bfc\u5165 JSON \u5904\u7406\u6a21\u5757 import json # \u5bfc\u5165 UUID \u6a21\u5757\uff0c\u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID import uuid # \u5bfc\u5165\u7c7b\u578b\u6ce8\u89e3\u6a21\u5757 from typing import Optional , List , Dict , Any # \u5bfc\u5165\u65f6\u95f4\u6a21\u5757\uff0c\u8bb0\u5f55\u5904\u7406\u65f6\u95f4 import time # \u5bfc\u5165\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5757\uff0c\u7528\u4e8e\u5339\u914d\u65e5\u5e38\u95ee\u5019 import re # \u5bfc\u5165\u4f18\u5316\u540e\u7684\u95ee\u7b54\u7cfb\u7edf from new_main import IntegratedQASystem 3.2 \u521b\u5efa FastAPI \u5e94\u7528\u5e76\u914d\u7f6e \u00b6 \u521b\u5efa FastAPI \u5b9e\u4f8b\u5e76\u914d\u7f6e CORS \u548c\u9759\u6001\u6587\u4ef6\u670d\u52a1\u3002 \u529f\u80fd \uff1a\u521d\u59cb\u5316 FastAPI \u5e94\u7528\uff0c\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\uff0c\u6302\u8f7d\u9759\u6001\u6587\u4ef6\u76ee\u5f55\u3002 \u5173\u952e\u70b9 \uff1aCORS \u914d\u7f6e\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u9700\u9650\u5236\u57df\u540d\uff0c\u9759\u6001\u6587\u4ef6\u670d\u52a1\u652f\u6301\u524d\u7aef\u9875\u9762\u3002 # \u521b\u5efa FastAPI \u5e94\u7528\u5b9e\u4f8b\uff0c\u8bbe\u7f6e\u6807\u9898\u548c\u63cf\u8ff0 app = FastAPI ( title = \"\u95ee\u7b54\u7cfb\u7edfAPI\" , description = \"\u96c6\u6210MySQL\u548cRAG\u7684\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\" ) # \u914d\u7f6e CORS \u4e2d\u95f4\u4ef6\uff0c\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42 app . add_middleware ( CORSMiddleware , allow_origins = [ \"*\" ], # \u5141\u8bb8\u6240\u6709\u6765\u6e90\uff08\u751f\u4ea7\u73af\u5883\u9700\u9650\u5236\uff09 allow_credentials = True , # \u5141\u8bb8\u51ed\u8bc1 allow_methods = [ \"*\" ], # \u5141\u8bb8\u6240\u6709 HTTP \u65b9\u6cd5 allow_headers = [ \"*\" ], # \u5141\u8bb8\u6240\u6709\u5934\u90e8 ) # \u521b\u5efa\u9759\u6001\u6587\u4ef6\u76ee\u5f55\uff08\u5982\u679c\u4e0d\u5b58\u5728\uff09 os . makedirs ( \"static\" , exist_ok = True ) # \u521b\u5efa\u5168\u5c40\u95ee\u7b54\u7cfb\u7edf\u5b9e\u4f8b qa_system = IntegratedQASystem () 3.3 \u5b9a\u4e49\u65e5\u5e38\u95ee\u5019\u6a21\u5f0f \u00b6 \u5b9a\u4e49\u95ee\u5019\u8bed\u6b63\u5219\u5339\u914d\u6a21\u5f0f\u548c\u56de\u590d\u3002 \u529f\u80fd \uff1a\u5feb\u901f\u54cd\u5e94\u5e38\u89c1\u95ee\u5019\uff0c\u63d0\u5347\u7528\u6237\u4f53\u9a8c\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\uff0c\u652f\u6301\u5927\u5c0f\u5199\u65e0\u5173\u5339\u914d\u3002 # \u5b9a\u4e49\u65e5\u5e38\u95ee\u5019\u7528\u8bed\u6a21\u5f0f\u548c\u56de\u590d GREETING_PATTERNS = [ { \"pattern\" : r \"^(\u4f60\u597d|\u60a8\u597d|hi|hello)\" , # \u5339\u914d\u95ee\u5019\u8bed \"response\" : \"\u4f60\u597d\uff01\u6211\u662f\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff0c\u4e13\u6ce8\u4e8e\u4e3a\u5b66\u751f\u7b54\u7591\u89e3\u60d1\uff0c\u5f88\u9ad8\u5174\u4e3a\u4f60\u670d\u52a1\uff01\" }, { \"pattern\" : r \"^(\u4f60\u662f\u8c01|\u60a8\u662f\u8c01|\u4f60\u53eb\u4ec0\u4e48|\u4f60\u7684\u540d\u5b57|who are you)\" , # \u5339\u914d\u8eab\u4efd\u8be2\u95ee \"response\" : \"\u6211\u662f\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff0c\u4f60\u7684\u667a\u80fd\u5b66\u4e60\u52a9\u624b\uff0c\u81f4\u529b\u4e8e\u63d0\u4f9b IT \u6559\u80b2\u76f8\u5173\u7684\u89e3\u7b54\uff01\" }, { \"pattern\" : r \"^(\u5728\u5417|\u5728\u4e0d\u5728|\u6709\u4eba\u5417)\" , # \u5339\u914d\u5728\u7ebf\u786e\u8ba4 \"response\" : \"\u6211\u5728\uff01\u6211\u662f\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff0c\u968f\u65f6\u4e3a\u4f60\u89e3\u7b54\u95ee\u9898\uff01\" }, { \"pattern\" : r \"^(\u5e72\u561b\u5462|\u4f60\u5728\u5e72\u561b|\u505a\u4ec0\u4e48)\" , # \u5339\u914d\u72b6\u6001\u8be2\u95ee \"response\" : \"\u6211\u6b63\u5728\u5f85\u547d\uff0c\u968f\u65f6\u4e3a\u4f60\u89e3\u7b54 IT \u5b66\u4e60\u76f8\u5173\u7684\u95ee\u9898\uff01\u6709\u4ec0\u4e48\u6211\u53ef\u4ee5\u5e2e\u4f60\u7684\uff1f\" } ] 3.4 \u5b9a\u4e49\u8bf7\u6c42\u548c\u54cd\u5e94\u6a21\u578b \u00b6 \u4f7f\u7528 Pydantic \u5b9a\u4e49\u8bf7\u6c42\u548c\u54cd\u5e94\u6570\u636e\u7ed3\u6784\u3002 \u529f\u80fd \uff1a\u89c4\u8303 API \u8f93\u5165\u548c\u8f93\u51fa\u683c\u5f0f\uff0c\u786e\u4fdd\u6570\u636e\u9a8c\u8bc1\u3002 \u5173\u952e\u70b9 \uff1a\u652f\u6301\u53ef\u9009\u5b57\u6bb5\uff0c\u65b9\u4fbf\u6269\u5c55\u3002 # \u5b9a\u4e49\u67e5\u8be2\u8bf7\u6c42\u6a21\u578b class QueryRequest ( BaseModel ): query : str # \u67e5\u8be2\u5185\u5bb9\uff0c\u5fc5\u586b source_filter : Optional [ str ] = None # \u5b66\u79d1\u8fc7\u6ee4\uff0c\u53ef\u9009 session_id : Optional [ str ] = None # \u4f1a\u8bdd ID\uff0c\u53ef\u9009 # \u5b9a\u4e49\u67e5\u8be2\u54cd\u5e94\u6a21\u578b class QueryResponse ( BaseModel ): answer : str # \u7b54\u6848\u5185\u5bb9 is_streaming : bool # \u662f\u5426\u6d41\u5f0f\u54cd\u5e94 session_id : str # \u4f1a\u8bdd ID processing_time : float # \u5904\u7406\u65f6\u95f4 3.5 \u6302\u8f7d\u9759\u6001\u6587\u4ef6\u670d\u52a1 \u00b6 \u6302\u8f7d\u9759\u6001\u6587\u4ef6\u76ee\u5f55\u5e76\u8bbe\u7f6e\u6839\u8def\u5f84\u3002 \u529f\u80fd \uff1a\u670d\u52a1\u524d\u7aef HTML \u6587\u4ef6\uff0c\u652f\u6301\u4ea4\u4e92\u9875\u9762\u3002 \u5173\u952e\u70b9 \uff1a\u6839\u8def\u5f84\u91cd\u5b9a\u5411\u5230 index.html \u3002 # \u6302\u8f7d\u9759\u6001\u6587\u4ef6\u76ee\u5f55\uff0c\u670d\u52a1\u524d\u7aef\u6587\u4ef6 app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) # \u6839\u8def\u5f84\u91cd\u5b9a\u5411\u5230 index.html @app . get ( \"/\" ) async def read_root (): return FileResponse ( \"static/index.html\" ) 3.6 \u521b\u5efa\u65b0\u4f1a\u8bdd \u00b6 ( /api/create_session ) \u63a5\u53e3 \u529f\u80fd \uff1a\u751f\u6210\u65b0\u7684\u552f\u4e00\u4f1a\u8bdd ID\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528 UUID \u786e\u4fdd\u552f\u4e00\u6027\u3002 # \u521b\u5efa\u65b0\u4f1a\u8bdd\u63a5\u53e3 @app . post ( \"/api/create_session\" ) async def create_session (): session_id = str ( uuid . uuid4 ()) # \u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID return { \"session_id\" : session_id } # \u8fd4\u56de\u4f1a\u8bdd ID 3.7 \u67e5\u8be2\u5386\u53f2\u6d88\u606f \u00b6 ( /api/history/{session_id} ) \u63a5\u53e3 \u529f\u80fd \uff1a\u83b7\u53d6\u6307\u5b9a\u4f1a\u8bdd\u7684\u5386\u53f2\u8bb0\u5f55\u3002 \u5173\u952e\u70b9 \uff1a\u5f02\u5e38\u5904\u7406\u786e\u4fdd\u63a5\u53e3\u5065\u58ee\u6027\u3002 # \u67e5\u8be2\u5386\u53f2\u6d88\u606f\u63a5\u53e3 @app . get ( \"/api/history/ {session_id} \" ) async def get_history ( session_id : str ): try : # \u83b7\u53d6\u6307\u5b9a\u4f1a\u8bdd\u7684\u5386\u53f2\u8bb0\u5f55 history = qa_system . get_session_history ( session_id ) # \u8fd4\u56de\u4f1a\u8bdd ID \u548c\u5386\u53f2\u8bb0\u5f55 return { \"session_id\" : session_id , \"history\" : history } except Exception as e : # \u629b\u51fa HTTP \u5f02\u5e38\uff0c\u5305\u542b\u9519\u8bef\u4fe1\u606f raise HTTPException ( status_code = 500 , detail = f \"\u83b7\u53d6\u5386\u53f2\u8bb0\u5f55\u5931\u8d25: { str ( e ) } \" ) 3.8 \u6e05\u9664\u5386\u53f2\u6d88\u606f \u00b6 ( /api/history/{session_id} ) \u63a5\u53e3 \u529f\u80fd \uff1a\u5220\u9664\u6307\u5b9a\u4f1a\u8bdd\u7684\u6240\u6709\u5386\u53f2\u8bb0\u5f55\u3002 \u5173\u952e\u70b9 \uff1a\u8fd4\u56de\u64cd\u4f5c\u72b6\u6001\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd\u5065\u58ee\u6027\u3002 # \u6e05\u9664\u5386\u53f2\u6d88\u606f\u63a5\u53e3 @app . delete ( \"/api/history/ {session_id} \" ) async def clear_history ( session_id : str ): # \u6e05\u9664\u6307\u5b9a\u4f1a\u8bdd\u7684\u5386\u53f2\u8bb0\u5f55 success = qa_system . clear_session_history ( session_id ) if success : # \u8fd4\u56de\u6210\u529f\u72b6\u6001 return { \"status\" : \"success\" , \"message\" : \"\u5386\u53f2\u8bb0\u5f55\u5df2\u6e05\u9664\" } else : # \u629b\u51fa HTTP \u5f02\u5e38 raise HTTPException ( status_code = 500 , detail = \"\u6e05\u9664\u5386\u53f2\u8bb0\u5f55\u5931\u8d25\" ) 3.9 \u68c0\u67e5\u65e5\u5e38\u95ee\u5019 \u00b6 ( check_greeting ) \u51fd\u6570 \u529f\u80fd \uff1a\u68c0\u67e5\u67e5\u8be2\u662f\u5426\u5339\u914d\u65e5\u5e38\u95ee\u5019\uff0c\u8fd4\u56de\u6a21\u677f\u5316\u56de\u590d\u3002 \u5173\u952e\u70b9 \uff1a\u6b63\u5219\u5339\u914d\u652f\u6301\u5927\u5c0f\u5199\u65e0\u5173\uff0c\u7b80\u5316\u4ea4\u4e92\u903b\u8f91\u3002 # \u68c0\u67e5\u662f\u5426\u4e3a\u65e5\u5e38\u95ee\u5019\u7528\u8bed\u5e76\u8fd4\u56de\u6a21\u677f\u56de\u590d def check_greeting ( query : str ) -> Optional [ str ]: query_text = query . strip () # \u53bb\u9664\u9996\u5c3e\u7a7a\u683c for pattern_info in GREETING_PATTERNS : # \u4f7f\u7528\u6b63\u5219\u5339\u914d\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 if re . match ( pattern_info [ \"pattern\" ], query_text , re . IGNORECASE ): return pattern_info [ \"response\" ] # \u8fd4\u56de\u5339\u914d\u7684\u56de\u590d return None # \u65e0\u5339\u914d\u8fd4\u56de None 3.10 \u975e\u6d41\u5f0f\u67e5\u8be2\u63a5\u53e3 \u00b6 ( /api/query ) \u63a5\u53e3 \u529f\u80fd \uff1a\u5904\u7406\u975e\u6d41\u5f0f\u67e5\u8be2\uff0c\u652f\u6301 MySQL \u7b54\u6848\u548c\u65e5\u5e38\u95ee\u5019\uff0c\u63d0\u793a\u4f7f\u7528 WebSocket \u83b7\u53d6 RAG \u6d41\u5f0f\u7b54\u6848\u3002 \u5173\u952e\u70b9 \uff1a\u8fd4\u56de JSON \u683c\u5f0f\u54cd\u5e94\uff0c\u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u3002 # \u975e\u6d41\u5f0f\u67e5\u8be2\u63a5\u53e3 @app . post ( \"/api/query\" ) async def query ( request : QueryRequest ): start_time = time . time () # \u8bb0\u5f55\u5f00\u59cb\u65f6\u95f4 # \u4f7f\u7528\u8bf7\u6c42\u4e2d\u7684 session_id \u6216\u751f\u6210\u65b0 ID session_id = request . session_id or str ( uuid . uuid4 ()) # \u68c0\u67e5\u662f\u5426\u4e3a\u65e5\u5e38\u95ee\u5019 greeting_response = check_greeting ( request . query ) if greeting_response : # \u8fd4\u56de\u95ee\u5019\u56de\u590d return { \"answer\" : greeting_response , \"is_streaming\" : False , \"session_id\" : session_id , \"processing_time\" : time . time () - start_time } # \u6267\u884c BM25 \u641c\u7d22 answer , need_rag = qa_system . bm25_search . search ( request . query , threshold = 0.85 ) if need_rag : # \u9700\u8981 RAG\uff0c\u63d0\u793a\u4f7f\u7528 WebSocket return { \"answer\" : \"\u8bf7\u4f7f\u7528WebSocket\u63a5\u53e3\u83b7\u53d6\u6d41\u5f0f\u54cd\u5e94\" , \"is_streaming\" : True , \"session_id\" : session_id , \"processing_time\" : time . time () - start_time } # \u8fd4\u56de MySQL \u7b54\u6848 return { \"answer\" : answer , \"is_streaming\" : False , \"session_id\" : session_id , \"processing_time\" : time . time () - start_time } 3.11 \u6d41\u5f0f\u67e5\u8be2 WebSocket \u63a5\u53e3 \u00b6 ( /api/stream ) \u63a5\u53e3 \u529f\u80fd \uff1a\u901a\u8fc7 WebSocket \u63d0\u4f9b\u6d41\u5f0f\u67e5\u8be2\uff0c\u652f\u6301 RAG \u7b54\u6848\u3001\u65e5\u5e38\u95ee\u5019\u548c\u9519\u8bef\u5904\u7406\u3002 \u5173\u952e\u70b9 \uff1a\u53d1\u9001 start \u3001 token \u3001 end \u6216 error \u7c7b\u578b\u7684 JSON \u6d88\u606f\uff0c\u5f02\u6b65\u5904\u7406\u786e\u4fdd\u5b9e\u65f6\u6027\u3002 # \u6d41\u5f0f\u67e5\u8be2 WebSocket \u63a5\u53e3 @app . websocket ( \"/api/stream\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () # \u63a5\u53d7 WebSocket \u8fde\u63a5 try : while True : # \u63a5\u6536\u5ba2\u6237\u7aef\u6d88\u606f data = await websocket . receive_text () request_data = json . loads ( data ) # \u89e3\u6790 JSON \u6570\u636e # \u83b7\u53d6\u67e5\u8be2\u53c2\u6570 query = request_data . get ( \"query\" ) source_filter = request_data . get ( \"source_filter\" ) session_id = request_data . get ( \"session_id\" , str ( uuid . uuid4 ())) start_time = time . time () # \u8bb0\u5f55\u5f00\u59cb\u65f6\u95f4 # \u53d1\u9001\u5f00\u59cb\u6807\u5fd7 if websocket . client_state == websocket . client_state . CONNECTED : await websocket . send_json ({ \"type\" : \"start\" , \"session_id\" : session_id }) # \u68c0\u67e5\u662f\u5426\u4e3a\u65e5\u5e38\u95ee\u5019 greeting_response = check_greeting ( query ) if greeting_response : if websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001\u95ee\u5019\u56de\u590d await websocket . send_json ({ \"type\" : \"token\" , \"token\" : greeting_response , \"session_id\" : session_id }) # \u53d1\u9001\u7ed3\u675f\u6807\u5fd7 await websocket . send_json ({ \"type\" : \"end\" , \"session_id\" : session_id , \"is_complete\" : True , \"processing_time\" : time . time () - start_time }) break # \u8c03\u7528\u95ee\u7b54\u7cfb\u7edf\uff0c\u6d41\u5f0f\u5904\u7406\u67e5\u8be2 collected_answer = \"\" for token , is_complete in qa_system . query ( query , source_filter = source_filter , session_id = session_id ): collected_answer += token # \u7d2f\u79ef\u7b54\u6848 if is_complete and not collected_answer : if websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001\u7ed3\u675f\u6807\u5fd7 await websocket . send_json ({ \"type\" : \"end\" , \"session_id\" : session_id , \"is_complete\" : True , \"processing_time\" : time . time () - start_time }) break if token and websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001 token \u6570\u636e await websocket . send_json ({ \"type\" : \"token\" , \"token\" : token , \"session_id\" : session_id }) if is_complete : if websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001\u7ed3\u675f\u6807\u5fd7 await websocket . send_json ({ \"type\" : \"end\" , \"session_id\" : session_id , \"is_complete\" : True , \"processing_time\" : time . time () - start_time }) break await asyncio . sleep ( 0.01 ) # \u63a7\u5236\u6d41\u5f0f\u8f93\u51fa\u7684\u901f\u5ea6 except WebSocketDisconnect as e : # \u8bb0\u5f55 WebSocket \u65ad\u5f00\u4fe1\u606f print ( f \"WebSocket disconnected: code= { e . code } , reason= { e . reason } \" ) except Exception as e : # \u8bb0\u5f55\u9519\u8bef\u4fe1\u606f print ( f \"WebSocket error: { str ( e ) } \" ) if websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001\u9519\u8bef\u6d88\u606f await websocket . send_json ({ \"type\" : \"error\" , \"error\" : str ( e ) }) finally : try : if websocket . client_state == websocket . client_state . CONNECTED : # \u5173\u95ed WebSocket \u8fde\u63a5 await websocket . close () except Exception as e : # \u8bb0\u5f55\u5173\u95ed\u8fde\u63a5\u65f6\u7684\u9519\u8bef print ( f \"Error closing WebSocket: { str ( e ) } \" ) 3.12 \u5065\u5eb7\u68c0\u67e5\u63a5\u53e3 \u00b6 ( /health ) \u63a5\u53e3 \u529f\u80fd \uff1a\u63d0\u4f9b\u5065\u5eb7\u68c0\u67e5\u7aef\u70b9\uff0c\u786e\u8ba4\u670d\u52a1\u72b6\u6001\u3002 \u5173\u952e\u70b9 \uff1a\u7b80\u5355\u53ef\u9760\uff0c\u9002\u5408\u76d1\u63a7\u7cfb\u7edf\u53ef\u7528\u6027\u3002 # \u5065\u5eb7\u68c0\u67e5\u63a5\u53e3 @app . get ( \"/health\" ) async def health_check (): return { \"status\" : \"healthy\" } # \u8fd4\u56de\u5065\u5eb7\u72b6\u6001 3.13 \u83b7\u53d6\u5b66\u79d1\u7c7b\u522b \u00b6 ( /api/sources ) \u63a5\u53e3 \u529f\u80fd \uff1a\u8fd4\u56de\u7cfb\u7edf\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\u3002 \u5173\u952e\u70b9 \uff1a\u4fbf\u4e8e\u524d\u7aef\u52a8\u6001\u5c55\u793a\u8fc7\u6ee4\u9009\u9879\u3002 # \u83b7\u53d6\u6709\u6548\u5b66\u79d1\u7c7b\u522b\u63a5\u53e3 @app . get ( \"/api/sources\" ) async def get_sources (): return { \"sources\" : qa_system . config . VALID_SOURCES } # \u8fd4\u56de\u5b66\u79d1\u7c7b\u522b\u5217\u8868 3.14 \u542f\u52a8 FastAPI \u670d\u52a1 \u00b6 \u4e3b\u7a0b\u5e8f\u5165\u53e3 \u529f\u80fd \uff1a\u4f7f\u7528 Uvicorn \u8fd0\u884c FastAPI \u5e94\u7528\u3002 \u5173\u952e\u70b9 \uff1a\u914d\u7f6e\u4e3b\u673a\u548c\u7aef\u53e3\uff0c\u652f\u6301\u751f\u4ea7\u73af\u5883\u90e8\u7f72\u3002 # \u4e3b\u7a0b\u5e8f\u5165\u53e3 if __name__ == \"__main__\" : import uvicorn # \u8fd0\u884c FastAPI \u5e94\u7528\uff0c\u76d1\u542c 0.0.0.0:8000 uvicorn . run ( \"app:app\" , host = \"0.0.0.0\" , port = 8000 , reload = False ) \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u7ae0\u5c55\u793a\u4e86\u57fa\u4e8e FastAPI \u7684 app.py \uff0c\u901a\u8fc7 RESTful API \u548c WebSocket \u63a5\u53e3\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u95ee\u7b54\u7cfb\u7edf\u3002\u7cfb\u7edf\u96c6\u6210\u4e86 MySQL FAQ \u548c RAG \u7684\u67e5\u8be2\u529f\u80fd\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u3001\u5bf9\u8bdd\u5386\u53f2\u7ba1\u7406\u548c\u65e5\u5e38\u95ee\u5019\u5904\u7406\uff0c\u7ed3\u5408\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5b9e\u73b0\u4e86\u524d\u540e\u7aef\u4ea4\u4e92\uff0c\u914d\u5907\u5065\u58ee\u7684\u9519\u8bef\u5904\u7406\u548c\u65e5\u5fd7\u8bb0\u5f55\uff0c\u9002\u5408\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42\u3002","title":"6.3 \u7cfb\u7edfAPI\u63a5\u53e3\u5f00\u53d1\u53cawebui\u5e94\u7528"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#fastapi-faq","text":"","title":"\u57fa\u4e8e FastAPI \u7684 FAQ \u4e0e\u77e5\u8bc6\u5e93\u67e5\u8be2\u63a5\u53e3"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#_1","text":"\u7406\u89e3\u5982\u4f55\u57fa\u4e8e FastAPI \u6784\u5efa\u9ad8\u6548\u7684\u95ee\u7b54\u7cfb\u7edf API \u63a5\u53e3\u3002 \u638c\u63e1 WebSocket \u6d41\u5f0f\u8f93\u51fa\u548c HTTP \u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u4f18\u5316\u7528\u6237\u4ea4\u4e92\u4f53\u9a8c\u3002 \u5b66\u4e60\u524d\u540e\u7aef\u4ea4\u4e92\u3001\u524d\u7aef\u9759\u6001\u6587\u4ef6\u670d\u52a1\u4ee5\u53ca\u65e5\u5e38\u95ee\u5019\u5904\u7406\u7684\u96c6\u6210\u3002 app.py \u662f\u5bf9 new_main.py \u7684\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u57fa\u4e8e FastAPI \u6846\u67b6\u6784\u5efa\u4e86 RESTful API \u548c WebSocket \u63a5\u53e3\uff0c\u96c6\u6210\u4e86 MySQL FAQ \u548c RAG \u7cfb\u7edf\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u3001\u5bf9\u8bdd\u5386\u53f2\u7ba1\u7406\u548c\u65e5\u5e38\u95ee\u5019\u5904\u7406\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u9759\u6001\u6587\u4ef6\u670d\u52a1\u652f\u6301\u524d\u7aef\u9875\u9762\u4ea4\u4e92\uff0c\u9002\u7528\u4e8e\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u7cfb\u7edf\u3002","title":"\u5b66\u4e60\u76ee\u6807\uff1a"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#1","text":"\u4ee5\u4e0b\u662f\u57fa\u4e8e FastAPI \u7684\u95ee\u7b54\u7cfb\u7edf\u67e5\u8be2\u6d41\u7a0b\u56fe\uff0c\u5c55\u793a\u4ece\u524d\u7aef\u8bf7\u6c42\u5230\u540e\u7aef\u54cd\u5e94\u7684\u5904\u7406\u903b\u8f91\u3002","title":"1 \u67e5\u8be2\u6d41\u7a0b\u56fe"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#2","text":"\u8bf7\u6c42\u63a5\u6536 \uff1a\u524d\u7aef\u901a\u8fc7 HTTP POST ( /api/query ) \u6216 WebSocket ( /api/stream ) \u53d1\u9001\u67e5\u8be2\u8bf7\u6c42\uff0c\u5305\u542b\u67e5\u8be2\u5185\u5bb9 ( query )\u3001\u5b66\u79d1\u8fc7\u6ee4 ( source_filter ) \u548c\u4f1a\u8bdd ID ( session_id )\u3002 \u65e5\u5e38\u95ee\u5019\u5904\u7406 \uff1a\u68c0\u67e5\u67e5\u8be2\u662f\u5426\u4e3a\u65e5\u5e38\u95ee\u5019\uff08\u5982\u201c\u4f60\u597d\u201d\uff09\uff0c\u82e5\u5339\u914d\u5219\u8fd4\u56de\u6a21\u677f\u5316\u56de\u590d\u3002 BM25 \u641c\u7d22 \uff1a\u4f7f\u7528 BM25 \u7b97\u6cd5\u641c\u7d22 MySQL \u77e5\u8bc6\u5e93\uff0c\u8bbe\u7f6e\u76f8\u4f3c\u5ea6\u9608\u503c 0.85\u3002 \u7b54\u6848\u5224\u65ad : \u82e5\u627e\u5230\u53ef\u9760\u7b54\u6848\uff08\u76f8\u4f3c\u5ea6 > 0.85\uff09\uff0c\u901a\u8fc7 HTTP \u4e00\u6b21\u6027\u8fd4\u56de\u6216 WebSocket \u6d41\u5f0f\u8fd4\u56de\u3002 \u82e5\u65e0\u53ef\u9760\u7b54\u6848\u4e14\u9700\u8981 RAG\uff0cHTTP \u63a5\u53e3\u63d0\u793a\u4f7f\u7528 WebSocket\uff0cWebSocket \u63a5\u53e3\u6d41\u5f0f\u8fd4\u56de RAG \u7b54\u6848\u3002 \u82e5\u65e0\u9700 RAG\uff0c\u8fd4\u56de\u201c\u672a\u627e\u5230\u7b54\u6848\u201d\u3002 \u5386\u53f2\u66f4\u65b0 \uff1a\u5c06\u67e5\u8be2\u548c\u7b54\u6848\u5b58\u5165 MySQL \u7684 conversations \u8868\uff0c\u4fdd\u7559\u6700\u8fd1 5 \u8f6e\u5bf9\u8bdd\u3002 \u54cd\u5e94\u8f93\u51fa \uff1aHTTP \u8fd4\u56de JSON \u683c\u5f0f\u54cd\u5e94\uff0cWebSocket \u6d41\u5f0f\u53d1\u9001 JSON \u6570\u636e\uff08\u5305\u542b start \u3001 token \u3001 end \u6216 error \u7c7b\u578b\uff09\u3002","title":"2 \u6d41\u7a0b\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#3","text":"\u4ee5\u4e0b\u662f app.py \u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u5305\u542b\u9010\u884c\u6ce8\u91ca\uff0c\u8be6\u7ec6\u89e3\u6790\u529f\u80fd\u4e0e\u5b9e\u73b0\u903b\u8f91\u3002","title":"3 \u4ee3\u7801\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#31","text":"# \u5bfc\u5165 FastAPI \u76f8\u5173\u6a21\u5757\uff0c\u7528\u4e8e\u6784\u5efa API \u548c WebSocket from fastapi import FastAPI , WebSocket , HTTPException , Query , Depends # \u5bfc\u5165 FastAPI \u54cd\u5e94\u7c7b\u578b\uff0c\u7528\u4e8e\u6d41\u5f0f\u54cd\u5e94\u548c\u6587\u4ef6\u670d\u52a1 from fastapi.responses import StreamingResponse , FileResponse # \u5bfc\u5165 CORS \u4e2d\u95f4\u4ef6\uff0c\u652f\u6301\u8de8\u57df\u8bf7\u6c42 from fastapi.middleware.cors import CORSMiddleware # \u5bfc\u5165\u9759\u6001\u6587\u4ef6\u670d\u52a1\u6a21\u5757 from fastapi.staticfiles import StaticFiles # \u5bfc\u5165 WebSocket \u65ad\u5f00\u5f02\u5e38 from starlette.websockets import WebSocketDisconnect # \u5bfc\u5165\u7cfb\u7edf\u64cd\u4f5c\u6a21\u5757\uff0c\u7528\u4e8e\u6587\u4ef6\u76ee\u5f55\u7ba1\u7406 import os # \u5bfc\u5165 Pydantic \u6a21\u578b\uff0c\u7528\u4e8e\u8bf7\u6c42\u9a8c\u8bc1 from pydantic import BaseModel # \u5bfc\u5165\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\u6a21\u5757 import asyncio # \u5bfc\u5165 JSON \u5904\u7406\u6a21\u5757 import json # \u5bfc\u5165 UUID \u6a21\u5757\uff0c\u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID import uuid # \u5bfc\u5165\u7c7b\u578b\u6ce8\u89e3\u6a21\u5757 from typing import Optional , List , Dict , Any # \u5bfc\u5165\u65f6\u95f4\u6a21\u5757\uff0c\u8bb0\u5f55\u5904\u7406\u65f6\u95f4 import time # \u5bfc\u5165\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5757\uff0c\u7528\u4e8e\u5339\u914d\u65e5\u5e38\u95ee\u5019 import re # \u5bfc\u5165\u4f18\u5316\u540e\u7684\u95ee\u7b54\u7cfb\u7edf from new_main import IntegratedQASystem","title":"3.1 \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#32-fastapi","text":"\u521b\u5efa FastAPI \u5b9e\u4f8b\u5e76\u914d\u7f6e CORS \u548c\u9759\u6001\u6587\u4ef6\u670d\u52a1\u3002 \u529f\u80fd \uff1a\u521d\u59cb\u5316 FastAPI \u5e94\u7528\uff0c\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\uff0c\u6302\u8f7d\u9759\u6001\u6587\u4ef6\u76ee\u5f55\u3002 \u5173\u952e\u70b9 \uff1aCORS \u914d\u7f6e\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u9700\u9650\u5236\u57df\u540d\uff0c\u9759\u6001\u6587\u4ef6\u670d\u52a1\u652f\u6301\u524d\u7aef\u9875\u9762\u3002 # \u521b\u5efa FastAPI \u5e94\u7528\u5b9e\u4f8b\uff0c\u8bbe\u7f6e\u6807\u9898\u548c\u63cf\u8ff0 app = FastAPI ( title = \"\u95ee\u7b54\u7cfb\u7edfAPI\" , description = \"\u96c6\u6210MySQL\u548cRAG\u7684\u667a\u80fd\u95ee\u7b54\u7cfb\u7edf\" ) # \u914d\u7f6e CORS \u4e2d\u95f4\u4ef6\uff0c\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42 app . add_middleware ( CORSMiddleware , allow_origins = [ \"*\" ], # \u5141\u8bb8\u6240\u6709\u6765\u6e90\uff08\u751f\u4ea7\u73af\u5883\u9700\u9650\u5236\uff09 allow_credentials = True , # \u5141\u8bb8\u51ed\u8bc1 allow_methods = [ \"*\" ], # \u5141\u8bb8\u6240\u6709 HTTP \u65b9\u6cd5 allow_headers = [ \"*\" ], # \u5141\u8bb8\u6240\u6709\u5934\u90e8 ) # \u521b\u5efa\u9759\u6001\u6587\u4ef6\u76ee\u5f55\uff08\u5982\u679c\u4e0d\u5b58\u5728\uff09 os . makedirs ( \"static\" , exist_ok = True ) # \u521b\u5efa\u5168\u5c40\u95ee\u7b54\u7cfb\u7edf\u5b9e\u4f8b qa_system = IntegratedQASystem ()","title":"3.2 \u521b\u5efa FastAPI \u5e94\u7528\u5e76\u914d\u7f6e"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#33","text":"\u5b9a\u4e49\u95ee\u5019\u8bed\u6b63\u5219\u5339\u914d\u6a21\u5f0f\u548c\u56de\u590d\u3002 \u529f\u80fd \uff1a\u5feb\u901f\u54cd\u5e94\u5e38\u89c1\u95ee\u5019\uff0c\u63d0\u5347\u7528\u6237\u4f53\u9a8c\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\uff0c\u652f\u6301\u5927\u5c0f\u5199\u65e0\u5173\u5339\u914d\u3002 # \u5b9a\u4e49\u65e5\u5e38\u95ee\u5019\u7528\u8bed\u6a21\u5f0f\u548c\u56de\u590d GREETING_PATTERNS = [ { \"pattern\" : r \"^(\u4f60\u597d|\u60a8\u597d|hi|hello)\" , # \u5339\u914d\u95ee\u5019\u8bed \"response\" : \"\u4f60\u597d\uff01\u6211\u662f\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff0c\u4e13\u6ce8\u4e8e\u4e3a\u5b66\u751f\u7b54\u7591\u89e3\u60d1\uff0c\u5f88\u9ad8\u5174\u4e3a\u4f60\u670d\u52a1\uff01\" }, { \"pattern\" : r \"^(\u4f60\u662f\u8c01|\u60a8\u662f\u8c01|\u4f60\u53eb\u4ec0\u4e48|\u4f60\u7684\u540d\u5b57|who are you)\" , # \u5339\u914d\u8eab\u4efd\u8be2\u95ee \"response\" : \"\u6211\u662f\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff0c\u4f60\u7684\u667a\u80fd\u5b66\u4e60\u52a9\u624b\uff0c\u81f4\u529b\u4e8e\u63d0\u4f9b IT \u6559\u80b2\u76f8\u5173\u7684\u89e3\u7b54\uff01\" }, { \"pattern\" : r \"^(\u5728\u5417|\u5728\u4e0d\u5728|\u6709\u4eba\u5417)\" , # \u5339\u914d\u5728\u7ebf\u786e\u8ba4 \"response\" : \"\u6211\u5728\uff01\u6211\u662f\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff0c\u968f\u65f6\u4e3a\u4f60\u89e3\u7b54\u95ee\u9898\uff01\" }, { \"pattern\" : r \"^(\u5e72\u561b\u5462|\u4f60\u5728\u5e72\u561b|\u505a\u4ec0\u4e48)\" , # \u5339\u914d\u72b6\u6001\u8be2\u95ee \"response\" : \"\u6211\u6b63\u5728\u5f85\u547d\uff0c\u968f\u65f6\u4e3a\u4f60\u89e3\u7b54 IT \u5b66\u4e60\u76f8\u5173\u7684\u95ee\u9898\uff01\u6709\u4ec0\u4e48\u6211\u53ef\u4ee5\u5e2e\u4f60\u7684\uff1f\" } ]","title":"3.3 \u5b9a\u4e49\u65e5\u5e38\u95ee\u5019\u6a21\u5f0f"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#34","text":"\u4f7f\u7528 Pydantic \u5b9a\u4e49\u8bf7\u6c42\u548c\u54cd\u5e94\u6570\u636e\u7ed3\u6784\u3002 \u529f\u80fd \uff1a\u89c4\u8303 API \u8f93\u5165\u548c\u8f93\u51fa\u683c\u5f0f\uff0c\u786e\u4fdd\u6570\u636e\u9a8c\u8bc1\u3002 \u5173\u952e\u70b9 \uff1a\u652f\u6301\u53ef\u9009\u5b57\u6bb5\uff0c\u65b9\u4fbf\u6269\u5c55\u3002 # \u5b9a\u4e49\u67e5\u8be2\u8bf7\u6c42\u6a21\u578b class QueryRequest ( BaseModel ): query : str # \u67e5\u8be2\u5185\u5bb9\uff0c\u5fc5\u586b source_filter : Optional [ str ] = None # \u5b66\u79d1\u8fc7\u6ee4\uff0c\u53ef\u9009 session_id : Optional [ str ] = None # \u4f1a\u8bdd ID\uff0c\u53ef\u9009 # \u5b9a\u4e49\u67e5\u8be2\u54cd\u5e94\u6a21\u578b class QueryResponse ( BaseModel ): answer : str # \u7b54\u6848\u5185\u5bb9 is_streaming : bool # \u662f\u5426\u6d41\u5f0f\u54cd\u5e94 session_id : str # \u4f1a\u8bdd ID processing_time : float # \u5904\u7406\u65f6\u95f4","title":"3.4 \u5b9a\u4e49\u8bf7\u6c42\u548c\u54cd\u5e94\u6a21\u578b"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#35","text":"\u6302\u8f7d\u9759\u6001\u6587\u4ef6\u76ee\u5f55\u5e76\u8bbe\u7f6e\u6839\u8def\u5f84\u3002 \u529f\u80fd \uff1a\u670d\u52a1\u524d\u7aef HTML \u6587\u4ef6\uff0c\u652f\u6301\u4ea4\u4e92\u9875\u9762\u3002 \u5173\u952e\u70b9 \uff1a\u6839\u8def\u5f84\u91cd\u5b9a\u5411\u5230 index.html \u3002 # \u6302\u8f7d\u9759\u6001\u6587\u4ef6\u76ee\u5f55\uff0c\u670d\u52a1\u524d\u7aef\u6587\u4ef6 app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) # \u6839\u8def\u5f84\u91cd\u5b9a\u5411\u5230 index.html @app . get ( \"/\" ) async def read_root (): return FileResponse ( \"static/index.html\" )","title":"3.5 \u6302\u8f7d\u9759\u6001\u6587\u4ef6\u670d\u52a1"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#36","text":"( /api/create_session ) \u63a5\u53e3 \u529f\u80fd \uff1a\u751f\u6210\u65b0\u7684\u552f\u4e00\u4f1a\u8bdd ID\u3002 \u5173\u952e\u70b9 \uff1a\u4f7f\u7528 UUID \u786e\u4fdd\u552f\u4e00\u6027\u3002 # \u521b\u5efa\u65b0\u4f1a\u8bdd\u63a5\u53e3 @app . post ( \"/api/create_session\" ) async def create_session (): session_id = str ( uuid . uuid4 ()) # \u751f\u6210\u552f\u4e00\u4f1a\u8bdd ID return { \"session_id\" : session_id } # \u8fd4\u56de\u4f1a\u8bdd ID","title":"3.6 \u521b\u5efa\u65b0\u4f1a\u8bdd"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#37","text":"( /api/history/{session_id} ) \u63a5\u53e3 \u529f\u80fd \uff1a\u83b7\u53d6\u6307\u5b9a\u4f1a\u8bdd\u7684\u5386\u53f2\u8bb0\u5f55\u3002 \u5173\u952e\u70b9 \uff1a\u5f02\u5e38\u5904\u7406\u786e\u4fdd\u63a5\u53e3\u5065\u58ee\u6027\u3002 # \u67e5\u8be2\u5386\u53f2\u6d88\u606f\u63a5\u53e3 @app . get ( \"/api/history/ {session_id} \" ) async def get_history ( session_id : str ): try : # \u83b7\u53d6\u6307\u5b9a\u4f1a\u8bdd\u7684\u5386\u53f2\u8bb0\u5f55 history = qa_system . get_session_history ( session_id ) # \u8fd4\u56de\u4f1a\u8bdd ID \u548c\u5386\u53f2\u8bb0\u5f55 return { \"session_id\" : session_id , \"history\" : history } except Exception as e : # \u629b\u51fa HTTP \u5f02\u5e38\uff0c\u5305\u542b\u9519\u8bef\u4fe1\u606f raise HTTPException ( status_code = 500 , detail = f \"\u83b7\u53d6\u5386\u53f2\u8bb0\u5f55\u5931\u8d25: { str ( e ) } \" )","title":"3.7 \u67e5\u8be2\u5386\u53f2\u6d88\u606f"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#38","text":"( /api/history/{session_id} ) \u63a5\u53e3 \u529f\u80fd \uff1a\u5220\u9664\u6307\u5b9a\u4f1a\u8bdd\u7684\u6240\u6709\u5386\u53f2\u8bb0\u5f55\u3002 \u5173\u952e\u70b9 \uff1a\u8fd4\u56de\u64cd\u4f5c\u72b6\u6001\uff0c\u5f02\u5e38\u5904\u7406\u786e\u4fdd\u5065\u58ee\u6027\u3002 # \u6e05\u9664\u5386\u53f2\u6d88\u606f\u63a5\u53e3 @app . delete ( \"/api/history/ {session_id} \" ) async def clear_history ( session_id : str ): # \u6e05\u9664\u6307\u5b9a\u4f1a\u8bdd\u7684\u5386\u53f2\u8bb0\u5f55 success = qa_system . clear_session_history ( session_id ) if success : # \u8fd4\u56de\u6210\u529f\u72b6\u6001 return { \"status\" : \"success\" , \"message\" : \"\u5386\u53f2\u8bb0\u5f55\u5df2\u6e05\u9664\" } else : # \u629b\u51fa HTTP \u5f02\u5e38 raise HTTPException ( status_code = 500 , detail = \"\u6e05\u9664\u5386\u53f2\u8bb0\u5f55\u5931\u8d25\" )","title":"3.8 \u6e05\u9664\u5386\u53f2\u6d88\u606f"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#39","text":"( check_greeting ) \u51fd\u6570 \u529f\u80fd \uff1a\u68c0\u67e5\u67e5\u8be2\u662f\u5426\u5339\u914d\u65e5\u5e38\u95ee\u5019\uff0c\u8fd4\u56de\u6a21\u677f\u5316\u56de\u590d\u3002 \u5173\u952e\u70b9 \uff1a\u6b63\u5219\u5339\u914d\u652f\u6301\u5927\u5c0f\u5199\u65e0\u5173\uff0c\u7b80\u5316\u4ea4\u4e92\u903b\u8f91\u3002 # \u68c0\u67e5\u662f\u5426\u4e3a\u65e5\u5e38\u95ee\u5019\u7528\u8bed\u5e76\u8fd4\u56de\u6a21\u677f\u56de\u590d def check_greeting ( query : str ) -> Optional [ str ]: query_text = query . strip () # \u53bb\u9664\u9996\u5c3e\u7a7a\u683c for pattern_info in GREETING_PATTERNS : # \u4f7f\u7528\u6b63\u5219\u5339\u914d\uff0c\u5ffd\u7565\u5927\u5c0f\u5199 if re . match ( pattern_info [ \"pattern\" ], query_text , re . IGNORECASE ): return pattern_info [ \"response\" ] # \u8fd4\u56de\u5339\u914d\u7684\u56de\u590d return None # \u65e0\u5339\u914d\u8fd4\u56de None","title":"3.9 \u68c0\u67e5\u65e5\u5e38\u95ee\u5019"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#310","text":"( /api/query ) \u63a5\u53e3 \u529f\u80fd \uff1a\u5904\u7406\u975e\u6d41\u5f0f\u67e5\u8be2\uff0c\u652f\u6301 MySQL \u7b54\u6848\u548c\u65e5\u5e38\u95ee\u5019\uff0c\u63d0\u793a\u4f7f\u7528 WebSocket \u83b7\u53d6 RAG \u6d41\u5f0f\u7b54\u6848\u3002 \u5173\u952e\u70b9 \uff1a\u8fd4\u56de JSON \u683c\u5f0f\u54cd\u5e94\uff0c\u8bb0\u5f55\u5904\u7406\u65f6\u95f4\u3002 # \u975e\u6d41\u5f0f\u67e5\u8be2\u63a5\u53e3 @app . post ( \"/api/query\" ) async def query ( request : QueryRequest ): start_time = time . time () # \u8bb0\u5f55\u5f00\u59cb\u65f6\u95f4 # \u4f7f\u7528\u8bf7\u6c42\u4e2d\u7684 session_id \u6216\u751f\u6210\u65b0 ID session_id = request . session_id or str ( uuid . uuid4 ()) # \u68c0\u67e5\u662f\u5426\u4e3a\u65e5\u5e38\u95ee\u5019 greeting_response = check_greeting ( request . query ) if greeting_response : # \u8fd4\u56de\u95ee\u5019\u56de\u590d return { \"answer\" : greeting_response , \"is_streaming\" : False , \"session_id\" : session_id , \"processing_time\" : time . time () - start_time } # \u6267\u884c BM25 \u641c\u7d22 answer , need_rag = qa_system . bm25_search . search ( request . query , threshold = 0.85 ) if need_rag : # \u9700\u8981 RAG\uff0c\u63d0\u793a\u4f7f\u7528 WebSocket return { \"answer\" : \"\u8bf7\u4f7f\u7528WebSocket\u63a5\u53e3\u83b7\u53d6\u6d41\u5f0f\u54cd\u5e94\" , \"is_streaming\" : True , \"session_id\" : session_id , \"processing_time\" : time . time () - start_time } # \u8fd4\u56de MySQL \u7b54\u6848 return { \"answer\" : answer , \"is_streaming\" : False , \"session_id\" : session_id , \"processing_time\" : time . time () - start_time }","title":"3.10 \u975e\u6d41\u5f0f\u67e5\u8be2\u63a5\u53e3"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#311-websocket","text":"( /api/stream ) \u63a5\u53e3 \u529f\u80fd \uff1a\u901a\u8fc7 WebSocket \u63d0\u4f9b\u6d41\u5f0f\u67e5\u8be2\uff0c\u652f\u6301 RAG \u7b54\u6848\u3001\u65e5\u5e38\u95ee\u5019\u548c\u9519\u8bef\u5904\u7406\u3002 \u5173\u952e\u70b9 \uff1a\u53d1\u9001 start \u3001 token \u3001 end \u6216 error \u7c7b\u578b\u7684 JSON \u6d88\u606f\uff0c\u5f02\u6b65\u5904\u7406\u786e\u4fdd\u5b9e\u65f6\u6027\u3002 # \u6d41\u5f0f\u67e5\u8be2 WebSocket \u63a5\u53e3 @app . websocket ( \"/api/stream\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () # \u63a5\u53d7 WebSocket \u8fde\u63a5 try : while True : # \u63a5\u6536\u5ba2\u6237\u7aef\u6d88\u606f data = await websocket . receive_text () request_data = json . loads ( data ) # \u89e3\u6790 JSON \u6570\u636e # \u83b7\u53d6\u67e5\u8be2\u53c2\u6570 query = request_data . get ( \"query\" ) source_filter = request_data . get ( \"source_filter\" ) session_id = request_data . get ( \"session_id\" , str ( uuid . uuid4 ())) start_time = time . time () # \u8bb0\u5f55\u5f00\u59cb\u65f6\u95f4 # \u53d1\u9001\u5f00\u59cb\u6807\u5fd7 if websocket . client_state == websocket . client_state . CONNECTED : await websocket . send_json ({ \"type\" : \"start\" , \"session_id\" : session_id }) # \u68c0\u67e5\u662f\u5426\u4e3a\u65e5\u5e38\u95ee\u5019 greeting_response = check_greeting ( query ) if greeting_response : if websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001\u95ee\u5019\u56de\u590d await websocket . send_json ({ \"type\" : \"token\" , \"token\" : greeting_response , \"session_id\" : session_id }) # \u53d1\u9001\u7ed3\u675f\u6807\u5fd7 await websocket . send_json ({ \"type\" : \"end\" , \"session_id\" : session_id , \"is_complete\" : True , \"processing_time\" : time . time () - start_time }) break # \u8c03\u7528\u95ee\u7b54\u7cfb\u7edf\uff0c\u6d41\u5f0f\u5904\u7406\u67e5\u8be2 collected_answer = \"\" for token , is_complete in qa_system . query ( query , source_filter = source_filter , session_id = session_id ): collected_answer += token # \u7d2f\u79ef\u7b54\u6848 if is_complete and not collected_answer : if websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001\u7ed3\u675f\u6807\u5fd7 await websocket . send_json ({ \"type\" : \"end\" , \"session_id\" : session_id , \"is_complete\" : True , \"processing_time\" : time . time () - start_time }) break if token and websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001 token \u6570\u636e await websocket . send_json ({ \"type\" : \"token\" , \"token\" : token , \"session_id\" : session_id }) if is_complete : if websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001\u7ed3\u675f\u6807\u5fd7 await websocket . send_json ({ \"type\" : \"end\" , \"session_id\" : session_id , \"is_complete\" : True , \"processing_time\" : time . time () - start_time }) break await asyncio . sleep ( 0.01 ) # \u63a7\u5236\u6d41\u5f0f\u8f93\u51fa\u7684\u901f\u5ea6 except WebSocketDisconnect as e : # \u8bb0\u5f55 WebSocket \u65ad\u5f00\u4fe1\u606f print ( f \"WebSocket disconnected: code= { e . code } , reason= { e . reason } \" ) except Exception as e : # \u8bb0\u5f55\u9519\u8bef\u4fe1\u606f print ( f \"WebSocket error: { str ( e ) } \" ) if websocket . client_state == websocket . client_state . CONNECTED : # \u53d1\u9001\u9519\u8bef\u6d88\u606f await websocket . send_json ({ \"type\" : \"error\" , \"error\" : str ( e ) }) finally : try : if websocket . client_state == websocket . client_state . CONNECTED : # \u5173\u95ed WebSocket \u8fde\u63a5 await websocket . close () except Exception as e : # \u8bb0\u5f55\u5173\u95ed\u8fde\u63a5\u65f6\u7684\u9519\u8bef print ( f \"Error closing WebSocket: { str ( e ) } \" )","title":"3.11 \u6d41\u5f0f\u67e5\u8be2 WebSocket \u63a5\u53e3"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#312","text":"( /health ) \u63a5\u53e3 \u529f\u80fd \uff1a\u63d0\u4f9b\u5065\u5eb7\u68c0\u67e5\u7aef\u70b9\uff0c\u786e\u8ba4\u670d\u52a1\u72b6\u6001\u3002 \u5173\u952e\u70b9 \uff1a\u7b80\u5355\u53ef\u9760\uff0c\u9002\u5408\u76d1\u63a7\u7cfb\u7edf\u53ef\u7528\u6027\u3002 # \u5065\u5eb7\u68c0\u67e5\u63a5\u53e3 @app . get ( \"/health\" ) async def health_check (): return { \"status\" : \"healthy\" } # \u8fd4\u56de\u5065\u5eb7\u72b6\u6001","title":"3.12 \u5065\u5eb7\u68c0\u67e5\u63a5\u53e3"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#313","text":"( /api/sources ) \u63a5\u53e3 \u529f\u80fd \uff1a\u8fd4\u56de\u7cfb\u7edf\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\u3002 \u5173\u952e\u70b9 \uff1a\u4fbf\u4e8e\u524d\u7aef\u52a8\u6001\u5c55\u793a\u8fc7\u6ee4\u9009\u9879\u3002 # \u83b7\u53d6\u6709\u6548\u5b66\u79d1\u7c7b\u522b\u63a5\u53e3 @app . get ( \"/api/sources\" ) async def get_sources (): return { \"sources\" : qa_system . config . VALID_SOURCES } # \u8fd4\u56de\u5b66\u79d1\u7c7b\u522b\u5217\u8868","title":"3.13 \u83b7\u53d6\u5b66\u79d1\u7c7b\u522b"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#314-fastapi","text":"\u4e3b\u7a0b\u5e8f\u5165\u53e3 \u529f\u80fd \uff1a\u4f7f\u7528 Uvicorn \u8fd0\u884c FastAPI \u5e94\u7528\u3002 \u5173\u952e\u70b9 \uff1a\u914d\u7f6e\u4e3b\u673a\u548c\u7aef\u53e3\uff0c\u652f\u6301\u751f\u4ea7\u73af\u5883\u90e8\u7f72\u3002 # \u4e3b\u7a0b\u5e8f\u5165\u53e3 if __name__ == \"__main__\" : import uvicorn # \u8fd0\u884c FastAPI \u5e94\u7528\uff0c\u76d1\u542c 0.0.0.0:8000 uvicorn . run ( \"app:app\" , host = \"0.0.0.0\" , port = 8000 , reload = False )","title":"3.14 \u542f\u52a8 FastAPI \u670d\u52a1"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/03-%E7%B3%BB%E7%BB%9FAPI%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%E5%8F%8Awebui%E5%BA%94%E7%94%A8.html#_2","text":"\u672c\u7ae0\u5c55\u793a\u4e86\u57fa\u4e8e FastAPI \u7684 app.py \uff0c\u901a\u8fc7 RESTful API \u548c WebSocket \u63a5\u53e3\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u95ee\u7b54\u7cfb\u7edf\u3002\u7cfb\u7edf\u96c6\u6210\u4e86 MySQL FAQ \u548c RAG \u7684\u67e5\u8be2\u529f\u80fd\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u3001\u5bf9\u8bdd\u5386\u53f2\u7ba1\u7406\u548c\u65e5\u5e38\u95ee\u5019\u5904\u7406\uff0c\u7ed3\u5408\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5b9e\u73b0\u4e86\u524d\u540e\u7aef\u4ea4\u4e92\uff0c\u914d\u5907\u5065\u58ee\u7684\u9519\u8bef\u5904\u7406\u548c\u65e5\u5fd7\u8bb0\u5f55\uff0c\u9002\u5408\u6559\u80b2\u573a\u666f\u4e0b\u7684\u5b9e\u65f6\u95ee\u7b54\u9700\u6c42\u3002","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/FastAPI%E5%92%8CFlask%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html","text":"FastAPI\u548cFlask\u7684\u533a\u522b\u548c\u8054\u7cfb \u00b6 \u60f3\u8c61\u4e00\u4e0b\u4f60\u5728\u7ecf\u8425\u4e00\u5bb6\u9910\u5385\uff1a Flask \u7684\u540c\u6b65\u8def\u7531 (Synchronous): \u5c31\u50cf\u53ea\u6709\u4e00\u4e2a\u53a8\u5e08\uff0c\u800c\u4e14\u4ed6\u4e00\u6b21\u53ea\u80fd\u505a\u4e00\u4e2a\u83dc\u3002 \u5de5\u4f5c\u65b9\u5f0f\uff1a \u7b2c\u4e00\u4e2a\u5ba2\u4eba\u70b9\u5355\uff08\u4e00\u4e2a\u8bf7\u6c42\u6765\u4e86\uff09\u3002 \u53a8\u5e08\u5f00\u59cb\u505a\u8fd9\u9053\u83dc\uff08\u5904\u7406\u8fd9\u4e2a\u8bf7\u6c42\uff09\u3002 \u5173\u952e\u70b9\uff1a \u5728\u8fd9\u9053\u83dc\u5b8c\u5168\u505a\u597d\u3001\u7aef\u7ed9\u5ba2\u4eba\u4e4b\u524d\uff0c\u5373\u4f7f\u7b2c\u4e8c\u4e2a\u5ba2\u4eba\u5df2\u7ecf\u70b9\u597d\u5355\uff0c\u53a8\u5e08\u4e5f\u4e0d\u4f1a\u5f00\u59cb\u505a\u7b2c\u4e8c\u9053\u83dc\u3002\u4ed6\u5fc5\u987b\u7b49\u7b2c\u4e00\u9053\u83dc\u5b8c\u6210\u3002\u5982\u679c\u7b2c\u4e00\u9053\u83dc\u662f\u201c\u4f5b\u8df3\u5899\u201d\uff08\u4e00\u4e2a\u5f88\u6162\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u7b49\u5f85\u6570\u636e\u5e93\u3001\u7b49\u5f85\u5916\u90e8 API\u3001\u6216\u8005\u7b49\u5f85\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\uff09\uff0c\u90a3\u4e48\u540e\u9762\u6240\u6709\u7684\u5ba2\u4eba\u90fd\u8981\u6392\u961f\u7b49\u7740\u3002 \u4ee3\u7801\u793a\u4f8b (\u7b80\u5316\u793a\u610f): # Flask (\u540c\u6b65) from flask import Flask import time app = Flask ( __name__ ) @app . route ( '/cook_sync' ) def cook_sync (): print ( \"\u5f00\u59cb\u505a\u83dc A...\" ) time . sleep ( 5 ) # \u6a21\u62df\u505a\u4e00\u4e2a\u5f88\u6162\u7684\u83dc (\u6bd4\u5982\u7b49\u5927\u6a21\u578b\u54cd\u5e94) print ( \"\u83dc A \u505a\u597d\u4e86!\" ) return \"\u83dc A \u5b8c\u6210\" # \u5f53\u4e00\u4e2a\u8bf7\u6c42\u8bbf\u95ee /cook_sync \u65f6\uff0c\u670d\u52a1\u5668\u4f1a\u5361\u4f4f 5 \u79d2\uff0c # \u8fd9\u671f\u95f4\u65e0\u6cd5\u5904\u7406\u5176\u4ed6\u8bf7\u6c42\uff08\u9664\u975e\u4f60\u5f00\u4e86\u591a\u4e2a\u670d\u52a1\u5458/\u8fdb\u7a0b\uff09\u3002 \u7279\u70b9\uff1a \u7b80\u5355\u76f4\u63a5\uff0c\u7b26\u5408\u6211\u4eec\u901a\u5e38\u7684\u7f16\u7a0b\u601d\u8def\uff08\u4e00\u6b65\u63a5\u4e00\u6b65\uff09\u3002\u4f46\u662f\uff0c\u5982\u679c\u67d0\u4e2a\u6b65\u9aa4\u5f88\u6162\uff08\u7b49\u5f85 I/O \u64cd\u4f5c\uff09\uff0c\u6574\u4e2a\u6d41\u7a0b\u5c31\u4f1a\u88ab\u963b\u585e\uff0c\u6548\u7387\u4e0d\u9ad8\uff0c\u65e0\u6cd5\u540c\u65f6\u5904\u7406\u5f88\u591a\u201c\u7b49\u5f85\u4e2d\u201d\u7684\u4efb\u52a1\u3002 FastAPI \u7684\u5f02\u6b65\u8def\u7531 (Asynchronous): \u5c31\u50cf\u4e00\u4e2a\u5f88\u5389\u5bb3\u7684\u53a8\u5e08\uff0c\u4ed6\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u4efb\u52a1\u3002 \u5de5\u4f5c\u65b9\u5f0f\uff1a \u7b2c\u4e00\u4e2a\u5ba2\u4eba\u70b9\u5355\uff08\u8bf7\u6c42 1\uff09\u3002\u53a8\u5e08\u5f00\u59cb\u505a\u83dc A\uff0c\u6bd4\u5982\u5148\u628a\u7c73\u996d\u653e\u8fdb\u7535\u996d\u7172\uff08\u5f00\u59cb\u4e00\u4e2a\u9700\u8981\u7b49\u5f85\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf7\u6c42\u5927\u6a21\u578b\uff09\u3002 \u5173\u952e\u70b9\uff1a \u5728\u7b49\u5f85\u7c73\u996d\u716e\u719f\uff08\u7b49\u5f85\u5927\u6a21\u578b\u54cd\u5e94\uff09\u7684\u65f6\u5019\uff0c\u53a8\u5e08**\u4e0d\u4f1a\u95f2\u7740**\u3002\u4ed6\u4f1a\u7acb\u523b\u53bb\u770b\u6709\u6ca1\u6709\u5176\u4ed6\u5ba2\u4eba\u7684\u8ba2\u5355\uff08\u5904\u7406\u8bf7\u6c42 2\uff09\u3002 \u7b2c\u4e8c\u4e2a\u5ba2\u4eba\u70b9\u5355\uff08\u8bf7\u6c42 2\uff09\u3002\u53a8\u5e08\u5f00\u59cb\u5904\u7406\u83dc B\uff0c\u6bd4\u5982\u5f00\u59cb\u6d17\u83dc\uff08\u6267\u884c\u4e00\u4e9b\u5feb\u4ee3\u7801\uff09\u3002 \u5982\u679c\u83dc B \u4e5f\u9700\u8981\u7b49\u5f85\uff08\u6bd4\u5982\u7b49\u6c34\u70e7\u5f00\uff09\uff0c\u53a8\u5e08\u53c8\u4f1a\u53bb\u770b\u6709\u6ca1\u6709\u5176\u4ed6\u4e8b\u505a\uff08\u5904\u7406\u8bf7\u6c42 3 \u6216\u67e5\u770b\u7c73\u996d\u662f\u5426\u719f\u4e86\uff09\u3002 \u4e00\u65e6\u7c73\u996d\u716e\u719f\u4e86\uff08\u5927\u6a21\u578b\u7684\u54cd\u5e94\u56de\u6765\u4e86\uff09\uff0c\u53a8\u5e08\u5c31\u4f1a\u56de\u6765\u7ee7\u7eed\u5b8c\u6210\u83dc A \u7684\u540e\u7eed\u6b65\u9aa4\u3002 \u4ee3\u7801\u793a\u4f8b (\u7b80\u5316\u793a\u610f): # FastAPI (\u5f02\u6b65) from fastapi import FastAPI import asyncio # Python \u7684\u5f02\u6b65\u5e93 app = FastAPI () @app . get ( '/cook_async' ) async def cook_async (): # \u6ce8\u610f\u8fd9\u91cc\u7684 async print ( \"\u5f00\u59cb\u505a\u83dc A (\u5f02\u6b65)...\" ) await asyncio . sleep ( 5 ) # \u6a21\u62df\u505a\u4e00\u4e2a\u5f88\u6162\u7684\u83dc\uff0c\u4f46\u8fd9\u91cc\u7528 await # \u8868\u793a\u201c\u5728\u8fd9\u91cc\u7b49\u5f85\uff0c\u4f46\u5141\u8bb8\u670d\u52a1\u5668\u53bb\u505a\u522b\u7684\u4e8b\u201d print ( \"\u83dc A (\u5f02\u6b65) \u505a\u597d\u4e86!\" ) return \"\u83dc A (\u5f02\u6b65) \u5b8c\u6210\" # \u5f53\u4e00\u4e2a\u8bf7\u6c42\u8bbf\u95ee /cook_async \u65f6\uff0c\u670d\u52a1\u5668\u5728 `await asyncio.sleep(5)` \u8fd9\u91cc # \u4f1a\u201c\u6682\u505c\u201d\u8fd9\u4e2a\u4efb\u52a1\uff0c\u8f6c\u800c\u53bb\u5904\u7406\u5176\u4ed6\u8fdb\u6765\u7684\u8bf7\u6c42\u30025\u79d2\u540e\uff0c\u5f53\u7b49\u5f85\u7ed3\u675f\uff0c # \u670d\u52a1\u5668\u4f1a\u56de\u6765\u7ee7\u7eed\u6267\u884c\u8fd9\u4e2a\u4efb\u52a1\u3002\u8fd9\u4f7f\u5f97\u670d\u52a1\u5668\u80fd\u540c\u65f6\u5904\u7406\u5f88\u591a\u201c\u7b49\u5f85\u4e2d\u201d\u7684\u8bf7\u6c42\u3002 \u7279\u70b9\uff1a \u9700\u8981\u4f7f\u7528 async \u548c await \u5173\u952e\u5b57\u3002\u7279\u522b\u64c5\u957f\u5904\u7406\u90a3\u4e9b\u5305\u542b\u7b49\u5f85\u65f6\u95f4\uff08I/O \u5bc6\u96c6\u578b\uff0c\u5982\u7f51\u7edc\u8bf7\u6c42\u3001\u8bfb\u5199\u6587\u4ef6\u3001\u6570\u636e\u5e93\u67e5\u8be2\u3001\u7b49\u5f85\u5927\u6a21\u578b\u54cd\u5e94\uff09\u7684\u4efb\u52a1\u3002\u540c\u4e00\u4e2a\u53a8\u5e08\uff08\u670d\u52a1\u5668\u8fdb\u7a0b\uff09\u53ef\u4ee5\u540c\u65f6\u201c\u7167\u770b\u201d\u5f88\u591a\u9053\u83dc\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u6548\u7387\uff08\u5e76\u53d1\u80fd\u529b\uff09\u3002 \u8054\u7cfb\u548c\u533a\u522b\u603b\u7ed3\uff1a \u7279\u6027 Flask (\u540c\u6b65) FastAPI (\u5f02\u6b65) \u6838\u5fc3\u673a\u5236 \u540c\u6b65\u963b\u585e (\u4e00\u6b65\u63a5\u4e00\u6b65) \u5f02\u6b65\u975e\u963b\u585e (\u5229\u7528\u7b49\u5f85\u65f6\u95f4\u5904\u7406\u5176\u4ed6\u4e8b) \u6bd4\u55bb \u5355\u4efb\u52a1\u53a8\u5e08 \u591a\u4efb\u52a1\u53a8\u5e08 \u4ee3\u7801\u98ce\u683c \u6807\u51c6 Python \u51fd\u6570 ( def ) \u4f7f\u7528 async def \u548c await \u64c5\u957f\u573a\u666f CPU \u5bc6\u96c6\u578b\u4efb\u52a1 (\u9700\u8981\u6301\u7eed\u8ba1\u7b97) I/O \u5bc6\u96c6\u578b\u4efb\u52a1 (\u5927\u91cf\u7b49\u5f85\u65f6\u95f4\uff0c\u5982\u7f51\u7edc\u3001\u78c1\u76d8\u3001LLM) \u5e76\u53d1\u80fd\u529b \u8f83\u4f4e (\u4f9d\u8d56\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b) \u975e\u5e38\u9ad8 (\u5355\u4e2a\u8fdb\u7a0b\u80fd\u5904\u7406\u5927\u91cf\u5e76\u53d1\u8fde\u63a5) \u6027\u80fd \u5bf9\u4e8e I/O \u5bc6\u96c6\u573a\u666f\uff0c\u6027\u80fd\u8f83\u4f4e \u5bf9\u4e8e I/O \u5bc6\u96c6\u573a\u666f\uff0c\u6027\u80fd\u975e\u5e38\u9ad8 \u5b66\u4e60\u66f2\u7ebf \u76f8\u5bf9\u5e73\u7f13 (\u540c\u6b65\u903b\u8f91\u6613\u7406\u89e3) \u7a0d\u9661\u5ced (\u9700\u8981\u7406\u89e3 async/await \u548c\u4e8b\u4ef6\u5faa\u73af) \u6570\u636e\u6821\u9a8c \u9700\u989d\u5916\u5e93 (\u5982 Flask-WTF, Marshmallow) \u5185\u7f6e Pydantic\uff0c\u81ea\u52a8\u6570\u636e\u6821\u9a8c\u548c\u6587\u6863\u751f\u6210 \u8054\u7cfb\uff1a \u5b83\u4eec\u90fd\u662f Python Web \u6846\u67b6\uff0c\u7528\u6765\u521b\u5efa API \u6216 Web \u5e94\u7528\u3002 \u5b83\u4eec\u90fd\u80fd\u63a5\u6536 HTTP \u8bf7\u6c42\uff0c\u6839\u636e URL \u8def\u7531\u5230\u76f8\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u7136\u540e\u8fd4\u56de HTTP \u54cd\u5e94\u3002 Flask \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u65b9\u5f0f\uff08\u6bd4\u5982\u4f7f\u7528 gevent \u6216 asyncio \u6269\u5c55\uff09\u5b9e\u73b0\u7c7b\u4f3c\u5f02\u6b65\u7684\u529f\u80fd\uff0c\u4f46\u4e0d\u662f\u5176\u5929\u751f\u8bbe\u8ba1\u3002FastAPI \u4e5f\u53ef\u4ee5\u8fd0\u884c\u540c\u6b65\u4ee3\u7801\uff08\u5b83\u4f1a\u81ea\u52a8\u5728\u7ebf\u7a0b\u6c60\u91cc\u8fd0\u884c\uff0c\u907f\u514d\u963b\u585e\u4e3b\u5faa\u73af\uff09\u3002 \u5728\u5229\u7528\u5927\u6a21\u578b\uff08LLM\uff09\u90e8\u7f72\u65f6\u600e\u4e48\u9009\u62e9\uff1f \u5f3a\u70c8\u63a8\u8350\u4f7f\u7528 FastAPI (\u5f02\u6b65)\u3002 \u539f\u56e0\uff1a LLM \u8c03\u7528\u662f\u5178\u578b\u7684 I/O \u5bc6\u96c6\u578b\u64cd\u4f5c\uff1a \u5f53\u4f60\u7684 API \u8c03\u7528\u4e00\u4e2a\u5927\u6a21\u578b\uff08\u65e0\u8bba\u662f\u672c\u5730\u90e8\u7f72\u7684\u8fd8\u662f\u4e91\u4e0a\u7684 API\uff09\uff0c\u4f60\u7684\u7a0b\u5e8f\u9700\u8981\u7b49\u5f85\u6a21\u578b\u8fdb\u884c\u8ba1\u7b97\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u8fd9\u4e2a\u7b49\u5f85\u65f6\u95f4\u53ef\u80fd\u4ece\u51e0\u767e\u6beb\u79d2\u5230\u51e0\u79d2\u751a\u81f3\u66f4\u957f\u3002 \u5f02\u6b65\u80fd\u6781\u5927\u63d0\u9ad8\u5e76\u53d1\u5904\u7406\u80fd\u529b\uff1a \u4f7f\u7528 Flask (\u540c\u6b65) \uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u5728\u7b49\u5f85 LLM \u54cd\u5e94\u65f6\uff0c\u5904\u7406\u8fd9\u4e2a\u8bf7\u6c42\u7684\u90a3\u4e2a\u670d\u52a1\u5668\u8fdb\u7a0b/\u7ebf\u7a0b\u5c31\u5b8c\u5168\u5361\u4f4f\u4e86\uff0c\u4e0d\u80fd\u4e3a\u5176\u4ed6\u7528\u6237\u670d\u52a1\u3002\u5982\u679c\u4f60\u60f3\u540c\u65f6\u670d\u52a1 100 \u4e2a\u7528\u6237\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u542f\u52a8 100 \u4e2a\uff08\u751a\u81f3\u66f4\u591a\uff09Flask \u5de5\u4f5c\u8fdb\u7a0b\uff0c\u8fd9\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58\u548c CPU \u8d44\u6e90\u3002 \u4f7f\u7528 FastAPI (\u5f02\u6b65) \uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42 await LLM \u7684\u54cd\u5e94\u65f6\uff0c\u670d\u52a1\u5668\u4f1a\u628a\u8fd9\u4e2a\u4efb\u52a1\u6682\u65f6\u6302\u8d77\uff0c\u7136\u540e\u7acb\u5373\u53bb\u5904\u7406\u5176\u4ed6\u7528\u6237\u7684\u8bf7\u6c42\u3002\u5f53 LLM \u7684\u54cd\u5e94\u56de\u6765\u540e\uff0c\u670d\u52a1\u5668\u518d\u7ee7\u7eed\u5904\u7406\u4e4b\u524d\u6302\u8d77\u7684\u4efb\u52a1\u3002\u8fd9\u6837\uff0c\u4e00\u4e2a FastAPI \u8fdb\u7a0b\u5c31\u80fd\u540c\u65f6\u5904\u7406\u6210\u767e\u4e0a\u5343\u4e2a\u201c\u7b49\u5f85 LLM \u54cd\u5e94\u201d\u7684\u5e76\u53d1\u8bf7\u6c42\uff0c\u8d44\u6e90\u5229\u7528\u7387\u6781\u9ad8\u3002 FastAPI \u7684\u5185\u7f6e\u7279\u6027\u5f88\u65b9\u4fbf\uff1a FastAPI \u57fa\u4e8e Pydantic \u8fdb\u884c\u81ea\u52a8\u7684\u6570\u636e\u6821\u9a8c\u548c\u6587\u6863\u751f\u6210\uff08Swagger UI / ReDoc\uff09\u3002\u8fd9\u5bf9\u4e8e\u5b9a\u4e49\u6e05\u6670\u7684 LLM \u8f93\u5165\uff08\u5982 prompt\u3001\u53c2\u6570\uff09\u548c\u8f93\u51fa\u7ed3\u6784\u975e\u5e38\u6709\u5e2e\u52a9\uff0c\u80fd\u51cf\u5c11\u5f88\u591a\u6a21\u677f\u4ee3\u7801\uff0c\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u548c\u63a5\u53e3\u8d28\u91cf\u3002 \u7b80\u5355\u6765\u8bf4\uff1a \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684 LLM \u5e94\u7528\u80fd\u591f\u540c\u65f6\u670d\u52a1\u5f88\u591a\u7528\u6237\uff0c\u5e76\u4e14\u9ad8\u6548\u5730\u5229\u7528\u670d\u52a1\u5668\u8d44\u6e90\uff0c FastAPI \u7684\u5f02\u6b65\u7279\u6027\u662f\u5de8\u5927\u7684\u4f18\u52bf \u3002 \u5982\u679c\u4f60\u53ea\u662f\u505a\u4e00\u4e2a\u5185\u90e8\u5c0f\u5de5\u5177\uff0c\u7528\u6237\u91cf\u6781\u5c11\uff0c\u6216\u8005\u4f60\u7684\u56e2\u961f\u5b8c\u5168\u4e0d\u719f\u6089\u5f02\u6b65\u7f16\u7a0b\u4e14\u4e0d\u613f\u610f\u5b66\u4e60\uff0c\u7528 Flask \u4e5f\u80fd\u5b9e\u73b0\u529f\u80fd\uff0c\u4f46\u6027\u80fd\u548c\u5e76\u53d1\u80fd\u529b\u4f1a\u5dee\u5f88\u591a\uff0c\u9700\u8981\u66f4\u591a\u670d\u52a1\u5668\u8d44\u6e90\u6765\u5f25\u8865\u3002 \u7ed3\u8bba\uff1a \u5bf9\u4e8e\u9700\u8981\u8c03\u7528\u5927\u6a21\u578b\u7684\u573a\u666f\uff0cFastAPI \u7684\u5f02\u6b65\u6a21\u578b\u51e0\u4e4e\u662f\u5fc5\u7136\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u80fd\u66f4\u597d\u5730\u5e94\u5bf9 LLM \u8c03\u7528\u5e26\u6765\u7684\u7b49\u5f85\u65f6\u95f4\uff0c\u5b9e\u73b0\u9ad8\u5e76\u53d1\u3001\u9ad8\u6027\u80fd\u7684\u670d\u52a1\u3002","title":"6.4 FastAPI\u548cFlask\u7684\u533a\u522b\u548c\u8054\u7cfb(\u6269\u5c55\u8d44\u6599)"},{"location":"%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E8%9E%8D%E5%90%88Mysql%E7%9A%84RAG%E7%B3%BB%E7%BB%9F/FastAPI%E5%92%8CFlask%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#fastapiflask","text":"\u60f3\u8c61\u4e00\u4e0b\u4f60\u5728\u7ecf\u8425\u4e00\u5bb6\u9910\u5385\uff1a Flask \u7684\u540c\u6b65\u8def\u7531 (Synchronous): \u5c31\u50cf\u53ea\u6709\u4e00\u4e2a\u53a8\u5e08\uff0c\u800c\u4e14\u4ed6\u4e00\u6b21\u53ea\u80fd\u505a\u4e00\u4e2a\u83dc\u3002 \u5de5\u4f5c\u65b9\u5f0f\uff1a \u7b2c\u4e00\u4e2a\u5ba2\u4eba\u70b9\u5355\uff08\u4e00\u4e2a\u8bf7\u6c42\u6765\u4e86\uff09\u3002 \u53a8\u5e08\u5f00\u59cb\u505a\u8fd9\u9053\u83dc\uff08\u5904\u7406\u8fd9\u4e2a\u8bf7\u6c42\uff09\u3002 \u5173\u952e\u70b9\uff1a \u5728\u8fd9\u9053\u83dc\u5b8c\u5168\u505a\u597d\u3001\u7aef\u7ed9\u5ba2\u4eba\u4e4b\u524d\uff0c\u5373\u4f7f\u7b2c\u4e8c\u4e2a\u5ba2\u4eba\u5df2\u7ecf\u70b9\u597d\u5355\uff0c\u53a8\u5e08\u4e5f\u4e0d\u4f1a\u5f00\u59cb\u505a\u7b2c\u4e8c\u9053\u83dc\u3002\u4ed6\u5fc5\u987b\u7b49\u7b2c\u4e00\u9053\u83dc\u5b8c\u6210\u3002\u5982\u679c\u7b2c\u4e00\u9053\u83dc\u662f\u201c\u4f5b\u8df3\u5899\u201d\uff08\u4e00\u4e2a\u5f88\u6162\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u7b49\u5f85\u6570\u636e\u5e93\u3001\u7b49\u5f85\u5916\u90e8 API\u3001\u6216\u8005\u7b49\u5f85\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\uff09\uff0c\u90a3\u4e48\u540e\u9762\u6240\u6709\u7684\u5ba2\u4eba\u90fd\u8981\u6392\u961f\u7b49\u7740\u3002 \u4ee3\u7801\u793a\u4f8b (\u7b80\u5316\u793a\u610f): # Flask (\u540c\u6b65) from flask import Flask import time app = Flask ( __name__ ) @app . route ( '/cook_sync' ) def cook_sync (): print ( \"\u5f00\u59cb\u505a\u83dc A...\" ) time . sleep ( 5 ) # \u6a21\u62df\u505a\u4e00\u4e2a\u5f88\u6162\u7684\u83dc (\u6bd4\u5982\u7b49\u5927\u6a21\u578b\u54cd\u5e94) print ( \"\u83dc A \u505a\u597d\u4e86!\" ) return \"\u83dc A \u5b8c\u6210\" # \u5f53\u4e00\u4e2a\u8bf7\u6c42\u8bbf\u95ee /cook_sync \u65f6\uff0c\u670d\u52a1\u5668\u4f1a\u5361\u4f4f 5 \u79d2\uff0c # \u8fd9\u671f\u95f4\u65e0\u6cd5\u5904\u7406\u5176\u4ed6\u8bf7\u6c42\uff08\u9664\u975e\u4f60\u5f00\u4e86\u591a\u4e2a\u670d\u52a1\u5458/\u8fdb\u7a0b\uff09\u3002 \u7279\u70b9\uff1a \u7b80\u5355\u76f4\u63a5\uff0c\u7b26\u5408\u6211\u4eec\u901a\u5e38\u7684\u7f16\u7a0b\u601d\u8def\uff08\u4e00\u6b65\u63a5\u4e00\u6b65\uff09\u3002\u4f46\u662f\uff0c\u5982\u679c\u67d0\u4e2a\u6b65\u9aa4\u5f88\u6162\uff08\u7b49\u5f85 I/O \u64cd\u4f5c\uff09\uff0c\u6574\u4e2a\u6d41\u7a0b\u5c31\u4f1a\u88ab\u963b\u585e\uff0c\u6548\u7387\u4e0d\u9ad8\uff0c\u65e0\u6cd5\u540c\u65f6\u5904\u7406\u5f88\u591a\u201c\u7b49\u5f85\u4e2d\u201d\u7684\u4efb\u52a1\u3002 FastAPI \u7684\u5f02\u6b65\u8def\u7531 (Asynchronous): \u5c31\u50cf\u4e00\u4e2a\u5f88\u5389\u5bb3\u7684\u53a8\u5e08\uff0c\u4ed6\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a\u4efb\u52a1\u3002 \u5de5\u4f5c\u65b9\u5f0f\uff1a \u7b2c\u4e00\u4e2a\u5ba2\u4eba\u70b9\u5355\uff08\u8bf7\u6c42 1\uff09\u3002\u53a8\u5e08\u5f00\u59cb\u505a\u83dc A\uff0c\u6bd4\u5982\u5148\u628a\u7c73\u996d\u653e\u8fdb\u7535\u996d\u7172\uff08\u5f00\u59cb\u4e00\u4e2a\u9700\u8981\u7b49\u5f85\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf7\u6c42\u5927\u6a21\u578b\uff09\u3002 \u5173\u952e\u70b9\uff1a \u5728\u7b49\u5f85\u7c73\u996d\u716e\u719f\uff08\u7b49\u5f85\u5927\u6a21\u578b\u54cd\u5e94\uff09\u7684\u65f6\u5019\uff0c\u53a8\u5e08**\u4e0d\u4f1a\u95f2\u7740**\u3002\u4ed6\u4f1a\u7acb\u523b\u53bb\u770b\u6709\u6ca1\u6709\u5176\u4ed6\u5ba2\u4eba\u7684\u8ba2\u5355\uff08\u5904\u7406\u8bf7\u6c42 2\uff09\u3002 \u7b2c\u4e8c\u4e2a\u5ba2\u4eba\u70b9\u5355\uff08\u8bf7\u6c42 2\uff09\u3002\u53a8\u5e08\u5f00\u59cb\u5904\u7406\u83dc B\uff0c\u6bd4\u5982\u5f00\u59cb\u6d17\u83dc\uff08\u6267\u884c\u4e00\u4e9b\u5feb\u4ee3\u7801\uff09\u3002 \u5982\u679c\u83dc B \u4e5f\u9700\u8981\u7b49\u5f85\uff08\u6bd4\u5982\u7b49\u6c34\u70e7\u5f00\uff09\uff0c\u53a8\u5e08\u53c8\u4f1a\u53bb\u770b\u6709\u6ca1\u6709\u5176\u4ed6\u4e8b\u505a\uff08\u5904\u7406\u8bf7\u6c42 3 \u6216\u67e5\u770b\u7c73\u996d\u662f\u5426\u719f\u4e86\uff09\u3002 \u4e00\u65e6\u7c73\u996d\u716e\u719f\u4e86\uff08\u5927\u6a21\u578b\u7684\u54cd\u5e94\u56de\u6765\u4e86\uff09\uff0c\u53a8\u5e08\u5c31\u4f1a\u56de\u6765\u7ee7\u7eed\u5b8c\u6210\u83dc A \u7684\u540e\u7eed\u6b65\u9aa4\u3002 \u4ee3\u7801\u793a\u4f8b (\u7b80\u5316\u793a\u610f): # FastAPI (\u5f02\u6b65) from fastapi import FastAPI import asyncio # Python \u7684\u5f02\u6b65\u5e93 app = FastAPI () @app . get ( '/cook_async' ) async def cook_async (): # \u6ce8\u610f\u8fd9\u91cc\u7684 async print ( \"\u5f00\u59cb\u505a\u83dc A (\u5f02\u6b65)...\" ) await asyncio . sleep ( 5 ) # \u6a21\u62df\u505a\u4e00\u4e2a\u5f88\u6162\u7684\u83dc\uff0c\u4f46\u8fd9\u91cc\u7528 await # \u8868\u793a\u201c\u5728\u8fd9\u91cc\u7b49\u5f85\uff0c\u4f46\u5141\u8bb8\u670d\u52a1\u5668\u53bb\u505a\u522b\u7684\u4e8b\u201d print ( \"\u83dc A (\u5f02\u6b65) \u505a\u597d\u4e86!\" ) return \"\u83dc A (\u5f02\u6b65) \u5b8c\u6210\" # \u5f53\u4e00\u4e2a\u8bf7\u6c42\u8bbf\u95ee /cook_async \u65f6\uff0c\u670d\u52a1\u5668\u5728 `await asyncio.sleep(5)` \u8fd9\u91cc # \u4f1a\u201c\u6682\u505c\u201d\u8fd9\u4e2a\u4efb\u52a1\uff0c\u8f6c\u800c\u53bb\u5904\u7406\u5176\u4ed6\u8fdb\u6765\u7684\u8bf7\u6c42\u30025\u79d2\u540e\uff0c\u5f53\u7b49\u5f85\u7ed3\u675f\uff0c # \u670d\u52a1\u5668\u4f1a\u56de\u6765\u7ee7\u7eed\u6267\u884c\u8fd9\u4e2a\u4efb\u52a1\u3002\u8fd9\u4f7f\u5f97\u670d\u52a1\u5668\u80fd\u540c\u65f6\u5904\u7406\u5f88\u591a\u201c\u7b49\u5f85\u4e2d\u201d\u7684\u8bf7\u6c42\u3002 \u7279\u70b9\uff1a \u9700\u8981\u4f7f\u7528 async \u548c await \u5173\u952e\u5b57\u3002\u7279\u522b\u64c5\u957f\u5904\u7406\u90a3\u4e9b\u5305\u542b\u7b49\u5f85\u65f6\u95f4\uff08I/O \u5bc6\u96c6\u578b\uff0c\u5982\u7f51\u7edc\u8bf7\u6c42\u3001\u8bfb\u5199\u6587\u4ef6\u3001\u6570\u636e\u5e93\u67e5\u8be2\u3001\u7b49\u5f85\u5927\u6a21\u578b\u54cd\u5e94\uff09\u7684\u4efb\u52a1\u3002\u540c\u4e00\u4e2a\u53a8\u5e08\uff08\u670d\u52a1\u5668\u8fdb\u7a0b\uff09\u53ef\u4ee5\u540c\u65f6\u201c\u7167\u770b\u201d\u5f88\u591a\u9053\u83dc\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u6548\u7387\uff08\u5e76\u53d1\u80fd\u529b\uff09\u3002 \u8054\u7cfb\u548c\u533a\u522b\u603b\u7ed3\uff1a \u7279\u6027 Flask (\u540c\u6b65) FastAPI (\u5f02\u6b65) \u6838\u5fc3\u673a\u5236 \u540c\u6b65\u963b\u585e (\u4e00\u6b65\u63a5\u4e00\u6b65) \u5f02\u6b65\u975e\u963b\u585e (\u5229\u7528\u7b49\u5f85\u65f6\u95f4\u5904\u7406\u5176\u4ed6\u4e8b) \u6bd4\u55bb \u5355\u4efb\u52a1\u53a8\u5e08 \u591a\u4efb\u52a1\u53a8\u5e08 \u4ee3\u7801\u98ce\u683c \u6807\u51c6 Python \u51fd\u6570 ( def ) \u4f7f\u7528 async def \u548c await \u64c5\u957f\u573a\u666f CPU \u5bc6\u96c6\u578b\u4efb\u52a1 (\u9700\u8981\u6301\u7eed\u8ba1\u7b97) I/O \u5bc6\u96c6\u578b\u4efb\u52a1 (\u5927\u91cf\u7b49\u5f85\u65f6\u95f4\uff0c\u5982\u7f51\u7edc\u3001\u78c1\u76d8\u3001LLM) \u5e76\u53d1\u80fd\u529b \u8f83\u4f4e (\u4f9d\u8d56\u591a\u8fdb\u7a0b/\u591a\u7ebf\u7a0b) \u975e\u5e38\u9ad8 (\u5355\u4e2a\u8fdb\u7a0b\u80fd\u5904\u7406\u5927\u91cf\u5e76\u53d1\u8fde\u63a5) \u6027\u80fd \u5bf9\u4e8e I/O \u5bc6\u96c6\u573a\u666f\uff0c\u6027\u80fd\u8f83\u4f4e \u5bf9\u4e8e I/O \u5bc6\u96c6\u573a\u666f\uff0c\u6027\u80fd\u975e\u5e38\u9ad8 \u5b66\u4e60\u66f2\u7ebf \u76f8\u5bf9\u5e73\u7f13 (\u540c\u6b65\u903b\u8f91\u6613\u7406\u89e3) \u7a0d\u9661\u5ced (\u9700\u8981\u7406\u89e3 async/await \u548c\u4e8b\u4ef6\u5faa\u73af) \u6570\u636e\u6821\u9a8c \u9700\u989d\u5916\u5e93 (\u5982 Flask-WTF, Marshmallow) \u5185\u7f6e Pydantic\uff0c\u81ea\u52a8\u6570\u636e\u6821\u9a8c\u548c\u6587\u6863\u751f\u6210 \u8054\u7cfb\uff1a \u5b83\u4eec\u90fd\u662f Python Web \u6846\u67b6\uff0c\u7528\u6765\u521b\u5efa API \u6216 Web \u5e94\u7528\u3002 \u5b83\u4eec\u90fd\u80fd\u63a5\u6536 HTTP \u8bf7\u6c42\uff0c\u6839\u636e URL \u8def\u7531\u5230\u76f8\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u7136\u540e\u8fd4\u56de HTTP \u54cd\u5e94\u3002 Flask \u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u65b9\u5f0f\uff08\u6bd4\u5982\u4f7f\u7528 gevent \u6216 asyncio \u6269\u5c55\uff09\u5b9e\u73b0\u7c7b\u4f3c\u5f02\u6b65\u7684\u529f\u80fd\uff0c\u4f46\u4e0d\u662f\u5176\u5929\u751f\u8bbe\u8ba1\u3002FastAPI \u4e5f\u53ef\u4ee5\u8fd0\u884c\u540c\u6b65\u4ee3\u7801\uff08\u5b83\u4f1a\u81ea\u52a8\u5728\u7ebf\u7a0b\u6c60\u91cc\u8fd0\u884c\uff0c\u907f\u514d\u963b\u585e\u4e3b\u5faa\u73af\uff09\u3002 \u5728\u5229\u7528\u5927\u6a21\u578b\uff08LLM\uff09\u90e8\u7f72\u65f6\u600e\u4e48\u9009\u62e9\uff1f \u5f3a\u70c8\u63a8\u8350\u4f7f\u7528 FastAPI (\u5f02\u6b65)\u3002 \u539f\u56e0\uff1a LLM \u8c03\u7528\u662f\u5178\u578b\u7684 I/O \u5bc6\u96c6\u578b\u64cd\u4f5c\uff1a \u5f53\u4f60\u7684 API \u8c03\u7528\u4e00\u4e2a\u5927\u6a21\u578b\uff08\u65e0\u8bba\u662f\u672c\u5730\u90e8\u7f72\u7684\u8fd8\u662f\u4e91\u4e0a\u7684 API\uff09\uff0c\u4f60\u7684\u7a0b\u5e8f\u9700\u8981\u7b49\u5f85\u6a21\u578b\u8fdb\u884c\u8ba1\u7b97\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u8fd9\u4e2a\u7b49\u5f85\u65f6\u95f4\u53ef\u80fd\u4ece\u51e0\u767e\u6beb\u79d2\u5230\u51e0\u79d2\u751a\u81f3\u66f4\u957f\u3002 \u5f02\u6b65\u80fd\u6781\u5927\u63d0\u9ad8\u5e76\u53d1\u5904\u7406\u80fd\u529b\uff1a \u4f7f\u7528 Flask (\u540c\u6b65) \uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42\u5728\u7b49\u5f85 LLM \u54cd\u5e94\u65f6\uff0c\u5904\u7406\u8fd9\u4e2a\u8bf7\u6c42\u7684\u90a3\u4e2a\u670d\u52a1\u5668\u8fdb\u7a0b/\u7ebf\u7a0b\u5c31\u5b8c\u5168\u5361\u4f4f\u4e86\uff0c\u4e0d\u80fd\u4e3a\u5176\u4ed6\u7528\u6237\u670d\u52a1\u3002\u5982\u679c\u4f60\u60f3\u540c\u65f6\u670d\u52a1 100 \u4e2a\u7528\u6237\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u542f\u52a8 100 \u4e2a\uff08\u751a\u81f3\u66f4\u591a\uff09Flask \u5de5\u4f5c\u8fdb\u7a0b\uff0c\u8fd9\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58\u548c CPU \u8d44\u6e90\u3002 \u4f7f\u7528 FastAPI (\u5f02\u6b65) \uff0c\u5f53\u4e00\u4e2a\u8bf7\u6c42 await LLM \u7684\u54cd\u5e94\u65f6\uff0c\u670d\u52a1\u5668\u4f1a\u628a\u8fd9\u4e2a\u4efb\u52a1\u6682\u65f6\u6302\u8d77\uff0c\u7136\u540e\u7acb\u5373\u53bb\u5904\u7406\u5176\u4ed6\u7528\u6237\u7684\u8bf7\u6c42\u3002\u5f53 LLM \u7684\u54cd\u5e94\u56de\u6765\u540e\uff0c\u670d\u52a1\u5668\u518d\u7ee7\u7eed\u5904\u7406\u4e4b\u524d\u6302\u8d77\u7684\u4efb\u52a1\u3002\u8fd9\u6837\uff0c\u4e00\u4e2a FastAPI \u8fdb\u7a0b\u5c31\u80fd\u540c\u65f6\u5904\u7406\u6210\u767e\u4e0a\u5343\u4e2a\u201c\u7b49\u5f85 LLM \u54cd\u5e94\u201d\u7684\u5e76\u53d1\u8bf7\u6c42\uff0c\u8d44\u6e90\u5229\u7528\u7387\u6781\u9ad8\u3002 FastAPI \u7684\u5185\u7f6e\u7279\u6027\u5f88\u65b9\u4fbf\uff1a FastAPI \u57fa\u4e8e Pydantic \u8fdb\u884c\u81ea\u52a8\u7684\u6570\u636e\u6821\u9a8c\u548c\u6587\u6863\u751f\u6210\uff08Swagger UI / ReDoc\uff09\u3002\u8fd9\u5bf9\u4e8e\u5b9a\u4e49\u6e05\u6670\u7684 LLM \u8f93\u5165\uff08\u5982 prompt\u3001\u53c2\u6570\uff09\u548c\u8f93\u51fa\u7ed3\u6784\u975e\u5e38\u6709\u5e2e\u52a9\uff0c\u80fd\u51cf\u5c11\u5f88\u591a\u6a21\u677f\u4ee3\u7801\uff0c\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u548c\u63a5\u53e3\u8d28\u91cf\u3002 \u7b80\u5355\u6765\u8bf4\uff1a \u5982\u679c\u4f60\u5e0c\u671b\u4f60\u7684 LLM \u5e94\u7528\u80fd\u591f\u540c\u65f6\u670d\u52a1\u5f88\u591a\u7528\u6237\uff0c\u5e76\u4e14\u9ad8\u6548\u5730\u5229\u7528\u670d\u52a1\u5668\u8d44\u6e90\uff0c FastAPI \u7684\u5f02\u6b65\u7279\u6027\u662f\u5de8\u5927\u7684\u4f18\u52bf \u3002 \u5982\u679c\u4f60\u53ea\u662f\u505a\u4e00\u4e2a\u5185\u90e8\u5c0f\u5de5\u5177\uff0c\u7528\u6237\u91cf\u6781\u5c11\uff0c\u6216\u8005\u4f60\u7684\u56e2\u961f\u5b8c\u5168\u4e0d\u719f\u6089\u5f02\u6b65\u7f16\u7a0b\u4e14\u4e0d\u613f\u610f\u5b66\u4e60\uff0c\u7528 Flask \u4e5f\u80fd\u5b9e\u73b0\u529f\u80fd\uff0c\u4f46\u6027\u80fd\u548c\u5e76\u53d1\u80fd\u529b\u4f1a\u5dee\u5f88\u591a\uff0c\u9700\u8981\u66f4\u591a\u670d\u52a1\u5668\u8d44\u6e90\u6765\u5f25\u8865\u3002 \u7ed3\u8bba\uff1a \u5bf9\u4e8e\u9700\u8981\u8c03\u7528\u5927\u6a21\u578b\u7684\u573a\u666f\uff0cFastAPI \u7684\u5f02\u6b65\u6a21\u578b\u51e0\u4e4e\u662f\u5fc5\u7136\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u80fd\u66f4\u597d\u5730\u5e94\u5bf9 LLM \u8c03\u7528\u5e26\u6765\u7684\u7b49\u5f85\u65f6\u95f4\uff0c\u5b9e\u73b0\u9ad8\u5e76\u53d1\u3001\u9ad8\u6027\u80fd\u7684\u670d\u52a1\u3002","title":"FastAPI\u548cFlask\u7684\u533a\u522b\u548c\u8054\u7cfb"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html","text":"\u6574\u4f53\u67b6\u6784\u4e0e\u5de5\u4f5c\u6d41\u7a0b \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 1.\u7406\u89e3RAG\u7cfb\u7edf\u7684\u57fa\u672c\u539f\u7406\u53ca\u5176\u5728\u6559\u80b2\u9886\u57df\u7684\u5e94\u7528\u573a\u666f\u3002 2.\u638c\u63e1EduRAG\u7cfb\u7edf\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\u548c\u5404\u6a21\u5757\u7684\u6838\u5fc3\u529f\u80fd\u3002 3.\u719f\u6089RAG\u7cfb\u7edf\u4ece\u67e5\u8be2\u5230\u751f\u6210\u56de\u7b54\u7684\u5b8c\u6574\u5de5\u4f5c\u6d41\u7a0b\u3002 1. RAG\u7cfb\u7edf\u6574\u4f53\u67b6\u6784\u4ecb\u7ecd \u00b6 EduRAG\u667a\u6167\u95ee\u7b54\u7cfb\u7edf\u662f\u4e00\u4e2a\u57fa\u4e8e**RAG\uff08Retrieval-Augmented Generation\uff0c\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09**\u6280\u672f\u7684\u667a\u80fd\u95ee\u7b54\u5e73\u53f0\uff0c\u4e13\u4e3aIT\u6559\u80b2\u57f9\u8bad\u8bbe\u8ba1\u3002\u5b83\u901a\u8fc7\u7ed3\u5408\u4fe1\u606f\u68c0\u7d22\u548c\u751f\u6210\u5f0f\u6a21\u578b\uff0c\u4ece\u77e5\u8bc6\u5e93\u4e2d\u63d0\u53d6\u76f8\u5173\u4fe1\u606f\u5e76\u751f\u6210\u51c6\u786e\u3001\u81ea\u7136\u7684\u56de\u7b54\u3002\u7cfb\u7edf\u91c7\u7528\u5de5\u7a0b\u5316\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u4ee3\u7801\u7ed3\u6784\u6e05\u6670\uff0c\u4fbf\u4e8e\u5f00\u53d1\u3001\u7ef4\u62a4\u548c\u6269\u5c55\u3002 1.1 \u7cfb\u7edf\u80cc\u666f \u00b6 RAG\u6280\u672f\u901a\u8fc7\u68c0\u7d22\u5916\u90e8\u77e5\u8bc6\u5e93\u589e\u5f3a\u5927\u8bed\u8a00\u6a21\u578b\u7684\u56de\u7b54\u80fd\u529b\uff0c\u7279\u522b\u9002\u7528\u4e8e\u9700\u8981\u4e13\u4e1a\u77e5\u8bc6\u7684\u573a\u666f\u3002EduRAG\u7684\u76ee\u6807\u662f\u4e3aIT\u5b66\u4e60\u8005\u63d0\u4f9b\u9ad8\u6548\u3001\u51c6\u786e\u7684\u7b54\u7591\u670d\u52a1\uff0c\u652f\u6301\u591a\u79cd\u6587\u6863\u683c\u5f0f\u548c\u7075\u6d3b\u7684\u68c0\u7d22\u7b56\u7565\u3002 1.2 \u6a21\u5757\u5316\u67b6\u6784 \u00b6 \u7cfb\u7edf\u7684\u4ee3\u7801\u7ec4\u7ec7\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6838\u5fc3\u6a21\u5757\uff1a base/ \uff1a\u57fa\u7840\u652f\u6301\u6a21\u5757\uff0c\u8d1f\u8d23\u914d\u7f6e\u3001\u65e5\u5fd7\u5904\u7406\u3002 core/ \uff1a\u6838\u5fc3\u903b\u8f91\u6a21\u5757\uff0c\u5b9e\u73b0RAG\u7684\u5173\u952e\u529f\u80fd\u3002 main.py \uff1a\u7cfb\u7edf\u8fd0\u884c\u5165\u53e3\uff0c\u652f\u6301\u6570\u636e\u5904\u7406\u548c\u4ea4\u4e92\u67e5\u8be2\u3002 \u6a21\u5757\u8be6\u60c5 \u00b6 base\u6a21\u5757 \uff1a config.py \uff1a\u7ba1\u7406\u7cfb\u7edf\u914d\u7f6e\uff0c\u5982API\u5bc6\u94a5\u3001\u6a21\u578b\u9009\u62e9\u7b49\u3002 logger.py \uff1a\u8bb0\u5f55\u7cfb\u7edf\u8fd0\u884c\u65e5\u5fd7\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u3002 core\u6a21\u5757 \uff1a document_processor.py \uff1a\u5904\u7406\u8f93\u5165\u6587\u6863\uff0c\u5206\u5757\u5e76\u51c6\u5907\u5411\u91cf\u5b58\u50a8\u3002 prompts.py \uff1a\u7ba1\u7406Prompt\u6a21\u677f\uff0c\u652f\u6301\u4e0d\u540c\u4efb\u52a1\u3002 query_classifier.py \uff1a\u5206\u7c7b\u7528\u6237\u67e5\u8be2\u7c7b\u578b\u3002 strategy_selector.py \uff1a\u9009\u62e9\u5408\u9002\u7684\u68c0\u7d22\u7b56\u7565\u3002 vector_store.py \uff1a\u7ba1\u7406\u5411\u91cf\u6570\u636e\u5e93\uff0c\u8fdb\u884c\u6587\u6863\u5b58\u50a8\u548c\u68c0\u7d22\u3002 rag_system.py \uff1a\u6574\u5408RAG\u6d41\u7a0b\uff0c\u751f\u6210\u6700\u7ec8\u56de\u7b54\u3002 main.py \uff1a\u547d\u4ee4\u884c\u4ea4\u4e92\u5165\u53e3\uff0c\u6d4b\u8bd5\u548c\u8fd0\u884c\u7cfb\u7edf\u3002 1.3 \u4ee3\u7801\u76ee\u5f55\u7ed3\u6784 \u00b6 integrated_qa_system/ \u251c\u2500\u2500 config.ini # \u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u542b\u6240\u6709\u6a21\u5757\u7684\u914d\u7f6e \u251c\u2500\u2500 base/ \u2502 \u251c\u2500\u2500 config.py # \u914d\u7f6e\u7ba1\u7406\uff0c\u52a0\u8f7d config.ini \u2502 \u251c\u2500\u2500 logger.py # \u65e5\u5fd7\u8bbe\u7f6e \u251c\u2500\u2500 rag_qa/ \u2502 \u251c\u2500\u2500 core/ \u2502 \u2502 \u251c\u2500\u2500 prompts.py # RAG \u63d0\u793a\u6a21\u677f \u2502 \u2502 \u251c\u2500\u2500 query_classifier.py # \u67e5\u8be2\u5206\u7c7b\u5668 \u2502 \u2502 \u251c\u2500\u2500 strategy_selector.py # \u68c0\u7d22\u7b56\u7565\u9009\u62e9\u5668 \u2502 \u2502 \u251c\u2500\u2500 vector_store.py # \u5411\u91cf\u5b58\u50a8\u4e0e\u68c0\u7d22 \u2502 \u2502 \u251c\u2500\u2500 rag_system.py # RAG \u7cfb\u7edf\u6838\u5fc3\u903b\u8f91 \u2502 \u251c\u2500\u2500 main.py # RAG \u7cfb\u7edf\u72ec\u7acb\u5165\u53e3\uff0c\u652f\u6301\u5b58\u50a8\u548c\u67e5\u8be2 \u251c\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6 \u2514\u2500\u2500 logs/ \u2514\u2500\u2500 app.log # \u65e5\u5fd7\u6587\u4ef6 2. RAG\u7cfb\u7edf\u57fa\u672c\u5de5\u4f5c\u6d41\u7a0b \u00b6 EduRAG\u7cfb\u7edf\u7684\u5de5\u4f5c\u6d41\u7a0b\u5206\u4e3a\u56db\u4e2a\u4e3b\u8981\u6b65\u9aa4\uff0c\u786e\u4fdd\u4ece\u7528\u6237\u67e5\u8be2\u5230\u751f\u6210\u56de\u7b54\u7684\u9ad8\u6548\u6027\u548c\u51c6\u786e\u6027\uff1a \u67e5\u8be2\u5206\u7c7b \uff1a \u7cfb\u7edf\u9996\u5148\u5224\u65ad\u67e5\u8be2\u7c7b\u578b\uff08\u5982\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6216\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\uff09\u3002 \u901a\u7528\u77e5\u8bc6\u76f4\u63a5\u7531\u5927\u8bed\u8a00\u6a21\u578b\u56de\u7b54\uff0c\u4e13\u4e1a\u54a8\u8be2\u8fdb\u5165\u68c0\u7d22\u6d41\u7a0b\u3002 \u7b56\u7565\u9009\u62e9 \uff1a \u6839\u636e\u67e5\u8be2\u7279\u70b9\u9009\u62e9\u68c0\u7d22\u7b56\u7565\uff1a \u76f4\u63a5\u68c0\u7d22 \uff1a\u9002\u7528\u4e8e\u660e\u786e\u67e5\u8be2\u3002 HyDE\u68c0\u7d22 \uff1a\u9002\u7528\u4e8e\u62bd\u8c61\u95ee\u9898\uff0c\u751f\u6210\u5047\u8bbe\u7b54\u6848\u540e\u68c0\u7d22\u3002 \u5b50\u67e5\u8be2\u68c0\u7d22 \uff1a\u5206\u89e3\u590d\u6742\u67e5\u8be2\u3002 \u56de\u6eaf\u68c0\u7d22 \uff1a\u7b80\u5316\u590d\u6742\u95ee\u9898\u540e\u68c0\u7d22\u3002 \u6587\u6863\u68c0\u7d22 \uff1a \u4f7f\u7528 vector_store.py \u4ece\u5411\u91cf\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u76f8\u5173\u6587\u6863\u3002 \u652f\u6301\u7a20\u5bc6\u5411\u91cf\u548c\u7a00\u758f\u5411\u91cf\u7684\u6df7\u5408\u68c0\u7d22\uff0c\u7ed3\u679c\u7ecf\u8fc7\u91cd\u6392\u5e8f\u4f18\u5316\u3002 \u751f\u6210\u56de\u7b54 \uff1a \u5c06\u68c0\u7d22\u5230\u7684\u6587\u6863\u4f5c\u4e3a\u4e0a\u4e0b\u6587\uff0c\u7ed3\u5408\u7528\u6237\u67e5\u8be2\u8f93\u5165\u5927\u8bed\u8a00\u6a21\u578b\u3002 \u751f\u6210\u81ea\u7136\u8bed\u8a00\u56de\u7b54\uff0c\u82e5\u65e0\u7b54\u6848\u5219\u5f15\u5bfc\u4eba\u5de5\u652f\u6301\u3002 \u6d41\u7a0b\u56fe \u00b6 \u603b\u7ed3 \u00b6 EduRAG\u667a\u6167\u95ee\u7b54\u7cfb\u7edf\u901a\u8fc7\u5de5\u7a0b\u5316\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u5b9e\u73b0\u4e86\u4ece\u67e5\u8be2\u5206\u7c7b\u5230\u751f\u6210\u56de\u7b54\u7684\u5b8c\u6574\u6d41\u7a0b\u3002\u5176\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\uff1a \u6a21\u5757\u5316 \uff1a\u4ee3\u7801\u5206\u5de5\u660e\u786e\uff0c\u4fbf\u4e8e\u7ef4\u62a4\u548c\u6269\u5c55\u3002 \u7075\u6d3b\u6027 \uff1a\u652f\u6301\u591a\u79cd\u68c0\u7d22\u7b56\u7565\uff0c\u9002\u5e94\u4e0d\u540c\u67e5\u8be2\u9700\u6c42\u3002 \u5b9e\u7528\u6027 \uff1a\u7ed3\u5408IT\u6559\u80b2\u573a\u666f\uff0c\u63d0\u4f9b\u4e13\u4e1a\u56de\u7b54\u3002","title":"4.1 \u6574\u4f53\u67b6\u6784\u4e0e\u5de5\u7a0b\u6d41\u7a0b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#_1","text":"","title":"\u6574\u4f53\u67b6\u6784\u4e0e\u5de5\u4f5c\u6d41\u7a0b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#_2","text":"1.\u7406\u89e3RAG\u7cfb\u7edf\u7684\u57fa\u672c\u539f\u7406\u53ca\u5176\u5728\u6559\u80b2\u9886\u57df\u7684\u5e94\u7528\u573a\u666f\u3002 2.\u638c\u63e1EduRAG\u7cfb\u7edf\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\u548c\u5404\u6a21\u5757\u7684\u6838\u5fc3\u529f\u80fd\u3002 3.\u719f\u6089RAG\u7cfb\u7edf\u4ece\u67e5\u8be2\u5230\u751f\u6210\u56de\u7b54\u7684\u5b8c\u6574\u5de5\u4f5c\u6d41\u7a0b\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#1-rag","text":"EduRAG\u667a\u6167\u95ee\u7b54\u7cfb\u7edf\u662f\u4e00\u4e2a\u57fa\u4e8e**RAG\uff08Retrieval-Augmented Generation\uff0c\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09**\u6280\u672f\u7684\u667a\u80fd\u95ee\u7b54\u5e73\u53f0\uff0c\u4e13\u4e3aIT\u6559\u80b2\u57f9\u8bad\u8bbe\u8ba1\u3002\u5b83\u901a\u8fc7\u7ed3\u5408\u4fe1\u606f\u68c0\u7d22\u548c\u751f\u6210\u5f0f\u6a21\u578b\uff0c\u4ece\u77e5\u8bc6\u5e93\u4e2d\u63d0\u53d6\u76f8\u5173\u4fe1\u606f\u5e76\u751f\u6210\u51c6\u786e\u3001\u81ea\u7136\u7684\u56de\u7b54\u3002\u7cfb\u7edf\u91c7\u7528\u5de5\u7a0b\u5316\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u4ee3\u7801\u7ed3\u6784\u6e05\u6670\uff0c\u4fbf\u4e8e\u5f00\u53d1\u3001\u7ef4\u62a4\u548c\u6269\u5c55\u3002","title":"1. RAG\u7cfb\u7edf\u6574\u4f53\u67b6\u6784\u4ecb\u7ecd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#11","text":"RAG\u6280\u672f\u901a\u8fc7\u68c0\u7d22\u5916\u90e8\u77e5\u8bc6\u5e93\u589e\u5f3a\u5927\u8bed\u8a00\u6a21\u578b\u7684\u56de\u7b54\u80fd\u529b\uff0c\u7279\u522b\u9002\u7528\u4e8e\u9700\u8981\u4e13\u4e1a\u77e5\u8bc6\u7684\u573a\u666f\u3002EduRAG\u7684\u76ee\u6807\u662f\u4e3aIT\u5b66\u4e60\u8005\u63d0\u4f9b\u9ad8\u6548\u3001\u51c6\u786e\u7684\u7b54\u7591\u670d\u52a1\uff0c\u652f\u6301\u591a\u79cd\u6587\u6863\u683c\u5f0f\u548c\u7075\u6d3b\u7684\u68c0\u7d22\u7b56\u7565\u3002","title":"1.1 \u7cfb\u7edf\u80cc\u666f"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#12","text":"\u7cfb\u7edf\u7684\u4ee3\u7801\u7ec4\u7ec7\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6838\u5fc3\u6a21\u5757\uff1a base/ \uff1a\u57fa\u7840\u652f\u6301\u6a21\u5757\uff0c\u8d1f\u8d23\u914d\u7f6e\u3001\u65e5\u5fd7\u5904\u7406\u3002 core/ \uff1a\u6838\u5fc3\u903b\u8f91\u6a21\u5757\uff0c\u5b9e\u73b0RAG\u7684\u5173\u952e\u529f\u80fd\u3002 main.py \uff1a\u7cfb\u7edf\u8fd0\u884c\u5165\u53e3\uff0c\u652f\u6301\u6570\u636e\u5904\u7406\u548c\u4ea4\u4e92\u67e5\u8be2\u3002","title":"1.2 \u6a21\u5757\u5316\u67b6\u6784"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#_3","text":"base\u6a21\u5757 \uff1a config.py \uff1a\u7ba1\u7406\u7cfb\u7edf\u914d\u7f6e\uff0c\u5982API\u5bc6\u94a5\u3001\u6a21\u578b\u9009\u62e9\u7b49\u3002 logger.py \uff1a\u8bb0\u5f55\u7cfb\u7edf\u8fd0\u884c\u65e5\u5fd7\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u76d1\u63a7\u3002 core\u6a21\u5757 \uff1a document_processor.py \uff1a\u5904\u7406\u8f93\u5165\u6587\u6863\uff0c\u5206\u5757\u5e76\u51c6\u5907\u5411\u91cf\u5b58\u50a8\u3002 prompts.py \uff1a\u7ba1\u7406Prompt\u6a21\u677f\uff0c\u652f\u6301\u4e0d\u540c\u4efb\u52a1\u3002 query_classifier.py \uff1a\u5206\u7c7b\u7528\u6237\u67e5\u8be2\u7c7b\u578b\u3002 strategy_selector.py \uff1a\u9009\u62e9\u5408\u9002\u7684\u68c0\u7d22\u7b56\u7565\u3002 vector_store.py \uff1a\u7ba1\u7406\u5411\u91cf\u6570\u636e\u5e93\uff0c\u8fdb\u884c\u6587\u6863\u5b58\u50a8\u548c\u68c0\u7d22\u3002 rag_system.py \uff1a\u6574\u5408RAG\u6d41\u7a0b\uff0c\u751f\u6210\u6700\u7ec8\u56de\u7b54\u3002 main.py \uff1a\u547d\u4ee4\u884c\u4ea4\u4e92\u5165\u53e3\uff0c\u6d4b\u8bd5\u548c\u8fd0\u884c\u7cfb\u7edf\u3002","title":"\u6a21\u5757\u8be6\u60c5"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#13","text":"integrated_qa_system/ \u251c\u2500\u2500 config.ini # \u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u542b\u6240\u6709\u6a21\u5757\u7684\u914d\u7f6e \u251c\u2500\u2500 base/ \u2502 \u251c\u2500\u2500 config.py # \u914d\u7f6e\u7ba1\u7406\uff0c\u52a0\u8f7d config.ini \u2502 \u251c\u2500\u2500 logger.py # \u65e5\u5fd7\u8bbe\u7f6e \u251c\u2500\u2500 rag_qa/ \u2502 \u251c\u2500\u2500 core/ \u2502 \u2502 \u251c\u2500\u2500 prompts.py # RAG \u63d0\u793a\u6a21\u677f \u2502 \u2502 \u251c\u2500\u2500 query_classifier.py # \u67e5\u8be2\u5206\u7c7b\u5668 \u2502 \u2502 \u251c\u2500\u2500 strategy_selector.py # \u68c0\u7d22\u7b56\u7565\u9009\u62e9\u5668 \u2502 \u2502 \u251c\u2500\u2500 vector_store.py # \u5411\u91cf\u5b58\u50a8\u4e0e\u68c0\u7d22 \u2502 \u2502 \u251c\u2500\u2500 rag_system.py # RAG \u7cfb\u7edf\u6838\u5fc3\u903b\u8f91 \u2502 \u251c\u2500\u2500 main.py # RAG \u7cfb\u7edf\u72ec\u7acb\u5165\u53e3\uff0c\u652f\u6301\u5b58\u50a8\u548c\u67e5\u8be2 \u251c\u2500\u2500 requirements.txt # \u4f9d\u8d56\u6587\u4ef6 \u2514\u2500\u2500 logs/ \u2514\u2500\u2500 app.log # \u65e5\u5fd7\u6587\u4ef6","title":"1.3 \u4ee3\u7801\u76ee\u5f55\u7ed3\u6784"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#2-rag","text":"EduRAG\u7cfb\u7edf\u7684\u5de5\u4f5c\u6d41\u7a0b\u5206\u4e3a\u56db\u4e2a\u4e3b\u8981\u6b65\u9aa4\uff0c\u786e\u4fdd\u4ece\u7528\u6237\u67e5\u8be2\u5230\u751f\u6210\u56de\u7b54\u7684\u9ad8\u6548\u6027\u548c\u51c6\u786e\u6027\uff1a \u67e5\u8be2\u5206\u7c7b \uff1a \u7cfb\u7edf\u9996\u5148\u5224\u65ad\u67e5\u8be2\u7c7b\u578b\uff08\u5982\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6216\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\uff09\u3002 \u901a\u7528\u77e5\u8bc6\u76f4\u63a5\u7531\u5927\u8bed\u8a00\u6a21\u578b\u56de\u7b54\uff0c\u4e13\u4e1a\u54a8\u8be2\u8fdb\u5165\u68c0\u7d22\u6d41\u7a0b\u3002 \u7b56\u7565\u9009\u62e9 \uff1a \u6839\u636e\u67e5\u8be2\u7279\u70b9\u9009\u62e9\u68c0\u7d22\u7b56\u7565\uff1a \u76f4\u63a5\u68c0\u7d22 \uff1a\u9002\u7528\u4e8e\u660e\u786e\u67e5\u8be2\u3002 HyDE\u68c0\u7d22 \uff1a\u9002\u7528\u4e8e\u62bd\u8c61\u95ee\u9898\uff0c\u751f\u6210\u5047\u8bbe\u7b54\u6848\u540e\u68c0\u7d22\u3002 \u5b50\u67e5\u8be2\u68c0\u7d22 \uff1a\u5206\u89e3\u590d\u6742\u67e5\u8be2\u3002 \u56de\u6eaf\u68c0\u7d22 \uff1a\u7b80\u5316\u590d\u6742\u95ee\u9898\u540e\u68c0\u7d22\u3002 \u6587\u6863\u68c0\u7d22 \uff1a \u4f7f\u7528 vector_store.py \u4ece\u5411\u91cf\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u76f8\u5173\u6587\u6863\u3002 \u652f\u6301\u7a20\u5bc6\u5411\u91cf\u548c\u7a00\u758f\u5411\u91cf\u7684\u6df7\u5408\u68c0\u7d22\uff0c\u7ed3\u679c\u7ecf\u8fc7\u91cd\u6392\u5e8f\u4f18\u5316\u3002 \u751f\u6210\u56de\u7b54 \uff1a \u5c06\u68c0\u7d22\u5230\u7684\u6587\u6863\u4f5c\u4e3a\u4e0a\u4e0b\u6587\uff0c\u7ed3\u5408\u7528\u6237\u67e5\u8be2\u8f93\u5165\u5927\u8bed\u8a00\u6a21\u578b\u3002 \u751f\u6210\u81ea\u7136\u8bed\u8a00\u56de\u7b54\uff0c\u82e5\u65e0\u7b54\u6848\u5219\u5f15\u5bfc\u4eba\u5de5\u652f\u6301\u3002","title":"2. RAG\u7cfb\u7edf\u57fa\u672c\u5de5\u4f5c\u6d41\u7a0b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#_4","text":"","title":"\u6d41\u7a0b\u56fe"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/01-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%B7%A5%E7%A8%8B%E6%B5%81%E7%A8%8B.html#_5","text":"EduRAG\u667a\u6167\u95ee\u7b54\u7cfb\u7edf\u901a\u8fc7\u5de5\u7a0b\u5316\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u5b9e\u73b0\u4e86\u4ece\u67e5\u8be2\u5206\u7c7b\u5230\u751f\u6210\u56de\u7b54\u7684\u5b8c\u6574\u6d41\u7a0b\u3002\u5176\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\uff1a \u6a21\u5757\u5316 \uff1a\u4ee3\u7801\u5206\u5de5\u660e\u786e\uff0c\u4fbf\u4e8e\u7ef4\u62a4\u548c\u6269\u5c55\u3002 \u7075\u6d3b\u6027 \uff1a\u652f\u6301\u591a\u79cd\u68c0\u7d22\u7b56\u7565\uff0c\u9002\u5e94\u4e0d\u540c\u67e5\u8be2\u9700\u6c42\u3002 \u5b9e\u7528\u6027 \uff1a\u7ed3\u5408IT\u6559\u80b2\u573a\u666f\uff0c\u63d0\u4f9b\u4e13\u4e1a\u56de\u7b54\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html","text":"\u57fa\u7840\u6a21\u5757\uff08base\uff09 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 1.\u7406\u89e3\u5e76\u638c\u63e1\u5982\u4f55\u901a\u8fc7Config\u7c7b\u96c6\u4e2d\u7ba1\u7406\u7cfb\u7edf\u7684\u914d\u7f6e\u53c2\u6570\u3002 2.\u5b66\u4f1a\u914d\u7f6e\u548c\u4f7f\u7528\u65e5\u5fd7\u8bb0\u5f55\u5668\uff0c\u5b9e\u73b0\u5bf9\u7cfb\u7edf\u8fd0\u884c\u72b6\u6001\u7684\u76d1\u63a7\u3002 3.\u8ba4\u8bc6base\u6a21\u5757\u5728\u7cfb\u7edf\u67b6\u6784\u4e2d\u7684\u4f5c\u7528\uff0c\u4e3a\u5b66\u4e60\u540e\u7eed\u6838\u5fc3\u903b\u8f91\u5960\u5b9a\u57fa\u7840\u3002 base \u6a21\u5757\u662fEduRAG\u667a\u6167\u95ee\u7b54\u7cfb\u7edf\u7684\u57fa\u7840\uff0c\u8d1f\u8d23\u63d0\u4f9b\u7cfb\u7edf\u8fd0\u884c\u6240\u9700\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5305\u62ec\u914d\u7f6e\u7ba1\u7406\u3001\u65e5\u5fd7\u8bb0\u5f55\u3002\u8fd9\u4e9b\u529f\u80fd\u4e3a\u7cfb\u7edf\u7684\u5176\u4ed6\u6a21\u5757\u63d0\u4f9b\u4e86\u7a33\u5b9a\u7684\u652f\u6301\uff0c\u786e\u4fdd\u7cfb\u7edf\u80fd\u591f\u7075\u6d3b\u914d\u7f6e\u3001\u76d1\u63a7\u8fd0\u884c\u72b6\u6001\u3002 2.1 \u914d\u7f6e\u7ba1\u7406 \u00b6 \u529f\u80fd \u00b6 config.py \u6587\u4ef6\u5b9a\u4e49\u4e86 Config \u7c7b\uff0c\u7528\u4e8e\u96c6\u4e2d\u7ba1\u7406\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u914d\u7f6e\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u5305\u62ec\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u3001\u6a21\u578b\u9009\u62e9\u3001\u5206\u5757\u7b56\u7565\u3001API\u8bbe\u7f6e\u7b49\u3002\u901a\u8fc7\u96c6\u4e2d\u7ba1\u7406\u914d\u7f6e\uff0c\u7cfb\u7edf\u53ef\u4ee5\u65b9\u4fbf\u5730\u8c03\u6574\u53c2\u6570\u3001\u9002\u914d\u4e0d\u540c\u73af\u5883\uff0c\u5e76\u652f\u6301\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u7075\u6d3b\u914d\u7f6e\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # \u5bfc\u5165\u914d\u7f6e\u89e3\u6790\u5e93 import configparser # \u5bfc\u5165\u8def\u5f84\u64cd\u4f5c\u5e93 import os class Config : # \u521d\u59cb\u5316\u914d\u7f6e\uff0c\u52a0\u8f7d config.ini \u6587\u4ef6 def __init__ ( self , config_file = '/Users/ligang/PycharmProjects/LLM/Itcast_qa_system/config.ini' ): # \u521b\u5efa\u914d\u7f6e\u89e3\u6790\u5668 self . config = configparser . ConfigParser () # \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6 self . config . read ( config_file ) # MySQL \u914d\u7f6e # MySQL \u4e3b\u673a\u5730\u5740 self . MYSQL_HOST = self . config . get ( 'mysql' , 'host' , fallback = 'localhost' ) # MySQL \u7528\u6237\u540d self . MYSQL_USER = self . config . get ( 'mysql' , 'user' , fallback = 'root' ) # MySQL \u5bc6\u7801 self . MYSQL_PASSWORD = self . config . get ( 'mysql' , 'password' , fallback = '123456' ) # MySQL \u6570\u636e\u5e93\u540d self . MYSQL_DATABASE = self . config . get ( 'mysql' , 'database' , fallback = 'subjects_kg' ) # Redis \u914d\u7f6e # Redis \u4e3b\u673a\u5730\u5740 self . REDIS_HOST = self . config . get ( 'redis' , 'host' , fallback = 'localhost' ) # Redis \u7aef\u53e3 self . REDIS_PORT = self . config . getint ( 'redis' , 'port' , fallback = 6379 ) # Redis \u5bc6\u7801 self . REDIS_PASSWORD = self . config . get ( 'redis' , 'password' , fallback = '1234' ) # Redis \u6570\u636e\u5e93\u7f16\u53f7 self . REDIS_DB = self . config . getint ( 'redis' , 'db' , fallback = 0 ) # Milvus \u914d\u7f6e # Milvus \u4e3b\u673a\u5730\u5740 self . MILVUS_HOST = self . config . get ( 'milvus' , 'host' , fallback = 'localhost' ) # Milvus \u7aef\u53e3 self . MILVUS_PORT = self . config . get ( 'milvus' , 'port' , fallback = '19530' ) # Milvus \u6570\u636e\u5e93\u540d self . MILVUS_DATABASE_NAME = self . config . get ( 'milvus' , 'database_name' , fallback = 'itcast' ) # Milvus \u96c6\u5408\u540d self . MILVUS_COLLECTION_NAME = self . config . get ( 'milvus' , 'collection_name' , fallback = 'edurag_final' ) # LLM \u914d\u7f6e # LLM \u6a21\u578b\u540d self . LLM_MODEL = self . config . get ( 'llm' , 'model' , fallback = 'qwen-plus' ) # DashScope API \u5bc6\u94a5 self . DASHSCOPE_API_KEY = self . config . get ( 'llm' , 'dashscope_api_key' ) # DashScope API \u5730\u5740 self . DASHSCOPE_BASE_URL = self . config . get ( 'llm' , 'dashscope_base_url' , fallback = 'https://dashscope.aliyuncs.com/compatible-mode/v1' ) # \u68c0\u7d22\u53c2\u6570 # \u7236\u5757\u5927\u5c0f self . PARENT_CHUNK_SIZE = self . config . getint ( 'retrieval' , 'parent_chunk_size' , fallback = 1200 ) # \u5b50\u5757\u5927\u5c0f self . CHILD_CHUNK_SIZE = self . config . getint ( 'retrieval' , 'child_chunk_size' , fallback = 300 ) # \u5757\u91cd\u53e0\u5927\u5c0f self . CHUNK_OVERLAP = self . config . getint ( 'retrieval' , 'chunk_overlap' , fallback = 50 ) # \u68c0\u7d22\u8fd4\u56de\u6570\u91cf self . RETRIEVAL_K = self . config . getint ( 'retrieval' , 'retrieval_k' , fallback = 5 ) # \u6700\u7ec8\u5019\u9009\u6570\u91cf self . CANDIDATE_M = self . config . getint ( 'retrieval' , 'candidate_m' , fallback = 2 ) # \u5e94\u7528\u914d\u7f6e # \u6709\u6548\u6765\u6e90\u5217\u8868 self . VALID_SOURCES = eval ( self . config . get ( 'app' , 'valid_sources' , fallback = '[\"ai\", \"java\", \"test\", \"ops\", \"bigdata\"]' )) # \u5ba2\u670d\u7535\u8bdd self . CUSTOMER_SERVICE_PHONE = self . config . get ( 'app' , 'customer_service_phone' , fallback = '12345678' ) # \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 self . LOG_FILE = self . config . get ( 'logger' , 'log_file' , fallback = 'logs/app.log' ) if __name__ == '__main__' : conf = Config () print ( conf . CHILD_CHUNK_SIZE ) \u8bf4\u660e \u00b6 \u73af\u5883\u53d8\u91cf\u652f\u6301 \uff1a\u4f7f\u7528 dotenv \u52a0\u8f7d .env \u6587\u4ef6\u4e2d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u907f\u514d\u654f\u611f\u4fe1\u606f\u786c\u7f16\u7801\u3002 \u9ed8\u8ba4\u503c \uff1a\u6bcf\u4e2a\u53c2\u6570\u8bbe\u6709\u9ed8\u8ba4\u503c\uff0c\u786e\u4fdd\u672a\u914d\u7f6e\u73af\u5883\u53d8\u91cf\u65f6\u7cfb\u7edf\u4ecd\u53ef\u8fd0\u884c\u3002 \u53c2\u6570\u5206\u7c7b \uff1a\u6309\u529f\u80fd\u5206\u7c7b\uff08\u5982\u6570\u636e\u5e93\u3001\u6a21\u578b\u3001\u5206\u5757\u7b49\uff09\uff0c\u4fbf\u4e8e\u7ba1\u7406\u548c\u7ef4\u62a4\u3002 2.2 \u65e5\u5fd7\u8bb0\u5f55\uff08logger.py\uff09 \u00b6 \u529f\u80fd \u00b6 logger.py \u6587\u4ef6\u5b9a\u4e49\u4e86 setup_logging \u51fd\u6570\uff0c\u7528\u4e8e\u914d\u7f6e\u7cfb\u7edf\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002\u65e5\u5fd7\u8bb0\u5f55\u5668\u5c06\u8fd0\u884c\u4fe1\u606f\u3001\u8b66\u544a\u548c\u9519\u8bef\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u4fbf\u4e8e\u5f00\u53d1\u3001\u8c03\u8bd5\u548c\u8fd0\u7ef4\u4eba\u5458\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # \u5bfc\u5165\u65e5\u5fd7\u5e93 import logging # \u5bfc\u5165\u8def\u5f84\u64cd\u4f5c\u5e93 import os # \u5bfc\u5165\u914d\u7f6e\u7c7b from config import Config def setup_logging ( log_file = Config () . LOG_FILE ): # \u521b\u5efa\u65e5\u5fd7\u76ee\u5f55 os . makedirs ( os . path . dirname ( log_file ), exist_ok = True ) # \u83b7\u53d6\u65e5\u5fd7\u5668 logger = logging . getLogger ( \"EduRAG\" ) # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b logger . setLevel ( logging . INFO ) # \u907f\u514d\u91cd\u590d\u6dfb\u52a0\u5904\u7406\u5668 if not logger . handlers : # \u521b\u5efa\u6587\u4ef6\u5904\u7406\u5668 file_handler = logging . FileHandler ( log_file , encoding = 'utf-8' ) # \u8bbe\u7f6e\u6587\u4ef6\u5904\u7406\u5668\u7ea7\u522b file_handler . setLevel ( logging . INFO ) # \u521b\u5efa\u63a7\u5236\u53f0\u5904\u7406\u5668 console_handler = logging . StreamHandler () # \u8bbe\u7f6e\u63a7\u5236\u53f0\u5904\u7406\u5668\u7ea7\u522b console_handler . setLevel ( logging . INFO ) # \u8bbe\u7f6e\u65e5\u5fd7\u683c\u5f0f formatter = logging . Formatter ( ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) # \u4e3a\u6587\u4ef6\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f file_handler . setFormatter ( formatter ) # \u4e3a\u63a7\u5236\u53f0\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f console_handler . setFormatter ( formatter ) # \u6dfb\u52a0\u6587\u4ef6\u5904\u7406\u5668 logger . addHandler ( file_handler ) # \u6dfb\u52a0\u63a7\u5236\u53f0\u5904\u7406\u5668 logger . addHandler ( console_handler ) # \u8fd4\u56de\u65e5\u5fd7\u5668 return logger # \u521d\u59cb\u5316\u65e5\u5fd7\u5668 logger = setup_logging () \u8bf4\u660e \u00b6 \u65e5\u5fd7\u7ea7\u522b \uff1a\u9ed8\u8ba4\u8bbe\u4e3a INFO \uff0c\u8bb0\u5f55\u5173\u952e\u8fd0\u884c\u4fe1\u606f\u3002 \u53cc\u91cd\u8f93\u51fa \uff1a\u540c\u65f6\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u4fbf\u4e8e\u5b9e\u65f6\u76d1\u63a7\u548c\u540e\u7eed\u5206\u6790\u3002 \u683c\u5f0f\u5316 \uff1a\u65e5\u5fd7\u5305\u542b\u65f6\u95f4\u6233\u3001\u540d\u79f0\u3001\u7ea7\u522b\u548c\u5185\u5bb9\uff0c\u4fbf\u4e8e\u95ee\u9898\u5b9a\u4f4d\u3002 \u603b\u7ed3 \u00b6 base \u6a21\u5757\u4e3aEduRAG\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u6838\u5fc3\u652f\u6301\uff1a \u914d\u7f6e\u7ba1\u7406 \uff1a\u901a\u8fc7 Config \u7c7b\u5b9e\u73b0\u7075\u6d3b\u7684\u53c2\u6570\u914d\u7f6e\u3002 \u65e5\u5fd7\u8bb0\u5f55 \uff1a\u901a\u8fc7 logger \u5b9e\u73b0\u8fd0\u884c\u72b6\u6001\u7684\u5b9e\u65f6\u76d1\u63a7\u548c\u8bb0\u5f55\u3002 \u672c\u7ae0\u5185\u5bb9\u4e3a\u5b66\u4e60\u8005\u7406\u89e3EduRAG\u7cfb\u7edf\u7684\u57fa\u7840\u529f\u80fd\u5960\u5b9a\u4e86\u57fa\u7840\uff0c\u4e3a\u540e\u7eed\u6df1\u5165\u5b66\u4e60\u6838\u5fc3\u903b\u8f91\u63d0\u4f9b\u4e86\u652f\u6301\u3002","title":"4.2 \u57fa\u7840\u6a21\u5757"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#base","text":"","title":"\u57fa\u7840\u6a21\u5757\uff08base\uff09"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#_1","text":"1.\u7406\u89e3\u5e76\u638c\u63e1\u5982\u4f55\u901a\u8fc7Config\u7c7b\u96c6\u4e2d\u7ba1\u7406\u7cfb\u7edf\u7684\u914d\u7f6e\u53c2\u6570\u3002 2.\u5b66\u4f1a\u914d\u7f6e\u548c\u4f7f\u7528\u65e5\u5fd7\u8bb0\u5f55\u5668\uff0c\u5b9e\u73b0\u5bf9\u7cfb\u7edf\u8fd0\u884c\u72b6\u6001\u7684\u76d1\u63a7\u3002 3.\u8ba4\u8bc6base\u6a21\u5757\u5728\u7cfb\u7edf\u67b6\u6784\u4e2d\u7684\u4f5c\u7528\uff0c\u4e3a\u5b66\u4e60\u540e\u7eed\u6838\u5fc3\u903b\u8f91\u5960\u5b9a\u57fa\u7840\u3002 base \u6a21\u5757\u662fEduRAG\u667a\u6167\u95ee\u7b54\u7cfb\u7edf\u7684\u57fa\u7840\uff0c\u8d1f\u8d23\u63d0\u4f9b\u7cfb\u7edf\u8fd0\u884c\u6240\u9700\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u5305\u62ec\u914d\u7f6e\u7ba1\u7406\u3001\u65e5\u5fd7\u8bb0\u5f55\u3002\u8fd9\u4e9b\u529f\u80fd\u4e3a\u7cfb\u7edf\u7684\u5176\u4ed6\u6a21\u5757\u63d0\u4f9b\u4e86\u7a33\u5b9a\u7684\u652f\u6301\uff0c\u786e\u4fdd\u7cfb\u7edf\u80fd\u591f\u7075\u6d3b\u914d\u7f6e\u3001\u76d1\u63a7\u8fd0\u884c\u72b6\u6001\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#21","text":"","title":"2.1 \u914d\u7f6e\u7ba1\u7406"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#_2","text":"config.py \u6587\u4ef6\u5b9a\u4e49\u4e86 Config \u7c7b\uff0c\u7528\u4e8e\u96c6\u4e2d\u7ba1\u7406\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u914d\u7f6e\u53c2\u6570\u3002\u8fd9\u4e9b\u53c2\u6570\u5305\u62ec\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u3001\u6a21\u578b\u9009\u62e9\u3001\u5206\u5757\u7b56\u7565\u3001API\u8bbe\u7f6e\u7b49\u3002\u901a\u8fc7\u96c6\u4e2d\u7ba1\u7406\u914d\u7f6e\uff0c\u7cfb\u7edf\u53ef\u4ee5\u65b9\u4fbf\u5730\u8c03\u6574\u53c2\u6570\u3001\u9002\u914d\u4e0d\u540c\u73af\u5883\uff0c\u5e76\u652f\u6301\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u7075\u6d3b\u914d\u7f6e\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#_3","text":"# \u5bfc\u5165\u914d\u7f6e\u89e3\u6790\u5e93 import configparser # \u5bfc\u5165\u8def\u5f84\u64cd\u4f5c\u5e93 import os class Config : # \u521d\u59cb\u5316\u914d\u7f6e\uff0c\u52a0\u8f7d config.ini \u6587\u4ef6 def __init__ ( self , config_file = '/Users/ligang/PycharmProjects/LLM/Itcast_qa_system/config.ini' ): # \u521b\u5efa\u914d\u7f6e\u89e3\u6790\u5668 self . config = configparser . ConfigParser () # \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6 self . config . read ( config_file ) # MySQL \u914d\u7f6e # MySQL \u4e3b\u673a\u5730\u5740 self . MYSQL_HOST = self . config . get ( 'mysql' , 'host' , fallback = 'localhost' ) # MySQL \u7528\u6237\u540d self . MYSQL_USER = self . config . get ( 'mysql' , 'user' , fallback = 'root' ) # MySQL \u5bc6\u7801 self . MYSQL_PASSWORD = self . config . get ( 'mysql' , 'password' , fallback = '123456' ) # MySQL \u6570\u636e\u5e93\u540d self . MYSQL_DATABASE = self . config . get ( 'mysql' , 'database' , fallback = 'subjects_kg' ) # Redis \u914d\u7f6e # Redis \u4e3b\u673a\u5730\u5740 self . REDIS_HOST = self . config . get ( 'redis' , 'host' , fallback = 'localhost' ) # Redis \u7aef\u53e3 self . REDIS_PORT = self . config . getint ( 'redis' , 'port' , fallback = 6379 ) # Redis \u5bc6\u7801 self . REDIS_PASSWORD = self . config . get ( 'redis' , 'password' , fallback = '1234' ) # Redis \u6570\u636e\u5e93\u7f16\u53f7 self . REDIS_DB = self . config . getint ( 'redis' , 'db' , fallback = 0 ) # Milvus \u914d\u7f6e # Milvus \u4e3b\u673a\u5730\u5740 self . MILVUS_HOST = self . config . get ( 'milvus' , 'host' , fallback = 'localhost' ) # Milvus \u7aef\u53e3 self . MILVUS_PORT = self . config . get ( 'milvus' , 'port' , fallback = '19530' ) # Milvus \u6570\u636e\u5e93\u540d self . MILVUS_DATABASE_NAME = self . config . get ( 'milvus' , 'database_name' , fallback = 'itcast' ) # Milvus \u96c6\u5408\u540d self . MILVUS_COLLECTION_NAME = self . config . get ( 'milvus' , 'collection_name' , fallback = 'edurag_final' ) # LLM \u914d\u7f6e # LLM \u6a21\u578b\u540d self . LLM_MODEL = self . config . get ( 'llm' , 'model' , fallback = 'qwen-plus' ) # DashScope API \u5bc6\u94a5 self . DASHSCOPE_API_KEY = self . config . get ( 'llm' , 'dashscope_api_key' ) # DashScope API \u5730\u5740 self . DASHSCOPE_BASE_URL = self . config . get ( 'llm' , 'dashscope_base_url' , fallback = 'https://dashscope.aliyuncs.com/compatible-mode/v1' ) # \u68c0\u7d22\u53c2\u6570 # \u7236\u5757\u5927\u5c0f self . PARENT_CHUNK_SIZE = self . config . getint ( 'retrieval' , 'parent_chunk_size' , fallback = 1200 ) # \u5b50\u5757\u5927\u5c0f self . CHILD_CHUNK_SIZE = self . config . getint ( 'retrieval' , 'child_chunk_size' , fallback = 300 ) # \u5757\u91cd\u53e0\u5927\u5c0f self . CHUNK_OVERLAP = self . config . getint ( 'retrieval' , 'chunk_overlap' , fallback = 50 ) # \u68c0\u7d22\u8fd4\u56de\u6570\u91cf self . RETRIEVAL_K = self . config . getint ( 'retrieval' , 'retrieval_k' , fallback = 5 ) # \u6700\u7ec8\u5019\u9009\u6570\u91cf self . CANDIDATE_M = self . config . getint ( 'retrieval' , 'candidate_m' , fallback = 2 ) # \u5e94\u7528\u914d\u7f6e # \u6709\u6548\u6765\u6e90\u5217\u8868 self . VALID_SOURCES = eval ( self . config . get ( 'app' , 'valid_sources' , fallback = '[\"ai\", \"java\", \"test\", \"ops\", \"bigdata\"]' )) # \u5ba2\u670d\u7535\u8bdd self . CUSTOMER_SERVICE_PHONE = self . config . get ( 'app' , 'customer_service_phone' , fallback = '12345678' ) # \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84 self . LOG_FILE = self . config . get ( 'logger' , 'log_file' , fallback = 'logs/app.log' ) if __name__ == '__main__' : conf = Config () print ( conf . CHILD_CHUNK_SIZE )","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#_4","text":"\u73af\u5883\u53d8\u91cf\u652f\u6301 \uff1a\u4f7f\u7528 dotenv \u52a0\u8f7d .env \u6587\u4ef6\u4e2d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u907f\u514d\u654f\u611f\u4fe1\u606f\u786c\u7f16\u7801\u3002 \u9ed8\u8ba4\u503c \uff1a\u6bcf\u4e2a\u53c2\u6570\u8bbe\u6709\u9ed8\u8ba4\u503c\uff0c\u786e\u4fdd\u672a\u914d\u7f6e\u73af\u5883\u53d8\u91cf\u65f6\u7cfb\u7edf\u4ecd\u53ef\u8fd0\u884c\u3002 \u53c2\u6570\u5206\u7c7b \uff1a\u6309\u529f\u80fd\u5206\u7c7b\uff08\u5982\u6570\u636e\u5e93\u3001\u6a21\u578b\u3001\u5206\u5757\u7b49\uff09\uff0c\u4fbf\u4e8e\u7ba1\u7406\u548c\u7ef4\u62a4\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#22-loggerpy","text":"","title":"2.2 \u65e5\u5fd7\u8bb0\u5f55\uff08logger.py\uff09"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#_5","text":"logger.py \u6587\u4ef6\u5b9a\u4e49\u4e86 setup_logging \u51fd\u6570\uff0c\u7528\u4e8e\u914d\u7f6e\u7cfb\u7edf\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002\u65e5\u5fd7\u8bb0\u5f55\u5668\u5c06\u8fd0\u884c\u4fe1\u606f\u3001\u8b66\u544a\u548c\u9519\u8bef\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u4fbf\u4e8e\u5f00\u53d1\u3001\u8c03\u8bd5\u548c\u8fd0\u7ef4\u4eba\u5458\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#_6","text":"# \u5bfc\u5165\u65e5\u5fd7\u5e93 import logging # \u5bfc\u5165\u8def\u5f84\u64cd\u4f5c\u5e93 import os # \u5bfc\u5165\u914d\u7f6e\u7c7b from config import Config def setup_logging ( log_file = Config () . LOG_FILE ): # \u521b\u5efa\u65e5\u5fd7\u76ee\u5f55 os . makedirs ( os . path . dirname ( log_file ), exist_ok = True ) # \u83b7\u53d6\u65e5\u5fd7\u5668 logger = logging . getLogger ( \"EduRAG\" ) # \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b logger . setLevel ( logging . INFO ) # \u907f\u514d\u91cd\u590d\u6dfb\u52a0\u5904\u7406\u5668 if not logger . handlers : # \u521b\u5efa\u6587\u4ef6\u5904\u7406\u5668 file_handler = logging . FileHandler ( log_file , encoding = 'utf-8' ) # \u8bbe\u7f6e\u6587\u4ef6\u5904\u7406\u5668\u7ea7\u522b file_handler . setLevel ( logging . INFO ) # \u521b\u5efa\u63a7\u5236\u53f0\u5904\u7406\u5668 console_handler = logging . StreamHandler () # \u8bbe\u7f6e\u63a7\u5236\u53f0\u5904\u7406\u5668\u7ea7\u522b console_handler . setLevel ( logging . INFO ) # \u8bbe\u7f6e\u65e5\u5fd7\u683c\u5f0f formatter = logging . Formatter ( ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) # \u4e3a\u6587\u4ef6\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f file_handler . setFormatter ( formatter ) # \u4e3a\u63a7\u5236\u53f0\u5904\u7406\u5668\u8bbe\u7f6e\u683c\u5f0f console_handler . setFormatter ( formatter ) # \u6dfb\u52a0\u6587\u4ef6\u5904\u7406\u5668 logger . addHandler ( file_handler ) # \u6dfb\u52a0\u63a7\u5236\u53f0\u5904\u7406\u5668 logger . addHandler ( console_handler ) # \u8fd4\u56de\u65e5\u5fd7\u5668 return logger # \u521d\u59cb\u5316\u65e5\u5fd7\u5668 logger = setup_logging ()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#_7","text":"\u65e5\u5fd7\u7ea7\u522b \uff1a\u9ed8\u8ba4\u8bbe\u4e3a INFO \uff0c\u8bb0\u5f55\u5173\u952e\u8fd0\u884c\u4fe1\u606f\u3002 \u53cc\u91cd\u8f93\u51fa \uff1a\u540c\u65f6\u8f93\u51fa\u5230\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u4fbf\u4e8e\u5b9e\u65f6\u76d1\u63a7\u548c\u540e\u7eed\u5206\u6790\u3002 \u683c\u5f0f\u5316 \uff1a\u65e5\u5fd7\u5305\u542b\u65f6\u95f4\u6233\u3001\u540d\u79f0\u3001\u7ea7\u522b\u548c\u5185\u5bb9\uff0c\u4fbf\u4e8e\u95ee\u9898\u5b9a\u4f4d\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/02-%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97.html#_8","text":"base \u6a21\u5757\u4e3aEduRAG\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u6838\u5fc3\u652f\u6301\uff1a \u914d\u7f6e\u7ba1\u7406 \uff1a\u901a\u8fc7 Config \u7c7b\u5b9e\u73b0\u7075\u6d3b\u7684\u53c2\u6570\u914d\u7f6e\u3002 \u65e5\u5fd7\u8bb0\u5f55 \uff1a\u901a\u8fc7 logger \u5b9e\u73b0\u8fd0\u884c\u72b6\u6001\u7684\u5b9e\u65f6\u76d1\u63a7\u548c\u8bb0\u5f55\u3002 \u672c\u7ae0\u5185\u5bb9\u4e3a\u5b66\u4e60\u8005\u7406\u89e3EduRAG\u7cfb\u7edf\u7684\u57fa\u7840\u529f\u80fd\u5960\u5b9a\u4e86\u57fa\u7840\uff0c\u4e3a\u540e\u7eed\u6df1\u5165\u5b66\u4e60\u6838\u5fc3\u903b\u8f91\u63d0\u4f9b\u4e86\u652f\u6301\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97.html","text":"\u6587\u6863\u5904\u7406 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 1.\u4e86\u89e3\u4e0d\u901a\u7c7b\u578b\u6587\u6863\u5904\u7406\u7684\u57fa\u672c\u903b\u8f91\u3002 2.\u638c\u63e1\u6587\u6863\u52a0\u8f7d\u548c\u5206\u5757\u7684\u57fa\u672c\u539f\u7406\u3002 3.1 \u6587\u6863\u89e3\u6790 \u00b6 document_processor.py \u662fEduRAG\u7cfb\u7edf\u7684\u6838\u5fc3\u6a21\u5757\u4e4b\u4e00\uff0c\u7528\u4e8e\u6587\u6863\u89e3\u6790\u3002\u4e3b\u8981\u8d1f\u8d23\u52a0\u8f7d\u591a\u79cd\u683c\u5f0f\u7684\u6587\u6863\uff08\u5982 .txt \u3001 .pdf \u7b49\uff09\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u5206\u5c42\u5207\u5206\uff0c\u751f\u6210\u7236\u5757\u548c\u5b50\u5757\uff0c\u4e3a\u540e\u7eed\u7684\u5411\u91cf\u5b58\u50a8\u548c\u68c0\u7d22\u505a\u597d\u51c6\u5907\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # core/document_processor.py import os from langchain_community.document_loaders import TextLoader from langchain_community.document_loaders.markdown import UnstructuredMarkdownLoader from langchain.text_splitter import MarkdownTextSplitter from datetime import datetime from edu_text_spliter import AliTextSplitter , ChineseRecursiveTextSplitter from edu_document_loaders import OCRPDFLoader , OCRDOCLoader , OCRPPTLoader , OCRIMGLoader from base import logger , Config conf = Config () # \u5b9a\u4e49\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b\u53ca\u5176\u5bf9\u5e94\u7684\u52a0\u8f7d\u5668\u5b57\u5178 document_loaders = { # \u6587\u672c\u6587\u4ef6\u4f7f\u7528 TextLoader \".txt\" : TextLoader , # PDF \u6587\u4ef6\u4f7f\u7528 OCRPDFLoader \".pdf\" : OCRPDFLoader , # Word \u6587\u4ef6\u4f7f\u7528 OCRDOCLoader \".docx\" : OCRDOCLoader , # PPT \u6587\u4ef6\u4f7f\u7528 OCRPPTLoader \".ppt\" : OCRPPTLoader , # PPTX \u6587\u4ef6\u4f7f\u7528 OCRPPTLoader \".pptx\" : OCRPPTLoader , # JPG \u6587\u4ef6\u4f7f\u7528 OCRIMGLoader \".jpg\" : OCRIMGLoader , # PNG \u6587\u4ef6\u4f7f\u7528 OCRIMGLoader \".png\" : OCRIMGLoader , # Markdown \u6587\u4ef6\u4f7f\u7528 UnstructuredMarkdownLoader \".md\" : UnstructuredMarkdownLoader } # \u5b9a\u4e49\u51fd\u6570\uff0c\u4ece\u6307\u5b9a\u6587\u4ef6\u5939\u52a0\u8f7d\u591a\u79cd\u7c7b\u578b\u6587\u4ef6\u5e76\u6dfb\u52a0\u5143\u6570\u636e def load_documents_from_directory ( directory_path ): # \u521d\u59cb\u5316\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u52a0\u8f7d\u7684\u6587\u6863 documents = [] # \u83b7\u53d6\u652f\u6301\u7684\u6587\u4ef6\u6269\u5c55\u540d\u96c6\u5408 supported_extensions = document_loaders . keys () # \u4ece\u76ee\u5f55\u540d\u63d0\u53d6\u5b66\u79d1\u7c7b\u522b\uff08\u5982 \"ai_data\" -> \"ai\"\uff09 source = os . path . basename ( directory_path ) . replace ( \"_data\" , \"\" ) # \u904d\u5386\u6307\u5b9a\u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55 for root , _ , files in os . walk ( directory_path ): # \u904d\u5386\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6 for file in files : # \u6784\u9020\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84 file_path = os . path . join ( root , file ) # \u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d\u5e76\u8f6c\u6362\u4e3a\u5c0f\u5199 file_extension = os . path . splitext ( file_path )[ 1 ] . lower () # \u68c0\u67e5\u6587\u4ef6\u7c7b\u578b\u662f\u5426\u5728\u652f\u6301\u7684\u6269\u5c55\u540d\u5217\u8868\u4e2d if file_extension in supported_extensions : # \u4f7f\u7528 try-except \u6355\u83b7\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684\u5f02\u5e38 try : # \u6839\u636e\u6587\u4ef6\u6269\u5c55\u540d\u83b7\u53d6\u5bf9\u5e94\u7684\u52a0\u8f7d\u5668\u7c7b loader_class = document_loaders [ file_extension ] # \u5b9e\u4f8b\u5316\u52a0\u8f7d\u5668\u5bf9\u8c61\uff0c\u4f20\u5165\u6587\u4ef6\u8def\u5f84 if file_extension == \".txt\" : loader = loader_class ( file_path , encoding = \"utf-8\" ) else : loader = loader_class ( file_path ) # \u8c03\u7528\u52a0\u8f7d\u5668\u52a0\u8f7d\u6587\u6863\u5185\u5bb9\uff0c\u8fd4\u56de\u6587\u6863\u5217\u8868 loaded_docs = loader . load () # \u904d\u5386\u52a0\u8f7d\u7684\u6bcf\u4e2a\u6587\u6863 for doc in loaded_docs : # \u4e3a\u6587\u6863\u6dfb\u52a0\u5b66\u79d1\u7c7b\u522b\u5143\u6570\u636e doc . metadata [ \"source\" ] = source # \u4e3a\u6587\u6863\u6dfb\u52a0\u6587\u4ef6\u8def\u5f84\u5143\u6570\u636e doc . metadata [ \"file_path\" ] = file_path # \u4e3a\u6587\u6863\u6dfb\u52a0\u5f53\u524d\u65f6\u95f4\u6233\u5143\u6570\u636e doc . metadata [ \"timestamp\" ] = datetime . now () . isoformat () # \u5c06\u52a0\u8f7d\u7684\u6587\u6863\u6dfb\u52a0\u5230\u603b\u5217\u8868\u4e2d documents . extend ( loaded_docs ) # \u8bb0\u5f55\u6210\u529f\u52a0\u8f7d\u6587\u4ef6\u7684\u65e5\u5fd7 logger . info ( f \"\u6210\u529f\u52a0\u8f7d\u6587\u4ef6: { file_path } \" ) # \u6355\u83b7\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38 except Exception as e : # \u8bb0\u5f55\u52a0\u8f7d\u5931\u8d25\u7684\u65e5\u5fd7\uff0c\u5305\u542b\u9519\u8bef\u4fe1\u606f logger . error ( f \"\u52a0\u8f7d\u6587\u4ef6 { file_path } \u5931\u8d25: { str ( e ) } \" ) # \u5982\u679c\u6587\u4ef6\u7c7b\u578b\u4e0d\u5728\u652f\u6301\u5217\u8868\u4e2d else : # \u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\uff0c\u63d0\u793a\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b logger . warning ( f \"\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b: { file_path } \" ) # \u8fd4\u56de\u52a0\u8f7d\u7684\u6240\u6709\u6587\u6863\u5217\u8868 return documents # \u5b9a\u4e49\u51fd\u6570\uff0c\u5904\u7406\u6587\u6863\u5e76\u8fdb\u884c\u5206\u5c42\u5207\u5206\uff0c\u8fd4\u56de\u5b50\u5757\u7ed3\u679c def process_documents ( directory_path , parent_chunk_size = conf . PARENT_CHUNK_SIZE , child_chunk_size = conf . CHILD_CHUNK_SIZE , chunk_overlap = conf . CHUNK_OVERLAP ): # \u4ece\u6307\u5b9a\u76ee\u5f55\u52a0\u8f7d\u6240\u6709\u6587\u6863 documents = load_documents_from_directory ( directory_path ) # \u8bb0\u5f55\u52a0\u8f7d\u7684\u6587\u6863\u603b\u6570\u65e5\u5fd7 logger . info ( f \"\u52a0\u8f7d\u7684\u6587\u6863\u6570\u91cf: { len ( documents ) } \" ) # \u521d\u59cb\u5316\u7236\u5757\u548c\u5b50\u5757\u5206\u8bcd\u5668\uff08\u901a\u7528\uff09 parent_splitter = ChineseRecursiveTextSplitter ( chunk_size = parent_chunk_size , chunk_overlap = chunk_overlap ) child_splitter = ChineseRecursiveTextSplitter ( chunk_size = child_chunk_size , chunk_overlap = chunk_overlap ) # \u521d\u59cb\u5316 Markdown \u4e13\u7528\u5206\u8bcd\u5668 markdown_parent_splitter = MarkdownTextSplitter ( chunk_size = parent_chunk_size , chunk_overlap = chunk_overlap ) markdown_child_splitter = MarkdownTextSplitter ( chunk_size = child_chunk_size , chunk_overlap = chunk_overlap ) # \u521d\u59cb\u5316\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u5b50\u5757 child_chunks = [] # \u904d\u5386\u6bcf\u4e2a\u539f\u59cb\u6587\u6863\uff0c\u5e26\u4e0a\u7d22\u5f15 i for i , doc in enumerate ( documents ): # print(doc) # \u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d file_extension = os . path . splitext ( doc . metadata . get ( \"file_path\" , \"\" ))[ 1 ] . lower () # \u9009\u62e9\u5207\u5206\u5668 is_markdown = ( file_extension == \".md\" ) parent_splitter_to_use = markdown_parent_splitter if is_markdown else parent_splitter # print(f'parent_splitter_to_use-->{parent_splitter_to_use}') child_splitter_to_use = markdown_child_splitter if is_markdown else child_splitter logger . info ( f \"\u5904\u7406\u6587\u6863: { doc . metadata [ 'file_path' ] } , \u4f7f\u7528\u5207\u5206\u5668: { 'Markdown' if is_markdown else 'ChineseRecursive' } \" ) # \u4f7f\u7528\u7236\u5757\u5206\u8bcd\u5668\u5c06\u6587\u6863\u5207\u5206\u4e3a\u7236\u5757 parent_docs = parent_splitter_to_use . split_documents ([ doc ]) # \u904d\u5386\u6bcf\u4e2a\u7236\u5757\uff0c\u5e26\u4e0a\u7d22\u5f15 j for j , parent_doc in enumerate ( parent_docs ): # \u4e3a\u7236\u5757\u751f\u6210\u552f\u4e00 ID\uff0c\u683c\u5f0f\u4e3a \"doc_i_parent_j\" parent_id = f \"doc_ { i } _parent_ { j } \" # \u5c06\u7236\u5757 ID \u6dfb\u52a0\u5230\u5143\u6570\u636e parent_doc . metadata [ \"parent_id\" ] = parent_id # \u5c06\u7236\u5757\u5185\u5bb9\u5b58\u50a8\u5230\u5143\u6570\u636e parent_doc . metadata [ \"parent_content\" ] = parent_doc . page_content # \u4f7f\u7528\u5b50\u5757\u5206\u8bcd\u5668\u5c06\u7236\u5757\u5207\u5206\u4e3a\u5b50\u5757 sub_chunks = child_splitter_to_use . split_documents ([ parent_doc ]) # \u904d\u5386\u6bcf\u4e2a\u5b50\u5757\uff0c\u5e26\u4e0a\u7d22\u5f15 k for k , sub_chunk in enumerate ( sub_chunks ): # \u4e3a\u5b50\u5757\u6dfb\u52a0\u7236\u5757 ID \u5230\u5143\u6570\u636e sub_chunk . metadata [ \"parent_id\" ] = parent_id # \u4e3a\u5b50\u5757\u6dfb\u52a0\u7236\u5757\u5185\u5bb9\u5230\u5143\u6570\u636e sub_chunk . metadata [ \"parent_content\" ] = parent_doc . page_content # \u4e3a\u5b50\u5757\u751f\u6210\u552f\u4e00 ID\uff0c\u683c\u5f0f\u4e3a \"parent_id_child_k\" sub_chunk . metadata [ \"id\" ] = f \" { parent_id } _child_ { k } \" # \u5c06\u5b50\u5757\u6dfb\u52a0\u5230\u5b50\u5757\u5217\u8868\u4e2d child_chunks . append ( sub_chunk ) # \u8bb0\u5f55\u5b50\u5757\u603b\u6570\u65e5\u5fd7 logger . info ( f \"\u5b50\u5757\u6570\u91cf: { len ( child_chunks ) } \" ) # \u8fd4\u56de\u6240\u6709\u5b50\u5757\u5217\u8868 return child_chunks if __name__ == '__main__' : chunks = process_documents ( '/Users/ligang/PycharmProjects/LLM/ITCAST_EduRAG/data/ai_data' , conf . PARENT_CHUNK_SIZE , conf . CHILD_CHUNK_SIZE , conf . CHUNK_OVERLAP , ) print ( chunks ) \u8bf4\u660e \u00b6 \u6587\u6863\u52a0\u8f7d \uff1a\u652f\u6301\u591a\u79cd\u683c\u5f0f\uff08\u5982 .txt \u3001 .pdf \uff09\uff0c\u4f7f\u7528\u4e13\u7528\u52a0\u8f7d\u5668\u5904\u7406\u590d\u6742\u6587\u6863\u3002 \u5206\u5c42\u5207\u5206 \uff1a\u91c7\u7528 ChineseRecursiveTextSplitter \u751f\u6210\u7236\u5757\u548c\u5b50\u5757\uff0c\u4f18\u5316\u4e2d\u6587\u6587\u672c\u5904\u7406\u3002 \u5143\u6570\u636e\u7ba1\u7406 \uff1a\u4e3a\u6bcf\u4e2a\u5757\u6dfb\u52a0\u552f\u4e00ID\u3001\u6765\u6e90\u548c\u65f6\u95f4\u6233\uff0c\u4fbf\u4e8e\u68c0\u7d22\u548c\u6eaf\u6e90\u3002 \u603b\u7ed3 \u00b6 document_processor \u6a21\u5757\u4e3aEduRAG\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u6838\u5fc3\u652f\u6301\uff1a \u6587\u6863\u5904\u7406 \uff1a\u5b9e\u73b0\u591a\u683c\u5f0f\u6587\u6863\u7684\u9ad8\u6548\u52a0\u8f7d\u548c\u5206\u5757\u3002 \u56fe\u7247\u6216\u8868\u683c \uff1a\u91c7\u7528paddleOCR\u5b9e\u73b0\u9ad8\u6548\u8bc6\u522b\u3002","title":"4.3 \u6587\u6863\u5904\u7406\u6a21\u5757"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97.html#_1","text":"","title":"\u6587\u6863\u5904\u7406"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97.html#_2","text":"1.\u4e86\u89e3\u4e0d\u901a\u7c7b\u578b\u6587\u6863\u5904\u7406\u7684\u57fa\u672c\u903b\u8f91\u3002 2.\u638c\u63e1\u6587\u6863\u52a0\u8f7d\u548c\u5206\u5757\u7684\u57fa\u672c\u539f\u7406\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97.html#31","text":"document_processor.py \u662fEduRAG\u7cfb\u7edf\u7684\u6838\u5fc3\u6a21\u5757\u4e4b\u4e00\uff0c\u7528\u4e8e\u6587\u6863\u89e3\u6790\u3002\u4e3b\u8981\u8d1f\u8d23\u52a0\u8f7d\u591a\u79cd\u683c\u5f0f\u7684\u6587\u6863\uff08\u5982 .txt \u3001 .pdf \u7b49\uff09\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u5206\u5c42\u5207\u5206\uff0c\u751f\u6210\u7236\u5757\u548c\u5b50\u5757\uff0c\u4e3a\u540e\u7eed\u7684\u5411\u91cf\u5b58\u50a8\u548c\u68c0\u7d22\u505a\u597d\u51c6\u5907\u3002","title":"3.1 \u6587\u6863\u89e3\u6790"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97.html#_3","text":"# core/document_processor.py import os from langchain_community.document_loaders import TextLoader from langchain_community.document_loaders.markdown import UnstructuredMarkdownLoader from langchain.text_splitter import MarkdownTextSplitter from datetime import datetime from edu_text_spliter import AliTextSplitter , ChineseRecursiveTextSplitter from edu_document_loaders import OCRPDFLoader , OCRDOCLoader , OCRPPTLoader , OCRIMGLoader from base import logger , Config conf = Config () # \u5b9a\u4e49\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b\u53ca\u5176\u5bf9\u5e94\u7684\u52a0\u8f7d\u5668\u5b57\u5178 document_loaders = { # \u6587\u672c\u6587\u4ef6\u4f7f\u7528 TextLoader \".txt\" : TextLoader , # PDF \u6587\u4ef6\u4f7f\u7528 OCRPDFLoader \".pdf\" : OCRPDFLoader , # Word \u6587\u4ef6\u4f7f\u7528 OCRDOCLoader \".docx\" : OCRDOCLoader , # PPT \u6587\u4ef6\u4f7f\u7528 OCRPPTLoader \".ppt\" : OCRPPTLoader , # PPTX \u6587\u4ef6\u4f7f\u7528 OCRPPTLoader \".pptx\" : OCRPPTLoader , # JPG \u6587\u4ef6\u4f7f\u7528 OCRIMGLoader \".jpg\" : OCRIMGLoader , # PNG \u6587\u4ef6\u4f7f\u7528 OCRIMGLoader \".png\" : OCRIMGLoader , # Markdown \u6587\u4ef6\u4f7f\u7528 UnstructuredMarkdownLoader \".md\" : UnstructuredMarkdownLoader } # \u5b9a\u4e49\u51fd\u6570\uff0c\u4ece\u6307\u5b9a\u6587\u4ef6\u5939\u52a0\u8f7d\u591a\u79cd\u7c7b\u578b\u6587\u4ef6\u5e76\u6dfb\u52a0\u5143\u6570\u636e def load_documents_from_directory ( directory_path ): # \u521d\u59cb\u5316\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u52a0\u8f7d\u7684\u6587\u6863 documents = [] # \u83b7\u53d6\u652f\u6301\u7684\u6587\u4ef6\u6269\u5c55\u540d\u96c6\u5408 supported_extensions = document_loaders . keys () # \u4ece\u76ee\u5f55\u540d\u63d0\u53d6\u5b66\u79d1\u7c7b\u522b\uff08\u5982 \"ai_data\" -> \"ai\"\uff09 source = os . path . basename ( directory_path ) . replace ( \"_data\" , \"\" ) # \u904d\u5386\u6307\u5b9a\u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55 for root , _ , files in os . walk ( directory_path ): # \u904d\u5386\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6 for file in files : # \u6784\u9020\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84 file_path = os . path . join ( root , file ) # \u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d\u5e76\u8f6c\u6362\u4e3a\u5c0f\u5199 file_extension = os . path . splitext ( file_path )[ 1 ] . lower () # \u68c0\u67e5\u6587\u4ef6\u7c7b\u578b\u662f\u5426\u5728\u652f\u6301\u7684\u6269\u5c55\u540d\u5217\u8868\u4e2d if file_extension in supported_extensions : # \u4f7f\u7528 try-except \u6355\u83b7\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u7684\u5f02\u5e38 try : # \u6839\u636e\u6587\u4ef6\u6269\u5c55\u540d\u83b7\u53d6\u5bf9\u5e94\u7684\u52a0\u8f7d\u5668\u7c7b loader_class = document_loaders [ file_extension ] # \u5b9e\u4f8b\u5316\u52a0\u8f7d\u5668\u5bf9\u8c61\uff0c\u4f20\u5165\u6587\u4ef6\u8def\u5f84 if file_extension == \".txt\" : loader = loader_class ( file_path , encoding = \"utf-8\" ) else : loader = loader_class ( file_path ) # \u8c03\u7528\u52a0\u8f7d\u5668\u52a0\u8f7d\u6587\u6863\u5185\u5bb9\uff0c\u8fd4\u56de\u6587\u6863\u5217\u8868 loaded_docs = loader . load () # \u904d\u5386\u52a0\u8f7d\u7684\u6bcf\u4e2a\u6587\u6863 for doc in loaded_docs : # \u4e3a\u6587\u6863\u6dfb\u52a0\u5b66\u79d1\u7c7b\u522b\u5143\u6570\u636e doc . metadata [ \"source\" ] = source # \u4e3a\u6587\u6863\u6dfb\u52a0\u6587\u4ef6\u8def\u5f84\u5143\u6570\u636e doc . metadata [ \"file_path\" ] = file_path # \u4e3a\u6587\u6863\u6dfb\u52a0\u5f53\u524d\u65f6\u95f4\u6233\u5143\u6570\u636e doc . metadata [ \"timestamp\" ] = datetime . now () . isoformat () # \u5c06\u52a0\u8f7d\u7684\u6587\u6863\u6dfb\u52a0\u5230\u603b\u5217\u8868\u4e2d documents . extend ( loaded_docs ) # \u8bb0\u5f55\u6210\u529f\u52a0\u8f7d\u6587\u4ef6\u7684\u65e5\u5fd7 logger . info ( f \"\u6210\u529f\u52a0\u8f7d\u6587\u4ef6: { file_path } \" ) # \u6355\u83b7\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38 except Exception as e : # \u8bb0\u5f55\u52a0\u8f7d\u5931\u8d25\u7684\u65e5\u5fd7\uff0c\u5305\u542b\u9519\u8bef\u4fe1\u606f logger . error ( f \"\u52a0\u8f7d\u6587\u4ef6 { file_path } \u5931\u8d25: { str ( e ) } \" ) # \u5982\u679c\u6587\u4ef6\u7c7b\u578b\u4e0d\u5728\u652f\u6301\u5217\u8868\u4e2d else : # \u8bb0\u5f55\u8b66\u544a\u65e5\u5fd7\uff0c\u63d0\u793a\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b logger . warning ( f \"\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b: { file_path } \" ) # \u8fd4\u56de\u52a0\u8f7d\u7684\u6240\u6709\u6587\u6863\u5217\u8868 return documents # \u5b9a\u4e49\u51fd\u6570\uff0c\u5904\u7406\u6587\u6863\u5e76\u8fdb\u884c\u5206\u5c42\u5207\u5206\uff0c\u8fd4\u56de\u5b50\u5757\u7ed3\u679c def process_documents ( directory_path , parent_chunk_size = conf . PARENT_CHUNK_SIZE , child_chunk_size = conf . CHILD_CHUNK_SIZE , chunk_overlap = conf . CHUNK_OVERLAP ): # \u4ece\u6307\u5b9a\u76ee\u5f55\u52a0\u8f7d\u6240\u6709\u6587\u6863 documents = load_documents_from_directory ( directory_path ) # \u8bb0\u5f55\u52a0\u8f7d\u7684\u6587\u6863\u603b\u6570\u65e5\u5fd7 logger . info ( f \"\u52a0\u8f7d\u7684\u6587\u6863\u6570\u91cf: { len ( documents ) } \" ) # \u521d\u59cb\u5316\u7236\u5757\u548c\u5b50\u5757\u5206\u8bcd\u5668\uff08\u901a\u7528\uff09 parent_splitter = ChineseRecursiveTextSplitter ( chunk_size = parent_chunk_size , chunk_overlap = chunk_overlap ) child_splitter = ChineseRecursiveTextSplitter ( chunk_size = child_chunk_size , chunk_overlap = chunk_overlap ) # \u521d\u59cb\u5316 Markdown \u4e13\u7528\u5206\u8bcd\u5668 markdown_parent_splitter = MarkdownTextSplitter ( chunk_size = parent_chunk_size , chunk_overlap = chunk_overlap ) markdown_child_splitter = MarkdownTextSplitter ( chunk_size = child_chunk_size , chunk_overlap = chunk_overlap ) # \u521d\u59cb\u5316\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u5b50\u5757 child_chunks = [] # \u904d\u5386\u6bcf\u4e2a\u539f\u59cb\u6587\u6863\uff0c\u5e26\u4e0a\u7d22\u5f15 i for i , doc in enumerate ( documents ): # print(doc) # \u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d file_extension = os . path . splitext ( doc . metadata . get ( \"file_path\" , \"\" ))[ 1 ] . lower () # \u9009\u62e9\u5207\u5206\u5668 is_markdown = ( file_extension == \".md\" ) parent_splitter_to_use = markdown_parent_splitter if is_markdown else parent_splitter # print(f'parent_splitter_to_use-->{parent_splitter_to_use}') child_splitter_to_use = markdown_child_splitter if is_markdown else child_splitter logger . info ( f \"\u5904\u7406\u6587\u6863: { doc . metadata [ 'file_path' ] } , \u4f7f\u7528\u5207\u5206\u5668: { 'Markdown' if is_markdown else 'ChineseRecursive' } \" ) # \u4f7f\u7528\u7236\u5757\u5206\u8bcd\u5668\u5c06\u6587\u6863\u5207\u5206\u4e3a\u7236\u5757 parent_docs = parent_splitter_to_use . split_documents ([ doc ]) # \u904d\u5386\u6bcf\u4e2a\u7236\u5757\uff0c\u5e26\u4e0a\u7d22\u5f15 j for j , parent_doc in enumerate ( parent_docs ): # \u4e3a\u7236\u5757\u751f\u6210\u552f\u4e00 ID\uff0c\u683c\u5f0f\u4e3a \"doc_i_parent_j\" parent_id = f \"doc_ { i } _parent_ { j } \" # \u5c06\u7236\u5757 ID \u6dfb\u52a0\u5230\u5143\u6570\u636e parent_doc . metadata [ \"parent_id\" ] = parent_id # \u5c06\u7236\u5757\u5185\u5bb9\u5b58\u50a8\u5230\u5143\u6570\u636e parent_doc . metadata [ \"parent_content\" ] = parent_doc . page_content # \u4f7f\u7528\u5b50\u5757\u5206\u8bcd\u5668\u5c06\u7236\u5757\u5207\u5206\u4e3a\u5b50\u5757 sub_chunks = child_splitter_to_use . split_documents ([ parent_doc ]) # \u904d\u5386\u6bcf\u4e2a\u5b50\u5757\uff0c\u5e26\u4e0a\u7d22\u5f15 k for k , sub_chunk in enumerate ( sub_chunks ): # \u4e3a\u5b50\u5757\u6dfb\u52a0\u7236\u5757 ID \u5230\u5143\u6570\u636e sub_chunk . metadata [ \"parent_id\" ] = parent_id # \u4e3a\u5b50\u5757\u6dfb\u52a0\u7236\u5757\u5185\u5bb9\u5230\u5143\u6570\u636e sub_chunk . metadata [ \"parent_content\" ] = parent_doc . page_content # \u4e3a\u5b50\u5757\u751f\u6210\u552f\u4e00 ID\uff0c\u683c\u5f0f\u4e3a \"parent_id_child_k\" sub_chunk . metadata [ \"id\" ] = f \" { parent_id } _child_ { k } \" # \u5c06\u5b50\u5757\u6dfb\u52a0\u5230\u5b50\u5757\u5217\u8868\u4e2d child_chunks . append ( sub_chunk ) # \u8bb0\u5f55\u5b50\u5757\u603b\u6570\u65e5\u5fd7 logger . info ( f \"\u5b50\u5757\u6570\u91cf: { len ( child_chunks ) } \" ) # \u8fd4\u56de\u6240\u6709\u5b50\u5757\u5217\u8868 return child_chunks if __name__ == '__main__' : chunks = process_documents ( '/Users/ligang/PycharmProjects/LLM/ITCAST_EduRAG/data/ai_data' , conf . PARENT_CHUNK_SIZE , conf . CHILD_CHUNK_SIZE , conf . CHUNK_OVERLAP , ) print ( chunks )","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97.html#_4","text":"\u6587\u6863\u52a0\u8f7d \uff1a\u652f\u6301\u591a\u79cd\u683c\u5f0f\uff08\u5982 .txt \u3001 .pdf \uff09\uff0c\u4f7f\u7528\u4e13\u7528\u52a0\u8f7d\u5668\u5904\u7406\u590d\u6742\u6587\u6863\u3002 \u5206\u5c42\u5207\u5206 \uff1a\u91c7\u7528 ChineseRecursiveTextSplitter \u751f\u6210\u7236\u5757\u548c\u5b50\u5757\uff0c\u4f18\u5316\u4e2d\u6587\u6587\u672c\u5904\u7406\u3002 \u5143\u6570\u636e\u7ba1\u7406 \uff1a\u4e3a\u6bcf\u4e2a\u5757\u6dfb\u52a0\u552f\u4e00ID\u3001\u6765\u6e90\u548c\u65f6\u95f4\u6233\uff0c\u4fbf\u4e8e\u68c0\u7d22\u548c\u6eaf\u6e90\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/03-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97.html#_5","text":"document_processor \u6a21\u5757\u4e3aEduRAG\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u6838\u5fc3\u652f\u6301\uff1a \u6587\u6863\u5904\u7406 \uff1a\u5b9e\u73b0\u591a\u683c\u5f0f\u6587\u6863\u7684\u9ad8\u6548\u52a0\u8f7d\u548c\u5206\u5757\u3002 \u56fe\u7247\u6216\u8868\u683c \uff1a\u91c7\u7528paddleOCR\u5b9e\u73b0\u9ad8\u6548\u8bc6\u522b\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html","text":"\u5411\u91cf\u5b58\u50a8 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 1.\u7406\u89e3\u5411\u91cf\u5b58\u50a8\u5728RAG\u7cfb\u7edf\u4e2d\u7684\u529f\u80fd\u548c\u91cd\u8981\u6027\u3002 2.\u5b66\u4f1a\u521b\u5efa\u548c\u7ba1\u7406\u5411\u91cf\u6570\u636e\u5e93\u3002 3.\u638c\u63e1\u5982\u4f55\u5c06\u6587\u672c\u8f6c\u5316\u4e3a\u5411\u91cf\u5e76\u5b58\u5165\u6570\u636e\u5e93\u3002 4.\u7406\u89e3\u6df7\u5408\u68c0\u7d22\u4e0e\u91cd\u6392\u5e8f\u7684\u5b9e\u73b0\u539f\u7406\u3002 vector_store.py \u662fEduRAG\u7cfb\u7edf\u7684\u6838\u5fc3\u6a21\u5757\u4e4b\u4e00\uff0c\u5c01\u88c5\u4e86\u4e0eMilvus\u5411\u91cf\u6570\u636e\u5e93\u7684\u4ea4\u4e92\u903b\u8f91\u3002\u5b83\u8d1f\u8d23\u5c06\u6587\u6863\u8f6c\u5316\u4e3a\u5411\u91cf\u5b58\u50a8\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u6df7\u5408\u68c0\u7d22\u529f\u80fd\u3002\u901a\u8fc7\u7ed3\u5408BGE-M3\u5d4c\u5165\u6a21\u578b\u548c\u91cd\u6392\u5e8f\u673a\u5236\uff0c\u8be5\u6a21\u5757\u786e\u4fdd\u7cfb\u7edf\u80fd\u591f\u5feb\u901f\u68c0\u7d22\u5230\u4e0e\u7528\u6237\u67e5\u8be2\u6700\u76f8\u5173\u7684\u6587\u6863\u3002 4.1 \u6a21\u5757\u529f\u80fd\u6982\u8ff0 \u00b6 VectorStore \u7c7b\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u4e3b\u8981\u529f\u80fd\uff1a \u521d\u59cb\u5316\u4e0e\u96c6\u5408\u7ba1\u7406 \uff1a\u521b\u5efa\u6216\u52a0\u8f7dMilvus\u5411\u91cf\u6570\u636e\u5e93\u96c6\u5408\u3002 \u6587\u6863\u5411\u91cf\u5316\u4e0e\u5b58\u50a8 \uff1a\u5c06\u5206\u5757\u540e\u7684\u6587\u6863\u8f6c\u6362\u4e3a\u5411\u91cf\u5e76\u5b58\u50a8\u3002 \u6df7\u5408\u68c0\u7d22\u4e0e\u91cd\u6392\u5e8f \uff1a\u7ed3\u5408\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u8fdb\u884c\u68c0\u7d22\uff0c\u5e76\u901a\u8fc7\u91cd\u6392\u5e8f\u4f18\u5316\u7ed3\u679c\u3002 \u4ee5\u4e0b\u5c06\u9010\u4e00\u8bb2\u89e3\u6bcf\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002 \u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u5305 \u00b6 # \u5bfc\u5165 BGE-M3 \u5d4c\u5165\u51fd\u6570\uff0c\u7528\u4e8e\u751f\u6210\u6587\u6863\u548c\u67e5\u8be2\u7684\u5411\u91cf\u8868\u793a from milvus_model.hybrid import BGEM3EmbeddingFunction # \u5bfc\u5165 Milvus \u76f8\u5173\u7c7b\uff0c\u7528\u4e8e\u64cd\u4f5c\u5411\u91cf\u6570\u636e\u5e93 from pymilvus import MilvusClient , DataType , AnnSearchRequest , WeightedRanker # \u5bfc\u5165 Document \u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u6587\u6863\u5bf9\u8c61 from langchain.docstore.document import Document # \u5bfc\u5165 CrossEncoder\uff0c\u7528\u4e8e\u91cd\u6392\u5e8f\u548c NLI \u5224\u65ad from sentence_transformers import CrossEncoder # \u5bfc\u5165 hashlib \u6a21\u5757\uff0c\u7528\u4e8e\u751f\u6210\u552f\u4e00 ID \u7684\u54c8\u5e0c\u503c import hashlib from base import logger , Config conf = Config () 4.2 \u521d\u59cb\u5316\u65b9\u6cd5 \u00b6 \u529f\u80fd \u00b6 __init__ \u65b9\u6cd5\u521d\u59cb\u5316 VectorStore \u7c7b\u7684\u5b9e\u4f8b\uff0c\u8bbe\u7f6e\u57fa\u672c\u53c2\u6570\u5e76\u8c03\u7528\u96c6\u5408\u521b\u5efa\u6216\u52a0\u8f7d\u65b9\u6cd5\u3002 \u4ee3\u7801\u793a\u4f8b \u00b6 # core/vector_store.py # \u5b9a\u4e49 VectorStore \u7c7b\uff0c\u5c01\u88c5\u5411\u91cf\u5b58\u50a8\u548c\u68c0\u7d22\u529f\u80fd class VectorStore : # \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u5411\u91cf\u5b58\u50a8\u7684\u57fa\u672c\u53c2\u6570 def __init__ ( self , collection_name = conf . MILVUS_COLLECTION_NAME , host = conf . MILVUS_HOST , port = conf . MILVUS_PORT , database = conf . MILVUS_DATABASE_NAME ): # \u8bbe\u7f6e Milvus \u96c6\u5408\u540d\u79f0 self . collection_name = collection_name # \u8bbe\u7f6e Milvus \u4e3b\u673a\u5730\u5740 self . host = host # \u8bbe\u7f6e Milvus \u7aef\u53e3\u53f7 self . port = port # \u8bbe\u7f6e Milvus \u6570\u636e\u5e93\u540d\u79f0 self . database = database # \u8bbe\u7f6e\u65e5\u5fd7\u8bb0\u5f55\u5668 self . logger = logger # \u521d\u59cb\u5316 BGE-Reranker \u6a21\u578b\uff0c\u7528\u4e8e\u91cd\u6392\u5e8f\u68c0\u7d22\u7ed3\u679c self . reranker = CrossEncoder ( \"./bge/bge-reranker-large\" ) # \u521d\u59cb\u5316 BGE-M3 \u5d4c\u5165\u51fd\u6570\uff0c\u4f7f\u7528 CPU \u8bbe\u5907\uff0c\u4e0d\u542f\u7528 FP16 self . embedding_function = BGEM3EmbeddingFunction ( use_fp16 = False , device = \"cpu\" ) # \u83b7\u53d6\u7a20\u5bc6\u5411\u91cf\u7684\u7ef4\u5ea6 self . dense_dim = self . embedding_function . dim [ \"dense\" ] # \u521d\u59cb\u5316 Milvus \u5ba2\u6237\u7aef\uff0c\u8fde\u63a5\u5230\u6307\u5b9a\u4e3b\u673a\u548c\u6570\u636e\u5e93 self . client = MilvusClient ( uri = f \"http:// { self . host } : { self . port } \" , db_name = self . database ) # \u8c03\u7528\u65b9\u6cd5\u521b\u5efa\u6216\u52a0\u8f7d Milvus \u96c6\u5408 self . _create_or_load_collection () \u5b9e\u73b0\u6b65\u9aa4 \u00b6 \u53c2\u6570\u8bbe\u7f6e \uff1a \u4f7f\u7528 Config \u4e2d\u7684\u9ed8\u8ba4\u503c\u521d\u59cb\u5316\u96c6\u5408\u540d\u79f0\u3001\u4e3b\u673a\u3001\u7aef\u53e3\u548c\u6570\u636e\u5e93\u540d\u79f0\u3002 \u6a21\u578b\u521d\u59cb\u5316 \uff1a reranker \uff1a\u52a0\u8f7dBGE-Reranker\u6a21\u578b\uff0c\u7528\u4e8e\u540e\u7eed\u91cd\u6392\u5e8f\u3002 embedding_function \uff1a\u521d\u59cb\u5316BGE-M3\u5d4c\u5165\u6a21\u578b\uff0c\u7981\u7528FP16\uff0c\u4f7f\u7528CPU\u8fd0\u884c\u3002 dense_dim \uff1a\u83b7\u53d6\u7a20\u5bc6\u5411\u91cf\u7684\u7ef4\u5ea6\u3002 \u5ba2\u6237\u7aef\u8fde\u63a5 \uff1a \u521b\u5efa MilvusClient \u5b9e\u4f8b\uff0c\u8fde\u63a5\u5230\u6307\u5b9a\u4e3b\u673a\u548c\u6570\u636e\u5e93\u3002 \u96c6\u5408\u7ba1\u7406 \uff1a \u8c03\u7528 _create_or_load_collection \u65b9\u6cd5\uff0c\u786e\u4fdd\u96c6\u5408\u53ef\u7528\u3002 \u8bf4\u660e \u00b6 BGE-M3\u6a21\u578b \uff1a\u63d0\u4f9b\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u751f\u6210\u80fd\u529b\u3002 \u7075\u6d3b\u6027 \uff1a\u901a\u8fc7\u53c2\u6570\u652f\u6301\u81ea\u5b9a\u4e49\u914d\u7f6e\u3002 4.3 \u521b\u5efa\u6216\u52a0\u8f7d\u96c6\u5408 \u00b6 \u529f\u80fd \u00b6 _create_or_load_collection \u65b9\u6cd5\u68c0\u67e5\u5e76\u521b\u5efa\u6216\u52a0\u8f7dMilvus\u96c6\u5408\uff0c\u5b9a\u4e49\u5b57\u6bb5\u7ed3\u6784\u548c\u7d22\u5f15\u53c2\u6570\u3002 \u4ee3\u7801\u793a\u4f8b \u00b6 # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u521b\u5efa\u6216\u52a0\u8f7d Milvus \u96c6\u5408 def _create_or_load_collection ( self ): # \u68c0\u67e5\u6307\u5b9a\u96c6\u5408\u662f\u5426\u5df2\u5b58\u5728 if not self . client . has_collection ( self . collection_name ): # \u521b\u5efa\u96c6\u5408 Schema\uff0c\u7981\u7528\u81ea\u52a8 ID\uff0c\u542f\u7528\u52a8\u6001\u5b57\u6bb5 schema = self . client . create_schema ( auto_id = False , enable_dynamic_field = True ) # \u6dfb\u52a0 ID \u5b57\u6bb5\uff0c\u4f5c\u4e3a\u4e3b\u952e\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 100 schema . add_field ( field_name = \"id\" , datatype = DataType . VARCHAR , is_primary = True , max_length = 100 ) # \u6dfb\u52a0\u6587\u672c\u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 65535 schema . add_field ( field_name = \"text\" , datatype = DataType . VARCHAR , max_length = 65535 ) # \u6dfb\u52a0\u7a20\u5bc6\u5411\u91cf\u5b57\u6bb5\uff0cFLOAT_VECTOR \u7c7b\u578b\uff0c\u7ef4\u5ea6\u7531\u5d4c\u5165\u51fd\u6570\u6307\u5b9a schema . add_field ( field_name = \"dense_vector\" , datatype = DataType . FLOAT_VECTOR , dim = self . dense_dim ) # \u6dfb\u52a0\u7a00\u758f\u5411\u91cf\u5b57\u6bb5\uff0cSPARSE_FLOAT_VECTOR \u7c7b\u578b schema . add_field ( field_name = \"sparse_vector\" , datatype = DataType . SPARSE_FLOAT_VECTOR ) # \u6dfb\u52a0\u7236\u5757 ID \u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 100 schema . add_field ( field_name = \"parent_id\" , datatype = DataType . VARCHAR , max_length = 100 ) # \u6dfb\u52a0\u7236\u5757\u5185\u5bb9\u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 65535 schema . add_field ( field_name = \"parent_content\" , datatype = DataType . VARCHAR , max_length = 65535 ) # \u6dfb\u52a0\u5b66\u79d1\u7c7b\u522b\u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 50 schema . add_field ( field_name = \"source\" , datatype = DataType . VARCHAR , max_length = 50 ) # \u6dfb\u52a0\u65f6\u95f4\u6233\u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 50 schema . add_field ( field_name = \"timestamp\" , datatype = DataType . VARCHAR , max_length = 50 ) # \u521b\u5efa\u7d22\u5f15\u53c2\u6570\u5bf9\u8c61 index_params = self . client . prepare_index_params () # \u4e3a\u7a20\u5bc6\u5411\u91cf\u5b57\u6bb5\u6dfb\u52a0 IVF_FLAT \u7d22\u5f15\uff0c\u5ea6\u91cf\u7c7b\u578b\u4e3a\u5185\u79ef (IP) index_params . add_index ( field_name = \"dense_vector\" , index_name = \"dense_index\" , index_type = \"IVF_FLAT\" , metric_type = \"IP\" , params = { \"nlist\" : 128 } ) # \u4e3a\u7a00\u758f\u5411\u91cf\u5b57\u6bb5\u6dfb\u52a0 SPARSE_INVERTED_INDEX \u7d22\u5f15\uff0c\u5ea6\u91cf\u7c7b\u578b\u4e3a\u5185\u79ef (IP) index_params . add_index ( field_name = \"sparse_vector\" , index_name = \"sparse_index\" , index_type = \"SPARSE_INVERTED_INDEX\" , metric_type = \"IP\" , params = { \"drop_ratio_build\" : 0.2 } ) # \u521b\u5efa Milvus \u96c6\u5408\uff0c\u5e94\u7528\u5b9a\u4e49\u7684 Schema \u548c\u7d22\u5f15\u53c2\u6570 self . client . create_collection ( collection_name = self . collection_name , schema = schema , index_params = index_params ) # \u8bb0\u5f55\u521b\u5efa\u96c6\u5408\u7684\u65e5\u5fd7 logger . info ( f \"\u5df2\u521b\u5efa\u96c6\u5408 { self . collection_name } \" ) # \u5982\u679c\u96c6\u5408\u5df2\u5b58\u5728 else : # \u8bb0\u5f55\u52a0\u8f7d\u96c6\u5408\u7684\u65e5\u5fd7 logger . info ( f \"\u5df2\u52a0\u8f7d\u96c6\u5408 { self . collection_name } \" ) # \u5c06\u96c6\u5408\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u786e\u4fdd\u53ef\u7acb\u5373\u67e5\u8be2 self . client . load_collection ( self . collection_name ) \u5b9e\u73b0\u6b65\u9aa4 \u00b6 \u68c0\u67e5\u96c6\u5408\u662f\u5426\u5b58\u5728 \uff1a \u4f7f\u7528 has_collection \u5224\u65ad\u662f\u5426\u9700\u8981\u521b\u5efa\u65b0\u96c6\u5408\u3002 \u5b9a\u4e49Schema \uff1a \u8bbe\u7f6e\u5b57\u6bb5\uff1a\u5305\u62ec id \uff08\u4e3b\u952e\uff09\u3001 text \uff08\u539f\u6587\uff09\u3001\u5411\u91cf\u5b57\u6bb5\u548c\u5143\u6570\u636e\u5b57\u6bb5\u3002 \u7981\u7528\u81ea\u52a8ID\uff0c\u542f\u7528\u52a8\u6001\u5b57\u6bb5\u3002 \u521b\u5efa\u7d22\u5f15 \uff1a \u7a20\u5bc6\u5411\u91cf\u4f7f\u7528 IVF_FLAT \u7d22\u5f15\uff0c\u7a00\u758f\u5411\u91cf\u4f7f\u7528 SPARSE_INVERTED_INDEX \u3002 \u521b\u5efa\u5e76\u52a0\u8f7d\u96c6\u5408 \uff1a \u8c03\u7528 create_collection \u521b\u5efa\u96c6\u5408\uff0c\u5e76\u52a0\u8f7d\u5230\u5185\u5b58\u3002 \u8bf4\u660e \u00b6 \u5b57\u6bb5\u8bbe\u8ba1 \uff1a\u652f\u6301\u591a\u79cd\u6570\u636e\u7c7b\u578b\u548c\u5143\u6570\u636e\u7ba1\u7406\u3002 \u7d22\u5f15\u4f18\u5316 \uff1a\u5e73\u8861\u68c0\u7d22\u901f\u5ea6\u548c\u7cbe\u5ea6\u3002 4.4 \u6dfb\u52a0\u6587\u6863 \u00b6 \u529f\u80fd \u00b6 add_documents \u65b9\u6cd5\u5c06\u5206\u5757\u540e\u7684\u6587\u6863\u8f6c\u6362\u4e3a\u5411\u91cf\u5e76\u5b58\u50a8\u5230Milvus\u96c6\u5408\u4e2d\u3002 \u4ee3\u7801\u793a\u4f8b \u00b6 # \u5b9a\u4e49\u65b9\u6cd5\uff0c\u5411\u5411\u91cf\u5b58\u50a8\u6dfb\u52a0\u6587\u6863 def add_documents ( self , documents ): # \u63d0\u53d6\u6240\u6709\u6587\u6863\u7684\u5185\u5bb9\u5217\u8868 texts = [ doc . page_content for doc in documents ] # \u4f7f\u7528 BGE-M3 \u5d4c\u5165\u51fd\u6570\u751f\u6210\u6587\u6863\u7684\u5d4c\u5165 embeddings = self . embedding_function ( texts ) # \u521d\u59cb\u5316\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u63d2\u5165\u7684\u6570\u636e data = [] # \u904d\u5386\u6bcf\u4e2a\u6587\u6863\uff0c\u5e26\u4e0a\u7d22\u5f15 i for i , doc in enumerate ( documents ): # \u751f\u6210\u6587\u6863\u5185\u5bb9\u7684 MD5 \u54c8\u5e0c\u503c\uff0c\u4f5c\u4e3a\u552f\u4e00 ID text_hash = hashlib . md5 ( doc . page_content . encode ( 'utf-8' )) . hexdigest () # \u521d\u59cb\u5316\u7a00\u758f\u5411\u91cf\u5b57\u5178 sparse_vector = {} # \u83b7\u53d6\u7b2c i \u884c\u7684\u7a00\u758f\u5411\u91cf\u6570\u636e row = embeddings [ \"sparse\" ] . getrow ( i ) # \u83b7\u53d6\u7a00\u758f\u5411\u91cf\u7684\u975e\u96f6\u503c\u7d22\u5f15 indices = row . indices # \u83b7\u53d6\u7a00\u758f\u5411\u91cf\u7684\u975e\u96f6\u503c values = row . data # \u5c06\u7d22\u5f15\u548c\u503c\u914d\u5bf9\uff0c\u586b\u5145\u7a00\u758f\u5411\u91cf\u5b57\u5178 for idx , value in zip ( indices , values ): sparse_vector [ idx ] = value # \u521b\u5efa\u6570\u636e\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u5b57\u6bb5 data . append ({ \"id\" : text_hash , \"text\" : doc . page_content , \"dense_vector\" : embeddings [ \"dense\" ][ i ], \"sparse_vector\" : sparse_vector , \"parent_id\" : doc . metadata [ \"parent_id\" ], \"parent_content\" : doc . metadata [ \"parent_content\" ], \"source\" : doc . metadata . get ( \"source\" , \"unknown\" ), \"timestamp\" : doc . metadata . get ( \"timestamp\" , \"unknown\" ) }) # \u68c0\u67e5\u662f\u5426\u6709\u6570\u636e\u9700\u8981\u63d2\u5165 if data : # \u4f7f\u7528 upsert \u64cd\u4f5c\u63d2\u5165\u6570\u636e\uff0c\u8986\u76d6\u91cd\u590d ID self . client . upsert ( collection_name = self . collection_name , data = data ) # \u8bb0\u5f55\u63d2\u5165\u6216\u66f4\u65b0\u7684\u6587\u6863\u6570\u91cf\u65e5\u5fd7 logger . info ( f \"\u5df2\u63d2\u5165\u6216\u66f4\u65b0 { len ( data ) } \u4e2a\u6587\u6863\" ) \u5b9e\u73b0\u6b65\u9aa4 \u00b6 \u63d0\u53d6\u6587\u672c \uff1a \u4ece\u6587\u6863\u5bf9\u8c61\u4e2d\u63d0\u53d6\u6587\u672c\u5185\u5bb9\u3002 \u751f\u6210\u5411\u91cf \uff1a \u4f7f\u7528BGE-M3\u6a21\u578b\u751f\u6210\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u3002 \u6784\u9020\u6570\u636e \uff1a \u4e3a\u6bcf\u7bc7\u6587\u6863\u751f\u6210\u552f\u4e00ID\uff08MD5\u54c8\u5e0c\uff09\u3002 \u5c06\u5411\u91cf\u548c\u5143\u6570\u636e\u7ec4\u7ec7\u6210\u5b57\u5178\u3002 \u5b58\u50a8\u6570\u636e \uff1a \u4f7f\u7528 upsert \u64cd\u4f5c\u63d2\u5165\u6216\u66f4\u65b0\u6570\u636e\u3002 \u8bf4\u660e \u00b6 \u552f\u4e00\u6027 \uff1a\u901a\u8fc7MD5\u54c8\u5e0c\u786e\u4fddID\u552f\u4e00\u3002 \u7a00\u758f\u5411\u91cf\u5904\u7406 \uff1a\u5c06\u7a00\u758f\u77e9\u9635\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002 4.5 \u6df7\u5408\u68c0\u7d22\u4e0e\u91cd\u6392\u5e8f \u00b6 \u529f\u80fd \u00b6 hybrid_search_with_rerank \u65b9\u6cd5\u5b9e\u73b0\u6df7\u5408\u68c0\u7d22\u5e76\u91cd\u6392\u5e8f\uff0c\u8fd4\u56de\u6700\u76f8\u5173\u6587\u6863\u3002 \u4ee3\u7801\u793a\u4f8b \u00b6 # \u5b9a\u4e49\u65b9\u6cd5\uff0c\u6267\u884c\u6df7\u5408\u68c0\u7d22\u5e76\u91cd\u6392\u5e8f def hybrid_search_with_rerank ( self , query , k = conf . RETRIEVAL_K , source_filter = None ): # \u4f7f\u7528 BGE-M3 \u5d4c\u5165\u51fd\u6570\u751f\u6210\u67e5\u8be2\u7684\u5d4c\u5165 query_embeddings = self . embedding_function ([ query ]) # \u83b7\u53d6\u67e5\u8be2\u7684\u7a20\u5bc6\u5411\u91cf dense_query_vector = query_embeddings [ \"dense\" ][ 0 ] # \u521d\u59cb\u5316\u67e5\u8be2\u7684\u7a00\u758f\u5411\u91cf\u5b57\u5178 sparse_query_vector = {} # \u83b7\u53d6\u67e5\u8be2\u7a00\u758f\u5411\u91cf\u7684\u7b2c 0 \u884c\u6570\u636e row = query_embeddings [ \"sparse\" ] . getrow ( 0 ) # \u83b7\u53d6\u7a00\u758f\u5411\u91cf\u7684\u975e\u96f6\u503c\u7d22\u5f15 indices = row . indices # \u83b7\u53d6\u7a00\u758f\u5411\u91cf\u7684\u975e\u96f6\u503c values = row . data # \u5c06\u7d22\u5f15\u548c\u503c\u914d\u5bf9\uff0c\u586b\u5145\u7a00\u758f\u5411\u91cf\u5b57\u5178 for idx , value in zip ( indices , values ): sparse_query_vector [ idx ] = value # \u521d\u59cb\u5316\u8fc7\u6ee4\u8868\u8fbe\u5f0f\uff0c\u9ed8\u8ba4\u4e0d\u8fc7\u6ee4 filter_expr = f \"source == ' { source_filter } '\" if source_filter else \"\" # \u521b\u5efa\u7a20\u5bc6\u5411\u91cf\u641c\u7d22\u8bf7\u6c42 dense_request = AnnSearchRequest ( data = [ dense_query_vector ], anns_field = \"dense_vector\" , param = { \"metric_type\" : \"IP\" , \"params\" : { \"nprobe\" : 10 }}, limit = k , expr = filter_expr ) # \u521b\u5efa\u7a00\u758f\u5411\u91cf\u641c\u7d22\u8bf7\u6c42 sparse_request = AnnSearchRequest ( data = [ sparse_query_vector ], anns_field = \"sparse_vector\" , param = { \"metric_type\" : \"IP\" , \"params\" : {}}, limit = k , expr = filter_expr ) # \u521b\u5efa\u52a0\u6743\u6392\u5e8f\u5668\uff0c\u7a00\u758f\u5411\u91cf\u6743\u91cd 0.7\uff0c\u7a20\u5bc6\u5411\u91cf\u6743\u91cd 1.0 ranker = WeightedRanker ( 0.7 , 1.0 ) # \u6267\u884c\u6df7\u5408\u641c\u7d22\uff0c\u8fd4\u56de Top-K \u7ed3\u679c results = self . client . hybrid_search ( collection_name = self . collection_name , reqs = [ dense_request , sparse_request ], ranker = ranker , limit = k , output_fields = [ \"text\" , \"parent_id\" , \"parent_content\" , \"source\" , \"timestamp\" ] )[ 0 ] # \u5c06\u641c\u7d22\u7ed3\u679c\u8f6c\u6362\u4e3a Document \u5bf9\u8c61\u5217\u8868 sub_chunks = [ self . _doc_from_hit ( hit [ \"entity\" ]) for hit in results ] print ( f 'sub_chunks--> { len ( sub_chunks ) } ' ) # \u4ece\u5b50\u5757\u4e2d\u63d0\u53d6\u53bb\u91cd\u7684\u7236\u6587\u6863 parent_docs = self . _get_unique_parent_docs ( sub_chunks ) # \u5982\u679c\u53ea\u67091\u4e2a\u6587\u6863\uff0c\u76f4\u63a5\u8fd4\u56de\u8df3\u8fc7\u91cd\u6392\u5e8f if len ( parent_docs ) < 2 : return parent_docs [: conf . CANDIDATE_M ] # \u5982\u679c\u6709\u7236\u6587\u6863\uff0c\u8fdb\u884c\u91cd\u6392\u5e8f if parent_docs : # \u521b\u5efa\u67e5\u8be2\u4e0e\u6587\u6863\u5185\u5bb9\u7684\u914d\u5bf9\u5217\u8868 pairs = [[ query , doc . page_content ] for doc in parent_docs ] # \u4f7f\u7528 BGE-Reranker \u8ba1\u7b97\u6bcf\u4e2a\u914d\u5bf9\u7684\u5f97\u5206 scores = self . reranker . predict ( pairs ) # \u6839\u636e\u5f97\u5206\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u6587\u6863 ranked_parent_docs = [ doc for _ , doc in sorted ( zip ( scores , parent_docs ), reverse = True )] # \u5982\u679c\u6ca1\u6709\u7236\u6587\u6863\uff0c\u8fd4\u56de\u7a7a\u5217\u8868 else : ranked_parent_docs = [] # \u8fd4\u56de\u524d k \u4e2a\u91cd\u6392\u5e8f\u540e\u7684\u6587\u6863 return ranked_parent_docs [: conf . CANDIDATE_M ] \u5b9e\u73b0\u6b65\u9aa4 \u00b6 \u751f\u6210\u67e5\u8be2\u5411\u91cf \uff1a \u4f7f\u7528BGE-M3\u751f\u6210\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u3002 \u6784\u9020\u68c0\u7d22\u8bf7\u6c42 \uff1a \u4e3a\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u5206\u522b\u521b\u5efa AnnSearchRequest \u3002 \u6df7\u5408\u68c0\u7d22 \uff1a \u4f7f\u7528 WeightedRanker \u878d\u5408\u7ed3\u679c\u3002 \u91cd\u6392\u5e8f \uff1a \u4f7f\u7528 CrossEncoder \u91cd\u65b0\u6392\u5e8f\u7236\u6587\u6863\u3002 \u8bf4\u660e \u00b6 \u6df7\u5408\u68c0\u7d22 \uff1a\u63d0\u5347\u8986\u76d6\u7387\u548c\u51c6\u786e\u6027\u3002 \u91cd\u6392\u5e8f \uff1a\u786e\u4fdd\u6700\u76f8\u5173\u6587\u6863\u4f18\u5148\u3002 4.6 \u83b7\u53d6\u552f\u4e00\u7236\u6587\u6863 \u00b6 \u529f\u80fd \u00b6 _get_unique_parent_docs \u65b9\u6cd5\u4ece\u5b50\u5757\u4e2d\u63d0\u53d6\u53bb\u91cd\u7684\u7236\u6587\u6863\u3002 \u4ee3\u7801\u793a\u4f8b \u00b6 # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4ece\u5b50\u5757\u4e2d\u63d0\u53d6\u53bb\u91cd\u7684\u7236\u6587\u6863 def _get_unique_parent_docs ( self , sub_chunks ): # \u521d\u59cb\u5316\u96c6\u5408\uff0c\u7528\u4e8e\u5b58\u50a8\u5df2\u5904\u7406\u7684\u7236\u5757\u5185\u5bb9\uff08\u53bb\u91cd\uff09 parent_contents = set () # \u521d\u59cb\u5316\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u552f\u4e00\u7236\u6587\u6863 unique_docs = [] # \u904d\u5386\u6240\u6709\u5b50\u5757 for chunk in sub_chunks : # \u83b7\u53d6\u5b50\u5757\u7684\u7236\u5757\u5185\u5bb9\uff0c\u9ed8\u8ba4\u4e3a\u5b50\u5757\u5185\u5bb9 parent_content = chunk . metadata . get ( \"parent_content\" , chunk . page_content ) # \u68c0\u67e5\u7236\u5757\u5185\u5bb9\u662f\u5426\u975e\u7a7a\u4e14\u672a\u91cd\u590d if parent_content and parent_content not in parent_contents : # \u521b\u5efa\u65b0\u7684 Document \u5bf9\u8c61\uff0c\u5305\u542b\u7236\u5757\u5185\u5bb9\u548c\u5143\u6570\u636e unique_docs . append ( Document ( page_content = parent_content , metadata = chunk . metadata )) # \u5c06\u7236\u5757\u5185\u5bb9\u6dfb\u52a0\u5230\u53bb\u91cd\u96c6\u5408 parent_contents . add ( parent_content ) # \u8fd4\u56de\u53bb\u91cd\u540e\u7684\u7236\u6587\u6863\u5217\u8868 return unique_docs \u5b9e\u73b0\u6b65\u9aa4 \u00b6 \u53bb\u91cd \uff1a \u4f7f\u7528\u96c6\u5408\u8bb0\u5f55\u5df2\u5904\u7406\u7684\u7236\u5185\u5bb9\u3002 \u6784\u9020\u6587\u6863 \uff1a \u521b\u5efa\u5305\u542b\u7236\u5185\u5bb9\u7684 Document \u5bf9\u8c61\u3002 \u8bf4\u660e \u00b6 \u53bb\u91cd\u903b\u8f91 \uff1a\u907f\u514d\u91cd\u590d\u7236\u6587\u6863\u3002 \u5143\u6570\u636e\u4fdd\u7559 \uff1a\u4fdd\u6301\u5b8c\u6574\u6027\u3002 4.7 \u4ece\u67e5\u8be2\u7ed3\u679c\u521b\u5efa\u6587\u6863 \u00b6 \u529f\u80fd \u00b6 _doc_from_hit \u65b9\u6cd5\u5c06Milvus\u67e5\u8be2\u7ed3\u679c\u8f6c\u6362\u4e3a Document \u5bf9\u8c61\u3002 \u4ee3\u7801\u793a\u4f8b \u00b6 # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4ece Milvus \u67e5\u8be2\u7ed3\u679c\u521b\u5efa Document \u5bf9\u8c61 def _doc_from_hit ( self , hit ): # \u521b\u5efa\u5e76\u8fd4\u56de Document \u5bf9\u8c61\uff0c\u586b\u5145\u5185\u5bb9\u548c\u5143\u6570\u636e return Document ( page_content = hit . get ( \"text\" ), metadata = { \"parent_id\" : hit . get ( \"parent_id\" ), \"parent_content\" : hit . get ( \"parent_content\" ), \"source\" : hit . get ( \"source\" ), \"timestamp\" : hit . get ( \"timestamp\" ) } ) \u5b9e\u73b0\u6b65\u9aa4 \u00b6 \u63d0\u53d6\u5185\u5bb9\u548c\u5143\u6570\u636e \uff1a \u4ece\u67e5\u8be2\u7ed3\u679c\u4e2d\u83b7\u53d6\u5b57\u6bb5\u3002 \u521b\u5efa\u5bf9\u8c61 \uff1a \u6784\u9020 Document \u5b9e\u4f8b\u3002 \u603b\u7ed3 \u00b6 \u672c\u7ae0\u8282\u5168\u9762\u8bb2\u89e3\u4e86 vector_store.py \u6a21\u5757\u7684\u6bcf\u4e2a\u65b9\u6cd5\uff1a \u521d\u59cb\u5316 \uff1a\u8bbe\u7f6e\u53c2\u6570\u548c\u6a21\u578b\uff0c\u4e3a\u5411\u91cf\u5b58\u50a8\u505a\u597d\u51c6\u5907\u3002 \u521b\u5efa\u96c6\u5408 \uff1a\u5b9a\u4e49\u7ed3\u6784\u548c\u7d22\u5f15\uff0c\u6784\u5efa\u9ad8\u6548\u6570\u636e\u5e93\u3002 \u6dfb\u52a0\u6587\u6863 \uff1a\u5b9e\u73b0\u6587\u6863\u5411\u91cf\u5316\u4e0e\u5b58\u50a8\u3002 \u6df7\u5408\u68c0\u7d22 \uff1a\u7ed3\u5408\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u5e76\u91cd\u6392\u5e8f\uff0c\u8fd4\u56de\u6700\u76f8\u5173\u7ed3\u679c\u3002 \u8f85\u52a9\u65b9\u6cd5 \uff1a\u652f\u6301\u53bb\u91cd\u548c\u6587\u6863\u8f6c\u6362\u3002 \u5b66\u4e60\u8005\u901a\u8fc7\u672c\u7ae0\u8282\u638c\u63e1\u4e86\u5411\u91cf\u5b58\u50a8\u7684\u5b8c\u6574\u6d41\u7a0b\uff0c\u4e3aRAG\u7cfb\u7edf\u7684\u68c0\u7d22\u529f\u80fd\u5960\u5b9a\u4e86\u57fa\u7840\u3002","title":"4.4 \u5411\u91cf\u5b58\u50a8"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_1","text":"","title":"\u5411\u91cf\u5b58\u50a8"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_2","text":"1.\u7406\u89e3\u5411\u91cf\u5b58\u50a8\u5728RAG\u7cfb\u7edf\u4e2d\u7684\u529f\u80fd\u548c\u91cd\u8981\u6027\u3002 2.\u5b66\u4f1a\u521b\u5efa\u548c\u7ba1\u7406\u5411\u91cf\u6570\u636e\u5e93\u3002 3.\u638c\u63e1\u5982\u4f55\u5c06\u6587\u672c\u8f6c\u5316\u4e3a\u5411\u91cf\u5e76\u5b58\u5165\u6570\u636e\u5e93\u3002 4.\u7406\u89e3\u6df7\u5408\u68c0\u7d22\u4e0e\u91cd\u6392\u5e8f\u7684\u5b9e\u73b0\u539f\u7406\u3002 vector_store.py \u662fEduRAG\u7cfb\u7edf\u7684\u6838\u5fc3\u6a21\u5757\u4e4b\u4e00\uff0c\u5c01\u88c5\u4e86\u4e0eMilvus\u5411\u91cf\u6570\u636e\u5e93\u7684\u4ea4\u4e92\u903b\u8f91\u3002\u5b83\u8d1f\u8d23\u5c06\u6587\u6863\u8f6c\u5316\u4e3a\u5411\u91cf\u5b58\u50a8\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u6df7\u5408\u68c0\u7d22\u529f\u80fd\u3002\u901a\u8fc7\u7ed3\u5408BGE-M3\u5d4c\u5165\u6a21\u578b\u548c\u91cd\u6392\u5e8f\u673a\u5236\uff0c\u8be5\u6a21\u5757\u786e\u4fdd\u7cfb\u7edf\u80fd\u591f\u5feb\u901f\u68c0\u7d22\u5230\u4e0e\u7528\u6237\u67e5\u8be2\u6700\u76f8\u5173\u7684\u6587\u6863\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#41","text":"VectorStore \u7c7b\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u4e3b\u8981\u529f\u80fd\uff1a \u521d\u59cb\u5316\u4e0e\u96c6\u5408\u7ba1\u7406 \uff1a\u521b\u5efa\u6216\u52a0\u8f7dMilvus\u5411\u91cf\u6570\u636e\u5e93\u96c6\u5408\u3002 \u6587\u6863\u5411\u91cf\u5316\u4e0e\u5b58\u50a8 \uff1a\u5c06\u5206\u5757\u540e\u7684\u6587\u6863\u8f6c\u6362\u4e3a\u5411\u91cf\u5e76\u5b58\u50a8\u3002 \u6df7\u5408\u68c0\u7d22\u4e0e\u91cd\u6392\u5e8f \uff1a\u7ed3\u5408\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u8fdb\u884c\u68c0\u7d22\uff0c\u5e76\u901a\u8fc7\u91cd\u6392\u5e8f\u4f18\u5316\u7ed3\u679c\u3002 \u4ee5\u4e0b\u5c06\u9010\u4e00\u8bb2\u89e3\u6bcf\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002","title":"4.1 \u6a21\u5757\u529f\u80fd\u6982\u8ff0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_3","text":"# \u5bfc\u5165 BGE-M3 \u5d4c\u5165\u51fd\u6570\uff0c\u7528\u4e8e\u751f\u6210\u6587\u6863\u548c\u67e5\u8be2\u7684\u5411\u91cf\u8868\u793a from milvus_model.hybrid import BGEM3EmbeddingFunction # \u5bfc\u5165 Milvus \u76f8\u5173\u7c7b\uff0c\u7528\u4e8e\u64cd\u4f5c\u5411\u91cf\u6570\u636e\u5e93 from pymilvus import MilvusClient , DataType , AnnSearchRequest , WeightedRanker # \u5bfc\u5165 Document \u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u6587\u6863\u5bf9\u8c61 from langchain.docstore.document import Document # \u5bfc\u5165 CrossEncoder\uff0c\u7528\u4e8e\u91cd\u6392\u5e8f\u548c NLI \u5224\u65ad from sentence_transformers import CrossEncoder # \u5bfc\u5165 hashlib \u6a21\u5757\uff0c\u7528\u4e8e\u751f\u6210\u552f\u4e00 ID \u7684\u54c8\u5e0c\u503c import hashlib from base import logger , Config conf = Config ()","title":"\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u5305"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#42","text":"","title":"4.2 \u521d\u59cb\u5316\u65b9\u6cd5"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_4","text":"__init__ \u65b9\u6cd5\u521d\u59cb\u5316 VectorStore \u7c7b\u7684\u5b9e\u4f8b\uff0c\u8bbe\u7f6e\u57fa\u672c\u53c2\u6570\u5e76\u8c03\u7528\u96c6\u5408\u521b\u5efa\u6216\u52a0\u8f7d\u65b9\u6cd5\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_5","text":"# core/vector_store.py # \u5b9a\u4e49 VectorStore \u7c7b\uff0c\u5c01\u88c5\u5411\u91cf\u5b58\u50a8\u548c\u68c0\u7d22\u529f\u80fd class VectorStore : # \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u5411\u91cf\u5b58\u50a8\u7684\u57fa\u672c\u53c2\u6570 def __init__ ( self , collection_name = conf . MILVUS_COLLECTION_NAME , host = conf . MILVUS_HOST , port = conf . MILVUS_PORT , database = conf . MILVUS_DATABASE_NAME ): # \u8bbe\u7f6e Milvus \u96c6\u5408\u540d\u79f0 self . collection_name = collection_name # \u8bbe\u7f6e Milvus \u4e3b\u673a\u5730\u5740 self . host = host # \u8bbe\u7f6e Milvus \u7aef\u53e3\u53f7 self . port = port # \u8bbe\u7f6e Milvus \u6570\u636e\u5e93\u540d\u79f0 self . database = database # \u8bbe\u7f6e\u65e5\u5fd7\u8bb0\u5f55\u5668 self . logger = logger # \u521d\u59cb\u5316 BGE-Reranker \u6a21\u578b\uff0c\u7528\u4e8e\u91cd\u6392\u5e8f\u68c0\u7d22\u7ed3\u679c self . reranker = CrossEncoder ( \"./bge/bge-reranker-large\" ) # \u521d\u59cb\u5316 BGE-M3 \u5d4c\u5165\u51fd\u6570\uff0c\u4f7f\u7528 CPU \u8bbe\u5907\uff0c\u4e0d\u542f\u7528 FP16 self . embedding_function = BGEM3EmbeddingFunction ( use_fp16 = False , device = \"cpu\" ) # \u83b7\u53d6\u7a20\u5bc6\u5411\u91cf\u7684\u7ef4\u5ea6 self . dense_dim = self . embedding_function . dim [ \"dense\" ] # \u521d\u59cb\u5316 Milvus \u5ba2\u6237\u7aef\uff0c\u8fde\u63a5\u5230\u6307\u5b9a\u4e3b\u673a\u548c\u6570\u636e\u5e93 self . client = MilvusClient ( uri = f \"http:// { self . host } : { self . port } \" , db_name = self . database ) # \u8c03\u7528\u65b9\u6cd5\u521b\u5efa\u6216\u52a0\u8f7d Milvus \u96c6\u5408 self . _create_or_load_collection ()","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_6","text":"\u53c2\u6570\u8bbe\u7f6e \uff1a \u4f7f\u7528 Config \u4e2d\u7684\u9ed8\u8ba4\u503c\u521d\u59cb\u5316\u96c6\u5408\u540d\u79f0\u3001\u4e3b\u673a\u3001\u7aef\u53e3\u548c\u6570\u636e\u5e93\u540d\u79f0\u3002 \u6a21\u578b\u521d\u59cb\u5316 \uff1a reranker \uff1a\u52a0\u8f7dBGE-Reranker\u6a21\u578b\uff0c\u7528\u4e8e\u540e\u7eed\u91cd\u6392\u5e8f\u3002 embedding_function \uff1a\u521d\u59cb\u5316BGE-M3\u5d4c\u5165\u6a21\u578b\uff0c\u7981\u7528FP16\uff0c\u4f7f\u7528CPU\u8fd0\u884c\u3002 dense_dim \uff1a\u83b7\u53d6\u7a20\u5bc6\u5411\u91cf\u7684\u7ef4\u5ea6\u3002 \u5ba2\u6237\u7aef\u8fde\u63a5 \uff1a \u521b\u5efa MilvusClient \u5b9e\u4f8b\uff0c\u8fde\u63a5\u5230\u6307\u5b9a\u4e3b\u673a\u548c\u6570\u636e\u5e93\u3002 \u96c6\u5408\u7ba1\u7406 \uff1a \u8c03\u7528 _create_or_load_collection \u65b9\u6cd5\uff0c\u786e\u4fdd\u96c6\u5408\u53ef\u7528\u3002","title":"\u5b9e\u73b0\u6b65\u9aa4"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_7","text":"BGE-M3\u6a21\u578b \uff1a\u63d0\u4f9b\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u751f\u6210\u80fd\u529b\u3002 \u7075\u6d3b\u6027 \uff1a\u901a\u8fc7\u53c2\u6570\u652f\u6301\u81ea\u5b9a\u4e49\u914d\u7f6e\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#43","text":"","title":"4.3 \u521b\u5efa\u6216\u52a0\u8f7d\u96c6\u5408"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_8","text":"_create_or_load_collection \u65b9\u6cd5\u68c0\u67e5\u5e76\u521b\u5efa\u6216\u52a0\u8f7dMilvus\u96c6\u5408\uff0c\u5b9a\u4e49\u5b57\u6bb5\u7ed3\u6784\u548c\u7d22\u5f15\u53c2\u6570\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_9","text":"# \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u521b\u5efa\u6216\u52a0\u8f7d Milvus \u96c6\u5408 def _create_or_load_collection ( self ): # \u68c0\u67e5\u6307\u5b9a\u96c6\u5408\u662f\u5426\u5df2\u5b58\u5728 if not self . client . has_collection ( self . collection_name ): # \u521b\u5efa\u96c6\u5408 Schema\uff0c\u7981\u7528\u81ea\u52a8 ID\uff0c\u542f\u7528\u52a8\u6001\u5b57\u6bb5 schema = self . client . create_schema ( auto_id = False , enable_dynamic_field = True ) # \u6dfb\u52a0 ID \u5b57\u6bb5\uff0c\u4f5c\u4e3a\u4e3b\u952e\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 100 schema . add_field ( field_name = \"id\" , datatype = DataType . VARCHAR , is_primary = True , max_length = 100 ) # \u6dfb\u52a0\u6587\u672c\u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 65535 schema . add_field ( field_name = \"text\" , datatype = DataType . VARCHAR , max_length = 65535 ) # \u6dfb\u52a0\u7a20\u5bc6\u5411\u91cf\u5b57\u6bb5\uff0cFLOAT_VECTOR \u7c7b\u578b\uff0c\u7ef4\u5ea6\u7531\u5d4c\u5165\u51fd\u6570\u6307\u5b9a schema . add_field ( field_name = \"dense_vector\" , datatype = DataType . FLOAT_VECTOR , dim = self . dense_dim ) # \u6dfb\u52a0\u7a00\u758f\u5411\u91cf\u5b57\u6bb5\uff0cSPARSE_FLOAT_VECTOR \u7c7b\u578b schema . add_field ( field_name = \"sparse_vector\" , datatype = DataType . SPARSE_FLOAT_VECTOR ) # \u6dfb\u52a0\u7236\u5757 ID \u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 100 schema . add_field ( field_name = \"parent_id\" , datatype = DataType . VARCHAR , max_length = 100 ) # \u6dfb\u52a0\u7236\u5757\u5185\u5bb9\u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 65535 schema . add_field ( field_name = \"parent_content\" , datatype = DataType . VARCHAR , max_length = 65535 ) # \u6dfb\u52a0\u5b66\u79d1\u7c7b\u522b\u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 50 schema . add_field ( field_name = \"source\" , datatype = DataType . VARCHAR , max_length = 50 ) # \u6dfb\u52a0\u65f6\u95f4\u6233\u5b57\u6bb5\uff0cVARCHAR \u7c7b\u578b\uff0c\u6700\u5927\u957f\u5ea6 50 schema . add_field ( field_name = \"timestamp\" , datatype = DataType . VARCHAR , max_length = 50 ) # \u521b\u5efa\u7d22\u5f15\u53c2\u6570\u5bf9\u8c61 index_params = self . client . prepare_index_params () # \u4e3a\u7a20\u5bc6\u5411\u91cf\u5b57\u6bb5\u6dfb\u52a0 IVF_FLAT \u7d22\u5f15\uff0c\u5ea6\u91cf\u7c7b\u578b\u4e3a\u5185\u79ef (IP) index_params . add_index ( field_name = \"dense_vector\" , index_name = \"dense_index\" , index_type = \"IVF_FLAT\" , metric_type = \"IP\" , params = { \"nlist\" : 128 } ) # \u4e3a\u7a00\u758f\u5411\u91cf\u5b57\u6bb5\u6dfb\u52a0 SPARSE_INVERTED_INDEX \u7d22\u5f15\uff0c\u5ea6\u91cf\u7c7b\u578b\u4e3a\u5185\u79ef (IP) index_params . add_index ( field_name = \"sparse_vector\" , index_name = \"sparse_index\" , index_type = \"SPARSE_INVERTED_INDEX\" , metric_type = \"IP\" , params = { \"drop_ratio_build\" : 0.2 } ) # \u521b\u5efa Milvus \u96c6\u5408\uff0c\u5e94\u7528\u5b9a\u4e49\u7684 Schema \u548c\u7d22\u5f15\u53c2\u6570 self . client . create_collection ( collection_name = self . collection_name , schema = schema , index_params = index_params ) # \u8bb0\u5f55\u521b\u5efa\u96c6\u5408\u7684\u65e5\u5fd7 logger . info ( f \"\u5df2\u521b\u5efa\u96c6\u5408 { self . collection_name } \" ) # \u5982\u679c\u96c6\u5408\u5df2\u5b58\u5728 else : # \u8bb0\u5f55\u52a0\u8f7d\u96c6\u5408\u7684\u65e5\u5fd7 logger . info ( f \"\u5df2\u52a0\u8f7d\u96c6\u5408 { self . collection_name } \" ) # \u5c06\u96c6\u5408\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u786e\u4fdd\u53ef\u7acb\u5373\u67e5\u8be2 self . client . load_collection ( self . collection_name )","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_10","text":"\u68c0\u67e5\u96c6\u5408\u662f\u5426\u5b58\u5728 \uff1a \u4f7f\u7528 has_collection \u5224\u65ad\u662f\u5426\u9700\u8981\u521b\u5efa\u65b0\u96c6\u5408\u3002 \u5b9a\u4e49Schema \uff1a \u8bbe\u7f6e\u5b57\u6bb5\uff1a\u5305\u62ec id \uff08\u4e3b\u952e\uff09\u3001 text \uff08\u539f\u6587\uff09\u3001\u5411\u91cf\u5b57\u6bb5\u548c\u5143\u6570\u636e\u5b57\u6bb5\u3002 \u7981\u7528\u81ea\u52a8ID\uff0c\u542f\u7528\u52a8\u6001\u5b57\u6bb5\u3002 \u521b\u5efa\u7d22\u5f15 \uff1a \u7a20\u5bc6\u5411\u91cf\u4f7f\u7528 IVF_FLAT \u7d22\u5f15\uff0c\u7a00\u758f\u5411\u91cf\u4f7f\u7528 SPARSE_INVERTED_INDEX \u3002 \u521b\u5efa\u5e76\u52a0\u8f7d\u96c6\u5408 \uff1a \u8c03\u7528 create_collection \u521b\u5efa\u96c6\u5408\uff0c\u5e76\u52a0\u8f7d\u5230\u5185\u5b58\u3002","title":"\u5b9e\u73b0\u6b65\u9aa4"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_11","text":"\u5b57\u6bb5\u8bbe\u8ba1 \uff1a\u652f\u6301\u591a\u79cd\u6570\u636e\u7c7b\u578b\u548c\u5143\u6570\u636e\u7ba1\u7406\u3002 \u7d22\u5f15\u4f18\u5316 \uff1a\u5e73\u8861\u68c0\u7d22\u901f\u5ea6\u548c\u7cbe\u5ea6\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#44","text":"","title":"4.4 \u6dfb\u52a0\u6587\u6863"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_12","text":"add_documents \u65b9\u6cd5\u5c06\u5206\u5757\u540e\u7684\u6587\u6863\u8f6c\u6362\u4e3a\u5411\u91cf\u5e76\u5b58\u50a8\u5230Milvus\u96c6\u5408\u4e2d\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_13","text":"# \u5b9a\u4e49\u65b9\u6cd5\uff0c\u5411\u5411\u91cf\u5b58\u50a8\u6dfb\u52a0\u6587\u6863 def add_documents ( self , documents ): # \u63d0\u53d6\u6240\u6709\u6587\u6863\u7684\u5185\u5bb9\u5217\u8868 texts = [ doc . page_content for doc in documents ] # \u4f7f\u7528 BGE-M3 \u5d4c\u5165\u51fd\u6570\u751f\u6210\u6587\u6863\u7684\u5d4c\u5165 embeddings = self . embedding_function ( texts ) # \u521d\u59cb\u5316\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u63d2\u5165\u7684\u6570\u636e data = [] # \u904d\u5386\u6bcf\u4e2a\u6587\u6863\uff0c\u5e26\u4e0a\u7d22\u5f15 i for i , doc in enumerate ( documents ): # \u751f\u6210\u6587\u6863\u5185\u5bb9\u7684 MD5 \u54c8\u5e0c\u503c\uff0c\u4f5c\u4e3a\u552f\u4e00 ID text_hash = hashlib . md5 ( doc . page_content . encode ( 'utf-8' )) . hexdigest () # \u521d\u59cb\u5316\u7a00\u758f\u5411\u91cf\u5b57\u5178 sparse_vector = {} # \u83b7\u53d6\u7b2c i \u884c\u7684\u7a00\u758f\u5411\u91cf\u6570\u636e row = embeddings [ \"sparse\" ] . getrow ( i ) # \u83b7\u53d6\u7a00\u758f\u5411\u91cf\u7684\u975e\u96f6\u503c\u7d22\u5f15 indices = row . indices # \u83b7\u53d6\u7a00\u758f\u5411\u91cf\u7684\u975e\u96f6\u503c values = row . data # \u5c06\u7d22\u5f15\u548c\u503c\u914d\u5bf9\uff0c\u586b\u5145\u7a00\u758f\u5411\u91cf\u5b57\u5178 for idx , value in zip ( indices , values ): sparse_vector [ idx ] = value # \u521b\u5efa\u6570\u636e\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u5b57\u6bb5 data . append ({ \"id\" : text_hash , \"text\" : doc . page_content , \"dense_vector\" : embeddings [ \"dense\" ][ i ], \"sparse_vector\" : sparse_vector , \"parent_id\" : doc . metadata [ \"parent_id\" ], \"parent_content\" : doc . metadata [ \"parent_content\" ], \"source\" : doc . metadata . get ( \"source\" , \"unknown\" ), \"timestamp\" : doc . metadata . get ( \"timestamp\" , \"unknown\" ) }) # \u68c0\u67e5\u662f\u5426\u6709\u6570\u636e\u9700\u8981\u63d2\u5165 if data : # \u4f7f\u7528 upsert \u64cd\u4f5c\u63d2\u5165\u6570\u636e\uff0c\u8986\u76d6\u91cd\u590d ID self . client . upsert ( collection_name = self . collection_name , data = data ) # \u8bb0\u5f55\u63d2\u5165\u6216\u66f4\u65b0\u7684\u6587\u6863\u6570\u91cf\u65e5\u5fd7 logger . info ( f \"\u5df2\u63d2\u5165\u6216\u66f4\u65b0 { len ( data ) } \u4e2a\u6587\u6863\" )","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_14","text":"\u63d0\u53d6\u6587\u672c \uff1a \u4ece\u6587\u6863\u5bf9\u8c61\u4e2d\u63d0\u53d6\u6587\u672c\u5185\u5bb9\u3002 \u751f\u6210\u5411\u91cf \uff1a \u4f7f\u7528BGE-M3\u6a21\u578b\u751f\u6210\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u3002 \u6784\u9020\u6570\u636e \uff1a \u4e3a\u6bcf\u7bc7\u6587\u6863\u751f\u6210\u552f\u4e00ID\uff08MD5\u54c8\u5e0c\uff09\u3002 \u5c06\u5411\u91cf\u548c\u5143\u6570\u636e\u7ec4\u7ec7\u6210\u5b57\u5178\u3002 \u5b58\u50a8\u6570\u636e \uff1a \u4f7f\u7528 upsert \u64cd\u4f5c\u63d2\u5165\u6216\u66f4\u65b0\u6570\u636e\u3002","title":"\u5b9e\u73b0\u6b65\u9aa4"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_15","text":"\u552f\u4e00\u6027 \uff1a\u901a\u8fc7MD5\u54c8\u5e0c\u786e\u4fddID\u552f\u4e00\u3002 \u7a00\u758f\u5411\u91cf\u5904\u7406 \uff1a\u5c06\u7a00\u758f\u77e9\u9635\u8f6c\u6362\u4e3a\u5b57\u5178\u683c\u5f0f\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#45","text":"","title":"4.5 \u6df7\u5408\u68c0\u7d22\u4e0e\u91cd\u6392\u5e8f"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_16","text":"hybrid_search_with_rerank \u65b9\u6cd5\u5b9e\u73b0\u6df7\u5408\u68c0\u7d22\u5e76\u91cd\u6392\u5e8f\uff0c\u8fd4\u56de\u6700\u76f8\u5173\u6587\u6863\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_17","text":"# \u5b9a\u4e49\u65b9\u6cd5\uff0c\u6267\u884c\u6df7\u5408\u68c0\u7d22\u5e76\u91cd\u6392\u5e8f def hybrid_search_with_rerank ( self , query , k = conf . RETRIEVAL_K , source_filter = None ): # \u4f7f\u7528 BGE-M3 \u5d4c\u5165\u51fd\u6570\u751f\u6210\u67e5\u8be2\u7684\u5d4c\u5165 query_embeddings = self . embedding_function ([ query ]) # \u83b7\u53d6\u67e5\u8be2\u7684\u7a20\u5bc6\u5411\u91cf dense_query_vector = query_embeddings [ \"dense\" ][ 0 ] # \u521d\u59cb\u5316\u67e5\u8be2\u7684\u7a00\u758f\u5411\u91cf\u5b57\u5178 sparse_query_vector = {} # \u83b7\u53d6\u67e5\u8be2\u7a00\u758f\u5411\u91cf\u7684\u7b2c 0 \u884c\u6570\u636e row = query_embeddings [ \"sparse\" ] . getrow ( 0 ) # \u83b7\u53d6\u7a00\u758f\u5411\u91cf\u7684\u975e\u96f6\u503c\u7d22\u5f15 indices = row . indices # \u83b7\u53d6\u7a00\u758f\u5411\u91cf\u7684\u975e\u96f6\u503c values = row . data # \u5c06\u7d22\u5f15\u548c\u503c\u914d\u5bf9\uff0c\u586b\u5145\u7a00\u758f\u5411\u91cf\u5b57\u5178 for idx , value in zip ( indices , values ): sparse_query_vector [ idx ] = value # \u521d\u59cb\u5316\u8fc7\u6ee4\u8868\u8fbe\u5f0f\uff0c\u9ed8\u8ba4\u4e0d\u8fc7\u6ee4 filter_expr = f \"source == ' { source_filter } '\" if source_filter else \"\" # \u521b\u5efa\u7a20\u5bc6\u5411\u91cf\u641c\u7d22\u8bf7\u6c42 dense_request = AnnSearchRequest ( data = [ dense_query_vector ], anns_field = \"dense_vector\" , param = { \"metric_type\" : \"IP\" , \"params\" : { \"nprobe\" : 10 }}, limit = k , expr = filter_expr ) # \u521b\u5efa\u7a00\u758f\u5411\u91cf\u641c\u7d22\u8bf7\u6c42 sparse_request = AnnSearchRequest ( data = [ sparse_query_vector ], anns_field = \"sparse_vector\" , param = { \"metric_type\" : \"IP\" , \"params\" : {}}, limit = k , expr = filter_expr ) # \u521b\u5efa\u52a0\u6743\u6392\u5e8f\u5668\uff0c\u7a00\u758f\u5411\u91cf\u6743\u91cd 0.7\uff0c\u7a20\u5bc6\u5411\u91cf\u6743\u91cd 1.0 ranker = WeightedRanker ( 0.7 , 1.0 ) # \u6267\u884c\u6df7\u5408\u641c\u7d22\uff0c\u8fd4\u56de Top-K \u7ed3\u679c results = self . client . hybrid_search ( collection_name = self . collection_name , reqs = [ dense_request , sparse_request ], ranker = ranker , limit = k , output_fields = [ \"text\" , \"parent_id\" , \"parent_content\" , \"source\" , \"timestamp\" ] )[ 0 ] # \u5c06\u641c\u7d22\u7ed3\u679c\u8f6c\u6362\u4e3a Document \u5bf9\u8c61\u5217\u8868 sub_chunks = [ self . _doc_from_hit ( hit [ \"entity\" ]) for hit in results ] print ( f 'sub_chunks--> { len ( sub_chunks ) } ' ) # \u4ece\u5b50\u5757\u4e2d\u63d0\u53d6\u53bb\u91cd\u7684\u7236\u6587\u6863 parent_docs = self . _get_unique_parent_docs ( sub_chunks ) # \u5982\u679c\u53ea\u67091\u4e2a\u6587\u6863\uff0c\u76f4\u63a5\u8fd4\u56de\u8df3\u8fc7\u91cd\u6392\u5e8f if len ( parent_docs ) < 2 : return parent_docs [: conf . CANDIDATE_M ] # \u5982\u679c\u6709\u7236\u6587\u6863\uff0c\u8fdb\u884c\u91cd\u6392\u5e8f if parent_docs : # \u521b\u5efa\u67e5\u8be2\u4e0e\u6587\u6863\u5185\u5bb9\u7684\u914d\u5bf9\u5217\u8868 pairs = [[ query , doc . page_content ] for doc in parent_docs ] # \u4f7f\u7528 BGE-Reranker \u8ba1\u7b97\u6bcf\u4e2a\u914d\u5bf9\u7684\u5f97\u5206 scores = self . reranker . predict ( pairs ) # \u6839\u636e\u5f97\u5206\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u6587\u6863 ranked_parent_docs = [ doc for _ , doc in sorted ( zip ( scores , parent_docs ), reverse = True )] # \u5982\u679c\u6ca1\u6709\u7236\u6587\u6863\uff0c\u8fd4\u56de\u7a7a\u5217\u8868 else : ranked_parent_docs = [] # \u8fd4\u56de\u524d k \u4e2a\u91cd\u6392\u5e8f\u540e\u7684\u6587\u6863 return ranked_parent_docs [: conf . CANDIDATE_M ]","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_18","text":"\u751f\u6210\u67e5\u8be2\u5411\u91cf \uff1a \u4f7f\u7528BGE-M3\u751f\u6210\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u3002 \u6784\u9020\u68c0\u7d22\u8bf7\u6c42 \uff1a \u4e3a\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u5206\u522b\u521b\u5efa AnnSearchRequest \u3002 \u6df7\u5408\u68c0\u7d22 \uff1a \u4f7f\u7528 WeightedRanker \u878d\u5408\u7ed3\u679c\u3002 \u91cd\u6392\u5e8f \uff1a \u4f7f\u7528 CrossEncoder \u91cd\u65b0\u6392\u5e8f\u7236\u6587\u6863\u3002","title":"\u5b9e\u73b0\u6b65\u9aa4"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_19","text":"\u6df7\u5408\u68c0\u7d22 \uff1a\u63d0\u5347\u8986\u76d6\u7387\u548c\u51c6\u786e\u6027\u3002 \u91cd\u6392\u5e8f \uff1a\u786e\u4fdd\u6700\u76f8\u5173\u6587\u6863\u4f18\u5148\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#46","text":"","title":"4.6 \u83b7\u53d6\u552f\u4e00\u7236\u6587\u6863"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_20","text":"_get_unique_parent_docs \u65b9\u6cd5\u4ece\u5b50\u5757\u4e2d\u63d0\u53d6\u53bb\u91cd\u7684\u7236\u6587\u6863\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_21","text":"# \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4ece\u5b50\u5757\u4e2d\u63d0\u53d6\u53bb\u91cd\u7684\u7236\u6587\u6863 def _get_unique_parent_docs ( self , sub_chunks ): # \u521d\u59cb\u5316\u96c6\u5408\uff0c\u7528\u4e8e\u5b58\u50a8\u5df2\u5904\u7406\u7684\u7236\u5757\u5185\u5bb9\uff08\u53bb\u91cd\uff09 parent_contents = set () # \u521d\u59cb\u5316\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u552f\u4e00\u7236\u6587\u6863 unique_docs = [] # \u904d\u5386\u6240\u6709\u5b50\u5757 for chunk in sub_chunks : # \u83b7\u53d6\u5b50\u5757\u7684\u7236\u5757\u5185\u5bb9\uff0c\u9ed8\u8ba4\u4e3a\u5b50\u5757\u5185\u5bb9 parent_content = chunk . metadata . get ( \"parent_content\" , chunk . page_content ) # \u68c0\u67e5\u7236\u5757\u5185\u5bb9\u662f\u5426\u975e\u7a7a\u4e14\u672a\u91cd\u590d if parent_content and parent_content not in parent_contents : # \u521b\u5efa\u65b0\u7684 Document \u5bf9\u8c61\uff0c\u5305\u542b\u7236\u5757\u5185\u5bb9\u548c\u5143\u6570\u636e unique_docs . append ( Document ( page_content = parent_content , metadata = chunk . metadata )) # \u5c06\u7236\u5757\u5185\u5bb9\u6dfb\u52a0\u5230\u53bb\u91cd\u96c6\u5408 parent_contents . add ( parent_content ) # \u8fd4\u56de\u53bb\u91cd\u540e\u7684\u7236\u6587\u6863\u5217\u8868 return unique_docs","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_22","text":"\u53bb\u91cd \uff1a \u4f7f\u7528\u96c6\u5408\u8bb0\u5f55\u5df2\u5904\u7406\u7684\u7236\u5185\u5bb9\u3002 \u6784\u9020\u6587\u6863 \uff1a \u521b\u5efa\u5305\u542b\u7236\u5185\u5bb9\u7684 Document \u5bf9\u8c61\u3002","title":"\u5b9e\u73b0\u6b65\u9aa4"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_23","text":"\u53bb\u91cd\u903b\u8f91 \uff1a\u907f\u514d\u91cd\u590d\u7236\u6587\u6863\u3002 \u5143\u6570\u636e\u4fdd\u7559 \uff1a\u4fdd\u6301\u5b8c\u6574\u6027\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#47","text":"","title":"4.7 \u4ece\u67e5\u8be2\u7ed3\u679c\u521b\u5efa\u6587\u6863"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_24","text":"_doc_from_hit \u65b9\u6cd5\u5c06Milvus\u67e5\u8be2\u7ed3\u679c\u8f6c\u6362\u4e3a Document \u5bf9\u8c61\u3002","title":"\u529f\u80fd"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_25","text":"# \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4ece Milvus \u67e5\u8be2\u7ed3\u679c\u521b\u5efa Document \u5bf9\u8c61 def _doc_from_hit ( self , hit ): # \u521b\u5efa\u5e76\u8fd4\u56de Document \u5bf9\u8c61\uff0c\u586b\u5145\u5185\u5bb9\u548c\u5143\u6570\u636e return Document ( page_content = hit . get ( \"text\" ), metadata = { \"parent_id\" : hit . get ( \"parent_id\" ), \"parent_content\" : hit . get ( \"parent_content\" ), \"source\" : hit . get ( \"source\" ), \"timestamp\" : hit . get ( \"timestamp\" ) } )","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_26","text":"\u63d0\u53d6\u5185\u5bb9\u548c\u5143\u6570\u636e \uff1a \u4ece\u67e5\u8be2\u7ed3\u679c\u4e2d\u83b7\u53d6\u5b57\u6bb5\u3002 \u521b\u5efa\u5bf9\u8c61 \uff1a \u6784\u9020 Document \u5b9e\u4f8b\u3002","title":"\u5b9e\u73b0\u6b65\u9aa4"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/04-%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8.html#_27","text":"\u672c\u7ae0\u8282\u5168\u9762\u8bb2\u89e3\u4e86 vector_store.py \u6a21\u5757\u7684\u6bcf\u4e2a\u65b9\u6cd5\uff1a \u521d\u59cb\u5316 \uff1a\u8bbe\u7f6e\u53c2\u6570\u548c\u6a21\u578b\uff0c\u4e3a\u5411\u91cf\u5b58\u50a8\u505a\u597d\u51c6\u5907\u3002 \u521b\u5efa\u96c6\u5408 \uff1a\u5b9a\u4e49\u7ed3\u6784\u548c\u7d22\u5f15\uff0c\u6784\u5efa\u9ad8\u6548\u6570\u636e\u5e93\u3002 \u6dfb\u52a0\u6587\u6863 \uff1a\u5b9e\u73b0\u6587\u6863\u5411\u91cf\u5316\u4e0e\u5b58\u50a8\u3002 \u6df7\u5408\u68c0\u7d22 \uff1a\u7ed3\u5408\u7a20\u5bc6\u548c\u7a00\u758f\u5411\u91cf\u5e76\u91cd\u6392\u5e8f\uff0c\u8fd4\u56de\u6700\u76f8\u5173\u7ed3\u679c\u3002 \u8f85\u52a9\u65b9\u6cd5 \uff1a\u652f\u6301\u53bb\u91cd\u548c\u6587\u6863\u8f6c\u6362\u3002 \u5b66\u4e60\u8005\u901a\u8fc7\u672c\u7ae0\u8282\u638c\u63e1\u4e86\u5411\u91cf\u5b58\u50a8\u7684\u5b8c\u6574\u6d41\u7a0b\uff0c\u4e3aRAG\u7cfb\u7edf\u7684\u68c0\u7d22\u529f\u80fd\u5960\u5b9a\u4e86\u57fa\u7840\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html","text":"Prompt\u7ba1\u7406\u4e0e\u67e5\u8be2\u5206\u7c7b \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 1.\u638c\u63e1\u5982\u4f55\u8bbe\u8ba1\u548c\u4f7f\u7528Prompt\u6a21\u677f\u6765\u5f15\u5bfc\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u9ad8\u8d28\u91cf\u8f93\u51fa\u3002 2.\u5b66\u4f1a\u67e5\u8be2\u5206\u7c7b\u7684\u57fa\u672c\u539f\u7406\uff0c\u4e86\u89e3\u5982\u4f55\u901a\u8fc7\u5206\u7c7b\u4f18\u5316\u8f93\u5165\u5904\u7406\u6d41\u7a0b\u3002 prompts.py \u548c query_classifier.py \u662fEduRAG\u7cfb\u7edf\u4e2d core \u6a21\u5757\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5206\u522b\u8d1f\u8d23Prompt\u6a21\u677f\u7ba1\u7406\u548c\u67e5\u8be2\u5206\u7c7b\u3002\u8fd9\u4e24\u4e2a\u6a21\u5757\u901a\u8fc7\u4f18\u5316\u7528\u6237\u8f93\u5165\u7684\u5904\u7406\uff0c\u589e\u5f3a\u4e86\u7cfb\u7edf\u7684\u7075\u6d3b\u6027\u548c\u667a\u80fd\u6027\uff0c\u4e3aRAG\u7cfb\u7edf\u7684\u68c0\u7d22\u548c\u751f\u6210\u9636\u6bb5\u5960\u5b9a\u4e86\u57fa\u7840\u3002 prompts.py \u5b9a\u4e49\u4e86\u591a\u79cdPrompt\u6a21\u677f\uff0c\u7528\u4e8e\u5f15\u5bfc\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7279\u5b9a\u8f93\u51fa\uff0c\u800c query_classifier.py \u901a\u8fc7\u5206\u7c7b\u7528\u6237\u67e5\u8be2\uff0c\u51b3\u5b9a\u662f\u5426\u76f4\u63a5\u4f7f\u7528\u6a21\u578b\u56de\u7b54\u6216\u89e6\u53d1\u68c0\u7d22\u6d41\u7a0b\u3002 5.1 Prompt\u7ba1\u7406 \u00b6 \u529f\u80fd\u6982\u8ff0 \u00b6 prompts.py \u5b9a\u4e49\u4e86 RAGPrompts \u7c7b\uff0c\u8d1f\u8d23\u7ba1\u7406\u7cfb\u7edf\u4e2d\u4f7f\u7528\u7684\u6240\u6709Prompt\u6a21\u677f\u3002\u8fd9\u4e9b\u6a21\u677f\u7528\u4e8e\u6307\u5bfc\u5927\u8bed\u8a00\u6a21\u578b\u5b8c\u6210\u4e0d\u540c\u4efb\u52a1\uff0c\u4f8b\u5982\u751f\u6210\u6700\u7ec8\u7b54\u6848\u3001\u5047\u8bbe\u7b54\u6848\u3001\u5b50\u67e5\u8be2\u6216\u7b80\u5316\u95ee\u9898\u3002\u901a\u8fc7\u96c6\u4e2d\u7ba1\u7406Prompt\uff0c\u7cfb\u7edf\u80fd\u591f\u786e\u4fdd\u8f93\u5165\u7684\u4e00\u81f4\u6027\u548c\u8f93\u51fa\u8d28\u91cf\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # core/prompts.py # \u5bfc\u5165 PromptTemplate \u7c7b\uff0c\u7528\u4e8e\u521b\u5efa Prompt \u6a21\u677f from langchain.prompts import PromptTemplate # \u5b9a\u4e49 RAGPrompts \u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u6240\u6709 Prompt \u6a21\u677f class RAGPrompts : # \u5b9a\u4e49 RAG \u63d0\u793a\u6a21\u677f @staticmethod def rag_prompt (): # \u521b\u5efa\u5e76\u8fd4\u56de PromptTemplate \u5bf9\u8c61 return PromptTemplate ( template = \"\"\" \u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\uff0c\u5e2e\u52a9\u7528\u6237\u56de\u7b54\u95ee\u9898\u3002 \u5982\u679c\u63d0\u4f9b\u4e86\u4e0a\u4e0b\u6587\uff0c\u8bf7\u57fa\u4e8e\u4e0a\u4e0b\u6587\u56de\u7b54\uff1b\u5982\u679c\u6ca1\u6709\u4e0a\u4e0b\u6587\uff0c\u8bf7\u76f4\u63a5\u6839\u636e\u4f60\u7684\u77e5\u8bc6\u56de\u7b54\u3002 \u5982\u679c\u7b54\u6848\u6765\u6e90\u4e8e\u68c0\u7d22\u5230\u7684\u6587\u6863\uff0c\u8bf7\u5728\u56de\u7b54\u4e2d\u8bf4\u660e\u3002 \u4e0a\u4e0b\u6587: {context} \u95ee\u9898: {question} \u5982\u679c\u65e0\u6cd5\u56de\u7b54\uff0c\u8bf7\u56de\u590d\uff1a\u201c\u4fe1\u606f\u4e0d\u8db3\uff0c\u65e0\u6cd5\u56de\u7b54\uff0c\u8bf7\u8054\u7cfb\u4eba\u5de5\u5ba2\u670d\uff0c\u7535\u8bdd\uff1a {phone} \u3002\u201d \u56de\u7b54: \"\"\" , # \u5b9a\u4e49\u8f93\u5165\u53d8\u91cf input_variables = [ \"context\" , \"question\" , \"phone\" ], ) # @staticmethod # def rag_prompt(): # return PromptTemplate( # template=\"\"\" # \u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\uff0c\u8d1f\u8d23\u5e2e\u52a9\u7528\u6237\u56de\u7b54\u95ee\u9898\u3002\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5904\u7406\uff1a # # 1. **\u5206\u6790\u95ee\u9898\u548c\u4e0a\u4e0b\u6587**\uff1a # - \u57fa\u4e8e\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\uff08\u5982\u679c\u6709\uff09\u548c\u4f60\u7684\u77e5\u8bc6\u56de\u7b54\u95ee\u9898\u3002 # - \u5982\u679c\u7b54\u6848\u6765\u6e90\u4e8e\u68c0\u7d22\u5230\u7684\u6587\u6863\uff0c\u8bf7\u5728\u56de\u7b54\u4e2d\u660e\u786e\u8bf4\u660e\uff0c\u4f8b\u5982\uff1a\u201c\u6839\u636e\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u2026\u2026\u201d\u3002 # # 2. **\u8bc4\u4f30\u5bf9\u8bdd\u5386\u53f2**\uff1a # - \u68c0\u67e5\u5bf9\u8bdd\u5386\u53f2\u662f\u5426\u4e0e\u5f53\u524d\u95ee\u9898\u76f8\u5173\uff08\u4f8b\u5982\uff0c\u662f\u5426\u6d89\u53ca\u76f8\u540c\u7684\u8bdd\u9898\u3001\u5b9e\u4f53\u6216\u95ee\u9898\u80cc\u666f\uff09\u3002 # - \u5982\u679c\u5bf9\u8bdd\u5386\u53f2\u4e0e\u95ee\u9898\u76f8\u5173\uff0c\u8bf7\u7ed3\u5408\u5386\u53f2\u4fe1\u606f\u751f\u6210\u66f4\u51c6\u786e\u7684\u56de\u7b54\u3002 # - \u5982\u679c\u5bf9\u8bdd\u5386\u53f2\u65e0\u5173\uff08\u4f8b\u5982\uff0c\u4ec5\u5305\u542b\u95ee\u5019\u6216\u4e0d\u76f8\u5173\u7684\u5185\u5bb9\uff09\uff0c\u5ffd\u7565\u5386\u53f2\uff0c\u4ec5\u57fa\u4e8e\u4e0a\u4e0b\u6587\u548c\u95ee\u9898\u56de\u7b54\u3002 # # 3. **\u751f\u6210\u56de\u7b54**\uff1a # - \u63d0\u4f9b\u6e05\u6670\u3001\u51c6\u786e\u7684\u56de\u7b54\uff0c\u907f\u514d\u65e0\u5173\u4fe1\u606f\u3002 # - \u5982\u679c\u4e0a\u4e0b\u6587\u548c\u5386\u53f2\u6d88\u606f\u5747\u4e0d\u8db3\u4ee5\u56de\u7b54\u95ee\u9898\uff0c\u8bf7\u56de\u590d\uff1a\u201c\u4fe1\u606f\u4e0d\u8db3\uff0c\u65e0\u6cd5\u56de\u7b54\uff0c\u8bf7\u8054\u7cfb\u4eba\u5de5\u5ba2\u670d\uff0c\u7535\u8bdd\uff1a{phone}\u3002\u201d # # **\u4e0a\u4e0b\u6587**: {context} # **\u5bf9\u8bdd\u5386\u53f2**: # {history} # **\u95ee\u9898**: {question} # # **\u56de\u7b54**: # \"\"\", # input_variables=[\"context\", \"history\", \"question\", \"phone\"], # ) # \u5b9a\u4e49\u5047\u8bbe\u95ee\u9898\u751f\u6210\u7684 Prompt \u6a21\u677f @staticmethod def hyde_prompt (): # \u521b\u5efa\u5e76\u8fd4\u56de PromptTemplate \u5bf9\u8c61 return PromptTemplate ( template = \"\"\" \u5047\u8bbe\u4f60\u662f\u7528\u6237\uff0c\u60f3\u4e86\u89e3\u4ee5\u4e0b\u95ee\u9898\uff0c\u8bf7\u751f\u6210\u4e00\u4e2a\u7b80\u77ed\u7684\u5047\u8bbe\u7b54\u6848\uff1a \u95ee\u9898: {query} \u5047\u8bbe\u7b54\u6848: \"\"\" , # \u5b9a\u4e49\u8f93\u5165\u53d8\u91cf input_variables = [ \"query\" ], ) # \u5b9a\u4e49\u5b50\u67e5\u8be2\u751f\u6210\u7684 Prompt \u6a21\u677f @staticmethod def subquery_prompt (): # \u521b\u5efa\u5e76\u8fd4\u56de PromptTemplate \u5bf9\u8c61 return PromptTemplate ( template = \"\"\" \u5c06\u4ee5\u4e0b\u590d\u6742\u67e5\u8be2\u5206\u89e3\u4e3a\u591a\u4e2a\u7b80\u5355\u5b50\u67e5\u8be2\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b50\u67e5\u8be2\uff1a \u67e5\u8be2: {query} \u5b50\u67e5\u8be2: \"\"\" , # \u5b9a\u4e49\u8f93\u5165\u53d8\u91cf input_variables = [ \"query\" ], ) # \u5b9a\u4e49\u56de\u6eaf\u95ee\u9898\u751f\u6210\u7684 Prompt \u6a21\u677f @staticmethod def backtracking_prompt (): # \u521b\u5efa\u5e76\u8fd4\u56de PromptTemplate \u5bf9\u8c61 return PromptTemplate ( template = \"\"\" \u5c06\u4ee5\u4e0b\u590d\u6742\u67e5\u8be2\u7b80\u5316\u4e3a\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u95ee\u9898\uff1a \u67e5\u8be2: {query} \u7b80\u5316\u95ee\u9898: \"\"\" , # \u5b9a\u4e49\u8f93\u5165\u53d8\u91cf input_variables = [ \"query\" ], ) \u5b9e\u73b0\u7ec6\u8282 \u00b6 rag_prompt \uff1a \u4f5c\u7528 \uff1a\u6838\u5fc3\u56de\u7b54\u6a21\u677f\uff0c\u7ed3\u5408\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u751f\u6210\u6700\u7ec8\u7b54\u6848\u3002 \u8f93\u5165\u53d8\u91cf \uff1a context \uff08\u68c0\u7d22\u6587\u6863\u5185\u5bb9\uff09\u3001 question \uff08\u7528\u6237\u67e5\u8be2\uff09\u3001 phone \uff08\u5ba2\u670d\u7535\u8bdd\uff09\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u652f\u6301\u6709\u65e0\u4e0a\u4e0b\u6587\u7684\u56de\u7b54\uff0c\u5e76\u63d0\u4f9b\u515c\u5e95\u56de\u590d\uff0c\u786e\u4fdd\u7528\u6237\u4f53\u9a8c\u3002 hyde_prompt \uff1a \u4f5c\u7528 \uff1a\u751f\u6210\u5047\u8bbe\u7b54\u6848\uff0c\u7528\u4e8eHyDE\uff08Hypothetical Document Embeddings\uff09\u7b56\u7565\uff0c\u4f18\u5316\u62bd\u8c61\u67e5\u8be2\u7684\u68c0\u7d22\u3002 \u8f93\u5165\u53d8\u91cf \uff1a query \uff08\u7528\u6237\u67e5\u8be2\uff09\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u901a\u8fc7\u751f\u6210\u5047\u8bbe\u7b54\u6848\uff0c\u95f4\u63a5\u589e\u5f3a\u67e5\u8be2\u4e0e\u6587\u6863\u7684\u8bed\u4e49\u5339\u914d\u3002 subquery_prompt \uff1a \u4f5c\u7528 \uff1a\u5c06\u590d\u6742\u67e5\u8be2\u5206\u89e3\u4e3a\u591a\u4e2a\u5b50\u67e5\u8be2\uff0c\u9002\u5408\u6d89\u53ca\u591a\u65b9\u9762\u7684\u67e5\u8be2\u3002 \u8f93\u5165\u53d8\u91cf \uff1a query \uff08\u7528\u6237\u67e5\u8be2\uff09\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u5206\u89e3\u590d\u6742\u95ee\u9898\u4ee5\u63d0\u9ad8\u68c0\u7d22\u8986\u76d6\u7387\u3002 backtracking_prompt \uff1a \u4f5c\u7528 \uff1a\u5c06\u590d\u6742\u67e5\u8be2\u7b80\u5316\u4e3a\u66f4\u57fa\u7840\u7684\u95ee\u9898\uff0c\u4fbf\u4e8e\u68c0\u7d22\u3002 \u8f93\u5165\u53d8\u91cf \uff1a query \uff08\u7528\u6237\u67e5\u8be2\uff09\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u901a\u8fc7\u7b80\u5316\u67e5\u8be2\u964d\u4f4e\u68c0\u7d22\u96be\u5ea6\u3002 4.2 \u67e5\u8be2\u5206\u7c7b \u00b6 QueryClassifier \u662f EduRAG \u7cfb\u7edf\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u5c06\u7528\u6237\u67e5\u8be2\u5206\u4e3a\u201c\u901a\u7528\u77e5\u8bc6\u201d\u548c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u4e24\u7c7b\uff0c\u4ee5\u51b3\u5b9a\u67e5\u8be2\u8def\u7531\u5230\u77e5\u8bc6\u5e93\u8fd8\u662f\u54a8\u8be2\u63a5\u53e3\u3002\u672c\u6a21\u5757\u4ecb\u7ecd\u57fa\u4e8e BERT \u7684\u4f18\u5316\u5b9e\u73b0\uff0c\u66ff\u6362\u4f20\u7edf TF-IDF \u6a21\u578b\uff0c\u5229\u7528 5000 \u6761\u6df7\u5408\u6570\u636e\u96c6\uff08 training_dataset_hybrid_5000.json \uff09\u8fdb\u884c\u8bad\u7ec3\uff0c\u5e76\u89e3\u51b3\u8bc4\u4f30\u4e2d\u7684\u6807\u7b7e\u5904\u7406\u95ee\u9898\u3002 \u529f\u80fd\u6982\u8ff0 \u00b6 QueryClassifier \u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a \u6570\u636e\u52a0\u8f7d \uff1a\u8bfb\u53d6 5000 \u6761 JSON \u6570\u636e\u96c6\uff0c\u5305\u542b\u67e5\u8be2\u548c\u6807\u7b7e\uff08\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6216\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\uff09\u3002 BERT \u8bad\u7ec3 \uff1a\u4f7f\u7528 bert-base-chinese \u6a21\u578b\uff0c\u5fae\u8c03\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u51c6\u786e\u7387\u8fbe 90%+\u3002 \u8bc4\u4f30\u4f18\u5316 \uff1a\u76f4\u63a5\u5904\u7406\u6570\u5b57\u6807\u7b7e\uff080 \u6216 1\uff09\uff0c\u751f\u6210\u5206\u7c7b\u62a5\u544a\u548c\u6df7\u6dc6\u77e9\u9635\u3002 \u9884\u6d4b\u63a5\u53e3 \uff1a\u652f\u6301\u5b9e\u65f6\u5206\u7c7b\uff0c\u96c6\u6210\u5230 EduRAG \u7cfb\u7edf\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 # \u5bfc\u5165\u6807\u51c6\u5e93 import json import os # \u5bfc\u5165 PyTorch import torch # \u5bfc\u5165\u65e5\u5fd7 from base import logger # \u5bfc\u5165numpy import numpy as np # \u5bfc\u5165 Transformers \u5e93 from transformers import BertTokenizer , BertForSequenceClassification from transformers import Trainer , TrainingArguments # \u5bfc\u5165train_test_split from sklearn.model_selection import train_test_split from sklearn.metrics import classification_report , confusion_matrix class QueryClassifier : def __init__ ( self , model_path = \"bert_query_classifier\" ): # \u521d\u59cb\u5316\u6a21\u578b\u8def\u5f84 self . model_path = model_path # \u52a0\u8f7d BERT \u5206\u8bcd\u5668 self . tokenizer = BertTokenizer . from_pretrained ( \"./bert-base-chinese\" ) # \u521d\u59cb\u5316\u6a21\u578b self . model = None # \u786e\u5b9a\u8bbe\u5907\uff08GPU \u6216 CPU\uff09 self . device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) # \u8bb0\u5f55\u8bbe\u5907\u4fe1\u606f logger . info ( f \"\u4f7f\u7528\u8bbe\u5907: { self . device } \" ) # \u5b9a\u4e49\u6807\u7b7e\u6620\u5c04 self . label_map = { \"\u901a\u7528\u77e5\u8bc6\" : 0 , \"\u4e13\u4e1a\u54a8\u8be2\" : 1 } # \u52a0\u8f7d\u6a21\u578b self . load_model () def load_model ( self ): # \u68c0\u67e5\u6a21\u578b\u8def\u5f84\u662f\u5426\u5b58\u5728 if os . path . exists ( self . model_path ): # \u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b self . model = BertForSequenceClassification . from_pretrained ( self . model_path ) # \u5c06\u6a21\u578b\u79fb\u5230\u6307\u5b9a\u8bbe\u5907 self . model . to ( self . device ) # \u8bb0\u5f55\u52a0\u8f7d\u6210\u529f\u7684\u65e5\u5fd7 logger . info ( f \"\u52a0\u8f7d\u6a21\u578b: { self . model_path } \" ) else : # \u521d\u59cb\u5316\u65b0\u6a21\u578b self . model = BertForSequenceClassification . from_pretrained ( \"bert-base-chinese\" , num_labels = 2 ) # \u5c06\u6a21\u578b\u79fb\u5230\u6307\u5b9a\u8bbe\u5907 self . model . to ( self . device ) # \u8bb0\u5f55\u521d\u59cb\u5316\u6a21\u578b\u7684\u65e5\u5fd7 logger . info ( \"\u521d\u59cb\u5316\u65b0 BERT \u6a21\u578b\" ) def save_model ( self ): \"\"\"\u4fdd\u5b58\u6a21\u578b\"\"\" self . model . save_pretrained ( self . model_path ) self . tokenizer . save_pretrained ( self . model_path ) logger . info ( f \"\u6a21\u578b\u4fdd\u5b58\u81f3: { self . model_path } \" ) def preprocess_data ( self , texts , labels ): \"\"\"\u9884\u5904\u7406\u6570\u636e\u4e3a BERT \u8f93\u5165\u683c\u5f0f\"\"\" encodings = self . tokenizer ( texts , truncation = True , padding = True , max_length = 128 , return_tensors = \"pt\" ) return encodings , [ self . label_map [ label ] for label in labels ] def create_dataset ( self , encodings , labels ): \"\"\"\u521b\u5efa PyTorch \u6570\u636e\u96c6\"\"\" class Dataset ( torch . utils . data . Dataset ): def __init__ ( self , encodings , labels ): self . encodings = encodings self . labels = labels def __getitem__ ( self , idx ): item = { key : val [ idx ] for key , val in self . encodings . items ()} item [ \"labels\" ] = torch . tensor ( self . labels [ idx ]) return item def __len__ ( self ): return len ( self . labels ) return Dataset ( encodings , labels ) def train_model ( self , data_file = \"training_dataset_hybrid_5000.json\" ): \"\"\"\u8bad\u7ec3 BERT \u5206\u7c7b\u6a21\u578b\"\"\" # \u52a0\u8f7d\u6570\u636e\u96c6 if not os . path . exists ( data_file ): logger . error ( f \"\u6570\u636e\u96c6\u6587\u4ef6 { data_file } \u4e0d\u5b58\u5728\" ) raise FileNotFoundError ( f \"\u6570\u636e\u96c6\u6587\u4ef6 { data_file } \u4e0d\u5b58\u5728\" ) with open ( data_file , \"r\" , encoding = \"utf-8\" ) as f : data = [ json . loads ( value ) for value in f . readlines ()] texts = [ item [ \"query\" ] for item in data ] labels = [ item [ \"label\" ] for item in data ] # \u6570\u636e\u5212\u5206 train_texts , val_texts , train_labels , val_labels = train_test_split ( texts , labels , test_size = 0.2 , random_state = 42 ) # \u9884\u5904\u7406 train_encodings , train_labels = self . preprocess_data ( train_texts , train_labels ) val_encodings , val_labels = self . preprocess_data ( val_texts , val_labels ) # \u521b\u5efa\u6570\u636e\u96c6 train_dataset = self . create_dataset ( train_encodings , train_labels ) # print(f'train_dataset--\u300b{train_dataset[0]}') val_dataset = self . create_dataset ( val_encodings , val_labels ) # # \u8bbe\u7f6e\u8bad\u7ec3\u53c2\u6570 training_args = TrainingArguments ( output_dir = \"./bert_results\" , num_train_epochs = 3 , per_device_train_batch_size = 8 , per_device_eval_batch_size = 8 , warmup_steps = 500 , weight_decay = 0.01 , logging_dir = \"./bert_logs\" , logging_steps = 10 , evaluation_strategy = \"epoch\" , save_strategy = \"epoch\" , load_best_model_at_end = True , save_total_limit = 1 , # \u53ea\u4fdd\u5b58\u4e00\u4e2a\u68c0\u67e5\u70b9\uff0c\u5373\u6700\u4f18\u7684\u6a21\u578b metric_for_best_model = \"eval_loss\" , fp16 = False , # \u7981\u7528\u6df7\u5408\u7cbe\u5ea6 ) # \u521d\u59cb\u5316 Trainer trainer = Trainer ( model = self . model , args = training_args , train_dataset = train_dataset , eval_dataset = val_dataset , compute_metrics = self . compute_metrics ) # \u8bad\u7ec3\u6a21\u578b logger . info ( \"\u5f00\u59cb\u8bad\u7ec3 BERT \u6a21\u578b...\" ) trainer . train () self . save_model () # \u8bc4\u4f30\u6a21\u578b self . evaluate_model ( val_texts , val_labels ) def compute_metrics ( self , eval_pred ): \"\"\"\u8ba1\u7b97\u8bc4\u4f30\u6307\u6807\"\"\" logits , labels = eval_pred predictions = np . argmax ( logits , axis =- 1 ) accuracy = ( predictions == labels ) . mean () return { \"accuracy\" : accuracy } def evaluate_model ( self , texts , labels ): \"\"\"\u8bc4\u4f30\u6a21\u578b\u6027\u80fd\"\"\" # \u4ec5\u5bf9 texts \u8fdb\u884c\u5206\u8bcd\uff0clabels \u5df2\u4e3a\u6570\u5b57 encodings = self . tokenizer ( texts , truncation = True , padding = True , max_length = 128 , return_tensors = \"pt\" ) dataset = self . create_dataset ( encodings , labels ) trainer = Trainer ( model = self . model ) predictions = trainer . predict ( dataset ) pred_labels = np . argmax ( predictions . predictions , axis =- 1 ) true_labels = labels # \u76f4\u63a5\u4f7f\u7528\u6570\u5b57\u6807\u7b7e logger . info ( \"\u5206\u7c7b\u62a5\u544a:\" ) logger . info ( classification_report ( true_labels , pred_labels , target_names = [ \"\u901a\u7528\u77e5\u8bc6\" , \"\u4e13\u4e1a\u54a8\u8be2\" ] )) logger . info ( \"\u6df7\u6dc6\u77e9\u9635:\" ) logger . info ( confusion_matrix ( true_labels , pred_labels )) def predict_category ( self , query ): # \u68c0\u67e5\u6a21\u578b\u662f\u5426\u52a0\u8f7d if self . model is None : # \u6a21\u578b\u672a\u52a0\u8f7d\uff0c\u8bb0\u5f55\u9519\u8bef logger . error ( \"\u6a21\u578b\u672a\u8bad\u7ec3\u6216\u52a0\u8f7d\" ) # \u9ed8\u8ba4\u8fd4\u56de\u901a\u7528\u77e5\u8bc6 return \"\u901a\u7528\u77e5\u8bc6\" # \u5bf9\u67e5\u8be2\u8fdb\u884c\u7f16\u7801 encoding = self . tokenizer ( query , truncation = True , padding = True , max_length = 128 , return_tensors = \"pt\" ) # \u5c06\u7f16\u7801\u79fb\u5230\u6307\u5b9a\u8bbe\u5907 encoding = { k : v . to ( self . device ) for k , v in encoding . items ()} # \u4e0d\u8ba1\u7b97\u68af\u5ea6\uff0c\u8fdb\u884c\u9884\u6d4b with torch . no_grad (): # \u83b7\u53d6\u6a21\u578b\u8f93\u51fa outputs = self . model ( ** encoding ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c prediction = torch . argmax ( outputs . logits , dim = 1 ) . item () # \u6839\u636e\u9884\u6d4b\u7ed3\u679c\u8fd4\u56de\u7c7b\u522b return \"\u4e13\u4e1a\u54a8\u8be2\" if prediction == 1 else \"\u901a\u7528\u77e5\u8bc6\" if __name__ == \"__main__\" : # \u521d\u59cb\u5316\u5206\u7c7b\u5668 classifier = QueryClassifier ( model_path = \"bert_query_classifier\" ) # \u8bad\u7ec3\u6a21\u578b # classifier.train_model(data_file='../classify_data/model_generic_5000.json') # \u793a\u4f8b\u9884\u6d4b test_queries = [ \"AI\u5b66\u79d1\u7684\u8bfe\u7a0b\u5927\u7eb2\u662f\u4ec0\u4e48\" , \"JAVA\u8bfe\u7a0b\u8d39\u7528\u591a\u5c11\uff1f\" , \"5*9\u7b49\u4e8e\u591a\u5c11\uff1f\" , \"AI\u57f9\u8bad\u6709\u54ea\u4e9b\u8001\u5e08\uff1f\" ] for query in test_queries : category = classifier . predict_category ( query ) print ( f \"\u67e5\u8be2: { query } -> \u5206\u7c7b: { category } \" ) \u5b9e\u73b0\u7ec6\u8282 \u00b6 __init__ \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u521d\u59cb\u5316 BERT \u5206\u8bcd\u5668\uff08 bert-base-chinese \uff09\u548c\u6a21\u578b\uff0c\u652f\u6301\u4e8c\u5206\u7c7b\u3002 \u4f18\u5316 \uff1a\u8bbe\u5907\u9009\u62e9\u4f18\u5148 CUDA\uff0c\u82e5\u4e0d\u53ef\u7528\u5219\u56de\u9000\u5230 CPU\uff0c\u7981\u7528 MPS\uff08\u9002\u914d macOS \u4f4e\u7248\u672c\uff09\u3002 \u6807\u7b7e\u6620\u5c04 \uff1a\u5b9a\u4e49 label_map = {\"\u901a\u7528\u77e5\u8bc6\": 0, \"\u4e13\u4e1a\u54a8\u8be2\": 1} \uff0c\u7528\u4e8e\u8bad\u7ec3\u65f6\u5b57\u7b26\u4e32\u6807\u7b7e\u8f6c\u6362\u3002 preprocess_data \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u5c06\u67e5\u8be2\u6587\u672c\u5206\u8bcd\u4e3a BERT \u8f93\u5165\uff08ID \u548c\u6ce8\u610f\u529b\u63a9\u7801\uff09\uff0c\u5c06\u5b57\u7b26\u4e32\u6807\u7b7e\u8f6c\u6362\u4e3a\u6570\u5b57\uff080 \u6216 1\uff09\u3002 \u7ec6\u8282 \uff1a\u8bbe\u7f6e max_length=128 \uff0c\u5e73\u8861\u6548\u7387\u548c\u4fe1\u606f\u5b8c\u6574\u6027\u3002 create_dataset \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u6784\u5efa PyTorch \u6570\u636e\u96c6\uff0c\u9002\u914d Trainer \u7684\u8f93\u5165\u683c\u5f0f\u3002 \u5b9e\u73b0 \uff1a\u786e\u4fdd labels \u4e3a\u6570\u5b57\uff0c\u517c\u5bb9\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002 train_model \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u52a0\u8f7d 5000 \u6761\u6570\u636e\u96c6\uff0c\u5212\u5206 80% \u8bad\u7ec3\uff084000 \u6761\uff09\u548c 20% \u9a8c\u8bc1\uff081000 \u6761\uff09\uff0c\u5fae\u8c03 BERT \u6a21\u578b\u3002 \u53c2\u6570 \uff1a num_train_epochs=3 \uff1a\u8bad\u7ec3 3 \u8f6e\uff0c\u9002\u5408\u4e2d\u7b49\u89c4\u6a21\u6570\u636e\u96c6\u3002 per_device_train_batch_size=8 \uff1a\u5e73\u8861\u5185\u5b58\u548c\u901f\u5ea6\u3002 fp16=False \uff1a\u7981\u7528\u6df7\u5408\u7cbe\u5ea6\uff0c\u517c\u5bb9 PyTorch 2.5 \u548c CPU\uff0c\u5982\u679c\u4e3aTrue\uff0c\u91c7\u7528\u6df7\u5408\u7cbe\u5ea6\uff0cGPU\u8bad\u7ec3\u3002 \u6d41\u7a0b \uff1a \u52a0\u8f7d training_dataset_hybrid_5000.json \u3002 \u9884\u5904\u7406\u6570\u636e\uff0c\u5c06\u6807\u7b7e\u8f6c\u6362\u4e3a\u6570\u5b57\u3002 \u4f7f\u7528 Trainer \u8bad\u7ec3\uff0c\u81ea\u52a8\u4fdd\u5b58\u6700\u4f73\u6a21\u578b\u3002 evaluate_model \u65b9\u6cd5\uff08\u4f18\u5316\u91cd\u70b9\uff09 \uff1a \u4f5c\u7528 \uff1a\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8bc4\u4f30\u6a21\u578b\uff0c\u751f\u6210\u5206\u7c7b\u62a5\u544a\u548c\u6df7\u6dc6\u77e9\u9635\u3002 \u4fee\u590d \uff1a \u95ee\u9898\uff1a\u539f\u59cb\u4ee3\u7801\u91cd\u590d\u6620\u5c04\u6570\u5b57\u6807\u7b7e\uff08 0 , 1 \uff09\u5230 label_map \uff0c\u5bfc\u81f4 KeyError: 1 \u3002 \u4fee\u590d\uff1a\u76f4\u63a5\u4f7f\u7528\u4f20\u5165\u7684\u6570\u5b57\u6807\u7b7e\uff08 labels \uff09\uff0c\u4ec5\u5bf9 texts \u5206\u8bcd\u3002 \u903b\u8f91\uff1a true_labels = labels \uff0c\u786e\u4fdd\u4e0e\u9884\u6d4b\u6807\u7b7e\u4e00\u81f4\u3002 \u8f93\u51fa \uff1a\u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u3001F1 \u5206\u6570\u548c\u6df7\u6dc6\u77e9\u9635\u3002 predict_category \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u5bf9\u5355\u6761\u67e5\u8be2\u5206\u7c7b\uff0c\u8fd4\u56de\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6216\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u3002 \u5b9e\u73b0 \uff1a\u5206\u8bcd\u540e\u901a\u8fc7\u6a21\u578b\u9884\u6d4b\uff0c\u8fd4\u56de\u4eba\u7c7b\u53ef\u8bfb\u6807\u7b7e\u3002 \u6267\u884c\u793a\u4f8b \u00b6 \u8fd0\u884c\u811a\u672c\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a \u4f7f\u7528\u8bbe\u5907: cpu \u521d\u59cb\u5316\u65b0 BERT \u6a21\u578b \u5f00\u59cb\u8bad\u7ec3 BERT \u6a21\u578b... [1500/1500 25:00, Epoch 3/3] Epoch | Training Loss | Validation Loss | Accuracy 1 | 0.3400 | 0.2100 | 0.9150 2 | 0.1700 | 0.1600 | 0.9300 3 | 0.1100 | 0.1450 | 0.9350 \u6a21\u578b\u4fdd\u5b58\u81f3: bert_query_classifier \u5206\u7c7b\u62a5\u544a: precision recall f1-score support \u901a\u7528\u77e5\u8bc6 0.94 0.92 0.93 500 \u4e13\u4e1a\u54a8\u8be2 0.92 0.94 0.93 500 accuracy 0.93 1000 \u6df7\u6dc6\u77e9\u9635: [[460 40] [ 30 470]] \u67e5\u8be2: \u4ec0\u4e48\u662f\u795e\u7ecf\u7f51\u7edc\uff1f -> \u5206\u7c7b: \u901a\u7528\u77e5\u8bc6 \u67e5\u8be2: JAVA\u8bfe\u7a0b\u8d39\u7528\u591a\u5c11\uff1f -> \u5206\u7c7b: \u4e13\u4e1a\u54a8\u8be2 \u67e5\u8be2: 23+45\u7b49\u4e8e\u591a\u5c11\uff1f -> \u5206\u7c7b: \u901a\u7528\u77e5\u8bc6 \u67e5\u8be2: AI\u57f9\u8bad\u6709\u54ea\u4e9b\u8001\u5e08\uff1f -> \u5206\u7c7b: \u4e13\u4e1a\u54a8\u8be2 \u4ee3\u7801\u793a\u4f8b\uff08\u96c6\u6210\u5230 EduRAG\uff09 \u00b6 # core/rag_system.py class RAGSystem : def __init__ ( self ): self . classifier = QueryClassifier ( model_path = \"bert_query_classifier\" ) self . knowledge_base = KnowledgeBase () self . consulting_service = ConsultingService () def route_query ( self , query ): category = self . classifier . predict_category ( query ) if category == \"\u901a\u7528\u77e5\u8bc6\" : return self . knowledge_base . search ( query ) else : return self . consulting_service . handle ( query ) \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u4e86 prompts.py \u548c query_classifier.py \u7684\u529f\u80fd\u4e0e\u5b9e\u73b0\uff1a prompts.py \uff1a\u901a\u8fc7 RAGPrompts \u7c7b\u7ba1\u7406\u591a\u79cdPrompt\u6a21\u677f\uff0c\u4f18\u5316\u5927\u8bed\u8a00\u6a21\u578b\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u652f\u6301\u6838\u5fc3\u56de\u7b54\u3001HyDE\u3001\u5b50\u67e5\u8be2\u548c\u56de\u6eaf\u7b56\u7565\u3002 query_classifier.py \uff1a\u901a\u8fc7 QueryClassifier \u7c7b\u5b9e\u73b0\u67e5\u8be2\u5206\u7c7b\uff0c\u533a\u5206\u901a\u7528\u77e5\u8bc6\u548c\u4e13\u4e1a\u54a8\u8be2\uff0c\u51b3\u5b9a\u7cfb\u7edf\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002 \u5b66\u4e60\u8005\u901a\u8fc7\u672c\u7ae0\u8282\u638c\u63e1\u4e86\u5982\u4f55\u901a\u8fc7Prompt\u7ba1\u7406\u548c\u67e5\u8be2\u5206\u7c7b\u63d0\u5347RAG\u7cfb\u7edf\u7684\u667a\u80fd\u6027\u548c\u6548\u7387\uff0c\u4e3a\u540e\u7eed\u7684\u68c0\u7d22\u7b56\u7565\u9009\u62e9\u548c\u6838\u5fc3\u903b\u8f91\u5b9e\u73b0\u505a\u597d\u4e86\u51c6\u5907\u3002","title":"4.5 prompts\u8bbe\u8ba1\u4e0equery\u610f\u56fe\u8bc6\u522b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#prompt","text":"","title":"Prompt\u7ba1\u7406\u4e0e\u67e5\u8be2\u5206\u7c7b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_1","text":"1.\u638c\u63e1\u5982\u4f55\u8bbe\u8ba1\u548c\u4f7f\u7528Prompt\u6a21\u677f\u6765\u5f15\u5bfc\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u9ad8\u8d28\u91cf\u8f93\u51fa\u3002 2.\u5b66\u4f1a\u67e5\u8be2\u5206\u7c7b\u7684\u57fa\u672c\u539f\u7406\uff0c\u4e86\u89e3\u5982\u4f55\u901a\u8fc7\u5206\u7c7b\u4f18\u5316\u8f93\u5165\u5904\u7406\u6d41\u7a0b\u3002 prompts.py \u548c query_classifier.py \u662fEduRAG\u7cfb\u7edf\u4e2d core \u6a21\u5757\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5206\u522b\u8d1f\u8d23Prompt\u6a21\u677f\u7ba1\u7406\u548c\u67e5\u8be2\u5206\u7c7b\u3002\u8fd9\u4e24\u4e2a\u6a21\u5757\u901a\u8fc7\u4f18\u5316\u7528\u6237\u8f93\u5165\u7684\u5904\u7406\uff0c\u589e\u5f3a\u4e86\u7cfb\u7edf\u7684\u7075\u6d3b\u6027\u548c\u667a\u80fd\u6027\uff0c\u4e3aRAG\u7cfb\u7edf\u7684\u68c0\u7d22\u548c\u751f\u6210\u9636\u6bb5\u5960\u5b9a\u4e86\u57fa\u7840\u3002 prompts.py \u5b9a\u4e49\u4e86\u591a\u79cdPrompt\u6a21\u677f\uff0c\u7528\u4e8e\u5f15\u5bfc\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7279\u5b9a\u8f93\u51fa\uff0c\u800c query_classifier.py \u901a\u8fc7\u5206\u7c7b\u7528\u6237\u67e5\u8be2\uff0c\u51b3\u5b9a\u662f\u5426\u76f4\u63a5\u4f7f\u7528\u6a21\u578b\u56de\u7b54\u6216\u89e6\u53d1\u68c0\u7d22\u6d41\u7a0b\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#51-prompt","text":"","title":"5.1 Prompt\u7ba1\u7406"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_2","text":"prompts.py \u5b9a\u4e49\u4e86 RAGPrompts \u7c7b\uff0c\u8d1f\u8d23\u7ba1\u7406\u7cfb\u7edf\u4e2d\u4f7f\u7528\u7684\u6240\u6709Prompt\u6a21\u677f\u3002\u8fd9\u4e9b\u6a21\u677f\u7528\u4e8e\u6307\u5bfc\u5927\u8bed\u8a00\u6a21\u578b\u5b8c\u6210\u4e0d\u540c\u4efb\u52a1\uff0c\u4f8b\u5982\u751f\u6210\u6700\u7ec8\u7b54\u6848\u3001\u5047\u8bbe\u7b54\u6848\u3001\u5b50\u67e5\u8be2\u6216\u7b80\u5316\u95ee\u9898\u3002\u901a\u8fc7\u96c6\u4e2d\u7ba1\u7406Prompt\uff0c\u7cfb\u7edf\u80fd\u591f\u786e\u4fdd\u8f93\u5165\u7684\u4e00\u81f4\u6027\u548c\u8f93\u51fa\u8d28\u91cf\u3002","title":"\u529f\u80fd\u6982\u8ff0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_3","text":"# core/prompts.py # \u5bfc\u5165 PromptTemplate \u7c7b\uff0c\u7528\u4e8e\u521b\u5efa Prompt \u6a21\u677f from langchain.prompts import PromptTemplate # \u5b9a\u4e49 RAGPrompts \u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u6240\u6709 Prompt \u6a21\u677f class RAGPrompts : # \u5b9a\u4e49 RAG \u63d0\u793a\u6a21\u677f @staticmethod def rag_prompt (): # \u521b\u5efa\u5e76\u8fd4\u56de PromptTemplate \u5bf9\u8c61 return PromptTemplate ( template = \"\"\" \u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\uff0c\u5e2e\u52a9\u7528\u6237\u56de\u7b54\u95ee\u9898\u3002 \u5982\u679c\u63d0\u4f9b\u4e86\u4e0a\u4e0b\u6587\uff0c\u8bf7\u57fa\u4e8e\u4e0a\u4e0b\u6587\u56de\u7b54\uff1b\u5982\u679c\u6ca1\u6709\u4e0a\u4e0b\u6587\uff0c\u8bf7\u76f4\u63a5\u6839\u636e\u4f60\u7684\u77e5\u8bc6\u56de\u7b54\u3002 \u5982\u679c\u7b54\u6848\u6765\u6e90\u4e8e\u68c0\u7d22\u5230\u7684\u6587\u6863\uff0c\u8bf7\u5728\u56de\u7b54\u4e2d\u8bf4\u660e\u3002 \u4e0a\u4e0b\u6587: {context} \u95ee\u9898: {question} \u5982\u679c\u65e0\u6cd5\u56de\u7b54\uff0c\u8bf7\u56de\u590d\uff1a\u201c\u4fe1\u606f\u4e0d\u8db3\uff0c\u65e0\u6cd5\u56de\u7b54\uff0c\u8bf7\u8054\u7cfb\u4eba\u5de5\u5ba2\u670d\uff0c\u7535\u8bdd\uff1a {phone} \u3002\u201d \u56de\u7b54: \"\"\" , # \u5b9a\u4e49\u8f93\u5165\u53d8\u91cf input_variables = [ \"context\" , \"question\" , \"phone\" ], ) # @staticmethod # def rag_prompt(): # return PromptTemplate( # template=\"\"\" # \u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\uff0c\u8d1f\u8d23\u5e2e\u52a9\u7528\u6237\u56de\u7b54\u95ee\u9898\u3002\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5904\u7406\uff1a # # 1. **\u5206\u6790\u95ee\u9898\u548c\u4e0a\u4e0b\u6587**\uff1a # - \u57fa\u4e8e\u63d0\u4f9b\u7684\u4e0a\u4e0b\u6587\uff08\u5982\u679c\u6709\uff09\u548c\u4f60\u7684\u77e5\u8bc6\u56de\u7b54\u95ee\u9898\u3002 # - \u5982\u679c\u7b54\u6848\u6765\u6e90\u4e8e\u68c0\u7d22\u5230\u7684\u6587\u6863\uff0c\u8bf7\u5728\u56de\u7b54\u4e2d\u660e\u786e\u8bf4\u660e\uff0c\u4f8b\u5982\uff1a\u201c\u6839\u636e\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u2026\u2026\u201d\u3002 # # 2. **\u8bc4\u4f30\u5bf9\u8bdd\u5386\u53f2**\uff1a # - \u68c0\u67e5\u5bf9\u8bdd\u5386\u53f2\u662f\u5426\u4e0e\u5f53\u524d\u95ee\u9898\u76f8\u5173\uff08\u4f8b\u5982\uff0c\u662f\u5426\u6d89\u53ca\u76f8\u540c\u7684\u8bdd\u9898\u3001\u5b9e\u4f53\u6216\u95ee\u9898\u80cc\u666f\uff09\u3002 # - \u5982\u679c\u5bf9\u8bdd\u5386\u53f2\u4e0e\u95ee\u9898\u76f8\u5173\uff0c\u8bf7\u7ed3\u5408\u5386\u53f2\u4fe1\u606f\u751f\u6210\u66f4\u51c6\u786e\u7684\u56de\u7b54\u3002 # - \u5982\u679c\u5bf9\u8bdd\u5386\u53f2\u65e0\u5173\uff08\u4f8b\u5982\uff0c\u4ec5\u5305\u542b\u95ee\u5019\u6216\u4e0d\u76f8\u5173\u7684\u5185\u5bb9\uff09\uff0c\u5ffd\u7565\u5386\u53f2\uff0c\u4ec5\u57fa\u4e8e\u4e0a\u4e0b\u6587\u548c\u95ee\u9898\u56de\u7b54\u3002 # # 3. **\u751f\u6210\u56de\u7b54**\uff1a # - \u63d0\u4f9b\u6e05\u6670\u3001\u51c6\u786e\u7684\u56de\u7b54\uff0c\u907f\u514d\u65e0\u5173\u4fe1\u606f\u3002 # - \u5982\u679c\u4e0a\u4e0b\u6587\u548c\u5386\u53f2\u6d88\u606f\u5747\u4e0d\u8db3\u4ee5\u56de\u7b54\u95ee\u9898\uff0c\u8bf7\u56de\u590d\uff1a\u201c\u4fe1\u606f\u4e0d\u8db3\uff0c\u65e0\u6cd5\u56de\u7b54\uff0c\u8bf7\u8054\u7cfb\u4eba\u5de5\u5ba2\u670d\uff0c\u7535\u8bdd\uff1a{phone}\u3002\u201d # # **\u4e0a\u4e0b\u6587**: {context} # **\u5bf9\u8bdd\u5386\u53f2**: # {history} # **\u95ee\u9898**: {question} # # **\u56de\u7b54**: # \"\"\", # input_variables=[\"context\", \"history\", \"question\", \"phone\"], # ) # \u5b9a\u4e49\u5047\u8bbe\u95ee\u9898\u751f\u6210\u7684 Prompt \u6a21\u677f @staticmethod def hyde_prompt (): # \u521b\u5efa\u5e76\u8fd4\u56de PromptTemplate \u5bf9\u8c61 return PromptTemplate ( template = \"\"\" \u5047\u8bbe\u4f60\u662f\u7528\u6237\uff0c\u60f3\u4e86\u89e3\u4ee5\u4e0b\u95ee\u9898\uff0c\u8bf7\u751f\u6210\u4e00\u4e2a\u7b80\u77ed\u7684\u5047\u8bbe\u7b54\u6848\uff1a \u95ee\u9898: {query} \u5047\u8bbe\u7b54\u6848: \"\"\" , # \u5b9a\u4e49\u8f93\u5165\u53d8\u91cf input_variables = [ \"query\" ], ) # \u5b9a\u4e49\u5b50\u67e5\u8be2\u751f\u6210\u7684 Prompt \u6a21\u677f @staticmethod def subquery_prompt (): # \u521b\u5efa\u5e76\u8fd4\u56de PromptTemplate \u5bf9\u8c61 return PromptTemplate ( template = \"\"\" \u5c06\u4ee5\u4e0b\u590d\u6742\u67e5\u8be2\u5206\u89e3\u4e3a\u591a\u4e2a\u7b80\u5355\u5b50\u67e5\u8be2\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b50\u67e5\u8be2\uff1a \u67e5\u8be2: {query} \u5b50\u67e5\u8be2: \"\"\" , # \u5b9a\u4e49\u8f93\u5165\u53d8\u91cf input_variables = [ \"query\" ], ) # \u5b9a\u4e49\u56de\u6eaf\u95ee\u9898\u751f\u6210\u7684 Prompt \u6a21\u677f @staticmethod def backtracking_prompt (): # \u521b\u5efa\u5e76\u8fd4\u56de PromptTemplate \u5bf9\u8c61 return PromptTemplate ( template = \"\"\" \u5c06\u4ee5\u4e0b\u590d\u6742\u67e5\u8be2\u7b80\u5316\u4e3a\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u95ee\u9898\uff1a \u67e5\u8be2: {query} \u7b80\u5316\u95ee\u9898: \"\"\" , # \u5b9a\u4e49\u8f93\u5165\u53d8\u91cf input_variables = [ \"query\" ], )","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_4","text":"rag_prompt \uff1a \u4f5c\u7528 \uff1a\u6838\u5fc3\u56de\u7b54\u6a21\u677f\uff0c\u7ed3\u5408\u68c0\u7d22\u5230\u7684\u4e0a\u4e0b\u6587\u751f\u6210\u6700\u7ec8\u7b54\u6848\u3002 \u8f93\u5165\u53d8\u91cf \uff1a context \uff08\u68c0\u7d22\u6587\u6863\u5185\u5bb9\uff09\u3001 question \uff08\u7528\u6237\u67e5\u8be2\uff09\u3001 phone \uff08\u5ba2\u670d\u7535\u8bdd\uff09\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u652f\u6301\u6709\u65e0\u4e0a\u4e0b\u6587\u7684\u56de\u7b54\uff0c\u5e76\u63d0\u4f9b\u515c\u5e95\u56de\u590d\uff0c\u786e\u4fdd\u7528\u6237\u4f53\u9a8c\u3002 hyde_prompt \uff1a \u4f5c\u7528 \uff1a\u751f\u6210\u5047\u8bbe\u7b54\u6848\uff0c\u7528\u4e8eHyDE\uff08Hypothetical Document Embeddings\uff09\u7b56\u7565\uff0c\u4f18\u5316\u62bd\u8c61\u67e5\u8be2\u7684\u68c0\u7d22\u3002 \u8f93\u5165\u53d8\u91cf \uff1a query \uff08\u7528\u6237\u67e5\u8be2\uff09\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u901a\u8fc7\u751f\u6210\u5047\u8bbe\u7b54\u6848\uff0c\u95f4\u63a5\u589e\u5f3a\u67e5\u8be2\u4e0e\u6587\u6863\u7684\u8bed\u4e49\u5339\u914d\u3002 subquery_prompt \uff1a \u4f5c\u7528 \uff1a\u5c06\u590d\u6742\u67e5\u8be2\u5206\u89e3\u4e3a\u591a\u4e2a\u5b50\u67e5\u8be2\uff0c\u9002\u5408\u6d89\u53ca\u591a\u65b9\u9762\u7684\u67e5\u8be2\u3002 \u8f93\u5165\u53d8\u91cf \uff1a query \uff08\u7528\u6237\u67e5\u8be2\uff09\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u5206\u89e3\u590d\u6742\u95ee\u9898\u4ee5\u63d0\u9ad8\u68c0\u7d22\u8986\u76d6\u7387\u3002 backtracking_prompt \uff1a \u4f5c\u7528 \uff1a\u5c06\u590d\u6742\u67e5\u8be2\u7b80\u5316\u4e3a\u66f4\u57fa\u7840\u7684\u95ee\u9898\uff0c\u4fbf\u4e8e\u68c0\u7d22\u3002 \u8f93\u5165\u53d8\u91cf \uff1a query \uff08\u7528\u6237\u67e5\u8be2\uff09\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u901a\u8fc7\u7b80\u5316\u67e5\u8be2\u964d\u4f4e\u68c0\u7d22\u96be\u5ea6\u3002","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#42","text":"QueryClassifier \u662f EduRAG \u7cfb\u7edf\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u5c06\u7528\u6237\u67e5\u8be2\u5206\u4e3a\u201c\u901a\u7528\u77e5\u8bc6\u201d\u548c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u4e24\u7c7b\uff0c\u4ee5\u51b3\u5b9a\u67e5\u8be2\u8def\u7531\u5230\u77e5\u8bc6\u5e93\u8fd8\u662f\u54a8\u8be2\u63a5\u53e3\u3002\u672c\u6a21\u5757\u4ecb\u7ecd\u57fa\u4e8e BERT \u7684\u4f18\u5316\u5b9e\u73b0\uff0c\u66ff\u6362\u4f20\u7edf TF-IDF \u6a21\u578b\uff0c\u5229\u7528 5000 \u6761\u6df7\u5408\u6570\u636e\u96c6\uff08 training_dataset_hybrid_5000.json \uff09\u8fdb\u884c\u8bad\u7ec3\uff0c\u5e76\u89e3\u51b3\u8bc4\u4f30\u4e2d\u7684\u6807\u7b7e\u5904\u7406\u95ee\u9898\u3002","title":"4.2 \u67e5\u8be2\u5206\u7c7b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_5","text":"QueryClassifier \u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a \u6570\u636e\u52a0\u8f7d \uff1a\u8bfb\u53d6 5000 \u6761 JSON \u6570\u636e\u96c6\uff0c\u5305\u542b\u67e5\u8be2\u548c\u6807\u7b7e\uff08\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6216\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\uff09\u3002 BERT \u8bad\u7ec3 \uff1a\u4f7f\u7528 bert-base-chinese \u6a21\u578b\uff0c\u5fae\u8c03\u4e8c\u5206\u7c7b\u4efb\u52a1\uff0c\u51c6\u786e\u7387\u8fbe 90%+\u3002 \u8bc4\u4f30\u4f18\u5316 \uff1a\u76f4\u63a5\u5904\u7406\u6570\u5b57\u6807\u7b7e\uff080 \u6216 1\uff09\uff0c\u751f\u6210\u5206\u7c7b\u62a5\u544a\u548c\u6df7\u6dc6\u77e9\u9635\u3002 \u9884\u6d4b\u63a5\u53e3 \uff1a\u652f\u6301\u5b9e\u65f6\u5206\u7c7b\uff0c\u96c6\u6210\u5230 EduRAG \u7cfb\u7edf\u3002","title":"\u529f\u80fd\u6982\u8ff0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_6","text":"# \u5bfc\u5165\u6807\u51c6\u5e93 import json import os # \u5bfc\u5165 PyTorch import torch # \u5bfc\u5165\u65e5\u5fd7 from base import logger # \u5bfc\u5165numpy import numpy as np # \u5bfc\u5165 Transformers \u5e93 from transformers import BertTokenizer , BertForSequenceClassification from transformers import Trainer , TrainingArguments # \u5bfc\u5165train_test_split from sklearn.model_selection import train_test_split from sklearn.metrics import classification_report , confusion_matrix class QueryClassifier : def __init__ ( self , model_path = \"bert_query_classifier\" ): # \u521d\u59cb\u5316\u6a21\u578b\u8def\u5f84 self . model_path = model_path # \u52a0\u8f7d BERT \u5206\u8bcd\u5668 self . tokenizer = BertTokenizer . from_pretrained ( \"./bert-base-chinese\" ) # \u521d\u59cb\u5316\u6a21\u578b self . model = None # \u786e\u5b9a\u8bbe\u5907\uff08GPU \u6216 CPU\uff09 self . device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) # \u8bb0\u5f55\u8bbe\u5907\u4fe1\u606f logger . info ( f \"\u4f7f\u7528\u8bbe\u5907: { self . device } \" ) # \u5b9a\u4e49\u6807\u7b7e\u6620\u5c04 self . label_map = { \"\u901a\u7528\u77e5\u8bc6\" : 0 , \"\u4e13\u4e1a\u54a8\u8be2\" : 1 } # \u52a0\u8f7d\u6a21\u578b self . load_model () def load_model ( self ): # \u68c0\u67e5\u6a21\u578b\u8def\u5f84\u662f\u5426\u5b58\u5728 if os . path . exists ( self . model_path ): # \u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b self . model = BertForSequenceClassification . from_pretrained ( self . model_path ) # \u5c06\u6a21\u578b\u79fb\u5230\u6307\u5b9a\u8bbe\u5907 self . model . to ( self . device ) # \u8bb0\u5f55\u52a0\u8f7d\u6210\u529f\u7684\u65e5\u5fd7 logger . info ( f \"\u52a0\u8f7d\u6a21\u578b: { self . model_path } \" ) else : # \u521d\u59cb\u5316\u65b0\u6a21\u578b self . model = BertForSequenceClassification . from_pretrained ( \"bert-base-chinese\" , num_labels = 2 ) # \u5c06\u6a21\u578b\u79fb\u5230\u6307\u5b9a\u8bbe\u5907 self . model . to ( self . device ) # \u8bb0\u5f55\u521d\u59cb\u5316\u6a21\u578b\u7684\u65e5\u5fd7 logger . info ( \"\u521d\u59cb\u5316\u65b0 BERT \u6a21\u578b\" ) def save_model ( self ): \"\"\"\u4fdd\u5b58\u6a21\u578b\"\"\" self . model . save_pretrained ( self . model_path ) self . tokenizer . save_pretrained ( self . model_path ) logger . info ( f \"\u6a21\u578b\u4fdd\u5b58\u81f3: { self . model_path } \" ) def preprocess_data ( self , texts , labels ): \"\"\"\u9884\u5904\u7406\u6570\u636e\u4e3a BERT \u8f93\u5165\u683c\u5f0f\"\"\" encodings = self . tokenizer ( texts , truncation = True , padding = True , max_length = 128 , return_tensors = \"pt\" ) return encodings , [ self . label_map [ label ] for label in labels ] def create_dataset ( self , encodings , labels ): \"\"\"\u521b\u5efa PyTorch \u6570\u636e\u96c6\"\"\" class Dataset ( torch . utils . data . Dataset ): def __init__ ( self , encodings , labels ): self . encodings = encodings self . labels = labels def __getitem__ ( self , idx ): item = { key : val [ idx ] for key , val in self . encodings . items ()} item [ \"labels\" ] = torch . tensor ( self . labels [ idx ]) return item def __len__ ( self ): return len ( self . labels ) return Dataset ( encodings , labels ) def train_model ( self , data_file = \"training_dataset_hybrid_5000.json\" ): \"\"\"\u8bad\u7ec3 BERT \u5206\u7c7b\u6a21\u578b\"\"\" # \u52a0\u8f7d\u6570\u636e\u96c6 if not os . path . exists ( data_file ): logger . error ( f \"\u6570\u636e\u96c6\u6587\u4ef6 { data_file } \u4e0d\u5b58\u5728\" ) raise FileNotFoundError ( f \"\u6570\u636e\u96c6\u6587\u4ef6 { data_file } \u4e0d\u5b58\u5728\" ) with open ( data_file , \"r\" , encoding = \"utf-8\" ) as f : data = [ json . loads ( value ) for value in f . readlines ()] texts = [ item [ \"query\" ] for item in data ] labels = [ item [ \"label\" ] for item in data ] # \u6570\u636e\u5212\u5206 train_texts , val_texts , train_labels , val_labels = train_test_split ( texts , labels , test_size = 0.2 , random_state = 42 ) # \u9884\u5904\u7406 train_encodings , train_labels = self . preprocess_data ( train_texts , train_labels ) val_encodings , val_labels = self . preprocess_data ( val_texts , val_labels ) # \u521b\u5efa\u6570\u636e\u96c6 train_dataset = self . create_dataset ( train_encodings , train_labels ) # print(f'train_dataset--\u300b{train_dataset[0]}') val_dataset = self . create_dataset ( val_encodings , val_labels ) # # \u8bbe\u7f6e\u8bad\u7ec3\u53c2\u6570 training_args = TrainingArguments ( output_dir = \"./bert_results\" , num_train_epochs = 3 , per_device_train_batch_size = 8 , per_device_eval_batch_size = 8 , warmup_steps = 500 , weight_decay = 0.01 , logging_dir = \"./bert_logs\" , logging_steps = 10 , evaluation_strategy = \"epoch\" , save_strategy = \"epoch\" , load_best_model_at_end = True , save_total_limit = 1 , # \u53ea\u4fdd\u5b58\u4e00\u4e2a\u68c0\u67e5\u70b9\uff0c\u5373\u6700\u4f18\u7684\u6a21\u578b metric_for_best_model = \"eval_loss\" , fp16 = False , # \u7981\u7528\u6df7\u5408\u7cbe\u5ea6 ) # \u521d\u59cb\u5316 Trainer trainer = Trainer ( model = self . model , args = training_args , train_dataset = train_dataset , eval_dataset = val_dataset , compute_metrics = self . compute_metrics ) # \u8bad\u7ec3\u6a21\u578b logger . info ( \"\u5f00\u59cb\u8bad\u7ec3 BERT \u6a21\u578b...\" ) trainer . train () self . save_model () # \u8bc4\u4f30\u6a21\u578b self . evaluate_model ( val_texts , val_labels ) def compute_metrics ( self , eval_pred ): \"\"\"\u8ba1\u7b97\u8bc4\u4f30\u6307\u6807\"\"\" logits , labels = eval_pred predictions = np . argmax ( logits , axis =- 1 ) accuracy = ( predictions == labels ) . mean () return { \"accuracy\" : accuracy } def evaluate_model ( self , texts , labels ): \"\"\"\u8bc4\u4f30\u6a21\u578b\u6027\u80fd\"\"\" # \u4ec5\u5bf9 texts \u8fdb\u884c\u5206\u8bcd\uff0clabels \u5df2\u4e3a\u6570\u5b57 encodings = self . tokenizer ( texts , truncation = True , padding = True , max_length = 128 , return_tensors = \"pt\" ) dataset = self . create_dataset ( encodings , labels ) trainer = Trainer ( model = self . model ) predictions = trainer . predict ( dataset ) pred_labels = np . argmax ( predictions . predictions , axis =- 1 ) true_labels = labels # \u76f4\u63a5\u4f7f\u7528\u6570\u5b57\u6807\u7b7e logger . info ( \"\u5206\u7c7b\u62a5\u544a:\" ) logger . info ( classification_report ( true_labels , pred_labels , target_names = [ \"\u901a\u7528\u77e5\u8bc6\" , \"\u4e13\u4e1a\u54a8\u8be2\" ] )) logger . info ( \"\u6df7\u6dc6\u77e9\u9635:\" ) logger . info ( confusion_matrix ( true_labels , pred_labels )) def predict_category ( self , query ): # \u68c0\u67e5\u6a21\u578b\u662f\u5426\u52a0\u8f7d if self . model is None : # \u6a21\u578b\u672a\u52a0\u8f7d\uff0c\u8bb0\u5f55\u9519\u8bef logger . error ( \"\u6a21\u578b\u672a\u8bad\u7ec3\u6216\u52a0\u8f7d\" ) # \u9ed8\u8ba4\u8fd4\u56de\u901a\u7528\u77e5\u8bc6 return \"\u901a\u7528\u77e5\u8bc6\" # \u5bf9\u67e5\u8be2\u8fdb\u884c\u7f16\u7801 encoding = self . tokenizer ( query , truncation = True , padding = True , max_length = 128 , return_tensors = \"pt\" ) # \u5c06\u7f16\u7801\u79fb\u5230\u6307\u5b9a\u8bbe\u5907 encoding = { k : v . to ( self . device ) for k , v in encoding . items ()} # \u4e0d\u8ba1\u7b97\u68af\u5ea6\uff0c\u8fdb\u884c\u9884\u6d4b with torch . no_grad (): # \u83b7\u53d6\u6a21\u578b\u8f93\u51fa outputs = self . model ( ** encoding ) # \u83b7\u53d6\u9884\u6d4b\u7ed3\u679c prediction = torch . argmax ( outputs . logits , dim = 1 ) . item () # \u6839\u636e\u9884\u6d4b\u7ed3\u679c\u8fd4\u56de\u7c7b\u522b return \"\u4e13\u4e1a\u54a8\u8be2\" if prediction == 1 else \"\u901a\u7528\u77e5\u8bc6\" if __name__ == \"__main__\" : # \u521d\u59cb\u5316\u5206\u7c7b\u5668 classifier = QueryClassifier ( model_path = \"bert_query_classifier\" ) # \u8bad\u7ec3\u6a21\u578b # classifier.train_model(data_file='../classify_data/model_generic_5000.json') # \u793a\u4f8b\u9884\u6d4b test_queries = [ \"AI\u5b66\u79d1\u7684\u8bfe\u7a0b\u5927\u7eb2\u662f\u4ec0\u4e48\" , \"JAVA\u8bfe\u7a0b\u8d39\u7528\u591a\u5c11\uff1f\" , \"5*9\u7b49\u4e8e\u591a\u5c11\uff1f\" , \"AI\u57f9\u8bad\u6709\u54ea\u4e9b\u8001\u5e08\uff1f\" ] for query in test_queries : category = classifier . predict_category ( query ) print ( f \"\u67e5\u8be2: { query } -> \u5206\u7c7b: { category } \" )","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_7","text":"__init__ \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u521d\u59cb\u5316 BERT \u5206\u8bcd\u5668\uff08 bert-base-chinese \uff09\u548c\u6a21\u578b\uff0c\u652f\u6301\u4e8c\u5206\u7c7b\u3002 \u4f18\u5316 \uff1a\u8bbe\u5907\u9009\u62e9\u4f18\u5148 CUDA\uff0c\u82e5\u4e0d\u53ef\u7528\u5219\u56de\u9000\u5230 CPU\uff0c\u7981\u7528 MPS\uff08\u9002\u914d macOS \u4f4e\u7248\u672c\uff09\u3002 \u6807\u7b7e\u6620\u5c04 \uff1a\u5b9a\u4e49 label_map = {\"\u901a\u7528\u77e5\u8bc6\": 0, \"\u4e13\u4e1a\u54a8\u8be2\": 1} \uff0c\u7528\u4e8e\u8bad\u7ec3\u65f6\u5b57\u7b26\u4e32\u6807\u7b7e\u8f6c\u6362\u3002 preprocess_data \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u5c06\u67e5\u8be2\u6587\u672c\u5206\u8bcd\u4e3a BERT \u8f93\u5165\uff08ID \u548c\u6ce8\u610f\u529b\u63a9\u7801\uff09\uff0c\u5c06\u5b57\u7b26\u4e32\u6807\u7b7e\u8f6c\u6362\u4e3a\u6570\u5b57\uff080 \u6216 1\uff09\u3002 \u7ec6\u8282 \uff1a\u8bbe\u7f6e max_length=128 \uff0c\u5e73\u8861\u6548\u7387\u548c\u4fe1\u606f\u5b8c\u6574\u6027\u3002 create_dataset \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u6784\u5efa PyTorch \u6570\u636e\u96c6\uff0c\u9002\u914d Trainer \u7684\u8f93\u5165\u683c\u5f0f\u3002 \u5b9e\u73b0 \uff1a\u786e\u4fdd labels \u4e3a\u6570\u5b57\uff0c\u517c\u5bb9\u8bad\u7ec3\u548c\u8bc4\u4f30\u3002 train_model \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u52a0\u8f7d 5000 \u6761\u6570\u636e\u96c6\uff0c\u5212\u5206 80% \u8bad\u7ec3\uff084000 \u6761\uff09\u548c 20% \u9a8c\u8bc1\uff081000 \u6761\uff09\uff0c\u5fae\u8c03 BERT \u6a21\u578b\u3002 \u53c2\u6570 \uff1a num_train_epochs=3 \uff1a\u8bad\u7ec3 3 \u8f6e\uff0c\u9002\u5408\u4e2d\u7b49\u89c4\u6a21\u6570\u636e\u96c6\u3002 per_device_train_batch_size=8 \uff1a\u5e73\u8861\u5185\u5b58\u548c\u901f\u5ea6\u3002 fp16=False \uff1a\u7981\u7528\u6df7\u5408\u7cbe\u5ea6\uff0c\u517c\u5bb9 PyTorch 2.5 \u548c CPU\uff0c\u5982\u679c\u4e3aTrue\uff0c\u91c7\u7528\u6df7\u5408\u7cbe\u5ea6\uff0cGPU\u8bad\u7ec3\u3002 \u6d41\u7a0b \uff1a \u52a0\u8f7d training_dataset_hybrid_5000.json \u3002 \u9884\u5904\u7406\u6570\u636e\uff0c\u5c06\u6807\u7b7e\u8f6c\u6362\u4e3a\u6570\u5b57\u3002 \u4f7f\u7528 Trainer \u8bad\u7ec3\uff0c\u81ea\u52a8\u4fdd\u5b58\u6700\u4f73\u6a21\u578b\u3002 evaluate_model \u65b9\u6cd5\uff08\u4f18\u5316\u91cd\u70b9\uff09 \uff1a \u4f5c\u7528 \uff1a\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8bc4\u4f30\u6a21\u578b\uff0c\u751f\u6210\u5206\u7c7b\u62a5\u544a\u548c\u6df7\u6dc6\u77e9\u9635\u3002 \u4fee\u590d \uff1a \u95ee\u9898\uff1a\u539f\u59cb\u4ee3\u7801\u91cd\u590d\u6620\u5c04\u6570\u5b57\u6807\u7b7e\uff08 0 , 1 \uff09\u5230 label_map \uff0c\u5bfc\u81f4 KeyError: 1 \u3002 \u4fee\u590d\uff1a\u76f4\u63a5\u4f7f\u7528\u4f20\u5165\u7684\u6570\u5b57\u6807\u7b7e\uff08 labels \uff09\uff0c\u4ec5\u5bf9 texts \u5206\u8bcd\u3002 \u903b\u8f91\uff1a true_labels = labels \uff0c\u786e\u4fdd\u4e0e\u9884\u6d4b\u6807\u7b7e\u4e00\u81f4\u3002 \u8f93\u51fa \uff1a\u7cbe\u786e\u7387\u3001\u53ec\u56de\u7387\u3001F1 \u5206\u6570\u548c\u6df7\u6dc6\u77e9\u9635\u3002 predict_category \u65b9\u6cd5 \uff1a \u4f5c\u7528 \uff1a\u5bf9\u5355\u6761\u67e5\u8be2\u5206\u7c7b\uff0c\u8fd4\u56de\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6216\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u3002 \u5b9e\u73b0 \uff1a\u5206\u8bcd\u540e\u901a\u8fc7\u6a21\u578b\u9884\u6d4b\uff0c\u8fd4\u56de\u4eba\u7c7b\u53ef\u8bfb\u6807\u7b7e\u3002","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_8","text":"\u8fd0\u884c\u811a\u672c\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a \u4f7f\u7528\u8bbe\u5907: cpu \u521d\u59cb\u5316\u65b0 BERT \u6a21\u578b \u5f00\u59cb\u8bad\u7ec3 BERT \u6a21\u578b... [1500/1500 25:00, Epoch 3/3] Epoch | Training Loss | Validation Loss | Accuracy 1 | 0.3400 | 0.2100 | 0.9150 2 | 0.1700 | 0.1600 | 0.9300 3 | 0.1100 | 0.1450 | 0.9350 \u6a21\u578b\u4fdd\u5b58\u81f3: bert_query_classifier \u5206\u7c7b\u62a5\u544a: precision recall f1-score support \u901a\u7528\u77e5\u8bc6 0.94 0.92 0.93 500 \u4e13\u4e1a\u54a8\u8be2 0.92 0.94 0.93 500 accuracy 0.93 1000 \u6df7\u6dc6\u77e9\u9635: [[460 40] [ 30 470]] \u67e5\u8be2: \u4ec0\u4e48\u662f\u795e\u7ecf\u7f51\u7edc\uff1f -> \u5206\u7c7b: \u901a\u7528\u77e5\u8bc6 \u67e5\u8be2: JAVA\u8bfe\u7a0b\u8d39\u7528\u591a\u5c11\uff1f -> \u5206\u7c7b: \u4e13\u4e1a\u54a8\u8be2 \u67e5\u8be2: 23+45\u7b49\u4e8e\u591a\u5c11\uff1f -> \u5206\u7c7b: \u901a\u7528\u77e5\u8bc6 \u67e5\u8be2: AI\u57f9\u8bad\u6709\u54ea\u4e9b\u8001\u5e08\uff1f -> \u5206\u7c7b: \u4e13\u4e1a\u54a8\u8be2","title":"\u6267\u884c\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#edurag","text":"# core/rag_system.py class RAGSystem : def __init__ ( self ): self . classifier = QueryClassifier ( model_path = \"bert_query_classifier\" ) self . knowledge_base = KnowledgeBase () self . consulting_service = ConsultingService () def route_query ( self , query ): category = self . classifier . predict_category ( query ) if category == \"\u901a\u7528\u77e5\u8bc6\" : return self . knowledge_base . search ( query ) else : return self . consulting_service . handle ( query )","title":"\u4ee3\u7801\u793a\u4f8b\uff08\u96c6\u6210\u5230 EduRAG\uff09"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/05-prompts%E8%AE%BE%E8%AE%A1%E4%B8%8Equery%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB.html#_9","text":"\u672c\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u4e86 prompts.py \u548c query_classifier.py \u7684\u529f\u80fd\u4e0e\u5b9e\u73b0\uff1a prompts.py \uff1a\u901a\u8fc7 RAGPrompts \u7c7b\u7ba1\u7406\u591a\u79cdPrompt\u6a21\u677f\uff0c\u4f18\u5316\u5927\u8bed\u8a00\u6a21\u578b\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u652f\u6301\u6838\u5fc3\u56de\u7b54\u3001HyDE\u3001\u5b50\u67e5\u8be2\u548c\u56de\u6eaf\u7b56\u7565\u3002 query_classifier.py \uff1a\u901a\u8fc7 QueryClassifier \u7c7b\u5b9e\u73b0\u67e5\u8be2\u5206\u7c7b\uff0c\u533a\u5206\u901a\u7528\u77e5\u8bc6\u548c\u4e13\u4e1a\u54a8\u8be2\uff0c\u51b3\u5b9a\u7cfb\u7edf\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002 \u5b66\u4e60\u8005\u901a\u8fc7\u672c\u7ae0\u8282\u638c\u63e1\u4e86\u5982\u4f55\u901a\u8fc7Prompt\u7ba1\u7406\u548c\u67e5\u8be2\u5206\u7c7b\u63d0\u5347RAG\u7cfb\u7edf\u7684\u667a\u80fd\u6027\u548c\u6548\u7387\uff0c\u4e3a\u540e\u7eed\u7684\u68c0\u7d22\u7b56\u7565\u9009\u62e9\u548c\u6838\u5fc3\u903b\u8f91\u5b9e\u73b0\u505a\u597d\u4e86\u51c6\u5907\u3002","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html","text":"\u68c0\u7d22\u7b56\u7565\u9009\u62e9\u4e0eRAG\u6838\u5fc3\u903b\u8f91 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u638c\u63e1\u5982\u4f55\u6839\u636e\u67e5\u8be2\u7279\u70b9\u52a8\u6001\u9009\u62e9\u6700\u4f18\u7b56\u7565\u3002 \u7406\u89e3RAG\u7cfb\u7edf\u5982\u4f55\u6574\u5408\u67e5\u8be2\u5206\u7c7b\u3001\u68c0\u7d22\u548c\u751f\u6210\u9636\u6bb5\u3002 \u80fd\u591f\u5e94\u7528\u7b56\u7565\u9009\u62e9\u548cRAG\u903b\u8f91\uff0c\u6784\u5efa\u4e00\u4e2a\u4ece\u8f93\u5165\u5904\u7406\u5230\u7b54\u6848\u751f\u6210\u7684\u9ad8\u6548\u7cfb\u7edf\u3002 strategy_selector.py \u548c rag_system.py \u662fEduRAG\u7cfb\u7edf\u4e2d core \u6a21\u5757\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u5206\u522b\u8d1f\u8d23\u68c0\u7d22\u7b56\u7565\u7684\u9009\u62e9\u548cRAG\u7cfb\u7edf\u7684\u6574\u4f53\u903b\u8f91\u6574\u5408\u3002 strategy_selector.py \u901a\u8fc7\u5927\u8bed\u8a00\u6a21\u578b\u52a8\u6001\u9009\u62e9\u9002\u5408\u7528\u6237\u67e5\u8be2\u7684\u68c0\u7d22\u7b56\u7565\uff0c\u800c rag_system.py \u5219\u5c06\u524d\u51e0\u7ae0\u4ecb\u7ecd\u7684\u6a21\u5757\uff08\u5982\u5411\u91cf\u5b58\u50a8\u3001Prompt\u7ba1\u7406\u548c\u67e5\u8be2\u5206\u7c7b\uff09\u6574\u5408\u8d77\u6765\uff0c\u5b8c\u6210\u4ece\u67e5\u8be2\u8f93\u5165\u5230\u7b54\u6848\u751f\u6210\u7684\u5b8c\u6574\u6d41\u7a0b\u3002\u8fd9\u4e24\u4e2a\u6a21\u5757\u5171\u540c\u786e\u4fdd\u7cfb\u7edf\u80fd\u591f\u9ad8\u6548\u3001\u51c6\u786e\u5730\u54cd\u5e94\u7528\u6237\u7684\u5404\u79cd\u67e5\u8be2\u3002 6.1 \u68c0\u7d22\u7b56\u7565\u9009\u62e9 \u00b6 \u529f\u80fd\u6982\u8ff0 \u00b6 strategy_selector.py \u5b9a\u4e49\u4e86 StrategySelector \u7c7b\uff0c\u901a\u8fc7\u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u6839\u636e\u7528\u6237\u67e5\u8be2\u9009\u62e9\u6700\u5408\u9002\u7684\u68c0\u7d22\u7b56\u7565\u3002\u652f\u6301\u7684\u7b56\u7565\u5305\u62ec\u76f4\u63a5\u68c0\u7d22\u3001HyDE\uff08\u5047\u8bbe\u95ee\u9898\u68c0\u7d22\uff09\u3001\u5b50\u67e5\u8be2\u68c0\u7d22\u548c\u56de\u6eaf\u95ee\u9898\u68c0\u7d22\uff0c\u65e8\u5728\u4f18\u5316\u68c0\u7d22\u9636\u6bb5\u7684\u8f93\u5165\u5904\u7406\u3002 \u4ee3\u7801\u793a\u4f8b \u00b6 # core/strategy_selector.py \u6e90\u7801 # \u5bfc\u5165 LangChain \u63d0\u793a\u6a21\u677f from langchain.prompts import PromptTemplate # \u5bfc\u5165\u65e5\u5fd7\u548c\u914d\u7f6e from base import logger , Config # \u5bfc\u5165 OpenAI from openai import OpenAI class StrategySelector : def __init__ ( self ): # \u521d\u59cb\u5316 OpenAI \u5ba2\u6237\u7aef self . client = OpenAI ( api_key = Config () . DASHSCOPE_API_KEY , base_url = Config () . DASHSCOPE_BASE_URL ) # \u83b7\u53d6\u7b56\u7565\u9009\u62e9\u63d0\u793a\u6a21\u677f self . strategy_prompt_template = self . _get_strategy_prompt () def call_dashscope ( self , prompt ): # \u8c03\u7528 DashScope API try : # \u521b\u5efa\u804a\u5929\u5b8c\u6210\u8bf7\u6c42 completion = self . client . chat . completions . create ( model = Config () . LLM_MODEL , messages = [ { \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\u3002\" }, { \"role\" : \"user\" , \"content\" : prompt }, ], temperature = 0.1 ) # \u8fd4\u56de\u5b8c\u6210\u7ed3\u679c return completion . choices [ 0 ] . message . content if completion . choices else \"\u76f4\u63a5\u68c0\u7d22\" except Exception as e : # \u8bb0\u5f55 API \u8c03\u7528\u5931\u8d25 logger . error ( f \"DashScope API \u8c03\u7528\u5931\u8d25: { e } \" ) # \u9ed8\u8ba4\u8fd4\u56de\u76f4\u63a5\u68c0\u7d22 return \"\u76f4\u63a5\u68c0\u7d22\" def _get_strategy_prompt ( self ): # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u83b7\u53d6\u7b56\u7565\u9009\u62e9 Prompt \u6a21\u677f return PromptTemplate ( template = \"\"\" \u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\uff0c\u8d1f\u8d23\u5206\u6790\u7528\u6237\u67e5\u8be2 {query} \uff0c\u5e76\u4ece\u4ee5\u4e0b\u56db\u79cd\u68c0\u7d22\u589e\u5f3a\u7b56\u7565\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u9002\u5408\u7684\u7b56\u7565\uff0c\u76f4\u63a5\u8fd4\u56de\u7b56\u7565\u540d\u79f0\uff0c\u4e0d\u9700\u8981\u89e3\u91ca\u8fc7\u7a0b\u3002 \u4ee5\u4e0b\u662f\u51e0\u79cd\u68c0\u7d22\u589e\u5f3a\u7b56\u7565\u53ca\u5176\u9002\u7528\u573a\u666f\uff1a 1. **\u76f4\u63a5\u68c0\u7d22\uff1a** * \u63cf\u8ff0\uff1a\u5bf9\u7528\u6237\u67e5\u8be2\u76f4\u63a5\u8fdb\u884c\u68c0\u7d22\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u589e\u5f3a\u5904\u7406\u3002 * \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u67e5\u8be2\u610f\u56fe\u660e\u786e\uff0c\u9700\u8981\u4ece\u77e5\u8bc6\u5e93\u4e2d\u68c0\u7d22**\u7279\u5b9a\u4fe1\u606f**\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a * \u793a\u4f8b\uff1a * \u67e5\u8be2\uff1aAI \u5b66\u79d1\u5b66\u8d39\u662f\u591a\u5c11\uff1f * \u7b56\u7565\uff1a\u76f4\u63a5\u68c0\u7d22 * \u67e5\u8be2\uff1aJAVA\u7684\u8bfe\u7a0b\u5927\u7eb2\u662f\u4ec0\u4e48\uff1f * \u7b56\u7565\uff1a\u76f4\u63a5\u68c0\u7d22 2. **\u5047\u8bbe\u95ee\u9898\u68c0\u7d22\uff08HyDE\uff09\uff1a** * \u63cf\u8ff0\uff1a\u4f7f\u7528 LLM \u751f\u6210\u4e00\u4e2a\u5047\u8bbe\u7684\u7b54\u6848\uff0c\u7136\u540e\u57fa\u4e8e\u5047\u8bbe\u7b54\u6848\u8fdb\u884c\u68c0\u7d22\u3002 * \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u67e5\u8be2\u8f83\u4e3a\u62bd\u8c61\uff0c\u76f4\u63a5\u68c0\u7d22\u6548\u679c\u4e0d\u4f73\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a * \u793a\u4f8b\uff1a * \u67e5\u8be2\uff1a\u4eba\u5de5\u667a\u80fd\u5728\u6559\u80b2\u9886\u57df\u7684\u5e94\u7528\u6709\u54ea\u4e9b\uff1f * \u7b56\u7565\uff1a\u5047\u8bbe\u95ee\u9898\u68c0\u7d22 3. **\u5b50\u67e5\u8be2\u68c0\u7d22\uff1a** * \u63cf\u8ff0\uff1a\u5c06\u590d\u6742\u7684\u7528\u6237\u67e5\u8be2\u62c6\u5206\u4e3a\u591a\u4e2a\u7b80\u5355\u7684\u5b50\u67e5\u8be2\uff0c\u5206\u522b\u68c0\u7d22\u5e76\u5408\u5e76\u7ed3\u679c\u3002 * \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u67e5\u8be2\u6d89\u53ca\u591a\u4e2a\u5b9e\u4f53\u6216\u65b9\u9762\uff0c\u9700\u8981\u5206\u522b\u68c0\u7d22\u4e0d\u540c\u4fe1\u606f\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a * \u793a\u4f8b\uff1a * \u67e5\u8be2\uff1a\u6bd4\u8f83 Milvus \u548c Zilliz Cloud \u7684\u4f18\u7f3a\u70b9\u3002 * \u7b56\u7565\uff1a\u5b50\u67e5\u8be2\u68c0\u7d22 4. **\u56de\u6eaf\u95ee\u9898\u68c0\u7d22\uff1a** * \u63cf\u8ff0\uff1a\u5c06\u590d\u6742\u7684\u7528\u6237\u67e5\u8be2\u8f6c\u5316\u4e3a\u66f4\u57fa\u7840\u3001\u66f4\u6613\u4e8e\u68c0\u7d22\u7684\u95ee\u9898\uff0c\u7136\u540e\u8fdb\u884c\u68c0\u7d22\u3002 * \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u67e5\u8be2\u8f83\u4e3a\u590d\u6742\uff0c\u9700\u8981\u7b80\u5316\u540e\u624d\u80fd\u6709\u6548\u68c0\u7d22\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a * \u793a\u4f8b\uff1a * \u67e5\u8be2\uff1a\u6211\u6709\u4e00\u4e2a\u5305\u542b 100 \u4ebf\u6761\u8bb0\u5f55\u7684\u6570\u636e\u96c6\uff0c\u60f3\u628a\u5b83\u5b58\u50a8\u5230 Milvus \u4e2d\u8fdb\u884c\u67e5\u8be2\u3002\u53ef\u4ee5\u5417\uff1f * \u7b56\u7565\uff1a\u56de\u6eaf\u95ee\u9898\u68c0\u7d22 \u6839\u636e\u7528\u6237\u67e5\u8be2 {query} \uff0c\u76f4\u63a5\u8fd4\u56de\u6700\u9002\u5408\u7684\u7b56\u7565\u540d\u79f0\uff0c\u4f8b\u5982 \"\u76f4\u63a5\u68c0\u7d22\"\u3002\u4e0d\u8981\u8f93\u51fa\u4efb\u4f55\u5206\u6790\u8fc7\u7a0b\u6216\u5176\u4ed6\u5185\u5bb9\u3002 \"\"\" , input_variables = [ \"query\" ], ) # \u5b9a\u4e49\u65b9\u6cd5\uff0c\u9009\u62e9\u68c0\u7d22\u7b56\u7565 def select_strategy ( self , query ): # \u8c03\u7528 LLM \u83b7\u53d6\u68c0\u7d22\u7b56\u7565 strategy = self . call_dashscope ( self . strategy_prompt_template . format ( query = query )) . strip () logger . info ( f \"\u4e3a\u67e5\u8be2 ' { query } ' \u9009\u62e9\u7684\u68c0\u7d22\u7b56\u7565\uff1a { strategy } \" ) return strategy if __name__ == '__main__' : ss = StrategySelector () ss . select_strategy ( '\u4f60\u597d\u5417' ) \u5b9e\u73b0\u7ec6\u8282 \u00b6 __init__ \uff1a \u4f5c\u7528 \uff1a\u521d\u59cb\u5316DashScope\u5ba2\u6237\u7aef\u548c\u7b56\u7565\u9009\u62e9Prompt\u3002 \u903b\u8f91 \uff1a\u8fde\u63a5\u5927\u8bed\u8a00\u6a21\u578bAPI\uff0c\u51c6\u5907Prompt\u6a21\u677f\u3002 call_dashscope \uff1a \u4f5c\u7528 \uff1a\u5c01\u88c5DashScope API\u8c03\u7528\uff0c\u5904\u7406\u5f02\u5e38\u5e76\u8fd4\u56de\u6a21\u578b\u8f93\u51fa\u3002 \u903b\u8f91 \uff1a\u786e\u4fddAPI\u8c03\u7528\u7684\u9c81\u68d2\u6027\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u3002 _get_strategy_prompt \uff1a \u4f5c\u7528 \uff1a\u5b9a\u4e49\u7528\u4e8e\u7b56\u7565\u9009\u62e9\u7684Prompt\u6a21\u677f\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u7b80\u6d01\u63cf\u8ff0\u56db\u79cd\u7b56\u7565\u53ca\u5176\u9002\u7528\u573a\u666f\uff0c\u8981\u6c42\u6a21\u578b\u76f4\u63a5\u8fd4\u56de\u7b56\u7565\u540d\u79f0\u3002 select_strategy \uff1a \u4f5c\u7528 \uff1a\u6839\u636e\u67e5\u8be2\u8c03\u7528\u6a21\u578b\u9009\u62e9\u7b56\u7565\u5e76\u8fd4\u56de\u3002 \u903b\u8f91 \uff1a\u8bb0\u5f55\u9009\u62e9\u7684\u7b56\u7565\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u3002 \u8bf4\u660e \u00b6 \u52a8\u6001\u9009\u62e9 \uff1a\u5229\u7528\u5927\u8bed\u8a00\u6a21\u578b\u7684\u8bed\u4e49\u7406\u89e3\u80fd\u529b\uff0c\u7075\u6d3b\u9002\u5e94\u4e0d\u540c\u67e5\u8be2\u3002 \u7b56\u7565\u591a\u6837\u6027 \uff1a\u652f\u6301\u56db\u79cd\u7b56\u7565\uff0c\u8986\u76d6\u5e38\u89c1\u67e5\u8be2\u573a\u666f\u3002 \u6548\u7387 \uff1a\u76f4\u63a5\u8fd4\u56de\u7b56\u7565\u540d\u79f0\uff0c\u907f\u514d\u5197\u4f59\u8f93\u51fa\u3002 6.2 RAG\u6838\u5fc3\u903b\u8f91 \u00b6 \u529f\u80fd\u6982\u8ff0 \u00b6 rag_system.py \u5b9a\u4e49\u4e86 RAGSystem \u7c7b\uff0c\u6574\u5408\u7cfb\u7edf\u7684\u5404\u4e2a\u6a21\u5757\uff0c\u5b8c\u6210\u4ece\u67e5\u8be2\u8f93\u5165\u5230\u7b54\u6848\u751f\u6210\u7684\u5b8c\u6574\u6d41\u7a0b\u3002\u5b83\u901a\u8fc7\u67e5\u8be2\u5206\u7c7b\u9009\u62e9\u5904\u7406\u8def\u5f84\uff0c\u5229\u7528\u68c0\u7d22\u7b56\u7565\u4f18\u5316\u6587\u6863\u68c0\u7d22\uff0c\u5e76\u7ed3\u5408\u4e0a\u4e0b\u6587\u751f\u6210\u6700\u7ec8\u7b54\u6848\u3002 \u4ee3\u7801\u793a\u4f8b \u00b6 # core/rag_system.py \u6e90\u7801 from prompts import RAGPrompts # \u5bfc\u5165 time \u6a21\u5757\uff0c\u7528\u4e8e\u8ba1\u7b97\u65f6\u95f4 import time from base import logger , Config from query_classifier import QueryClassifier # \u5bfc\u5165\u67e5\u8be2\u5206\u7c7b\u5668 from strategy_selector import StrategySelector # \u5bfc\u5165\u7b56\u7565\u9009\u62e9\u5668 conf = Config () # \u5b9a\u4e49 RAGSystem \u7c7b\uff0c\u5c01\u88c5 RAG \u7cfb\u7edf\u7684\u6838\u5fc3\u903b\u8f91 class RAGSystem : # \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u8bbe\u7f6e RAG \u7cfb\u7edf\u7684\u57fa\u672c\u53c2\u6570 def __init__ ( self , vector_store , llm ): # \u8bbe\u7f6e\u5411\u91cf\u6570\u636e\u5e93\u5bf9\u8c61 self . vector_store = vector_store # \u8bbe\u7f6e\u5927\u8bed\u8a00\u6a21\u578b\u8c03\u7528\u51fd\u6570 self . llm = llm # \u83b7\u53d6 RAG \u63d0\u793a\u6a21\u677f self . rag_prompt = RAGPrompts . rag_prompt () # \u521d\u59cb\u5316\u67e5\u8be2\u5206\u7c7b\u5668 self . query_classifier = QueryClassifier ( model_path = './core/bert_query_classifier' ) # \u521d\u59cb\u5316\u7b56\u7565\u9009\u62e9\u5668 self . strategy_selector = StrategySelector () # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4f7f\u7528\u5047\u8bbe\u6587\u6863\u8fdb\u884c\u68c0\u7d22\uff08HyDE\uff09 def _retrieve_with_hyde ( self , query ): logger . info ( f \"\u4f7f\u7528 HyDE \u7b56\u7565\u8fdb\u884c\u68c0\u7d22 (\u67e5\u8be2: ' { query } ')\" ) # \u83b7\u53d6\u5047\u8bbe\u95ee\u9898\u751f\u6210\u7684 Prompt \u6a21\u677f hyde_prompt_template = RAGPrompts . hyde_prompt () # \u4f7f\u7528 template \u540e\u7f00\u533a\u5206 # \u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u5047\u8bbe\u7b54\u6848 try : hypo_answer = self . llm ( hyde_prompt_template . format ( query = query )) . strip () logger . info ( f \"HyDE \u751f\u6210\u7684\u5047\u8bbe\u7b54\u6848: ' { hypo_answer } '\" ) # \u4f7f\u7528\u5047\u8bbe\u7b54\u6848\u8fdb\u884c\u68c0\u7d22\uff0c\u5e76\u8fd4\u56de\u68c0\u7d22\u7ed3\u679c # \u6ce8\u610f\uff1aHyDE \u901a\u5e38\u53ea\u7528\u4e8e\u751f\u6210\u68c0\u7d22\u5411\u91cf\uff0c\u4e0d\u4e00\u5b9a\u9700\u8981 rerank \u8fd9\u4e00\u6b65\uff0c\u4f46\u8fd9\u91cc\u590d\u7528\u4e86 return self . vector_store . hybrid_search_with_rerank ( hypo_answer , k = conf . RETRIEVAL_K # \u4f7f\u7528 K \u800c\u975e M ) except Exception as e : logger . error ( f \"HyDE \u7b56\u7565\u6267\u884c\u5931\u8d25: { e } \" ) return [] # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4f7f\u7528\u5b50\u67e5\u8be2\u8fdb\u884c\u68c0\u7d22 def _retrieve_with_subqueries ( self , query ): logger . info ( f \"\u4f7f\u7528\u5b50\u67e5\u8be2\u7b56\u7565\u8fdb\u884c\u68c0\u7d22 (\u67e5\u8be2: ' { query } ')\" ) # \u83b7\u53d6\u5b50\u67e5\u8be2\u751f\u6210\u7684 Prompt \u6a21\u677f subquery_prompt_template = RAGPrompts . subquery_prompt () # \u4f7f\u7528 template \u540e\u7f00\u533a\u5206 try : # \u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u5b50\u67e5\u8be2\u5217\u8868 subqueries_text = self . llm ( subquery_prompt_template . format ( query = query )) . strip () subqueries = [ q . strip () for q in subqueries_text . split ( \" \\n \" ) if q . strip ()] logger . info ( f \"\u751f\u6210\u7684\u5b50\u67e5\u8be2: { subqueries } \" ) if not subqueries : logger . warning ( \"\u672a\u80fd\u751f\u6210\u6709\u6548\u7684\u5b50\u67e5\u8be2\" ) return [] # \u521d\u59cb\u5316\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u5b50\u67e5\u8be2\u7684\u68c0\u7d22\u7ed3\u679c all_docs = [] # \u904d\u5386\u6bcf\u4e2a\u5b50\u67e5\u8be2 for sub_q in subqueries : # \u4f7f\u7528\u5b50\u67e5\u8be2\u8fdb\u884c\u68c0\u7d22\uff0c\u5e76\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u5217\u8868\u4e2d # \u8fd9\u91cc\u5bf9\u6bcf\u4e2a\u5b50\u67e5\u8be2\u90fd\u6267\u884c\u4e86 hybrid search + rerank\uff0c\u5f00\u9500\u53ef\u80fd\u8f83\u5927 docs = self . vector_store . hybrid_search_with_rerank ( sub_q , k = conf . RETRIEVAL_K # \u4f7f\u7528 K ) all_docs . extend ( docs ) logger . info ( f \"\u5b50\u67e5\u8be2 ' { sub_q } ' \u68c0\u7d22\u5230 { len ( docs ) } \u4e2a\u6587\u6863\" ) # \u5bf9\u6240\u6709\u68c0\u7d22\u7ed3\u679c\u8fdb\u884c\u53bb\u91cd (\u57fa\u4e8e\u5bf9\u8c61\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c Document \u5185\u5bb9\u76f8\u540c\u4f46\u5bf9\u8c61\u4e0d\u540c\u5219\u65e0\u6cd5\u53bb\u91cd) # \u66f4\u53ef\u9760\u7684\u53bb\u91cd\u65b9\u5f0f\u662f\u57fa\u4e8e\u6587\u6863\u5185\u5bb9\u6216 ID unique_docs_dict = { doc . page_content : doc for doc in all_docs } # \u57fa\u4e8e\u5185\u5bb9\u53bb\u91cd unique_docs = list ( unique_docs_dict . values ()) logger . info ( f \"\u6240\u6709\u5b50\u67e5\u8be2\u5171\u68c0\u7d22\u5230 { len ( all_docs ) } \u4e2a\u6587\u6863, \u53bb\u91cd\u540e\u5269 { len ( unique_docs ) } \u4e2a\" ) # \u8fd4\u56de\u53bb\u91cd\u540e\u7684\u6587\u6863\uff0c\u9650\u5236\u6570\u91cf (\u662f\u5426\u9700\u8981\u5728\u6b64\u5904\u9650\u5236? retrieve_and_merge \u672b\u5c3e\u4f1a\u9650\u5236) # return unique_docs[: Config.CANDIDATE_M] return unique_docs # \u8fd4\u56de\u6240\u6709\u552f\u4e00\u6587\u6863\uff0c\u8ba9 retrieve_and_merge \u5904\u7406\u6570\u91cf except Exception as e : logger . error ( f \"\u5b50\u67e5\u8be2\u7b56\u7565\u6267\u884c\u5931\u8d25: { e } \" ) return [] # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4f7f\u7528\u56de\u6eaf\u95ee\u9898\u8fdb\u884c\u68c0\u7d22 def _retrieve_with_backtracking ( self , query ): logger . info ( f \"\u4f7f\u7528\u56de\u6eaf\u95ee\u9898\u7b56\u7565\u8fdb\u884c\u68c0\u7d22 (\u67e5\u8be2: ' { query } ')\" ) # \u83b7\u53d6\u56de\u6eaf\u95ee\u9898\u751f\u6210\u7684 Prompt \u6a21\u677f backtrack_prompt_template = RAGPrompts . backtracking_prompt () # \u4f7f\u7528 template \u540e\u7f00\u533a\u5206 try : # \u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u56de\u6eaf\u95ee\u9898 simplified_query = self . llm ( backtrack_prompt_template . format ( query = query )) . strip () logger . info ( f \"\u751f\u6210\u7684\u56de\u6eaf\u95ee\u9898: ' { simplified_query } '\" ) # \u4f7f\u7528\u56de\u6eaf\u95ee\u9898\u8fdb\u884c\u68c0\u7d22\uff0c\u5e76\u8fd4\u56de\u68c0\u7d22\u7ed3\u679c return self . vector_store . hybrid_search_with_rerank ( simplified_query , k = conf . RETRIEVAL_K # \u4f7f\u7528 K ) except Exception as e : logger . error ( f \"\u56de\u6eaf\u95ee\u9898\u7b56\u7565\u6267\u884c\u5931\u8d25: { e } \" ) return [] # \u5b9a\u4e49\u65b9\u6cd5\uff0c\u68c0\u7d22\u5e76\u5408\u5e76\u76f8\u5173\u6587\u6863 def retrieve_and_merge ( self , query , source_filter = None , strategy = None ): # \u65b0\u589e strategy \u53c2\u6570 # \u5982\u679c\u672a\u6307\u5b9a\u68c0\u7d22\u7b56\u7565\uff0c\u5219\u4f7f\u7528\u7b56\u7565\u9009\u62e9\u5668\u9009\u62e9 if not strategy : strategy = self . strategy_selector . select_strategy ( query ) # \u6839\u636e\u68c0\u7d22\u7b56\u7565\u9009\u62e9\u4e0d\u540c\u7684\u68c0\u7d22\u65b9\u5f0f ranked_sub_chunks = [] # \u521d\u59cb\u5316 if strategy == \"\u56de\u6eaf\u95ee\u9898\u68c0\u7d22\" : ranked_sub_chunks = self . _retrieve_with_backtracking ( query ) elif strategy == \"\u5b50\u67e5\u8be2\u68c0\u7d22\" : ranked_sub_chunks = self . _retrieve_with_subqueries ( query ) # \u8fd4\u56de\u7684\u662f\u552f\u4e00\u6587\u6863\u5217\u8868 # \u6ce8\u610f\uff1a\u5b50\u67e5\u8be2\u8fd4\u56de\u7684\u662f\u5df2 rerank \u8fc7\u7684\u7236\u6587\u6863\u6216\u5b50\u5757\u5217\u8868\uff0c\u540e\u7eed\u5408\u5e76\u903b\u8f91\u53ef\u80fd\u9700\u8981\u8c03\u6574 # \u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c\u5b50\u67e5\u8be2\u8fd4\u56de\u7684\u662f\u521d\u6b65\u68c0\u7d22\uff08\u53ef\u80fd\u5df2rerank\uff09\u7684\u5757\uff0c\u518d\u8fdb\u884c\u5408\u5e76 elif strategy == \"\u5047\u8bbe\u95ee\u9898\u68c0\u7d22\" : ranked_sub_chunks = self . _retrieve_with_hyde ( query ) else : # \u9ed8\u8ba4\u6216\u201c\u76f4\u63a5\u68c0\u7d22\u201d logger . info ( f \"\u4f7f\u7528\u76f4\u63a5\u68c0\u7d22\u7b56\u7565 (\u67e5\u8be2: ' { query } ')\" ) ranked_sub_chunks = self . vector_store . hybrid_search_with_rerank ( query , k = conf . RETRIEVAL_K , source_filter = source_filter ) # \u6ce8\u610f hybrid_search_with_rerank \u8fd4\u56de\u7684\u662f rerank \u540e\u7684\u7236\u6587\u6863 logger . info ( f \"\u7b56\u7565 ' { strategy } ' \u68c0\u7d22\u5230 { len ( ranked_sub_chunks ) } \u4e2a\u5019\u9009\u6587\u6863 (\u53ef\u80fd\u5df2\u662f\u7236\u6587\u6863)\" ) final_context_docs = ranked_sub_chunks [: conf . CANDIDATE_M ] logger . info ( f \"\u6700\u7ec8\u9009\u53d6 { len ( final_context_docs ) } \u4e2a\u6587\u6863\u4f5c\u4e3a\u4e0a\u4e0b\u6587\" ) return final_context_docs # \u5b9a\u4e49\u65b9\u6cd5\uff0c\u751f\u6210\u7b54\u6848 def generate_answer ( self , query , source_filter = None ): # \u8bb0\u5f55\u67e5\u8be2\u5f00\u59cb\u65f6\u95f4 start_time = time . time () logger . info ( f \"\u5f00\u59cb\u5904\u7406\u67e5\u8be2: ' { query } ', \u5b66\u79d1\u8fc7\u6ee4: { source_filter } \" ) # \u5224\u65ad\u67e5\u8be2\u7c7b\u578b query_category = self . query_classifier . predict_category ( query ) logger . info ( f \"\u67e5\u8be2\u5206\u7c7b\u7ed3\u679c\uff1a { query_category } (\u67e5\u8be2: ' { query } ')\" ) # \u5982\u679c\u67e5\u8be2\u5c5e\u4e8e\u201c\u901a\u7528\u77e5\u8bc6\u201d\u7c7b\u522b\uff0c\u5219\u76f4\u63a5\u4f7f\u7528 LLM \u56de\u7b54 if query_category == \"\u901a\u7528\u77e5\u8bc6\" : logger . info ( \"\u67e5\u8be2\u4e3a\u901a\u7528\u77e5\u8bc6\uff0c\u76f4\u63a5\u8c03\u7528 LLM\" ) prompt_input = self . rag_prompt . format ( context = \"\" , question = query , phone = conf . CUSTOMER_SERVICE_PHONE ) # \u4e0d\u4f7f\u7528\u4e0a\u4e0b\u6587 try : answer = self . llm ( prompt_input ) except Exception as e : logger . error ( f \"\u76f4\u63a5\u8c03\u7528 LLM \u5931\u8d25: { e } \" ) answer = f \"\u62b1\u6b49\uff0c\u5904\u7406\u60a8\u7684\u901a\u7528\u77e5\u8bc6\u95ee\u9898\u65f6\u51fa\u9519\u3002\u8bf7\u8054\u7cfb\u4eba\u5de5\u5ba2\u670d\uff1a { conf . CUSTOMER_SERVICE_PHONE } \" processing_time = time . time () - start_time logger . info ( f \"\u901a\u7528\u77e5\u8bc6\u67e5\u8be2\u5904\u7406\u5b8c\u6210 (\u8017\u65f6: { processing_time : .2f } s, \u67e5\u8be2: ' { query } ')\" ) return answer # \u5426\u5219\uff0c\u8fdb\u884c RAG \u68c0\u7d22\u5e76\u751f\u6210\u7b54\u6848 logger . info ( \"\u67e5\u8be2\u4e3a\u4e13\u4e1a\u54a8\u8be2\uff0c\u6267\u884c RAG \u6d41\u7a0b\" ) # \u9009\u62e9\u68c0\u7d22\u7b56\u7565 strategy = self . strategy_selector . select_strategy ( query ) # \u68c0\u7d22\u76f8\u5173\u6587\u6863 context_docs = self . retrieve_and_merge ( query , source_filter = source_filter , strategy = strategy ) # \u4f20\u9012 strategy # \u51c6\u5907\u4e0a\u4e0b\u6587 if context_docs : context = \" \\n\\n \" . join ([ doc . page_content for doc in context_docs ]) # \u4f7f\u7528\u6362\u884c\u7b26\u5206\u9694\u6587\u6863 logger . info ( f \"\u6784\u5efa\u4e0a\u4e0b\u6587\u5b8c\u6210\uff0c\u5305\u542b { len ( context_docs ) } \u4e2a\u6587\u6863\u5757\" ) # logger.debug(f\"\u4e0a\u4e0b\u6587\u5185\u5bb9:\\n{context[:500]}...\") # Debug \u65e5\u5fd7\u53ef\u4ee5\u6253\u5370\u90e8\u5206\u4e0a\u4e0b\u6587 else : context = \"\" logger . info ( \"\u672a\u68c0\u7d22\u5230\u76f8\u5173\u6587\u6863\uff0c\u4e0a\u4e0b\u6587\u4e3a\u7a7a\" ) # \u6784\u9020 Prompt\uff0c\u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7b54\u6848 prompt_input = self . rag_prompt . format ( context = context , question = query , phone = conf . CUSTOMER_SERVICE_PHONE ) # logger.debug(f\"\u6700\u7ec8\u751f\u6210\u7684 Prompt:\\n{prompt_input}\") # Debug \u65e5\u5fd7 try : answer = self . llm ( prompt_input ) except Exception as e : logger . error ( f \"\u8c03\u7528 LLM \u751f\u6210\u6700\u7ec8\u7b54\u6848\u5931\u8d25: { e } \" ) answer = f \"\u62b1\u6b49\uff0c\u5904\u7406\u60a8\u7684\u4e13\u4e1a\u54a8\u8be2\u95ee\u9898\u65f6\u51fa\u9519\u3002\u8bf7\u8054\u7cfb\u4eba\u5de5\u5ba2\u670d\uff1a { conf . CUSTOMER_SERVICE_PHONE } \" # \u8bb0\u5f55\u67e5\u8be2\u5904\u7406\u5b8c\u6210\u7684\u65e5\u5fd7 processing_time = time . time () - start_time logger . info ( f \"\u67e5\u8be2\u5904\u7406\u5b8c\u6210 (\u8017\u65f6: { processing_time : .2f } s, \u67e5\u8be2: ' { query } ')\" ) return answer \u5b9e\u73b0\u7ec6\u8282 \u00b6 init \uff1a \u4f5c\u7528 \uff1a\u521d\u59cb\u5316RAG\u7cfb\u7edf\uff0c\u6574\u5408\u5411\u91cf\u5b58\u50a8\u3001\u5927\u8bed\u8a00\u6a21\u578b\u548c\u5176\u4ed6\u6838\u5fc3\u7ec4\u4ef6\u3002 \u4f9d\u8d56 \uff1a\u4f9d\u8d56VectorStore\u3001RAGPrompts\u3001QueryClassifier\u548cStrategySelector\u3002 _retrieve_with_hyde \uff1a \u4f5c\u7528 \uff1a\u751f\u6210\u5047\u8bbe\u7b54\u6848\u5e76\u8c03\u7528\u6df7\u5408\u68c0\u7d22\uff0c\u9002\u5408\u62bd\u8c61\u67e5\u8be2\u3002 \u903b\u8f91 \uff1a\u4f7f\u7528hyde_prompt\u751f\u6210\u5047\u8bbe\u7b54\u6848\uff0c\u4f20\u9012\u7ed9hybrid_search_with_rerank\u3002 _retrieve_with_subqueries \uff1a \u4f5c\u7528 \uff1a\u5206\u89e3\u67e5\u8be2\u4e3a\u5b50\u67e5\u8be2\uff0c\u5206\u522b\u68c0\u7d22\u5e76\u53bb\u91cd\u3002 \u903b\u8f91 \uff1a\u4f7f\u7528subquery_prompt\u5206\u89e3\u67e5\u8be2\uff0c\u5408\u5e76\u7ed3\u679c\u5e76\u9650\u5236\u6570\u91cf\u3002 _retrieve_with_backtracking \uff1a \u4f5c\u7528 \uff1a\u7b80\u5316\u67e5\u8be2\u540e\u68c0\u7d22\uff0c\u964d\u4f4e\u590d\u6742\u5ea6\u3002 \u903b\u8f91 \uff1a\u4f7f\u7528backtracking_prompt\u7b80\u5316\u67e5\u8be2\uff0c\u8c03\u7528\u6df7\u5408\u68c0\u7d22\u3002 retrieve_and_merge \uff1a \u4f5c\u7528 \uff1a\u6839\u636e\u7b56\u7565\u9009\u62e9\u6267\u884c\u68c0\u7d22\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u3002 \u4f18\u5316 \uff1a\u79fb\u9664\u5197\u4f59\u7684\u5408\u5e76\u903b\u8f91\uff0c\u76f4\u63a5\u4f7f\u7528hybrid_search_with_rerank\u7684\u7ed3\u679c\uff08\u53bb\u91cd\u7684\u7236\u6587\u6863\uff09\u3002 generate_answer \uff1a \u4f5c\u7528 \uff1a\u6574\u5408\u5206\u7c7b\u3001\u68c0\u7d22\u548c\u751f\u6210\uff0c\u8f93\u51fa\u6700\u7ec8\u7b54\u6848\u3002 \u6d41\u7a0b\uff1a \u4f7f\u7528QueryClassifier\u5224\u65ad\u67e5\u8be2\u7c7b\u578b\u3002 \u201c\u901a\u7528\u77e5\u8bc6\u201d\u76f4\u63a5\u751f\u6210\u7b54\u6848\uff0c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u89e6\u53d1\u68c0\u7d22\u3002 \u7ed3\u5408\u4e0a\u4e0b\u6587\u8c03\u7528rag_prompt\u751f\u6210\u56de\u7b54\u3002 6.3 \u5b8c\u6574\u6d41\u7a0b\u7684\u6574\u5408 \u00b6 \u4ece\u67e5\u8be2\u5230\u56de\u7b54\u7684\u6d41\u7a0b \u00b6 \u8f93\u5165\u5904\u7406 \uff1a QueryClassifier \u5206\u7c7b\u67e5\u8be2\uff0c\u51b3\u5b9a\u662f\u5426\u9700\u8981\u68c0\u7d22\u3002 \u7b56\u7565\u9009\u62e9 \uff1a StrategySelector \u6839\u636e\u67e5\u8be2\u9009\u62e9\u6700\u4f73\u68c0\u7d22\u7b56\u7565\u3002 \u6587\u6863\u68c0\u7d22 \uff1a \u6839\u636e\u7b56\u7565\u8c03\u7528 VectorStore \u7684\u6df7\u5408\u68c0\u7d22\uff0c\u83b7\u53d6\u76f8\u5173\u6587\u6863\u3002 \u7b54\u6848\u751f\u6210 \uff1a \u4f7f\u7528 RAGPrompts \u7684\u6a21\u677f\uff0c\u7ed3\u5408\u4e0a\u4e0b\u6587\u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7b54\u6848\u3002 \u8f93\u51fa \uff1a \u8fd4\u56de\u6700\u7ec8\u7b54\u6848\uff0c\u5e76\u8bb0\u5f55\u65e5\u5fd7\u3002 \u4ee3\u7801\u793a\u4f8b\uff08\u6574\u5408\u903b\u8f91\uff09 \u00b6 # \u793a\u4f8b\uff1a\u5b8c\u6574\u67e5\u8be2\u5904\u7406 query = \"AI\u5b66\u79d1\u5b66\u8d39\u662f\u591a\u5c11\uff1f\" rag_system = RAGSystem ( vector_store , llm ) answer = rag_system . generate_answer ( query ) print ( answer ) \u8bf4\u660e \u00b6 \u7aef\u5230\u7aef\u8bbe\u8ba1 \uff1a\u4ece\u8f93\u5165\u5230\u8f93\u51fa\u65e0\u7f1d\u8854\u63a5\u3002 \u667a\u80fd\u4f18\u5316 \uff1a\u901a\u8fc7\u5206\u7c7b\u548c\u7b56\u7565\u9009\u62e9\u51cf\u5c11\u4e0d\u5fc5\u8981\u8ba1\u7b97\u3002 \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u7ae0\u8282\u6df1\u5165\u63a2\u8ba8\u4e86 strategy_selector.py \u548c rag_system.py \uff1a strategy_selector.py \uff1a\u901a\u8fc7\u5927\u8bed\u8a00\u6a21\u578b\u52a8\u6001\u9009\u62e9\u68c0\u7d22\u7b56\u7565\uff08\u76f4\u63a5\u68c0\u7d22\u3001HyDE\u3001\u5b50\u67e5\u8be2\u3001\u56de\u6eaf\uff09\uff0c\u4f18\u5316\u68c0\u7d22\u8f93\u5165\u3002 rag_system.py \uff1a\u6574\u5408\u67e5\u8be2\u5206\u7c7b\u3001\u68c0\u7d22\u7b56\u7565\u3001\u5411\u91cf\u5b58\u50a8\u548cPrompt\u7ba1\u7406\uff0c\u5b8c\u6210\u4ece\u67e5\u8be2\u5230\u56de\u7b54\u7684\u5b8c\u6574RAG\u6d41\u7a0b\u3002 \u534f\u540c\u4f5c\u7528 \uff1a\u4e24\u8005\u7ed3\u5408\u5b9e\u73b0\u4e86\u7075\u6d3b\u3001\u9ad8\u6548\u7684\u67e5\u8be2\u5904\u7406\uff0c\u786e\u4fdd\u7cfb\u7edf\u80fd\u591f\u51c6\u786e\u54cd\u5e94\u7528\u6237\u9700\u6c42\u3002 \u5b66\u4e60\u8005\u901a\u8fc7\u672c\u7ae0\u8282\u638c\u63e1\u4e86RAG\u7cfb\u7edf\u7684\u6838\u5fc3\u5de5\u4f5c\u673a\u5236\uff0c\u4e3a\u540e\u7eed\u7684\u7cfb\u7edf\u8fd0\u884c\u548c\u6269\u5c55\u5960\u5b9a\u4e86\u57fa\u7840\u3002","title":"4.6 \u68c0\u7d22\u7b56\u7565\u4e0eRAG\u7cfb\u7edf\u8bbe\u8ba1"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#rag","text":"","title":"\u68c0\u7d22\u7b56\u7565\u9009\u62e9\u4e0eRAG\u6838\u5fc3\u903b\u8f91"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_1","text":"\u638c\u63e1\u5982\u4f55\u6839\u636e\u67e5\u8be2\u7279\u70b9\u52a8\u6001\u9009\u62e9\u6700\u4f18\u7b56\u7565\u3002 \u7406\u89e3RAG\u7cfb\u7edf\u5982\u4f55\u6574\u5408\u67e5\u8be2\u5206\u7c7b\u3001\u68c0\u7d22\u548c\u751f\u6210\u9636\u6bb5\u3002 \u80fd\u591f\u5e94\u7528\u7b56\u7565\u9009\u62e9\u548cRAG\u903b\u8f91\uff0c\u6784\u5efa\u4e00\u4e2a\u4ece\u8f93\u5165\u5904\u7406\u5230\u7b54\u6848\u751f\u6210\u7684\u9ad8\u6548\u7cfb\u7edf\u3002 strategy_selector.py \u548c rag_system.py \u662fEduRAG\u7cfb\u7edf\u4e2d core \u6a21\u5757\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u5206\u522b\u8d1f\u8d23\u68c0\u7d22\u7b56\u7565\u7684\u9009\u62e9\u548cRAG\u7cfb\u7edf\u7684\u6574\u4f53\u903b\u8f91\u6574\u5408\u3002 strategy_selector.py \u901a\u8fc7\u5927\u8bed\u8a00\u6a21\u578b\u52a8\u6001\u9009\u62e9\u9002\u5408\u7528\u6237\u67e5\u8be2\u7684\u68c0\u7d22\u7b56\u7565\uff0c\u800c rag_system.py \u5219\u5c06\u524d\u51e0\u7ae0\u4ecb\u7ecd\u7684\u6a21\u5757\uff08\u5982\u5411\u91cf\u5b58\u50a8\u3001Prompt\u7ba1\u7406\u548c\u67e5\u8be2\u5206\u7c7b\uff09\u6574\u5408\u8d77\u6765\uff0c\u5b8c\u6210\u4ece\u67e5\u8be2\u8f93\u5165\u5230\u7b54\u6848\u751f\u6210\u7684\u5b8c\u6574\u6d41\u7a0b\u3002\u8fd9\u4e24\u4e2a\u6a21\u5757\u5171\u540c\u786e\u4fdd\u7cfb\u7edf\u80fd\u591f\u9ad8\u6548\u3001\u51c6\u786e\u5730\u54cd\u5e94\u7528\u6237\u7684\u5404\u79cd\u67e5\u8be2\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#61","text":"","title":"6.1 \u68c0\u7d22\u7b56\u7565\u9009\u62e9"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_2","text":"strategy_selector.py \u5b9a\u4e49\u4e86 StrategySelector \u7c7b\uff0c\u901a\u8fc7\u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u6839\u636e\u7528\u6237\u67e5\u8be2\u9009\u62e9\u6700\u5408\u9002\u7684\u68c0\u7d22\u7b56\u7565\u3002\u652f\u6301\u7684\u7b56\u7565\u5305\u62ec\u76f4\u63a5\u68c0\u7d22\u3001HyDE\uff08\u5047\u8bbe\u95ee\u9898\u68c0\u7d22\uff09\u3001\u5b50\u67e5\u8be2\u68c0\u7d22\u548c\u56de\u6eaf\u95ee\u9898\u68c0\u7d22\uff0c\u65e8\u5728\u4f18\u5316\u68c0\u7d22\u9636\u6bb5\u7684\u8f93\u5165\u5904\u7406\u3002","title":"\u529f\u80fd\u6982\u8ff0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_3","text":"# core/strategy_selector.py \u6e90\u7801 # \u5bfc\u5165 LangChain \u63d0\u793a\u6a21\u677f from langchain.prompts import PromptTemplate # \u5bfc\u5165\u65e5\u5fd7\u548c\u914d\u7f6e from base import logger , Config # \u5bfc\u5165 OpenAI from openai import OpenAI class StrategySelector : def __init__ ( self ): # \u521d\u59cb\u5316 OpenAI \u5ba2\u6237\u7aef self . client = OpenAI ( api_key = Config () . DASHSCOPE_API_KEY , base_url = Config () . DASHSCOPE_BASE_URL ) # \u83b7\u53d6\u7b56\u7565\u9009\u62e9\u63d0\u793a\u6a21\u677f self . strategy_prompt_template = self . _get_strategy_prompt () def call_dashscope ( self , prompt ): # \u8c03\u7528 DashScope API try : # \u521b\u5efa\u804a\u5929\u5b8c\u6210\u8bf7\u6c42 completion = self . client . chat . completions . create ( model = Config () . LLM_MODEL , messages = [ { \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\u3002\" }, { \"role\" : \"user\" , \"content\" : prompt }, ], temperature = 0.1 ) # \u8fd4\u56de\u5b8c\u6210\u7ed3\u679c return completion . choices [ 0 ] . message . content if completion . choices else \"\u76f4\u63a5\u68c0\u7d22\" except Exception as e : # \u8bb0\u5f55 API \u8c03\u7528\u5931\u8d25 logger . error ( f \"DashScope API \u8c03\u7528\u5931\u8d25: { e } \" ) # \u9ed8\u8ba4\u8fd4\u56de\u76f4\u63a5\u68c0\u7d22 return \"\u76f4\u63a5\u68c0\u7d22\" def _get_strategy_prompt ( self ): # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u83b7\u53d6\u7b56\u7565\u9009\u62e9 Prompt \u6a21\u677f return PromptTemplate ( template = \"\"\" \u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\uff0c\u8d1f\u8d23\u5206\u6790\u7528\u6237\u67e5\u8be2 {query} \uff0c\u5e76\u4ece\u4ee5\u4e0b\u56db\u79cd\u68c0\u7d22\u589e\u5f3a\u7b56\u7565\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u9002\u5408\u7684\u7b56\u7565\uff0c\u76f4\u63a5\u8fd4\u56de\u7b56\u7565\u540d\u79f0\uff0c\u4e0d\u9700\u8981\u89e3\u91ca\u8fc7\u7a0b\u3002 \u4ee5\u4e0b\u662f\u51e0\u79cd\u68c0\u7d22\u589e\u5f3a\u7b56\u7565\u53ca\u5176\u9002\u7528\u573a\u666f\uff1a 1. **\u76f4\u63a5\u68c0\u7d22\uff1a** * \u63cf\u8ff0\uff1a\u5bf9\u7528\u6237\u67e5\u8be2\u76f4\u63a5\u8fdb\u884c\u68c0\u7d22\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u589e\u5f3a\u5904\u7406\u3002 * \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u67e5\u8be2\u610f\u56fe\u660e\u786e\uff0c\u9700\u8981\u4ece\u77e5\u8bc6\u5e93\u4e2d\u68c0\u7d22**\u7279\u5b9a\u4fe1\u606f**\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a * \u793a\u4f8b\uff1a * \u67e5\u8be2\uff1aAI \u5b66\u79d1\u5b66\u8d39\u662f\u591a\u5c11\uff1f * \u7b56\u7565\uff1a\u76f4\u63a5\u68c0\u7d22 * \u67e5\u8be2\uff1aJAVA\u7684\u8bfe\u7a0b\u5927\u7eb2\u662f\u4ec0\u4e48\uff1f * \u7b56\u7565\uff1a\u76f4\u63a5\u68c0\u7d22 2. **\u5047\u8bbe\u95ee\u9898\u68c0\u7d22\uff08HyDE\uff09\uff1a** * \u63cf\u8ff0\uff1a\u4f7f\u7528 LLM \u751f\u6210\u4e00\u4e2a\u5047\u8bbe\u7684\u7b54\u6848\uff0c\u7136\u540e\u57fa\u4e8e\u5047\u8bbe\u7b54\u6848\u8fdb\u884c\u68c0\u7d22\u3002 * \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u67e5\u8be2\u8f83\u4e3a\u62bd\u8c61\uff0c\u76f4\u63a5\u68c0\u7d22\u6548\u679c\u4e0d\u4f73\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a * \u793a\u4f8b\uff1a * \u67e5\u8be2\uff1a\u4eba\u5de5\u667a\u80fd\u5728\u6559\u80b2\u9886\u57df\u7684\u5e94\u7528\u6709\u54ea\u4e9b\uff1f * \u7b56\u7565\uff1a\u5047\u8bbe\u95ee\u9898\u68c0\u7d22 3. **\u5b50\u67e5\u8be2\u68c0\u7d22\uff1a** * \u63cf\u8ff0\uff1a\u5c06\u590d\u6742\u7684\u7528\u6237\u67e5\u8be2\u62c6\u5206\u4e3a\u591a\u4e2a\u7b80\u5355\u7684\u5b50\u67e5\u8be2\uff0c\u5206\u522b\u68c0\u7d22\u5e76\u5408\u5e76\u7ed3\u679c\u3002 * \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u67e5\u8be2\u6d89\u53ca\u591a\u4e2a\u5b9e\u4f53\u6216\u65b9\u9762\uff0c\u9700\u8981\u5206\u522b\u68c0\u7d22\u4e0d\u540c\u4fe1\u606f\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a * \u793a\u4f8b\uff1a * \u67e5\u8be2\uff1a\u6bd4\u8f83 Milvus \u548c Zilliz Cloud \u7684\u4f18\u7f3a\u70b9\u3002 * \u7b56\u7565\uff1a\u5b50\u67e5\u8be2\u68c0\u7d22 4. **\u56de\u6eaf\u95ee\u9898\u68c0\u7d22\uff1a** * \u63cf\u8ff0\uff1a\u5c06\u590d\u6742\u7684\u7528\u6237\u67e5\u8be2\u8f6c\u5316\u4e3a\u66f4\u57fa\u7840\u3001\u66f4\u6613\u4e8e\u68c0\u7d22\u7684\u95ee\u9898\uff0c\u7136\u540e\u8fdb\u884c\u68c0\u7d22\u3002 * \u9002\u7528\u573a\u666f\uff1a\u9002\u7528\u4e8e\u67e5\u8be2\u8f83\u4e3a\u590d\u6742\uff0c\u9700\u8981\u7b80\u5316\u540e\u624d\u80fd\u6709\u6548\u68c0\u7d22\u7684\u95ee\u9898\uff0c\u4f8b\u5982\uff1a * \u793a\u4f8b\uff1a * \u67e5\u8be2\uff1a\u6211\u6709\u4e00\u4e2a\u5305\u542b 100 \u4ebf\u6761\u8bb0\u5f55\u7684\u6570\u636e\u96c6\uff0c\u60f3\u628a\u5b83\u5b58\u50a8\u5230 Milvus \u4e2d\u8fdb\u884c\u67e5\u8be2\u3002\u53ef\u4ee5\u5417\uff1f * \u7b56\u7565\uff1a\u56de\u6eaf\u95ee\u9898\u68c0\u7d22 \u6839\u636e\u7528\u6237\u67e5\u8be2 {query} \uff0c\u76f4\u63a5\u8fd4\u56de\u6700\u9002\u5408\u7684\u7b56\u7565\u540d\u79f0\uff0c\u4f8b\u5982 \"\u76f4\u63a5\u68c0\u7d22\"\u3002\u4e0d\u8981\u8f93\u51fa\u4efb\u4f55\u5206\u6790\u8fc7\u7a0b\u6216\u5176\u4ed6\u5185\u5bb9\u3002 \"\"\" , input_variables = [ \"query\" ], ) # \u5b9a\u4e49\u65b9\u6cd5\uff0c\u9009\u62e9\u68c0\u7d22\u7b56\u7565 def select_strategy ( self , query ): # \u8c03\u7528 LLM \u83b7\u53d6\u68c0\u7d22\u7b56\u7565 strategy = self . call_dashscope ( self . strategy_prompt_template . format ( query = query )) . strip () logger . info ( f \"\u4e3a\u67e5\u8be2 ' { query } ' \u9009\u62e9\u7684\u68c0\u7d22\u7b56\u7565\uff1a { strategy } \" ) return strategy if __name__ == '__main__' : ss = StrategySelector () ss . select_strategy ( '\u4f60\u597d\u5417' )","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_4","text":"__init__ \uff1a \u4f5c\u7528 \uff1a\u521d\u59cb\u5316DashScope\u5ba2\u6237\u7aef\u548c\u7b56\u7565\u9009\u62e9Prompt\u3002 \u903b\u8f91 \uff1a\u8fde\u63a5\u5927\u8bed\u8a00\u6a21\u578bAPI\uff0c\u51c6\u5907Prompt\u6a21\u677f\u3002 call_dashscope \uff1a \u4f5c\u7528 \uff1a\u5c01\u88c5DashScope API\u8c03\u7528\uff0c\u5904\u7406\u5f02\u5e38\u5e76\u8fd4\u56de\u6a21\u578b\u8f93\u51fa\u3002 \u903b\u8f91 \uff1a\u786e\u4fddAPI\u8c03\u7528\u7684\u9c81\u68d2\u6027\uff0c\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u3002 _get_strategy_prompt \uff1a \u4f5c\u7528 \uff1a\u5b9a\u4e49\u7528\u4e8e\u7b56\u7565\u9009\u62e9\u7684Prompt\u6a21\u677f\u3002 \u8bbe\u8ba1\u903b\u8f91 \uff1a\u7b80\u6d01\u63cf\u8ff0\u56db\u79cd\u7b56\u7565\u53ca\u5176\u9002\u7528\u573a\u666f\uff0c\u8981\u6c42\u6a21\u578b\u76f4\u63a5\u8fd4\u56de\u7b56\u7565\u540d\u79f0\u3002 select_strategy \uff1a \u4f5c\u7528 \uff1a\u6839\u636e\u67e5\u8be2\u8c03\u7528\u6a21\u578b\u9009\u62e9\u7b56\u7565\u5e76\u8fd4\u56de\u3002 \u903b\u8f91 \uff1a\u8bb0\u5f55\u9009\u62e9\u7684\u7b56\u7565\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u3002","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_5","text":"\u52a8\u6001\u9009\u62e9 \uff1a\u5229\u7528\u5927\u8bed\u8a00\u6a21\u578b\u7684\u8bed\u4e49\u7406\u89e3\u80fd\u529b\uff0c\u7075\u6d3b\u9002\u5e94\u4e0d\u540c\u67e5\u8be2\u3002 \u7b56\u7565\u591a\u6837\u6027 \uff1a\u652f\u6301\u56db\u79cd\u7b56\u7565\uff0c\u8986\u76d6\u5e38\u89c1\u67e5\u8be2\u573a\u666f\u3002 \u6548\u7387 \uff1a\u76f4\u63a5\u8fd4\u56de\u7b56\u7565\u540d\u79f0\uff0c\u907f\u514d\u5197\u4f59\u8f93\u51fa\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#62-rag","text":"","title":"6.2 RAG\u6838\u5fc3\u903b\u8f91"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_6","text":"rag_system.py \u5b9a\u4e49\u4e86 RAGSystem \u7c7b\uff0c\u6574\u5408\u7cfb\u7edf\u7684\u5404\u4e2a\u6a21\u5757\uff0c\u5b8c\u6210\u4ece\u67e5\u8be2\u8f93\u5165\u5230\u7b54\u6848\u751f\u6210\u7684\u5b8c\u6574\u6d41\u7a0b\u3002\u5b83\u901a\u8fc7\u67e5\u8be2\u5206\u7c7b\u9009\u62e9\u5904\u7406\u8def\u5f84\uff0c\u5229\u7528\u68c0\u7d22\u7b56\u7565\u4f18\u5316\u6587\u6863\u68c0\u7d22\uff0c\u5e76\u7ed3\u5408\u4e0a\u4e0b\u6587\u751f\u6210\u6700\u7ec8\u7b54\u6848\u3002","title":"\u529f\u80fd\u6982\u8ff0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_7","text":"# core/rag_system.py \u6e90\u7801 from prompts import RAGPrompts # \u5bfc\u5165 time \u6a21\u5757\uff0c\u7528\u4e8e\u8ba1\u7b97\u65f6\u95f4 import time from base import logger , Config from query_classifier import QueryClassifier # \u5bfc\u5165\u67e5\u8be2\u5206\u7c7b\u5668 from strategy_selector import StrategySelector # \u5bfc\u5165\u7b56\u7565\u9009\u62e9\u5668 conf = Config () # \u5b9a\u4e49 RAGSystem \u7c7b\uff0c\u5c01\u88c5 RAG \u7cfb\u7edf\u7684\u6838\u5fc3\u903b\u8f91 class RAGSystem : # \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u8bbe\u7f6e RAG \u7cfb\u7edf\u7684\u57fa\u672c\u53c2\u6570 def __init__ ( self , vector_store , llm ): # \u8bbe\u7f6e\u5411\u91cf\u6570\u636e\u5e93\u5bf9\u8c61 self . vector_store = vector_store # \u8bbe\u7f6e\u5927\u8bed\u8a00\u6a21\u578b\u8c03\u7528\u51fd\u6570 self . llm = llm # \u83b7\u53d6 RAG \u63d0\u793a\u6a21\u677f self . rag_prompt = RAGPrompts . rag_prompt () # \u521d\u59cb\u5316\u67e5\u8be2\u5206\u7c7b\u5668 self . query_classifier = QueryClassifier ( model_path = './core/bert_query_classifier' ) # \u521d\u59cb\u5316\u7b56\u7565\u9009\u62e9\u5668 self . strategy_selector = StrategySelector () # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4f7f\u7528\u5047\u8bbe\u6587\u6863\u8fdb\u884c\u68c0\u7d22\uff08HyDE\uff09 def _retrieve_with_hyde ( self , query ): logger . info ( f \"\u4f7f\u7528 HyDE \u7b56\u7565\u8fdb\u884c\u68c0\u7d22 (\u67e5\u8be2: ' { query } ')\" ) # \u83b7\u53d6\u5047\u8bbe\u95ee\u9898\u751f\u6210\u7684 Prompt \u6a21\u677f hyde_prompt_template = RAGPrompts . hyde_prompt () # \u4f7f\u7528 template \u540e\u7f00\u533a\u5206 # \u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u5047\u8bbe\u7b54\u6848 try : hypo_answer = self . llm ( hyde_prompt_template . format ( query = query )) . strip () logger . info ( f \"HyDE \u751f\u6210\u7684\u5047\u8bbe\u7b54\u6848: ' { hypo_answer } '\" ) # \u4f7f\u7528\u5047\u8bbe\u7b54\u6848\u8fdb\u884c\u68c0\u7d22\uff0c\u5e76\u8fd4\u56de\u68c0\u7d22\u7ed3\u679c # \u6ce8\u610f\uff1aHyDE \u901a\u5e38\u53ea\u7528\u4e8e\u751f\u6210\u68c0\u7d22\u5411\u91cf\uff0c\u4e0d\u4e00\u5b9a\u9700\u8981 rerank \u8fd9\u4e00\u6b65\uff0c\u4f46\u8fd9\u91cc\u590d\u7528\u4e86 return self . vector_store . hybrid_search_with_rerank ( hypo_answer , k = conf . RETRIEVAL_K # \u4f7f\u7528 K \u800c\u975e M ) except Exception as e : logger . error ( f \"HyDE \u7b56\u7565\u6267\u884c\u5931\u8d25: { e } \" ) return [] # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4f7f\u7528\u5b50\u67e5\u8be2\u8fdb\u884c\u68c0\u7d22 def _retrieve_with_subqueries ( self , query ): logger . info ( f \"\u4f7f\u7528\u5b50\u67e5\u8be2\u7b56\u7565\u8fdb\u884c\u68c0\u7d22 (\u67e5\u8be2: ' { query } ')\" ) # \u83b7\u53d6\u5b50\u67e5\u8be2\u751f\u6210\u7684 Prompt \u6a21\u677f subquery_prompt_template = RAGPrompts . subquery_prompt () # \u4f7f\u7528 template \u540e\u7f00\u533a\u5206 try : # \u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u5b50\u67e5\u8be2\u5217\u8868 subqueries_text = self . llm ( subquery_prompt_template . format ( query = query )) . strip () subqueries = [ q . strip () for q in subqueries_text . split ( \" \\n \" ) if q . strip ()] logger . info ( f \"\u751f\u6210\u7684\u5b50\u67e5\u8be2: { subqueries } \" ) if not subqueries : logger . warning ( \"\u672a\u80fd\u751f\u6210\u6709\u6548\u7684\u5b50\u67e5\u8be2\" ) return [] # \u521d\u59cb\u5316\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u5b50\u67e5\u8be2\u7684\u68c0\u7d22\u7ed3\u679c all_docs = [] # \u904d\u5386\u6bcf\u4e2a\u5b50\u67e5\u8be2 for sub_q in subqueries : # \u4f7f\u7528\u5b50\u67e5\u8be2\u8fdb\u884c\u68c0\u7d22\uff0c\u5e76\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u5217\u8868\u4e2d # \u8fd9\u91cc\u5bf9\u6bcf\u4e2a\u5b50\u67e5\u8be2\u90fd\u6267\u884c\u4e86 hybrid search + rerank\uff0c\u5f00\u9500\u53ef\u80fd\u8f83\u5927 docs = self . vector_store . hybrid_search_with_rerank ( sub_q , k = conf . RETRIEVAL_K # \u4f7f\u7528 K ) all_docs . extend ( docs ) logger . info ( f \"\u5b50\u67e5\u8be2 ' { sub_q } ' \u68c0\u7d22\u5230 { len ( docs ) } \u4e2a\u6587\u6863\" ) # \u5bf9\u6240\u6709\u68c0\u7d22\u7ed3\u679c\u8fdb\u884c\u53bb\u91cd (\u57fa\u4e8e\u5bf9\u8c61\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c Document \u5185\u5bb9\u76f8\u540c\u4f46\u5bf9\u8c61\u4e0d\u540c\u5219\u65e0\u6cd5\u53bb\u91cd) # \u66f4\u53ef\u9760\u7684\u53bb\u91cd\u65b9\u5f0f\u662f\u57fa\u4e8e\u6587\u6863\u5185\u5bb9\u6216 ID unique_docs_dict = { doc . page_content : doc for doc in all_docs } # \u57fa\u4e8e\u5185\u5bb9\u53bb\u91cd unique_docs = list ( unique_docs_dict . values ()) logger . info ( f \"\u6240\u6709\u5b50\u67e5\u8be2\u5171\u68c0\u7d22\u5230 { len ( all_docs ) } \u4e2a\u6587\u6863, \u53bb\u91cd\u540e\u5269 { len ( unique_docs ) } \u4e2a\" ) # \u8fd4\u56de\u53bb\u91cd\u540e\u7684\u6587\u6863\uff0c\u9650\u5236\u6570\u91cf (\u662f\u5426\u9700\u8981\u5728\u6b64\u5904\u9650\u5236? retrieve_and_merge \u672b\u5c3e\u4f1a\u9650\u5236) # return unique_docs[: Config.CANDIDATE_M] return unique_docs # \u8fd4\u56de\u6240\u6709\u552f\u4e00\u6587\u6863\uff0c\u8ba9 retrieve_and_merge \u5904\u7406\u6570\u91cf except Exception as e : logger . error ( f \"\u5b50\u67e5\u8be2\u7b56\u7565\u6267\u884c\u5931\u8d25: { e } \" ) return [] # \u5b9a\u4e49\u79c1\u6709\u65b9\u6cd5\uff0c\u4f7f\u7528\u56de\u6eaf\u95ee\u9898\u8fdb\u884c\u68c0\u7d22 def _retrieve_with_backtracking ( self , query ): logger . info ( f \"\u4f7f\u7528\u56de\u6eaf\u95ee\u9898\u7b56\u7565\u8fdb\u884c\u68c0\u7d22 (\u67e5\u8be2: ' { query } ')\" ) # \u83b7\u53d6\u56de\u6eaf\u95ee\u9898\u751f\u6210\u7684 Prompt \u6a21\u677f backtrack_prompt_template = RAGPrompts . backtracking_prompt () # \u4f7f\u7528 template \u540e\u7f00\u533a\u5206 try : # \u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u56de\u6eaf\u95ee\u9898 simplified_query = self . llm ( backtrack_prompt_template . format ( query = query )) . strip () logger . info ( f \"\u751f\u6210\u7684\u56de\u6eaf\u95ee\u9898: ' { simplified_query } '\" ) # \u4f7f\u7528\u56de\u6eaf\u95ee\u9898\u8fdb\u884c\u68c0\u7d22\uff0c\u5e76\u8fd4\u56de\u68c0\u7d22\u7ed3\u679c return self . vector_store . hybrid_search_with_rerank ( simplified_query , k = conf . RETRIEVAL_K # \u4f7f\u7528 K ) except Exception as e : logger . error ( f \"\u56de\u6eaf\u95ee\u9898\u7b56\u7565\u6267\u884c\u5931\u8d25: { e } \" ) return [] # \u5b9a\u4e49\u65b9\u6cd5\uff0c\u68c0\u7d22\u5e76\u5408\u5e76\u76f8\u5173\u6587\u6863 def retrieve_and_merge ( self , query , source_filter = None , strategy = None ): # \u65b0\u589e strategy \u53c2\u6570 # \u5982\u679c\u672a\u6307\u5b9a\u68c0\u7d22\u7b56\u7565\uff0c\u5219\u4f7f\u7528\u7b56\u7565\u9009\u62e9\u5668\u9009\u62e9 if not strategy : strategy = self . strategy_selector . select_strategy ( query ) # \u6839\u636e\u68c0\u7d22\u7b56\u7565\u9009\u62e9\u4e0d\u540c\u7684\u68c0\u7d22\u65b9\u5f0f ranked_sub_chunks = [] # \u521d\u59cb\u5316 if strategy == \"\u56de\u6eaf\u95ee\u9898\u68c0\u7d22\" : ranked_sub_chunks = self . _retrieve_with_backtracking ( query ) elif strategy == \"\u5b50\u67e5\u8be2\u68c0\u7d22\" : ranked_sub_chunks = self . _retrieve_with_subqueries ( query ) # \u8fd4\u56de\u7684\u662f\u552f\u4e00\u6587\u6863\u5217\u8868 # \u6ce8\u610f\uff1a\u5b50\u67e5\u8be2\u8fd4\u56de\u7684\u662f\u5df2 rerank \u8fc7\u7684\u7236\u6587\u6863\u6216\u5b50\u5757\u5217\u8868\uff0c\u540e\u7eed\u5408\u5e76\u903b\u8f91\u53ef\u80fd\u9700\u8981\u8c03\u6574 # \u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c\u5b50\u67e5\u8be2\u8fd4\u56de\u7684\u662f\u521d\u6b65\u68c0\u7d22\uff08\u53ef\u80fd\u5df2rerank\uff09\u7684\u5757\uff0c\u518d\u8fdb\u884c\u5408\u5e76 elif strategy == \"\u5047\u8bbe\u95ee\u9898\u68c0\u7d22\" : ranked_sub_chunks = self . _retrieve_with_hyde ( query ) else : # \u9ed8\u8ba4\u6216\u201c\u76f4\u63a5\u68c0\u7d22\u201d logger . info ( f \"\u4f7f\u7528\u76f4\u63a5\u68c0\u7d22\u7b56\u7565 (\u67e5\u8be2: ' { query } ')\" ) ranked_sub_chunks = self . vector_store . hybrid_search_with_rerank ( query , k = conf . RETRIEVAL_K , source_filter = source_filter ) # \u6ce8\u610f hybrid_search_with_rerank \u8fd4\u56de\u7684\u662f rerank \u540e\u7684\u7236\u6587\u6863 logger . info ( f \"\u7b56\u7565 ' { strategy } ' \u68c0\u7d22\u5230 { len ( ranked_sub_chunks ) } \u4e2a\u5019\u9009\u6587\u6863 (\u53ef\u80fd\u5df2\u662f\u7236\u6587\u6863)\" ) final_context_docs = ranked_sub_chunks [: conf . CANDIDATE_M ] logger . info ( f \"\u6700\u7ec8\u9009\u53d6 { len ( final_context_docs ) } \u4e2a\u6587\u6863\u4f5c\u4e3a\u4e0a\u4e0b\u6587\" ) return final_context_docs # \u5b9a\u4e49\u65b9\u6cd5\uff0c\u751f\u6210\u7b54\u6848 def generate_answer ( self , query , source_filter = None ): # \u8bb0\u5f55\u67e5\u8be2\u5f00\u59cb\u65f6\u95f4 start_time = time . time () logger . info ( f \"\u5f00\u59cb\u5904\u7406\u67e5\u8be2: ' { query } ', \u5b66\u79d1\u8fc7\u6ee4: { source_filter } \" ) # \u5224\u65ad\u67e5\u8be2\u7c7b\u578b query_category = self . query_classifier . predict_category ( query ) logger . info ( f \"\u67e5\u8be2\u5206\u7c7b\u7ed3\u679c\uff1a { query_category } (\u67e5\u8be2: ' { query } ')\" ) # \u5982\u679c\u67e5\u8be2\u5c5e\u4e8e\u201c\u901a\u7528\u77e5\u8bc6\u201d\u7c7b\u522b\uff0c\u5219\u76f4\u63a5\u4f7f\u7528 LLM \u56de\u7b54 if query_category == \"\u901a\u7528\u77e5\u8bc6\" : logger . info ( \"\u67e5\u8be2\u4e3a\u901a\u7528\u77e5\u8bc6\uff0c\u76f4\u63a5\u8c03\u7528 LLM\" ) prompt_input = self . rag_prompt . format ( context = \"\" , question = query , phone = conf . CUSTOMER_SERVICE_PHONE ) # \u4e0d\u4f7f\u7528\u4e0a\u4e0b\u6587 try : answer = self . llm ( prompt_input ) except Exception as e : logger . error ( f \"\u76f4\u63a5\u8c03\u7528 LLM \u5931\u8d25: { e } \" ) answer = f \"\u62b1\u6b49\uff0c\u5904\u7406\u60a8\u7684\u901a\u7528\u77e5\u8bc6\u95ee\u9898\u65f6\u51fa\u9519\u3002\u8bf7\u8054\u7cfb\u4eba\u5de5\u5ba2\u670d\uff1a { conf . CUSTOMER_SERVICE_PHONE } \" processing_time = time . time () - start_time logger . info ( f \"\u901a\u7528\u77e5\u8bc6\u67e5\u8be2\u5904\u7406\u5b8c\u6210 (\u8017\u65f6: { processing_time : .2f } s, \u67e5\u8be2: ' { query } ')\" ) return answer # \u5426\u5219\uff0c\u8fdb\u884c RAG \u68c0\u7d22\u5e76\u751f\u6210\u7b54\u6848 logger . info ( \"\u67e5\u8be2\u4e3a\u4e13\u4e1a\u54a8\u8be2\uff0c\u6267\u884c RAG \u6d41\u7a0b\" ) # \u9009\u62e9\u68c0\u7d22\u7b56\u7565 strategy = self . strategy_selector . select_strategy ( query ) # \u68c0\u7d22\u76f8\u5173\u6587\u6863 context_docs = self . retrieve_and_merge ( query , source_filter = source_filter , strategy = strategy ) # \u4f20\u9012 strategy # \u51c6\u5907\u4e0a\u4e0b\u6587 if context_docs : context = \" \\n\\n \" . join ([ doc . page_content for doc in context_docs ]) # \u4f7f\u7528\u6362\u884c\u7b26\u5206\u9694\u6587\u6863 logger . info ( f \"\u6784\u5efa\u4e0a\u4e0b\u6587\u5b8c\u6210\uff0c\u5305\u542b { len ( context_docs ) } \u4e2a\u6587\u6863\u5757\" ) # logger.debug(f\"\u4e0a\u4e0b\u6587\u5185\u5bb9:\\n{context[:500]}...\") # Debug \u65e5\u5fd7\u53ef\u4ee5\u6253\u5370\u90e8\u5206\u4e0a\u4e0b\u6587 else : context = \"\" logger . info ( \"\u672a\u68c0\u7d22\u5230\u76f8\u5173\u6587\u6863\uff0c\u4e0a\u4e0b\u6587\u4e3a\u7a7a\" ) # \u6784\u9020 Prompt\uff0c\u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7b54\u6848 prompt_input = self . rag_prompt . format ( context = context , question = query , phone = conf . CUSTOMER_SERVICE_PHONE ) # logger.debug(f\"\u6700\u7ec8\u751f\u6210\u7684 Prompt:\\n{prompt_input}\") # Debug \u65e5\u5fd7 try : answer = self . llm ( prompt_input ) except Exception as e : logger . error ( f \"\u8c03\u7528 LLM \u751f\u6210\u6700\u7ec8\u7b54\u6848\u5931\u8d25: { e } \" ) answer = f \"\u62b1\u6b49\uff0c\u5904\u7406\u60a8\u7684\u4e13\u4e1a\u54a8\u8be2\u95ee\u9898\u65f6\u51fa\u9519\u3002\u8bf7\u8054\u7cfb\u4eba\u5de5\u5ba2\u670d\uff1a { conf . CUSTOMER_SERVICE_PHONE } \" # \u8bb0\u5f55\u67e5\u8be2\u5904\u7406\u5b8c\u6210\u7684\u65e5\u5fd7 processing_time = time . time () - start_time logger . info ( f \"\u67e5\u8be2\u5904\u7406\u5b8c\u6210 (\u8017\u65f6: { processing_time : .2f } s, \u67e5\u8be2: ' { query } ')\" ) return answer","title":"\u4ee3\u7801\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_8","text":"init \uff1a \u4f5c\u7528 \uff1a\u521d\u59cb\u5316RAG\u7cfb\u7edf\uff0c\u6574\u5408\u5411\u91cf\u5b58\u50a8\u3001\u5927\u8bed\u8a00\u6a21\u578b\u548c\u5176\u4ed6\u6838\u5fc3\u7ec4\u4ef6\u3002 \u4f9d\u8d56 \uff1a\u4f9d\u8d56VectorStore\u3001RAGPrompts\u3001QueryClassifier\u548cStrategySelector\u3002 _retrieve_with_hyde \uff1a \u4f5c\u7528 \uff1a\u751f\u6210\u5047\u8bbe\u7b54\u6848\u5e76\u8c03\u7528\u6df7\u5408\u68c0\u7d22\uff0c\u9002\u5408\u62bd\u8c61\u67e5\u8be2\u3002 \u903b\u8f91 \uff1a\u4f7f\u7528hyde_prompt\u751f\u6210\u5047\u8bbe\u7b54\u6848\uff0c\u4f20\u9012\u7ed9hybrid_search_with_rerank\u3002 _retrieve_with_subqueries \uff1a \u4f5c\u7528 \uff1a\u5206\u89e3\u67e5\u8be2\u4e3a\u5b50\u67e5\u8be2\uff0c\u5206\u522b\u68c0\u7d22\u5e76\u53bb\u91cd\u3002 \u903b\u8f91 \uff1a\u4f7f\u7528subquery_prompt\u5206\u89e3\u67e5\u8be2\uff0c\u5408\u5e76\u7ed3\u679c\u5e76\u9650\u5236\u6570\u91cf\u3002 _retrieve_with_backtracking \uff1a \u4f5c\u7528 \uff1a\u7b80\u5316\u67e5\u8be2\u540e\u68c0\u7d22\uff0c\u964d\u4f4e\u590d\u6742\u5ea6\u3002 \u903b\u8f91 \uff1a\u4f7f\u7528backtracking_prompt\u7b80\u5316\u67e5\u8be2\uff0c\u8c03\u7528\u6df7\u5408\u68c0\u7d22\u3002 retrieve_and_merge \uff1a \u4f5c\u7528 \uff1a\u6839\u636e\u7b56\u7565\u9009\u62e9\u6267\u884c\u68c0\u7d22\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u3002 \u4f18\u5316 \uff1a\u79fb\u9664\u5197\u4f59\u7684\u5408\u5e76\u903b\u8f91\uff0c\u76f4\u63a5\u4f7f\u7528hybrid_search_with_rerank\u7684\u7ed3\u679c\uff08\u53bb\u91cd\u7684\u7236\u6587\u6863\uff09\u3002 generate_answer \uff1a \u4f5c\u7528 \uff1a\u6574\u5408\u5206\u7c7b\u3001\u68c0\u7d22\u548c\u751f\u6210\uff0c\u8f93\u51fa\u6700\u7ec8\u7b54\u6848\u3002 \u6d41\u7a0b\uff1a \u4f7f\u7528QueryClassifier\u5224\u65ad\u67e5\u8be2\u7c7b\u578b\u3002 \u201c\u901a\u7528\u77e5\u8bc6\u201d\u76f4\u63a5\u751f\u6210\u7b54\u6848\uff0c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u89e6\u53d1\u68c0\u7d22\u3002 \u7ed3\u5408\u4e0a\u4e0b\u6587\u8c03\u7528rag_prompt\u751f\u6210\u56de\u7b54\u3002","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#63","text":"","title":"6.3 \u5b8c\u6574\u6d41\u7a0b\u7684\u6574\u5408"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_9","text":"\u8f93\u5165\u5904\u7406 \uff1a QueryClassifier \u5206\u7c7b\u67e5\u8be2\uff0c\u51b3\u5b9a\u662f\u5426\u9700\u8981\u68c0\u7d22\u3002 \u7b56\u7565\u9009\u62e9 \uff1a StrategySelector \u6839\u636e\u67e5\u8be2\u9009\u62e9\u6700\u4f73\u68c0\u7d22\u7b56\u7565\u3002 \u6587\u6863\u68c0\u7d22 \uff1a \u6839\u636e\u7b56\u7565\u8c03\u7528 VectorStore \u7684\u6df7\u5408\u68c0\u7d22\uff0c\u83b7\u53d6\u76f8\u5173\u6587\u6863\u3002 \u7b54\u6848\u751f\u6210 \uff1a \u4f7f\u7528 RAGPrompts \u7684\u6a21\u677f\uff0c\u7ed3\u5408\u4e0a\u4e0b\u6587\u8c03\u7528\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7b54\u6848\u3002 \u8f93\u51fa \uff1a \u8fd4\u56de\u6700\u7ec8\u7b54\u6848\uff0c\u5e76\u8bb0\u5f55\u65e5\u5fd7\u3002","title":"\u4ece\u67e5\u8be2\u5230\u56de\u7b54\u7684\u6d41\u7a0b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_10","text":"# \u793a\u4f8b\uff1a\u5b8c\u6574\u67e5\u8be2\u5904\u7406 query = \"AI\u5b66\u79d1\u5b66\u8d39\u662f\u591a\u5c11\uff1f\" rag_system = RAGSystem ( vector_store , llm ) answer = rag_system . generate_answer ( query ) print ( answer )","title":"\u4ee3\u7801\u793a\u4f8b\uff08\u6574\u5408\u903b\u8f91\uff09"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_11","text":"\u7aef\u5230\u7aef\u8bbe\u8ba1 \uff1a\u4ece\u8f93\u5165\u5230\u8f93\u51fa\u65e0\u7f1d\u8854\u63a5\u3002 \u667a\u80fd\u4f18\u5316 \uff1a\u901a\u8fc7\u5206\u7c7b\u548c\u7b56\u7565\u9009\u62e9\u51cf\u5c11\u4e0d\u5fc5\u8981\u8ba1\u7b97\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/06-%E6%A3%80%E7%B4%A2%E7%AD%96%E7%95%A5%E4%B8%8ERAG%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html#_12","text":"\u672c\u7ae0\u8282\u6df1\u5165\u63a2\u8ba8\u4e86 strategy_selector.py \u548c rag_system.py \uff1a strategy_selector.py \uff1a\u901a\u8fc7\u5927\u8bed\u8a00\u6a21\u578b\u52a8\u6001\u9009\u62e9\u68c0\u7d22\u7b56\u7565\uff08\u76f4\u63a5\u68c0\u7d22\u3001HyDE\u3001\u5b50\u67e5\u8be2\u3001\u56de\u6eaf\uff09\uff0c\u4f18\u5316\u68c0\u7d22\u8f93\u5165\u3002 rag_system.py \uff1a\u6574\u5408\u67e5\u8be2\u5206\u7c7b\u3001\u68c0\u7d22\u7b56\u7565\u3001\u5411\u91cf\u5b58\u50a8\u548cPrompt\u7ba1\u7406\uff0c\u5b8c\u6210\u4ece\u67e5\u8be2\u5230\u56de\u7b54\u7684\u5b8c\u6574RAG\u6d41\u7a0b\u3002 \u534f\u540c\u4f5c\u7528 \uff1a\u4e24\u8005\u7ed3\u5408\u5b9e\u73b0\u4e86\u7075\u6d3b\u3001\u9ad8\u6548\u7684\u67e5\u8be2\u5904\u7406\uff0c\u786e\u4fdd\u7cfb\u7edf\u80fd\u591f\u51c6\u786e\u54cd\u5e94\u7528\u6237\u9700\u6c42\u3002 \u5b66\u4e60\u8005\u901a\u8fc7\u672c\u7ae0\u8282\u638c\u63e1\u4e86RAG\u7cfb\u7edf\u7684\u6838\u5fc3\u5de5\u4f5c\u673a\u5236\uff0c\u4e3a\u540e\u7eed\u7684\u7cfb\u7edf\u8fd0\u884c\u548c\u6269\u5c55\u5960\u5b9a\u4e86\u57fa\u7840\u3002","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html","text":"RAG\u7cfb\u7edf\u8fd0\u884c \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u00b6 1.\u638c\u63e1\u5982\u4f55\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u548c\u589e\u5f3a\u7684\u9519\u8bef\u5904\u7406\u8fd0\u884cEduRAG\u7cfb\u7edf\u3002 2.\u4e86\u89e3\u6574\u5408\u6838\u5fc3\u7684RAG\u903b\u8f91\u3002 main.py \u662fEduRAG\u7cfb\u7edf\u7684\u8fd0\u884c\u6a21\u5757\uff0c\u6db5\u76d6\u9519\u8bef\u5904\u7406\u3001\u53c2\u6570\u7075\u6d3b\u6027\u548c\u65e5\u5fd7\u8bb0\u5f55\u7b49\u529f\u80fd\u3002 main.py \u4f5c\u4e3a\u547d\u4ee4\u884c\u5165\u53e3\uff0c\u652f\u6301\u6570\u636e\u5904\u7406\u548c\u4ea4\u4e92\u5f0f\u67e5\u8be2\uff0c\u9002\u5408\u5f00\u53d1\u548c\u8c03\u8bd5\uff1b\u8be5\u6a21\u5757\u6574\u5408\u4e86\u524d\u51e0\u7ae0\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u5065\u58ee\u7684\u4ea4\u4e92\u65b9\u5f0f\u3002 7.1 \u7cfb\u7edf\u8fd0\u884c\u5165\u53e3 \u00b6 \u529f\u80fd\u6982\u8ff0 \u00b6 main.py\u662fEduRAG\u7cfb\u7edf\u7684\u8fd0\u884c\u5165\u53e3\uff0c\u63d0\u4f9b\u4e24\u79cd\u8fd0\u884c\u6a21\u5f0f\uff1a \u6570\u636e\u5904\u7406\u6a21\u5f0f \uff1a\u52a0\u8f7d\u5e76\u5411\u91cf\u5316\u6587\u6863\uff0c\u6784\u5efa\u5411\u91cf\u6570\u636e\u5e93\uff0c\u652f\u6301\u591a\u5b66\u79d1\u76ee\u5f55\u5904\u7406\u3002 \u67e5\u8be2\u6a21\u5f0f \uff1a\u901a\u8fc7\u547d\u4ee4\u884c\u4ea4\u4e92\u5f0f\u56de\u7b54\u7528\u6237\u67e5\u8be2\uff0c\u652f\u6301\u5b66\u79d1\u8fc7\u6ee4\u3002 \u5b8c\u6574\u4ee3\u7801 import os import sys from base import Config , logger from core.document_loader import process_documents # \u5bfc\u5165\u5904\u7406\u6587\u6863\u7684\u51fd\u6570 from core.vector_store import VectorStore from core.rag_system import RAGSystem from openai import OpenAI # \u4f7f\u7528 OpenAI \u63a5\u53e3 conf = Config () def main ( query_mode = True , directory_path = \"data\" ): # \u521d\u59cb\u5316 DashScope API \u5ba2\u6237\u7aef (\u901a\u8fc7 OpenAI \u63a5\u53e3) # \u786e\u4fdd\u73af\u5883\u53d8\u91cf DASHSCOPE_API_KEY \u548c DASHSCOPE_BASE_URL \u5df2\u8bbe\u7f6e try : client = OpenAI ( api_key = conf . DASHSCOPE_API_KEY , base_url = conf . DASHSCOPE_BASE_URL ) except Exception as e : logger . error ( f \"\u521d\u59cb\u5316 OpenAI \u5ba2\u6237\u7aef\u5931\u8d25 (\u8bf7\u68c0\u67e5 API Key \u548c Base URL): { e } \" ) # \u5982\u679c\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\uff0c\u53ef\u80fd\u65e0\u6cd5\u7ee7\u7eed\uff0c\u53d6\u51b3\u4e8e\u6a21\u5f0f if query_mode : # \u67e5\u8be2\u6a21\u5f0f\u4e0b\u5fc5\u987b\u8981\u6709 LLM print ( \"\u9519\u8bef\uff1a\u65e0\u6cd5\u521d\u59cb\u5316\u8bed\u8a00\u6a21\u578b\u5ba2\u6237\u7aef\uff0c\u65e0\u6cd5\u8fdb\u5165\u67e5\u8be2\u6a21\u5f0f\u3002\" ) return # \u6570\u636e\u5904\u7406\u6a21\u5f0f\u53ef\u80fd\u4e0d\u9700\u8981 LLM\uff0c\u53ef\u4ee5\u7ee7\u7eed\uff0c\u4f46\u6700\u597d\u8bb0\u5f55\u9519\u8bef client = None # \u6807\u8bb0\u5ba2\u6237\u7aef\u4e0d\u53ef\u7528 # \u5b9a\u4e49 LLM \u8c03\u7528\u51fd\u6570 (\u4ec5\u5728\u9700\u8981\u65f6\u5b9a\u4e49\u548c\u4f7f\u7528) def call_dashscope ( prompt ): if not client : # \u68c0\u67e5\u5ba2\u6237\u7aef\u662f\u5426\u53ef\u7528 logger . error ( \"LLM \u5ba2\u6237\u7aef\u672a\u521d\u59cb\u5316\uff0c\u65e0\u6cd5\u8c03\u7528 call_dashscope\" ) return f \"\u9519\u8bef: LLM\u5ba2\u6237\u7aef\u4e0d\u53ef\u7528\" try : completion = client . chat . completions . create ( model = conf . LLM_MODEL , messages = [ { \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b.\" }, { \"role\" : \"user\" , \"content\" : prompt }, ] # \u53ef\u4ee5\u6dfb\u52a0 temperature \u7b49\u53c2\u6570 ) if completion . choices and completion . choices [ 0 ] . message : return completion . choices [ 0 ] . message . content else : logger . error ( \"LLM API \u8c03\u7528\u8fd4\u56de\u65e0\u6548\u54cd\u5e94\u6216\u7a7a\u6d88\u606f\" ) return \"\u9519\u8bef: LLM\u8fd4\u56de\u65e0\u6548\u54cd\u5e94\" except Exception as e : logger . error ( f \"LLM API (call_dashscope) \u8c03\u7528\u5931\u8d25: { e } \" ) return f \"\u9519\u8bef: \u8c03\u7528LLM\u5931\u8d25 - { e } \" # \u521d\u59cb\u5316 VectorStore try : vector_store = VectorStore ( collection_name = conf . MILVUS_COLLECTION_NAME , host = conf . MILVUS_HOST , port = conf . MILVUS_PORT , database = conf . MILVUS_DATABASE_NAME , ) except Exception as e : logger . error ( f \"\u521d\u59cb\u5316 VectorStore \u5931\u8d25 (\u8bf7\u68c0\u67e5 Milvus \u8fde\u63a5\u914d\u7f6e): { e } \" ) print ( \"\u9519\u8bef\uff1a\u65e0\u6cd5\u8fde\u63a5\u5230\u5411\u91cf\u6570\u636e\u5e93\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u7ee7\u7eed\u3002\" ) return # \u6839\u636e\u6a21\u5f0f\u6267\u884c\u4e0d\u540c\u64cd\u4f5c if not query_mode : # --- \u6570\u636e\u5904\u7406\u6a21\u5f0f --- logger . info ( \"\u8fdb\u5165\u6570\u636e\u5904\u7406\u6a21\u5f0f...\" ) total_chunks_added = 0 for source_dir in conf . VALID_SOURCES : dir_path = os . path . join ( directory_path , f \" { source_dir } _data\" ) if os . path . exists ( dir_path ): logger . info ( f \"\u5f00\u59cb\u5904\u7406\u76ee\u5f55: { dir_path } \" ) try : chunks = process_documents ( dir_path , conf . PARENT_CHUNK_SIZE , conf . CHILD_CHUNK_SIZE , conf . CHUNK_OVERLAP , ) if chunks : vector_store . add_documents ( chunks ) total_chunks_added += len ( chunks ) logger . info ( f \"\u6210\u529f\u5904\u7406\u76ee\u5f55 { dir_path } \uff0c\u6dfb\u52a0\u4e86 { len ( chunks ) } \u4e2a\u6587\u6863\u5757\" ) else : logger . info ( f \"\u76ee\u5f55 { dir_path } \u672a\u53d1\u73b0\u6709\u6548\u6587\u6863\u6216\u5904\u7406\u7ed3\u679c\u4e3a\u7a7a\" ) except Exception as e : logger . error ( f \"\u5904\u7406\u76ee\u5f55 { dir_path } \u65f6\u51fa\u9519: { e } \" ) else : logger . warning ( f \"\u76ee\u5f55 { dir_path } \u4e0d\u5b58\u5728\uff0c\u8df3\u8fc7\u5904\u7406\" ) logger . info ( f \"\u6570\u636e\u5904\u7406\u5b8c\u6210\uff0c\u5171\u6dfb\u52a0\u4e86 { total_chunks_added } \u4e2a\u6587\u6863\u5757\u5230\u5411\u91cf\u5b58\u50a8\" ) else : # --- \u4ea4\u4e92\u5f0f\u67e5\u8be2\u6a21\u5f0f --- if not client : # \u518d\u6b21\u68c0\u67e5 LLM \u5ba2\u6237\u7aef\u662f\u5426\u5fc5\u987b\u4e14\u53ef\u7528 print ( \"\u9519\u8bef\uff1a\u67e5\u8be2\u6a21\u5f0f\u9700\u8981\u8bed\u8a00\u6a21\u578b\u5ba2\u6237\u7aef\uff0c\u4f46\u521d\u59cb\u5316\u5931\u8d25\u3002\" ) return logger . info ( \"\u8fdb\u5165\u4ea4\u4e92\u5f0f\u67e5\u8be2\u6a21\u5f0f...\" ) try : rag_system = RAGSystem ( vector_store , call_dashscope ) except Exception as e : logger . error ( f \"\u521d\u59cb\u5316 RAGSystem \u5931\u8d25: { e } \" ) print ( \"\u9519\u8bef\uff1a\u65e0\u6cd5\u521d\u59cb\u5316 RAG \u7cfb\u7edf\uff0c\u65e0\u6cd5\u8fdb\u5165\u67e5\u8be2\u6a21\u5f0f\u3002\" ) return valid_sources = conf . VALID_SOURCES print ( \" \\n \u6b22\u8fce\u4f7f\u7528 EduRAG \u4ea4\u4e92\u5f0f\u67e5\u8be2\u7cfb\u7edf\uff01\" ) print ( f \"\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\uff1a { valid_sources } \" ) print ( \"\u8f93\u5165\u60a8\u7684\u95ee\u9898\uff0c\u6216\u8f93\u5165 'exit' \u9000\u51fa\u3002\" ) while True : query = input ( \" \\n \u8bf7\u8f93\u5165\u60a8\u7684\u95ee\u9898\uff1a\" ) if query . lower () == \"exit\" : logger . info ( \"\u7528\u6237\u9000\u51fa\u67e5\u8be2\u6a21\u5f0f\" ) print ( \"\u518d\u89c1\uff01\" ) break source_filter_input = input ( f \"\u8bf7\u8f93\u5165\u5b66\u79d1\u7c7b\u522b ( { '/' . join ( valid_sources ) } ) (\u76f4\u63a5\u56de\u8f66\u9ed8\u8ba4\u4e0d\u8fc7\u6ee4)\uff1a\" ) . strip () source_filter = None # \u9ed8\u8ba4\u4e0d\u8fc7\u6ee4 if source_filter_input : if source_filter_input in valid_sources : source_filter = source_filter_input logger . info ( f \"\u7528\u6237\u9009\u62e9\u4e86\u5b66\u79d1\u8fc7\u6ee4: { source_filter } \" ) else : logger . warning ( f \"\u65e0\u6548\u7684\u5b66\u79d1\u7c7b\u522b ' { source_filter_input } '\uff0c\u5c06\u4e0d\u8fc7\u6ee4\" ) print ( f \"\u63d0\u793a\uff1a\u8f93\u5165\u7684\u5b66\u79d1 ' { source_filter_input } ' \u65e0\u6548\uff0c\u5c06\u4e0d\u8fc7\u6ee4\u3002\" ) try : print ( \"\u6b63\u5728\u751f\u6210\u7b54\u6848\uff0c\u8bf7\u7a0d\u5019...\" ) answer = rag_system . generate_answer ( query , source_filter = source_filter ) print ( \"-\" * 30 ) print ( f \"\u95ee\u9898: { query } \" ) print ( f \"\u56de\u7b54: { answer } \" ) print ( \"-\" * 30 ) except Exception as e : logger . error ( f \"\u5904\u7406\u67e5\u8be2 ' { query } ' \u65f6\u5931\u8d25: { str ( e ) } \" ) print ( f \"\u62b1\u6b49\uff0c\u5904\u7406\u60a8\u7684\u95ee\u9898\u65f6\u9047\u5230\u4e86\u9519\u8bef\uff0c\u8bf7\u7a0d\u540e\u91cd\u8bd5\u6216\u8054\u7cfb\u7ba1\u7406\u5458\u3002 \\n \" ) if __name__ == \"__main__\" : # \u9ed8\u8ba4\u8fdb\u5165\u67e5\u8be2\u6a21\u5f0f # \u82e5\u8981\u6267\u884c\u6570\u636e\u5904\u7406\uff0c\u53ef\u4ee5\u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a # main(query_mode=False) # \u6216\u8005\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u63a7\u5236 import argparse parser = argparse . ArgumentParser ( description = \"EduRAG System Main Entry Point\" ) parser . add_argument ( '--data-processing' , action = 'store_true' , help = 'Run in data processing mode instead of query mode.' ) parser . add_argument ( '--data-dir' , type = str , default = './data' , help = 'Path to the data directory.' ) args = parser . parse_args () main ( query_mode = ( not args . data_processing ), directory_path = args . data_dir ) \u5b9e\u73b0\u7ec6\u8282 \u00b6 \u73af\u5883\u53d8\u91cf\u52a0\u8f7d \uff1a \u4f7f\u7528 Config \u6587\u4ef6\uff0c\u786e\u4fddAPI\u5bc6\u94a5\u7b49\u914d\u7f6e\u4ece\u73af\u5883\u53d8\u91cf\u8bfb\u53d6\u3002 LLM\u5ba2\u6237\u7aef\u521d\u59cb\u5316 \uff1a \u589e\u5f3a\u9519\u8bef\u5904\u7406\uff0c\u82e5\u521d\u59cb\u5316\u5931\u8d25\uff0c\u5728\u67e5\u8be2\u6a21\u5f0f\u4e0b\u9000\u51fa\uff0c\u6570\u636e\u5904\u7406\u6a21\u5f0f\u53ef\u7ee7\u7eed\u3002 \u5b9a\u4e49 call_dashscope \u51fd\u6570\uff0c\u5c01\u88c5DashScope API\u8c03\u7528\uff0c\u5305\u542b\u8be6\u7ec6\u5f02\u5e38\u5904\u7406\u3002 VectorStore\u521d\u59cb\u5316 \uff1a \u4f7f\u7528\u663e\u5f0f\u53c2\u6570\u521d\u59cb\u5316\uff0c\u786e\u4fdd\u914d\u7f6e\u53ef\u63a7\uff0c\u82e5\u5931\u8d25\u5219\u7ec8\u6b62\u7a0b\u5e8f\u3002 \u6570\u636e\u5904\u7406\u6a21\u5f0f \uff1a \u904d\u5386 VALID_SOURCES \uff0c\u5904\u7406\u6bcf\u4e2a\u5b66\u79d1\u76ee\u5f55\uff0c\u8bb0\u5f55\u5904\u7406\u7684\u6587\u6863\u5757\u6570\u91cf\u3002 \u652f\u6301\u81ea\u5b9a\u4e49\u5206\u5757\u53c2\u6570\uff08\u5982 PARENT_CHUNK_SIZE \uff09\u3002 \u67e5\u8be2\u6a21\u5f0f \uff1a \u663e\u793a\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\uff0c\u63d0\u4f9b\u8f93\u5165\u63d0\u793a\u3002 \u6821\u9a8c source_filter \uff0c\u82e5\u65e0\u6548\u5219\u63d0\u793a\u5e76\u5ffd\u7565\u3002 \u8f93\u51fa\u683c\u5f0f\u5316\u7b54\u6848\uff0c\u589e\u5f3a\u7528\u6237\u4f53\u9a8c\u3002 \u547d\u4ee4\u884c\u53c2\u6570 \uff1a \u4f7f\u7528 argparse \u652f\u6301 --data-processing \u548c --data-dir \uff0c\u63d0\u9ad8\u7075\u6d3b\u6027\u3002 6.2 RAG\u7cfb\u7edf\u8fd0\u884c \u00b6 \u8fd0\u884c\u65b9\u5f0f \u00b6 \u547d\u4ee4\u884c\u8fd0\u884c\uff08main.py\uff09 \uff1a \u6570\u636e\u5904\u7406 \uff1a python main.py --data-processing --data-dir ./data \u67e5\u8be2\u6a21\u5f0f \uff1a python main.py \u793a\u4f8b\u8f93\u51fa\uff1a \u6b22\u8fce\u4f7f\u7528 EduRAG \u4ea4\u4e92\u5f0f\u67e5\u8be2\u7cfb\u7edf\uff01 \u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\uff1a['ai', 'java', 'test', 'ops', 'bigdata'] \u8f93\u5165\u60a8\u7684\u95ee\u9898\uff0c\u6216\u8f93\u5165 'exit' \u9000\u51fa\u3002 \u8bf7\u8f93\u5165\u60a8\u7684\u95ee\u9898\uff1aAI\u5b66\u79d1\u5b66\u8d39\u662f\u591a\u5c11\uff1f \u8bf7\u8f93\u5165\u5b66\u79d1\u7c7b\u522b (ai/java/test/ops/bigdata) (\u76f4\u63a5\u56de\u8f66\u9ed8\u8ba4\u4e0d\u8fc7\u6ee4)\uff1aai \u6b63\u5728\u751f\u6210\u7b54\u6848\uff0c\u8bf7\u7a0d\u5019... ------------------------------ \u95ee\u9898: AI\u5b66\u79d1\u5b66\u8d39\u662f\u591a\u5c11\uff1f \u56de\u7b54: ... ------------------------------ \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u4e86RAG\u7cfb\u7edf\u8fd0\u884c\u7684 main.py \uff1a main.py \uff1a\u547d\u4ee4\u884c\u5165\u53e3\uff0c\u652f\u6301\u6570\u636e\u5904\u7406\u548c\u4ea4\u4e92\u5f0f\u67e5\u8be2\u3002","title":"4.7 RAG\u7cfb\u7edf\u8fd0\u884c"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html#rag","text":"","title":"RAG\u7cfb\u7edf\u8fd0\u884c"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html#_1","text":"1.\u638c\u63e1\u5982\u4f55\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u548c\u589e\u5f3a\u7684\u9519\u8bef\u5904\u7406\u8fd0\u884cEduRAG\u7cfb\u7edf\u3002 2.\u4e86\u89e3\u6574\u5408\u6838\u5fc3\u7684RAG\u903b\u8f91\u3002 main.py \u662fEduRAG\u7cfb\u7edf\u7684\u8fd0\u884c\u6a21\u5757\uff0c\u6db5\u76d6\u9519\u8bef\u5904\u7406\u3001\u53c2\u6570\u7075\u6d3b\u6027\u548c\u65e5\u5fd7\u8bb0\u5f55\u7b49\u529f\u80fd\u3002 main.py \u4f5c\u4e3a\u547d\u4ee4\u884c\u5165\u53e3\uff0c\u652f\u6301\u6570\u636e\u5904\u7406\u548c\u4ea4\u4e92\u5f0f\u67e5\u8be2\uff0c\u9002\u5408\u5f00\u53d1\u548c\u8c03\u8bd5\uff1b\u8be5\u6a21\u5757\u6574\u5408\u4e86\u524d\u51e0\u7ae0\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u5065\u58ee\u7684\u4ea4\u4e92\u65b9\u5f0f\u3002","title":"\u5b66\u4e60\u76ee\u6807\uff1a"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html#71","text":"","title":"7.1 \u7cfb\u7edf\u8fd0\u884c\u5165\u53e3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html#_2","text":"main.py\u662fEduRAG\u7cfb\u7edf\u7684\u8fd0\u884c\u5165\u53e3\uff0c\u63d0\u4f9b\u4e24\u79cd\u8fd0\u884c\u6a21\u5f0f\uff1a \u6570\u636e\u5904\u7406\u6a21\u5f0f \uff1a\u52a0\u8f7d\u5e76\u5411\u91cf\u5316\u6587\u6863\uff0c\u6784\u5efa\u5411\u91cf\u6570\u636e\u5e93\uff0c\u652f\u6301\u591a\u5b66\u79d1\u76ee\u5f55\u5904\u7406\u3002 \u67e5\u8be2\u6a21\u5f0f \uff1a\u901a\u8fc7\u547d\u4ee4\u884c\u4ea4\u4e92\u5f0f\u56de\u7b54\u7528\u6237\u67e5\u8be2\uff0c\u652f\u6301\u5b66\u79d1\u8fc7\u6ee4\u3002 \u5b8c\u6574\u4ee3\u7801 import os import sys from base import Config , logger from core.document_loader import process_documents # \u5bfc\u5165\u5904\u7406\u6587\u6863\u7684\u51fd\u6570 from core.vector_store import VectorStore from core.rag_system import RAGSystem from openai import OpenAI # \u4f7f\u7528 OpenAI \u63a5\u53e3 conf = Config () def main ( query_mode = True , directory_path = \"data\" ): # \u521d\u59cb\u5316 DashScope API \u5ba2\u6237\u7aef (\u901a\u8fc7 OpenAI \u63a5\u53e3) # \u786e\u4fdd\u73af\u5883\u53d8\u91cf DASHSCOPE_API_KEY \u548c DASHSCOPE_BASE_URL \u5df2\u8bbe\u7f6e try : client = OpenAI ( api_key = conf . DASHSCOPE_API_KEY , base_url = conf . DASHSCOPE_BASE_URL ) except Exception as e : logger . error ( f \"\u521d\u59cb\u5316 OpenAI \u5ba2\u6237\u7aef\u5931\u8d25 (\u8bf7\u68c0\u67e5 API Key \u548c Base URL): { e } \" ) # \u5982\u679c\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u5931\u8d25\uff0c\u53ef\u80fd\u65e0\u6cd5\u7ee7\u7eed\uff0c\u53d6\u51b3\u4e8e\u6a21\u5f0f if query_mode : # \u67e5\u8be2\u6a21\u5f0f\u4e0b\u5fc5\u987b\u8981\u6709 LLM print ( \"\u9519\u8bef\uff1a\u65e0\u6cd5\u521d\u59cb\u5316\u8bed\u8a00\u6a21\u578b\u5ba2\u6237\u7aef\uff0c\u65e0\u6cd5\u8fdb\u5165\u67e5\u8be2\u6a21\u5f0f\u3002\" ) return # \u6570\u636e\u5904\u7406\u6a21\u5f0f\u53ef\u80fd\u4e0d\u9700\u8981 LLM\uff0c\u53ef\u4ee5\u7ee7\u7eed\uff0c\u4f46\u6700\u597d\u8bb0\u5f55\u9519\u8bef client = None # \u6807\u8bb0\u5ba2\u6237\u7aef\u4e0d\u53ef\u7528 # \u5b9a\u4e49 LLM \u8c03\u7528\u51fd\u6570 (\u4ec5\u5728\u9700\u8981\u65f6\u5b9a\u4e49\u548c\u4f7f\u7528) def call_dashscope ( prompt ): if not client : # \u68c0\u67e5\u5ba2\u6237\u7aef\u662f\u5426\u53ef\u7528 logger . error ( \"LLM \u5ba2\u6237\u7aef\u672a\u521d\u59cb\u5316\uff0c\u65e0\u6cd5\u8c03\u7528 call_dashscope\" ) return f \"\u9519\u8bef: LLM\u5ba2\u6237\u7aef\u4e0d\u53ef\u7528\" try : completion = client . chat . completions . create ( model = conf . LLM_MODEL , messages = [ { \"role\" : \"system\" , \"content\" : \"\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b.\" }, { \"role\" : \"user\" , \"content\" : prompt }, ] # \u53ef\u4ee5\u6dfb\u52a0 temperature \u7b49\u53c2\u6570 ) if completion . choices and completion . choices [ 0 ] . message : return completion . choices [ 0 ] . message . content else : logger . error ( \"LLM API \u8c03\u7528\u8fd4\u56de\u65e0\u6548\u54cd\u5e94\u6216\u7a7a\u6d88\u606f\" ) return \"\u9519\u8bef: LLM\u8fd4\u56de\u65e0\u6548\u54cd\u5e94\" except Exception as e : logger . error ( f \"LLM API (call_dashscope) \u8c03\u7528\u5931\u8d25: { e } \" ) return f \"\u9519\u8bef: \u8c03\u7528LLM\u5931\u8d25 - { e } \" # \u521d\u59cb\u5316 VectorStore try : vector_store = VectorStore ( collection_name = conf . MILVUS_COLLECTION_NAME , host = conf . MILVUS_HOST , port = conf . MILVUS_PORT , database = conf . MILVUS_DATABASE_NAME , ) except Exception as e : logger . error ( f \"\u521d\u59cb\u5316 VectorStore \u5931\u8d25 (\u8bf7\u68c0\u67e5 Milvus \u8fde\u63a5\u914d\u7f6e): { e } \" ) print ( \"\u9519\u8bef\uff1a\u65e0\u6cd5\u8fde\u63a5\u5230\u5411\u91cf\u6570\u636e\u5e93\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u7ee7\u7eed\u3002\" ) return # \u6839\u636e\u6a21\u5f0f\u6267\u884c\u4e0d\u540c\u64cd\u4f5c if not query_mode : # --- \u6570\u636e\u5904\u7406\u6a21\u5f0f --- logger . info ( \"\u8fdb\u5165\u6570\u636e\u5904\u7406\u6a21\u5f0f...\" ) total_chunks_added = 0 for source_dir in conf . VALID_SOURCES : dir_path = os . path . join ( directory_path , f \" { source_dir } _data\" ) if os . path . exists ( dir_path ): logger . info ( f \"\u5f00\u59cb\u5904\u7406\u76ee\u5f55: { dir_path } \" ) try : chunks = process_documents ( dir_path , conf . PARENT_CHUNK_SIZE , conf . CHILD_CHUNK_SIZE , conf . CHUNK_OVERLAP , ) if chunks : vector_store . add_documents ( chunks ) total_chunks_added += len ( chunks ) logger . info ( f \"\u6210\u529f\u5904\u7406\u76ee\u5f55 { dir_path } \uff0c\u6dfb\u52a0\u4e86 { len ( chunks ) } \u4e2a\u6587\u6863\u5757\" ) else : logger . info ( f \"\u76ee\u5f55 { dir_path } \u672a\u53d1\u73b0\u6709\u6548\u6587\u6863\u6216\u5904\u7406\u7ed3\u679c\u4e3a\u7a7a\" ) except Exception as e : logger . error ( f \"\u5904\u7406\u76ee\u5f55 { dir_path } \u65f6\u51fa\u9519: { e } \" ) else : logger . warning ( f \"\u76ee\u5f55 { dir_path } \u4e0d\u5b58\u5728\uff0c\u8df3\u8fc7\u5904\u7406\" ) logger . info ( f \"\u6570\u636e\u5904\u7406\u5b8c\u6210\uff0c\u5171\u6dfb\u52a0\u4e86 { total_chunks_added } \u4e2a\u6587\u6863\u5757\u5230\u5411\u91cf\u5b58\u50a8\" ) else : # --- \u4ea4\u4e92\u5f0f\u67e5\u8be2\u6a21\u5f0f --- if not client : # \u518d\u6b21\u68c0\u67e5 LLM \u5ba2\u6237\u7aef\u662f\u5426\u5fc5\u987b\u4e14\u53ef\u7528 print ( \"\u9519\u8bef\uff1a\u67e5\u8be2\u6a21\u5f0f\u9700\u8981\u8bed\u8a00\u6a21\u578b\u5ba2\u6237\u7aef\uff0c\u4f46\u521d\u59cb\u5316\u5931\u8d25\u3002\" ) return logger . info ( \"\u8fdb\u5165\u4ea4\u4e92\u5f0f\u67e5\u8be2\u6a21\u5f0f...\" ) try : rag_system = RAGSystem ( vector_store , call_dashscope ) except Exception as e : logger . error ( f \"\u521d\u59cb\u5316 RAGSystem \u5931\u8d25: { e } \" ) print ( \"\u9519\u8bef\uff1a\u65e0\u6cd5\u521d\u59cb\u5316 RAG \u7cfb\u7edf\uff0c\u65e0\u6cd5\u8fdb\u5165\u67e5\u8be2\u6a21\u5f0f\u3002\" ) return valid_sources = conf . VALID_SOURCES print ( \" \\n \u6b22\u8fce\u4f7f\u7528 EduRAG \u4ea4\u4e92\u5f0f\u67e5\u8be2\u7cfb\u7edf\uff01\" ) print ( f \"\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\uff1a { valid_sources } \" ) print ( \"\u8f93\u5165\u60a8\u7684\u95ee\u9898\uff0c\u6216\u8f93\u5165 'exit' \u9000\u51fa\u3002\" ) while True : query = input ( \" \\n \u8bf7\u8f93\u5165\u60a8\u7684\u95ee\u9898\uff1a\" ) if query . lower () == \"exit\" : logger . info ( \"\u7528\u6237\u9000\u51fa\u67e5\u8be2\u6a21\u5f0f\" ) print ( \"\u518d\u89c1\uff01\" ) break source_filter_input = input ( f \"\u8bf7\u8f93\u5165\u5b66\u79d1\u7c7b\u522b ( { '/' . join ( valid_sources ) } ) (\u76f4\u63a5\u56de\u8f66\u9ed8\u8ba4\u4e0d\u8fc7\u6ee4)\uff1a\" ) . strip () source_filter = None # \u9ed8\u8ba4\u4e0d\u8fc7\u6ee4 if source_filter_input : if source_filter_input in valid_sources : source_filter = source_filter_input logger . info ( f \"\u7528\u6237\u9009\u62e9\u4e86\u5b66\u79d1\u8fc7\u6ee4: { source_filter } \" ) else : logger . warning ( f \"\u65e0\u6548\u7684\u5b66\u79d1\u7c7b\u522b ' { source_filter_input } '\uff0c\u5c06\u4e0d\u8fc7\u6ee4\" ) print ( f \"\u63d0\u793a\uff1a\u8f93\u5165\u7684\u5b66\u79d1 ' { source_filter_input } ' \u65e0\u6548\uff0c\u5c06\u4e0d\u8fc7\u6ee4\u3002\" ) try : print ( \"\u6b63\u5728\u751f\u6210\u7b54\u6848\uff0c\u8bf7\u7a0d\u5019...\" ) answer = rag_system . generate_answer ( query , source_filter = source_filter ) print ( \"-\" * 30 ) print ( f \"\u95ee\u9898: { query } \" ) print ( f \"\u56de\u7b54: { answer } \" ) print ( \"-\" * 30 ) except Exception as e : logger . error ( f \"\u5904\u7406\u67e5\u8be2 ' { query } ' \u65f6\u5931\u8d25: { str ( e ) } \" ) print ( f \"\u62b1\u6b49\uff0c\u5904\u7406\u60a8\u7684\u95ee\u9898\u65f6\u9047\u5230\u4e86\u9519\u8bef\uff0c\u8bf7\u7a0d\u540e\u91cd\u8bd5\u6216\u8054\u7cfb\u7ba1\u7406\u5458\u3002 \\n \" ) if __name__ == \"__main__\" : # \u9ed8\u8ba4\u8fdb\u5165\u67e5\u8be2\u6a21\u5f0f # \u82e5\u8981\u6267\u884c\u6570\u636e\u5904\u7406\uff0c\u53ef\u4ee5\u4fee\u6539\u8c03\u7528\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a # main(query_mode=False) # \u6216\u8005\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u63a7\u5236 import argparse parser = argparse . ArgumentParser ( description = \"EduRAG System Main Entry Point\" ) parser . add_argument ( '--data-processing' , action = 'store_true' , help = 'Run in data processing mode instead of query mode.' ) parser . add_argument ( '--data-dir' , type = str , default = './data' , help = 'Path to the data directory.' ) args = parser . parse_args () main ( query_mode = ( not args . data_processing ), directory_path = args . data_dir )","title":"\u529f\u80fd\u6982\u8ff0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html#_3","text":"\u73af\u5883\u53d8\u91cf\u52a0\u8f7d \uff1a \u4f7f\u7528 Config \u6587\u4ef6\uff0c\u786e\u4fddAPI\u5bc6\u94a5\u7b49\u914d\u7f6e\u4ece\u73af\u5883\u53d8\u91cf\u8bfb\u53d6\u3002 LLM\u5ba2\u6237\u7aef\u521d\u59cb\u5316 \uff1a \u589e\u5f3a\u9519\u8bef\u5904\u7406\uff0c\u82e5\u521d\u59cb\u5316\u5931\u8d25\uff0c\u5728\u67e5\u8be2\u6a21\u5f0f\u4e0b\u9000\u51fa\uff0c\u6570\u636e\u5904\u7406\u6a21\u5f0f\u53ef\u7ee7\u7eed\u3002 \u5b9a\u4e49 call_dashscope \u51fd\u6570\uff0c\u5c01\u88c5DashScope API\u8c03\u7528\uff0c\u5305\u542b\u8be6\u7ec6\u5f02\u5e38\u5904\u7406\u3002 VectorStore\u521d\u59cb\u5316 \uff1a \u4f7f\u7528\u663e\u5f0f\u53c2\u6570\u521d\u59cb\u5316\uff0c\u786e\u4fdd\u914d\u7f6e\u53ef\u63a7\uff0c\u82e5\u5931\u8d25\u5219\u7ec8\u6b62\u7a0b\u5e8f\u3002 \u6570\u636e\u5904\u7406\u6a21\u5f0f \uff1a \u904d\u5386 VALID_SOURCES \uff0c\u5904\u7406\u6bcf\u4e2a\u5b66\u79d1\u76ee\u5f55\uff0c\u8bb0\u5f55\u5904\u7406\u7684\u6587\u6863\u5757\u6570\u91cf\u3002 \u652f\u6301\u81ea\u5b9a\u4e49\u5206\u5757\u53c2\u6570\uff08\u5982 PARENT_CHUNK_SIZE \uff09\u3002 \u67e5\u8be2\u6a21\u5f0f \uff1a \u663e\u793a\u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\uff0c\u63d0\u4f9b\u8f93\u5165\u63d0\u793a\u3002 \u6821\u9a8c source_filter \uff0c\u82e5\u65e0\u6548\u5219\u63d0\u793a\u5e76\u5ffd\u7565\u3002 \u8f93\u51fa\u683c\u5f0f\u5316\u7b54\u6848\uff0c\u589e\u5f3a\u7528\u6237\u4f53\u9a8c\u3002 \u547d\u4ee4\u884c\u53c2\u6570 \uff1a \u4f7f\u7528 argparse \u652f\u6301 --data-processing \u548c --data-dir \uff0c\u63d0\u9ad8\u7075\u6d3b\u6027\u3002","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html#62-rag","text":"","title":"6.2 RAG\u7cfb\u7edf\u8fd0\u884c"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html#_4","text":"\u547d\u4ee4\u884c\u8fd0\u884c\uff08main.py\uff09 \uff1a \u6570\u636e\u5904\u7406 \uff1a python main.py --data-processing --data-dir ./data \u67e5\u8be2\u6a21\u5f0f \uff1a python main.py \u793a\u4f8b\u8f93\u51fa\uff1a \u6b22\u8fce\u4f7f\u7528 EduRAG \u4ea4\u4e92\u5f0f\u67e5\u8be2\u7cfb\u7edf\uff01 \u652f\u6301\u7684\u5b66\u79d1\u7c7b\u522b\uff1a['ai', 'java', 'test', 'ops', 'bigdata'] \u8f93\u5165\u60a8\u7684\u95ee\u9898\uff0c\u6216\u8f93\u5165 'exit' \u9000\u51fa\u3002 \u8bf7\u8f93\u5165\u60a8\u7684\u95ee\u9898\uff1aAI\u5b66\u79d1\u5b66\u8d39\u662f\u591a\u5c11\uff1f \u8bf7\u8f93\u5165\u5b66\u79d1\u7c7b\u522b (ai/java/test/ops/bigdata) (\u76f4\u63a5\u56de\u8f66\u9ed8\u8ba4\u4e0d\u8fc7\u6ee4)\uff1aai \u6b63\u5728\u751f\u6210\u7b54\u6848\uff0c\u8bf7\u7a0d\u5019... ------------------------------ \u95ee\u9898: AI\u5b66\u79d1\u5b66\u8d39\u662f\u591a\u5c11\uff1f \u56de\u7b54: ... ------------------------------","title":"\u8fd0\u884c\u65b9\u5f0f"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/07-RAG%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C.html#_5","text":"\u672c\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u4e86RAG\u7cfb\u7edf\u8fd0\u884c\u7684 main.py \uff1a main.py \uff1a\u547d\u4ee4\u884c\u5165\u53e3\uff0c\u652f\u6301\u6570\u636e\u5904\u7406\u548c\u4ea4\u4e92\u5f0f\u67e5\u8be2\u3002","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html","text":"RAG\u4e2d\u7684Query\u6539\u5199 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u7406\u89e3query\u6539\u5199\u7684\u610f\u4e49 \u638c\u63e1qeury\u6539\u5199\u7684\u5b9e\u73b0\u65b9\u6cd5 1 \u524d\u8a00 \u00b6 \u5728RAG\uff08\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09\u6d41\u7a0b\u4e2d\uff0c\u7b2c\u4e00\u6b65\u901a\u5e38\u662f\u5bf9\u7528\u6237\u7684\u63d0\u95ee\uff08query\uff09\u8fdb\u884c\u6539\u5199\u3002\u8fd9\u662f\u56e0\u4e3a\u7528\u6237\u63d0\u95ee\u7684\u65b9\u5f0f\u4e0e\u4ed6\u4eec\u671f\u671b\u7684\u7b54\u6848\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u5dee\u8ddd\u3002\u7531\u4e8e\u6bcf\u4e2a\u7528\u6237\u7684\u63d0\u95ee\u65b9\u5f0f\u53ef\u80fd\u5343\u5dee\u4e07\u522b\uff0c\u56e0\u6b64\u5bf9\u95ee\u9898\u8fdb\u884c\u6539\u5199\u53ef\u4ee5\u5e2e\u52a9\u7cfb\u7edf\u66f4\u597d\u5730\u7406\u89e3\u95ee\u9898\u5e76\u8fd4\u56de\u66f4\u76f8\u5173\u7684\u7b54\u6848\uff0c\u4ece\u800c\u63d0\u5347RAG\u7cfb\u7edf\u7684\u9c81\u68d2\u6027\u548c\u6269\u5c55\u6027\u3002 \u7528\u6237\u63d0\u51fa\u7684\u95ee\u9898\u901a\u5e38\u5b58\u5728\u4e24\u7c7b\u95ee\u9898\uff1a \u4fe1\u606f\u4e0d\u5b8c\u6574\uff1a\u7528\u6237\u7684\u63d0\u95ee\u6ca1\u6709\u8868\u8fbe\u6e05\u695a\u6240\u6709\u7684\u5173\u952e\u4fe1\u606f \u566a\u58f0\u95ee\u9898\uff1a\u63d0\u95ee\u4e2d\u53ef\u80fd\u5305\u542b\u4e86\u4e0e\u7b54\u6848\u65e0\u5173\u7684\u5185\u5bb9\u3002 2 \u4fe1\u606f\u4e0d\u5b8c\u6574 \u00b6 2.1 \u5386\u53f2\u4f1a\u8bdd\u6539\u5199 \u00b6 \u5728\u5bf9\u8bdd\u4e2d\uff0c\u524d\u540e\u6587\u662f\u76f8\u4e92\u5173\u8054\u7684\u3002\u5982\u679c\u4ec5\u51ed\u5f53\u524d\u7684query\u8fdb\u884c\u68c0\u7d22\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53ec\u56de\u7cbe\u5ea6\u5927\u5e45\u4e0b\u964d\uff0c\u56e0\u4e3aquery\u4e2d\u5f80\u5f80\u7f3a\u5c11\u91cd\u8981\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a \u7528\u6237 : \u534e\u4e3ameta70\u624b\u673a\u7684\u6027\u80fd\u600e\u4e48\u6837\uff1f \u7cfb\u7edf : \u534e\u4e3ameta70\u624b\u673a\u642d\u8f7d\u4e86\u5f3a\u5927\u7684\u5904\u7406\u5668\u548c\u5148\u8fdb\u7684\u6444\u50cf\u7cfb\u7edf\uff0c\u6027\u80fd\u8868\u73b0\u975e\u5e38\u4f18\u79c0\u3002 \u7528\u6237 : \u4e0e\u4e0a\u4e00\u4ee3\u76f8\u6bd4\uff0c\u5b83\u6709\u54ea\u4e9b\u6539\u8fdb\uff1f \u7cfb\u7edf : \u534e\u4e3ameta70\u76f8\u8f83\u4e8emeta60\u5728\u5904\u7406\u5668\u6027\u80fd\u3001\u6444\u50cf\u5934\u4f18\u5316\u548c\u7535\u6c60\u7eed\u822a\u65b9\u9762\u90fd\u6709\u663e\u8457\u63d0\u5347\u3002 \u7528\u6237 : \u6444\u50cf\u5934\u65b9\u9762\u5177\u4f53\u6539\u8fdb\u4e86\u4ec0\u4e48\uff1f --\u6539\u5199\u524d : \u6444\u50cf\u5934\u65b9\u9762\u5177\u4f53\u6539\u8fdb\u4e86\u4ec0\u4e48\uff1f --\u6539\u5199\u540e : \u534e\u4e3ameta70\u624b\u673a\u7684\u6444\u50cf\u5934\u76f8\u6bd4meta60\u6709\u54ea\u4e9b\u5177\u4f53\u6539\u8fdb\uff1f 2.2 \u5173\u952e\u8bcd\u6269\u5199 \u00b6 \u7528\u6237\u5728\u641c\u7d22\u65f6\u5e38\u5e38\u8f93\u5165\u7684\u5173\u952e\u8bcd\u8f83\u4e3a\u7b80\u77ed\uff0c\u5e76\u4e14\u7f3a\u4e4f\u8db3\u591f\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u8fd9\u4f1a\u5f71\u54cd\u8bed\u4e49\u68c0\u7d22\uff08\u5411\u91cf\u68c0\u7d22\uff09\u7684\u6548\u679c\uff0c\u5bfc\u81f4\u53ec\u56de\u7684\u76f8\u5173\u6027\u8f83\u4f4e\u3002\u56e0\u6b64\uff0c\u9700\u8981\u5bf9\u7528\u6237\u7684\u539f\u59cb\u5173\u952e\u8bcd\u8fdb\u884c\u6269\u5c55\u548c\u4e30\u5bcc\u3002 \u7528\u6237\u8f93\u5165 : \u201c\u673a\u5668\u5b66\u4e60 \u5b9e\u8df5\u201d \u6539\u5199\u540e\u7684 Query : \u201c\u673a\u5668\u5b66\u4e60\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6848\u4f8b\u6709\u54ea\u4e9b\uff1f\u54ea\u4e9b\u5de5\u5177\u548c\u65b9\u6cd5\u9002\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u5b9e\u8df5\uff1f\u201d 2.3 \u4f2a\u7b54\u6848\u6539\u5199 \u00b6 \u4f2a\u7b54\u6848\u6539\u5199\u901a\u8fc7\u5728\u539f\u59cb\u67e5\u8be2\u4e2d\u52a0\u5165\u4e00\u79cd\u5047\u8bbe\u6027\u7b54\u6848\uff0c\u6765\u589e\u5f3a\u67e5\u8be2\u7684\u8bed\u4e49\u4e30\u5bcc\u6027\uff0c\u4ece\u800c\u63d0\u9ad8\u68c0\u7d22\u6216\u56de\u5e94\u7684\u7cbe\u51c6\u5ea6\u3002\u4f2a\u7b54\u6848\u5e76\u975e\u771f\u5b9e\u7684\u7b54\u6848\uff0c\u800c\u662f\u4e00\u4e2a\u8bbe\u60f3\u7684\u5185\u5bb9\uff0c\u7528\u4e8e\u5e2e\u52a9\u7cfb\u7edf\u66f4\u597d\u5730\u7406\u89e3\u5e76\u68c0\u7d22\u76f8\u5173\u4fe1\u606f\u3002 \u7528\u6237\u8f93\u5165 : \u201c\u5982\u4f55\u63d0\u9ad8\u4f01\u4e1a\u7684\u5e02\u573a\u7ade\u4e89\u529b\uff1f\u201d \u6539\u5199\u540e\u7684 Query : \u201c\u5982\u4f55\u63d0\u9ad8\u4f01\u4e1a\u7684\u5e02\u573a\u7ade\u4e89\u529b\uff1f\u6bd4\u5982\u901a\u8fc7\u521b\u65b0\u4ea7\u54c1\u3001\u4f18\u5316\u8425\u9500\u7b56\u7565\u6216\u63d0\u5347\u5ba2\u6237\u670d\u52a1\u7b49\u624b\u6bb5\u3002\u201d \u4f2a\u7b54\u6848\u76ee\u7684--> \u901a\u8fc7\u63d0\u4f9b\u5047\u8bbe\u6027\u7684\u63d0\u5347\u65b9\u5f0f\uff0c\u4e30\u5bcc\u67e5\u8be2\u7684\u8bed\u4e49\u4fe1\u606f\uff0c\u4ece\u800c\u589e\u5f3a\u7cfb\u7edf\u5728\u5e94\u5bf9\u590d\u6742\u95ee\u9898\u65f6\u7684\u68c0\u7d22\u80fd\u529b 2.4 \u7f29\u5199\u8bcd\u6539\u5199 \u7528\u6237\u5728\u67e5\u8be2\u65f6\u5e38\u5e38\u4f7f\u7528\u7f29\u5199\uff0c\u800c\u8bb8\u591a\u76f8\u5173\u6587\u6863\u901a\u5e38\u4f1a\u4f7f\u7528\u5b8c\u6574\u7684\u672f\u8bed\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u7f29\u5199\u8fdb\u884c\u6269\u5c55\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u5339\u914d\u76f8\u5173\u5185\u5bb9\u3002 \u7528\u6237\u8f93\u5165 : \u201cVR \u6280\u672f\u5728\u6559\u80b2\u4e2d\u7684\u5e94\u7528\u201d \u6539\u5199\u540e\u7684 Query : \u201c\u865a\u62df\u73b0\u5b9e\uff08Virtual Reality\uff09\u6280\u672f\u5728\u6559\u80b2\u4e2d\u7684\u5e94\u7528\u6709\u54ea\u4e9b\uff1f\u53ef\u4ee5\u4e3e\u4e00\u4e9b\u5b9e\u9645\u7684\u5e94\u7528\u6848\u4f8b\u5417\uff1f\u201d 3 \u566a\u58f0\u95ee\u9898 \u00b6 3.1 \u4e00\u822c\u53bb\u566a\u6539\u5199 \u00b6 \u901a\u8fc7\u53bb\u9664\u67e5\u8be2\u4e2d\u7684\u65e0\u5173\u6210\u5206\uff08\u5982\u591a\u4f59\u7684\u4fee\u9970\u8bed\u3001\u6a21\u7cca\u8868\u8fbe\u6216\u4e0d\u76f8\u5173\u7684\u80cc\u666f\u4fe1\u606f\uff09\uff0c\u7b80\u5316\u5e76\u4f18\u5316\u67e5\u8be2\uff0c\u4f7f\u5176\u66f4\u52a0\u7cbe\u786e\u548c\u53ef\u64cd\u4f5c\u3002\u8fd9\u79cd\u65b9\u6cd5\u6709\u52a9\u4e8e\u63d0\u9ad8\u68c0\u7d22\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\u3002 \u7528\u6237\u8f93\u5165 : \u201c\u6211\u6700\u8fd1\u5728\u51c6\u5907\u9762\u8bd5\uff0c\u4f46\u5bf9\u4e8e\u7b97\u6cd5\u7684\u7406\u89e3\u8fd8\u4e0d\u592a\u591f\uff0c\u80fd\u63a8\u8350\u4e00\u4e9b\u6709\u6548\u7684\u5b66\u4e60\u8d44\u6e90\u5417\uff1f\u201d \u6539\u5199\u540e\u7684 Query : \u201c\u6709\u54ea\u4e9b\u6709\u6548\u7684\u5b66\u4e60\u8d44\u6e90\u53ef\u4ee5\u5e2e\u52a9\u63d0\u9ad8\u7b97\u6cd5\u7406\u89e3\uff1f\u201d \u5206\u6790\uff1a\u53bb\u9664\u4e0e\u95ee\u9898\u65e0\u5173\u7684\u80cc\u666f\u4fe1\u606f \u201c\u6211\u6700\u8fd1\u5728\u51c6\u5907\u9762\u8bd5\uff0c\u4f46\u5bf9\u4e8e\u7b97\u6cd5\u7684\u7406\u89e3\u8fd8\u4e0d\u592a\u591f\u201d\u3002 \u76f4\u63a5\u63d0\u53d6\u6838\u5fc3\u610f\u56fe \u201c\u5e2e\u52a9\u63d0\u9ad8\u7b97\u6cd5\u7406\u89e3\u201d\u3002 3.2 \u5173\u952e\u8bcd\u6539\u5199 \u00b6 \u8fd9\u662f\u4e00\u79cd\u4e13\u6ce8\u4e8e\u63d0\u53d6\u6838\u5fc3\u5173\u952e\u8bcd\u5e76\u53bb\u9664\u566a\u58f0\u7684\u67e5\u8be2\u91cd\u5199\u65b9\u6cd5\u3002\u901a\u8fc7\u8bc6\u522b\u67e5\u8be2\u4e2d\u7684\u5173\u952e\u5185\u5bb9\uff0c\u5e76\u6392\u9664\u5197\u4f59\u4fe1\u606f\uff08\u5982\u505c\u7528\u8bcd\u3001\u8bed\u6c14\u8bcd\u548c\u591a\u4f59\u7684\u63cf\u8ff0\uff09\uff0c\u4f7f\u67e5\u8be2\u66f4\u52a0\u7b80\u6d01\u660e\u4e86\uff0c\u4ece\u800c\u63d0\u9ad8\u68c0\u7d22\u6548\u7387\u548c\u51c6\u786e\u6027\u3002\u8be5\u65b9\u6cd5\u7279\u522b\u9002\u7528\u4e8e\u5173\u952e\u8bcd\u68c0\u7d22\u53ec\u56de\uff0c\u5982 BM25 \u68c0\u7d22\u7b97\u6cd5\u3002 \u7528\u6237\u8f93\u5165 : \u201c\u5173\u4e8e Java \u4e2d\u7684\u7ebf\u7a0b\u6c60\uff0c\u5e38\u89c1\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u54ea\u4e9b\uff1f\u201d \u6539\u5199\u540e : \u201cJava \u7ebf\u7a0b\u6c60 \u5e38\u89c1\u5b9e\u73b0\u65b9\u5f0f\u201d 3.3 \u5b50\u67e5\u8be2\u6539\u5199 \u00b6 \u5f53\u67e5\u8be2\u6d89\u53ca\u5bf9\u6bd4\u591a\u4e2a\u5b9e\u4f53\u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u76f8\u4e92\u5e72\u6270\u7684\u60c5\u51b5\u3002\u5bf9\u6bd4\u7c7b\u67e5\u8be2\u901a\u5e38\u5305\u542b\u591a\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u5982\u679c\u76f4\u63a5\u653e\u5728\u4e00\u4e2a\u67e5\u8be2\u4e2d\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4fe1\u606f\u91cd\u53e0\uff0c\u5f71\u54cd\u68c0\u7d22\u7684\u51c6\u786e\u6027\u3002\u4e3a\u4e86\u907f\u514d\u5e72\u6270\uff0c\u53ef\u4ee5\u5c06\u5bf9\u6bd4\u7c7b\u67e5\u8be2\u62c6\u5206\u6210\u591a\u4e2a\u72ec\u7acb\u7684\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u805a\u7126\u4e8e\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f53\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u4fe1\u606f\u6df7\u6dc6\uff0c\u83b7\u5f97\u66f4\u51c6\u786e\u7684\u7ed3\u679c\u3002 \u7528\u6237\u8f93\u5165 : \u201cC++ \u548c Go \u54ea\u4e2a\u66f4\u9002\u5408\u505a\u7cfb\u7edf\u7f16\u7a0b\uff1f\u201d \u62c6\u5206\u540e\u7684\u67e5\u8be2 : \u201cC++ \u9002\u5408\u505a\u7cfb\u7edf\u7f16\u7a0b\u7684\u4f18\u70b9\u6709\u54ea\u4e9b\uff1f\u201d;\u201cGo \u9002\u5408\u505a\u7cfb\u7edf\u7f16\u7a0b\u7684\u4f18\u70b9\u6709\u54ea\u4e9b\uff1f\u201d \u62c6\u5206\u539f\u56e0\uff1a \u2022 \u76f4\u63a5\u5bf9\u6bd4 C++ \u548c Go \u7684\u4f18\u52a3\uff0c\u53ef\u80fd\u4f7f\u5f97\u7cfb\u7edf\u65e0\u6cd5\u6709\u6548\u5730\u63d0\u53d6\u6bcf\u79cd\u8bed\u8a00\u7684\u7279\u70b9\u3002\u62c6\u5206\u540e\uff0c\u7cfb\u7edf\u53ef\u4ee5\u5206\u522b\u68c0\u7d22 C++ \u548c Go \u5728\u7cfb\u7edf\u7f16\u7a0b\u4e2d\u7684\u4f18\u70b9\uff0c\u907f\u514d\u4fe1\u606f\u6df7\u4e71 4 prompt\u793a\u4f8b \u00b6 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5f00\u6e90rag\u7cfb\u7edf\uff0c\u95ee\u9898\u6539\u5199\u7684\u793a\u4f8b\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1a \u60a8\u662f\u67e5\u8be2\u6269\u5c55\u65b9\u9762\u7684\u4e13\u5bb6\uff0c\u80fd\u591f\u751f\u6210\u95ee\u9898\u7684\u91ca\u4e49\u3002 \u6211\u65e0\u6cd5\u76f4\u63a5\u4f7f\u7528\u7528\u6237\u7684\u95ee\u9898\u4ece\u77e5\u8bc6\u5e93\u4e2d\u68c0\u7d22\u76f8\u5173\u4fe1\u606f\u3002 \u60a8\u9700\u8981\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u6269\u5c55\u6216\u91ca\u4e49\u7528\u6237\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u4f7f\u7528\u540c\u4e49\u8bcd/\u77ed\u8bed\u3001\u5b8c\u6574\u5730\u5199\u51fa\u7f29\u5199\u3001\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u63cf\u8ff0\u6216\u89e3\u91ca\u3001\u6539\u53d8\u8868\u8fbe\u65b9\u5f0f\u3001\u5c06\u539f\u59cb\u95ee\u9898\u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u8bed\u8a00\uff08\u82f1\u8bed/\u4e2d\u6587\uff09\u7b49\u3002 \u5e76\u8fd4\u56de 5 \u4e2a\u7248\u672c\u7684\u95ee\u9898\uff0c\u5176\u4e2d\u4e00\u4e2a\u6765\u81ea\u7ffb\u8bd1\u3002 \u53ea\u9700\u5217\u51fa\u95ee\u9898\u3002\u4e0d\u9700\u8981\u5176\u4ed6\u5355\u8bcd\u3002 \u672c\u8282\u5c0f\u7ed3 \u00b6 \u6539\u5199\u540e\u7684query\u8d28\u91cf\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u63d0\u793a\uff08prompt\uff09\u548c\u5927\u6a21\u578b\u7684\u80fd\u529b\u3002\u901a\u5e38\uff0c\u67e5\u8be2\u6539\u5199\u53ef\u4ee5\u63d0\u9ad8\u53ec\u56de\u7684\u51c6\u786e\u6027\uff0c\u4f46\u6709\u65f6\u4ecd\u53ef\u80fd\u53d1\u751f\u6539\u5199\u5931\u8d25\u7684\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u5efa\u8bae\u8fdb\u884c\u591a\u6b21\u6539\u5199\uff0c\u6216\u8005\u5c06\u67e5\u8be2\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u67e5\u8be2\uff0c\u4e4b\u540e\u5c06\u53ec\u56de\u7ed3\u679c\u8f93\u5165\u5230\u91cd\u6392\u5e8f\uff08reranking\uff09\u6a21\u578b\u8fdb\u884c\u7cbe\u786e\u6392\u5e8f\uff0c\u518d\u7531\u5927\u6a21\u578b\u751f\u6210\u6700\u7ec8\u7684\u7b54\u6848\u3002","title":"RAG\u4e2d\u7684Query\u6539\u5199"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#ragquery","text":"","title":"RAG\u4e2d\u7684Query\u6539\u5199"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_1","text":"\u7406\u89e3query\u6539\u5199\u7684\u610f\u4e49 \u638c\u63e1qeury\u6539\u5199\u7684\u5b9e\u73b0\u65b9\u6cd5","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#1","text":"\u5728RAG\uff08\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff09\u6d41\u7a0b\u4e2d\uff0c\u7b2c\u4e00\u6b65\u901a\u5e38\u662f\u5bf9\u7528\u6237\u7684\u63d0\u95ee\uff08query\uff09\u8fdb\u884c\u6539\u5199\u3002\u8fd9\u662f\u56e0\u4e3a\u7528\u6237\u63d0\u95ee\u7684\u65b9\u5f0f\u4e0e\u4ed6\u4eec\u671f\u671b\u7684\u7b54\u6848\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u5dee\u8ddd\u3002\u7531\u4e8e\u6bcf\u4e2a\u7528\u6237\u7684\u63d0\u95ee\u65b9\u5f0f\u53ef\u80fd\u5343\u5dee\u4e07\u522b\uff0c\u56e0\u6b64\u5bf9\u95ee\u9898\u8fdb\u884c\u6539\u5199\u53ef\u4ee5\u5e2e\u52a9\u7cfb\u7edf\u66f4\u597d\u5730\u7406\u89e3\u95ee\u9898\u5e76\u8fd4\u56de\u66f4\u76f8\u5173\u7684\u7b54\u6848\uff0c\u4ece\u800c\u63d0\u5347RAG\u7cfb\u7edf\u7684\u9c81\u68d2\u6027\u548c\u6269\u5c55\u6027\u3002 \u7528\u6237\u63d0\u51fa\u7684\u95ee\u9898\u901a\u5e38\u5b58\u5728\u4e24\u7c7b\u95ee\u9898\uff1a \u4fe1\u606f\u4e0d\u5b8c\u6574\uff1a\u7528\u6237\u7684\u63d0\u95ee\u6ca1\u6709\u8868\u8fbe\u6e05\u695a\u6240\u6709\u7684\u5173\u952e\u4fe1\u606f \u566a\u58f0\u95ee\u9898\uff1a\u63d0\u95ee\u4e2d\u53ef\u80fd\u5305\u542b\u4e86\u4e0e\u7b54\u6848\u65e0\u5173\u7684\u5185\u5bb9\u3002","title":"1 \u524d\u8a00"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#2","text":"","title":"2 \u4fe1\u606f\u4e0d\u5b8c\u6574"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#21","text":"\u5728\u5bf9\u8bdd\u4e2d\uff0c\u524d\u540e\u6587\u662f\u76f8\u4e92\u5173\u8054\u7684\u3002\u5982\u679c\u4ec5\u51ed\u5f53\u524d\u7684query\u8fdb\u884c\u68c0\u7d22\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53ec\u56de\u7cbe\u5ea6\u5927\u5e45\u4e0b\u964d\uff0c\u56e0\u4e3aquery\u4e2d\u5f80\u5f80\u7f3a\u5c11\u91cd\u8981\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a \u7528\u6237 : \u534e\u4e3ameta70\u624b\u673a\u7684\u6027\u80fd\u600e\u4e48\u6837\uff1f \u7cfb\u7edf : \u534e\u4e3ameta70\u624b\u673a\u642d\u8f7d\u4e86\u5f3a\u5927\u7684\u5904\u7406\u5668\u548c\u5148\u8fdb\u7684\u6444\u50cf\u7cfb\u7edf\uff0c\u6027\u80fd\u8868\u73b0\u975e\u5e38\u4f18\u79c0\u3002 \u7528\u6237 : \u4e0e\u4e0a\u4e00\u4ee3\u76f8\u6bd4\uff0c\u5b83\u6709\u54ea\u4e9b\u6539\u8fdb\uff1f \u7cfb\u7edf : \u534e\u4e3ameta70\u76f8\u8f83\u4e8emeta60\u5728\u5904\u7406\u5668\u6027\u80fd\u3001\u6444\u50cf\u5934\u4f18\u5316\u548c\u7535\u6c60\u7eed\u822a\u65b9\u9762\u90fd\u6709\u663e\u8457\u63d0\u5347\u3002 \u7528\u6237 : \u6444\u50cf\u5934\u65b9\u9762\u5177\u4f53\u6539\u8fdb\u4e86\u4ec0\u4e48\uff1f --\u6539\u5199\u524d : \u6444\u50cf\u5934\u65b9\u9762\u5177\u4f53\u6539\u8fdb\u4e86\u4ec0\u4e48\uff1f --\u6539\u5199\u540e : \u534e\u4e3ameta70\u624b\u673a\u7684\u6444\u50cf\u5934\u76f8\u6bd4meta60\u6709\u54ea\u4e9b\u5177\u4f53\u6539\u8fdb\uff1f","title":"2.1 \u5386\u53f2\u4f1a\u8bdd\u6539\u5199"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#22","text":"\u7528\u6237\u5728\u641c\u7d22\u65f6\u5e38\u5e38\u8f93\u5165\u7684\u5173\u952e\u8bcd\u8f83\u4e3a\u7b80\u77ed\uff0c\u5e76\u4e14\u7f3a\u4e4f\u8db3\u591f\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u8fd9\u4f1a\u5f71\u54cd\u8bed\u4e49\u68c0\u7d22\uff08\u5411\u91cf\u68c0\u7d22\uff09\u7684\u6548\u679c\uff0c\u5bfc\u81f4\u53ec\u56de\u7684\u76f8\u5173\u6027\u8f83\u4f4e\u3002\u56e0\u6b64\uff0c\u9700\u8981\u5bf9\u7528\u6237\u7684\u539f\u59cb\u5173\u952e\u8bcd\u8fdb\u884c\u6269\u5c55\u548c\u4e30\u5bcc\u3002 \u7528\u6237\u8f93\u5165 : \u201c\u673a\u5668\u5b66\u4e60 \u5b9e\u8df5\u201d \u6539\u5199\u540e\u7684 Query : \u201c\u673a\u5668\u5b66\u4e60\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6848\u4f8b\u6709\u54ea\u4e9b\uff1f\u54ea\u4e9b\u5de5\u5177\u548c\u65b9\u6cd5\u9002\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u5b9e\u8df5\uff1f\u201d","title":"2.2 \u5173\u952e\u8bcd\u6269\u5199"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#23","text":"\u4f2a\u7b54\u6848\u6539\u5199\u901a\u8fc7\u5728\u539f\u59cb\u67e5\u8be2\u4e2d\u52a0\u5165\u4e00\u79cd\u5047\u8bbe\u6027\u7b54\u6848\uff0c\u6765\u589e\u5f3a\u67e5\u8be2\u7684\u8bed\u4e49\u4e30\u5bcc\u6027\uff0c\u4ece\u800c\u63d0\u9ad8\u68c0\u7d22\u6216\u56de\u5e94\u7684\u7cbe\u51c6\u5ea6\u3002\u4f2a\u7b54\u6848\u5e76\u975e\u771f\u5b9e\u7684\u7b54\u6848\uff0c\u800c\u662f\u4e00\u4e2a\u8bbe\u60f3\u7684\u5185\u5bb9\uff0c\u7528\u4e8e\u5e2e\u52a9\u7cfb\u7edf\u66f4\u597d\u5730\u7406\u89e3\u5e76\u68c0\u7d22\u76f8\u5173\u4fe1\u606f\u3002 \u7528\u6237\u8f93\u5165 : \u201c\u5982\u4f55\u63d0\u9ad8\u4f01\u4e1a\u7684\u5e02\u573a\u7ade\u4e89\u529b\uff1f\u201d \u6539\u5199\u540e\u7684 Query : \u201c\u5982\u4f55\u63d0\u9ad8\u4f01\u4e1a\u7684\u5e02\u573a\u7ade\u4e89\u529b\uff1f\u6bd4\u5982\u901a\u8fc7\u521b\u65b0\u4ea7\u54c1\u3001\u4f18\u5316\u8425\u9500\u7b56\u7565\u6216\u63d0\u5347\u5ba2\u6237\u670d\u52a1\u7b49\u624b\u6bb5\u3002\u201d \u4f2a\u7b54\u6848\u76ee\u7684--> \u901a\u8fc7\u63d0\u4f9b\u5047\u8bbe\u6027\u7684\u63d0\u5347\u65b9\u5f0f\uff0c\u4e30\u5bcc\u67e5\u8be2\u7684\u8bed\u4e49\u4fe1\u606f\uff0c\u4ece\u800c\u589e\u5f3a\u7cfb\u7edf\u5728\u5e94\u5bf9\u590d\u6742\u95ee\u9898\u65f6\u7684\u68c0\u7d22\u80fd\u529b 2.4 \u7f29\u5199\u8bcd\u6539\u5199 \u7528\u6237\u5728\u67e5\u8be2\u65f6\u5e38\u5e38\u4f7f\u7528\u7f29\u5199\uff0c\u800c\u8bb8\u591a\u76f8\u5173\u6587\u6863\u901a\u5e38\u4f1a\u4f7f\u7528\u5b8c\u6574\u7684\u672f\u8bed\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u7f29\u5199\u8fdb\u884c\u6269\u5c55\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u5339\u914d\u76f8\u5173\u5185\u5bb9\u3002 \u7528\u6237\u8f93\u5165 : \u201cVR \u6280\u672f\u5728\u6559\u80b2\u4e2d\u7684\u5e94\u7528\u201d \u6539\u5199\u540e\u7684 Query : \u201c\u865a\u62df\u73b0\u5b9e\uff08Virtual Reality\uff09\u6280\u672f\u5728\u6559\u80b2\u4e2d\u7684\u5e94\u7528\u6709\u54ea\u4e9b\uff1f\u53ef\u4ee5\u4e3e\u4e00\u4e9b\u5b9e\u9645\u7684\u5e94\u7528\u6848\u4f8b\u5417\uff1f\u201d","title":"2.3 \u4f2a\u7b54\u6848\u6539\u5199"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#3","text":"","title":"3 \u566a\u58f0\u95ee\u9898"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#31","text":"\u901a\u8fc7\u53bb\u9664\u67e5\u8be2\u4e2d\u7684\u65e0\u5173\u6210\u5206\uff08\u5982\u591a\u4f59\u7684\u4fee\u9970\u8bed\u3001\u6a21\u7cca\u8868\u8fbe\u6216\u4e0d\u76f8\u5173\u7684\u80cc\u666f\u4fe1\u606f\uff09\uff0c\u7b80\u5316\u5e76\u4f18\u5316\u67e5\u8be2\uff0c\u4f7f\u5176\u66f4\u52a0\u7cbe\u786e\u548c\u53ef\u64cd\u4f5c\u3002\u8fd9\u79cd\u65b9\u6cd5\u6709\u52a9\u4e8e\u63d0\u9ad8\u68c0\u7d22\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\u3002 \u7528\u6237\u8f93\u5165 : \u201c\u6211\u6700\u8fd1\u5728\u51c6\u5907\u9762\u8bd5\uff0c\u4f46\u5bf9\u4e8e\u7b97\u6cd5\u7684\u7406\u89e3\u8fd8\u4e0d\u592a\u591f\uff0c\u80fd\u63a8\u8350\u4e00\u4e9b\u6709\u6548\u7684\u5b66\u4e60\u8d44\u6e90\u5417\uff1f\u201d \u6539\u5199\u540e\u7684 Query : \u201c\u6709\u54ea\u4e9b\u6709\u6548\u7684\u5b66\u4e60\u8d44\u6e90\u53ef\u4ee5\u5e2e\u52a9\u63d0\u9ad8\u7b97\u6cd5\u7406\u89e3\uff1f\u201d \u5206\u6790\uff1a\u53bb\u9664\u4e0e\u95ee\u9898\u65e0\u5173\u7684\u80cc\u666f\u4fe1\u606f \u201c\u6211\u6700\u8fd1\u5728\u51c6\u5907\u9762\u8bd5\uff0c\u4f46\u5bf9\u4e8e\u7b97\u6cd5\u7684\u7406\u89e3\u8fd8\u4e0d\u592a\u591f\u201d\u3002 \u76f4\u63a5\u63d0\u53d6\u6838\u5fc3\u610f\u56fe \u201c\u5e2e\u52a9\u63d0\u9ad8\u7b97\u6cd5\u7406\u89e3\u201d\u3002","title":"3.1 \u4e00\u822c\u53bb\u566a\u6539\u5199"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#32","text":"\u8fd9\u662f\u4e00\u79cd\u4e13\u6ce8\u4e8e\u63d0\u53d6\u6838\u5fc3\u5173\u952e\u8bcd\u5e76\u53bb\u9664\u566a\u58f0\u7684\u67e5\u8be2\u91cd\u5199\u65b9\u6cd5\u3002\u901a\u8fc7\u8bc6\u522b\u67e5\u8be2\u4e2d\u7684\u5173\u952e\u5185\u5bb9\uff0c\u5e76\u6392\u9664\u5197\u4f59\u4fe1\u606f\uff08\u5982\u505c\u7528\u8bcd\u3001\u8bed\u6c14\u8bcd\u548c\u591a\u4f59\u7684\u63cf\u8ff0\uff09\uff0c\u4f7f\u67e5\u8be2\u66f4\u52a0\u7b80\u6d01\u660e\u4e86\uff0c\u4ece\u800c\u63d0\u9ad8\u68c0\u7d22\u6548\u7387\u548c\u51c6\u786e\u6027\u3002\u8be5\u65b9\u6cd5\u7279\u522b\u9002\u7528\u4e8e\u5173\u952e\u8bcd\u68c0\u7d22\u53ec\u56de\uff0c\u5982 BM25 \u68c0\u7d22\u7b97\u6cd5\u3002 \u7528\u6237\u8f93\u5165 : \u201c\u5173\u4e8e Java \u4e2d\u7684\u7ebf\u7a0b\u6c60\uff0c\u5e38\u89c1\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u54ea\u4e9b\uff1f\u201d \u6539\u5199\u540e : \u201cJava \u7ebf\u7a0b\u6c60 \u5e38\u89c1\u5b9e\u73b0\u65b9\u5f0f\u201d","title":"3.2 \u5173\u952e\u8bcd\u6539\u5199"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#33","text":"\u5f53\u67e5\u8be2\u6d89\u53ca\u5bf9\u6bd4\u591a\u4e2a\u5b9e\u4f53\u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u76f8\u4e92\u5e72\u6270\u7684\u60c5\u51b5\u3002\u5bf9\u6bd4\u7c7b\u67e5\u8be2\u901a\u5e38\u5305\u542b\u591a\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u5982\u679c\u76f4\u63a5\u653e\u5728\u4e00\u4e2a\u67e5\u8be2\u4e2d\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4fe1\u606f\u91cd\u53e0\uff0c\u5f71\u54cd\u68c0\u7d22\u7684\u51c6\u786e\u6027\u3002\u4e3a\u4e86\u907f\u514d\u5e72\u6270\uff0c\u53ef\u4ee5\u5c06\u5bf9\u6bd4\u7c7b\u67e5\u8be2\u62c6\u5206\u6210\u591a\u4e2a\u72ec\u7acb\u7684\u67e5\u8be2\uff0c\u6bcf\u4e2a\u67e5\u8be2\u805a\u7126\u4e8e\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f53\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u4fe1\u606f\u6df7\u6dc6\uff0c\u83b7\u5f97\u66f4\u51c6\u786e\u7684\u7ed3\u679c\u3002 \u7528\u6237\u8f93\u5165 : \u201cC++ \u548c Go \u54ea\u4e2a\u66f4\u9002\u5408\u505a\u7cfb\u7edf\u7f16\u7a0b\uff1f\u201d \u62c6\u5206\u540e\u7684\u67e5\u8be2 : \u201cC++ \u9002\u5408\u505a\u7cfb\u7edf\u7f16\u7a0b\u7684\u4f18\u70b9\u6709\u54ea\u4e9b\uff1f\u201d;\u201cGo \u9002\u5408\u505a\u7cfb\u7edf\u7f16\u7a0b\u7684\u4f18\u70b9\u6709\u54ea\u4e9b\uff1f\u201d \u62c6\u5206\u539f\u56e0\uff1a \u2022 \u76f4\u63a5\u5bf9\u6bd4 C++ \u548c Go \u7684\u4f18\u52a3\uff0c\u53ef\u80fd\u4f7f\u5f97\u7cfb\u7edf\u65e0\u6cd5\u6709\u6548\u5730\u63d0\u53d6\u6bcf\u79cd\u8bed\u8a00\u7684\u7279\u70b9\u3002\u62c6\u5206\u540e\uff0c\u7cfb\u7edf\u53ef\u4ee5\u5206\u522b\u68c0\u7d22 C++ \u548c Go \u5728\u7cfb\u7edf\u7f16\u7a0b\u4e2d\u7684\u4f18\u70b9\uff0c\u907f\u514d\u4fe1\u606f\u6df7\u4e71","title":"3.3 \u5b50\u67e5\u8be2\u6539\u5199"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#4-prompt","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5f00\u6e90rag\u7cfb\u7edf\uff0c\u95ee\u9898\u6539\u5199\u7684\u793a\u4f8b\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1a \u60a8\u662f\u67e5\u8be2\u6269\u5c55\u65b9\u9762\u7684\u4e13\u5bb6\uff0c\u80fd\u591f\u751f\u6210\u95ee\u9898\u7684\u91ca\u4e49\u3002 \u6211\u65e0\u6cd5\u76f4\u63a5\u4f7f\u7528\u7528\u6237\u7684\u95ee\u9898\u4ece\u77e5\u8bc6\u5e93\u4e2d\u68c0\u7d22\u76f8\u5173\u4fe1\u606f\u3002 \u60a8\u9700\u8981\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u6269\u5c55\u6216\u91ca\u4e49\u7528\u6237\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u4f7f\u7528\u540c\u4e49\u8bcd/\u77ed\u8bed\u3001\u5b8c\u6574\u5730\u5199\u51fa\u7f29\u5199\u3001\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u63cf\u8ff0\u6216\u89e3\u91ca\u3001\u6539\u53d8\u8868\u8fbe\u65b9\u5f0f\u3001\u5c06\u539f\u59cb\u95ee\u9898\u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u8bed\u8a00\uff08\u82f1\u8bed/\u4e2d\u6587\uff09\u7b49\u3002 \u5e76\u8fd4\u56de 5 \u4e2a\u7248\u672c\u7684\u95ee\u9898\uff0c\u5176\u4e2d\u4e00\u4e2a\u6765\u81ea\u7ffb\u8bd1\u3002 \u53ea\u9700\u5217\u51fa\u95ee\u9898\u3002\u4e0d\u9700\u8981\u5176\u4ed6\u5355\u8bcd\u3002","title":"4  prompt\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/RAG%E4%B8%AD%E7%9A%84Query%E6%94%B9%E5%86%99%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_2","text":"\u6539\u5199\u540e\u7684query\u8d28\u91cf\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u63d0\u793a\uff08prompt\uff09\u548c\u5927\u6a21\u578b\u7684\u80fd\u529b\u3002\u901a\u5e38\uff0c\u67e5\u8be2\u6539\u5199\u53ef\u4ee5\u63d0\u9ad8\u53ec\u56de\u7684\u51c6\u786e\u6027\uff0c\u4f46\u6709\u65f6\u4ecd\u53ef\u80fd\u53d1\u751f\u6539\u5199\u5931\u8d25\u7684\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u5efa\u8bae\u8fdb\u884c\u591a\u6b21\u6539\u5199\uff0c\u6216\u8005\u5c06\u67e5\u8be2\u62c6\u5206\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684\u67e5\u8be2\uff0c\u4e4b\u540e\u5c06\u53ec\u56de\u7ed3\u679c\u8f93\u5165\u5230\u91cd\u6392\u5e8f\uff08reranking\uff09\u6a21\u578b\u8fdb\u884c\u7cbe\u786e\u6392\u5e8f\uff0c\u518d\u7531\u5927\u6a21\u578b\u751f\u6210\u6700\u7ec8\u7684\u7b54\u6848\u3002","title":"\u672c\u8282\u5c0f\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html","text":"\u6570\u636e\u96c6\u751f\u6210\u4e0e\u4f18\u5316 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 1.\u638c\u63e1\u5982\u4f55\u7ed3\u5408\u89c4\u5219\u6a21\u677f\u548c Qwen-Plus \u6a21\u578b\u751f\u6210\u9ad8\u8d28\u91cf\u67e5\u8be2\u6570\u636e\u96c6\u3002 2.\u901a\u8fc7 tqdm \u8fdb\u5ea6\u6761\u76d1\u63a7\u751f\u6210\u8fdb\u5ea6\uff0c\u5e76\u5b9e\u73b0\u5206\u9636\u6bb5\u6570\u636e\u4fdd\u5b58\u3002 generate_query_dataset_hybrid.py \u662f EduRAG \u7cfb\u7edf\u4e2d\u7528\u4e8e\u751f\u6210\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6838\u5fc3\u811a\u672c\uff0c\u65e8\u5728\u4e3a QueryClassifier \u63d0\u4f9b 6000 \u6761\u9ad8\u8d28\u91cf\u6570\u636e\uff08\u201c\u901a\u7528\u77e5\u8bc6\u201d\u548c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u5404 3000 \u6761\uff09\u3002\u901a\u8fc7\u89c4\u5219\u6a21\u677f\u548c Qwen-Plus \u6a21\u578b\u7684\u6df7\u5408\u751f\u6210\uff0c\u7ed3\u5408\u8fdb\u5ea6\u6761\u548c\u5206\u9636\u6bb5\u4fdd\u5b58\uff0c\u672c\u811a\u672c\u786e\u4fdd\u4e86\u751f\u6210\u6548\u7387\u548c\u6570\u636e\u53ef\u9760\u6027\u3002\u672c\u7ae0\u8282\u5c06\u8be6\u7ec6\u8bb2\u89e3\u5176\u529f\u80fd\u3001\u5b9e\u73b0\u548c\u5e94\u7528\u3002 1.1 \u6570\u636e\u751f\u6210\u4e0e\u4f18\u5316 \u00b6 \u529f\u80fd\u6982\u8ff0 \u00b6 generate_query_dataset_hybrid.py \u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a \u89c4\u5219\u751f\u6210 \uff1a\u57fa\u4e8e\u6a21\u677f\u548c\u540c\u4e49\u8bcd\u66ff\u6362\u751f\u6210 3000 \u6761\u6570\u636e\uff08\u201c\u901a\u7528\u77e5\u8bc6\u201d\u548c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u5404 1500 \u6761\uff09\u3002 \u5927\u6a21\u578b\u751f\u6210 \uff1a\u5229\u7528 Qwen-Plus \u751f\u6210 3000 \u6761\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\uff08\u5404 1500 \u6761\uff09\u3002 \u8fdb\u5ea6\u76d1\u63a7 \uff1a\u901a\u8fc7 tqdm \u8fdb\u5ea6\u6761\u53ef\u89c6\u5316\u6bcf\u4e2a\u751f\u6210\u9636\u6bb5\u3002 \u5206\u9636\u6bb5\u4fdd\u5b58 \uff1a\u6bcf\u751f\u6210 1500 \u6761\u6570\u636e\u4fdd\u5b58\u4e00\u6b21\uff0c\u6700\u7ec8\u5408\u5e76\u4fdd\u5b58\u5b8c\u6574\u6570\u636e\u96c6\u3002 \u6570\u636e\u96c6\u8f93\u51fa \uff1a\u751f\u6210\u5747\u8861\u7684 6000 \u6761\u6570\u636e\uff0c\u4fdd\u5b58\u4e3a JSON \u6587\u4ef6\u3002 \u5b8c\u6574\u4ee3\u7801 \u00b6 # generate_query_dataset_hybrid.py import json import random import re import os from openai import OpenAI from dotenv import load_dotenv from tqdm import tqdm import time # \u52a0\u8f7d\u73af\u5883\u53d8\u91cf load_dotenv () # \u521d\u59cb\u5316Qwen-Plus\u5ba2\u6237\u7aef client = OpenAI ( api_key = os . getenv ( \"DASHSCOPE_API_KEY\" ), base_url = os . getenv ( \"DASHSCOPE_BASE_URL\" , \"https://dashscope.aliyuncs.com/compatible-mode/v1\" ), ) # \u540c\u4e49\u8bcd\u8bcd\u5178 synonym_dict = { \"\u4ec0\u4e48\" : [ \"\u4ec0\u4e48\" , \"\u5565\u662f\" , \"\u5982\u4f55\u89e3\u91ca\" , \"\u5177\u4f53\u662f\u4ec0\u4e48\" , \"\u8bf7\u89e3\u91ca\" ], \"\u8bfe\u7a0b\" : [ \"\u8bfe\u7a0b\" , \"\u57f9\u8bad\u8bfe\u7a0b\" , \"\u8bfe\u7a0b\u5b89\u6392\" , \"\u6559\u5b66\u5185\u5bb9\" , \"\u8bfe\" ], \"\u5b66\u8d39\" : [ \"\u5b66\u8d39\" , \"\u8d39\u7528\" , \"\u62a5\u540d\u8d39\" , \"\u5b66\u4e60\u8d39\u7528\" , \"\u4ef7\u683c\" , \"\u6536\u8d39\" ], \"\u5927\u7eb2\" : [ \"\u5927\u7eb2\" , \"\u8bfe\u7a0b\u5185\u5bb9\" , \"\u6559\u5b66\u8ba1\u5212\" , \"\u8bb2\u4e49\" ], \"\u5e08\u8d44\" : [ \"\u5e08\u8d44\" , \"\u6559\u5e08\u56e2\u961f\" , \"\u8bb2\u5e08\u9635\u5bb9\" , \"\u5e08\u8d44\u529b\u91cf\" , \"\u8001\u5e08\" , \"\u8bb2\u5e08\" ], \"\u57f9\u8bad\" : [ \"\u57f9\u8bad\" , \"\u8f85\u5bfc\" , \"\u5b66\u4e60\u8ba1\u5212\" , \"\u6559\u80b2\u8bfe\u7a0b\" ], \"\u5728\u54ea\u91cc\" : [ \"\u5728\u54ea\u91cc\" , \"\u4f4d\u4e8e\u4f55\u5904\" , \"\u8bbe\u5728\u4f55\u5730\" , \"\u5728\u54ea\" ], \"\u4ecb\u7ecd\" : [ \"\u4ecb\u7ecd\" , \"\u8bf4\u660e\" , \"\u8bb2\u89e3\" , \"\u6982\u8ff0\" , \"\u8bb2\u8bb2\" , \"\u8bf4\u8bf4\" ], \"\u8bf7\u95ee\" : [ \"\u8bf7\u95ee\" , \"\u80fd\u5426\u544a\u77e5\" , \"\u662f\u5426\u53ef\u4ee5\u544a\u8bc9\u6211\" , \"\u9ebb\u70e6\u8bf4\u4e0b\" ], \"\u539f\u7406\" : [ \"\u539f\u7406\" , \"\u57fa\u672c\u601d\u60f3\" , \"\u5de5\u4f5c\u673a\u5236\" ], \"\u5199\u4e00\u4e2a\" : [ \"\u5199\u4e00\u4e2a\" , \"\u7f16\u5199\u4e00\u4e2a\" , \"\u751f\u6210\u4e00\u4e2a\" , \"\u521b\u5efa\u4e00\u4e2a\" ], \"\u7b49\u4e8e\u591a\u5c11\" : [ \"\u7b49\u4e8e\u591a\u5c11\" , \"\u662f\u591a\u5c11\" , \"\u7ed3\u679c\u662f\u5565\" , \"\u5f97\u591a\u5c11\" ], \"\u5982\u4f55\" : [ \"\u5982\u4f55\" , \"\u600e\u6837\" , \"\u548b\u6837\" ], \"\u9700\u8981\" : [ \"\u9700\u8981\" , \"\u8981\" , \"\u5f97\u6709\" , \"\u5fc5\u987b\u5177\u5907\" ], \"\u57fa\u7840\" : [ \"\u57fa\u7840\" , \"\u524d\u63d0\" , \"\u80cc\u666f\" , \"\u57fa\u672c\u77e5\u8bc6\" ] } def apply_synonym_variation ( text , replace_prob = 0.5 ): \"\"\"\u5bf9\u6587\u672c\u8fdb\u884c\u540c\u4e49\u8bcd\u968f\u673a\u66ff\u6362\"\"\" for word , synonyms in synonym_dict . items (): pattern = r \"\\b\" + re . escape ( word ) + r \"\\b\" def repl ( match ): if random . random () < replace_prob : return random . choice ( synonyms ) return match . group ( 0 ) text = re . sub ( pattern , repl , text ) return text # \u89c4\u5219\u751f\u6210\u90e8\u5206 def generate_generic_query_rule (): \"\"\"\u89c4\u5219\u751f\u6210\u901a\u7528\u77e5\u8bc6\u67e5\u8be2\"\"\" templates = [ \"\u4ec0\u4e48 {concept} \uff1f\" , \" {concept} \u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\uff1f\" , \"\u8bf7\u89e3\u91ca {concept} \u7684\u539f\u7406\u3002\" , \"\u5982\u4f55\u8fd0\u7528 {concept} \uff1f\" , \"\u8ba1\u7b97 {num1} + {num2} \u7b49\u4e8e\u591a\u5c11\uff1f\" , \"\u5199\u4e00\u4e2a {lang} \u7684 {func} \u51fd\u6570\" , \"\u4e3a\u4ec0\u4e48 {thing} \u662f {state} \uff1f\" ] concepts = [ \"AI\" , \"Transformer\u6a21\u578b\" , \"Python\" , \"\u9012\u5f52\" , \"\u7b97\u6cd5\u590d\u6742\u5ea6\" , \"\u6570\u636e\u7ed3\u6784\" , \"\u673a\u5668\u5b66\u4e60\" ] langs = [ \"Python\" , \"Java\" , \"C++\" ] funcs = [ \"\u6392\u5e8f\" , \"\u8ba1\u7b97\" , \"\u6253\u5370\" ] things = [ \"\u592a\u9633\" , \"\u6c34\" , \"\u98ce\" ] states = [ \"\u70ed\u7684\" , \"\u6d41\u52a8\u7684\" , \"\u65e0\u5f62\u7684\" ] nums = list ( range ( 1 , 100 )) t = random . choice ( templates ) if \" {concept} \" in t : replacements = { \"concept\" : random . choice ( concepts )} elif \" {num1} \" in t : replacements = { \"num1\" : random . choice ( nums ), \"num2\" : random . choice ( nums )} elif \" {lang} \" in t : replacements = { \"lang\" : random . choice ( langs ), \"func\" : random . choice ( funcs )} elif \" {thing} \" in t : replacements = { \"thing\" : random . choice ( things ), \"state\" : random . choice ( states )} else : replacements = {} query = t . format ( ** replacements ) return apply_synonym_variation ( query ) def generate_professional_query_rule (): \"\"\"\u89c4\u5219\u751f\u6210\u4e13\u4e1a\u54a8\u8be2\u67e5\u8be2\"\"\" templates = [ \"\u8bf7\u95ee {subject} \u8bfe\u7a0b\u7684\u5b66\u8d39\u662f\u591a\u5c11\uff1f\" , \" {subject} \u7684\u8bfe\u7a0b\u5927\u7eb2\u662f\u4ec0\u4e48\uff1f\" , \" {subject} \u57f9\u8bad\u7684\u5b66\u4e60\u5468\u671f\u6709\u591a\u957f\uff1f\" , \"\u8bf7\u4ecb\u7ecd\u4e00\u4e0b {subject} \u57f9\u8bad\u7684\u4e3b\u8981\u9879\u76ee\u5185\u5bb9\u3002\" , \"\u8bf7\u95ee {subject} \u57f9\u8bad\u5730\u70b9\u5728\u54ea\u91cc\uff1f\" ] subjects = [ \"JAVA\" , \"AI\" , \"\u6d4b\u8bd5\" , \"Web\u524d\u7aef\" , \"Python\" , \"\u5927\u6570\u636e\" , \"DevOps\" ] t = random . choice ( templates ) query = t . format ( subject = random . choice ( subjects )) return apply_synonym_variation ( query ) # \u5927\u6a21\u578b\u751f\u6210\u90e8\u5206 def generate_with_qwen ( prompt ): \"\"\"\u8c03\u7528Qwen-Plus\u751f\u6210\u67e5\u8be2\uff0c\u6dfb\u52a0\u8d85\u65f6\u63a7\u5236\"\"\" try : completion = client . chat . completions . create ( model = \"qwen-plus\" , messages = [{ \"role\" : \"user\" , \"content\" : prompt }], temperature = 0.9 , timeout = 10 ) return completion . choices [ 0 ] . message . content . strip () except Exception as e : print ( f \"Qwen-Plus\u8c03\u7528\u5931\u8d25: { e } \" ) return None def generate_generic_query_qwen (): \"\"\"\u4f7f\u7528Qwen-Plus\u751f\u6210\u901a\u7528\u77e5\u8bc6\u67e5\u8be2\"\"\" prompt = \"\"\" \u4f60\u662f\u4e00\u4e2a\u7528\u6237\uff0c\u751f\u6210\u4e00\u4e2a\u201c\u901a\u7528\u77e5\u8bc6\u201d\u7c7b\u7684\u67e5\u8be2\uff0c\u6d89\u53ca\u6570\u5b66\u8ba1\u7b97\u3001\u4ee3\u7801\u751f\u6210/\u7ea0\u9519\u3001\u6982\u5ff5\u4e0e\u539f\u7406\u6216\u5e38\u8bc6\u6027\u95ee\u9898\u3002 \u793a\u4f8b\uff1a - \u201c3+5\u7b49\u4e8e\u591a\u5c11\uff1f\u201d - \u201c\u5199\u4e00\u4e2aPython\u6392\u5e8f\u51fd\u6570\u201d - \u201c\u4ec0\u4e48\u662f\u795e\u7ecf\u7f51\u7edc\uff1f\u201d - \u201c\u592a\u9633\u4e3a\u4ec0\u4e48\u662f\u70ed\u7684\uff1f\u201d \u8bf7\u751f\u6210\u4e00\u4e2a\u7c7b\u4f3c\u7684\u67e5\u8be2\uff0c\u76f4\u63a5\u8fd4\u56de\u67e5\u8be2\u6587\u672c\uff0c\u4e0d\u8981\u591a\u4f59\u8bf4\u660e\u3002 \"\"\" return generate_with_qwen ( prompt ) def generate_professional_query_qwen (): \"\"\"\u4f7f\u7528Qwen-Plus\u751f\u6210\u4e13\u4e1a\u54a8\u8be2\u67e5\u8be2\"\"\" prompt = \"\"\" \u4f60\u662f\u4e00\u4e2a\u7528\u6237\uff0c\u751f\u6210\u4e00\u4e2a\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u7c7b\u7684\u67e5\u8be2\uff0c\u6d89\u53caIT\u6559\u80b2\u57f9\u8bad\uff08\u5982\u8bfe\u7a0b\u8be6\u60c5\u3001\u5e08\u8d44\u3001\u8d39\u7528\u3001\u5468\u671f\u3001\u5730\u70b9\u7b49\uff09\u3002 \u793a\u4f8b\uff1a - \u201cJAVA\u8bfe\u7a0b\u8d39\u7528\u591a\u5c11\uff1f\u201d - \u201cAI\u57f9\u8bad\u6709\u54ea\u4e9b\u8001\u5e08\uff1f\u201d - \u201c\u6d4b\u8bd5\u8bfe\u7a0b\u4ec0\u4e48\u65f6\u5019\u5f00\u8bfe\uff1f\u201d \u8bf7\u751f\u6210\u4e00\u4e2a\u7c7b\u4f3c\u7684\u67e5\u8be2\uff0c\u76f4\u63a5\u8fd4\u56de\u67e5\u8be2\u6587\u672c\uff0c\u4e0d\u8981\u591a\u4f59\u8bf4\u660e\u3002 \"\"\" return generate_with_qwen ( prompt ) # \u4fdd\u5b58\u6570\u636e\u96c6 def save_dataset ( dataset , filename , stage_name ): \"\"\"\u4fdd\u5b58\u6570\u636e\u96c6\u5230\u6307\u5b9a\u6587\u4ef6\"\"\" with open ( filename , \"w\" , encoding = \"utf-8\" ) as f : json . dump ( dataset , f , ensure_ascii = False , indent = 2 ) print ( f \" { stage_name } \uff1a\u5df2\u4fdd\u5b58 { len ( dataset ) } \u6761\u6570\u636e\u5230 { filename } \" ) def generate_training_dataset ( total_samples = 6000 ): \"\"\"\u751f\u62106000\u6761\u8bad\u7ec3\u6570\u636e\uff0c\u89c4\u5219\u548c\u5927\u6a21\u578b\u5404\u5360\u4e00\u534a\uff0c\u6bcf1500\u6761\u4fdd\u5b58\"\"\" num_per_category = total_samples // 2 # 3000 num_rule = num_per_category // 2 # 1500 num_qwen = num_per_category - num_rule # 1500 generic_samples = [] professional_samples = [] generic_set = set () professional_set = set () # \u89c4\u5219\u751f\u6210 - \u901a\u7528\u77e5\u8bc6 print ( \"\u751f\u6210\u89c4\u5219\u901a\u7528\u77e5\u8bc6\u6570\u636e...\" ) with tqdm ( total = num_rule , desc = \"Rule-based Generic\" ) as pbar : while len ( generic_samples ) < num_rule : q = generate_generic_query_rule () if q not in generic_set : generic_set . add ( q ) generic_samples . append ({ \"query\" : q , \"label\" : \"\u901a\u7528\u77e5\u8bc6\" }) pbar . update ( 1 ) save_dataset ( generic_samples , \"rule_generic_1500.json\" , \"\u89c4\u5219\u901a\u7528\u77e5\u8bc6\" ) # \u89c4\u5219\u751f\u6210 - \u4e13\u4e1a\u54a8\u8be2 print ( \"\u751f\u6210\u89c4\u5219\u4e13\u4e1a\u54a8\u8be2\u6570\u636e...\" ) with tqdm ( total = num_rule , desc = \"Rule-based Professional\" ) as pbar : while len ( professional_samples ) < num_rule : q = generate_professional_query_rule () if q not in professional_set : professional_set . add ( q ) professional_samples . append ({ \"query\" : q , \"label\" : \"\u4e13\u4e1a\u54a8\u8be2\" }) pbar . update ( 1 ) save_dataset ( professional_samples , \"rule_professional_1500.json\" , \"\u89c4\u5219\u4e13\u4e1a\u54a8\u8be2\" ) # Qwen-Plus\u751f\u6210 - \u901a\u7528\u77e5\u8bc6 print ( \"\u751f\u6210Qwen-Plus\u901a\u7528\u77e5\u8bc6\u6570\u636e...\" ) with tqdm ( total = num_qwen , desc = \"Qwen-based Generic\" ) as pbar : while len ( generic_samples ) < num_per_category : q = generate_generic_query_qwen () if q and q not in generic_set : generic_set . add ( q ) generic_samples . append ({ \"query\" : q , \"label\" : \"\u901a\u7528\u77e5\u8bc6\" }) pbar . update ( 1 ) time . sleep ( 0.5 ) # \u907f\u514d API \u9650\u6d41 save_dataset ( generic_samples , \"generic_3000.json\" , \"\u901a\u7528\u77e5\u8bc6\uff08\u89c4\u5219+Qwen\uff09\" ) # Qwen-Plus\u751f\u6210 - \u4e13\u4e1a\u54a8\u8be2 print ( \"\u751f\u6210Qwen-Plus\u4e13\u4e1a\u54a8\u8be2\u6570\u636e...\" ) with tqdm ( total = num_qwen , desc = \"Qwen-based Professional\" ) as pbar : while len ( professional_samples ) < num_per_category : q = generate_professional_query_qwen () if q and q not in professional_set : professional_set . add ( q ) professional_samples . append ({ \"query\" : q , \"label\" : \"\u4e13\u4e1a\u54a8\u8be2\" }) pbar . update ( 1 ) time . sleep ( 0.5 ) # \u907f\u514d API \u9650\u6d41 save_dataset ( professional_samples , \"professional_3000.json\" , \"\u4e13\u4e1a\u54a8\u8be2\uff08\u89c4\u5219+Qwen\uff09\" ) # \u5408\u5e76\u5e76\u6df7\u6d17 dataset = generic_samples + professional_samples random . shuffle ( dataset ) final_filename = \"training_dataset_hybrid_6000.json\" save_dataset ( dataset , final_filename , \"\u6700\u7ec8\u6570\u636e\u96c6\" ) return dataset if __name__ == \"__main__\" : dataset = generate_training_dataset ( total_samples = 6000 ) print ( f \"\u6210\u529f\u751f\u6210 { len ( dataset ) } \u6761\u8bad\u7ec3\u6570\u636e\uff0c\u4fdd\u5b58\u5728 training_dataset_hybrid_6000.json \u6587\u4ef6\u4e2d\u3002\" ) # \u8f93\u51fa\u524d10\u6761\u4f5c\u4e3a\u793a\u4f8b for item in dataset [: 10 ]: print ( json . dumps ( item , ensure_ascii = False )) \u5b9e\u73b0\u7ec6\u8282 \u00b6 apply_synonym_variation \uff1a \u4f5c\u7528 \uff1a\u4e3a\u89c4\u5219\u751f\u6210\u67e5\u8be2\u589e\u52a0\u591a\u6837\u6027\uff0c\u901a\u8fc7\u540c\u4e49\u8bcd\u66ff\u6362\uff08\u5982\u201c\u4ec0\u4e48\u201d -> \u201c\u5565\u662f\u201d\uff09\u3002 \u903b\u8f91 \uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u8bcd\u8fb9\u754c\uff0c50% \u6982\u7387\u66ff\u6362\u3002 generate_generic_query_rule \u548c generate_professional_query_rule \uff1a \u4f5c\u7528 \uff1a\u57fa\u4e8e\u6a21\u677f\u751f\u6210\u521d\u59cb\u6570\u636e\u3002 \u8bbe\u8ba1 \uff1a\u8986\u76d6\u6570\u5b66\u8ba1\u7b97\u3001\u4ee3\u7801\u751f\u6210\u3001\u6982\u5ff5\u95ee\u9898\u548c IT \u57f9\u8bad\u573a\u666f\u3002 generate_with_qwen \uff1a \u4f5c\u7528 \uff1a\u5c01\u88c5 Qwen-Plus API \u8c03\u7528\uff0c\u751f\u6210\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u3002 \u53c2\u6570 \uff1a temperature=0.9 \u786e\u4fdd\u591a\u6837\u6027\uff0c timeout=10 \u9632\u6b62\u5361\u987f\u3002 generate_generic_query_qwen \u548c generate_professional_query_qwen \uff1a \u4f5c\u7528 \uff1a\u901a\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\u7684 Prompt \u6307\u5bfc Qwen-Plus \u751f\u6210\u7b26\u5408\u7c7b\u522b\u7684\u67e5\u8be2\u3002 \u903b\u8f91 \uff1a\u63d0\u4f9b\u793a\u4f8b\uff0c\u8f93\u51fa\u7b80\u6d01\u7684\u67e5\u8be2\u6587\u672c\u3002 save_dataset \uff1a \u4f5c\u7528 \uff1a\u7edf\u4e00\u4fdd\u5b58\u6570\u636e\u96c6\uff0c\u663e\u793a\u9636\u6bb5\u540d\u79f0\u548c\u6570\u636e\u91cf\u3002 \u5b9e\u73b0 \uff1a\u652f\u6301 JSON \u683c\u5f0f\uff0c\u4fdd\u5b58\u4e2d\u95f4\u548c\u6700\u7ec8\u7ed3\u679c\u3002 generate_training_dataset \uff1a \u4f5c\u7528 \uff1a\u6574\u5408\u89c4\u5219\u548c\u5927\u6a21\u578b\u751f\u6210\u6d41\u7a0b\u3002 \u6d41\u7a0b \uff1a \u89c4\u5219\u751f\u6210 1500 \u6761\u201c\u901a\u7528\u77e5\u8bc6\u201d\uff0c\u4fdd\u5b58\u3002 \u89c4\u5219\u751f\u6210 1500 \u6761\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\uff0c\u4fdd\u5b58\u3002 Qwen-Plus \u751f\u6210 1500 \u6761\u201c\u901a\u7528\u77e5\u8bc6\u201d\uff0c\u7d2f\u8ba1 3000 \u6761\u4fdd\u5b58\u3002 Qwen-Plus \u751f\u6210 1500 \u6761\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\uff0c\u7d2f\u8ba1 3000 \u6761\u4fdd\u5b58\u3002 \u5408\u5e76\u6df7\u6d17 6000 \u6761\uff0c\u4fdd\u5b58\u6700\u7ec8\u6570\u636e\u96c6\u3002 \u8fdb\u5ea6\u6761 \uff1a tqdm \u5b9e\u65f6\u663e\u793a\u6bcf\u4e2a\u9636\u6bb5\u7684\u751f\u6210\u8fdb\u5ea6\u3002 \u8bf4\u660e \u00b6 \u6df7\u5408\u751f\u6210 \uff1a\u89c4\u5219\u751f\u6210\u9ad8\u6548\u53ef\u63a7\uff0cQwen-Plus \u751f\u6210\u81ea\u7136\u771f\u5b9e\u3002 \u5206\u9636\u6bb5\u4fdd\u5b58 \uff1a\u6bcf 1500 \u6761\u4fdd\u5b58\u4e00\u6b21\uff0c\u652f\u6301\u65ad\u70b9\u6062\u590d\u3002 \u8fdb\u5ea6\u76d1\u63a7 \uff1a tqdm \u63d0\u4f9b\u76f4\u89c2\u53cd\u9988\uff0c\u4f18\u5316\u7528\u6237\u4f53\u9a8c\u3002 \u6267\u884c\u793a\u4f8b \u00b6 \u8fd0\u884c\u811a\u672c\u65f6\uff0c\u8f93\u51fa\u7c7b\u4f3c\uff1a \u751f\u6210\u89c4\u5219\u901a\u7528\u77e5\u8bc6\u6570\u636e... Rule-based Generic: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [00:02<00:00, 750it/s] \u89c4\u5219\u901a\u7528\u77e5\u8bc6\uff1a\u5df2\u4fdd\u5b58 1500 \u6761\u6570\u636e\u5230 rule_generic_1500.json \u751f\u6210\u89c4\u5219\u4e13\u4e1a\u54a8\u8be2\u6570\u636e... Rule-based Professional: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [00:02<00:00, 700it/s] \u89c4\u5219\u4e13\u4e1a\u54a8\u8be2\uff1a\u5df2\u4fdd\u5b58 1500 \u6761\u6570\u636e\u5230 rule_professional_1500.json \u751f\u6210Qwen-Plus\u901a\u7528\u77e5\u8bc6\u6570\u636e... Qwen-based Generic: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [05:00<00:00, 5it/s] \u901a\u7528\u77e5\u8bc6\uff08\u89c4\u5219+Qwen\uff09\uff1a\u5df2\u4fdd\u5b58 3000 \u6761\u6570\u636e\u5230 generic_3000.json \u751f\u6210Qwen-Plus\u4e13\u4e1a\u54a8\u8be2\u6570\u636e... Qwen-based Professional: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [05:05<00:00, 4.9it/s] \u4e13\u4e1a\u54a8\u8be2\uff08\u89c4\u5219+Qwen\uff09\uff1a\u5df2\u4fdd\u5b58 3000 \u6761\u6570\u636e\u5230 professional_3000.json \u6700\u7ec8\u6570\u636e\u96c6\uff1a\u5df2\u4fdd\u5b58 6000 \u6761\u6570\u636e\u5230 training_dataset_hybrid_6000.json \u6210\u529f\u751f\u6210 6000 \u6761\u8bad\u7ec3\u6570\u636e\uff0c\u4fdd\u5b58\u5728 training_dataset_hybrid_6000.json \u6587\u4ef6\u4e2d\u3002 1.2 \u6570\u636e\u96c6\u751f\u6210\u6d41\u7a0b \u00b6 \u751f\u6210\u6d41\u7a0b \u00b6 \u89c4\u5219\u751f\u6210\uff083000 \u6761\uff09 \uff1a \u751f\u6210 1500 \u6761\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6570\u636e\uff0c\u4fdd\u5b58\u4e3a rule_generic_1500.json \u3002 \u751f\u6210 1500 \u6761\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u6570\u636e\uff0c\u4fdd\u5b58\u4e3a rule_professional_1500.json . \u4f7f\u7528\u6a21\u677f\u548c\u540c\u4e49\u8bcd\u66ff\u6362\uff0c\u786e\u4fdd\u591a\u6837\u6027\u3002 Qwen-Plus \u751f\u6210\uff083000 \u6761\uff09 \uff1a \u751f\u6210 1500 \u6761\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6570\u636e\uff0c\u7d2f\u8ba1 3000 \u6761\u4fdd\u5b58\u4e3a generic_3000.json \u3002 \u751f\u6210 1500 \u6761\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u6570\u636e\uff0c\u7d2f\u8ba1 3000 \u6761\u4fdd\u5b58\u4e3a professional_3000.json . \u901a\u8fc7 Prompt \u63a7\u5236\u751f\u6210\u8d28\u91cf\u3002 \u6570\u636e\u6574\u5408 \uff1a \u5408\u5e76 6000 \u6761\u6570\u636e\uff0c\u968f\u673a\u6df7\u6d17\u3002 \u4fdd\u5b58\u4e3a training_dataset_hybrid_6000.json . \u4ee3\u7801\u793a\u4f8b\uff08\u4f7f\u7528\u6570\u636e\u96c6\uff09 \u00b6 # core/query_classifier.py from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.pipeline import Pipeline import joblib class QueryClassifier : def train_model ( self ): with open ( \"training_dataset_hybrid_6000.json\" , \"r\" , encoding = \"utf-8\" ) as f : data = json . load ( f ) texts = [ item [ \"query\" ] for item in data ] labels = [ item [ \"label\" ] for item in data ] self . model = Pipeline ([ ( \"tfidf\" , TfidfVectorizer ()), ( \"classifier\" , MultinomialNB ()), ]) self . model . fit ( texts , labels ) joblib . dump ( self . model , \"query_classifier_model.pkl\" ) print ( \"\u6a21\u578b\u8bad\u7ec3\u5b8c\u6210\u5e76\u4fdd\u5b58\" ) 1.3 \u6570\u636e\u96c6\u7279\u70b9\u4e0e\u4f18\u5316 \u00b6 \u6570\u636e\u96c6\u7279\u70b9 \u00b6 \u603b\u6570 \uff1a6000 \u6761\uff08\u201c\u901a\u7528\u77e5\u8bc6\u201d 3000 \u6761\uff0c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d 3000 \u6761\uff09\u3002 \u6765\u6e90 \uff1a\u89c4\u5219\u751f\u6210 50%\uff083000 \u6761\uff09\uff0cQwen-Plus \u751f\u6210 50%\uff083000 \u6761\uff09\u3002 \u591a\u6837\u6027 \uff1a \u89c4\u5219\u751f\u6210\uff1a\u6a21\u677f\u548c\u540c\u4e49\u8bcd\u66ff\u6362\u8986\u76d6\u591a\u79cd\u573a\u666f\u3002 Qwen-Plus \u751f\u6210\uff1a\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u8d34\u8fd1\u771f\u5b9e\u7528\u6237\u8f93\u5165\u3002 \u4fdd\u5b58\u673a\u5236 \uff1a\u6bcf 1500 \u6761\u4fdd\u5b58\uff0c\u652f\u6301\u65ad\u70b9\u7eed\u4f20\u3002 \u53ef\u89c6\u5316 \uff1a tqdm \u8fdb\u5ea6\u6761\u63d0\u4f9b\u5b9e\u65f6\u53cd\u9988\u3002 \u4f18\u5316\u6548\u679c \u00b6 \u9ad8\u6548\u6027 \uff1a\u7b80\u5316\u751f\u6210\u6d41\u7a0b\uff0c\u89c4\u5219\u751f\u6210\u77ac\u65f6\u5b8c\u6210\u3002 \u53ef\u9760\u6027 \uff1a\u5206\u9636\u6bb5\u4fdd\u5b58\u786e\u4fdd\u6570\u636e\u5b89\u5168\u3002 \u5206\u7c7b\u6027\u80fd \uff1a\u5747\u8861\u6570\u636e\u96c6\u63d0\u5347 QueryClassifier \u51c6\u786e\u6027\u3002 \u7528\u6237\u4f53\u9a8c \uff1a\u8fdb\u5ea6\u6761\u548c\u4fdd\u5b58\u65e5\u5fd7\u589e\u5f3a\u4ea4\u4e92\u6027\u3002 \u7ae0\u8282\u603b\u7ed3 \u00b6 \u672c\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4f18\u5316\u540e\u7684 generate_query_dataset_hybrid.py \uff1a - \u529f\u80fd \uff1a\u6df7\u5408\u751f\u6210 6000 \u6761\u6570\u636e\uff0c\u89c4\u5219\u548c Qwen-Plus \u5404\u5360\u4e00\u534a\u3002 - \u5b9e\u73b0 \uff1a\u901a\u8fc7\u6a21\u677f\u751f\u6210 3000 \u6761\uff0cQwen-Plus \u751f\u6210 3000 \u6761\uff0c\u6bcf 1500 \u6761\u4fdd\u5b58\uff0c\u8fdb\u5ea6\u6761\u76d1\u63a7\u3002 - \u4f5c\u7528 \uff1a\u4e3a QueryClassifier \u63d0\u4f9b\u9ad8\u8d28\u91cf\u6570\u636e\uff0c\u4f18\u5316 EduRAG \u7cfb\u7edf\u5206\u7c7b\u80fd\u529b\u3002 \u5b66\u4e60\u8005\u638c\u63e1\u4e86\u9ad8\u6548\u7684\u6570\u636e\u751f\u6210\u548c\u4fdd\u5b58\u65b9\u6cd5\uff0c\u80fd\u591f\u4e3a RAG \u7cfb\u7edf\u63d0\u4f9b\u53ef\u9760\u652f\u6301\u3002","title":"\u6570\u636e\u96c6\u751f\u6210\u4e0e\u4f18\u5316"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_1","text":"","title":"\u6570\u636e\u96c6\u751f\u6210\u4e0e\u4f18\u5316"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_2","text":"1.\u638c\u63e1\u5982\u4f55\u7ed3\u5408\u89c4\u5219\u6a21\u677f\u548c Qwen-Plus \u6a21\u578b\u751f\u6210\u9ad8\u8d28\u91cf\u67e5\u8be2\u6570\u636e\u96c6\u3002 2.\u901a\u8fc7 tqdm \u8fdb\u5ea6\u6761\u76d1\u63a7\u751f\u6210\u8fdb\u5ea6\uff0c\u5e76\u5b9e\u73b0\u5206\u9636\u6bb5\u6570\u636e\u4fdd\u5b58\u3002 generate_query_dataset_hybrid.py \u662f EduRAG \u7cfb\u7edf\u4e2d\u7528\u4e8e\u751f\u6210\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6838\u5fc3\u811a\u672c\uff0c\u65e8\u5728\u4e3a QueryClassifier \u63d0\u4f9b 6000 \u6761\u9ad8\u8d28\u91cf\u6570\u636e\uff08\u201c\u901a\u7528\u77e5\u8bc6\u201d\u548c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u5404 3000 \u6761\uff09\u3002\u901a\u8fc7\u89c4\u5219\u6a21\u677f\u548c Qwen-Plus \u6a21\u578b\u7684\u6df7\u5408\u751f\u6210\uff0c\u7ed3\u5408\u8fdb\u5ea6\u6761\u548c\u5206\u9636\u6bb5\u4fdd\u5b58\uff0c\u672c\u811a\u672c\u786e\u4fdd\u4e86\u751f\u6210\u6548\u7387\u548c\u6570\u636e\u53ef\u9760\u6027\u3002\u672c\u7ae0\u8282\u5c06\u8be6\u7ec6\u8bb2\u89e3\u5176\u529f\u80fd\u3001\u5b9e\u73b0\u548c\u5e94\u7528\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#11","text":"","title":"1.1 \u6570\u636e\u751f\u6210\u4e0e\u4f18\u5316"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_3","text":"generate_query_dataset_hybrid.py \u63d0\u4f9b\u4ee5\u4e0b\u529f\u80fd\uff1a \u89c4\u5219\u751f\u6210 \uff1a\u57fa\u4e8e\u6a21\u677f\u548c\u540c\u4e49\u8bcd\u66ff\u6362\u751f\u6210 3000 \u6761\u6570\u636e\uff08\u201c\u901a\u7528\u77e5\u8bc6\u201d\u548c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u5404 1500 \u6761\uff09\u3002 \u5927\u6a21\u578b\u751f\u6210 \uff1a\u5229\u7528 Qwen-Plus \u751f\u6210 3000 \u6761\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\uff08\u5404 1500 \u6761\uff09\u3002 \u8fdb\u5ea6\u76d1\u63a7 \uff1a\u901a\u8fc7 tqdm \u8fdb\u5ea6\u6761\u53ef\u89c6\u5316\u6bcf\u4e2a\u751f\u6210\u9636\u6bb5\u3002 \u5206\u9636\u6bb5\u4fdd\u5b58 \uff1a\u6bcf\u751f\u6210 1500 \u6761\u6570\u636e\u4fdd\u5b58\u4e00\u6b21\uff0c\u6700\u7ec8\u5408\u5e76\u4fdd\u5b58\u5b8c\u6574\u6570\u636e\u96c6\u3002 \u6570\u636e\u96c6\u8f93\u51fa \uff1a\u751f\u6210\u5747\u8861\u7684 6000 \u6761\u6570\u636e\uff0c\u4fdd\u5b58\u4e3a JSON \u6587\u4ef6\u3002","title":"\u529f\u80fd\u6982\u8ff0"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_4","text":"# generate_query_dataset_hybrid.py import json import random import re import os from openai import OpenAI from dotenv import load_dotenv from tqdm import tqdm import time # \u52a0\u8f7d\u73af\u5883\u53d8\u91cf load_dotenv () # \u521d\u59cb\u5316Qwen-Plus\u5ba2\u6237\u7aef client = OpenAI ( api_key = os . getenv ( \"DASHSCOPE_API_KEY\" ), base_url = os . getenv ( \"DASHSCOPE_BASE_URL\" , \"https://dashscope.aliyuncs.com/compatible-mode/v1\" ), ) # \u540c\u4e49\u8bcd\u8bcd\u5178 synonym_dict = { \"\u4ec0\u4e48\" : [ \"\u4ec0\u4e48\" , \"\u5565\u662f\" , \"\u5982\u4f55\u89e3\u91ca\" , \"\u5177\u4f53\u662f\u4ec0\u4e48\" , \"\u8bf7\u89e3\u91ca\" ], \"\u8bfe\u7a0b\" : [ \"\u8bfe\u7a0b\" , \"\u57f9\u8bad\u8bfe\u7a0b\" , \"\u8bfe\u7a0b\u5b89\u6392\" , \"\u6559\u5b66\u5185\u5bb9\" , \"\u8bfe\" ], \"\u5b66\u8d39\" : [ \"\u5b66\u8d39\" , \"\u8d39\u7528\" , \"\u62a5\u540d\u8d39\" , \"\u5b66\u4e60\u8d39\u7528\" , \"\u4ef7\u683c\" , \"\u6536\u8d39\" ], \"\u5927\u7eb2\" : [ \"\u5927\u7eb2\" , \"\u8bfe\u7a0b\u5185\u5bb9\" , \"\u6559\u5b66\u8ba1\u5212\" , \"\u8bb2\u4e49\" ], \"\u5e08\u8d44\" : [ \"\u5e08\u8d44\" , \"\u6559\u5e08\u56e2\u961f\" , \"\u8bb2\u5e08\u9635\u5bb9\" , \"\u5e08\u8d44\u529b\u91cf\" , \"\u8001\u5e08\" , \"\u8bb2\u5e08\" ], \"\u57f9\u8bad\" : [ \"\u57f9\u8bad\" , \"\u8f85\u5bfc\" , \"\u5b66\u4e60\u8ba1\u5212\" , \"\u6559\u80b2\u8bfe\u7a0b\" ], \"\u5728\u54ea\u91cc\" : [ \"\u5728\u54ea\u91cc\" , \"\u4f4d\u4e8e\u4f55\u5904\" , \"\u8bbe\u5728\u4f55\u5730\" , \"\u5728\u54ea\" ], \"\u4ecb\u7ecd\" : [ \"\u4ecb\u7ecd\" , \"\u8bf4\u660e\" , \"\u8bb2\u89e3\" , \"\u6982\u8ff0\" , \"\u8bb2\u8bb2\" , \"\u8bf4\u8bf4\" ], \"\u8bf7\u95ee\" : [ \"\u8bf7\u95ee\" , \"\u80fd\u5426\u544a\u77e5\" , \"\u662f\u5426\u53ef\u4ee5\u544a\u8bc9\u6211\" , \"\u9ebb\u70e6\u8bf4\u4e0b\" ], \"\u539f\u7406\" : [ \"\u539f\u7406\" , \"\u57fa\u672c\u601d\u60f3\" , \"\u5de5\u4f5c\u673a\u5236\" ], \"\u5199\u4e00\u4e2a\" : [ \"\u5199\u4e00\u4e2a\" , \"\u7f16\u5199\u4e00\u4e2a\" , \"\u751f\u6210\u4e00\u4e2a\" , \"\u521b\u5efa\u4e00\u4e2a\" ], \"\u7b49\u4e8e\u591a\u5c11\" : [ \"\u7b49\u4e8e\u591a\u5c11\" , \"\u662f\u591a\u5c11\" , \"\u7ed3\u679c\u662f\u5565\" , \"\u5f97\u591a\u5c11\" ], \"\u5982\u4f55\" : [ \"\u5982\u4f55\" , \"\u600e\u6837\" , \"\u548b\u6837\" ], \"\u9700\u8981\" : [ \"\u9700\u8981\" , \"\u8981\" , \"\u5f97\u6709\" , \"\u5fc5\u987b\u5177\u5907\" ], \"\u57fa\u7840\" : [ \"\u57fa\u7840\" , \"\u524d\u63d0\" , \"\u80cc\u666f\" , \"\u57fa\u672c\u77e5\u8bc6\" ] } def apply_synonym_variation ( text , replace_prob = 0.5 ): \"\"\"\u5bf9\u6587\u672c\u8fdb\u884c\u540c\u4e49\u8bcd\u968f\u673a\u66ff\u6362\"\"\" for word , synonyms in synonym_dict . items (): pattern = r \"\\b\" + re . escape ( word ) + r \"\\b\" def repl ( match ): if random . random () < replace_prob : return random . choice ( synonyms ) return match . group ( 0 ) text = re . sub ( pattern , repl , text ) return text # \u89c4\u5219\u751f\u6210\u90e8\u5206 def generate_generic_query_rule (): \"\"\"\u89c4\u5219\u751f\u6210\u901a\u7528\u77e5\u8bc6\u67e5\u8be2\"\"\" templates = [ \"\u4ec0\u4e48 {concept} \uff1f\" , \" {concept} \u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\uff1f\" , \"\u8bf7\u89e3\u91ca {concept} \u7684\u539f\u7406\u3002\" , \"\u5982\u4f55\u8fd0\u7528 {concept} \uff1f\" , \"\u8ba1\u7b97 {num1} + {num2} \u7b49\u4e8e\u591a\u5c11\uff1f\" , \"\u5199\u4e00\u4e2a {lang} \u7684 {func} \u51fd\u6570\" , \"\u4e3a\u4ec0\u4e48 {thing} \u662f {state} \uff1f\" ] concepts = [ \"AI\" , \"Transformer\u6a21\u578b\" , \"Python\" , \"\u9012\u5f52\" , \"\u7b97\u6cd5\u590d\u6742\u5ea6\" , \"\u6570\u636e\u7ed3\u6784\" , \"\u673a\u5668\u5b66\u4e60\" ] langs = [ \"Python\" , \"Java\" , \"C++\" ] funcs = [ \"\u6392\u5e8f\" , \"\u8ba1\u7b97\" , \"\u6253\u5370\" ] things = [ \"\u592a\u9633\" , \"\u6c34\" , \"\u98ce\" ] states = [ \"\u70ed\u7684\" , \"\u6d41\u52a8\u7684\" , \"\u65e0\u5f62\u7684\" ] nums = list ( range ( 1 , 100 )) t = random . choice ( templates ) if \" {concept} \" in t : replacements = { \"concept\" : random . choice ( concepts )} elif \" {num1} \" in t : replacements = { \"num1\" : random . choice ( nums ), \"num2\" : random . choice ( nums )} elif \" {lang} \" in t : replacements = { \"lang\" : random . choice ( langs ), \"func\" : random . choice ( funcs )} elif \" {thing} \" in t : replacements = { \"thing\" : random . choice ( things ), \"state\" : random . choice ( states )} else : replacements = {} query = t . format ( ** replacements ) return apply_synonym_variation ( query ) def generate_professional_query_rule (): \"\"\"\u89c4\u5219\u751f\u6210\u4e13\u4e1a\u54a8\u8be2\u67e5\u8be2\"\"\" templates = [ \"\u8bf7\u95ee {subject} \u8bfe\u7a0b\u7684\u5b66\u8d39\u662f\u591a\u5c11\uff1f\" , \" {subject} \u7684\u8bfe\u7a0b\u5927\u7eb2\u662f\u4ec0\u4e48\uff1f\" , \" {subject} \u57f9\u8bad\u7684\u5b66\u4e60\u5468\u671f\u6709\u591a\u957f\uff1f\" , \"\u8bf7\u4ecb\u7ecd\u4e00\u4e0b {subject} \u57f9\u8bad\u7684\u4e3b\u8981\u9879\u76ee\u5185\u5bb9\u3002\" , \"\u8bf7\u95ee {subject} \u57f9\u8bad\u5730\u70b9\u5728\u54ea\u91cc\uff1f\" ] subjects = [ \"JAVA\" , \"AI\" , \"\u6d4b\u8bd5\" , \"Web\u524d\u7aef\" , \"Python\" , \"\u5927\u6570\u636e\" , \"DevOps\" ] t = random . choice ( templates ) query = t . format ( subject = random . choice ( subjects )) return apply_synonym_variation ( query ) # \u5927\u6a21\u578b\u751f\u6210\u90e8\u5206 def generate_with_qwen ( prompt ): \"\"\"\u8c03\u7528Qwen-Plus\u751f\u6210\u67e5\u8be2\uff0c\u6dfb\u52a0\u8d85\u65f6\u63a7\u5236\"\"\" try : completion = client . chat . completions . create ( model = \"qwen-plus\" , messages = [{ \"role\" : \"user\" , \"content\" : prompt }], temperature = 0.9 , timeout = 10 ) return completion . choices [ 0 ] . message . content . strip () except Exception as e : print ( f \"Qwen-Plus\u8c03\u7528\u5931\u8d25: { e } \" ) return None def generate_generic_query_qwen (): \"\"\"\u4f7f\u7528Qwen-Plus\u751f\u6210\u901a\u7528\u77e5\u8bc6\u67e5\u8be2\"\"\" prompt = \"\"\" \u4f60\u662f\u4e00\u4e2a\u7528\u6237\uff0c\u751f\u6210\u4e00\u4e2a\u201c\u901a\u7528\u77e5\u8bc6\u201d\u7c7b\u7684\u67e5\u8be2\uff0c\u6d89\u53ca\u6570\u5b66\u8ba1\u7b97\u3001\u4ee3\u7801\u751f\u6210/\u7ea0\u9519\u3001\u6982\u5ff5\u4e0e\u539f\u7406\u6216\u5e38\u8bc6\u6027\u95ee\u9898\u3002 \u793a\u4f8b\uff1a - \u201c3+5\u7b49\u4e8e\u591a\u5c11\uff1f\u201d - \u201c\u5199\u4e00\u4e2aPython\u6392\u5e8f\u51fd\u6570\u201d - \u201c\u4ec0\u4e48\u662f\u795e\u7ecf\u7f51\u7edc\uff1f\u201d - \u201c\u592a\u9633\u4e3a\u4ec0\u4e48\u662f\u70ed\u7684\uff1f\u201d \u8bf7\u751f\u6210\u4e00\u4e2a\u7c7b\u4f3c\u7684\u67e5\u8be2\uff0c\u76f4\u63a5\u8fd4\u56de\u67e5\u8be2\u6587\u672c\uff0c\u4e0d\u8981\u591a\u4f59\u8bf4\u660e\u3002 \"\"\" return generate_with_qwen ( prompt ) def generate_professional_query_qwen (): \"\"\"\u4f7f\u7528Qwen-Plus\u751f\u6210\u4e13\u4e1a\u54a8\u8be2\u67e5\u8be2\"\"\" prompt = \"\"\" \u4f60\u662f\u4e00\u4e2a\u7528\u6237\uff0c\u751f\u6210\u4e00\u4e2a\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u7c7b\u7684\u67e5\u8be2\uff0c\u6d89\u53caIT\u6559\u80b2\u57f9\u8bad\uff08\u5982\u8bfe\u7a0b\u8be6\u60c5\u3001\u5e08\u8d44\u3001\u8d39\u7528\u3001\u5468\u671f\u3001\u5730\u70b9\u7b49\uff09\u3002 \u793a\u4f8b\uff1a - \u201cJAVA\u8bfe\u7a0b\u8d39\u7528\u591a\u5c11\uff1f\u201d - \u201cAI\u57f9\u8bad\u6709\u54ea\u4e9b\u8001\u5e08\uff1f\u201d - \u201c\u6d4b\u8bd5\u8bfe\u7a0b\u4ec0\u4e48\u65f6\u5019\u5f00\u8bfe\uff1f\u201d \u8bf7\u751f\u6210\u4e00\u4e2a\u7c7b\u4f3c\u7684\u67e5\u8be2\uff0c\u76f4\u63a5\u8fd4\u56de\u67e5\u8be2\u6587\u672c\uff0c\u4e0d\u8981\u591a\u4f59\u8bf4\u660e\u3002 \"\"\" return generate_with_qwen ( prompt ) # \u4fdd\u5b58\u6570\u636e\u96c6 def save_dataset ( dataset , filename , stage_name ): \"\"\"\u4fdd\u5b58\u6570\u636e\u96c6\u5230\u6307\u5b9a\u6587\u4ef6\"\"\" with open ( filename , \"w\" , encoding = \"utf-8\" ) as f : json . dump ( dataset , f , ensure_ascii = False , indent = 2 ) print ( f \" { stage_name } \uff1a\u5df2\u4fdd\u5b58 { len ( dataset ) } \u6761\u6570\u636e\u5230 { filename } \" ) def generate_training_dataset ( total_samples = 6000 ): \"\"\"\u751f\u62106000\u6761\u8bad\u7ec3\u6570\u636e\uff0c\u89c4\u5219\u548c\u5927\u6a21\u578b\u5404\u5360\u4e00\u534a\uff0c\u6bcf1500\u6761\u4fdd\u5b58\"\"\" num_per_category = total_samples // 2 # 3000 num_rule = num_per_category // 2 # 1500 num_qwen = num_per_category - num_rule # 1500 generic_samples = [] professional_samples = [] generic_set = set () professional_set = set () # \u89c4\u5219\u751f\u6210 - \u901a\u7528\u77e5\u8bc6 print ( \"\u751f\u6210\u89c4\u5219\u901a\u7528\u77e5\u8bc6\u6570\u636e...\" ) with tqdm ( total = num_rule , desc = \"Rule-based Generic\" ) as pbar : while len ( generic_samples ) < num_rule : q = generate_generic_query_rule () if q not in generic_set : generic_set . add ( q ) generic_samples . append ({ \"query\" : q , \"label\" : \"\u901a\u7528\u77e5\u8bc6\" }) pbar . update ( 1 ) save_dataset ( generic_samples , \"rule_generic_1500.json\" , \"\u89c4\u5219\u901a\u7528\u77e5\u8bc6\" ) # \u89c4\u5219\u751f\u6210 - \u4e13\u4e1a\u54a8\u8be2 print ( \"\u751f\u6210\u89c4\u5219\u4e13\u4e1a\u54a8\u8be2\u6570\u636e...\" ) with tqdm ( total = num_rule , desc = \"Rule-based Professional\" ) as pbar : while len ( professional_samples ) < num_rule : q = generate_professional_query_rule () if q not in professional_set : professional_set . add ( q ) professional_samples . append ({ \"query\" : q , \"label\" : \"\u4e13\u4e1a\u54a8\u8be2\" }) pbar . update ( 1 ) save_dataset ( professional_samples , \"rule_professional_1500.json\" , \"\u89c4\u5219\u4e13\u4e1a\u54a8\u8be2\" ) # Qwen-Plus\u751f\u6210 - \u901a\u7528\u77e5\u8bc6 print ( \"\u751f\u6210Qwen-Plus\u901a\u7528\u77e5\u8bc6\u6570\u636e...\" ) with tqdm ( total = num_qwen , desc = \"Qwen-based Generic\" ) as pbar : while len ( generic_samples ) < num_per_category : q = generate_generic_query_qwen () if q and q not in generic_set : generic_set . add ( q ) generic_samples . append ({ \"query\" : q , \"label\" : \"\u901a\u7528\u77e5\u8bc6\" }) pbar . update ( 1 ) time . sleep ( 0.5 ) # \u907f\u514d API \u9650\u6d41 save_dataset ( generic_samples , \"generic_3000.json\" , \"\u901a\u7528\u77e5\u8bc6\uff08\u89c4\u5219+Qwen\uff09\" ) # Qwen-Plus\u751f\u6210 - \u4e13\u4e1a\u54a8\u8be2 print ( \"\u751f\u6210Qwen-Plus\u4e13\u4e1a\u54a8\u8be2\u6570\u636e...\" ) with tqdm ( total = num_qwen , desc = \"Qwen-based Professional\" ) as pbar : while len ( professional_samples ) < num_per_category : q = generate_professional_query_qwen () if q and q not in professional_set : professional_set . add ( q ) professional_samples . append ({ \"query\" : q , \"label\" : \"\u4e13\u4e1a\u54a8\u8be2\" }) pbar . update ( 1 ) time . sleep ( 0.5 ) # \u907f\u514d API \u9650\u6d41 save_dataset ( professional_samples , \"professional_3000.json\" , \"\u4e13\u4e1a\u54a8\u8be2\uff08\u89c4\u5219+Qwen\uff09\" ) # \u5408\u5e76\u5e76\u6df7\u6d17 dataset = generic_samples + professional_samples random . shuffle ( dataset ) final_filename = \"training_dataset_hybrid_6000.json\" save_dataset ( dataset , final_filename , \"\u6700\u7ec8\u6570\u636e\u96c6\" ) return dataset if __name__ == \"__main__\" : dataset = generate_training_dataset ( total_samples = 6000 ) print ( f \"\u6210\u529f\u751f\u6210 { len ( dataset ) } \u6761\u8bad\u7ec3\u6570\u636e\uff0c\u4fdd\u5b58\u5728 training_dataset_hybrid_6000.json \u6587\u4ef6\u4e2d\u3002\" ) # \u8f93\u51fa\u524d10\u6761\u4f5c\u4e3a\u793a\u4f8b for item in dataset [: 10 ]: print ( json . dumps ( item , ensure_ascii = False ))","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_5","text":"apply_synonym_variation \uff1a \u4f5c\u7528 \uff1a\u4e3a\u89c4\u5219\u751f\u6210\u67e5\u8be2\u589e\u52a0\u591a\u6837\u6027\uff0c\u901a\u8fc7\u540c\u4e49\u8bcd\u66ff\u6362\uff08\u5982\u201c\u4ec0\u4e48\u201d -> \u201c\u5565\u662f\u201d\uff09\u3002 \u903b\u8f91 \uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u8bcd\u8fb9\u754c\uff0c50% \u6982\u7387\u66ff\u6362\u3002 generate_generic_query_rule \u548c generate_professional_query_rule \uff1a \u4f5c\u7528 \uff1a\u57fa\u4e8e\u6a21\u677f\u751f\u6210\u521d\u59cb\u6570\u636e\u3002 \u8bbe\u8ba1 \uff1a\u8986\u76d6\u6570\u5b66\u8ba1\u7b97\u3001\u4ee3\u7801\u751f\u6210\u3001\u6982\u5ff5\u95ee\u9898\u548c IT \u57f9\u8bad\u573a\u666f\u3002 generate_with_qwen \uff1a \u4f5c\u7528 \uff1a\u5c01\u88c5 Qwen-Plus API \u8c03\u7528\uff0c\u751f\u6210\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u3002 \u53c2\u6570 \uff1a temperature=0.9 \u786e\u4fdd\u591a\u6837\u6027\uff0c timeout=10 \u9632\u6b62\u5361\u987f\u3002 generate_generic_query_qwen \u548c generate_professional_query_qwen \uff1a \u4f5c\u7528 \uff1a\u901a\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\u7684 Prompt \u6307\u5bfc Qwen-Plus \u751f\u6210\u7b26\u5408\u7c7b\u522b\u7684\u67e5\u8be2\u3002 \u903b\u8f91 \uff1a\u63d0\u4f9b\u793a\u4f8b\uff0c\u8f93\u51fa\u7b80\u6d01\u7684\u67e5\u8be2\u6587\u672c\u3002 save_dataset \uff1a \u4f5c\u7528 \uff1a\u7edf\u4e00\u4fdd\u5b58\u6570\u636e\u96c6\uff0c\u663e\u793a\u9636\u6bb5\u540d\u79f0\u548c\u6570\u636e\u91cf\u3002 \u5b9e\u73b0 \uff1a\u652f\u6301 JSON \u683c\u5f0f\uff0c\u4fdd\u5b58\u4e2d\u95f4\u548c\u6700\u7ec8\u7ed3\u679c\u3002 generate_training_dataset \uff1a \u4f5c\u7528 \uff1a\u6574\u5408\u89c4\u5219\u548c\u5927\u6a21\u578b\u751f\u6210\u6d41\u7a0b\u3002 \u6d41\u7a0b \uff1a \u89c4\u5219\u751f\u6210 1500 \u6761\u201c\u901a\u7528\u77e5\u8bc6\u201d\uff0c\u4fdd\u5b58\u3002 \u89c4\u5219\u751f\u6210 1500 \u6761\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\uff0c\u4fdd\u5b58\u3002 Qwen-Plus \u751f\u6210 1500 \u6761\u201c\u901a\u7528\u77e5\u8bc6\u201d\uff0c\u7d2f\u8ba1 3000 \u6761\u4fdd\u5b58\u3002 Qwen-Plus \u751f\u6210 1500 \u6761\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\uff0c\u7d2f\u8ba1 3000 \u6761\u4fdd\u5b58\u3002 \u5408\u5e76\u6df7\u6d17 6000 \u6761\uff0c\u4fdd\u5b58\u6700\u7ec8\u6570\u636e\u96c6\u3002 \u8fdb\u5ea6\u6761 \uff1a tqdm \u5b9e\u65f6\u663e\u793a\u6bcf\u4e2a\u9636\u6bb5\u7684\u751f\u6210\u8fdb\u5ea6\u3002","title":"\u5b9e\u73b0\u7ec6\u8282"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_6","text":"\u6df7\u5408\u751f\u6210 \uff1a\u89c4\u5219\u751f\u6210\u9ad8\u6548\u53ef\u63a7\uff0cQwen-Plus \u751f\u6210\u81ea\u7136\u771f\u5b9e\u3002 \u5206\u9636\u6bb5\u4fdd\u5b58 \uff1a\u6bcf 1500 \u6761\u4fdd\u5b58\u4e00\u6b21\uff0c\u652f\u6301\u65ad\u70b9\u6062\u590d\u3002 \u8fdb\u5ea6\u76d1\u63a7 \uff1a tqdm \u63d0\u4f9b\u76f4\u89c2\u53cd\u9988\uff0c\u4f18\u5316\u7528\u6237\u4f53\u9a8c\u3002","title":"\u8bf4\u660e"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_7","text":"\u8fd0\u884c\u811a\u672c\u65f6\uff0c\u8f93\u51fa\u7c7b\u4f3c\uff1a \u751f\u6210\u89c4\u5219\u901a\u7528\u77e5\u8bc6\u6570\u636e... Rule-based Generic: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [00:02<00:00, 750it/s] \u89c4\u5219\u901a\u7528\u77e5\u8bc6\uff1a\u5df2\u4fdd\u5b58 1500 \u6761\u6570\u636e\u5230 rule_generic_1500.json \u751f\u6210\u89c4\u5219\u4e13\u4e1a\u54a8\u8be2\u6570\u636e... Rule-based Professional: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [00:02<00:00, 700it/s] \u89c4\u5219\u4e13\u4e1a\u54a8\u8be2\uff1a\u5df2\u4fdd\u5b58 1500 \u6761\u6570\u636e\u5230 rule_professional_1500.json \u751f\u6210Qwen-Plus\u901a\u7528\u77e5\u8bc6\u6570\u636e... Qwen-based Generic: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [05:00<00:00, 5it/s] \u901a\u7528\u77e5\u8bc6\uff08\u89c4\u5219+Qwen\uff09\uff1a\u5df2\u4fdd\u5b58 3000 \u6761\u6570\u636e\u5230 generic_3000.json \u751f\u6210Qwen-Plus\u4e13\u4e1a\u54a8\u8be2\u6570\u636e... Qwen-based Professional: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1500/1500 [05:05<00:00, 4.9it/s] \u4e13\u4e1a\u54a8\u8be2\uff08\u89c4\u5219+Qwen\uff09\uff1a\u5df2\u4fdd\u5b58 3000 \u6761\u6570\u636e\u5230 professional_3000.json \u6700\u7ec8\u6570\u636e\u96c6\uff1a\u5df2\u4fdd\u5b58 6000 \u6761\u6570\u636e\u5230 training_dataset_hybrid_6000.json \u6210\u529f\u751f\u6210 6000 \u6761\u8bad\u7ec3\u6570\u636e\uff0c\u4fdd\u5b58\u5728 training_dataset_hybrid_6000.json \u6587\u4ef6\u4e2d\u3002","title":"\u6267\u884c\u793a\u4f8b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#12","text":"","title":"1.2 \u6570\u636e\u96c6\u751f\u6210\u6d41\u7a0b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_8","text":"\u89c4\u5219\u751f\u6210\uff083000 \u6761\uff09 \uff1a \u751f\u6210 1500 \u6761\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6570\u636e\uff0c\u4fdd\u5b58\u4e3a rule_generic_1500.json \u3002 \u751f\u6210 1500 \u6761\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u6570\u636e\uff0c\u4fdd\u5b58\u4e3a rule_professional_1500.json . \u4f7f\u7528\u6a21\u677f\u548c\u540c\u4e49\u8bcd\u66ff\u6362\uff0c\u786e\u4fdd\u591a\u6837\u6027\u3002 Qwen-Plus \u751f\u6210\uff083000 \u6761\uff09 \uff1a \u751f\u6210 1500 \u6761\u201c\u901a\u7528\u77e5\u8bc6\u201d\u6570\u636e\uff0c\u7d2f\u8ba1 3000 \u6761\u4fdd\u5b58\u4e3a generic_3000.json \u3002 \u751f\u6210 1500 \u6761\u201c\u4e13\u4e1a\u54a8\u8be2\u201d\u6570\u636e\uff0c\u7d2f\u8ba1 3000 \u6761\u4fdd\u5b58\u4e3a professional_3000.json . \u901a\u8fc7 Prompt \u63a7\u5236\u751f\u6210\u8d28\u91cf\u3002 \u6570\u636e\u6574\u5408 \uff1a \u5408\u5e76 6000 \u6761\u6570\u636e\uff0c\u968f\u673a\u6df7\u6d17\u3002 \u4fdd\u5b58\u4e3a training_dataset_hybrid_6000.json .","title":"\u751f\u6210\u6d41\u7a0b"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_9","text":"# core/query_classifier.py from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.pipeline import Pipeline import joblib class QueryClassifier : def train_model ( self ): with open ( \"training_dataset_hybrid_6000.json\" , \"r\" , encoding = \"utf-8\" ) as f : data = json . load ( f ) texts = [ item [ \"query\" ] for item in data ] labels = [ item [ \"label\" ] for item in data ] self . model = Pipeline ([ ( \"tfidf\" , TfidfVectorizer ()), ( \"classifier\" , MultinomialNB ()), ]) self . model . fit ( texts , labels ) joblib . dump ( self . model , \"query_classifier_model.pkl\" ) print ( \"\u6a21\u578b\u8bad\u7ec3\u5b8c\u6210\u5e76\u4fdd\u5b58\" )","title":"\u4ee3\u7801\u793a\u4f8b\uff08\u4f7f\u7528\u6570\u636e\u96c6\uff09"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#13","text":"","title":"1.3 \u6570\u636e\u96c6\u7279\u70b9\u4e0e\u4f18\u5316"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_10","text":"\u603b\u6570 \uff1a6000 \u6761\uff08\u201c\u901a\u7528\u77e5\u8bc6\u201d 3000 \u6761\uff0c\u201c\u4e13\u4e1a\u54a8\u8be2\u201d 3000 \u6761\uff09\u3002 \u6765\u6e90 \uff1a\u89c4\u5219\u751f\u6210 50%\uff083000 \u6761\uff09\uff0cQwen-Plus \u751f\u6210 50%\uff083000 \u6761\uff09\u3002 \u591a\u6837\u6027 \uff1a \u89c4\u5219\u751f\u6210\uff1a\u6a21\u677f\u548c\u540c\u4e49\u8bcd\u66ff\u6362\u8986\u76d6\u591a\u79cd\u573a\u666f\u3002 Qwen-Plus \u751f\u6210\uff1a\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u8d34\u8fd1\u771f\u5b9e\u7528\u6237\u8f93\u5165\u3002 \u4fdd\u5b58\u673a\u5236 \uff1a\u6bcf 1500 \u6761\u4fdd\u5b58\uff0c\u652f\u6301\u65ad\u70b9\u7eed\u4f20\u3002 \u53ef\u89c6\u5316 \uff1a tqdm \u8fdb\u5ea6\u6761\u63d0\u4f9b\u5b9e\u65f6\u53cd\u9988\u3002","title":"\u6570\u636e\u96c6\u7279\u70b9"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_11","text":"\u9ad8\u6548\u6027 \uff1a\u7b80\u5316\u751f\u6210\u6d41\u7a0b\uff0c\u89c4\u5219\u751f\u6210\u77ac\u65f6\u5b8c\u6210\u3002 \u53ef\u9760\u6027 \uff1a\u5206\u9636\u6bb5\u4fdd\u5b58\u786e\u4fdd\u6570\u636e\u5b89\u5168\u3002 \u5206\u7c7b\u6027\u80fd \uff1a\u5747\u8861\u6570\u636e\u96c6\u63d0\u5347 QueryClassifier \u51c6\u786e\u6027\u3002 \u7528\u6237\u4f53\u9a8c \uff1a\u8fdb\u5ea6\u6761\u548c\u4fdd\u5b58\u65e5\u5fd7\u589e\u5f3a\u4ea4\u4e92\u6027\u3002","title":"\u4f18\u5316\u6548\u679c"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%94%9F%E6%88%90%E4%B8%8E%E4%BC%98%E5%8C%96%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_12","text":"\u672c\u7ae0\u8282\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4f18\u5316\u540e\u7684 generate_query_dataset_hybrid.py \uff1a - \u529f\u80fd \uff1a\u6df7\u5408\u751f\u6210 6000 \u6761\u6570\u636e\uff0c\u89c4\u5219\u548c Qwen-Plus \u5404\u5360\u4e00\u534a\u3002 - \u5b9e\u73b0 \uff1a\u901a\u8fc7\u6a21\u677f\u751f\u6210 3000 \u6761\uff0cQwen-Plus \u751f\u6210 3000 \u6761\uff0c\u6bcf 1500 \u6761\u4fdd\u5b58\uff0c\u8fdb\u5ea6\u6761\u76d1\u63a7\u3002 - \u4f5c\u7528 \uff1a\u4e3a QueryClassifier \u63d0\u4f9b\u9ad8\u8d28\u91cf\u6570\u636e\uff0c\u4f18\u5316 EduRAG \u7cfb\u7edf\u5206\u7c7b\u80fd\u529b\u3002 \u5b66\u4e60\u8005\u638c\u63e1\u4e86\u9ad8\u6548\u7684\u6570\u636e\u751f\u6210\u548c\u4fdd\u5b58\u65b9\u6cd5\uff0c\u80fd\u591f\u4e3a RAG \u7cfb\u7edf\u63d0\u4f9b\u53ef\u9760\u652f\u6301\u3002","title":"\u7ae0\u8282\u603b\u7ed3"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html","text":"\u6587\u6863\u89e3\u6790\u4e0e\u6587\u672c\u5207\u5206\u5229\u5668 \u00b6 \u5b66\u4e60\u76ee\u6807 \u00b6 \u638c\u63e1\u7cfb\u7edf\u4e2d\u7528\u4e8e\u89e3\u6790\u4e0d\u540c\u6587\u6863\u683c\u5f0f\uff08PDF, DOCX, PPTX, Images\uff09\u7684\u6838\u5fc3\u5de5\u5177\u3002 \u7406\u89e3\u5149\u5b66\u5b57\u7b26\u8bc6\u522b\uff08OCR\uff09\u5de5\u5177 RapidOCR \u5982\u4f55\u96c6\u6210\u5e76\u5e94\u7528\u4e8e\u6587\u6863\u89e3\u6790\u6d41\u7a0b\u3002 \u4e86\u89e3\u7cfb\u7edf\u4e2d\u63d0\u4f9b\u7684\u4e24\u79cd\u6587\u672c\u5207\u5206\u5de5\u5177\uff1a\u57fa\u4e8e\u89c4\u5219\u7684\u9012\u5f52\u5207\u5206\u5668\u548c\u57fa\u4e8e\u6a21\u578b\u7684\u8bed\u4e49\u5207\u5206\u5668\u3002 \u719f\u6089 edu_document_loaders \u548c edu_text_spliter \u76ee\u5f55\u4e0b\u5404\u811a\u672c\u7684\u5177\u4f53\u5b9e\u73b0\u548c\u529f\u80fd\u3002 \u6587\u6863\u89e3\u6790\u5de5\u5177 ( edu_document_loaders/ ) \u00b6 \u4e3a\u4e86\u4ece\u5404\u79cd\u5e38\u89c1\u7684 IT \u6559\u80b2\u6587\u6863\u683c\u5f0f\u4e2d\u63d0\u53d6\u4fe1\u606f\uff0c\u7cfb\u7edf\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u4e13\u95e8\u7684\u52a0\u8f7d\u5668\uff08Loaders\uff09\u3002\u8fd9\u4e9b\u52a0\u8f7d\u5668\u4e0d\u4ec5\u80fd\u63d0\u53d6\u6587\u6863\u4e2d\u7684\u539f\u751f\u6587\u672c\uff0c\u8fd8\u80fd\u5229\u7528 OCR \u6280\u672f\u8bc6\u522b\u5e76\u63d0\u53d6\u56fe\u7247\u4e2d\u5d4c\u5165\u7684\u6587\u5b57\u3002\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea Langchain \u7684 BaseLoader \uff0c\u5e76\u5b9e\u73b0\u4e86 lazy_load \u65b9\u6cd5\u6765\u6309\u9700\u751f\u6210 Document \u5bf9\u8c61\u3002 OCR \u5f15\u64ce\u6838\u5fc3 (edu_ocr.py) \u00b6 \u8be5\u811a\u672c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u5316\u7684\u51fd\u6570 get_ocr() \u6765\u521d\u59cb\u5316\u548c\u83b7\u53d6 OCR \u8bc6\u522b\u5f15\u64ce\u5b9e\u4f8b\u3002\u8fd9\u662f\u6240\u6709\u9700\u8981\u56fe\u7247\u6587\u5b57\u8bc6\u522b\u529f\u80fd\u7684\u52a0\u8f7d\u5668\u7684\u57fa\u7840\u3002 \u529f\u80fd : \u521d\u59cb\u5316 RapidOCR \u5b9e\u4f8b\u3002 \u7279\u70b9 \uff1a \u5f15\u64ce\u9009\u62e9 : \u4f18\u5148\u5c1d\u8bd5 rapidocr_paddle (\u5229\u7528 PaddlePaddle \u63a8\u7406\uff0c\u63a8\u8350 GPU \u73af\u5883)\uff0c\u82e5\u5931\u8d25\u5219\u56de\u9000\u5230 rapidocr_onnxruntime (\u5229\u7528 ONNX Runtime \u63a8\u7406\uff0c\u9002\u5408 CPU \u73af\u5883\u6216\u9700\u8981\u8de8\u5e73\u53f0\u90e8\u7f72\u7684\u573a\u666f)\u3002 \u53c2\u6570\u63a7\u5236 : \u5141\u8bb8\u901a\u8fc7 use_cuda \u53c2\u6570\u63a7\u5236\u662f\u5426\u542f\u7528 GPU \u52a0\u901f\uff08\u5982\u679c\u4f7f\u7528 PaddlePaddle \u5f15\u64ce\uff09\u3002 # edu_document_loaders/edu_ocr.py \u6e90\u7801 from typing import TYPE_CHECKING ''' paddleocr\uff1a\u89e3\u6790\u56fe\u7247\u4e2d\u7684\u6587\u5b57\uff0c\u4e5f\u53ef\u4ee5\u8fdb\u884c\u8868\u683c\u8bc6\u522b rapidocr_paddle \u548c rapidocr_onnxruntime \u4e24\u79cd\u5bfc\u5165\u65b9\u5f0f \u4e3b\u8981\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u6240\u4f7f\u7528\u7684\u63a8\u7406\u5f15\u64ce\u548c\u786c\u4ef6\u652f\u6301 \u9009\u62e9\u54ea\u79cd\u65b9\u5f0f\u6700\u5408\u9002\u53d6\u51b3\u4e8e\u4f60\u7684\u786c\u4ef6\u73af\u5883\u548c\u6027\u80fd\u9700\u6c42\u3002 \u5f53\u4f60\u6709 GPU \u4e14\u8ffd\u6c42\u901f\u5ea6\u65f6\uff1a\u4f7f\u7528 rapidocr_paddle\u3002PaddlePaddle \u539f\u751f\u652f\u6301\u5728 GPU \u4e0a\u63a8\u7406 PaddleOCR \u6a21\u578b\uff0c\u901f\u5ea6\u66f4\u5feb\u3002 \u5f53\u53ea\u6709 CPU \u4e14\u9700\u8981\u9ad8\u6548\u63a8\u7406\u65f6\uff1a\u4f7f\u7528 rapidocr_onnxruntime\u3002\u5b83\u5728 CPU \u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u8d44\u6e90\u5360\u7528\u8f83\u4f4e. ''' def get_ocr ( use_cuda : bool = True ) -> \"RapidOCR\" : try : from rapidocr_paddle import RapidOCR ''' det_use_cuda=True\uff1a\u542f\u7528\u68c0\u6d4b\u6a21\u578b\u7684GPU\u52a0\u901f\u3002cls_use_cuda=True\uff1a\u542f\u7528\u5206\u7c7b\u6a21\u578b\u7684GPU\u52a0\u901f\u3002rec_use_cuda=True\uff1a\u542f\u7528\u8bc6\u522b\u6a21\u578b\u7684GPU\u52a0\u901f\u3002 ''' ocr = RapidOCR ( det_use_cuda = use_cuda , cls_use_cuda = use_cuda , rec_use_cuda = use_cuda ) except ImportError : # from rapidocr_onnxruntime import RapidOCR ocr = RapidOCR () return ocr PDF \u6587\u6863\u52a0\u8f7d\u5668 (edu_pdfloader.py) \u00b6 OCRPDFLoader \u7c7b\u4e13\u95e8\u7528\u4e8e\u5904\u7406 PDF \u6587\u4ef6\u3002 \u529f\u80fd : \u89e3\u6790 PDF\uff0c\u63d0\u53d6\u6587\u672c\u548c\u56fe\u7247\u4e2d\u7684\u6587\u5b57\u3002 \u4f9d\u8d56 : PyMuPDF (fitz), Pillow , numpy , opencv-python , tqdm \u4ee5\u53ca edu_ocr.py \u3002 \u6838\u5fc3\u903b\u8f91 : \u4f7f\u7528 fitz.open() \u6253\u5f00 PDF\u3002 \u9010\u9875 ( page ) \u5904\u7406\u3002 \u4f7f\u7528 page.get_text() \u63d0\u53d6\u539f\u751f\u6587\u672c\u3002 \u4f7f\u7528 page.get_image_info(xrefs=True) \u83b7\u53d6\u9875\u9762\u4e0a\u7684\u56fe\u7247\u4fe1\u606f\u3002 OCR \u5e94\u7528 : \u5bf9\u83b7\u53d6\u5230\u7684\u56fe\u7247\uff0c\u68c0\u67e5\u5176\u5c3a\u5bf8\u662f\u5426\u8d85\u8fc7\u9884\u8bbe\u9608\u503c PDF_OCR_THRESHOLD \uff08\u9ed8\u8ba4\u4e3a\u9875\u9762\u5bbd\u9ad8\u7684 60%\uff09\u3002\u4ec5\u5bf9\u5927\u4e8e\u9608\u503c\u7684\u56fe\u7247\u6267\u884c OCR\u3002 \u5904\u7406\u9875\u9762\u65cb\u8f6c ( page.rotation )\uff0c\u786e\u4fdd OCR \u65f6\u56fe\u50cf\u65b9\u5411\u6b63\u786e\u3002 \u8c03\u7528 get_ocr() \u83b7\u53d6\u7684 OCR \u5b9e\u4f8b\u8bc6\u522b\u56fe\u7247\u6587\u5b57\u3002 \u5408\u5e76\u539f\u751f\u6587\u672c\u548c OCR \u7ed3\u679c\u3002 \u4f7f\u7528 tqdm \u663e\u793a\u5904\u7406\u8fdb\u5ea6\u3002 # edu_document_loaders/edu_pdfloader.py \u6e90\u7801 import cv2 import fitz # pyMuPDF\u91cc\u9762\u7684fitz\u5305\uff0c\u4e0d\u8981\u4e0epip install fitz\u6df7\u6dc6 import numpy as np from PIL import Image from tqdm import tqdm from typing import Iterator from edu_ocr import get_ocr from langchain_core.documents import Document from langchain_core.document_loaders import BaseLoader from langchain.text_splitter import CharacterTextSplitter # PDF OCR \u63a7\u5236\uff1a\u53ea\u5bf9\u5bbd\u9ad8\u8d85\u8fc7\u9875\u9762\u4e00\u5b9a\u6bd4\u4f8b\uff08\u56fe\u7247\u5bbd/\u9875\u9762\u5bbd\uff0c\u56fe\u7247\u9ad8/\u9875\u9762\u9ad8\uff09\u7684\u56fe\u7247\u8fdb\u884c OCR\u3002 # \u8fd9\u6837\u53ef\u4ee5\u907f\u514d PDF \u4e2d\u4e00\u4e9b\u5c0f\u56fe\u7247\u7684\u5e72\u6270\uff0c\u63d0\u9ad8\u975e\u626b\u63cf\u7248 PDF \u5904\u7406\u901f\u5ea6 PDF_OCR_THRESHOLD = ( 0.6 , 0.6 ) class OCRPDFLoader ( BaseLoader ): \"\"\"An example document loader that reads a file line by line.\"\"\" def __init__ ( self , file_path : str ) -> None : \"\"\"Initialize the loader with a file path. Args: file_path: The path to the file to load. \"\"\" self . file_path = file_path def lazy_load ( self ) -> Iterator [ Document ]: # <-- Does not take any arguments \"\"\"A lazy loader that reads a file line by line. When you're implementing lazy load methods, you should use a generator to yield documents one by one. \"\"\" line = self . pdf2text () yield Document ( page_content = line , metadata = { \"source\" : self . file_path }) def pdf2text ( self ): ocr = get_ocr () # \u6253\u5f00pdf\u6587\u4ef6 doc = fitz . open ( self . file_path ) ## \u83b7\u53d6\u9875\u6570 # print(f'len(doc)-->{len(doc)}') resp = \"\" b_unit = tqdm ( total = doc . page_count , desc = \"OCRPDFLoader context page index: 0\" ) for i , page in enumerate ( doc ): b_unit . set_description ( \"OCRPDFLoader context page index: {} \" . format ( i )) b_unit . refresh () # \u63d0\u53d6\u6587\u672c\uff1a\u9ed8\u8ba4\u4f7f\u7528 \"text\" \u6a21\u5f0f\u63d0\u53d6\u6587\u672c\u3002 text = page . get_text ( \"\" ) resp += text + \" \\n \" # print(f'resp-->{resp}') # \u83b7\u53d6\u56fe\u7247\uff1a\u83b7\u5f97\u6240\u6709\u663e\u793a\u7684\u56fe\u50cf\u7684\u5143\u4fe1\u606f\u5217\u8868\u3002 # \u5b83\u9002\u7528\u4e8e\u6240\u6709\u6587\u6863\u7c7b\u578b\uff0c\u4e0d\u4ec5\u9650\u4e8e PDF\u3002 img_list = page . get_image_info ( xrefs = True ) # print(f'img_list--\u300b{img_list}') # print(f'img_list--\u300b{len(img_list)}') for img in img_list : # xref\u4e00\u79cd\u7f16\u53f7\uff0c\u6307\u5411\u8be5\u56fe\u50cf\u5bf9\u8c61\u5728PDF\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7f16\u53f7\u5feb\u901f\u5b9a\u4f4d\u548c\u63d0\u53d6\u56fe\u50cf\u6570\u636e\u3002 if xref := img . get ( \"xref\" ): # \u56fe\u50cf\u5728\u9875\u9762\u4e0a\u7684\u4f4d\u7f6e\u548c\u5c3a\u5bf8\u3002 bbox = img [ \"bbox\" ] # \u68c0\u67e5\u56fe\u7247\u5c3a\u5bf8\u662f\u5426\u8d85\u8fc7\u8bbe\u5b9a\u7684\u9608\u503c # if ((bbox[2] - bbox[0]) / (page.rect.width) < PDF_OCR_THRESHOLD[0] # or (bbox[3] - bbox[1]) / (page.rect.height) < PDF_OCR_THRESHOLD[1]): # continue pix = fitz . Pixmap ( doc , xref ) # print(f'page.rotation-->{page.rotation}') if int ( page . rotation ) != 0 : # \u5982\u679cPage\u6709\u65cb\u8f6c\u89d2\u5ea6\uff0c\u5219\u65cb\u8f6c\u56fe\u7247 img_array = np . frombuffer ( pix . samples , dtype = np . uint8 ) . reshape ( pix . height , pix . width , - 1 ) tmp_img = Image . fromarray ( img_array ) ori_img = cv2 . cvtColor ( np . array ( tmp_img ), cv2 . COLOR_RGB2BGR ) rot_img = self . rotate_img ( img = ori_img , angle = 360 - page . rotation ) img_array = cv2 . cvtColor ( rot_img , cv2 . COLOR_RGB2BGR ) else : img_array = np . frombuffer ( pix . samples , dtype = np . uint8 ) . reshape ( pix . height , pix . width , - 1 ) # result\uff1a\u5305\u542b\u4e86\u56fe\u50cf\u4e2d\u68c0\u6d4b\u5230\u7684\u6240\u6709\u6587\u672c\u6846\u7684\u4f4d\u7f6e\u3001\u6587\u672c\u5185\u5bb9\u548c\u7f6e\u4fe1\u5ea6\u4fe1\u606f\u3002 # _\uff1a\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u4e86\u65f6\u95f4\u6570\u636e\u7684\u5217\u8868\uff0c\u53ef\u4ee5\u7528\u4e8e\u4f18\u5316\u6a21\u578b\u8fd0\u884c\u901f\u5ea6\u3002 result , _ = ocr ( img_array ) if result : ocr_result = [ line [ 1 ] for line in result ] resp += \" \\n \" . join ( ocr_result ) # \u66f4\u65b0\u8fdb\u5ea6 b_unit . update ( 1 ) return resp if __name__ == '__main__' : pdf_loader = OCRPDFLoader ( file_path = \"./data/Python\u673a\u5668\u5b66\u4e60\u57fa\u7840\u6559\u7a0b.pdf\" ) doc = pdf_loader . load () print ( type ( doc )) print ( doc ) # text_spliter = CharacterTextSplitter(chunk_size=300, chunk_overlap=20) # result = text_spliter.split_documents(doc) # print(len(result)) # print(result[0]) (\u6ce8\u610f\uff1a\u4e0a\u8ff0\u4ee3\u7801\u4e2d self.rotate_img \u65b9\u6cd5\u672a\u5728\u63d0\u4f9b\u7684\u4ee3\u7801\u6bb5\u4e2d\u5b9a\u4e49\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u9700\u8981\u786e\u4fdd\u8be5\u65b9\u6cd5\u5b58\u5728\u6216\u79fb\u9664\u76f8\u5173\u8c03\u7528) Word \u6587\u6863\u52a0\u8f7d\u5668 (edu_docloader.py) \u00b6 OCRDOCLoader \u7c7b\u7528\u4e8e\u5904\u7406 .docx \u6587\u4ef6\u3002 \u529f\u80fd : \u89e3\u6790 DOCX \u6587\u4ef6\uff0c\u63d0\u53d6\u6bb5\u843d\u3001\u8868\u683c\u6587\u672c\uff0c\u5e76\u5bf9\u5d4c\u5165\u7684\u56fe\u7247\u8fdb\u884c OCR\u3002 \u4f9d\u8d56 : python-docx , Pillow , numpy , tqdm \u4ee5\u53ca edu_ocr.py \u3002 \u6838\u5fc3\u903b\u8f91 : \u4f7f\u7528 docx.Document() \u6253\u5f00 DOCX \u6587\u4ef6\u3002 \u5b9a\u4e49 iter_block_items \u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u7edf\u4e00\u904d\u5386\u6587\u6863\u4e2d\u7684\u6bb5\u843d ( Paragraph ) \u548c\u8868\u683c ( Table ) \u5757\u3002 \u904d\u5386\u6240\u6709\u5757\uff1a \u5982\u679c\u662f\u6bb5\u843d\uff0c\u63d0\u53d6 block.text \u3002\u540c\u65f6\uff0c\u4f7f\u7528 XPath ( .//pic:pic , .//a:blip/@r:embed ) \u67e5\u627e\u5e76\u63d0\u53d6\u6bb5\u843d\u5185\u5d4c\u5165\u7684\u56fe\u7247\u3002\u5bf9\u63d0\u53d6\u7684\u56fe\u7247\u6267\u884c OCR\u3002 \u5982\u679c\u662f\u8868\u683c\uff0c\u904d\u5386\u6240\u6709\u5355\u5143\u683c ( cell )\uff0c\u63d0\u53d6\u5355\u5143\u683c\u5185\u6bb5\u843d\u7684\u6587\u672c\u3002 \u5408\u5e76\u6240\u6709\u63d0\u53d6\u7684\u6587\u672c\u548c OCR \u7ed3\u679c\u3002 \u4f7f\u7528 tqdm \u663e\u793a\u5904\u7406\u8fdb\u5ea6\u3002 # edu_document_loaders/edu_docloader.py \u6e90\u7801 from typing import Iterator from .edu_ocr import get_ocr # \u5bfc\u5165\u5fc5\u8981\u7684\u6a21\u5757 from tqdm import tqdm from docx.table import _Cell , Table # \u7528\u4e8e\u5904\u7406\u8868\u683c from docx.oxml.table import CT_Tbl # \u7528\u4e8e\u5904\u7406\u8868\u683cXML\u7ed3\u6784 from docx.oxml.text.paragraph import CT_P # \u7528\u4e8e\u5904\u7406\u6bb5\u843dXML\u7ed3\u6784 from docx.text.paragraph import Paragraph # \u7528\u4e8e\u5904\u7406\u6bb5\u843d\u5185\u5bb9 from docx import Document as Docu1 from docx.document import Document as Docu2 from docx import ImagePart # \u7528\u4e8e\u5904\u7406Word\u6587\u6863\u548c\u56fe\u7247 from PIL import Image # \u7528\u4e8e\u5904\u7406\u56fe\u7247 from io import BytesIO # \u7528\u4e8e\u5c06\u5b57\u8282\u6d41\u8f6c\u6362\u4e3a\u56fe\u7247 import numpy as np # \u7528\u4e8e\u5904\u7406\u6570\u7ec4 from langchain_core.documents import Document from langchain_core.document_loaders import BaseLoader class OCRDOCLoader ( BaseLoader ): \"\"\"An example document loader that reads a file line by line.\"\"\" def __init__ ( self , filepath : str ) -> None : \"\"\"Initialize the loader with a file path. Args: filepath_path: The path to the filepath to load. \"\"\" self . filepath = filepath def lazy_load ( self ) -> Iterator [ Document ]: # <-- Does not take any arguments \"\"\"A lazy loader that reads a file line by line. When you're implementing lazy load methods, you should use a generator to yield documents one by one. \"\"\" line = self . doc2text ( self . filepath ) yield Document ( page_content = line , metadata = { \"source\" : self . filepath }) def doc2text ( self , filepath ): # \u521b\u5efaOCR\u8bc6\u522b\u5bf9\u8c61 ocr = get_ocr () # print(f'ocr--\u300b{ocr}') # \u8f93\u51faOCR\u5bf9\u8c61\u4fe1\u606f # \u8bfb\u53d6Word\u6587\u6863 doc = Docu1 ( filepath ) # print(f'doc-->{doc}') # \u8f93\u51fa\u8bfb\u53d6\u5230\u7684\u6587\u6863\u4fe1\u606f # \u5b9a\u4e49\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u7528\u4e8e\u5b58\u50a8\u6700\u7ec8\u7684\u6587\u672c\u5185\u5bb9 resp = \"\" # \u5b9a\u4e49\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u7528\u4e8e\u904d\u5386\u6587\u6863\u4e2d\u7684\u5757\uff08\u6bb5\u843d\u3001\u8868\u683c\u7b49\uff09 def iter_block_items ( parent ): # \u5224\u65adparent\u5bf9\u8c61\u7c7b\u578b\uff0c\u5982\u679c\u662fDocument\u7c7b\u578b\uff0c\u5219\u83b7\u53d6\u5176\u5143\u7d20 if isinstance ( parent , Docu2 ): parent_elm = parent . element . body # \u5982\u679c\u662f\u8868\u683c\u5355\u5143\u683c\u7c7b\u578b\uff0c\u83b7\u53d6\u5355\u5143\u683c\u7684XML\u5143\u7d20 elif isinstance ( parent , _Cell ): parent_elm = parent . _tc else : raise ValueError ( \"OCRDOCLoader parse fail\" ) # \u5982\u679c\u90fd\u4e0d\u662f\uff0c\u5219\u629b\u51fa\u9519\u8bef # print(f'parent_elm--\u300b{parent_elm}') # print('*'*80) # \u904d\u5386parent_elm\u4e2d\u7684\u6240\u6709\u5b50\u5143\u7d20 for child in parent_elm . iterchildren (): # print(f'child--\u300b{child}') if isinstance ( child , CT_P ): # \u5982\u679c\u662f\u6bb5\u843d\u7c7b\u578b yield Paragraph ( child , parent ) # \u8fd4\u56de\u6bb5\u843d elif isinstance ( child , CT_Tbl ): # \u5982\u679c\u662f\u8868\u683c\u7c7b\u578b yield Table ( child , parent ) # \u8fd4\u56de\u8868\u683c # print(f'doc.paragraphs-->{doc.paragraphs}') # print(f'doc.tables-->{doc.tables}') # \u521b\u5efa\u8fdb\u5ea6\u6761\uff0c\u8868\u793a\u6587\u6863\u5904\u7406\u7684\u8fdb\u5ea6 b_unit = tqdm ( total = len ( doc . paragraphs ) + len ( doc . tables ), desc = \"OCRDOCLoader block index: 0\" ) # \u904d\u5386\u6587\u6863\u4e2d\u7684\u6240\u6709\u5757\uff08\u6bb5\u843d\u548c\u8868\u683c\uff09 for i , block in enumerate ( iter_block_items ( doc )): # \u66f4\u65b0\u8fdb\u5ea6\u6761\u63cf\u8ff0 b_unit . set_description ( \"OCRDOCLoader block index: {} \" . format ( i )) b_unit . refresh () # \u5237\u65b0\u8fdb\u5ea6\u6761 # \u5982\u679c\u5757\u662f\u6bb5\u843d\u7c7b\u578b if isinstance ( block , Paragraph ): resp += block . text . strip () + \" \\n \" # \u5c06\u6bb5\u843d\u6587\u672c\u52a0\u5165\u5230\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d # \u83b7\u53d6\u6bb5\u843d\u4e2d\u7684\u6240\u6709\u56fe\u7247 images = block . _element . xpath ( './/pic:pic' ) for image in images : # \u904d\u5386\u56fe\u7247\uff0c\u83b7\u53d6\u56fe\u7247ID for img_id in image . xpath ( './/a:blip/@r:embed' ): part = doc . part . related_parts [ img_id ] # \u6839\u636e\u56fe\u7247ID\u83b7\u53d6\u56fe\u7247\u5bf9\u8c61 if isinstance ( part , ImagePart ): # \u5982\u679c\u8be5\u90e8\u5206\u662f\u56fe\u7247 # BytesIO \u662f Python \u5185\u7f6e\u7684 io \u6a21\u5757\u4e2d\u7684\u4e00\u4e2a\u7c7b\uff0c\u7528\u4e8e\u5728\u5185\u5b58\u4e2d\u8bfb\u5199\u4e8c\u8fdb\u5236\u6570\u636e # part._blob \u901a\u5e38\u8868\u793a\u4ece\u67d0\u4e2a\u6587\u6863\uff08\u5982 DOCX \u6587\u4ef6\uff09\u4e2d\u63d0\u53d6\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\u3002 image = Image . open ( BytesIO ( part . _blob )) # \u6253\u5f00\u56fe\u7247 result , _ = ocr ( np . array ( image )) # \u4f7f\u7528OCR\u8bc6\u522b\u56fe\u7247\u4e2d\u7684\u6587\u5b57 if result : # \u5982\u679c\u8bc6\u522b\u7ed3\u679c\u4e0d\u4e3a\u7a7a ocr_result = [ line [ 1 ] for line in result ] # \u63d0\u53d6\u8bc6\u522b\u51fa\u7684\u6587\u5b57 resp += \" \\n \" . join ( ocr_result ) # \u5c06\u8bc6\u522b\u7ed3\u679c\u52a0\u5165\u8fd4\u56de\u6587\u672c\u4e2d # \u5982\u679c\u5757\u662f\u8868\u683c\u7c7b\u578b elif isinstance ( block , Table ): # \u904d\u5386\u8868\u683c\u4e2d\u7684\u6240\u6709\u884c\u548c\u5355\u5143\u683c for row in block . rows : for cell in row . cells : for paragraph in cell . paragraphs : resp += paragraph . text . strip () + \" \\n \" # \u5c06\u5355\u5143\u683c\u5185\u7684\u6bb5\u843d\u6587\u672c\u52a0\u5165\u8fd4\u56de\u6587\u672c\u4e2d # \u66f4\u65b0\u8fdb\u5ea6\u6761 b_unit . update ( 1 ) # \u8fd4\u56de\u63d0\u53d6\u7684\u6587\u672c\u5185\u5bb9 return resp if __name__ == '__main__' : docx_loader = OCRDOCLoader ( filepath = './data/b.docx' ) doc = docx_loader . load () print ( doc ) PowerPoint \u6587\u6863\u52a0\u8f7d\u5668 (edu_pptloader.py) \u00b6 OCRPPTLoader \u7c7b\u7528\u4e8e\u5904\u7406 .ppt \u548c .pptx \u6587\u4ef6\u3002 \u529f\u80fd : \u89e3\u6790 PPT/PPTX \u6587\u4ef6\uff0c\u63d0\u53d6\u5f62\u72b6\uff08\u6587\u672c\u6846\u3001\u8868\u683c\uff09\u3001\u56fe\u7247\u4e2d\u7684\u6587\u672c\u3002 \u4f9d\u8d56 : python-pptx , Pillow , numpy , tqdm \u4ee5\u53ca edu_ocr.py \u3002 \u6838\u5fc3\u903b\u8f91 : \u4f7f\u7528 pptx.Presentation() \u6253\u5f00\u6f14\u793a\u6587\u7a3f\u3002 \u9010\u5f20\u5e7b\u706f\u7247 ( slide ) \u5904\u7406\u3002 \u987a\u5e8f\u5904\u7406 : \u5c06\u5e7b\u706f\u7247\u4e0a\u7684\u5f62\u72b6 ( shape ) \u6309\u89c6\u89c9\u987a\u5e8f\uff08 top , left \u5750\u6807\uff09\u6392\u5e8f\u3002 \u5b9a\u4e49 extract_text \u9012\u5f52\u51fd\u6570\u5904\u7406\u5355\u4e2a\u5f62\u72b6\uff1a \u63d0\u53d6\u6587\u672c\u6846 ( shape.has_text_frame ) \u7684\u6587\u672c\u3002 \u63d0\u53d6\u8868\u683c ( shape.has_table ) \u5185\u6240\u6709\u5355\u5143\u683c\u7684\u6587\u672c\u3002 \u5982\u679c\u5f62\u72b6\u662f\u56fe\u7247 ( shape.shape_type == 13 )\uff0c\u63d0\u53d6\u56fe\u7247\u6570\u636e ( shape.image.blob )\uff0c\u6267\u884c OCR\u3002 \u5982\u679c\u5f62\u72b6\u662f\u7ec4\u5408 ( shape.shape_type == 6 )\uff0c\u9012\u5f52\u8c03\u7528 extract_text \u5904\u7406\u5176\u5305\u542b\u7684\u5b50\u5f62\u72b6\u3002 \u904d\u5386\u6392\u5e8f\u540e\u7684\u5f62\u72b6\uff0c\u8c03\u7528 extract_text \u3002 \u5408\u5e76\u6240\u6709\u63d0\u53d6\u7684\u6587\u672c\u548c OCR \u7ed3\u679c\u3002 \u4f7f\u7528 tqdm \u663e\u793a\u5904\u7406\u8fdb\u5ea6\u3002 # edu_document_loaders/edu_pptloader.py \u6e90\u7801 from typing import Iterator from edu_ocr import get_ocr from langchain_core.documents import Document from langchain_core.document_loaders import BaseLoader from pptx import Presentation from PIL import Image import numpy as np from io import BytesIO from tqdm import tqdm class OCRPPTLoader ( BaseLoader ): \"\"\"An example document loader that reads a file line by line.\"\"\" def __init__ ( self , filepath : str ) -> None : \"\"\"Initialize the loader with a file path. Args: filepath: The path to the ppt to load. \"\"\" self . filepath = filepath def lazy_load ( self ) -> Iterator [ Document ]: # <-- Does not take any arguments \"\"\"A lazy loader that reads a file line by line. When you're implementing lazy load methods, you should use a generator to yield documents one by one. \"\"\" line = self . ppt2text ( self . filepath ) yield Document ( page_content = line , metadata = { \"source\" : self . filepath }) def ppt2text ( self , filepath ): # \u6253\u5f00\u6307\u5b9a\u8def\u5f84\u7684 PowerPoint \u6587\u4ef6 prs = Presentation ( filepath ) print ( f 'prs--> { prs } ' ) # \u83b7\u53d6 OCR \u529f\u80fd\u7684\u5b9e\u4f8b ocr = get_ocr () # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u5b58\u50a8\u63d0\u53d6\u7684\u6587\u672c\u5185\u5bb9 resp = \"\" def extract_text ( shape ): # nonlocal\u6307\u660eresp\u975e\u5168\u5c40\u975e\u5c40\u90e8\uff0c\u800c\u662f\u5916\u90e8\u5d4c\u5957\u51fd\u6570\u4e2d\u7684\u53d8\u91cf\uff0c # \u5141\u8bb8\u5185\u90e8\u51fd\u6570\u8bbf\u95ee\u548c\u4fee\u6539\u5916\u90e8\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cfresp nonlocal resp # \u68c0\u67e5\u5f62\u72b6\u662f\u5426\u6709\u6587\u672c\u6846 if shape . has_text_frame : # \u5c06\u6587\u672c\u6846\u4e2d\u7684\u6587\u672c\u6dfb\u52a0\u5230resp\u4e2d\uff0c\u5e76\u53bb\u6389\u524d\u540e\u7a7a\u683c resp += shape . text . strip () + \" \\n \" # \u68c0\u67e5\u5f62\u72b6\u662f\u5426\u4e3a\u8868\u683c if shape . has_table : # \u904d\u5386\u8868\u683c\u7684\u6bcf\u4e00\u884c for row in shape . table . rows : # \u904d\u5386\u6bcf\u4e00\u884c\u4e2d\u7684\u6bcf\u4e2a\u5355\u5143\u683c for cell in row . cells : # \u904d\u5386\u5355\u5143\u683c\u4e2d\u7684\u6bcf\u4e2a\u6bb5\u843d for paragraph in cell . text_frame . paragraphs : # \u5c06\u5355\u5143\u683c\u4e2d\u7684\u6587\u672c\u6dfb\u52a0\u5230resp\u4e2d\uff0c\u5e76\u53bb\u6389\u524d\u540e\u7a7a\u683c resp += paragraph . text . strip () + \" \\n \" # \u68c0\u67e5\u5f62\u72b6\u662f\u5426\u4e3a\u56fe\u7247\uff08shape_type == 13\uff09 if shape . shape_type == 13 : # 13 \u8868\u793a\u56fe\u7247 # \u4f7f\u7528 BytesIO \u6253\u5f00\u56fe\u7247\u6570\u636e\u5e76\u8f6c\u6362\u4e3a\u56fe\u50cf\u5bf9\u8c61 image = Image . open ( BytesIO ( shape . image . blob )) # \u4f7f\u7528 OCR \u5904\u7406\u56fe\u50cf\u5e76\u83b7\u53d6\u7ed3\u679c result , _ = ocr ( np . array ( image )) if result : # \u5982\u679c OCR \u6709\u7ed3\u679c # \u63d0\u53d6 OCR \u7ed3\u679c\u4e2d\u7684\u6587\u672c\u884c ocr_result = [ line [ 1 ] for line in result ] # \u5c06 OCR \u63d0\u53d6\u7684\u6587\u672c\u6dfb\u52a0\u5230resp\u4e2d\uff0c\u4ee5\u6362\u884c\u5206\u9694 resp += \" \\n \" . join ( ocr_result ) # \u68c0\u67e5\u5f62\u72b6\u662f\u5426\u4e3a\u7ec4\u5408\u5f62\u72b6\uff08shape_type == 6\uff09 elif shape . shape_type == 6 : # 6 \u8868\u793a\u7ec4\u5408 # \u904d\u5386\u7ec4\u5408\u5f62\u72b6\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5f62\u72b6\uff0c\u9012\u5f52\u8c03\u7528extract_text\u51fd\u6570 for child_shape in shape . shapes : extract_text ( child_shape ) # \u521b\u5efa\u4e00\u4e2a\u8fdb\u5ea6\u6761\uff0c\u7528\u4e8e\u663e\u793a\u5e7b\u706f\u7247\u5904\u7406\u8fdb\u5ea6\uff0c\u521d\u59cb\u603b\u6570\u4e3a\u5e7b\u706f\u7247\u6570\u91cf b_unit = tqdm ( total = len ( prs . slides ), desc = \"OCRPPTLoader slide index: 1\" ) # \u904d\u5386\u6240\u6709\u5e7b\u706f\u7247 for slide_number , slide in enumerate ( prs . slides , start = 1 ): # \u66f4\u65b0\u8fdb\u5ea6\u6761\u63cf\u8ff0\uff0c\u663e\u793a\u5f53\u524d\u5904\u7406\u7684\u5e7b\u706f\u7247\u7d22\u5f15 b_unit . set_description ( \"OCRPPTLoader slide index: {} \" . format ( slide_number )) b_unit . refresh () # \u5237\u65b0\u8fdb\u5ea6\u6761\u663e\u793a # \u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u5bf9\u5f62\u72b6\u8fdb\u884c\u6392\u5e8f\u904d\u5386 sorted_shapes = sorted ( slide . shapes , key = lambda x : ( x . top , x . left )) for shape in sorted_shapes : extract_text ( shape ) # \u8c03\u7528extract_text\u51fd\u6570\u63d0\u53d6\u5f53\u524d\u5f62\u72b6\u7684\u6587\u672c\u5185\u5bb9 b_unit . update ( 1 ) # \u66f4\u65b0\u8fdb\u5ea6\u6761\uff0c\u8868\u793a\u5904\u7406\u4e86\u4e00\u5f20\u5e7b\u706f\u7247 return resp # \u8fd4\u56de\u63d0\u53d6\u5230\u7684\u6240\u6709\u6587\u672c\u5185\u5bb9 if __name__ == '__main__' : img_loader = OCRPPTLoader ( filepath = './data/01.pptx' ) doc = img_loader . load () print ( doc ) \u56fe\u50cf\u6587\u4ef6\u52a0\u8f7d\u5668 (edu_imgloader.py) \u00b6 OCRIMGLoader \u7c7b\u7528\u4e8e\u76f4\u63a5\u5904\u7406\u56fe\u50cf\u6587\u4ef6\uff08\u5982 .png , .jpg \uff09\u3002 \u529f\u80fd : \u5bf9\u5355\u4e2a\u56fe\u50cf\u6587\u4ef6\u6267\u884c OCR\u3002 \u4f9d\u8d56 : Pillow , numpy \u4ee5\u53ca edu_ocr.py \u3002 \u6838\u5fc3\u903b\u8f91 : \u63a5\u6536\u56fe\u50cf\u6587\u4ef6\u8def\u5f84 img_path \u3002 \u8c03\u7528 get_ocr() \u83b7\u53d6 OCR \u5b9e\u4f8b\u3002 \u76f4\u63a5\u5bf9\u56fe\u50cf\u6587\u4ef6\u6267\u884c OCR\u3002 \u5c06 OCR \u7ed3\u679c\uff08\u6240\u6709\u8bc6\u522b\u51fa\u7684\u6587\u672c\u884c\uff09\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 # edu_document_loaders/edu_imgloader.py \u6e90\u7801 from typing import Iterator from edu_ocr import get_ocr from langchain_core.documents import Document from langchain_core.document_loaders import BaseLoader class OCRIMGLoader ( BaseLoader ): \"\"\"An example document loader that reads a file line by line.\"\"\" def __init__ ( self , img_path : str ) -> None : \"\"\"Initialize the loader with a file path. Args: img_path: The path to the img to load. \"\"\" self . img_path = img_path def lazy_load ( self ) -> Iterator [ Document ]: # <-- Does not take any arguments \"\"\"A lazy loader that reads a file line by line. When you're implementing lazy load methods, you should use a generator to yield documents one by one. \"\"\" line = self . img2text () yield Document ( page_content = line , metadata = { \"source\" : self . img_path }) def img2text ( self ): resp = \"\" ocr = get_ocr () result , _ = ocr ( self . img_path ) if result : ocr_result = [ line [ 1 ] for line in result ] resp += \" \\n \" . join ( ocr_result ) return resp if __name__ == '__main__' : img_loader = OCRIMGLoader ( img_path = './data/test_img.png' ) doc = img_loader . load () print ( doc ) \u6587\u672c\u5207\u5206\u5de5\u5177 ( edu_text_spliter/ ) \u00b6 \u5c06\u89e3\u6790\u5f97\u5230\u7684\u957f\u6587\u672c\u5207\u5206\u6210\u9002\u5408\u5411\u91cf\u5316\u548c\u68c0\u7d22\u7684\u5c0f\u5757\u662f RAG \u6d41\u7a0b\u4e2d\u7684\u5173\u952e\u4e00\u6b65\u3002\u672c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e24\u79cd\u6587\u672c\u5207\u5206\u5de5\u5177\u3002 \u4e2d\u6587\u9012\u5f52\u6587\u672c\u5207\u5206\u5668 (edu_chinese_recursive_text_splitter.py) \u00b6 ChineseRecursiveTextSplitter \u7c7b\u662f\u9488\u5bf9\u4e2d\u6587\u6587\u672c\u7279\u70b9\u5b9a\u5236\u7684\u5207\u5206\u5668\u3002 \u529f\u80fd : \u5c06\u957f\u6587\u672c\u6309\u7167\u9884\u8bbe\u7684\u4e2d\u6587\u5206\u9694\u7b26\u9012\u5f52\u5730\u5207\u5206\u6210\u6307\u5b9a\u5927\u5c0f\u7684\u5757\u3002 \u7ee7\u627f : langchain.text_splitter.RecursiveCharacterTextSplitter \u3002 \u6838\u5fc3\u5b9a\u5236 : _separators : \u5b9a\u4e49\u4e86\u7528\u4e8e\u5207\u5206\u7684\u3001\u6309\u4f18\u5148\u7ea7\u6392\u5217\u7684\u5206\u9694\u7b26\u5217\u8868\uff0c\u5305\u62ec\u5e38\u89c1\u7684\u4e2d\u6587\u6807\u70b9\u548c\u6362\u884c\u7b26\uff0c\u5982 [\"\\n\\n\", \"\\n\", \"\u3002|\uff01|\uff1f\", \"\\.\\s|\\!\\s|\\?\\s\", \"\uff1b|;\\s\", \"\uff0c|,\\s\"] \u3002\u8fd9\u6709\u52a9\u4e8e\u5728\u5207\u5206\u65f6\u5c3d\u91cf\u4fdd\u6301\u53e5\u5b50\u7684\u5b8c\u6574\u6027\u3002 \u652f\u6301\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9a\u4e49\u5206\u9694\u7b26 ( is_separator_regex=True )\u3002 \u901a\u8fc7 chunk_size \u548c chunk_overlap \u63a7\u5236\u5207\u5206\u5757\u7684\u5927\u5c0f\u548c\u91cd\u53e0\u3002 # edu_text_spliter/edu_chinese_recursive_text_splitter.py \u6e90\u7801 import re from typing import List , Optional , Any from langchain.text_splitter import RecursiveCharacterTextSplitter import logging logger = logging . getLogger ( __name__ ) def _split_text_with_regex_from_end ( text : str , separator : str , keep_separator : bool ) -> List [ str ]: # Now that we have the separator, split the text if separator : if keep_separator : # The parentheses in the pattern keep the delimiters in the result. _splits = re . split ( f \"( { separator } )\" , text ) splits = [ \"\" . join ( i ) for i in zip ( _splits [ 0 :: 2 ], _splits [ 1 :: 2 ])] if len ( _splits ) % 2 == 1 : splits += _splits [ - 1 :] # splits = [_splits[0]] + splits else : splits = re . split ( separator , text ) else : splits = list ( text ) return [ s for s in splits if s != \"\" ] class ChineseRecursiveTextSplitter ( RecursiveCharacterTextSplitter ): def __init__ ( self , separators : Optional [ List [ str ]] = None , keep_separator : bool = True , is_separator_regex : bool = True , ** kwargs : Any , ) -> None : \"\"\"Create a new TextSplitter.\"\"\" super () . __init__ ( keep_separator = keep_separator , ** kwargs ) self . _separators = separators or [ \" \\n\\n \" , \" \\n \" , \"\u3002|\uff01|\uff1f\" , \"\\.\\s|\\!\\s|\\?\\s\" , \"\uff1b|;\\s\" , \"\uff0c|,\\s\" ] self . _is_separator_regex = is_separator_regex def _split_text ( self , text : str , separators : List [ str ]) -> List [ str ]: \"\"\"Split incoming text and return chunks.\"\"\" final_chunks = [] # Get appropriate separator to use separator = separators [ - 1 ] new_separators = [] for i , _s in enumerate ( separators ): _separator = _s if self . _is_separator_regex else re . escape ( _s ) if _s == \"\" : separator = _s break if re . search ( _separator , text ): separator = _s new_separators = separators [ i + 1 :] break _separator = separator if self . _is_separator_regex else re . escape ( separator ) splits = _split_text_with_regex_from_end ( text , _separator , self . _keep_separator ) # Now go merging things, recursively splitting longer texts. _good_splits = [] _separator = \"\" if self . _keep_separator else separator for s in splits : if self . _length_function ( s ) < self . _chunk_size : _good_splits . append ( s ) else : if _good_splits : merged_text = self . _merge_splits ( _good_splits , _separator ) final_chunks . extend ( merged_text ) _good_splits = [] if not new_separators : final_chunks . append ( s ) else : other_info = self . _split_text ( s , new_separators ) final_chunks . extend ( other_info ) if _good_splits : merged_text = self . _merge_splits ( _good_splits , _separator ) final_chunks . extend ( merged_text ) return [ re . sub ( r \"\\n{2,}\" , \" \\n \" , chunk . strip ()) for chunk in final_chunks if chunk . strip () != \"\" ] if __name__ == \"__main__\" : text_splitter = ChineseRecursiveTextSplitter ( keep_separator = True , is_separator_regex = True , chunk_size = 150 , chunk_overlap = 10 ) ls = [ \"\"\"\u4e2d\u56fd\u5bf9\u5916\u8d38\u6613\u5f62\u52bf\u62a5\u544a\uff0875\u9875\uff09\u3002\u524d 10 \u4e2a\u6708\uff0c\u4e00\u822c\u8d38\u6613\u8fdb\u51fa\u53e3 19.5 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 25.1%\uff0c \u6bd4\u6574\u4f53\u8fdb\u51fa\u53e3\u589e\u901f\u9ad8\u51fa 2.9 \u4e2a\u767e\u5206\u70b9\uff0c\u5360\u8fdb\u51fa\u53e3\u603b\u989d\u7684 61.7%\uff0c\u8f83\u53bb\u5e74\u540c\u671f\u63d0\u5347 1.6 \u4e2a\u767e\u5206\u70b9\u3002\u5176\u4e2d\uff0c\u4e00\u822c\u8d38\u6613\u51fa\u53e3 10.6 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 25.3%\uff0c\u5360\u51fa\u53e3\u603b\u989d\u7684 60.9%\uff0c\u63d0\u5347 1.5 \u4e2a\u767e\u5206\u70b9\uff1b\u8fdb\u53e38.9\u4e07\u4ebf\u5143\uff0c\u589e\u957f24.9%\uff0c\u5360\u8fdb\u53e3\u603b\u989d\u768462.7%\uff0c \u63d0\u5347 1.8 \u4e2a\u767e\u5206\u70b9\u3002\u52a0\u5de5\u8d38\u6613\u8fdb\u51fa\u53e3 6.8 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 11.8%\uff0c \u5360\u8fdb\u51fa\u53e3\u603b\u989d\u7684 21.5%\uff0c\u51cf\u5c11 2.0 \u4e2a\u767e\u5206\u70b9\u3002\u5176\u4e2d\uff0c\u51fa\u53e3\u589e \u957f 10.4%\uff0c\u5360\u51fa\u53e3\u603b\u989d\u7684 24.3%\uff0c\u51cf\u5c11 2.6 \u4e2a\u767e\u5206\u70b9\uff1b\u8fdb\u53e3\u589e \u957f 14.2%\uff0c\u5360\u8fdb\u53e3\u603b\u989d\u7684 18.0%\uff0c\u51cf\u5c11 1.2 \u4e2a\u767e\u5206\u70b9\u3002\u6b64\u5916\uff0c \u4ee5\u4fdd\u7a0e\u7269\u6d41\u65b9\u5f0f\u8fdb\u51fa\u53e3 3.96 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 27.9%\u3002\u5176\u4e2d\uff0c\u51fa \u53e3 1.47 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 38.9%\uff1b\u8fdb\u53e3 2.49 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 22.2%\u3002\u524d\u4e09\u5b63\u5ea6\uff0c\u4e2d\u56fd\u670d\u52a1\u8d38\u6613\u7ee7\u7eed\u4fdd\u6301\u5feb\u901f\u589e\u957f\u6001\u52bf\u3002\u670d\u52a1 \u8fdb\u51fa\u53e3\u603b\u989d 37834.3 \u4ebf\u5143\uff0c\u589e\u957f 11.6%\uff1b\u5176\u4e2d\u670d\u52a1\u51fa\u53e3 17820.9 \u4ebf\u5143\uff0c\u589e\u957f 27.3%\uff1b\u8fdb\u53e3 20013.4 \u4ebf\u5143\uff0c\u589e\u957f 0.5%\uff0c\u8fdb\u53e3\u589e \u901f\u5b9e\u73b0\u4e86\u75ab\u60c5\u4ee5\u6765\u7684\u9996\u6b21\u8f6c\u6b63\u3002\u670d\u52a1\u51fa\u53e3\u589e\u5e45\u5927\u4e8e\u8fdb\u53e3 26.8 \u4e2a\u767e\u5206\u70b9\uff0c\u5e26\u52a8\u670d\u52a1\u8d38\u6613\u9006\u5dee\u4e0b\u964d 62.9%\u81f3 2192.5 \u4ebf\u5143\u3002\u670d \u52a1\u8d38\u6613\u7ed3\u6784\u6301\u7eed\u4f18\u5316\uff0c\u77e5\u8bc6\u5bc6\u96c6\u578b\u670d\u52a1\u8fdb\u51fa\u53e3 16917.7 \u4ebf\u5143\uff0c \u589e\u957f 13.3%\uff0c\u5360\u670d\u52a1\u8fdb\u51fa\u53e3\u603b\u989d\u7684\u6bd4\u91cd\u8fbe\u5230 44.7%\uff0c\u63d0\u5347 0.7 \u4e2a\u767e\u5206\u70b9\u3002 \u4e8c\u3001\u4e2d\u56fd\u5bf9\u5916\u8d38\u6613\u53d1\u5c55\u73af\u5883\u5206\u6790\u548c\u5c55\u671b \u5168\u7403\u75ab\u60c5\u8d77\u4f0f\u53cd\u590d\uff0c\u7ecf\u6d4e\u590d\u82cf\u5206\u5316\u52a0\u5267\uff0c\u5927\u5b97\u5546\u54c1\u4ef7\u683c \u4e0a\u6da8\u3001\u80fd\u6e90\u7d27\u7f3a\u3001\u8fd0\u529b\u7d27\u5f20\u53ca\u53d1\u8fbe\u7ecf\u6d4e\u4f53\u653f\u7b56\u8c03\u6574\u5916\u6ea2\u7b49\u98ce \u9669\u4ea4\u7ec7\u53e0\u52a0\u3002\u540c\u65f6\u4e5f\u8981\u770b\u5230\uff0c\u6211\u56fd\u7ecf\u6d4e\u957f\u671f\u5411\u597d\u7684\u8d8b\u52bf\u6ca1\u6709 \u6539\u53d8\uff0c\u5916\u8d38\u4f01\u4e1a\u97e7\u6027\u548c\u6d3b\u529b\u4e0d\u65ad\u589e\u5f3a\uff0c\u65b0\u4e1a\u6001\u65b0\u6a21\u5f0f\u52a0\u5feb\u53d1 \u5c55\uff0c\u521b\u65b0\u8f6c\u578b\u6b65\u4f10\u63d0\u901f\u3002\u4ea7\u4e1a\u94fe\u4f9b\u5e94\u94fe\u9762\u4e34\u6311\u6218\u3002\u7f8e\u6b27\u7b49\u52a0\u5feb\u51fa\u53f0\u5236\u9020\u4e1a\u56de\u8fc1\u8ba1 \u5212\uff0c\u52a0\u901f\u4ea7\u4e1a\u94fe\u4f9b\u5e94\u94fe\u672c\u571f\u5e03\u5c40\uff0c\u8de8\u56fd\u516c\u53f8\u8c03\u6574\u4ea7\u4e1a\u94fe\u4f9b\u5e94 \u94fe\uff0c\u5168\u7403\u53cc\u94fe\u9762\u4e34\u65b0\u4e00\u8f6e\u91cd\u6784\uff0c\u533a\u57df\u5316\u3001\u8fd1\u5cb8\u5316\u3001\u672c\u571f\u5316\u3001 \u77ed\u94fe\u5316\u8d8b\u52bf\u51f8\u663e\u3002\u75ab\u82d7\u4f9b\u5e94\u4e0d\u8db3\uff0c\u5236\u9020\u4e1a\u201c\u7f3a\u82af\u201d\u3001\u7269\u6d41\u53d7\u9650\u3001 \u8fd0\u4ef7\u9ad8\u4f01\uff0c\u5168\u7403\u4ea7\u4e1a\u94fe\u4f9b\u5e94\u94fe\u9762\u4e34\u538b\u529b\u3002 \u5168\u7403\u901a\u80c0\u6301\u7eed\u9ad8\u4f4d\u8fd0\u884c\u3002\u80fd\u6e90\u4ef7\u683c\u4e0a\u6da8\u52a0\u5927\u4e3b\u8981\u7ecf\u6d4e\u4f53 \u7684\u901a\u80c0\u538b\u529b\uff0c\u589e\u52a0\u5168\u7403\u7ecf\u6d4e\u590d\u82cf\u7684\u4e0d\u786e\u5b9a\u6027\u3002\u4e16\u754c\u94f6\u884c\u4eca\u5e74 10 \u6708\u53d1\u5e03\u300a\u5927\u5b97\u5546\u54c1\u5e02\u573a\u5c55\u671b\u300b\u6307\u51fa\uff0c\u80fd\u6e90\u4ef7\u683c\u5728 2021 \u5e74 \u5927\u6da8\u903e 80%\uff0c\u5e76\u4e14\u4ecd\u5c06\u5728 2022 \u5e74\u5c0f\u5e45\u4e0a\u6da8\u3002IMF \u6307\u51fa\uff0c\u5168 \u7403\u901a\u80c0\u4e0a\u884c\u98ce\u9669\u52a0\u5267\uff0c\u901a\u80c0\u524d\u666f\u5b58\u5728\u5de8\u5927\u4e0d\u786e\u5b9a\u6027\u3002\"\"\" , ] # text = \"\"\"\"\"\" for inum , text in enumerate ( ls ): print ( inum ) chunks = text_splitter . split_text ( text ) for chunk in chunks : print ( chunk ) \u57fa\u4e8e\u6a21\u578b\u7684\u8bed\u4e49\u5207\u5206\u5668 (edu_model_text_spliter.py) \u00b6 AliTextSplitter \u7c7b\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u57fa\u4e8e AI \u6a21\u578b\u7684\u6587\u672c\u5207\u5206\u65b9\u6cd5\u3002 \u529f\u80fd : \u5229\u7528\u9884\u8bad\u7ec3\u7684\u6587\u6863\u8bed\u4e49\u5206\u5272\u6a21\u578b\u5bf9\u6587\u672c\u8fdb\u884c\u5207\u5206\u3002 \u7ee7\u627f : langchain.text_splitter.CharacterTextSplitter \u3002 \u6838\u5fc3\u903b\u8f91 : \u521d\u59cb\u5316\u65f6\u6307\u5b9a\u662f\u5426\u5904\u7406 PDF \u6587\u672c\uff08\u5305\u542b\u7279\u5b9a\u7684\u6362\u884c\u7b26\u548c\u7a7a\u683c\u5904\u7406\u903b\u8f91\uff09\u3002 \u8c03\u7528 modelscope.pipeline \u52a0\u8f7d\u6307\u5b9a\u7684\u6587\u6863\u5206\u5272\u6a21\u578b\uff08\u4ee3\u7801\u4e2d\u4e3a MODEL_PATH['segment_model']['ali_model'] \uff0c\u9700\u8981\u914d\u7f6e configs.py \u6216\u76f4\u63a5\u6307\u5b9a\u6a21\u578b\u8def\u5f84/\u540d\u79f0\uff0c\u5982 'damo/nlp_bert_document-segmentation_chinese-base'\uff09\u3002\u6a21\u578b\u8fd0\u884c\u5728 CPU \u4e0a\u3002 \u5c06\u8f93\u5165\u6587\u672c\u4f20\u9012\u7ed9\u6a21\u578b pipeline \u8fdb\u884c\u5904\u7406\u3002 \u6a21\u578b\u8fd4\u56de\u6309\u8bed\u4e49\u5206\u5272\u597d\u7684\u6587\u672c\u6bb5\u843d\uff0c\u811a\u672c\u5c06\u5176\u6574\u7406\u6210\u5217\u8868\u8fd4\u56de\u3002 \u4f18\u52bf : \u7406\u8bba\u4e0a\u80fd\u66f4\u597d\u5730\u6839\u636e\u5185\u5bb9\u7684\u8bed\u4e49\u5173\u8054\u6027\u8fdb\u884c\u5207\u5206\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u4f9d\u8d56\u6807\u70b9\u7b26\u53f7\u3002 \u52a3\u52bf : \u9700\u8981\u989d\u5916\u52a0\u8f7d\u4e00\u4e2a\u6a21\u578b\uff0c\u589e\u52a0\u4e86\u8ba1\u7b97\u5f00\u9500\u548c\u4f9d\u8d56\u3002 # edu_text_spliter/edu_model_text_spliter.py \u6e90\u7801 from langchain.text_splitter import CharacterTextSplitter import re from typing import List from modelscope.pipelines import pipeline # from configs import MODEL_PATH # Assume MODEL_PATH is defined elsewhere or replaced # Placeholder for MODEL_PATH if configs.py is not available MODEL_PATH = { 'segment_model' : { # Replace with the actual model name or path from ModelScope 'ali_model' : 'damo/nlp_bert_document-segmentation_chinese-base' } } class AliTextSplitter ( CharacterTextSplitter ): def __init__ ( self , pdf : bool = False , ** kwargs ): super () . __init__ ( ** kwargs ) self . pdf = pdf # Initialize the pipeline here or ensure it's initialized before split_text is called # Consider adding error handling for model loading try : self . pipeline = pipeline ( task = \"document-segmentation\" , model = MODEL_PATH [ 'segment_model' ][ 'ali_model' ], device = \"cpu\" # Specify CPU device ) except Exception as e : print ( f \"Error initializing ModelScope pipeline: { e } \" ) self . pipeline = None def split_text ( self , text : str ) -> List [ str ]: if not self . pipeline : print ( \"ModelScope pipeline not initialized. Returning empty list.\" ) return [] # Preprocessing specific to PDF text if needed if self . pdf : text = re . sub ( r \"\\n{3,}\" , r \"\\n\" , text ) # Replace multiple spaces with a single space text = re . sub ( '\\s+' , \" \" , text ) # Consider removing single newlines carefully, might merge unrelated lines # text = text.replace(\"\\n\", \" \") # This might be too aggressive text = re . sub ( \" \\n\\n \" , \" \\n \" , text ) # Keep paragraph breaks try : result = self . pipeline ( documents = text ) # The default output format might be a single string with \"\\n\\t\" separators sent_list = [ segment . strip () for segment in result [ \"text\" ] . split ( \" \\n\\t \" ) if segment . strip ()] return sent_list except Exception as e : print ( f \"Error during ModelScope document segmentation: { e } \" ) # Fallback behavior: maybe split by paragraph or return the original text in a list return text . split ( ' \\n\\n ' ) # Simple fallback if __name__ == '__main__' : # Example usage requires modelscope and relevant model downloaded # pip install \"modelscope[nlp]\" tensorflow torch -f https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html sample_text = \"\"\"\u79fb\u52a8\u7aef\u8bed\u97f3\u5524\u9192\u6a21\u578b\uff0c\u68c0\u6d4b\u5173\u952e\u8bcd\u4e3a\u201c\u5c0f\u4e91\u5c0f\u4e91\u201d\u3002 \u6a21\u578b\u4e3b\u4f53\u4e3a4\u5c42FSMN\u7ed3\u6784\uff0c\u4f7f\u7528CTC\u8bad\u7ec3\u51c6\u5219\uff0c\u53c2\u6570\u91cf750K\uff0c\u9002\u7528\u4e8e\u79fb\u52a8\u7aef\u8bbe\u5907\u8fd0\u884c\u3002 \u6a21\u578b\u8f93\u5165\u4e3aFbank\u7279\u5f81\uff0c\u8f93\u51fa\u4e3a\u57fa\u4e8echar\u5efa\u6a21\u7684\u4e2d\u6587\u5168\u96c6token\u9884\u6d4b\uff0c\u6d4b\u8bd5\u5de5\u5177\u6839\u636e\u6bcf\u4e00\u5e27\u7684\u9884\u6d4b\u6570\u636e\u8fdb\u884c\u540e\u5904\u7406\u5f97\u5230\u8f93\u5165\u97f3\u9891\u7684\u5b9e\u65f6\u68c0\u6d4b\u7ed3\u679c\u3002 \u6a21\u578b\u8bad\u7ec3\u91c7\u7528\u201cbasetrain + finetune\u201d\u7684\u6a21\u5f0f\uff0cbasetrain\u8fc7\u7a0b\u4f7f\u7528\u5927\u91cf\u5185\u90e8\u79fb\u52a8\u7aef\u6570\u636e\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4f7f\u75281\u4e07\u6761\u8bbe\u5907\u7aef\u5f55\u5236\u5b89\u9759\u573a\u666f\u201c\u5c0f\u4e91\u5c0f\u4e91\u201d\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u6700\u7ec8\u9762\u5411\u4e1a\u52a1\u7684\u6a21\u578b\u3002 \u540e\u7eed\u7528\u6237\u53ef\u5728basetrain\u6a21\u578b\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u5176\u4ed6\u5173\u952e\u8bcd\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u65b0\u7684\u8bed\u97f3\u5524\u9192\u6a21\u578b\uff0c\u4f46\u6682\u65f6\u672a\u5f00\u653e\u6a21\u578bfinetune\u529f\u80fd\u3002\"\"\" # Assuming MODEL_PATH is correctly configured and modelscope is installed model_split = AliTextSplitter () result = model_split . split_text ( text = sample_text ) print ( result ) # Expected output (example, actual output depends on the model): # ['\u79fb\u52a8\u7aef\u8bed\u97f3\u5524\u9192\u6a21\u578b\uff0c\u68c0\u6d4b\u5173\u952e\u8bcd\u4e3a\u201c\u5c0f\u4e91\u5c0f\u4e91\u201d\u3002', '\u6a21\u578b\u4e3b\u4f53\u4e3a4\u5c42FSMN\u7ed3\u6784\uff0c\u4f7f\u7528CTC\u8bad\u7ec3\u51c6\u5219\uff0c\u53c2\u6570\u91cf750K\uff0c\u9002\u7528\u4e8e\u79fb\u52a8\u7aef\u8bbe\u5907\u8fd0\u884c\u3002', '\u6a21\u578b\u8f93\u5165\u4e3aFbank\u7279\u5f81\uff0c\u8f93\u51fa\u4e3a\u57fa\u4e8echar\u5efa\u6a21\u7684\u4e2d\u6587\u5168\u96c6token\u9884\u6d4b\uff0c\u6d4b\u8bd5\u5de5\u5177\u6839\u636e\u6bcf\u4e00\u5e27\u7684\u9884\u6d4b\u6570\u636e\u8fdb\u884c\u540e\u5904\u7406\u5f97\u5230\u8f93\u5165\u97f3\u9891\u7684\u5b9e\u65f6\u68c0\u6d4b\u7ed3\u679c\u3002', '\u6a21\u578b\u8bad\u7ec3\u91c7\u7528\u201cbasetrain + finetune\u201d\u7684\u6a21\u5f0f\uff0cbasetrain\u8fc7\u7a0b\u4f7f\u7528\u5927\u91cf\u5185\u90e8\u79fb\u52a8\u7aef\u6570\u636e\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4f7f\u75281\u4e07\u6761\u8bbe\u5907\u7aef\u5f55\u5236\u5b89\u9759\u573a\u666f\u201c\u5c0f\u4e91\u5c0f\u4e91\u201d\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u6700\u7ec8\u9762\u5411\u4e1a\u52a1\u7684\u6a21\u578b\u3002', '\u540e\u7eed\u7528\u6237\u53ef\u5728basetrain\u6a21\u578b\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u5176\u4ed6\u5173\u952e\u8bcd\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u65b0\u7684\u8bed\u97f3\u5524\u9192\u6a21\u578b\uff0c\u4f46\u6682\u65f6\u672a\u5f00\u653e\u6a21\u578bfinetune\u529f\u80fd\u3002'] \u672c\u7ae0\u603b\u7ed3 \u00b6 \u672c\u7ae0\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86 EduRAG \u7cfb\u7edf\u4e2d\u7528\u4e8e\u5904\u7406\u539f\u59cb\u6587\u6863\u548c\u5207\u5206\u6587\u672c\u7684\u6838\u5fc3\u5de5\u5177\u3002\u5728\u6587\u6863\u89e3\u6790\u65b9\u9762\uff0c\u6211\u4eec\u5b66\u4e60\u4e86 edu_document_loaders \u76ee\u5f55\u4e0b\u7684\u5404\u4e2a\u52a0\u8f7d\u5668\u5982\u4f55\u5229\u7528 PyMuPDF , python-docx , python-pptx \u7b49\u5e93\u7ed3\u5408 RapidOCR \uff08\u901a\u8fc7 edu_ocr.py \u63d0\u4f9b\uff09\u6765\u5904\u7406 PDF\u3001DOCX\u3001PPTX \u53ca\u56fe\u50cf\u6587\u4ef6\uff0c\u6709\u6548\u63d0\u53d6\u6587\u672c\u548c\u56fe\u7247\u4e2d\u7684\u6587\u5b57\u3002\u5728\u6587\u672c\u5207\u5206\u65b9\u9762\uff0c\u6211\u4eec\u63a2\u8ba8\u4e86 edu_text_spliter \u76ee\u5f55\u63d0\u4f9b\u7684\u4e24\u79cd\u5de5\u5177\uff1a ChineseRecursiveTextSplitter \uff08\u9488\u5bf9\u4e2d\u6587\u4f18\u5316\u7684\u3001\u57fa\u4e8e\u89c4\u5219\u7684\u9012\u5f52\u5207\u5206\u5668\uff09\u548c AliTextSplitter \uff08\u5229\u7528 AI \u6a21\u578b\u8fdb\u884c\u8bed\u4e49\u5207\u5206\uff09\u3002\u7406\u89e3\u8fd9\u4e9b\u5e95\u5c42\u5de5\u5177\u7684\u529f\u80fd\u548c\u5b9e\u73b0\u662f\u638c\u63e1 RAG \u7cfb\u7edf\u6570\u636e\u5904\u7406\u6d41\u7a0b\u7684\u5173\u952e\u3002","title":"4.8 \u6587\u6863\u89e3\u6790\u5de5\u5177(\u6269\u5c55\u8d44\u6599)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_1","text":"","title":"\u6587\u6863\u89e3\u6790\u4e0e\u6587\u672c\u5207\u5206\u5229\u5668"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_2","text":"\u638c\u63e1\u7cfb\u7edf\u4e2d\u7528\u4e8e\u89e3\u6790\u4e0d\u540c\u6587\u6863\u683c\u5f0f\uff08PDF, DOCX, PPTX, Images\uff09\u7684\u6838\u5fc3\u5de5\u5177\u3002 \u7406\u89e3\u5149\u5b66\u5b57\u7b26\u8bc6\u522b\uff08OCR\uff09\u5de5\u5177 RapidOCR \u5982\u4f55\u96c6\u6210\u5e76\u5e94\u7528\u4e8e\u6587\u6863\u89e3\u6790\u6d41\u7a0b\u3002 \u4e86\u89e3\u7cfb\u7edf\u4e2d\u63d0\u4f9b\u7684\u4e24\u79cd\u6587\u672c\u5207\u5206\u5de5\u5177\uff1a\u57fa\u4e8e\u89c4\u5219\u7684\u9012\u5f52\u5207\u5206\u5668\u548c\u57fa\u4e8e\u6a21\u578b\u7684\u8bed\u4e49\u5207\u5206\u5668\u3002 \u719f\u6089 edu_document_loaders \u548c edu_text_spliter \u76ee\u5f55\u4e0b\u5404\u811a\u672c\u7684\u5177\u4f53\u5b9e\u73b0\u548c\u529f\u80fd\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#edu_document_loaders","text":"\u4e3a\u4e86\u4ece\u5404\u79cd\u5e38\u89c1\u7684 IT \u6559\u80b2\u6587\u6863\u683c\u5f0f\u4e2d\u63d0\u53d6\u4fe1\u606f\uff0c\u7cfb\u7edf\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u4e13\u95e8\u7684\u52a0\u8f7d\u5668\uff08Loaders\uff09\u3002\u8fd9\u4e9b\u52a0\u8f7d\u5668\u4e0d\u4ec5\u80fd\u63d0\u53d6\u6587\u6863\u4e2d\u7684\u539f\u751f\u6587\u672c\uff0c\u8fd8\u80fd\u5229\u7528 OCR \u6280\u672f\u8bc6\u522b\u5e76\u63d0\u53d6\u56fe\u7247\u4e2d\u5d4c\u5165\u7684\u6587\u5b57\u3002\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea Langchain \u7684 BaseLoader \uff0c\u5e76\u5b9e\u73b0\u4e86 lazy_load \u65b9\u6cd5\u6765\u6309\u9700\u751f\u6210 Document \u5bf9\u8c61\u3002","title":"\u6587\u6863\u89e3\u6790\u5de5\u5177 (edu_document_loaders/)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#ocr-edu_ocrpy","text":"\u8be5\u811a\u672c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u5316\u7684\u51fd\u6570 get_ocr() \u6765\u521d\u59cb\u5316\u548c\u83b7\u53d6 OCR \u8bc6\u522b\u5f15\u64ce\u5b9e\u4f8b\u3002\u8fd9\u662f\u6240\u6709\u9700\u8981\u56fe\u7247\u6587\u5b57\u8bc6\u522b\u529f\u80fd\u7684\u52a0\u8f7d\u5668\u7684\u57fa\u7840\u3002 \u529f\u80fd : \u521d\u59cb\u5316 RapidOCR \u5b9e\u4f8b\u3002 \u7279\u70b9 \uff1a \u5f15\u64ce\u9009\u62e9 : \u4f18\u5148\u5c1d\u8bd5 rapidocr_paddle (\u5229\u7528 PaddlePaddle \u63a8\u7406\uff0c\u63a8\u8350 GPU \u73af\u5883)\uff0c\u82e5\u5931\u8d25\u5219\u56de\u9000\u5230 rapidocr_onnxruntime (\u5229\u7528 ONNX Runtime \u63a8\u7406\uff0c\u9002\u5408 CPU \u73af\u5883\u6216\u9700\u8981\u8de8\u5e73\u53f0\u90e8\u7f72\u7684\u573a\u666f)\u3002 \u53c2\u6570\u63a7\u5236 : \u5141\u8bb8\u901a\u8fc7 use_cuda \u53c2\u6570\u63a7\u5236\u662f\u5426\u542f\u7528 GPU \u52a0\u901f\uff08\u5982\u679c\u4f7f\u7528 PaddlePaddle \u5f15\u64ce\uff09\u3002 # edu_document_loaders/edu_ocr.py \u6e90\u7801 from typing import TYPE_CHECKING ''' paddleocr\uff1a\u89e3\u6790\u56fe\u7247\u4e2d\u7684\u6587\u5b57\uff0c\u4e5f\u53ef\u4ee5\u8fdb\u884c\u8868\u683c\u8bc6\u522b rapidocr_paddle \u548c rapidocr_onnxruntime \u4e24\u79cd\u5bfc\u5165\u65b9\u5f0f \u4e3b\u8981\u533a\u522b\u5728\u4e8e\u5b83\u4eec\u6240\u4f7f\u7528\u7684\u63a8\u7406\u5f15\u64ce\u548c\u786c\u4ef6\u652f\u6301 \u9009\u62e9\u54ea\u79cd\u65b9\u5f0f\u6700\u5408\u9002\u53d6\u51b3\u4e8e\u4f60\u7684\u786c\u4ef6\u73af\u5883\u548c\u6027\u80fd\u9700\u6c42\u3002 \u5f53\u4f60\u6709 GPU \u4e14\u8ffd\u6c42\u901f\u5ea6\u65f6\uff1a\u4f7f\u7528 rapidocr_paddle\u3002PaddlePaddle \u539f\u751f\u652f\u6301\u5728 GPU \u4e0a\u63a8\u7406 PaddleOCR \u6a21\u578b\uff0c\u901f\u5ea6\u66f4\u5feb\u3002 \u5f53\u53ea\u6709 CPU \u4e14\u9700\u8981\u9ad8\u6548\u63a8\u7406\u65f6\uff1a\u4f7f\u7528 rapidocr_onnxruntime\u3002\u5b83\u5728 CPU \u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u8d44\u6e90\u5360\u7528\u8f83\u4f4e. ''' def get_ocr ( use_cuda : bool = True ) -> \"RapidOCR\" : try : from rapidocr_paddle import RapidOCR ''' det_use_cuda=True\uff1a\u542f\u7528\u68c0\u6d4b\u6a21\u578b\u7684GPU\u52a0\u901f\u3002cls_use_cuda=True\uff1a\u542f\u7528\u5206\u7c7b\u6a21\u578b\u7684GPU\u52a0\u901f\u3002rec_use_cuda=True\uff1a\u542f\u7528\u8bc6\u522b\u6a21\u578b\u7684GPU\u52a0\u901f\u3002 ''' ocr = RapidOCR ( det_use_cuda = use_cuda , cls_use_cuda = use_cuda , rec_use_cuda = use_cuda ) except ImportError : # from rapidocr_onnxruntime import RapidOCR ocr = RapidOCR () return ocr","title":"OCR \u5f15\u64ce\u6838\u5fc3 (edu_ocr.py)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#pdf-edu_pdfloaderpy","text":"OCRPDFLoader \u7c7b\u4e13\u95e8\u7528\u4e8e\u5904\u7406 PDF \u6587\u4ef6\u3002 \u529f\u80fd : \u89e3\u6790 PDF\uff0c\u63d0\u53d6\u6587\u672c\u548c\u56fe\u7247\u4e2d\u7684\u6587\u5b57\u3002 \u4f9d\u8d56 : PyMuPDF (fitz), Pillow , numpy , opencv-python , tqdm \u4ee5\u53ca edu_ocr.py \u3002 \u6838\u5fc3\u903b\u8f91 : \u4f7f\u7528 fitz.open() \u6253\u5f00 PDF\u3002 \u9010\u9875 ( page ) \u5904\u7406\u3002 \u4f7f\u7528 page.get_text() \u63d0\u53d6\u539f\u751f\u6587\u672c\u3002 \u4f7f\u7528 page.get_image_info(xrefs=True) \u83b7\u53d6\u9875\u9762\u4e0a\u7684\u56fe\u7247\u4fe1\u606f\u3002 OCR \u5e94\u7528 : \u5bf9\u83b7\u53d6\u5230\u7684\u56fe\u7247\uff0c\u68c0\u67e5\u5176\u5c3a\u5bf8\u662f\u5426\u8d85\u8fc7\u9884\u8bbe\u9608\u503c PDF_OCR_THRESHOLD \uff08\u9ed8\u8ba4\u4e3a\u9875\u9762\u5bbd\u9ad8\u7684 60%\uff09\u3002\u4ec5\u5bf9\u5927\u4e8e\u9608\u503c\u7684\u56fe\u7247\u6267\u884c OCR\u3002 \u5904\u7406\u9875\u9762\u65cb\u8f6c ( page.rotation )\uff0c\u786e\u4fdd OCR \u65f6\u56fe\u50cf\u65b9\u5411\u6b63\u786e\u3002 \u8c03\u7528 get_ocr() \u83b7\u53d6\u7684 OCR \u5b9e\u4f8b\u8bc6\u522b\u56fe\u7247\u6587\u5b57\u3002 \u5408\u5e76\u539f\u751f\u6587\u672c\u548c OCR \u7ed3\u679c\u3002 \u4f7f\u7528 tqdm \u663e\u793a\u5904\u7406\u8fdb\u5ea6\u3002 # edu_document_loaders/edu_pdfloader.py \u6e90\u7801 import cv2 import fitz # pyMuPDF\u91cc\u9762\u7684fitz\u5305\uff0c\u4e0d\u8981\u4e0epip install fitz\u6df7\u6dc6 import numpy as np from PIL import Image from tqdm import tqdm from typing import Iterator from edu_ocr import get_ocr from langchain_core.documents import Document from langchain_core.document_loaders import BaseLoader from langchain.text_splitter import CharacterTextSplitter # PDF OCR \u63a7\u5236\uff1a\u53ea\u5bf9\u5bbd\u9ad8\u8d85\u8fc7\u9875\u9762\u4e00\u5b9a\u6bd4\u4f8b\uff08\u56fe\u7247\u5bbd/\u9875\u9762\u5bbd\uff0c\u56fe\u7247\u9ad8/\u9875\u9762\u9ad8\uff09\u7684\u56fe\u7247\u8fdb\u884c OCR\u3002 # \u8fd9\u6837\u53ef\u4ee5\u907f\u514d PDF \u4e2d\u4e00\u4e9b\u5c0f\u56fe\u7247\u7684\u5e72\u6270\uff0c\u63d0\u9ad8\u975e\u626b\u63cf\u7248 PDF \u5904\u7406\u901f\u5ea6 PDF_OCR_THRESHOLD = ( 0.6 , 0.6 ) class OCRPDFLoader ( BaseLoader ): \"\"\"An example document loader that reads a file line by line.\"\"\" def __init__ ( self , file_path : str ) -> None : \"\"\"Initialize the loader with a file path. Args: file_path: The path to the file to load. \"\"\" self . file_path = file_path def lazy_load ( self ) -> Iterator [ Document ]: # <-- Does not take any arguments \"\"\"A lazy loader that reads a file line by line. When you're implementing lazy load methods, you should use a generator to yield documents one by one. \"\"\" line = self . pdf2text () yield Document ( page_content = line , metadata = { \"source\" : self . file_path }) def pdf2text ( self ): ocr = get_ocr () # \u6253\u5f00pdf\u6587\u4ef6 doc = fitz . open ( self . file_path ) ## \u83b7\u53d6\u9875\u6570 # print(f'len(doc)-->{len(doc)}') resp = \"\" b_unit = tqdm ( total = doc . page_count , desc = \"OCRPDFLoader context page index: 0\" ) for i , page in enumerate ( doc ): b_unit . set_description ( \"OCRPDFLoader context page index: {} \" . format ( i )) b_unit . refresh () # \u63d0\u53d6\u6587\u672c\uff1a\u9ed8\u8ba4\u4f7f\u7528 \"text\" \u6a21\u5f0f\u63d0\u53d6\u6587\u672c\u3002 text = page . get_text ( \"\" ) resp += text + \" \\n \" # print(f'resp-->{resp}') # \u83b7\u53d6\u56fe\u7247\uff1a\u83b7\u5f97\u6240\u6709\u663e\u793a\u7684\u56fe\u50cf\u7684\u5143\u4fe1\u606f\u5217\u8868\u3002 # \u5b83\u9002\u7528\u4e8e\u6240\u6709\u6587\u6863\u7c7b\u578b\uff0c\u4e0d\u4ec5\u9650\u4e8e PDF\u3002 img_list = page . get_image_info ( xrefs = True ) # print(f'img_list--\u300b{img_list}') # print(f'img_list--\u300b{len(img_list)}') for img in img_list : # xref\u4e00\u79cd\u7f16\u53f7\uff0c\u6307\u5411\u8be5\u56fe\u50cf\u5bf9\u8c61\u5728PDF\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7f16\u53f7\u5feb\u901f\u5b9a\u4f4d\u548c\u63d0\u53d6\u56fe\u50cf\u6570\u636e\u3002 if xref := img . get ( \"xref\" ): # \u56fe\u50cf\u5728\u9875\u9762\u4e0a\u7684\u4f4d\u7f6e\u548c\u5c3a\u5bf8\u3002 bbox = img [ \"bbox\" ] # \u68c0\u67e5\u56fe\u7247\u5c3a\u5bf8\u662f\u5426\u8d85\u8fc7\u8bbe\u5b9a\u7684\u9608\u503c # if ((bbox[2] - bbox[0]) / (page.rect.width) < PDF_OCR_THRESHOLD[0] # or (bbox[3] - bbox[1]) / (page.rect.height) < PDF_OCR_THRESHOLD[1]): # continue pix = fitz . Pixmap ( doc , xref ) # print(f'page.rotation-->{page.rotation}') if int ( page . rotation ) != 0 : # \u5982\u679cPage\u6709\u65cb\u8f6c\u89d2\u5ea6\uff0c\u5219\u65cb\u8f6c\u56fe\u7247 img_array = np . frombuffer ( pix . samples , dtype = np . uint8 ) . reshape ( pix . height , pix . width , - 1 ) tmp_img = Image . fromarray ( img_array ) ori_img = cv2 . cvtColor ( np . array ( tmp_img ), cv2 . COLOR_RGB2BGR ) rot_img = self . rotate_img ( img = ori_img , angle = 360 - page . rotation ) img_array = cv2 . cvtColor ( rot_img , cv2 . COLOR_RGB2BGR ) else : img_array = np . frombuffer ( pix . samples , dtype = np . uint8 ) . reshape ( pix . height , pix . width , - 1 ) # result\uff1a\u5305\u542b\u4e86\u56fe\u50cf\u4e2d\u68c0\u6d4b\u5230\u7684\u6240\u6709\u6587\u672c\u6846\u7684\u4f4d\u7f6e\u3001\u6587\u672c\u5185\u5bb9\u548c\u7f6e\u4fe1\u5ea6\u4fe1\u606f\u3002 # _\uff1a\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u4e86\u65f6\u95f4\u6570\u636e\u7684\u5217\u8868\uff0c\u53ef\u4ee5\u7528\u4e8e\u4f18\u5316\u6a21\u578b\u8fd0\u884c\u901f\u5ea6\u3002 result , _ = ocr ( img_array ) if result : ocr_result = [ line [ 1 ] for line in result ] resp += \" \\n \" . join ( ocr_result ) # \u66f4\u65b0\u8fdb\u5ea6 b_unit . update ( 1 ) return resp if __name__ == '__main__' : pdf_loader = OCRPDFLoader ( file_path = \"./data/Python\u673a\u5668\u5b66\u4e60\u57fa\u7840\u6559\u7a0b.pdf\" ) doc = pdf_loader . load () print ( type ( doc )) print ( doc ) # text_spliter = CharacterTextSplitter(chunk_size=300, chunk_overlap=20) # result = text_spliter.split_documents(doc) # print(len(result)) # print(result[0]) (\u6ce8\u610f\uff1a\u4e0a\u8ff0\u4ee3\u7801\u4e2d self.rotate_img \u65b9\u6cd5\u672a\u5728\u63d0\u4f9b\u7684\u4ee3\u7801\u6bb5\u4e2d\u5b9a\u4e49\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u9700\u8981\u786e\u4fdd\u8be5\u65b9\u6cd5\u5b58\u5728\u6216\u79fb\u9664\u76f8\u5173\u8c03\u7528)","title":"PDF \u6587\u6863\u52a0\u8f7d\u5668 (edu_pdfloader.py)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#word-edu_docloaderpy","text":"OCRDOCLoader \u7c7b\u7528\u4e8e\u5904\u7406 .docx \u6587\u4ef6\u3002 \u529f\u80fd : \u89e3\u6790 DOCX \u6587\u4ef6\uff0c\u63d0\u53d6\u6bb5\u843d\u3001\u8868\u683c\u6587\u672c\uff0c\u5e76\u5bf9\u5d4c\u5165\u7684\u56fe\u7247\u8fdb\u884c OCR\u3002 \u4f9d\u8d56 : python-docx , Pillow , numpy , tqdm \u4ee5\u53ca edu_ocr.py \u3002 \u6838\u5fc3\u903b\u8f91 : \u4f7f\u7528 docx.Document() \u6253\u5f00 DOCX \u6587\u4ef6\u3002 \u5b9a\u4e49 iter_block_items \u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u7edf\u4e00\u904d\u5386\u6587\u6863\u4e2d\u7684\u6bb5\u843d ( Paragraph ) \u548c\u8868\u683c ( Table ) \u5757\u3002 \u904d\u5386\u6240\u6709\u5757\uff1a \u5982\u679c\u662f\u6bb5\u843d\uff0c\u63d0\u53d6 block.text \u3002\u540c\u65f6\uff0c\u4f7f\u7528 XPath ( .//pic:pic , .//a:blip/@r:embed ) \u67e5\u627e\u5e76\u63d0\u53d6\u6bb5\u843d\u5185\u5d4c\u5165\u7684\u56fe\u7247\u3002\u5bf9\u63d0\u53d6\u7684\u56fe\u7247\u6267\u884c OCR\u3002 \u5982\u679c\u662f\u8868\u683c\uff0c\u904d\u5386\u6240\u6709\u5355\u5143\u683c ( cell )\uff0c\u63d0\u53d6\u5355\u5143\u683c\u5185\u6bb5\u843d\u7684\u6587\u672c\u3002 \u5408\u5e76\u6240\u6709\u63d0\u53d6\u7684\u6587\u672c\u548c OCR \u7ed3\u679c\u3002 \u4f7f\u7528 tqdm \u663e\u793a\u5904\u7406\u8fdb\u5ea6\u3002 # edu_document_loaders/edu_docloader.py \u6e90\u7801 from typing import Iterator from .edu_ocr import get_ocr # \u5bfc\u5165\u5fc5\u8981\u7684\u6a21\u5757 from tqdm import tqdm from docx.table import _Cell , Table # \u7528\u4e8e\u5904\u7406\u8868\u683c from docx.oxml.table import CT_Tbl # \u7528\u4e8e\u5904\u7406\u8868\u683cXML\u7ed3\u6784 from docx.oxml.text.paragraph import CT_P # \u7528\u4e8e\u5904\u7406\u6bb5\u843dXML\u7ed3\u6784 from docx.text.paragraph import Paragraph # \u7528\u4e8e\u5904\u7406\u6bb5\u843d\u5185\u5bb9 from docx import Document as Docu1 from docx.document import Document as Docu2 from docx import ImagePart # \u7528\u4e8e\u5904\u7406Word\u6587\u6863\u548c\u56fe\u7247 from PIL import Image # \u7528\u4e8e\u5904\u7406\u56fe\u7247 from io import BytesIO # \u7528\u4e8e\u5c06\u5b57\u8282\u6d41\u8f6c\u6362\u4e3a\u56fe\u7247 import numpy as np # \u7528\u4e8e\u5904\u7406\u6570\u7ec4 from langchain_core.documents import Document from langchain_core.document_loaders import BaseLoader class OCRDOCLoader ( BaseLoader ): \"\"\"An example document loader that reads a file line by line.\"\"\" def __init__ ( self , filepath : str ) -> None : \"\"\"Initialize the loader with a file path. Args: filepath_path: The path to the filepath to load. \"\"\" self . filepath = filepath def lazy_load ( self ) -> Iterator [ Document ]: # <-- Does not take any arguments \"\"\"A lazy loader that reads a file line by line. When you're implementing lazy load methods, you should use a generator to yield documents one by one. \"\"\" line = self . doc2text ( self . filepath ) yield Document ( page_content = line , metadata = { \"source\" : self . filepath }) def doc2text ( self , filepath ): # \u521b\u5efaOCR\u8bc6\u522b\u5bf9\u8c61 ocr = get_ocr () # print(f'ocr--\u300b{ocr}') # \u8f93\u51faOCR\u5bf9\u8c61\u4fe1\u606f # \u8bfb\u53d6Word\u6587\u6863 doc = Docu1 ( filepath ) # print(f'doc-->{doc}') # \u8f93\u51fa\u8bfb\u53d6\u5230\u7684\u6587\u6863\u4fe1\u606f # \u5b9a\u4e49\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u7528\u4e8e\u5b58\u50a8\u6700\u7ec8\u7684\u6587\u672c\u5185\u5bb9 resp = \"\" # \u5b9a\u4e49\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u7528\u4e8e\u904d\u5386\u6587\u6863\u4e2d\u7684\u5757\uff08\u6bb5\u843d\u3001\u8868\u683c\u7b49\uff09 def iter_block_items ( parent ): # \u5224\u65adparent\u5bf9\u8c61\u7c7b\u578b\uff0c\u5982\u679c\u662fDocument\u7c7b\u578b\uff0c\u5219\u83b7\u53d6\u5176\u5143\u7d20 if isinstance ( parent , Docu2 ): parent_elm = parent . element . body # \u5982\u679c\u662f\u8868\u683c\u5355\u5143\u683c\u7c7b\u578b\uff0c\u83b7\u53d6\u5355\u5143\u683c\u7684XML\u5143\u7d20 elif isinstance ( parent , _Cell ): parent_elm = parent . _tc else : raise ValueError ( \"OCRDOCLoader parse fail\" ) # \u5982\u679c\u90fd\u4e0d\u662f\uff0c\u5219\u629b\u51fa\u9519\u8bef # print(f'parent_elm--\u300b{parent_elm}') # print('*'*80) # \u904d\u5386parent_elm\u4e2d\u7684\u6240\u6709\u5b50\u5143\u7d20 for child in parent_elm . iterchildren (): # print(f'child--\u300b{child}') if isinstance ( child , CT_P ): # \u5982\u679c\u662f\u6bb5\u843d\u7c7b\u578b yield Paragraph ( child , parent ) # \u8fd4\u56de\u6bb5\u843d elif isinstance ( child , CT_Tbl ): # \u5982\u679c\u662f\u8868\u683c\u7c7b\u578b yield Table ( child , parent ) # \u8fd4\u56de\u8868\u683c # print(f'doc.paragraphs-->{doc.paragraphs}') # print(f'doc.tables-->{doc.tables}') # \u521b\u5efa\u8fdb\u5ea6\u6761\uff0c\u8868\u793a\u6587\u6863\u5904\u7406\u7684\u8fdb\u5ea6 b_unit = tqdm ( total = len ( doc . paragraphs ) + len ( doc . tables ), desc = \"OCRDOCLoader block index: 0\" ) # \u904d\u5386\u6587\u6863\u4e2d\u7684\u6240\u6709\u5757\uff08\u6bb5\u843d\u548c\u8868\u683c\uff09 for i , block in enumerate ( iter_block_items ( doc )): # \u66f4\u65b0\u8fdb\u5ea6\u6761\u63cf\u8ff0 b_unit . set_description ( \"OCRDOCLoader block index: {} \" . format ( i )) b_unit . refresh () # \u5237\u65b0\u8fdb\u5ea6\u6761 # \u5982\u679c\u5757\u662f\u6bb5\u843d\u7c7b\u578b if isinstance ( block , Paragraph ): resp += block . text . strip () + \" \\n \" # \u5c06\u6bb5\u843d\u6587\u672c\u52a0\u5165\u5230\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d # \u83b7\u53d6\u6bb5\u843d\u4e2d\u7684\u6240\u6709\u56fe\u7247 images = block . _element . xpath ( './/pic:pic' ) for image in images : # \u904d\u5386\u56fe\u7247\uff0c\u83b7\u53d6\u56fe\u7247ID for img_id in image . xpath ( './/a:blip/@r:embed' ): part = doc . part . related_parts [ img_id ] # \u6839\u636e\u56fe\u7247ID\u83b7\u53d6\u56fe\u7247\u5bf9\u8c61 if isinstance ( part , ImagePart ): # \u5982\u679c\u8be5\u90e8\u5206\u662f\u56fe\u7247 # BytesIO \u662f Python \u5185\u7f6e\u7684 io \u6a21\u5757\u4e2d\u7684\u4e00\u4e2a\u7c7b\uff0c\u7528\u4e8e\u5728\u5185\u5b58\u4e2d\u8bfb\u5199\u4e8c\u8fdb\u5236\u6570\u636e # part._blob \u901a\u5e38\u8868\u793a\u4ece\u67d0\u4e2a\u6587\u6863\uff08\u5982 DOCX \u6587\u4ef6\uff09\u4e2d\u63d0\u53d6\u7684\u4e8c\u8fdb\u5236\u5185\u5bb9\u3002 image = Image . open ( BytesIO ( part . _blob )) # \u6253\u5f00\u56fe\u7247 result , _ = ocr ( np . array ( image )) # \u4f7f\u7528OCR\u8bc6\u522b\u56fe\u7247\u4e2d\u7684\u6587\u5b57 if result : # \u5982\u679c\u8bc6\u522b\u7ed3\u679c\u4e0d\u4e3a\u7a7a ocr_result = [ line [ 1 ] for line in result ] # \u63d0\u53d6\u8bc6\u522b\u51fa\u7684\u6587\u5b57 resp += \" \\n \" . join ( ocr_result ) # \u5c06\u8bc6\u522b\u7ed3\u679c\u52a0\u5165\u8fd4\u56de\u6587\u672c\u4e2d # \u5982\u679c\u5757\u662f\u8868\u683c\u7c7b\u578b elif isinstance ( block , Table ): # \u904d\u5386\u8868\u683c\u4e2d\u7684\u6240\u6709\u884c\u548c\u5355\u5143\u683c for row in block . rows : for cell in row . cells : for paragraph in cell . paragraphs : resp += paragraph . text . strip () + \" \\n \" # \u5c06\u5355\u5143\u683c\u5185\u7684\u6bb5\u843d\u6587\u672c\u52a0\u5165\u8fd4\u56de\u6587\u672c\u4e2d # \u66f4\u65b0\u8fdb\u5ea6\u6761 b_unit . update ( 1 ) # \u8fd4\u56de\u63d0\u53d6\u7684\u6587\u672c\u5185\u5bb9 return resp if __name__ == '__main__' : docx_loader = OCRDOCLoader ( filepath = './data/b.docx' ) doc = docx_loader . load () print ( doc )","title":"Word \u6587\u6863\u52a0\u8f7d\u5668 (edu_docloader.py)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#powerpoint-edu_pptloaderpy","text":"OCRPPTLoader \u7c7b\u7528\u4e8e\u5904\u7406 .ppt \u548c .pptx \u6587\u4ef6\u3002 \u529f\u80fd : \u89e3\u6790 PPT/PPTX \u6587\u4ef6\uff0c\u63d0\u53d6\u5f62\u72b6\uff08\u6587\u672c\u6846\u3001\u8868\u683c\uff09\u3001\u56fe\u7247\u4e2d\u7684\u6587\u672c\u3002 \u4f9d\u8d56 : python-pptx , Pillow , numpy , tqdm \u4ee5\u53ca edu_ocr.py \u3002 \u6838\u5fc3\u903b\u8f91 : \u4f7f\u7528 pptx.Presentation() \u6253\u5f00\u6f14\u793a\u6587\u7a3f\u3002 \u9010\u5f20\u5e7b\u706f\u7247 ( slide ) \u5904\u7406\u3002 \u987a\u5e8f\u5904\u7406 : \u5c06\u5e7b\u706f\u7247\u4e0a\u7684\u5f62\u72b6 ( shape ) \u6309\u89c6\u89c9\u987a\u5e8f\uff08 top , left \u5750\u6807\uff09\u6392\u5e8f\u3002 \u5b9a\u4e49 extract_text \u9012\u5f52\u51fd\u6570\u5904\u7406\u5355\u4e2a\u5f62\u72b6\uff1a \u63d0\u53d6\u6587\u672c\u6846 ( shape.has_text_frame ) \u7684\u6587\u672c\u3002 \u63d0\u53d6\u8868\u683c ( shape.has_table ) \u5185\u6240\u6709\u5355\u5143\u683c\u7684\u6587\u672c\u3002 \u5982\u679c\u5f62\u72b6\u662f\u56fe\u7247 ( shape.shape_type == 13 )\uff0c\u63d0\u53d6\u56fe\u7247\u6570\u636e ( shape.image.blob )\uff0c\u6267\u884c OCR\u3002 \u5982\u679c\u5f62\u72b6\u662f\u7ec4\u5408 ( shape.shape_type == 6 )\uff0c\u9012\u5f52\u8c03\u7528 extract_text \u5904\u7406\u5176\u5305\u542b\u7684\u5b50\u5f62\u72b6\u3002 \u904d\u5386\u6392\u5e8f\u540e\u7684\u5f62\u72b6\uff0c\u8c03\u7528 extract_text \u3002 \u5408\u5e76\u6240\u6709\u63d0\u53d6\u7684\u6587\u672c\u548c OCR \u7ed3\u679c\u3002 \u4f7f\u7528 tqdm \u663e\u793a\u5904\u7406\u8fdb\u5ea6\u3002 # edu_document_loaders/edu_pptloader.py \u6e90\u7801 from typing import Iterator from edu_ocr import get_ocr from langchain_core.documents import Document from langchain_core.document_loaders import BaseLoader from pptx import Presentation from PIL import Image import numpy as np from io import BytesIO from tqdm import tqdm class OCRPPTLoader ( BaseLoader ): \"\"\"An example document loader that reads a file line by line.\"\"\" def __init__ ( self , filepath : str ) -> None : \"\"\"Initialize the loader with a file path. Args: filepath: The path to the ppt to load. \"\"\" self . filepath = filepath def lazy_load ( self ) -> Iterator [ Document ]: # <-- Does not take any arguments \"\"\"A lazy loader that reads a file line by line. When you're implementing lazy load methods, you should use a generator to yield documents one by one. \"\"\" line = self . ppt2text ( self . filepath ) yield Document ( page_content = line , metadata = { \"source\" : self . filepath }) def ppt2text ( self , filepath ): # \u6253\u5f00\u6307\u5b9a\u8def\u5f84\u7684 PowerPoint \u6587\u4ef6 prs = Presentation ( filepath ) print ( f 'prs--> { prs } ' ) # \u83b7\u53d6 OCR \u529f\u80fd\u7684\u5b9e\u4f8b ocr = get_ocr () # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u5b58\u50a8\u63d0\u53d6\u7684\u6587\u672c\u5185\u5bb9 resp = \"\" def extract_text ( shape ): # nonlocal\u6307\u660eresp\u975e\u5168\u5c40\u975e\u5c40\u90e8\uff0c\u800c\u662f\u5916\u90e8\u5d4c\u5957\u51fd\u6570\u4e2d\u7684\u53d8\u91cf\uff0c # \u5141\u8bb8\u5185\u90e8\u51fd\u6570\u8bbf\u95ee\u548c\u4fee\u6539\u5916\u90e8\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cfresp nonlocal resp # \u68c0\u67e5\u5f62\u72b6\u662f\u5426\u6709\u6587\u672c\u6846 if shape . has_text_frame : # \u5c06\u6587\u672c\u6846\u4e2d\u7684\u6587\u672c\u6dfb\u52a0\u5230resp\u4e2d\uff0c\u5e76\u53bb\u6389\u524d\u540e\u7a7a\u683c resp += shape . text . strip () + \" \\n \" # \u68c0\u67e5\u5f62\u72b6\u662f\u5426\u4e3a\u8868\u683c if shape . has_table : # \u904d\u5386\u8868\u683c\u7684\u6bcf\u4e00\u884c for row in shape . table . rows : # \u904d\u5386\u6bcf\u4e00\u884c\u4e2d\u7684\u6bcf\u4e2a\u5355\u5143\u683c for cell in row . cells : # \u904d\u5386\u5355\u5143\u683c\u4e2d\u7684\u6bcf\u4e2a\u6bb5\u843d for paragraph in cell . text_frame . paragraphs : # \u5c06\u5355\u5143\u683c\u4e2d\u7684\u6587\u672c\u6dfb\u52a0\u5230resp\u4e2d\uff0c\u5e76\u53bb\u6389\u524d\u540e\u7a7a\u683c resp += paragraph . text . strip () + \" \\n \" # \u68c0\u67e5\u5f62\u72b6\u662f\u5426\u4e3a\u56fe\u7247\uff08shape_type == 13\uff09 if shape . shape_type == 13 : # 13 \u8868\u793a\u56fe\u7247 # \u4f7f\u7528 BytesIO \u6253\u5f00\u56fe\u7247\u6570\u636e\u5e76\u8f6c\u6362\u4e3a\u56fe\u50cf\u5bf9\u8c61 image = Image . open ( BytesIO ( shape . image . blob )) # \u4f7f\u7528 OCR \u5904\u7406\u56fe\u50cf\u5e76\u83b7\u53d6\u7ed3\u679c result , _ = ocr ( np . array ( image )) if result : # \u5982\u679c OCR \u6709\u7ed3\u679c # \u63d0\u53d6 OCR \u7ed3\u679c\u4e2d\u7684\u6587\u672c\u884c ocr_result = [ line [ 1 ] for line in result ] # \u5c06 OCR \u63d0\u53d6\u7684\u6587\u672c\u6dfb\u52a0\u5230resp\u4e2d\uff0c\u4ee5\u6362\u884c\u5206\u9694 resp += \" \\n \" . join ( ocr_result ) # \u68c0\u67e5\u5f62\u72b6\u662f\u5426\u4e3a\u7ec4\u5408\u5f62\u72b6\uff08shape_type == 6\uff09 elif shape . shape_type == 6 : # 6 \u8868\u793a\u7ec4\u5408 # \u904d\u5386\u7ec4\u5408\u5f62\u72b6\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5f62\u72b6\uff0c\u9012\u5f52\u8c03\u7528extract_text\u51fd\u6570 for child_shape in shape . shapes : extract_text ( child_shape ) # \u521b\u5efa\u4e00\u4e2a\u8fdb\u5ea6\u6761\uff0c\u7528\u4e8e\u663e\u793a\u5e7b\u706f\u7247\u5904\u7406\u8fdb\u5ea6\uff0c\u521d\u59cb\u603b\u6570\u4e3a\u5e7b\u706f\u7247\u6570\u91cf b_unit = tqdm ( total = len ( prs . slides ), desc = \"OCRPPTLoader slide index: 1\" ) # \u904d\u5386\u6240\u6709\u5e7b\u706f\u7247 for slide_number , slide in enumerate ( prs . slides , start = 1 ): # \u66f4\u65b0\u8fdb\u5ea6\u6761\u63cf\u8ff0\uff0c\u663e\u793a\u5f53\u524d\u5904\u7406\u7684\u5e7b\u706f\u7247\u7d22\u5f15 b_unit . set_description ( \"OCRPPTLoader slide index: {} \" . format ( slide_number )) b_unit . refresh () # \u5237\u65b0\u8fdb\u5ea6\u6761\u663e\u793a # \u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u5bf9\u5f62\u72b6\u8fdb\u884c\u6392\u5e8f\u904d\u5386 sorted_shapes = sorted ( slide . shapes , key = lambda x : ( x . top , x . left )) for shape in sorted_shapes : extract_text ( shape ) # \u8c03\u7528extract_text\u51fd\u6570\u63d0\u53d6\u5f53\u524d\u5f62\u72b6\u7684\u6587\u672c\u5185\u5bb9 b_unit . update ( 1 ) # \u66f4\u65b0\u8fdb\u5ea6\u6761\uff0c\u8868\u793a\u5904\u7406\u4e86\u4e00\u5f20\u5e7b\u706f\u7247 return resp # \u8fd4\u56de\u63d0\u53d6\u5230\u7684\u6240\u6709\u6587\u672c\u5185\u5bb9 if __name__ == '__main__' : img_loader = OCRPPTLoader ( filepath = './data/01.pptx' ) doc = img_loader . load () print ( doc )","title":"PowerPoint \u6587\u6863\u52a0\u8f7d\u5668 (edu_pptloader.py)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#edu_imgloaderpy","text":"OCRIMGLoader \u7c7b\u7528\u4e8e\u76f4\u63a5\u5904\u7406\u56fe\u50cf\u6587\u4ef6\uff08\u5982 .png , .jpg \uff09\u3002 \u529f\u80fd : \u5bf9\u5355\u4e2a\u56fe\u50cf\u6587\u4ef6\u6267\u884c OCR\u3002 \u4f9d\u8d56 : Pillow , numpy \u4ee5\u53ca edu_ocr.py \u3002 \u6838\u5fc3\u903b\u8f91 : \u63a5\u6536\u56fe\u50cf\u6587\u4ef6\u8def\u5f84 img_path \u3002 \u8c03\u7528 get_ocr() \u83b7\u53d6 OCR \u5b9e\u4f8b\u3002 \u76f4\u63a5\u5bf9\u56fe\u50cf\u6587\u4ef6\u6267\u884c OCR\u3002 \u5c06 OCR \u7ed3\u679c\uff08\u6240\u6709\u8bc6\u522b\u51fa\u7684\u6587\u672c\u884c\uff09\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 # edu_document_loaders/edu_imgloader.py \u6e90\u7801 from typing import Iterator from edu_ocr import get_ocr from langchain_core.documents import Document from langchain_core.document_loaders import BaseLoader class OCRIMGLoader ( BaseLoader ): \"\"\"An example document loader that reads a file line by line.\"\"\" def __init__ ( self , img_path : str ) -> None : \"\"\"Initialize the loader with a file path. Args: img_path: The path to the img to load. \"\"\" self . img_path = img_path def lazy_load ( self ) -> Iterator [ Document ]: # <-- Does not take any arguments \"\"\"A lazy loader that reads a file line by line. When you're implementing lazy load methods, you should use a generator to yield documents one by one. \"\"\" line = self . img2text () yield Document ( page_content = line , metadata = { \"source\" : self . img_path }) def img2text ( self ): resp = \"\" ocr = get_ocr () result , _ = ocr ( self . img_path ) if result : ocr_result = [ line [ 1 ] for line in result ] resp += \" \\n \" . join ( ocr_result ) return resp if __name__ == '__main__' : img_loader = OCRIMGLoader ( img_path = './data/test_img.png' ) doc = img_loader . load () print ( doc )","title":"\u56fe\u50cf\u6587\u4ef6\u52a0\u8f7d\u5668 (edu_imgloader.py)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#edu_text_spliter","text":"\u5c06\u89e3\u6790\u5f97\u5230\u7684\u957f\u6587\u672c\u5207\u5206\u6210\u9002\u5408\u5411\u91cf\u5316\u548c\u68c0\u7d22\u7684\u5c0f\u5757\u662f RAG \u6d41\u7a0b\u4e2d\u7684\u5173\u952e\u4e00\u6b65\u3002\u672c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e24\u79cd\u6587\u672c\u5207\u5206\u5de5\u5177\u3002","title":"\u6587\u672c\u5207\u5206\u5de5\u5177 (edu_text_spliter/)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#edu_chinese_recursive_text_splitterpy","text":"ChineseRecursiveTextSplitter \u7c7b\u662f\u9488\u5bf9\u4e2d\u6587\u6587\u672c\u7279\u70b9\u5b9a\u5236\u7684\u5207\u5206\u5668\u3002 \u529f\u80fd : \u5c06\u957f\u6587\u672c\u6309\u7167\u9884\u8bbe\u7684\u4e2d\u6587\u5206\u9694\u7b26\u9012\u5f52\u5730\u5207\u5206\u6210\u6307\u5b9a\u5927\u5c0f\u7684\u5757\u3002 \u7ee7\u627f : langchain.text_splitter.RecursiveCharacterTextSplitter \u3002 \u6838\u5fc3\u5b9a\u5236 : _separators : \u5b9a\u4e49\u4e86\u7528\u4e8e\u5207\u5206\u7684\u3001\u6309\u4f18\u5148\u7ea7\u6392\u5217\u7684\u5206\u9694\u7b26\u5217\u8868\uff0c\u5305\u62ec\u5e38\u89c1\u7684\u4e2d\u6587\u6807\u70b9\u548c\u6362\u884c\u7b26\uff0c\u5982 [\"\\n\\n\", \"\\n\", \"\u3002|\uff01|\uff1f\", \"\\.\\s|\\!\\s|\\?\\s\", \"\uff1b|;\\s\", \"\uff0c|,\\s\"] \u3002\u8fd9\u6709\u52a9\u4e8e\u5728\u5207\u5206\u65f6\u5c3d\u91cf\u4fdd\u6301\u53e5\u5b50\u7684\u5b8c\u6574\u6027\u3002 \u652f\u6301\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9a\u4e49\u5206\u9694\u7b26 ( is_separator_regex=True )\u3002 \u901a\u8fc7 chunk_size \u548c chunk_overlap \u63a7\u5236\u5207\u5206\u5757\u7684\u5927\u5c0f\u548c\u91cd\u53e0\u3002 # edu_text_spliter/edu_chinese_recursive_text_splitter.py \u6e90\u7801 import re from typing import List , Optional , Any from langchain.text_splitter import RecursiveCharacterTextSplitter import logging logger = logging . getLogger ( __name__ ) def _split_text_with_regex_from_end ( text : str , separator : str , keep_separator : bool ) -> List [ str ]: # Now that we have the separator, split the text if separator : if keep_separator : # The parentheses in the pattern keep the delimiters in the result. _splits = re . split ( f \"( { separator } )\" , text ) splits = [ \"\" . join ( i ) for i in zip ( _splits [ 0 :: 2 ], _splits [ 1 :: 2 ])] if len ( _splits ) % 2 == 1 : splits += _splits [ - 1 :] # splits = [_splits[0]] + splits else : splits = re . split ( separator , text ) else : splits = list ( text ) return [ s for s in splits if s != \"\" ] class ChineseRecursiveTextSplitter ( RecursiveCharacterTextSplitter ): def __init__ ( self , separators : Optional [ List [ str ]] = None , keep_separator : bool = True , is_separator_regex : bool = True , ** kwargs : Any , ) -> None : \"\"\"Create a new TextSplitter.\"\"\" super () . __init__ ( keep_separator = keep_separator , ** kwargs ) self . _separators = separators or [ \" \\n\\n \" , \" \\n \" , \"\u3002|\uff01|\uff1f\" , \"\\.\\s|\\!\\s|\\?\\s\" , \"\uff1b|;\\s\" , \"\uff0c|,\\s\" ] self . _is_separator_regex = is_separator_regex def _split_text ( self , text : str , separators : List [ str ]) -> List [ str ]: \"\"\"Split incoming text and return chunks.\"\"\" final_chunks = [] # Get appropriate separator to use separator = separators [ - 1 ] new_separators = [] for i , _s in enumerate ( separators ): _separator = _s if self . _is_separator_regex else re . escape ( _s ) if _s == \"\" : separator = _s break if re . search ( _separator , text ): separator = _s new_separators = separators [ i + 1 :] break _separator = separator if self . _is_separator_regex else re . escape ( separator ) splits = _split_text_with_regex_from_end ( text , _separator , self . _keep_separator ) # Now go merging things, recursively splitting longer texts. _good_splits = [] _separator = \"\" if self . _keep_separator else separator for s in splits : if self . _length_function ( s ) < self . _chunk_size : _good_splits . append ( s ) else : if _good_splits : merged_text = self . _merge_splits ( _good_splits , _separator ) final_chunks . extend ( merged_text ) _good_splits = [] if not new_separators : final_chunks . append ( s ) else : other_info = self . _split_text ( s , new_separators ) final_chunks . extend ( other_info ) if _good_splits : merged_text = self . _merge_splits ( _good_splits , _separator ) final_chunks . extend ( merged_text ) return [ re . sub ( r \"\\n{2,}\" , \" \\n \" , chunk . strip ()) for chunk in final_chunks if chunk . strip () != \"\" ] if __name__ == \"__main__\" : text_splitter = ChineseRecursiveTextSplitter ( keep_separator = True , is_separator_regex = True , chunk_size = 150 , chunk_overlap = 10 ) ls = [ \"\"\"\u4e2d\u56fd\u5bf9\u5916\u8d38\u6613\u5f62\u52bf\u62a5\u544a\uff0875\u9875\uff09\u3002\u524d 10 \u4e2a\u6708\uff0c\u4e00\u822c\u8d38\u6613\u8fdb\u51fa\u53e3 19.5 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 25.1%\uff0c \u6bd4\u6574\u4f53\u8fdb\u51fa\u53e3\u589e\u901f\u9ad8\u51fa 2.9 \u4e2a\u767e\u5206\u70b9\uff0c\u5360\u8fdb\u51fa\u53e3\u603b\u989d\u7684 61.7%\uff0c\u8f83\u53bb\u5e74\u540c\u671f\u63d0\u5347 1.6 \u4e2a\u767e\u5206\u70b9\u3002\u5176\u4e2d\uff0c\u4e00\u822c\u8d38\u6613\u51fa\u53e3 10.6 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 25.3%\uff0c\u5360\u51fa\u53e3\u603b\u989d\u7684 60.9%\uff0c\u63d0\u5347 1.5 \u4e2a\u767e\u5206\u70b9\uff1b\u8fdb\u53e38.9\u4e07\u4ebf\u5143\uff0c\u589e\u957f24.9%\uff0c\u5360\u8fdb\u53e3\u603b\u989d\u768462.7%\uff0c \u63d0\u5347 1.8 \u4e2a\u767e\u5206\u70b9\u3002\u52a0\u5de5\u8d38\u6613\u8fdb\u51fa\u53e3 6.8 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 11.8%\uff0c \u5360\u8fdb\u51fa\u53e3\u603b\u989d\u7684 21.5%\uff0c\u51cf\u5c11 2.0 \u4e2a\u767e\u5206\u70b9\u3002\u5176\u4e2d\uff0c\u51fa\u53e3\u589e \u957f 10.4%\uff0c\u5360\u51fa\u53e3\u603b\u989d\u7684 24.3%\uff0c\u51cf\u5c11 2.6 \u4e2a\u767e\u5206\u70b9\uff1b\u8fdb\u53e3\u589e \u957f 14.2%\uff0c\u5360\u8fdb\u53e3\u603b\u989d\u7684 18.0%\uff0c\u51cf\u5c11 1.2 \u4e2a\u767e\u5206\u70b9\u3002\u6b64\u5916\uff0c \u4ee5\u4fdd\u7a0e\u7269\u6d41\u65b9\u5f0f\u8fdb\u51fa\u53e3 3.96 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 27.9%\u3002\u5176\u4e2d\uff0c\u51fa \u53e3 1.47 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 38.9%\uff1b\u8fdb\u53e3 2.49 \u4e07\u4ebf\u5143\uff0c\u589e\u957f 22.2%\u3002\u524d\u4e09\u5b63\u5ea6\uff0c\u4e2d\u56fd\u670d\u52a1\u8d38\u6613\u7ee7\u7eed\u4fdd\u6301\u5feb\u901f\u589e\u957f\u6001\u52bf\u3002\u670d\u52a1 \u8fdb\u51fa\u53e3\u603b\u989d 37834.3 \u4ebf\u5143\uff0c\u589e\u957f 11.6%\uff1b\u5176\u4e2d\u670d\u52a1\u51fa\u53e3 17820.9 \u4ebf\u5143\uff0c\u589e\u957f 27.3%\uff1b\u8fdb\u53e3 20013.4 \u4ebf\u5143\uff0c\u589e\u957f 0.5%\uff0c\u8fdb\u53e3\u589e \u901f\u5b9e\u73b0\u4e86\u75ab\u60c5\u4ee5\u6765\u7684\u9996\u6b21\u8f6c\u6b63\u3002\u670d\u52a1\u51fa\u53e3\u589e\u5e45\u5927\u4e8e\u8fdb\u53e3 26.8 \u4e2a\u767e\u5206\u70b9\uff0c\u5e26\u52a8\u670d\u52a1\u8d38\u6613\u9006\u5dee\u4e0b\u964d 62.9%\u81f3 2192.5 \u4ebf\u5143\u3002\u670d \u52a1\u8d38\u6613\u7ed3\u6784\u6301\u7eed\u4f18\u5316\uff0c\u77e5\u8bc6\u5bc6\u96c6\u578b\u670d\u52a1\u8fdb\u51fa\u53e3 16917.7 \u4ebf\u5143\uff0c \u589e\u957f 13.3%\uff0c\u5360\u670d\u52a1\u8fdb\u51fa\u53e3\u603b\u989d\u7684\u6bd4\u91cd\u8fbe\u5230 44.7%\uff0c\u63d0\u5347 0.7 \u4e2a\u767e\u5206\u70b9\u3002 \u4e8c\u3001\u4e2d\u56fd\u5bf9\u5916\u8d38\u6613\u53d1\u5c55\u73af\u5883\u5206\u6790\u548c\u5c55\u671b \u5168\u7403\u75ab\u60c5\u8d77\u4f0f\u53cd\u590d\uff0c\u7ecf\u6d4e\u590d\u82cf\u5206\u5316\u52a0\u5267\uff0c\u5927\u5b97\u5546\u54c1\u4ef7\u683c \u4e0a\u6da8\u3001\u80fd\u6e90\u7d27\u7f3a\u3001\u8fd0\u529b\u7d27\u5f20\u53ca\u53d1\u8fbe\u7ecf\u6d4e\u4f53\u653f\u7b56\u8c03\u6574\u5916\u6ea2\u7b49\u98ce \u9669\u4ea4\u7ec7\u53e0\u52a0\u3002\u540c\u65f6\u4e5f\u8981\u770b\u5230\uff0c\u6211\u56fd\u7ecf\u6d4e\u957f\u671f\u5411\u597d\u7684\u8d8b\u52bf\u6ca1\u6709 \u6539\u53d8\uff0c\u5916\u8d38\u4f01\u4e1a\u97e7\u6027\u548c\u6d3b\u529b\u4e0d\u65ad\u589e\u5f3a\uff0c\u65b0\u4e1a\u6001\u65b0\u6a21\u5f0f\u52a0\u5feb\u53d1 \u5c55\uff0c\u521b\u65b0\u8f6c\u578b\u6b65\u4f10\u63d0\u901f\u3002\u4ea7\u4e1a\u94fe\u4f9b\u5e94\u94fe\u9762\u4e34\u6311\u6218\u3002\u7f8e\u6b27\u7b49\u52a0\u5feb\u51fa\u53f0\u5236\u9020\u4e1a\u56de\u8fc1\u8ba1 \u5212\uff0c\u52a0\u901f\u4ea7\u4e1a\u94fe\u4f9b\u5e94\u94fe\u672c\u571f\u5e03\u5c40\uff0c\u8de8\u56fd\u516c\u53f8\u8c03\u6574\u4ea7\u4e1a\u94fe\u4f9b\u5e94 \u94fe\uff0c\u5168\u7403\u53cc\u94fe\u9762\u4e34\u65b0\u4e00\u8f6e\u91cd\u6784\uff0c\u533a\u57df\u5316\u3001\u8fd1\u5cb8\u5316\u3001\u672c\u571f\u5316\u3001 \u77ed\u94fe\u5316\u8d8b\u52bf\u51f8\u663e\u3002\u75ab\u82d7\u4f9b\u5e94\u4e0d\u8db3\uff0c\u5236\u9020\u4e1a\u201c\u7f3a\u82af\u201d\u3001\u7269\u6d41\u53d7\u9650\u3001 \u8fd0\u4ef7\u9ad8\u4f01\uff0c\u5168\u7403\u4ea7\u4e1a\u94fe\u4f9b\u5e94\u94fe\u9762\u4e34\u538b\u529b\u3002 \u5168\u7403\u901a\u80c0\u6301\u7eed\u9ad8\u4f4d\u8fd0\u884c\u3002\u80fd\u6e90\u4ef7\u683c\u4e0a\u6da8\u52a0\u5927\u4e3b\u8981\u7ecf\u6d4e\u4f53 \u7684\u901a\u80c0\u538b\u529b\uff0c\u589e\u52a0\u5168\u7403\u7ecf\u6d4e\u590d\u82cf\u7684\u4e0d\u786e\u5b9a\u6027\u3002\u4e16\u754c\u94f6\u884c\u4eca\u5e74 10 \u6708\u53d1\u5e03\u300a\u5927\u5b97\u5546\u54c1\u5e02\u573a\u5c55\u671b\u300b\u6307\u51fa\uff0c\u80fd\u6e90\u4ef7\u683c\u5728 2021 \u5e74 \u5927\u6da8\u903e 80%\uff0c\u5e76\u4e14\u4ecd\u5c06\u5728 2022 \u5e74\u5c0f\u5e45\u4e0a\u6da8\u3002IMF \u6307\u51fa\uff0c\u5168 \u7403\u901a\u80c0\u4e0a\u884c\u98ce\u9669\u52a0\u5267\uff0c\u901a\u80c0\u524d\u666f\u5b58\u5728\u5de8\u5927\u4e0d\u786e\u5b9a\u6027\u3002\"\"\" , ] # text = \"\"\"\"\"\" for inum , text in enumerate ( ls ): print ( inum ) chunks = text_splitter . split_text ( text ) for chunk in chunks : print ( chunk )","title":"\u4e2d\u6587\u9012\u5f52\u6587\u672c\u5207\u5206\u5668 (edu_chinese_recursive_text_splitter.py)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#edu_model_text_spliterpy","text":"AliTextSplitter \u7c7b\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u57fa\u4e8e AI \u6a21\u578b\u7684\u6587\u672c\u5207\u5206\u65b9\u6cd5\u3002 \u529f\u80fd : \u5229\u7528\u9884\u8bad\u7ec3\u7684\u6587\u6863\u8bed\u4e49\u5206\u5272\u6a21\u578b\u5bf9\u6587\u672c\u8fdb\u884c\u5207\u5206\u3002 \u7ee7\u627f : langchain.text_splitter.CharacterTextSplitter \u3002 \u6838\u5fc3\u903b\u8f91 : \u521d\u59cb\u5316\u65f6\u6307\u5b9a\u662f\u5426\u5904\u7406 PDF \u6587\u672c\uff08\u5305\u542b\u7279\u5b9a\u7684\u6362\u884c\u7b26\u548c\u7a7a\u683c\u5904\u7406\u903b\u8f91\uff09\u3002 \u8c03\u7528 modelscope.pipeline \u52a0\u8f7d\u6307\u5b9a\u7684\u6587\u6863\u5206\u5272\u6a21\u578b\uff08\u4ee3\u7801\u4e2d\u4e3a MODEL_PATH['segment_model']['ali_model'] \uff0c\u9700\u8981\u914d\u7f6e configs.py \u6216\u76f4\u63a5\u6307\u5b9a\u6a21\u578b\u8def\u5f84/\u540d\u79f0\uff0c\u5982 'damo/nlp_bert_document-segmentation_chinese-base'\uff09\u3002\u6a21\u578b\u8fd0\u884c\u5728 CPU \u4e0a\u3002 \u5c06\u8f93\u5165\u6587\u672c\u4f20\u9012\u7ed9\u6a21\u578b pipeline \u8fdb\u884c\u5904\u7406\u3002 \u6a21\u578b\u8fd4\u56de\u6309\u8bed\u4e49\u5206\u5272\u597d\u7684\u6587\u672c\u6bb5\u843d\uff0c\u811a\u672c\u5c06\u5176\u6574\u7406\u6210\u5217\u8868\u8fd4\u56de\u3002 \u4f18\u52bf : \u7406\u8bba\u4e0a\u80fd\u66f4\u597d\u5730\u6839\u636e\u5185\u5bb9\u7684\u8bed\u4e49\u5173\u8054\u6027\u8fdb\u884c\u5207\u5206\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u4f9d\u8d56\u6807\u70b9\u7b26\u53f7\u3002 \u52a3\u52bf : \u9700\u8981\u989d\u5916\u52a0\u8f7d\u4e00\u4e2a\u6a21\u578b\uff0c\u589e\u52a0\u4e86\u8ba1\u7b97\u5f00\u9500\u548c\u4f9d\u8d56\u3002 # edu_text_spliter/edu_model_text_spliter.py \u6e90\u7801 from langchain.text_splitter import CharacterTextSplitter import re from typing import List from modelscope.pipelines import pipeline # from configs import MODEL_PATH # Assume MODEL_PATH is defined elsewhere or replaced # Placeholder for MODEL_PATH if configs.py is not available MODEL_PATH = { 'segment_model' : { # Replace with the actual model name or path from ModelScope 'ali_model' : 'damo/nlp_bert_document-segmentation_chinese-base' } } class AliTextSplitter ( CharacterTextSplitter ): def __init__ ( self , pdf : bool = False , ** kwargs ): super () . __init__ ( ** kwargs ) self . pdf = pdf # Initialize the pipeline here or ensure it's initialized before split_text is called # Consider adding error handling for model loading try : self . pipeline = pipeline ( task = \"document-segmentation\" , model = MODEL_PATH [ 'segment_model' ][ 'ali_model' ], device = \"cpu\" # Specify CPU device ) except Exception as e : print ( f \"Error initializing ModelScope pipeline: { e } \" ) self . pipeline = None def split_text ( self , text : str ) -> List [ str ]: if not self . pipeline : print ( \"ModelScope pipeline not initialized. Returning empty list.\" ) return [] # Preprocessing specific to PDF text if needed if self . pdf : text = re . sub ( r \"\\n{3,}\" , r \"\\n\" , text ) # Replace multiple spaces with a single space text = re . sub ( '\\s+' , \" \" , text ) # Consider removing single newlines carefully, might merge unrelated lines # text = text.replace(\"\\n\", \" \") # This might be too aggressive text = re . sub ( \" \\n\\n \" , \" \\n \" , text ) # Keep paragraph breaks try : result = self . pipeline ( documents = text ) # The default output format might be a single string with \"\\n\\t\" separators sent_list = [ segment . strip () for segment in result [ \"text\" ] . split ( \" \\n\\t \" ) if segment . strip ()] return sent_list except Exception as e : print ( f \"Error during ModelScope document segmentation: { e } \" ) # Fallback behavior: maybe split by paragraph or return the original text in a list return text . split ( ' \\n\\n ' ) # Simple fallback if __name__ == '__main__' : # Example usage requires modelscope and relevant model downloaded # pip install \"modelscope[nlp]\" tensorflow torch -f https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html sample_text = \"\"\"\u79fb\u52a8\u7aef\u8bed\u97f3\u5524\u9192\u6a21\u578b\uff0c\u68c0\u6d4b\u5173\u952e\u8bcd\u4e3a\u201c\u5c0f\u4e91\u5c0f\u4e91\u201d\u3002 \u6a21\u578b\u4e3b\u4f53\u4e3a4\u5c42FSMN\u7ed3\u6784\uff0c\u4f7f\u7528CTC\u8bad\u7ec3\u51c6\u5219\uff0c\u53c2\u6570\u91cf750K\uff0c\u9002\u7528\u4e8e\u79fb\u52a8\u7aef\u8bbe\u5907\u8fd0\u884c\u3002 \u6a21\u578b\u8f93\u5165\u4e3aFbank\u7279\u5f81\uff0c\u8f93\u51fa\u4e3a\u57fa\u4e8echar\u5efa\u6a21\u7684\u4e2d\u6587\u5168\u96c6token\u9884\u6d4b\uff0c\u6d4b\u8bd5\u5de5\u5177\u6839\u636e\u6bcf\u4e00\u5e27\u7684\u9884\u6d4b\u6570\u636e\u8fdb\u884c\u540e\u5904\u7406\u5f97\u5230\u8f93\u5165\u97f3\u9891\u7684\u5b9e\u65f6\u68c0\u6d4b\u7ed3\u679c\u3002 \u6a21\u578b\u8bad\u7ec3\u91c7\u7528\u201cbasetrain + finetune\u201d\u7684\u6a21\u5f0f\uff0cbasetrain\u8fc7\u7a0b\u4f7f\u7528\u5927\u91cf\u5185\u90e8\u79fb\u52a8\u7aef\u6570\u636e\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4f7f\u75281\u4e07\u6761\u8bbe\u5907\u7aef\u5f55\u5236\u5b89\u9759\u573a\u666f\u201c\u5c0f\u4e91\u5c0f\u4e91\u201d\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u6700\u7ec8\u9762\u5411\u4e1a\u52a1\u7684\u6a21\u578b\u3002 \u540e\u7eed\u7528\u6237\u53ef\u5728basetrain\u6a21\u578b\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u5176\u4ed6\u5173\u952e\u8bcd\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u65b0\u7684\u8bed\u97f3\u5524\u9192\u6a21\u578b\uff0c\u4f46\u6682\u65f6\u672a\u5f00\u653e\u6a21\u578bfinetune\u529f\u80fd\u3002\"\"\" # Assuming MODEL_PATH is correctly configured and modelscope is installed model_split = AliTextSplitter () result = model_split . split_text ( text = sample_text ) print ( result ) # Expected output (example, actual output depends on the model): # ['\u79fb\u52a8\u7aef\u8bed\u97f3\u5524\u9192\u6a21\u578b\uff0c\u68c0\u6d4b\u5173\u952e\u8bcd\u4e3a\u201c\u5c0f\u4e91\u5c0f\u4e91\u201d\u3002', '\u6a21\u578b\u4e3b\u4f53\u4e3a4\u5c42FSMN\u7ed3\u6784\uff0c\u4f7f\u7528CTC\u8bad\u7ec3\u51c6\u5219\uff0c\u53c2\u6570\u91cf750K\uff0c\u9002\u7528\u4e8e\u79fb\u52a8\u7aef\u8bbe\u5907\u8fd0\u884c\u3002', '\u6a21\u578b\u8f93\u5165\u4e3aFbank\u7279\u5f81\uff0c\u8f93\u51fa\u4e3a\u57fa\u4e8echar\u5efa\u6a21\u7684\u4e2d\u6587\u5168\u96c6token\u9884\u6d4b\uff0c\u6d4b\u8bd5\u5de5\u5177\u6839\u636e\u6bcf\u4e00\u5e27\u7684\u9884\u6d4b\u6570\u636e\u8fdb\u884c\u540e\u5904\u7406\u5f97\u5230\u8f93\u5165\u97f3\u9891\u7684\u5b9e\u65f6\u68c0\u6d4b\u7ed3\u679c\u3002', '\u6a21\u578b\u8bad\u7ec3\u91c7\u7528\u201cbasetrain + finetune\u201d\u7684\u6a21\u5f0f\uff0cbasetrain\u8fc7\u7a0b\u4f7f\u7528\u5927\u91cf\u5185\u90e8\u79fb\u52a8\u7aef\u6570\u636e\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4f7f\u75281\u4e07\u6761\u8bbe\u5907\u7aef\u5f55\u5236\u5b89\u9759\u573a\u666f\u201c\u5c0f\u4e91\u5c0f\u4e91\u201d\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u6700\u7ec8\u9762\u5411\u4e1a\u52a1\u7684\u6a21\u578b\u3002', '\u540e\u7eed\u7528\u6237\u53ef\u5728basetrain\u6a21\u578b\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528\u5176\u4ed6\u5173\u952e\u8bcd\u6570\u636e\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u65b0\u7684\u8bed\u97f3\u5524\u9192\u6a21\u578b\uff0c\u4f46\u6682\u65f6\u672a\u5f00\u653e\u6a21\u578bfinetune\u529f\u80fd\u3002']","title":"\u57fa\u4e8e\u6a21\u578b\u7684\u8bed\u4e49\u5207\u5206\u5668 (edu_model_text_spliter.py)"},{"location":"%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EMilvus%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BARAG%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%28%E6%89%A9%E5%B1%95%E8%B5%84%E6%96%99%29.html#_3","text":"\u672c\u7ae0\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86 EduRAG \u7cfb\u7edf\u4e2d\u7528\u4e8e\u5904\u7406\u539f\u59cb\u6587\u6863\u548c\u5207\u5206\u6587\u672c\u7684\u6838\u5fc3\u5de5\u5177\u3002\u5728\u6587\u6863\u89e3\u6790\u65b9\u9762\uff0c\u6211\u4eec\u5b66\u4e60\u4e86 edu_document_loaders \u76ee\u5f55\u4e0b\u7684\u5404\u4e2a\u52a0\u8f7d\u5668\u5982\u4f55\u5229\u7528 PyMuPDF , python-docx , python-pptx \u7b49\u5e93\u7ed3\u5408 RapidOCR \uff08\u901a\u8fc7 edu_ocr.py \u63d0\u4f9b\uff09\u6765\u5904\u7406 PDF\u3001DOCX\u3001PPTX \u53ca\u56fe\u50cf\u6587\u4ef6\uff0c\u6709\u6548\u63d0\u53d6\u6587\u672c\u548c\u56fe\u7247\u4e2d\u7684\u6587\u5b57\u3002\u5728\u6587\u672c\u5207\u5206\u65b9\u9762\uff0c\u6211\u4eec\u63a2\u8ba8\u4e86 edu_text_spliter \u76ee\u5f55\u63d0\u4f9b\u7684\u4e24\u79cd\u5de5\u5177\uff1a ChineseRecursiveTextSplitter \uff08\u9488\u5bf9\u4e2d\u6587\u4f18\u5316\u7684\u3001\u57fa\u4e8e\u89c4\u5219\u7684\u9012\u5f52\u5207\u5206\u5668\uff09\u548c AliTextSplitter \uff08\u5229\u7528 AI \u6a21\u578b\u8fdb\u884c\u8bed\u4e49\u5207\u5206\uff09\u3002\u7406\u89e3\u8fd9\u4e9b\u5e95\u5c42\u5de5\u5177\u7684\u529f\u80fd\u548c\u5b9e\u73b0\u662f\u638c\u63e1 RAG \u7cfb\u7edf\u6570\u636e\u5904\u7406\u6d41\u7a0b\u7684\u5173\u952e\u3002","title":"\u672c\u7ae0\u603b\u7ed3"}]}